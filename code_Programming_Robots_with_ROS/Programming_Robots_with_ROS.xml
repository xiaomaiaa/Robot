<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE dtbook PUBLIC "-//NISO//DTD dtbook 2005-3//EN" "http://www.daisy.org/z3986/2005/dtbook-2005-3.dtd">
<dtbook xmlns="http://www.daisy.org/z3986/2005/dtbook/" version="2005-3" xml:lang="eng">
  <head>
    <meta name="dtb:uid" content="9781449323899" />
    <meta name="dc:Identifier" content="9781449323899" />
    <meta name="dc:Title" content="Programming Robots with ROS" />
    <meta name="dc:Creator" content="Brian Gerkey, Morgan Quigley, William D. Smart" />
    <meta name="dc:Description" content="Want to develop novel robot applications, but don't know how to write a mapping or object recognition system? You're not alone, but you're certainly not without help. By combining real-world examples with valuable knowledge from the Robot Operating System (ROS) community, this practical book provides motivating recipes for solving specific robotics use cases.Ideal for enthusiasts, from students in robotics clubs to professional robotics scientists and engineers, each recipe describes a complete solution using ROS open source libraries and tools. You'll learn how to complete tasks described in the recipes, as well as how to configure and recombine components for other tasks. If you're familiar with Python, you're ready to go.Learn fundamentals, including key ROS concepts, tools, and patternsProgram robots that perform an increasingly complex set of behaviors, using the powerful packages in ROSSee how to easily add perception and navigation abilities to your robotsIntegrate your own sensors, actuators, software libraries, and even a whole robot into the ROS ecosystemLearn tips and tricks for using ROS tools and community resources, debugging robot behavior, and using C++ in ROS" />
    <meta name="dc:Publisher" content="Bookshare" />
    <meta name="dc:Date" content="2015-12-15" />
    <meta name="dc:Format" content="ANSI/NISO Z39.86-2005" />
    <meta name="dc:Language" content="en" />
  </head>
  <book>
    <frontmatter id="frontmatter_000001">
      <doctitle id="doctitle_000001">Programming Robots with ROS</doctitle>
      <docauthor id="docauthor_00000">Brian Gerkey</docauthor>
      <docauthor id="docauthor_00001">Morgan Quigley</docauthor>
      <docauthor id="docauthor_00002">William D. Smart</docauthor>
      <level1 id="bks_notice">
        <p id="bks_notice_001" smilref="Programming_Robots_with_ROS00001.smil#bks_notice_001">NOTICE</p>
      </level1>
      <level1 id="cover">
        <pagenum page="normal" id="pagenum_000001" smilref="Programming_Robots_with_ROS00001.smil#pagenum_000001" />
        <figure data-type="cover" id="figure_000001">
          <img src="images/cover.jpg" alt="" id="img_000001" />
        </figure>
      </level1>
      <level1 id="titlepage01">
        <section xmlns:epub="http://www.idpf.org/2007/ops" data-type="titlepage" epub:type="titlepage" data-pdf-bookmark="Programming Robots with ROS" id="section_000001">
          <h1 id="h1_000001" smilref="Programming_Robots_with_ROS00001.smil#h1_000001">Programming Robots with ROS</h1>
          <div class="preface" id="titlepage01-idm65920">
            <p class="author" id="p_000001">
              <span class="text" id="span_000001" smilref="Programming_Robots_with_ROS00001.smil#span_000001">Morgan Quigley, Brian Gerkey,</span>
              <br id="br_000001" />
              <span class="text" id="span_000002" smilref="Programming_Robots_with_ROS00001.smil#span_000002">and William D. Smart</span>
            </p>
          </div>
        </section>
      </level1>
      <level1 id="copyright-page01">
        <section xmlns:epub="http://www.idpf.org/2007/ops" data-type="copyright-page" epub:type="copyright-page" data-pdf-bookmark="Programming Robots with ROS" id="section_000002">
          <h1 id="h1_000002" smilref="Programming_Robots_with_ROS00001.smil#h1_000002">Programming Robots with ROS</h1>
          <div class="preface" id="copyright-page01-idm15200">
            <p class="author" id="p_000002">
              <span class="text" id="span_000003" smilref="Programming_Robots_with_ROS00001.smil#span_000003">by</span>
              <span class="firstname" id="span_000004" smilref="Programming_Robots_with_ROS00001.smil#span_000004">Morgan</span>
              <span class="text" id="span_000005" smilref="Programming_Robots_with_ROS00001.smil#span_000005">Quigley,</span>
              <span class="firstname" id="span_000006" smilref="Programming_Robots_with_ROS00001.smil#span_000006">Brian</span>
              <span class="text" id="span_000007" smilref="Programming_Robots_with_ROS00001.smil#span_000007">Gerkey, and</span>
              <span class="firstname" id="span_000008" smilref="Programming_Robots_with_ROS00001.smil#span_000008">William</span>
              <span class="othername mi" id="span_000009" smilref="Programming_Robots_with_ROS00001.smil#span_000009">D.</span>
              <span class="text" id="span_000010" smilref="Programming_Robots_with_ROS00001.smil#span_000010">Smart</span>
            </p>
            <p class="copyright" id="p_000003" smilref="Programming_Robots_with_ROS00001.smil#p_000003">Copyright Â© 2015 Morgan Quigley, Brian Gerkey, and William D. Smart. All rights reserved.</p>
            <p class="printlocation" id="p_000004" smilref="Programming_Robots_with_ROS00001.smil#p_000004">Printed in the United States of America.</p>
            <p class="publisher" id="p_000005" smilref="Programming_Robots_with_ROS00001.smil#p_000005">Published by O'Reilly Media, Inc., 1005 Gravenstein Highway North, Sebastopol, CA 95472.</p>
            <p id="p_000006">
              <span class="text" id="span_000011" smilref="Programming_Robots_with_ROS00001.smil#span_000011">O'Reilly books may be purchased for educational, business, or sales promotional use. Online editions are also available for most titles (</span>
              <a href="http://safaribooksonline.com" external="true" id="a_000001" smilref="Programming_Robots_with_ROS00001.smil#a_000001">http://safaribooksonline.com</a>
              <span class="text" id="span_000012" smilref="Programming_Robots_with_ROS00001.smil#span_000012">). For more information, contact our corporate/institutional sales department: 800-998-9938 or</span>
              <span data-type="email" id="span_000013">
                <em id="em_000001" smilref="Programming_Robots_with_ROS00001.smil#em_000001">corporate@oreilly.com</em>
              </span>
              <span class="text" id="span_000014" smilref="Programming_Robots_with_ROS00001.smil#span_000014">.</span>
            </p>
            <list type="ul" id="list_000001">
              <li class="staffrole" id="li_000001" smilref="Programming_Robots_with_ROS00001.smil#li_000001">Acquisitions Editor:
          Mike Loukides</li>
              <li class="staffrole" id="li_000002" smilref="Programming_Robots_with_ROS00001.smil#li_000002">Editors:
       Meghan Blanchette and Dawn Schanafelt</li>
              <li class="staffrole" id="li_000003" smilref="Programming_Robots_with_ROS00001.smil#li_000003">Production Editor:
       Matthew Hacker</li>
              <li class="staffrole" id="li_000004" smilref="Programming_Robots_with_ROS00001.smil#li_000004">Copyeditor:
       Rachel Head</li>
              <li class="staffrole" id="li_000005" smilref="Programming_Robots_with_ROS00001.smil#li_000005">Proofreader:
       Amanda Kersey</li>
              <li class="staffrole" id="li_000006" smilref="Programming_Robots_with_ROS00001.smil#li_000006">Indexer:
       WordCo Indexing Services, Inc.</li>
              <li class="staffrole" id="li_000007" smilref="Programming_Robots_with_ROS00001.smil#li_000007">Interior Designer:
       David Futato</li>
              <li class="staffrole" id="li_000008" smilref="Programming_Robots_with_ROS00001.smil#li_000008">Cover Designer:
       Ellie Volckhausen</li>
              <li class="staffrole" id="li_000009" smilref="Programming_Robots_with_ROS00001.smil#li_000009">Illustrator:
       Rebecca Demarest</li>
            </list>
            <list type="ul" id="list_000002">
              <li class="printedition" id="li_000010" smilref="Programming_Robots_with_ROS00001.smil#li_000010">December 2015:
       First Edition</li>
            </list>
            <h1 class="revisions" id="h1_000003" smilref="Programming_Robots_with_ROS00001.smil#h1_000003">Revision History for the First Edition</h1>
            <list type="ul" id="list_000003">
              <li class="revdate" id="li_000011" smilref="Programming_Robots_with_ROS00001.smil#li_000011">2015-11-18
         First Release</li>
            </list>
            <p class="errata" id="p_000007">
              <span class="text" id="span_000015" smilref="Programming_Robots_with_ROS00001.smil#span_000015">See</span>
              <a href="http://oreilly.com/catalog/errata.csp?isbn=9781449323899" external="true" id="a_000002" smilref="Programming_Robots_with_ROS00001.smil#a_000002">http://oreilly.com/catalog/errata.csp?isbn=9781449323899</a>
              <span class="text" id="span_000016" smilref="Programming_Robots_with_ROS00001.smil#span_000016">for release details.</span>
            </p>
            <div class="legal" id="div_000001">
              <p id="p_000008">
                <span class="text" id="span_000017" smilref="Programming_Robots_with_ROS00001.smil#span_000017">The O'Reilly logo is a registered trademark of O'Reilly Media, Inc.</span>
                <em id="em_000002" smilref="Programming_Robots_with_ROS00001.smil#em_000002">Programming Robots with ROS</em>
                <span class="text" id="span_000018" smilref="Programming_Robots_with_ROS00001.smil#span_000018">, the cover image of a Salim Ali's fruit bat, and related trade dress are trademarks of O'Reilly Media, Inc.</span>
              </p>
              <p id="p_000009" smilref="Programming_Robots_with_ROS00001.smil#p_000009">While the publisher and the authors have used good faith efforts to ensure that the information and instructions contained in this work are accurate, the publisher and the authors disclaim all responsibility for errors or omissions, including without limitation responsibility for damages resulting from the use of or reliance on this work. Use of the information and instructions contained in this work is at your own risk. If any code samples or other technology this work contains or describes is subject to open source licenses or the intellectual property rights of others, it is your responsibility to ensure that your use thereof complies with such licenses and/or rights.</p>
            </div>
            <div class="copyright-bottom" id="div_000002">
              <p class="isbn" id="p_000010" smilref="Programming_Robots_with_ROS00001.smil#p_000010">978-1-4493-2389-9</p>
              <p class="printer" id="p_000011" smilref="Programming_Robots_with_ROS00001.smil#p_000011">[LSI]</p>
            </div>
          </div>
        </section>
      </level1>
      <level1 id="preface01">
        <section xmlns:epub="http://www.idpf.org/2007/ops" data-type="preface" epub:type="preface" data-pdf-bookmark="Preface" id="section_000003">
          <h1 id="h1_000004" smilref="Programming_Robots_with_ROS00001.smil#h1_000004">Preface</h1>
          <div class="preface" id="preface01-idp701552">
            <p id="p_000012" smilref="Programming_Robots_with_ROS00001.smil#p_000012">ROS, the Robot Operating System, is an open source framework for getting robots to do things. ROS is meant to serve as a common software platform for people who are building and using robots. This common platform lets people share code and ideas more readily and, perhaps more importantly, means that you do not have to spend years writing software infrastructure before your robots start moving!</p>
            <p id="p_000013">
              <span class="text" id="span_000019" smilref="Programming_Robots_with_ROS00001.smil#span_000019">ROS has been remarkably successful. At the time of writing, in the official distribution of ROS, there are over 2,000 software packages, written and maintained by almost 600 people. Approximately 80 commercially available robots are supported, and we can find at least 1,850 academic papers that mention ROS. We no longer have to write everything from scratch, especially if we're working with one of the many robots that support ROS, and can spend more time thinking about</span>
              <em id="em_000003" smilref="Programming_Robots_with_ROS00001.smil#em_000003">robotics</em>
              <span class="text" id="span_000020" smilref="Programming_Robots_with_ROS00001.smil#span_000020">, rather than bit-fiddling and device drivers.</span>
            </p>
            <p id="preface01-idm11200" data-type="indexterm" data-primary="ROS" data-secondary="basic components of" smilref="Programming_Robots_with_ROS00001.smil#preface01-idm11200">ROS consists of a number of parts:</p>
            <list type="ol" id="list_000004">
              <li id="li_000012">
                <p id="p_000014" smilref="Programming_Robots_with_ROS00001.smil#p_000014">A set of drivers that let you read data from sensors and send commands to motors and other actuators, in an abstracted, well-defined format. A wide variety of popular hardware is supported, including a growing number of commercially available robot systems.</p>
              </li>
              <li id="li_000013">
                <p id="p_000015" smilref="Programming_Robots_with_ROS00001.smil#p_000015">A large and growing collection of fundamental robotics algorithms that allow you to build maps of the world, navigate around it, represent and interpret sensor data, plan motions, manipulate objects, and do a lot of other stuff. ROS has become very popular in the robotics research community, and a lot of cutting-edge algorithms are now available in ROS.</p>
              </li>
              <li id="li_000014">
                <p id="p_000016" smilref="Programming_Robots_with_ROS00001.smil#p_000016">All of the computational infrastructure that allows you to move data around, to connect the various components of a complex robot system, and to incorporate your own algorithms. ROS is inherently distributed and allows you to split the workload across multiple computers seamlessly.</p>
              </li>
              <li id="li_000015">
                <p id="p_000017" smilref="Programming_Robots_with_ROS00001.smil#p_000017">A large set of tools that make it easy to visualize the state of the robot and the algorithms, debug faulty behaviors, and record sensor data. Debugging robot software is notoriously difficult, and this rich set of tools is one of the things that make ROS as powerful as it is.</p>
              </li>
              <li id="li_000016">
                <p id="p_000018" smilref="Programming_Robots_with_ROS00001.smil#p_000018">Finally, the larger ROS ecosystem includes an extensive set of resources, such as a wiki that documents many of the aspects of the framework, a question-and-answer site where you can ask for help and share what you've learned, and a thriving community of users and developers.</p>
              </li>
            </list>
            <p id="p_000019" smilref="Programming_Robots_with_ROS00001.smil#p_000019">So, why should you learn ROS? The short answer is because it will save you time. ROS provides all the parts of a robot software system that you would otherwise have to write. It allows you to focus on the parts of the system that you care about, without worrying about the parts that you don't care about.</p>
            <p class="keep-together" id="p_000020">
              <span class="text" id="span_000021" smilref="Programming_Robots_with_ROS00001.smil#span_000021">Why should you read this book? There's a lot of material on the ROS wiki, including detailed tutorials for many aspects of the framework. A thriving user community is ready to answer your questions on</span>
              <a href="http://answers.ros.org" external="true" id="a_000003">
                <em class="hyperlink" id="em_000004" smilref="Programming_Robots_with_ROS00001.smil#em_000004">http://answers.ros.org</em>
              </a>
              <span class="text" id="span_000022" smilref="Programming_Robots_with_ROS00001.smil#span_000022">. Why not just learn ROS from these resources? What we've tried to do in this book is to lay things out in a more ordered way and to give comprehensive examples of how you can use ROS to do interesting things with real and simulated robots. We've also tried to include tips and hints about how to structure your code, how to debug your code when it causes the robot to do something unexpected, and how to become part of the ROS community.</span>
            </p>
            <p id="p_000021" smilref="Programming_Robots_with_ROS00001.smil#p_000021">There's a fair amount of complexity in ROS, especially if you're not a seasoned programmer; distributed computation, multithreading, event-driven programming, and a host of other concepts lie at the heart of the system. If you're not already familiar with at least some of these, ROS can have a daunting learning curve. This book is an attempt to flatten out that curve a bit by introducing you to the basics of ROS and giving you some practical examples of how to use it for real applications on real (and simulated) robots.</p>
            <section data-type="sect1" data-pdf-bookmark="Who Should Read This Book?" id="section_000004">
              <h1 id="h1_000005" smilref="Programming_Robots_with_ROS00001.smil#h1_000005">Who Should Read This Book?</h1>
              <div class="sect1" id="preface01-idm40400">
                <p id="p_000022" smilref="Programming_Robots_with_ROS00001.smil#p_000022">If you want to make your robots do things in the real world, but don't want to spend time reinventing the wheel, then this book is for you. ROS includes all of the computational infrastructure you'll need to get your robots up and running and enough robotics algorithms to get them doing interesting things quickly.</p>
                <p id="p_000023" smilref="Programming_Robots_with_ROS00001.smil#p_000023">If you're interested in some particular aspect, like path planning, and want to investigate it in the context of a larger robot system, then this book is for you. We'll show you how to get your robot doing interesting things using the infrastructure and algorithms in ROS and how to swap out some of the existing algorithms for your own.</p>
                <p id="p_000024" smilref="Programming_Robots_with_ROS00001.smil#p_000024">If you want to get an introduction to the basic mechanisms of ROS and an overview of some of the things that are possible, but you're a bit daunted by the scale of the information on the wiki, then this book is for you. We'll give you a tour of the basic mechanisms and tools in ROS and concrete examples of complete systems that you can build on and adapt.</p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Who Should Not Read This Book?" id="section_000005">
              <h1 id="h1_000006" smilref="Programming_Robots_with_ROS00001.smil#h1_000006">Who Should Not Read This Book?</h1>
              <div class="sect1" id="preface01-idp7106864">
                <p id="p_000025" smilref="Programming_Robots_with_ROS00001.smil#p_000025">Although we don't want to exclude anyone from reading this book, it's probably not the right resource for everyone. We make certain implicit assumptions about the robots that you will be using. They are probably running Linux, and have decent computational resources (at least equivalent to a laptop computer). They have sophisticated sensors, such as a Microsoft Kinect. They are ground-based, and probably can move about the world. If your robots don't fall into at least some of these categories, the examples in this book might not be immediately relevant to you, although the material on the underlying mechanisms and tools should be.</p>
                <p id="p_000026" smilref="Programming_Robots_with_ROS00001.smil#p_000026">This book is primarily about ROS, and not about robotics. While you will learn a bit about robotics here, we don't go into great depth about many of the algorithms in ROS. If you're looking for a broad introduction to robotics, then this book isn't the one you're looking for.</p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="What You'll Learn" id="section_000006">
              <h1 id="h1_000007" smilref="Programming_Robots_with_ROS00001.smil#h1_000007">What You'll Learn</h1>
              <div class="sect1" id="preface01-idp12641696">
                <p id="p_000027" smilref="Programming_Robots_with_ROS00001.smil#p_000027">This book is meant to be a broad introduction to programming robots with ROS. We'll cover the important aspects of the basic mechanisms and tools that make up the core of ROS and show you how to use them to create software to control your robots. We'll show you concrete examples of how you can use ROS to do some interesting things with your robots and give you advice on how to build on these examples to create your own systems.</p>
                <p id="p_000028" smilref="Programming_Robots_with_ROS00001.smil#p_000028">In addition to the technical material, we'll also show you how to navigate the larger ROS ecosystem, such as the wiki and the Q&amp;A forum, and how to become a part of the global ROS community, sharing your code and newly found knowledge with other roboticists across the world.</p>
              </div>
            </section>
            <section data-type="sect1" class="pagebreak-before" data-pdf-bookmark="Prerequisites" id="section_000007">
              <h1 id="h1_000008" smilref="Programming_Robots_with_ROS00001.smil#h1_000008">Prerequisites</h1>
              <div class="sect1" id="preface01-idm118064">
                <p data-type="indexterm" data-primary="Python" id="preface01-idm116080">
                  <span class="text" id="span_000023" smilref="Programming_Robots_with_ROS00001.smil#span_000023">There are a few things that you need to know before you can really use the material in this book. Since ROS is a software framework, you really need to know how to program to properly understand it. Although it's possible to program in ROS in a variety of languages, in this book we're going to be using Python. If you don't know Python, then a lot of the code here isn't going to make much sense. Fortunately, Python</span>
                  <span class="keep-together" id="span_000024" smilref="Programming_Robots_with_ROS00001.smil#span_000024">is an easy language to</span>
                  <span class="text" id="span_000025" smilref="Programming_Robots_with_ROS00001.smil#span_000025">learn! There are many excellent reference books and free</span>
                  <span class="keep-together" id="span_000026" smilref="Programming_Robots_with_ROS00001.smil#span_000026">websites available for</span>
                  <span class="text" id="span_000027" smilref="Programming_Robots_with_ROS00001.smil#span_000027">learning Python, starting with the official Python website:</span>
                  <span class="keep-together" id="span_000028">
                    <a href="http://python.org" external="true" id="a_000004">
                      <em class="hyperlink" id="em_000005" smilref="Programming_Robots_with_ROS00001.smil#em_000005">http://python.org</em>
                    </a>
                  </span>
                  <span class="text" id="span_000029" smilref="Programming_Robots_with_ROS00001.smil#span_000029">.</span>
                </p>
                <p id="preface01-idm100160" data-type="indexterm" data-primary="Linux" smilref="Programming_Robots_with_ROS00001.smil#preface01-idm100160">ROS works best in an Ubuntu Linux environment, and having some previous exposure to Linux will make your life a lot easier. We'll try to introduce the important parts of Linux as we go, but having a basic understanding of the filesystem, the bash command shell, and at least one text editor will help you concentrate on the ROS-specific material.</p>
                <p id="p_000029" smilref="Programming_Robots_with_ROS00001.smil#p_000029">A basic understanding of robotics, while not strictly necessary to learn ROS, will also be helpful. Knowing something about the underlying mathematics used by robotics, such as coordinate transforms and kinematic chains, will be useful for understanding some of the ROS mechanisms that we talk about. Again, we'll try to give a brief introduction to some of this material, but if you're not familiar with it, you might want to take a side track and dig into the robotics literature to fill in some background.</p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Conventions Used in This Book" id="section_000008">
              <h1 id="h1_000009" smilref="Programming_Robots_with_ROS00001.smil#h1_000009">Conventions Used in This Book</h1>
              <div class="sect1" id="preface01-idm97248">
                <p id="p_000030" smilref="Programming_Robots_with_ROS00001.smil#p_000030">The following typographical conventions are used in this book:</p>
                <dl id="dl_000001">
                  <dt id="dt_000001">
                    <em id="em_000006" smilref="Programming_Robots_with_ROS00001.smil#em_000006">Italic</em>
                  </dt>
                  <dd id="dd_000001">
                    <p id="p_000031" smilref="Programming_Robots_with_ROS00001.smil#p_000031">Indicates new terms, URLs, email addresses, directory and pathnames, filenames, and file extensions.</p>
                  </dd>
                  <dt id="dt_000002">
                    <code xml:space="preserve" id="code_000001" smilref="Programming_Robots_with_ROS00001.smil#code_000001">Constant width</code>
                  </dt>
                  <dd id="dd_000002">
                    <p id="p_000032" smilref="Programming_Robots_with_ROS00001.smil#p_000032">Used for program listings, as well as within paragraphs to refer to program elements such as variable or function names, namespaces, data types, environment variables, statements, and keywords. Also used for commands, command-line utilities, and ROS packages, nodes, topics, etc.</p>
                  </dd>
                  <dt id="dt_000003">
                    <strong id="strong_000001">
                      <code xml:space="preserve" id="code_000002" smilref="Programming_Robots_with_ROS00001.smil#code_000002">Constant width bold</code>
                    </strong>
                  </dt>
                  <dd id="dd_000003">
                    <p id="p_000033" smilref="Programming_Robots_with_ROS00001.smil#p_000033">Shows commands or other text that should be typed literally by the user.</p>
                  </dd>
                  <dt id="dt_000004">
                    <em id="em_000007">
                      <code xml:space="preserve" id="code_000003" smilref="Programming_Robots_with_ROS00001.smil#code_000003">Constant width italic</code>
                    </em>
                  </dt>
                  <dd id="dd_000004">
                    <p id="p_000034" smilref="Programming_Robots_with_ROS00001.smil#p_000034">Shows text that should be replaced with user-supplied values or by values determined by context.</p>
                  </dd>
                </dl>
                <h1 id="h1_000010" smilref="Programming_Robots_with_ROS00001.smil#h1_000010">Note</h1>
                <div data-type="note" epub:type="note" id="div_000003">
                  <p id="p_000035" smilref="Programming_Robots_with_ROS00001.smil#p_000035">This icon indicates a general note.</p>
                </div>
                <h1 id="h1_000011" smilref="Programming_Robots_with_ROS00001.smil#h1_000011">Tip</h1>
                <div data-type="tip" id="div_000004">
                  <p id="p_000036" smilref="Programming_Robots_with_ROS00001.smil#p_000036">This icon signifies a tip or suggestion.</p>
                </div>
                <h1 id="h1_000012" smilref="Programming_Robots_with_ROS00001.smil#h1_000012">Warning</h1>
                <div data-type="warning" epub:type="warning" id="div_000005">
                  <p id="p_000037" smilref="Programming_Robots_with_ROS00001.smil#p_000037">This icon indicates a warning or caution.</p>
                </div>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Using Code Examples" id="section_000009">
              <h1 id="h1_000013" smilref="Programming_Robots_with_ROS00001.smil#h1_000013">Using Code Examples</h1>
              <div class="sect1" id="preface01-idp1380608">
                <p id="p_000038">
                  <span class="text" id="span_000030" smilref="Programming_Robots_with_ROS00001.smil#span_000030">Supplemental material (code examples, exercises, etc.) is available for download:</span>
                  <a href="https://github.com/osrf/rosbook" external="true" id="a_000005">
                    <em class="hyperlink" id="em_000008" smilref="Programming_Robots_with_ROS00001.smil#em_000008">https://github.com/osrf/rosbook</em>
                  </a>
                  <span class="text" id="span_000031" smilref="Programming_Robots_with_ROS00001.smil#span_000031">.</span>
                </p>
                <p id="p_000039" smilref="Programming_Robots_with_ROS00001.smil#p_000039">This book is here to help you get your job done. To that end, the examples in the above-linked repository are available under the Apache 2.0 License, which permits very broad reuse of the code.</p>
                <p id="p_000040">
                  <span class="text" id="span_000032" smilref="Programming_Robots_with_ROS00001.smil#span_000032">We appreciate, but do not require, attribution. An attribution usually includes the title, author, publisher, and ISBN. For example: "</span>
                  <em id="em_000009" smilref="Programming_Robots_with_ROS00001.smil#em_000009">Programming Robots with ROS</em>
                  <span class="text" id="span_000033" smilref="Programming_Robots_with_ROS00001.smil#span_000033">by Morgan Quigley, Brian Gerkey, and William D. Smart (O'Reilly). Copyright 2015 Morgan Quigley, Brian Gerkey, and William D. Smart, 978-1-4493-2389-9."</span>
                </p>
                <p id="p_000041">
                  <span class="text" id="span_000034" smilref="Programming_Robots_with_ROS00001.smil#span_000034">If you feel your use of code examples falls outside fair use or the permission given above, feel free to contact us at</span>
                  <a class="email" href="mailto:permissions@oreilly.com" external="true" id="a_000006">
                    <em id="em_000010" smilref="Programming_Robots_with_ROS00001.smil#em_000010">permissions@oreilly.com</em>
                  </a>
                  <span class="text" id="span_000035" smilref="Programming_Robots_with_ROS00001.smil#span_000035">.</span>
                </p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="SafariÂ® Books Online" id="section_000010">
              <h1 id="h1_000014" smilref="Programming_Robots_with_ROS00001.smil#h1_000014">SafariÂ® Books Online</h1>
              <div class="sect1" id="preface01-idp38304">
                <h1 id="h1_000015" smilref="Programming_Robots_with_ROS00001.smil#h1_000015">Note</h1>
                <div data-type="note" epub:type="note" class="safarienabled" id="div_000006">
                  <p id="p_000042">
                    <a href="http://safaribooksonline.com" class="orm:hideurl:ital" external="true" id="a_000007">
                      <em class="hyperlink" id="em_000011" smilref="Programming_Robots_with_ROS00001.smil#em_000011">Safari Books Online</em>
                    </a>
                    <span class="text" id="span_000036" smilref="Programming_Robots_with_ROS00001.smil#span_000036">is an on-demand digital library that delivers expert</span>
                    <a href="https://www.safaribooksonline.com/explore/" class="orm:hideurl" external="true" id="a_000008" smilref="Programming_Robots_with_ROS00001.smil#a_000008">content</a>
                    <span class="text" id="span_000037" smilref="Programming_Robots_with_ROS00001.smil#span_000037">in both book and video form from the world's leading authors in technology and business.</span>
                  </p>
                </div>
                <p id="p_000043" smilref="Programming_Robots_with_ROS00001.smil#p_000043">Technology professionals, software developers, web designers, and business and creative professionals use Safari Books Online as their primary resource for research, problem solving, learning, and certification training.</p>
                <p id="p_000044">
                  <span class="text" id="span_000038" smilref="Programming_Robots_with_ROS00001.smil#span_000038">Safari Books Online offers a range of</span>
                  <a href="https://www.safaribooksonline.com/pricing/" class="orm:hideurl" external="true" id="a_000009" smilref="Programming_Robots_with_ROS00001.smil#a_000009">plans and pricing</a>
                  <span class="text" id="span_000039" smilref="Programming_Robots_with_ROS00001.smil#span_000039">for</span>
                  <a href="https://www.safaribooksonline.com/enterprise/" class="orm:hideurl" external="true" id="a_000010" smilref="Programming_Robots_with_ROS00001.smil#a_000010">enterprise</a>
                  <span class="text" id="span_000040" smilref="Programming_Robots_with_ROS00001.smil#span_000040">,</span>
                  <a href="https://www.safaribooksonline.com/government/" class="orm:hideurl" external="true" id="a_000011" smilref="Programming_Robots_with_ROS00001.smil#a_000011">government</a>
                  <span class="text" id="span_000041" smilref="Programming_Robots_with_ROS00001.smil#span_000041">,</span>
                  <a href="https://www.safaribooksonline.com/academic-public-library/" class="orm:hideurl" external="true" id="a_000012" smilref="Programming_Robots_with_ROS00001.smil#a_000012">education</a>
                  <span class="text" id="span_000042" smilref="Programming_Robots_with_ROS00001.smil#span_000042">, and individuals.</span>
                </p>
                <p class="keep-together" id="p_000045">
                  <span class="text" id="span_000043" smilref="Programming_Robots_with_ROS00001.smil#span_000043">Members have access to thousands of books, training videos, and prepublication manuscripts in one fully searchable database from publishers like O'Reilly Media, Prentice Hall Professional, Addison-Wesley Professional, Microsoft Press, Sams, Que, Peachpit Press, Focal Press, Cisco Press, John Wiley &amp; Sons, Syngress, Morgan Kaufmann, IBM Redbooks, Packt, Adobe Press, FT Press, Apress, Manning, New Riders, McGraw-Hill, Jones &amp; Bartlett, Course Technology, and hundreds</span>
                  <a href="https://www.safaribooksonline.com/our-library/" class="orm:hideurl" external="true" id="a_000013" smilref="Programming_Robots_with_ROS00001.smil#a_000013">more</a>
                  <span class="text" id="span_000044" smilref="Programming_Robots_with_ROS00001.smil#span_000044">. For more information about Safari Books Online, please visit us</span>
                  <a class="orm:hideurl" href="http://safaribooksonline.com" external="true" id="a_000014" smilref="Programming_Robots_with_ROS00001.smil#a_000014">online</a>
                  <span class="text" id="span_000045" smilref="Programming_Robots_with_ROS00001.smil#span_000045">.</span>
                </p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="How to Contact Us" id="section_000011">
              <h1 id="h1_000016" smilref="Programming_Robots_with_ROS00001.smil#h1_000016">How to Contact Us</h1>
              <div class="sect1" id="preface01-idp31040">
                <p id="p_000046" smilref="Programming_Robots_with_ROS00001.smil#p_000046">Please address comments and questions concerning this book to the publisher:</p>
                <list type="ul" id="list_000005">
                  <li id="li_000017" smilref="Programming_Robots_with_ROS00001.smil#li_000017">O'Reilly Media, Inc.</li>
                  <li id="li_000018" smilref="Programming_Robots_with_ROS00001.smil#li_000018">1005 Gravenstein Highway North</li>
                  <li id="li_000019" smilref="Programming_Robots_with_ROS00001.smil#li_000019">Sebastopol, CA 95472</li>
                  <li id="li_000020" smilref="Programming_Robots_with_ROS00001.smil#li_000020">800-998-9938 (in the United States or Canada)</li>
                  <li id="li_000021" smilref="Programming_Robots_with_ROS00001.smil#li_000021">707-829-0515 (international or local)</li>
                  <li id="li_000022" smilref="Programming_Robots_with_ROS00001.smil#li_000022">707-829-0104 (fax)</li>
                </list>
                <p id="p_000047">
                  <span class="text" id="span_000046" smilref="Programming_Robots_with_ROS00001.smil#span_000046">We have a web page for this book, where we list errata, examples, and any additional information. You can access this page at</span>
                  <a href="http://bit.ly/prog_robots_w_ros" external="true" id="a_000015">
                    <em class="hyperlink" id="em_000012" smilref="Programming_Robots_with_ROS00001.smil#em_000012">http://bit.ly/prog_robots_w_ros</em>
                  </a>
                  <span class="text" id="span_000047" smilref="Programming_Robots_with_ROS00001.smil#span_000047">.</span>
                </p>
                <p id="p_000048">
                  <span class="text" id="span_000048" smilref="Programming_Robots_with_ROS00001.smil#span_000048">To comment or ask technical questions about this book, send email to</span>
                  <a class="email" href="mailto:bookquestions@oreilly.com" external="true" id="a_000016">
                    <em id="em_000013" smilref="Programming_Robots_with_ROS00001.smil#em_000013">bookquestions@oreilly.com</em>
                  </a>
                  <span class="text" id="span_000049" smilref="Programming_Robots_with_ROS00001.smil#span_000049">.</span>
                </p>
                <p id="p_000049">
                  <span class="text" id="span_000050" smilref="Programming_Robots_with_ROS00001.smil#span_000050">For more information about our books, courses, conferences, and news, see our website at</span>
                  <a href="http://www.oreilly.com" external="true" id="a_000017">
                    <em class="hyperlink" id="em_000014" smilref="Programming_Robots_with_ROS00001.smil#em_000014">http://www.oreilly.com</em>
                  </a>
                  <span class="text" id="span_000051" smilref="Programming_Robots_with_ROS00001.smil#span_000051">.</span>
                </p>
                <p id="p_000050">
                  <span class="text" id="span_000052" smilref="Programming_Robots_with_ROS00001.smil#span_000052">Find us on Facebook:</span>
                  <a href="http://facebook.com/oreilly" external="true" id="a_000018">
                    <em class="hyperlink" id="em_000015" smilref="Programming_Robots_with_ROS00001.smil#em_000015">http://facebook.com/oreilly</em>
                  </a>
                </p>
                <p id="p_000051">
                  <span class="text" id="span_000053" smilref="Programming_Robots_with_ROS00001.smil#span_000053">Follow us on Twitter:</span>
                  <a href="http://twitter.com/oreillymedia" external="true" id="a_000019">
                    <em class="hyperlink" id="em_000016" smilref="Programming_Robots_with_ROS00001.smil#em_000016">http://twitter.com/oreillymedia</em>
                  </a>
                </p>
                <p id="p_000052">
                  <span class="text" id="span_000054" smilref="Programming_Robots_with_ROS00001.smil#span_000054">Watch us on YouTube:</span>
                  <a href="http://www.youtube.com/oreillymedia" external="true" id="a_000020">
                    <em class="hyperlink" id="em_000017" smilref="Programming_Robots_with_ROS00001.smil#em_000017">http://www.youtube.com/oreillymedia</em>
                  </a>
                </p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Acknowledgments" id="section_000012">
              <h1 id="h1_000017" smilref="Programming_Robots_with_ROS00001.smil#h1_000017">Acknowledgments</h1>
              <div class="sect1" id="preface01-idp31632">
                <p id="p_000053" smilref="Programming_Robots_with_ROS00001.smil#p_000053">First and foremost, we would like to thank our editors at O'Reilly, Mike Loukides, Meg Blanchette, and Dawn Schanafelt, all of whom showed great patience and uncommon restraint with us as we put this book together. We'd also like to thank everyone who gave us feedback on early drafts of the book, especially Andreas Bihlmaier, Jon Bohren, Zach Dodds, and Kat Scott. Their comments and suggestions made this a much better book.</p>
                <p id="p_000054" smilref="Programming_Robots_with_ROS00001.smil#p_000054">Thanks, also, to everyone who's helped us figure out how to make ROS do the right thing on our robots. Mike Ferguson helped with the Fetch examples. Steve Peters, Nate Koenig, and John Hsu from the Open Source Robotics Foundation (OSRF) answered some gnarly Gazebo simulation questions. William Woodall and Tully Foote (both from the OSRF) fielded a number of general ROS hacking questions.</p>
                <p id="p_000055" smilref="Programming_Robots_with_ROS00001.smil#p_000055">Thanks as well to Dylan Jones, who caught a code bug at the last minute before the book went to press.</p>
                <p id="p_000056" smilref="Programming_Robots_with_ROS00001.smil#p_000056">Finally, we'd like to thank all of the authors, maintainers, and users in the worldwide ROS community. If it wasn't for them, ROS would not be what it is today, and we would not be writing this preface.</p>
              </div>
            </section>
          </div>
        </section>
      </level1>
    </frontmatter>
    <bodymatter id="bodymatter_000001">
      <level1 xmlns:epub="http://www.idpf.org/2007/ops" data-type="part" epub:type="part" class="pagenumrestart" data-pdf-bookmark="Part I. Fundamentals" id="part01">
        <h1 id="h1_000018" smilref="Programming_Robots_with_ROS00001.smil#h1_000018">Part I. Fundamentals</h1>
        <p id="p_000057" />
      </level1>
      <level1 id="ch01">
        <section xmlns:epub="http://www.idpf.org/2007/ops" data-type="chapter" epub:type="chapter" data-pdf-bookmark="Chapter 1. Introduction" id="section_000013">
          <h1 id="h1_000019" smilref="Programming_Robots_with_ROS00001.smil#h1_000019">Chapter 1. Introduction</h1>
          <div class="chapter" id="ch01-intro">
            <p id="ch01-ix_1-intro-asciidoc0" data-type="indexterm" data-primary="ROS" data-secondary="basics" smilref="Programming_Robots_with_ROS00001.smil#ch01-ix_1-intro-asciidoc0">The Robot Operating System (ROS) is a framework for writing robot software. It is a collection of tools, libraries, and conventions that aim to simplify the task of creating complex and robust robot behavior across a wide variety of robotic platforms.</p>
            <p id="p_000058">
              <span class="text" id="span_000055" smilref="Programming_Robots_with_ROS00001.smil#span_000055">Why? Because creating truly robust, general-purpose robot software is</span>
              <em id="em_000018" smilref="Programming_Robots_with_ROS00001.smil#em_000018">hard</em>
              <span class="text" id="span_000056" smilref="Programming_Robots_with_ROS00001.smil#span_000056">. From the robot's perspective, many problems that seem trivial to humans can actually encompass wild variations between instances of tasks and environments.</span>
            </p>
            <p id="p_000059" smilref="Programming_Robots_with_ROS00001.smil#p_000059">Consider a simple "fetch an item" task, where an office-assistant robot is instructed to retrieve a stapler. First, the robot must understand the request, either verbally or through some other modality, such as a web interface, email, or even SMS. Then, the robot must start some sort of planner to coordinate the search for the item, which will likely require navigating through various rooms in a building, perhaps including elevators and doors. Once arriving in a room, the robot must search desks cluttered with similarly sized objects (since all handheld objects are roughly the same size) and find a stapler. The robot must then retrace its steps and deliver the stapler to the desired location. Each of those subproblems can have arbitrary numbers of complicating factors. And this was a relatively simple task!</p>
            <p id="p_000060">
              <span class="text" id="span_000057" smilref="Programming_Robots_with_ROS00001.smil#span_000057">Dealing with real-world variations in complex tasks and environments is so difficult that no single individual, laboratory, or institution can hope to build a complete system from scratch. As a result, ROS was built from the ground up to encourage</span>
              <em id="em_000019" smilref="Programming_Robots_with_ROS00001.smil#em_000019">collaborative</em>
              <span class="text" id="span_000058" smilref="Programming_Robots_with_ROS00001.smil#span_000058">robotics software development. For example, in the "fetch a stapler" problem, one organization might have experts in mapping indoor environments and could contribute a complex yet easy-to-use system for producing indoor maps. Another group might have expertise in using maps to robustly navigate indoor environments. Yet another group might have discovered a particular computer vision approach that works well for recognizing small objects in clutter. ROS includes many features specifically designed to simplify this type of large-scale collaboration.</span>
            </p>
            <section data-type="sect1" data-pdf-bookmark="Brief History" id="section_000014">
              <h1 id="h1_000020" smilref="Programming_Robots_with_ROS00001.smil#h1_000020">Brief History</h1>
              <div class="sect1" id="ch01-idp23984">
                <p id="ch01-idp25184" data-type="indexterm" data-primary="history of ROS" data-secondary="history of" smilref="Programming_Robots_with_ROS00001.smil#ch01-idp25184">ROS is a large project that has many ancestors and contributors. The need for an open collaboration framework was felt by many people in the robotics research community. Various projects at Stanford University in the mid-2000s involving integrative, embodied AI, such as the STanford AI Robot (STAIR) and the Personal Robots (PR) program, created in-house prototypes of the types of flexible, dynamic software systems described in this book. In 2007, Willow Garage, Inc., a nearby robotics incubator, provided significant resources to extend these concepts much further and create well-tested implementations. The effort was boosted by countless researchers who contributed their time and expertise to the core of ROS and its fundamental software packages. Throughout, the software was developed in the open using the permissive BSD open source license, and it gradually became widely used in the robotics research community.</p>
                <p id="p_000061" smilref="Programming_Robots_with_ROS00001.smil#p_000061">From the start, ROS was being developed at multiple institutions and for multiple robots. At first, this seemed like a headache, since it would have been far simpler for all contributors to place their code on the same servers. Ironically, over the years, this has emerged as one of the great strengths of the ROS ecosystem: any group can start their own ROS code repository on their own servers, and they will maintain full ownership and control of it. They don't need anyone's permission. If they choose to make their repository publicly visible, they can receive the recognition and credit they deserve for their achievements and benefit from specific technical feedback and improvements like all open source software projects.</p>
                <p class="keep-together" id="p_000062" smilref="Programming_Robots_with_ROS00001.smil#p_000062">The ROS ecosystem now consists of tens of thousands of users worldwide, working in domains ranging from tabletop hobby projects to large industrial automation systems.</p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Philosophy" id="section_000015">
              <h1 id="h1_000021" smilref="Programming_Robots_with_ROS00001.smil#h1_000021">Philosophy</h1>
              <div class="sect1" id="ch01-idp175008">
                <p id="ch01-ix_1-intro-asciidoc1" data-type="indexterm" data-primary="development philosophy, ROS" data-secondary="development philosophy" smilref="Programming_Robots_with_ROS00001.smil#ch01-ix_1-intro-asciidoc1">All software frameworks impose their development philosophies on their contributors directly or indirectly, through their idioms and common practices. Broadly speaking, ROS follows the Unix philosophy of software development in several key aspects. This tends to make ROS feel "natural" for developers coming from a Unix background but somewhat "cryptic" at first for those who have primarily used graphical development environments on Windows or Mac OS X. The following paragraphs describe several philosophical aspects of ROS:</p>
                <dl id="dl_000002">
                  <dt id="dt_000005" smilref="Programming_Robots_with_ROS00001.smil#dt_000005">Peer to peer</dt>
                  <dd id="dd_000005">
                    <p data-type="indexterm" data-primary="message" data-secondary="and peer-to-peer development philosophy" id="ch01-idp194128">
                      <span class="text" id="span_000059" smilref="Programming_Robots_with_ROS00001.smil#span_000059">ROS systems consist of numerous small computer programs that connect to one another and continuously exchange</span>
                      <em id="em_000020" smilref="Programming_Robots_with_ROS00001.smil#em_000020">messages</em>
                      <span class="text" id="span_000060" smilref="Programming_Robots_with_ROS00001.smil#span_000060">. These messages travel directly from one program to another; there is no central routing service. Although this makes the underlying "plumbing" more complex, the result is a system that scales better as the amount of data increases.</span>
                    </p>
                  </dd>
                  <dt id="dt_000006" smilref="Programming_Robots_with_ROS00001.smil#dt_000006">Tools-based</dt>
                  <dd id="dd_000006">
                    <p id="ch01-idp197776" data-type="indexterm" data-primary="tools-based development philosophy" smilref="Programming_Robots_with_ROS00001.smil#ch01-idp197776">As demonstrated by the enduring architecture of Unix, complex software systems can be created from many small, generic programs. Unlike many other robotics software frameworks, ROS does not have a canonical integrated development and runtime environment. Tasks such as navigating the source code tree, visualizing the system interconnections, graphically plotting data streams, generating documentation, logging data, etc. are all performed by separate programs. This encourages the creation of new, improved implementations, since (ideally) they can be exchanged for implementations better suited for a particular task domain. Recent versions of ROS allow many of these tools to be composed into single processes for efficiency or to create coherent interfaces for operators or debugging, but the principle remains the same: the individual tools themselves are relatively small and generic.</p>
                  </dd>
                  <dt id="dt_000007" smilref="Programming_Robots_with_ROS00001.smil#dt_000007">Multilingual</dt>
                  <dd id="dd_000007">
                    <p data-type="indexterm" data-primary="client libraries" id="ch01-idp202752" data-secondary="client">
                      <span class="text" id="span_000061" smilref="Programming_Robots_with_ROS00001.smil#span_000061">Many software tasks are easier to accomplish in "high-productivity" scripting languages such as Python or Ruby. However, there are times when performance requirements dictate the use of faster languages, such as C++. There are also various reasons that some programmers prefer languages such as Lisp or MATLAB. Endless email flame wars have been waged, are currently being waged, and will doubtless continue to be waged over which language is best suited for a particular task. Acknowledging that all of these opinions have merit, that languages have different utilities in different contexts, and that each programmer's unique background is hugely important when choosing a language, ROS chose a</span>
                      <em id="ch01-idp200688" smilref="Programming_Robots_with_ROS00001.smil#ch01-idp200688">multilingual</em>
                      <span class="text" id="span_000062" smilref="Programming_Robots_with_ROS00001.smil#span_000062">approach. ROS software modules can be written in any language for which a</span>
                      <em id="em_000021" smilref="Programming_Robots_with_ROS00001.smil#em_000021">client library</em>
                      <span class="text" id="span_000063" smilref="Programming_Robots_with_ROS00001.smil#span_000063">has been written. At the time of writing, client libraries exist for C++, Python, LISP, Java, JavaScript, MATLAB, Ruby, Haskell, R, Julia, and others. ROS client libraries communicate with one another by following a convention that describes how messages are "flattened" or "serialized" before being transmitted over the network. This book will use the Python client library almost exclusively, to save space in the code examples and for its general ease of use. However, the tasks described in this book can be accomplished with any of the client libraries.</span>
                    </p>
                  </dd>
                  <dt id="dt_000008" smilref="Programming_Robots_with_ROS00001.smil#dt_000008">Thin</dt>
                  <dd id="dd_000008">
                    <p data-type="indexterm" data-primary="thin development philosophy" id="ch01-idp207744">
                      <span class="text" id="span_000064" smilref="Programming_Robots_with_ROS00001.smil#span_000064">The ROS conventions encourage contributors to create standalone libraries and then</span>
                      <em id="em_000022" smilref="Programming_Robots_with_ROS00001.smil#em_000022">wrap</em>
                      <span class="text" id="span_000065" smilref="Programming_Robots_with_ROS00001.smil#span_000065">those libraries so they can send and receive messages to and from other ROS modules. This extra layer is intended to allow the reuse of software outside of ROS for other applications, and it greatly simplifies the creation of automated tests using standard continuous integration tools.</span>
                    </p>
                  </dd>
                  <dt id="dt_000009" smilref="Programming_Robots_with_ROS00001.smil#dt_000009">Free and open source</dt>
                  <dd id="dd_000009">
                    <p id="ch01-idp211088" data-type="indexterm" data-primary="BSD license" data-startref="ix_1-intro-asciidoc1" smilref="Programming_Robots_with_ROS00001.smil#ch01-idp211088">The core of ROS is released under the permissive BSD license, which allows commercial and noncommercial use. ROS passes data between modules using interprocess communication (IPC), which means that systems built using ROS can have fine-grained licensing of their various components. Commercial systems, for example, often have several closed source modules communicating with a large number of open source modules. Academic and hobby projects are often fully open source. Commercial product development is often done completely behind a firewall. All of these use cases, and more, are common and perfectly valid under the ROS license.</p>
                  </dd>
                </dl>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Installation" id="section_000016">
              <h1 id="h1_000022" smilref="Programming_Robots_with_ROS00001.smil#h1_000022">Installation</h1>
              <div class="sect1" id="ch01-intro_install">
                <p id="ch01-idp92720" data-type="indexterm" data-primary="installation, ROS" data-secondary="installation" smilref="Programming_Robots_with_ROS00001.smil#ch01-idp92720">Although ROS has been made to work on a wide variety of systems, in this book we will be using Ubuntu Linux, a popular and relatively user-friendly Linux distribution. Ubuntu provides an easy-to-use installer that allows computers to dual-boot between the operating system they were shipped with (typically Windows or Mac OS X) and Ubuntu itself. That being said, it is important to back up your computer before installing Ubuntu, in case something unexpected happens and the drive is completely erased in the process.</p>
                <p id="p_000063" smilref="Programming_Robots_with_ROS00001.smil#p_000063">Although there are virtualization environments such as VirtualBox and VMware that allow Linux to run concurrently with a host operating system such as Windows or Mac OS X, the simulator used in this book is rather compute- and graphics-intensive, and might be overly sluggish in a virtualized environment. As such, we recommend running Ubuntu Linux natively by following the instructions on the Ubuntu website.</p>
                <p id="ch01-idp98864" data-type="indexterm" data-primary="Ubuntu 14.04 LTS (Trusty Tahr)">
                  <span class="text" id="span_000066" smilref="Programming_Robots_with_ROS00001.smil#span_000066">Ubuntu Linux can be downloaded freely from</span>
                  <a href="http://ubuntu.com" external="true" id="a_000021">
                    <em class="hyperlink" id="em_000023" smilref="Programming_Robots_with_ROS00001.smil#em_000023">http://ubuntu.com</em>
                  </a>
                  <span class="text" id="span_000067" smilref="Programming_Robots_with_ROS00001.smil#span_000067">. The remainder of this book assumes that ROS is being run on Ubuntu 14.04 LTS, also known as Ubuntu Trusty Tahr, and will use the ROS Indigo distribution.</span>
                </p>
                <p id="p_000064">
                  <span class="text" id="span_000068" smilref="Programming_Robots_with_ROS00001.smil#span_000068">The ROS installation steps require a few shell commands that involve some careful typing. These can be either hand-copied from the following block (note that the first command has been broken across lines to fit the page margins; you can enter this on a single line, without the backslashes), or copied and pasted from the</span>
                  <a href="http://wiki.ros.org/indigo/Installation/Ubuntu" external="true" id="a_000022" smilref="Programming_Robots_with_ROS00001.smil#a_000022">ROS wiki</a>
                  <span class="text" id="span_000069" smilref="Programming_Robots_with_ROS00001.smil#span_000069">. The following commands will add</span>
                  <em id="em_000024" smilref="Programming_Robots_with_ROS00001.smil#em_000024">ros.org</em>
                  <span class="text" id="span_000070" smilref="Programming_Robots_with_ROS00001.smil#span_000070">to the system's list of software sources, download and install the ROS packages, and set up the environment and ROS build tools:</span>
                </p>
                <p id="p_000065">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000004"><span class="text" id="span_000071" smilref="Programming_Robots_with_ROS00001.smil#span_000071">
user@hostname$ </span><strong id="strong_000002" smilref="Programming_Robots_with_ROS00001.smil#strong_000002">sudo sh -c \
  'echo "deb http://packages.ros.org/ros/ubuntu trusty main" &gt; \
  /etc/apt/sources.list.d/ros-latest.list'</strong><span class="text" id="span_000072" smilref="Programming_Robots_with_ROS00001.smil#span_000072">
user@hostname$ </span><strong id="strong_000003" smilref="Programming_Robots_with_ROS00001.smil#strong_000003">wget http://packages.ros.org/ros.key -O - | sudo apt-key add -</strong><span class="text" id="span_000073" smilref="Programming_Robots_with_ROS00001.smil#span_000073">
user@hostname$ </span><strong id="strong_000004" smilref="Programming_Robots_with_ROS00001.smil#strong_000004">sudo apt-get update</strong><span class="text" id="span_000074" smilref="Programming_Robots_with_ROS00001.smil#span_000074">
user@hostname$ </span><strong id="strong_000005" smilref="Programming_Robots_with_ROS00001.smil#strong_000005">sudo apt-get install ros-indigo-desktop-full python-rosinstall</strong><span class="text" id="span_000075" smilref="Programming_Robots_with_ROS00001.smil#span_000075">
user@hostname$ </span><strong id="strong_000006" smilref="Programming_Robots_with_ROS00001.smil#strong_000006">sudo rosdep init</strong><span class="text" id="span_000076" smilref="Programming_Robots_with_ROS00001.smil#span_000076">
user@hostname$ </span><strong id="strong_000007" smilref="Programming_Robots_with_ROS00001.smil#strong_000007">rosdep update</strong><span class="text" id="span_000077" smilref="Programming_Robots_with_ROS00001.smil#span_000077">
user@hostname$ </span><strong id="strong_000008" smilref="Programming_Robots_with_ROS00001.smil#strong_000008">echo "source /opt/ros/indigo/setup.bash" &gt;&gt; ~/.bashrc</strong><span class="text" id="span_000078" smilref="Programming_Robots_with_ROS00001.smil#span_000078">
user@hostname$ </span><strong id="strong_000009" smilref="Programming_Robots_with_ROS00001.smil#strong_000009">source ~/.bashrc</strong>
</code>
                </p>
                <p id="p_000066">
                  <span class="text" id="span_000079" smilref="Programming_Robots_with_ROS00001.smil#span_000079">That seems like a gnarly block of shell commands! Some of them are indeed a bit unusual, but others will be commonly used when using ROS and other large software packages on Ubuntu systems. In particular, the</span>
                  <code xml:space="preserve" id="code_000005" smilref="Programming_Robots_with_ROS00001.smil#code_000005">apt-get</code>
                  <span class="text" id="span_000080" smilref="Programming_Robots_with_ROS00001.smil#span_000080">command is a commonly used command on Ubuntu Linux distributions (among others), and it will be used frequently throughout the book to install additional software packages. This command will install the desired software package(s) requested on the command line, as well as their dependencies, and their dependencies' dependencies, and so on. If you'd rather use a graphical application to install and manage your Ubuntu package files, you can install</span>
                  <code xml:space="preserve" id="code_000006" smilref="Programming_Robots_with_ROS00001.smil#code_000006">synaptic</code>
                  <span class="text" id="span_000081" smilref="Programming_Robots_with_ROS00001.smil#span_000081">. Of course, you might have to do this on the command line:</span>
                </p>
                <p id="p_000067">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000007"><span class="text" id="span_000082" smilref="Programming_Robots_with_ROS00001.smil#span_000082">
user@hostname$ </span><strong id="strong_000010" smilref="Programming_Robots_with_ROS00001.smil#strong_000010">sudo apt-get install synaptic</strong>
</code>
                </p>
                <p id="p_000068">
                  <span class="text" id="span_000083" smilref="Programming_Robots_with_ROS00001.smil#span_000083">The last two lines of the installation sequence add the ROS environment setup script,</span>
                  <em id="em_000025" smilref="Programming_Robots_with_ROS00001.smil#em_000025">setup.bash</em>
                  <span class="text" id="span_000084" smilref="Programming_Robots_with_ROS00001.smil#span_000084">, to the current and future shells on this system. This means that commands and shell scripts provided by ROS, such as the many command-line tools described in future chapters, are now accessible to the shell interpreters on this system. Without those two lines, users would have to manually source the</span>
                  <em id="em_000026" smilref="Programming_Robots_with_ROS00001.smil#em_000026">/opt/ros/indigo/setup.bash</em>
                  <span class="text" id="span_000085" smilref="Programming_Robots_with_ROS00001.smil#span_000085">file for each command shell they opened. Adding the ROS</span>
                  <em id="em_000027" smilref="Programming_Robots_with_ROS00001.smil#em_000027">setup.bash</em>
                  <span class="text" id="span_000086" smilref="Programming_Robots_with_ROS00001.smil#span_000086">file to the user's</span>
                  <em id="em_000028" smilref="Programming_Robots_with_ROS00001.smil#em_000028">~/.bashrc</em>
                  <span class="text" id="span_000087" smilref="Programming_Robots_with_ROS00001.smil#span_000087">ensures that this step happens automatically for all future command shells.</span>
                </p>
                <p data-type="indexterm" data-primary="POSIX" id="ch01-idp112320">
                  <span class="text" id="span_000088" smilref="Programming_Robots_with_ROS00001.smil#span_000088">Throughout the book, we will refer to various operating system features as "POSIX," such as "POSIX processes," "POSIX environment variables," and so on. This is meant to indicate that much of ROS is written with</span>
                  <em id="em_000029" smilref="Programming_Robots_with_ROS00001.smil#em_000029">portability</em>
                  <span class="text" id="span_000089" smilref="Programming_Robots_with_ROS00001.smil#span_000089">in mind between POSIX-compliant systems, such as Linux or Mac OS X. That being said, in this book we will be focusing specifically on Ubuntu Linux, since it is a popular Linux distribution for the desktop and since the ROS build farm produces easy-to-install binaries for Ubuntu.</span>
                </p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Summary" id="section_000017">
              <h1 id="h1_000023" smilref="Programming_Robots_with_ROS00001.smil#h1_000023">Summary</h1>
              <div class="sect1" id="ch01-idp91472">
                <p id="ch01-idp116864" data-type="indexterm" data-startref="ix_1-intro-asciidoc0">
                  <span class="text" id="span_000090" smilref="Programming_Robots_with_ROS00001.smil#span_000090">This chapter has provided a high-level overview of ROS and its guiding philosophical ideas. ROS is a</span>
                  <em id="em_000030" smilref="Programming_Robots_with_ROS00001.smil#em_000030">framework</em>
                  <span class="text" id="span_000091" smilref="Programming_Robots_with_ROS00001.smil#span_000091">for developing robotics software. The software is structured as a large number of small programs that rapidly pass messages to one another. This paradigm was chosen to encourage the reuse of robotics software outside the particular robot and environment that drove its creation. Indeed, this loosely coupled structure allows for the creation of</span>
                  <em id="em_000031" smilref="Programming_Robots_with_ROS00001.smil#em_000031">generic</em>
                  <span class="text" id="span_000092" smilref="Programming_Robots_with_ROS00001.smil#span_000092">modules that are applicable to broad classes of robot hardware and software pipelines, facilitating code sharing and reuse among the global robotics community.</span>
                </p>
              </div>
            </section>
          </div>
        </section>
      </level1>
      <level1 id="ch02">
        <section xmlns:epub="http://www.idpf.org/2007/ops" data-type="chapter" epub:type="chapter" data-pdf-bookmark="Chapter 2. Preliminaries" id="section_000018">
          <h1 id="h1_000024" smilref="Programming_Robots_with_ROS00001.smil#h1_000024">Chapter 2. Preliminaries</h1>
          <div class="chapter" id="ch02-preliminaries">
            <p id="ch02-ix_2-preliminaries-asciidoc0" data-type="indexterm" data-primary="ROS" data-secondary="key concepts" smilref="Programming_Robots_with_ROS00001.smil#ch02-ix_2-preliminaries-asciidoc0">Before we start writing code in ROS, we're going to take a moment to introduce some of the key concepts that underlie the framework. ROS systems are comprised of a large number of independent programs that are constantly communicating with each other. In this chapter, we'll discuss this architecture and look at the command-line tools that interact with it. We'll also discuss the details of the naming schemes and namespaces used by ROS, and how these can be employed to promote reuse of your code.</p>
            <section data-type="sect1" data-pdf-bookmark="The ROS Graph" id="section_000019">
              <h1 id="h1_000025" smilref="Programming_Robots_with_ROS00001.smil#h1_000025">The ROS Graph</h1>
              <div class="sect1" id="ch02-prelim_ros_graph">
                <p id="ch02-ix_2-preliminaries-asciidoc1" data-type="indexterm" data-primary="graph, ROS system" smilref="Programming_Robots_with_ROS00001.smil#ch02-ix_2-preliminaries-asciidoc1">One of the original "challenge problems" that motivated the design of ROS was fondly referred to as the "fetch an item" problem. Imagine a relatively large and complex robot with several cameras and laser scanners, a manipulator arm, and a wheeled base. In the "fetch an item" problem, the robot's task is to navigate a typical home or office environment, find the requested item, and deliver it to the requested location. This task, like many robotics tasks, led to several observations about many robotics software applications, which became some of the design goals of ROS:</p>
                <list type="ul" id="list_000006">
                  <li id="li_000023">
                    <p id="p_000069" smilref="Programming_Robots_with_ROS00001.smil#p_000069">The application task can be decomposed into many independent subsystems, such as navigation, computer vision, grasping, and so on.</p>
                  </li>
                  <li id="li_000024">
                    <p id="p_000070" smilref="Programming_Robots_with_ROS00001.smil#p_000070">These subsystems can be used for other tasks, such as doing security patrols, cleaning, delivering mail, and so on.</p>
                  </li>
                  <li id="li_000025">
                    <p id="p_000071">
                      <span class="text" id="span_000093" smilref="Programming_Robots_with_ROS00001.smil#span_000093">With proper hardware and geometry abstraction layers, the vast majority of the application software can run on</span>
                      <em id="em_000032" smilref="Programming_Robots_with_ROS00001.smil#em_000032">any</em>
                      <span class="text" id="span_000094" smilref="Programming_Robots_with_ROS00001.smil#span_000094">robot.</span>
                    </p>
                  </li>
                </list>
                <p data-type="indexterm" data-primary="edges" id="ch02-idp130928">
                  <span class="text" id="span_000095" smilref="Programming_Robots_with_ROS00001.smil#span_000095">These goals can be illustrated by the fundamental rendering of a ROS system: its</span>
                  <em id="em_000033" smilref="Programming_Robots_with_ROS00001.smil#em_000033">graph</em>
                  <span class="text" id="span_000096" smilref="Programming_Robots_with_ROS00001.smil#span_000096">. A ROS system is made up of many different programs running simultaneously and communicating with one another by passing</span>
                  <em id="em_000034" smilref="Programming_Robots_with_ROS00001.smil#em_000034">messages</em>
                  <span class="text" id="span_000097" smilref="Programming_Robots_with_ROS00001.smil#span_000097">. It is convenient to use a mathematical</span>
                  <em id="em_000035" smilref="Programming_Robots_with_ROS00001.smil#em_000035">graph</em>
                  <span class="text" id="span_000098" smilref="Programming_Robots_with_ROS00001.smil#span_000098">to represent this collection of programs and messages: the programs are the graph</span>
                  <em id="em_000036" smilref="Programming_Robots_with_ROS00001.smil#em_000036">nodes</em>
                  <span class="text" id="span_000099" smilref="Programming_Robots_with_ROS00001.smil#span_000099">, and programs that communicate with one another are connected by</span>
                  <em id="ch02-idp131632" smilref="Programming_Robots_with_ROS00001.smil#ch02-idp131632">edges</em>
                  <span class="text" id="span_000100" smilref="Programming_Robots_with_ROS00001.smil#span_000100">. A sample ROS graph appears in</span>
                  <a data-type="xref" href="#ch02-graph" external="false" id="a_000023" smilref="Programming_Robots_with_ROS00001.smil#a_000023">Figure 2-1</a>
                  <span class="text" id="span_000101" smilref="Programming_Robots_with_ROS00001.smil#span_000101">, which represents one of the earliest implementations of the "fetch an item" application using ROS. The details of this graph are not particularly important; it is just provided to illustrate the general concept of a ROS system as a collection of nodes passing messages to one another. We can represent any ROS system, large or small, in this way. In fact, this representation is so useful for software development that we actually refer to ROS programs as</span>
                  <em id="em_000037" smilref="Programming_Robots_with_ROS00001.smil#em_000037">nodes</em>
                  <span class="text" id="span_000102" smilref="Programming_Robots_with_ROS00001.smil#span_000102">, to help us remember that each program is just one piece of a much larger system.</span>
                </p>
                <figure id="figure_000002">
                  <h1 id="h1_000026" smilref="Programming_Robots_with_ROS00001.smil#h1_000026">Figure 2-1. ROS graph of a fetch-an-item robot--nodes in the graph represent individual programs; edges represent message streams communicating sensor data, actuator commands, planner states, intermediate representations, and so on</h1>
                  <div id="ch02-graph" class="figure">
                    <img src="images/prwr_0201.jpg" alt="Graph for the 'fetch an item' robot" id="img_000002" />
                  </div>
                </figure>
                <p id="p_000072">
                  <span class="text" id="span_000103" smilref="Programming_Robots_with_ROS00001.smil#span_000103">To reiterate: a ROS graph</span>
                  <em id="em_000038" smilref="Programming_Robots_with_ROS00001.smil#em_000038">node</em>
                  <span class="text" id="span_000104" smilref="Programming_Robots_with_ROS00001.smil#span_000104">represents a software module that is sending or receiving messages, and a ROS graph</span>
                  <em id="em_000039" smilref="Programming_Robots_with_ROS00001.smil#em_000039">edge</em>
                  <span class="text" id="span_000105" smilref="Programming_Robots_with_ROS00001.smil#span_000105">represents a stream of messages between two nodes. Although things can get more complex, typically nodes are POSIX processes, and edges are TCP connections. This offers additional fault tolerance: a software crash will typically only take down its own process. The rest of the graph will stay up, passing messages and functioning as normal. The circumstances leading up to the crash can often be recreated by logging the messages entering a node and simply playing them back at a later time inside a debugger.</span>
                </p>
                <p class="keep-together" data-type="indexterm" data-primary="subgraphs" id="ch02-idp139728">
                  <span class="text" id="span_000106" smilref="Programming_Robots_with_ROS00001.smil#span_000106">However, perhaps the greatest benefit of a loosely coupled, graph-based architecture is the ability to rapid-prototype complex systems with little or no software "glue" required for experimentation. Single nodes, such as the object recognition node in a "fetch an item" system, can be trivially swapped by simply launching an entirely different process that accepts images and outputs labeled objects. Not only can a single node be swapped, but entire chunks of the graph (</span>
                  <em id="em_000040" smilref="Programming_Robots_with_ROS00001.smil#em_000040">subgraphs</em>
                  <span class="text" id="span_000107" smilref="Programming_Robots_with_ROS00001.smil#span_000107">) can be torn down and replaced, at runtime, with other subgraphs. Real-robot hardware drivers can be replaced with simulators, navigation subsystems can be swapped, algorithms can be tweaked and recompiled, and so on. Since ROS is creating all of the required network backend on the fly, the entire system is interactive and designed to encourage experimentation.</span>
                </p>
                <p id="ch02-idp143232" data-type="indexterm" data-startref="ix_2-preliminaries-asciidoc1">
                  <span class="text" id="span_000108" smilref="Programming_Robots_with_ROS00001.smil#span_000108">Up to this point, we have assumed that nodes somehow find each other but have not described how that process works. Among all the traffic flying around a busy network, how do nodes find one another, so they can start passing messages? The answer lies in a program called</span>
                  <code xml:space="preserve" id="code_000008" smilref="Programming_Robots_with_ROS00001.smil#code_000008">roscore</code>
                  <span class="text" id="span_000109" smilref="Programming_Robots_with_ROS00001.smil#span_000109">.</span>
                </p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="roscore" id="section_000020">
              <h1 id="h1_000027" smilref="Programming_Robots_with_ROS00001.smil#h1_000027">roscore</h1>
              <div class="sect1" id="ch02-preliminaries_roscore">
                <p data-type="indexterm" data-primary="peer-to-peer development philosophy" id="ch02-idp145840" data-secondary="roscore">
                  <code xml:space="preserve" id="code_000009" smilref="Programming_Robots_with_ROS00001.smil#code_000009">roscore</code>
                  <span class="text" id="span_000110" smilref="Programming_Robots_with_ROS00001.smil#span_000110">is a service that provides connection information to nodes so that they can transmit messages to one another. Every node connects to</span>
                  <code id="ch02-idp146560" xml:space="preserve" smilref="Programming_Robots_with_ROS00001.smil#ch02-idp146560">roscore</code>
                  <span class="text" id="span_000111" smilref="Programming_Robots_with_ROS00001.smil#span_000111">at startup to register details of the message streams it publishes and the streams to which it wishes to subscribe. When a new node appears,</span>
                  <code xml:space="preserve" id="code_000010" smilref="Programming_Robots_with_ROS00001.smil#code_000010">roscore</code>
                  <span class="text" id="span_000112" smilref="Programming_Robots_with_ROS00001.smil#span_000112">provides it with the information that it needs to form a direct peer-to-peer connection with other nodes publishing and subscribing to the same message topics. Every ROS system needs a running</span>
                  <code xml:space="preserve" id="code_000011" smilref="Programming_Robots_with_ROS00001.smil#code_000011">roscore</code>
                  <span class="text" id="span_000113" smilref="Programming_Robots_with_ROS00001.smil#span_000113">, since without it, nodes cannot find other nodes.</span>
                </p>
                <p id="p_000073">
                  <span class="text" id="span_000114" smilref="Programming_Robots_with_ROS00001.smil#span_000114">However, a key aspect of ROS is that the messages between nodes are transmitted peer-to-peer. The</span>
                  <code xml:space="preserve" id="code_000012" smilref="Programming_Robots_with_ROS00001.smil#code_000012">roscore</code>
                  <span class="text" id="span_000115" smilref="Programming_Robots_with_ROS00001.smil#span_000115">is only used by nodes to know where to find their peers. This is a bit subtle, and can lead to some misunderstandings, as programmers coming from web-based backgrounds are often familiar with client/server systems, such as web-browsers talking to web servers, where the roles of clients and servers are clearly defined. The ROS architecture is a hybrid between a classical client/server system and a fully distributed one, due to the presence of a central</span>
                  <code xml:space="preserve" id="code_000013" smilref="Programming_Robots_with_ROS00001.smil#code_000013">roscore</code>
                  <span class="text" id="span_000116" smilref="Programming_Robots_with_ROS00001.smil#span_000116">that provides a name service for the peer-to-peer message streams.</span>
                </p>
                <p data-type="indexterm" data-primary="port 11311" id="ch02-idp154912">
                  <span class="text" id="span_000117" smilref="Programming_Robots_with_ROS00001.smil#span_000117">When a ROS node starts up, it expects its process to have an environment variable named</span>
                  <code id="ch02-idp152384" xml:space="preserve" smilref="Programming_Robots_with_ROS00001.smil#ch02-idp152384">ROS_MASTER_URI</code>
                  <span class="text" id="span_000118" smilref="Programming_Robots_with_ROS00001.smil#span_000118">. This variable is expected to contain a string of the form</span>
                  <code xml:space="preserve" id="code_000014"><span class="text" id="span_000119" smilref="Programming_Robots_with_ROS00001.smil#span_000119">http://</span><em id="em_000041" smilref="Programming_Robots_with_ROS00001.smil#em_000041">hostname</em><span class="text" id="span_000120" smilref="Programming_Robots_with_ROS00001.smil#span_000120">:11311/</span></code>
                  <span class="text" id="span_000121" smilref="Programming_Robots_with_ROS00001.smil#span_000121">, which in this case would imply that there is a running instance of</span>
                  <code xml:space="preserve" id="code_000015" smilref="Programming_Robots_with_ROS00001.smil#code_000015">roscore</code>
                  <span class="text" id="span_000122" smilref="Programming_Robots_with_ROS00001.smil#span_000122">accessible on port 11311 somewhere on a host called</span>
                  <em id="em_000042">
                    <code xml:space="preserve" id="code_000016" smilref="Programming_Robots_with_ROS00001.smil#code_000016">hostname</code>
                  </em>
                  <span class="text" id="span_000123" smilref="Programming_Robots_with_ROS00001.smil#span_000123">that can be accessed over the network.</span>
                </p>
                <h1 id="h1_000028" smilref="Programming_Robots_with_ROS00001.smil#h1_000028">Note</h1>
                <div data-type="note" epub:type="note" id="div_000007">
                  <p id="p_000074">
                    <span class="text" id="span_000124" smilref="Programming_Robots_with_ROS00001.smil#span_000124">Port 11311 was chosen as the default port for</span>
                    <code xml:space="preserve" id="code_000017" smilref="Programming_Robots_with_ROS00001.smil#code_000017">roscore</code>
                    <span class="text" id="span_000125" smilref="Programming_Robots_with_ROS00001.smil#span_000125">because it was a palindromic prime that was not being used by other popular applications in the early days of ROS, circa 2007. It has no particular significance. Any user space port number (1025-65535) can be used instead. Different ports can be specified in the</span>
                    <code xml:space="preserve" id="code_000018" smilref="Programming_Robots_with_ROS00001.smil#code_000018">roscore</code>
                    <span class="text" id="span_000126" smilref="Programming_Robots_with_ROS00001.smil#span_000126">startup command and in the</span>
                    <code xml:space="preserve" id="code_000019" smilref="Programming_Robots_with_ROS00001.smil#code_000019">ROS_MASTER_URI</code>
                    <span class="text" id="span_000127" smilref="Programming_Robots_with_ROS00001.smil#span_000127">environment variable to allow multiple ROS systems to coexist on a single network.</span>
                  </p>
                </div>
                <p id="p_000075">
                  <span class="text" id="span_000128" smilref="Programming_Robots_with_ROS00001.smil#span_000128">With knowledge of the location of</span>
                  <code xml:space="preserve" id="code_000020" smilref="Programming_Robots_with_ROS00001.smil#code_000020">roscore</code>
                  <span class="text" id="span_000129" smilref="Programming_Robots_with_ROS00001.smil#span_000129">on the network, nodes register themselves at startup with</span>
                  <code xml:space="preserve" id="code_000021" smilref="Programming_Robots_with_ROS00001.smil#code_000021">roscore</code>
                  <span class="text" id="span_000130" smilref="Programming_Robots_with_ROS00001.smil#span_000130">and then query</span>
                  <code xml:space="preserve" id="code_000022" smilref="Programming_Robots_with_ROS00001.smil#code_000022">roscore</code>
                  <span class="text" id="span_000131" smilref="Programming_Robots_with_ROS00001.smil#span_000131">to find other nodes and data streams by name. Each ROS node tells</span>
                  <code xml:space="preserve" id="code_000023" smilref="Programming_Robots_with_ROS00001.smil#code_000023">roscore</code>
                  <span class="text" id="span_000132" smilref="Programming_Robots_with_ROS00001.smil#span_000132">which messages it provides and which it would like to subscribe to.</span>
                  <code xml:space="preserve" id="code_000024" smilref="Programming_Robots_with_ROS00001.smil#code_000024">roscore</code>
                  <span class="text" id="span_000133" smilref="Programming_Robots_with_ROS00001.smil#span_000133">then provides the addresses of the relevant message producers and consumers. Viewed in a graph form, every node in the graph can periodically call on services provided by</span>
                  <code xml:space="preserve" id="code_000025" smilref="Programming_Robots_with_ROS00001.smil#code_000025">roscore</code>
                  <span class="text" id="span_000134" smilref="Programming_Robots_with_ROS00001.smil#span_000134">to find its peers. This is represented by the dashed lines shown in</span>
                  <a data-type="xref" href="#ch02-roscore" external="false" id="a_000024" smilref="Programming_Robots_with_ROS00001.smil#a_000024">Figure 2-2</a>
                  <span class="text" id="span_000135" smilref="Programming_Robots_with_ROS00001.smil#span_000135">, which show that in this minimalist two-node system, the</span>
                  <code xml:space="preserve" id="code_000026" smilref="Programming_Robots_with_ROS00001.smil#code_000026">talker</code>
                  <span class="text" id="span_000136" smilref="Programming_Robots_with_ROS00001.smil#span_000136">and</span>
                  <code xml:space="preserve" id="code_000027" smilref="Programming_Robots_with_ROS00001.smil#code_000027">listener</code>
                  <span class="text" id="span_000137" smilref="Programming_Robots_with_ROS00001.smil#span_000137">nodes can periodically make calls to</span>
                  <code xml:space="preserve" id="code_000028" smilref="Programming_Robots_with_ROS00001.smil#code_000028">roscore</code>
                  <span class="text" id="span_000138" smilref="Programming_Robots_with_ROS00001.smil#span_000138">while exchanging peer-to-peer messages directly themselves.</span>
                </p>
                <figure id="figure_000003">
                  <h1 id="h1_000029" smilref="Programming_Robots_with_ROS00001.smil#h1_000029">Figure 2-2. roscore connects only ephemerally to the other nodes in the system</h1>
                  <div id="ch02-roscore" class="figure">
                    <img src="images/prwr_0202.jpg" alt="Hello, world! showing roscore" id="img_000003" />
                  </div>
                </figure>
                <p data-type="indexterm" data-primary="parameter server" id="ch02-idp167088">
                  <code xml:space="preserve" id="code_000029" smilref="Programming_Robots_with_ROS00001.smil#code_000029">roscore</code>
                  <span class="text" id="span_000139" smilref="Programming_Robots_with_ROS00001.smil#span_000139">also provides a</span>
                  <em id="em_000043" smilref="Programming_Robots_with_ROS00001.smil#em_000043">parameter server</em>
                  <span class="text" id="span_000140" smilref="Programming_Robots_with_ROS00001.smil#span_000140">, which is used extensively by ROS nodes for configuration. The parameter server allows nodes to store and retrieve arbitrary data structures, such as descriptions of robots, parameters for algorithms, and so on. As with everything in ROS, there is a simple command-line tool to interact with the parameter server:</span>
                  <code xml:space="preserve" id="code_000030" smilref="Programming_Robots_with_ROS00001.smil#code_000030">rosparam</code>
                  <span class="text" id="span_000141" smilref="Programming_Robots_with_ROS00001.smil#span_000141">, which will be used throughout the book.</span>
                </p>
                <p id="p_000076">
                  <span class="text" id="span_000142" smilref="Programming_Robots_with_ROS00001.smil#span_000142">We'll see examples of how to use</span>
                  <code xml:space="preserve" id="code_000031" smilref="Programming_Robots_with_ROS00001.smil#code_000031">roscore</code>
                  <span class="text" id="span_000143" smilref="Programming_Robots_with_ROS00001.smil#span_000143">soon. For now, all you really need to remember is that</span>
                  <code xml:space="preserve" id="code_000032" smilref="Programming_Robots_with_ROS00001.smil#code_000032">roscore</code>
                  <span class="text" id="span_000144" smilref="Programming_Robots_with_ROS00001.smil#span_000144">is a program that allows nodes to find other nodes. The last thing you need to know about before we start running some nodes is how ROS organizes packages and a little bit about how the ROS build system, known as</span>
                  <code xml:space="preserve" id="code_000033" smilref="Programming_Robots_with_ROS00001.smil#code_000033">catkin</code>
                  <span class="text" id="span_000145" smilref="Programming_Robots_with_ROS00001.smil#span_000145">, works.</span>
                </p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="catkin, Workspaces, and ROS Packages" id="section_000021">
              <h1 id="h1_000030" smilref="Programming_Robots_with_ROS00001.smil#h1_000030">catkin, Workspaces, and ROS Packages</h1>
              <div class="sect1" id="ch02-prelim_catkin">
                <p data-type="indexterm" data-primary="C++" data-secondary="catkin and" id="ch02-idm212128">
                  <code id="ch02-idm213536" xml:space="preserve" smilref="Programming_Robots_with_ROS00001.smil#ch02-idm213536">catkin</code>
                  <span class="text" id="span_000146" smilref="Programming_Robots_with_ROS00001.smil#span_000146">is the ROS build system: the set of tools that ROS uses to generate executable programs, libraries, scripts, and interfaces that other code can use. If you use C++ to write your ROS code, you need to know a fair bit about</span>
                  <code xml:space="preserve" id="code_000034" smilref="Programming_Robots_with_ROS00001.smil#code_000034">catkin</code>
                  <span class="text" id="span_000147" smilref="Programming_Robots_with_ROS00001.smil#span_000147">. Since we're going to be using Python for the examples in this book, we can get away without delving into all the details. We will, however, have to interact with it a bit, so we'll spend some time now talking about how it works. If you're interested in learning more, the</span>
                  <a href="http://wiki.ros.org/catkin?distro=indigo" external="true" id="a_000025">
                    <code xml:space="preserve" id="code_000035" smilref="Programming_Robots_with_ROS00001.smil#code_000035">catkin</code>
                    <span class="text" id="span_000148" smilref="Programming_Robots_with_ROS00001.smil#span_000148">wiki page</span>
                  </a>
                  <span class="text" id="span_000149" smilref="Programming_Robots_with_ROS00001.smil#span_000149">is a good place to start. If you want to know why ROS has its own build system in the first place, there's a good discussion on the</span>
                  <a href="http://wiki.ros.org/catkin/conceptual_overview?distro=indigo" external="true" id="a_000026">
                    <code xml:space="preserve" id="code_000036" smilref="Programming_Robots_with_ROS00001.smil#code_000036">catkin</code>
                    <span class="text" id="span_000150" smilref="Programming_Robots_with_ROS00001.smil#span_000150">conceptual overview wiki page</span>
                  </a>
                  <span class="text" id="span_000151" smilref="Programming_Robots_with_ROS00001.smil#span_000151">.</span>
                </p>
                <section data-type="sect2" data-pdf-bookmark="catkin" id="section_000022">
                  <h1 id="h1_000031" smilref="Programming_Robots_with_ROS00001.smil#h1_000031">catkin</h1>
                  <div class="sect2" id="ch02-idm208144">
                    <p data-type="indexterm" data-primary="CMake macros" id="ch02-idm206944">
                      <code xml:space="preserve" id="code_000037" smilref="Programming_Robots_with_ROS00001.smil#code_000037">catkin</code>
                      <span class="text" id="span_000152" smilref="Programming_Robots_with_ROS00001.smil#span_000152">comprises a set of</span>
                      <code xml:space="preserve" id="code_000038" smilref="Programming_Robots_with_ROS00001.smil#code_000038">CMake</code>
                      <span class="text" id="span_000153" smilref="Programming_Robots_with_ROS00001.smil#span_000153">macros and custom Python scripts to provide extra functionality on top of the normal</span>
                      <code xml:space="preserve" id="code_000039" smilref="Programming_Robots_with_ROS00001.smil#code_000039">CMake</code>
                      <span class="text" id="span_000154" smilref="Programming_Robots_with_ROS00001.smil#span_000154">workflow.</span>
                      <code xml:space="preserve" id="code_000040" smilref="Programming_Robots_with_ROS00001.smil#code_000040">CMake</code>
                      <span class="text" id="span_000155" smilref="Programming_Robots_with_ROS00001.smil#span_000155">is a commonly used open source build system. If you're going to master the subtleties of</span>
                      <code xml:space="preserve" id="code_000041" smilref="Programming_Robots_with_ROS00001.smil#code_000041">catkin</code>
                      <span class="text" id="span_000156" smilref="Programming_Robots_with_ROS00001.smil#span_000156">, it really helps if you know a bit about</span>
                      <code xml:space="preserve" id="code_000042" smilref="Programming_Robots_with_ROS00001.smil#code_000042">CMake</code>
                      <span class="text" id="span_000157" smilref="Programming_Robots_with_ROS00001.smil#span_000157">. However, for the more casual</span>
                      <code id="ch02-idm203200" xml:space="preserve" smilref="Programming_Robots_with_ROS00001.smil#ch02-idm203200">catkin</code>
                      <span class="text" id="span_000158" smilref="Programming_Robots_with_ROS00001.smil#span_000158">user, all you really need to know is that there are two files,</span>
                      <em id="ch02-idm202464" smilref="Programming_Robots_with_ROS00001.smil#ch02-idm202464">CMakeLists.txt</em>
                      <span class="text" id="span_000159" smilref="Programming_Robots_with_ROS00001.smil#span_000159">and</span>
                      <em id="em_000044" smilref="Programming_Robots_with_ROS00001.smil#em_000044">package.xml</em>
                      <span class="text" id="span_000160" smilref="Programming_Robots_with_ROS00001.smil#span_000160">, that you need to add some specific information to in order to have things work properly. You then call the various</span>
                      <code xml:space="preserve" id="code_000043" smilref="Programming_Robots_with_ROS00001.smil#code_000043">catkin</code>
                      <span class="text" id="span_000161" smilref="Programming_Robots_with_ROS00001.smil#span_000161">tools to generate the directories and files you're going to need as you write code for your robots. These tools will be introduced as we need them throughout the book. Before we get to any of this, though, we need to introduce you to workspaces.</span>
                    </p>
                  </div>
                </section>
                <section data-type="sect2" data-pdf-bookmark="Workspaces" id="section_000023">
                  <h1 id="h1_000032" smilref="Programming_Robots_with_ROS00001.smil#h1_000032">Workspaces</h1>
                  <div class="sect2" id="ch02-idm206416">
                    <p data-type="indexterm" data-primary="workspaces" id="ch02-idm198080">
                      <span class="text" id="span_000162" smilref="Programming_Robots_with_ROS00001.smil#span_000162">Before you start writing any ROS code, you need to set up a</span>
                      <em id="em_000045" smilref="Programming_Robots_with_ROS00001.smil#em_000045">workspace</em>
                      <span class="text" id="span_000163" smilref="Programming_Robots_with_ROS00001.smil#span_000163">for this code to live in. A workspace is simply a set of directories in which a related set of ROS code lives. You can have multiple ROS workspaces, but you can only work in one of them at any one time. The simple way to think about this is that you can only see code that lives in your current workspace.</span>
                    </p>
                    <p id="p_000077">
                      <span class="text" id="span_000164" smilref="Programming_Robots_with_ROS00001.smil#span_000164">Start by making sure that you've added the system-wide ROS setup script to your</span>
                      <em id="em_000046" smilref="Programming_Robots_with_ROS00001.smil#em_000046">.bashrc</em>
                      <span class="text" id="span_000165" smilref="Programming_Robots_with_ROS00001.smil#span_000165">file, as described in</span>
                      <a data-type="xref" href="#ch01-intro_install" external="false" id="a_000027" smilref="Programming_Robots_with_ROS00001.smil#a_000027">"Installation"</a>
                      <span class="text" id="span_000166" smilref="Programming_Robots_with_ROS00001.smil#span_000166">. If you haven't done that already, do it now, or source the file by hand:</span>
                    </p>
                    <p id="p_000078">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000044"><span class="text" id="span_000167" smilref="Programming_Robots_with_ROS00001.smil#span_000167">
user@hostname$ </span><strong id="strong_000011" smilref="Programming_Robots_with_ROS00001.smil#strong_000011">source /opt/ros/indigo/setup.bash</strong>
</code>
                    </p>
                    <p id="p_000079">
                      <span class="text" id="span_000168" smilref="Programming_Robots_with_ROS00001.smil#span_000168">Now, we're going to make a</span>
                      <code xml:space="preserve" id="code_000045" smilref="Programming_Robots_with_ROS00001.smil#code_000045">catkin</code>
                      <span class="text" id="span_000169" smilref="Programming_Robots_with_ROS00001.smil#span_000169">workspace and initialize it:</span>
                    </p>
                    <p id="p_000080">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000046"><span class="text" id="span_000170" smilref="Programming_Robots_with_ROS00001.smil#span_000170">
user@hostname$ </span><strong id="strong_000012" smilref="Programming_Robots_with_ROS00001.smil#strong_000012">mkdir -p ~/catkin_ws/src</strong><span class="text" id="span_000171" smilref="Programming_Robots_with_ROS00001.smil#span_000171">
user@hostname$ </span><strong id="strong_000013" smilref="Programming_Robots_with_ROS00001.smil#strong_000013">cd ~/catkin_ws/src</strong><span class="text" id="span_000172" smilref="Programming_Robots_with_ROS00001.smil#span_000172">
user@hostname$ </span><strong id="strong_000014" smilref="Programming_Robots_with_ROS00001.smil#strong_000014">catkin_init_workspace</strong>
</code>
                    </p>
                    <p id="p_000081">
                      <span class="text" id="span_000173" smilref="Programming_Robots_with_ROS00001.smil#span_000173">This creates a workspace directory called</span>
                      <em id="em_000047" smilref="Programming_Robots_with_ROS00001.smil#em_000047">catkin_ws</em>
                      <span class="text" id="span_000174" smilref="Programming_Robots_with_ROS00001.smil#span_000174">(although you can call it anything you like), with a</span>
                      <em id="em_000048" smilref="Programming_Robots_with_ROS00001.smil#em_000048">src</em>
                      <span class="text" id="span_000175" smilref="Programming_Robots_with_ROS00001.smil#span_000175">directory inside it for your code. The</span>
                      <code xml:space="preserve" id="code_000047" smilref="Programming_Robots_with_ROS00001.smil#code_000047">catkin_init_workspace</code>
                      <span class="text" id="span_000176" smilref="Programming_Robots_with_ROS00001.smil#span_000176">command creates a</span>
                      <em id="em_000049" smilref="Programming_Robots_with_ROS00001.smil#em_000049">CMakeLists.txt</em>
                      <span class="text" id="span_000177" smilref="Programming_Robots_with_ROS00001.smil#span_000177">file for you in the</span>
                      <em id="em_000050" smilref="Programming_Robots_with_ROS00001.smil#em_000050">src</em>
                      <span class="text" id="span_000178" smilref="Programming_Robots_with_ROS00001.smil#span_000178">directory, where you invoked it.</span>
                      <note id="ch02-idm187808-marker">
                        <noteref data-type="noteref" idref="#ch02-idm187808" id="noteref_000001" smilref="Programming_Robots_with_ROS00001.smil#noteref_000001">1</noteref>
                      </note>
                      <span class="text" id="span_000179" smilref="Programming_Robots_with_ROS00001.smil#span_000179">Next, we're going to create some other workspace files:</span>
                    </p>
                    <p id="p_000082">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000048"><span class="text" id="span_000180" smilref="Programming_Robots_with_ROS00001.smil#span_000180">
user@hostname$ </span><strong id="strong_000015" smilref="Programming_Robots_with_ROS00001.smil#strong_000015">cd ~/catkin_ws</strong><span class="text" id="span_000181" smilref="Programming_Robots_with_ROS00001.smil#span_000181">
user@hostname$ </span><strong id="strong_000016" smilref="Programming_Robots_with_ROS00001.smil#strong_000016">catkin_make</strong>
</code>
                    </p>
                    <p data-type="indexterm" data-primary="catkin_make" id="ch02-idm184784">
                      <span class="text" id="span_000182" smilref="Programming_Robots_with_ROS00001.smil#span_000182">Running</span>
                      <code xml:space="preserve" id="code_000049" smilref="Programming_Robots_with_ROS00001.smil#code_000049">catkin_make</code>
                      <span class="text" id="span_000183" smilref="Programming_Robots_with_ROS00001.smil#span_000183">will generate a lot of output as it does its work. When it's done, you'll end up with two new directories:</span>
                      <em id="em_000051" smilref="Programming_Robots_with_ROS00001.smil#em_000051">build</em>
                      <span class="text" id="span_000184" smilref="Programming_Robots_with_ROS00001.smil#span_000184">and</span>
                      <em id="em_000052" smilref="Programming_Robots_with_ROS00001.smil#em_000052">devel</em>
                      <span class="text" id="span_000185" smilref="Programming_Robots_with_ROS00001.smil#span_000185">.</span>
                      <em id="em_000053" smilref="Programming_Robots_with_ROS00001.smil#em_000053">build</em>
                      <span class="text" id="span_000186" smilref="Programming_Robots_with_ROS00001.smil#span_000186">is where</span>
                      <code xml:space="preserve" id="code_000050" smilref="Programming_Robots_with_ROS00001.smil#code_000050">catkin</code>
                      <span class="text" id="span_000187" smilref="Programming_Robots_with_ROS00001.smil#span_000187">is going to store the results of some of its work, like libraries and executable programs if you use C++. We'll largely ignore</span>
                      <em id="em_000054" smilref="Programming_Robots_with_ROS00001.smil#em_000054">build</em>
                      <span class="text" id="span_000188" smilref="Programming_Robots_with_ROS00001.smil#span_000188">since we don't need it much when using Python.</span>
                      <em id="em_000055" smilref="Programming_Robots_with_ROS00001.smil#em_000055">devel</em>
                      <span class="text" id="span_000189" smilref="Programming_Robots_with_ROS00001.smil#span_000189">contains a number of files and directories, the most interesting of which are the</span>
                      <em id="em_000056" smilref="Programming_Robots_with_ROS00001.smil#em_000056">setup</em>
                      <span class="text" id="span_000190" smilref="Programming_Robots_with_ROS00001.smil#span_000190">files. Running these configures your system to use this workspace, and the code that's (going to be) contained inside it. Assuming you're using the default command-line shell (</span>
                      <code xml:space="preserve" id="code_000051" smilref="Programming_Robots_with_ROS00001.smil#code_000051">bash</code>
                      <span class="text" id="span_000191" smilref="Programming_Robots_with_ROS00001.smil#span_000191">) and are still in the top-level directory of your workspace, you can do this with:</span>
                    </p>
                    <p id="p_000083">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000052"><span class="text" id="span_000192" smilref="Programming_Robots_with_ROS00001.smil#span_000192">
user@hostname$ </span><strong id="strong_000017" smilref="Programming_Robots_with_ROS00001.smil#strong_000017">source devel/setup.bash</strong>
</code>
                    </p>
                    <p id="p_000084">
                      <span class="text" id="span_000193" smilref="Programming_Robots_with_ROS00001.smil#span_000193">Congratulations! You've just created your first ROS workspace. You should put all the code for this book, and any additional code you write that's based on it, into this workspace, in the</span>
                      <em id="em_000057" smilref="Programming_Robots_with_ROS00001.smil#em_000057">src</em>
                      <span class="text" id="span_000194" smilref="Programming_Robots_with_ROS00001.smil#span_000194">directory, organized as ROS packages.</span>
                    </p>
                    <h1 id="h1_000033" smilref="Programming_Robots_with_ROS00001.smil#h1_000033">Warning</h1>
                    <div data-type="warning" epub:type="warning" id="div_000008">
                      <p data-type="indexterm" data-primary="setup.bash file" id="ch02-idm176400">
                        <span class="text" id="span_000195" smilref="Programming_Robots_with_ROS00001.smil#span_000195">If you open a new shell (or Linux terminal), you have to</span>
                        <code xml:space="preserve" id="code_000053" smilref="Programming_Robots_with_ROS00001.smil#code_000053">source</code>
                        <span class="keep-together" id="span_000196">
                          <span class="text" id="span_000197" smilref="Programming_Robots_with_ROS00001.smil#span_000197">the</span>
                          <em id="em_000058" smilref="Programming_Robots_with_ROS00001.smil#em_000058">setup.bash</em>
                          <span class="text" id="span_000198" smilref="Programming_Robots_with_ROS00001.smil#span_000198">file for</span>
                        </span>
                        <span class="text" id="span_000199" smilref="Programming_Robots_with_ROS00001.smil#span_000199">the workspace you want to work with. If</span>
                        <span class="keep-together" id="span_000200" smilref="Programming_Robots_with_ROS00001.smil#span_000200">you don't do</span>
                        <span class="text" id="span_000201" smilref="Programming_Robots_with_ROS00001.smil#span_000201">this, then the shell won't know where to find your</span>
                        <span class="keep-together" id="span_000202" smilref="Programming_Robots_with_ROS00001.smil#span_000202">code. This can</span>
                        <span class="text" id="span_000203" smilref="Programming_Robots_with_ROS00001.smil#span_000203">be annoying, since it's an easy thing to forget. One</span>
                        <span class="keep-together" id="span_000204" smilref="Programming_Robots_with_ROS00001.smil#span_000204">way to get around</span>
                        <span class="text" id="span_000205" smilref="Programming_Robots_with_ROS00001.smil#span_000205">this if you only have one workspace is to</span>
                        <span class="keep-together" id="span_000206">
                          <span class="text" id="span_000207" smilref="Programming_Robots_with_ROS00001.smil#span_000207">add the</span>
                          <code xml:space="preserve" id="code_000054" smilref="Programming_Robots_with_ROS00001.smil#code_000054">source
~/catkin_ws/devel/setup.bash</code>
                          <span class="text" id="span_000208" smilref="Programming_Robots_with_ROS00001.smil#span_000208">command</span>
                        </span>
                        <span class="text" id="span_000209" smilref="Programming_Robots_with_ROS00001.smil#span_000209">to your</span>
                        <em id="em_000059" smilref="Programming_Robots_with_ROS00001.smil#em_000059">.bashrc</em>
                        <span class="text" id="span_000210" smilref="Programming_Robots_with_ROS00001.smil#span_000210">file (with the appropriate filename, of course). This will automatically set up your workspace for you when you open a new shell.</span>
                      </p>
                    </div>
                  </div>
                </section>
                <section data-type="sect2" data-pdf-bookmark="ROS Packages" id="section_000024">
                  <h1 id="h1_000034" smilref="Programming_Robots_with_ROS00001.smil#h1_000034">ROS Packages</h1>
                  <div class="sect2" id="ch02-idm199056">
                    <p id="p_000085">
                      <span class="text" id="span_000211" smilref="Programming_Robots_with_ROS00001.smil#span_000211">ROS software is organized into</span>
                      <em id="em_000060" smilref="Programming_Robots_with_ROS00001.smil#em_000060">packages</em>
                      <span class="text" id="span_000212" smilref="Programming_Robots_with_ROS00001.smil#span_000212">, each of which contains some combination of code, data, and documentation.</span>
                      <note id="ch02-idp219184-marker">
                        <noteref data-type="noteref" idref="#ch02-idp219184" id="noteref_000002" smilref="Programming_Robots_with_ROS00001.smil#noteref_000002">2</noteref>
                      </note>
                      <span class="text" id="span_000213" smilref="Programming_Robots_with_ROS00001.smil#span_000213">The ROS ecosystem includes thousands of publicly available packages in open repositories, and many thousands more packages are certainly lurking behind organizational firewalls.</span>
                    </p>
                    <p id="p_000086">
                      <span class="text" id="span_000214" smilref="Programming_Robots_with_ROS00001.smil#span_000214">Packages sit inside workspaces, in the</span>
                      <em id="em_000061" smilref="Programming_Robots_with_ROS00001.smil#em_000061">src</em>
                      <span class="text" id="span_000215" smilref="Programming_Robots_with_ROS00001.smil#span_000215">directory. Each package directory</span>
                      <em id="em_000062" smilref="Programming_Robots_with_ROS00001.smil#em_000062">must</em>
                      <span class="text" id="span_000216" smilref="Programming_Robots_with_ROS00001.smil#span_000216">include a</span>
                      <em id="em_000063" smilref="Programming_Robots_with_ROS00001.smil#em_000063">CMakeLists.txt</em>
                      <span class="text" id="span_000217" smilref="Programming_Robots_with_ROS00001.smil#span_000217">file and a</span>
                      <em id="em_000064" smilref="Programming_Robots_with_ROS00001.smil#em_000064">package.xml</em>
                      <span class="text" id="span_000218" smilref="Programming_Robots_with_ROS00001.smil#span_000218">file that describes the contents of the package and how</span>
                      <code xml:space="preserve" id="code_000055" smilref="Programming_Robots_with_ROS00001.smil#code_000055">catkin</code>
                      <span class="text" id="span_000219" smilref="Programming_Robots_with_ROS00001.smil#span_000219">should interact with it. Creating a new package is easy:</span>
                    </p>
                    <p id="p_000087">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000056"><span class="text" id="span_000220" smilref="Programming_Robots_with_ROS00001.smil#span_000220">
user@hostname$ </span><strong id="strong_000018" smilref="Programming_Robots_with_ROS00001.smil#strong_000018">cd ~/catkin_ws/src</strong><span class="text" id="span_000221" smilref="Programming_Robots_with_ROS00001.smil#span_000221">
user@hostname$ </span><strong id="strong_000019" smilref="Programming_Robots_with_ROS00001.smil#strong_000019">catkin_create_pkg my_awesome_code rospy</strong>
</code>
                    </p>
                    <p id="p_000088">
                      <span class="text" id="span_000222" smilref="Programming_Robots_with_ROS00001.smil#span_000222">This changes the directory to</span>
                      <em id="em_000065" smilref="Programming_Robots_with_ROS00001.smil#em_000065">src</em>
                      <span class="text" id="span_000223" smilref="Programming_Robots_with_ROS00001.smil#span_000223">(where packages live) and invokes</span>
                      <code xml:space="preserve" id="code_000057" smilref="Programming_Robots_with_ROS00001.smil#code_000057">catkin_create_pkg</code>
                      <span class="text" id="span_000224" smilref="Programming_Robots_with_ROS00001.smil#span_000224">to make the new package called</span>
                      <code xml:space="preserve" id="code_000058" smilref="Programming_Robots_with_ROS00001.smil#code_000058">my_awesome_code</code>
                      <span class="text" id="span_000225" smilref="Programming_Robots_with_ROS00001.smil#span_000225">, which depends on the (already existing)</span>
                      <code xml:space="preserve" id="code_000059" smilref="Programming_Robots_with_ROS00001.smil#code_000059">rospy</code>
                      <span class="text" id="span_000226" smilref="Programming_Robots_with_ROS00001.smil#span_000226">package. If your new package depends on other existing packages, you can also list them on the command line. We'll talk about package dependencies later in the book, so don't worry if that bit doesn't make a lot of sense to you just yet.</span>
                    </p>
                    <p id="p_000089">
                      <span class="text" id="span_000227" smilref="Programming_Robots_with_ROS00001.smil#span_000227">The</span>
                      <code xml:space="preserve" id="code_000060" smilref="Programming_Robots_with_ROS00001.smil#code_000060">catkin_create_pkg</code>
                      <span class="text" id="span_000228" smilref="Programming_Robots_with_ROS00001.smil#span_000228">command makes a directory with the same name as the new package (</span>
                      <em id="em_000066" smilref="Programming_Robots_with_ROS00001.smil#em_000066">my_awesome_code</em>
                      <span class="text" id="span_000229" smilref="Programming_Robots_with_ROS00001.smil#span_000229">) with a</span>
                      <em id="em_000067" smilref="Programming_Robots_with_ROS00001.smil#em_000067">CMakeLists.txt</em>
                      <span class="text" id="span_000230" smilref="Programming_Robots_with_ROS00001.smil#span_000230">file, a</span>
                      <em id="em_000068" smilref="Programming_Robots_with_ROS00001.smil#em_000068">package.xml</em>
                      <span class="text" id="span_000231" smilref="Programming_Robots_with_ROS00001.smil#span_000231">file, and a</span>
                      <em id="em_000069" smilref="Programming_Robots_with_ROS00001.smil#em_000069">src</em>
                      <span class="text" id="span_000232" smilref="Programming_Robots_with_ROS00002.smil#span_000232">directory in it. The</span>
                      <em id="em_000070" smilref="Programming_Robots_with_ROS00002.smil#em_000070">package.xml</em>
                      <span class="text" id="span_000233" smilref="Programming_Robots_with_ROS00002.smil#span_000233">file contains a bunch of metadata about your new package, as shown in</span>
                      <a data-type="xref" href="#ch02-package_file" external="false" id="a_000028" smilref="Programming_Robots_with_ROS00002.smil#a_000028">Example 2-1</a>
                      <span class="text" id="span_000234" smilref="Programming_Robots_with_ROS00002.smil#span_000234">.</span>
                    </p>
                    <h1 id="h1_000035" smilref="Programming_Robots_with_ROS00002.smil#h1_000035">Example 2-1. An example empty package file</h1>
                    <div id="ch02-package_file" data-type="example">
                      <p id="p_000090">
                        <code class="preserve-whitespace" xml:space="preserve" id="code_000061"><span class="text" id="span_000235" smilref="Programming_Robots_with_ROS00002.smil#span_000235">&lt;?xml version="1.0"?&gt;</span>
<span class="text" id="span_000236" smilref="Programming_Robots_with_ROS00002.smil#span_000236">&lt;package</span><span class="text" id="span_000237" smilref="Programming_Robots_with_ROS00002.smil#span_000237">&gt;</span>
  <span class="text" id="span_000238" smilref="Programming_Robots_with_ROS00002.smil#span_000238">&lt;name</span><span class="text" id="span_000239" smilref="Programming_Robots_with_ROS00002.smil#span_000239">&gt;</span><span class="text" id="span_000240" smilref="Programming_Robots_with_ROS00002.smil#span_000240">my_awesome_code</span><span class="text" id="span_000241" smilref="Programming_Robots_with_ROS00002.smil#span_000241">&lt;/name&gt;</span> <a class="co" id="ch02-aco_preliminaries_CO1-1" href="#ch02-acallout_preliminaries_CO1-1" external="false"><img src="images/1.jpg" alt="1" id="img_000004" /></a>
  <span class="text" id="span_000242" smilref="Programming_Robots_with_ROS00002.smil#span_000242">&lt;version</span><span class="text" id="span_000243" smilref="Programming_Robots_with_ROS00002.smil#span_000243">&gt;</span><span class="text" id="span_000244" smilref="Programming_Robots_with_ROS00002.smil#span_000244">0.0.0</span><span class="text" id="span_000245" smilref="Programming_Robots_with_ROS00002.smil#span_000245">&lt;/version&gt;</span> <a class="co" id="ch02-aco_preliminaries_CO1-2" href="#ch02-acallout_preliminaries_CO1-2" external="false"><img src="images/2.jpg" alt="2" id="img_000005" /></a>
  <span class="text" id="span_000246" smilref="Programming_Robots_with_ROS00002.smil#span_000246">&lt;description</span><span class="text" id="span_000247" smilref="Programming_Robots_with_ROS00002.smil#span_000247">&gt;</span><span class="text" id="span_000248" smilref="Programming_Robots_with_ROS00002.smil#span_000248">The my_awesome_code package</span><span class="text" id="span_000249" smilref="Programming_Robots_with_ROS00002.smil#span_000249">&lt;/description&gt;</span>  <a class="co" id="ch02-aco_preliminaries_CO1-3" href="#ch02-acallout_preliminaries_CO1-3" external="false"><img src="images/3.jpg" alt="3" id="img_000006" /></a>

  <span class="text" id="span_000250" smilref="Programming_Robots_with_ROS00002.smil#span_000250">&lt;!--</span><span class="text" id="span_000251" smilref="Programming_Robots_with_ROS00002.smil#span_000251"> One maintainer tag required, multiple allowed, one person per tag </span><span class="text" id="span_000252" smilref="Programming_Robots_with_ROS00002.smil#span_000252">--&gt;</span>
  <span class="text" id="span_000253" smilref="Programming_Robots_with_ROS00002.smil#span_000253">&lt;!--</span><span class="text" id="span_000254" smilref="Programming_Robots_with_ROS00002.smil#span_000254"> Example:  </span><span class="text" id="span_000255" smilref="Programming_Robots_with_ROS00002.smil#span_000255">--&gt;</span>
  <span class="text" id="span_000256" smilref="Programming_Robots_with_ROS00002.smil#span_000256">&lt;!--</span><span class="text" id="span_000257" smilref="Programming_Robots_with_ROS00002.smil#span_000257"> &lt;maintainer email="jane.doe@example.com"&gt;Jane Doe&lt;/maintainer&gt; </span><span class="text" id="span_000258" smilref="Programming_Robots_with_ROS00002.smil#span_000258">--&gt;</span>
  <span class="text" id="span_000259" smilref="Programming_Robots_with_ROS00002.smil#span_000259">&lt;maintainer</span> <span class="text" id="span_000260" smilref="Programming_Robots_with_ROS00002.smil#span_000260">email=</span><span class="text" id="span_000261" smilref="Programming_Robots_with_ROS00002.smil#span_000261">"user@todo.todo"</span><span class="text" id="span_000262" smilref="Programming_Robots_with_ROS00002.smil#span_000262">&gt;</span><span class="text" id="span_000263" smilref="Programming_Robots_with_ROS00002.smil#span_000263">user</span><span class="text" id="span_000264" smilref="Programming_Robots_with_ROS00002.smil#span_000264">&lt;/maintainer&gt;</span>  <a class="co" id="ch02-aco_preliminaries_CO1-4" href="#ch02-acallout_preliminaries_CO1-4" external="false"><img src="images/4.jpg" alt="4" id="img_000007" /></a>


  <span class="text" id="span_000265" smilref="Programming_Robots_with_ROS00002.smil#span_000265">&lt;!--</span><span class="text" id="span_000266" smilref="Programming_Robots_with_ROS00002.smil#span_000266"> One license tag required, multiple allowed, one license per tag </span><span class="text" id="span_000267" smilref="Programming_Robots_with_ROS00002.smil#span_000267">--&gt;</span>
  <span class="text" id="span_000268" smilref="Programming_Robots_with_ROS00002.smil#span_000268">&lt;!--</span><span class="text" id="span_000269" smilref="Programming_Robots_with_ROS00002.smil#span_000269"> Commonly used license strings: </span><span class="text" id="span_000270" smilref="Programming_Robots_with_ROS00002.smil#span_000270">--&gt;</span>
  <span class="text" id="span_000271" smilref="Programming_Robots_with_ROS00002.smil#span_000271">&lt;!--</span><span class="text" id="span_000272" smilref="Programming_Robots_with_ROS00002.smil#span_000272">   BSD, MIT, Boost Software License, GPLv2, GPLv3, LGPLv2.1, LGPLv3 </span><span class="text" id="span_000273" smilref="Programming_Robots_with_ROS00002.smil#span_000273">--&gt;</span>
  <span class="text" id="span_000274" smilref="Programming_Robots_with_ROS00002.smil#span_000274">&lt;license</span><span class="text" id="span_000275" smilref="Programming_Robots_with_ROS00002.smil#span_000275">&gt;</span><span class="text" id="span_000276" smilref="Programming_Robots_with_ROS00002.smil#span_000276">TODO</span><span class="text" id="span_000277" smilref="Programming_Robots_with_ROS00002.smil#span_000277">&lt;/license&gt;</span>  <a class="co" id="ch02-aco_preliminaries_CO1-5" href="#ch02-acallout_preliminaries_CO1-5" external="false"><img src="images/5.jpg" alt="5" id="img_000008" /></a>


  <span class="text" id="span_000278" smilref="Programming_Robots_with_ROS00002.smil#span_000278">&lt;!--</span><span class="text" id="span_000279" smilref="Programming_Robots_with_ROS00002.smil#span_000279"> Url tags are optional, but multiple are allowed, one per tag </span><span class="text" id="span_000280" smilref="Programming_Robots_with_ROS00002.smil#span_000280">--&gt;</span>
  <span class="text" id="span_000281" smilref="Programming_Robots_with_ROS00002.smil#span_000281">&lt;!--</span><span class="text" id="span_000282" smilref="Programming_Robots_with_ROS00002.smil#span_000282"> Optional attribute type can be: website, bugtracker, or repository </span><span class="text" id="span_000283" smilref="Programming_Robots_with_ROS00002.smil#span_000283">--&gt;</span>
  <span class="text" id="span_000284" smilref="Programming_Robots_with_ROS00002.smil#span_000284">&lt;!--</span><span class="text" id="span_000285" smilref="Programming_Robots_with_ROS00002.smil#span_000285"> Example: </span><span class="text" id="span_000286" smilref="Programming_Robots_with_ROS00002.smil#span_000286">--&gt;</span>
  <span class="text" id="span_000287" smilref="Programming_Robots_with_ROS00002.smil#span_000287">&lt;!--</span><span class="text" id="span_000288" smilref="Programming_Robots_with_ROS00002.smil#span_000288"> &lt;url type="website"&gt;http://wiki.ros.org/my_awesome_code&lt;/url&gt; </span><span class="text" id="span_000289" smilref="Programming_Robots_with_ROS00002.smil#span_000289">--&gt;</span>    <a class="co" id="ch02-aco_preliminaries_CO1-6" href="#ch02-acallout_preliminaries_CO1-6" external="false"><img src="images/6.jpg" alt="6" id="img_000009" /></a>


  <span class="text" id="span_000290" smilref="Programming_Robots_with_ROS00002.smil#span_000290">&lt;!--</span><span class="text" id="span_000291" smilref="Programming_Robots_with_ROS00002.smil#span_000291"> Author tags are optional, multiple are allowed, one per tag </span><span class="text" id="span_000292" smilref="Programming_Robots_with_ROS00002.smil#span_000292">--&gt;</span>
  <span class="text" id="span_000293" smilref="Programming_Robots_with_ROS00002.smil#span_000293">&lt;!--</span><span class="text" id="span_000294" smilref="Programming_Robots_with_ROS00002.smil#span_000294"> Authors do not have to be maintainers, but could be </span><span class="text" id="span_000295" smilref="Programming_Robots_with_ROS00002.smil#span_000295">--&gt;</span>
  <span class="text" id="span_000296" smilref="Programming_Robots_with_ROS00002.smil#span_000296">&lt;!--</span><span class="text" id="span_000297" smilref="Programming_Robots_with_ROS00002.smil#span_000297"> Example: </span><span class="text" id="span_000298" smilref="Programming_Robots_with_ROS00002.smil#span_000298">--&gt;</span>
  <span class="text" id="span_000299" smilref="Programming_Robots_with_ROS00002.smil#span_000299">&lt;!--</span><span class="text" id="span_000300" smilref="Programming_Robots_with_ROS00002.smil#span_000300"> &lt;author email="jane.doe@example.com"&gt;Jane Doe&lt;/author&gt; </span><span class="text" id="span_000301" smilref="Programming_Robots_with_ROS00002.smil#span_000301">--&gt;</span>    <a class="co" id="ch02-aco_preliminaries_CO1-7" href="#ch02-acallout_preliminaries_CO1-7" external="false"><img src="images/7.jpg" alt="7" id="img_000010" /></a>


  <span class="text" id="span_000302" smilref="Programming_Robots_with_ROS00002.smil#span_000302">&lt;!--</span><span class="text" id="span_000303" smilref="Programming_Robots_with_ROS00002.smil#span_000303"> The *_depend tags are used to specify dependencies </span><span class="text" id="span_000304" smilref="Programming_Robots_with_ROS00002.smil#span_000304">--&gt;</span>
  <span class="text" id="span_000305" smilref="Programming_Robots_with_ROS00002.smil#span_000305">&lt;!--</span><span class="text" id="span_000306" smilref="Programming_Robots_with_ROS00002.smil#span_000306"> Dependencies can be catkin packages or system dependencies </span><span class="text" id="span_000307" smilref="Programming_Robots_with_ROS00002.smil#span_000307">--&gt;</span>
  <span class="text" id="span_000308" smilref="Programming_Robots_with_ROS00002.smil#span_000308">&lt;!--</span><span class="text" id="span_000309" smilref="Programming_Robots_with_ROS00002.smil#span_000309"> Examples: </span><span class="text" id="span_000310" smilref="Programming_Robots_with_ROS00002.smil#span_000310">--&gt;</span>
  <span class="text" id="span_000311" smilref="Programming_Robots_with_ROS00002.smil#span_000311">&lt;!--</span><span class="text" id="span_000312" smilref="Programming_Robots_with_ROS00002.smil#span_000312"> Use build_depend for packages you need at compile time: </span><span class="text" id="span_000313" smilref="Programming_Robots_with_ROS00002.smil#span_000313">--&gt;</span>
  <span class="text" id="span_000314" smilref="Programming_Robots_with_ROS00002.smil#span_000314">&lt;!--</span><span class="text" id="span_000315" smilref="Programming_Robots_with_ROS00002.smil#span_000315">   &lt;build_depend&gt;message_generation&lt;/build_depend&gt; </span><span class="text" id="span_000316" smilref="Programming_Robots_with_ROS00002.smil#span_000316">--&gt;</span>
  <span class="text" id="span_000317" smilref="Programming_Robots_with_ROS00002.smil#span_000317">&lt;!--</span><span class="text" id="span_000318" smilref="Programming_Robots_with_ROS00002.smil#span_000318"> Use buildtool_depend for build tool packages: </span><span class="text" id="span_000319" smilref="Programming_Robots_with_ROS00002.smil#span_000319">--&gt;</span>
  <span class="text" id="span_000320" smilref="Programming_Robots_with_ROS00002.smil#span_000320">&lt;!--</span><span class="text" id="span_000321" smilref="Programming_Robots_with_ROS00002.smil#span_000321">   &lt;buildtool_depend&gt;catkin&lt;/buildtool_depend&gt; </span><span class="text" id="span_000322" smilref="Programming_Robots_with_ROS00002.smil#span_000322">--&gt;</span>
  <span class="text" id="span_000323" smilref="Programming_Robots_with_ROS00002.smil#span_000323">&lt;!--</span><span class="text" id="span_000324" smilref="Programming_Robots_with_ROS00002.smil#span_000324"> Use run_depend for packages you need at runtime: </span><span class="text" id="span_000325" smilref="Programming_Robots_with_ROS00002.smil#span_000325">--&gt;</span>
  <span class="text" id="span_000326" smilref="Programming_Robots_with_ROS00002.smil#span_000326">&lt;!--</span><span class="text" id="span_000327" smilref="Programming_Robots_with_ROS00002.smil#span_000327">   &lt;run_depend&gt;message_runtime&lt;/run_depend&gt; </span><span class="text" id="span_000328" smilref="Programming_Robots_with_ROS00002.smil#span_000328">--&gt;</span>
  <span class="text" id="span_000329" smilref="Programming_Robots_with_ROS00002.smil#span_000329">&lt;!--</span><span class="text" id="span_000330" smilref="Programming_Robots_with_ROS00002.smil#span_000330"> Use test_depend for packages you need only for testing: </span><span class="text" id="span_000331" smilref="Programming_Robots_with_ROS00002.smil#span_000331">--&gt;</span>
  <span class="text" id="span_000332" smilref="Programming_Robots_with_ROS00002.smil#span_000332">&lt;!--</span><span class="text" id="span_000333" smilref="Programming_Robots_with_ROS00002.smil#span_000333">   &lt;test_depend&gt;gtest&lt;/test_depend&gt; </span><span class="text" id="span_000334" smilref="Programming_Robots_with_ROS00002.smil#span_000334">--&gt;</span>
  <span class="text" id="span_000335" smilref="Programming_Robots_with_ROS00002.smil#span_000335">&lt;buildtool_depend</span><span class="text" id="span_000336" smilref="Programming_Robots_with_ROS00002.smil#span_000336">&gt;</span><span class="text" id="span_000337" smilref="Programming_Robots_with_ROS00002.smil#span_000337">catkin</span><span class="text" id="span_000338" smilref="Programming_Robots_with_ROS00002.smil#span_000338">&lt;/buildtool_depend&gt;</span>    <a class="co" id="ch02-aco_preliminaries_CO1-8" href="#ch02-acallout_preliminaries_CO1-8" external="false"><img src="images/8.jpg" alt="8" id="img_000011" /></a>
  <span class="text" id="span_000339" smilref="Programming_Robots_with_ROS00002.smil#span_000339">&lt;build_depend</span><span class="text" id="span_000340" smilref="Programming_Robots_with_ROS00002.smil#span_000340">&gt;</span><span class="text" id="span_000341" smilref="Programming_Robots_with_ROS00002.smil#span_000341">rospy</span><span class="text" id="span_000342" smilref="Programming_Robots_with_ROS00002.smil#span_000342">&lt;/build_depend&gt;</span>
  <span class="text" id="span_000343" smilref="Programming_Robots_with_ROS00002.smil#span_000343">&lt;run_depend</span><span class="text" id="span_000344" smilref="Programming_Robots_with_ROS00002.smil#span_000344">&gt;</span><span class="text" id="span_000345" smilref="Programming_Robots_with_ROS00002.smil#span_000345">rospy</span><span class="text" id="span_000346" smilref="Programming_Robots_with_ROS00002.smil#span_000346">&lt;/run_depend&gt;</span>


  <span class="text" id="span_000347" smilref="Programming_Robots_with_ROS00002.smil#span_000347">&lt;!--</span><span class="text" id="span_000348" smilref="Programming_Robots_with_ROS00002.smil#span_000348"> The export tag contains other, unspecified, tags </span><span class="text" id="span_000349" smilref="Programming_Robots_with_ROS00002.smil#span_000349">--&gt;</span>
  <span class="text" id="span_000350" smilref="Programming_Robots_with_ROS00002.smil#span_000350">&lt;export</span><span class="text" id="span_000351" smilref="Programming_Robots_with_ROS00002.smil#span_000351">&gt;</span>    <a class="co" id="ch02-aco_preliminaries_CO1-9" href="#ch02-acallout_preliminaries_CO1-9" external="false"><img src="images/9.jpg" alt="9" id="img_000012" /></a>
    <span class="text" id="span_000352" smilref="Programming_Robots_with_ROS00002.smil#span_000352">&lt;!--</span><span class="text" id="span_000353" smilref="Programming_Robots_with_ROS00002.smil#span_000353"> Other tools can request additional information be placed here </span><span class="text" id="span_000354" smilref="Programming_Robots_with_ROS00002.smil#span_000354">--&gt;</span>

  <span class="text" id="span_000355" smilref="Programming_Robots_with_ROS00002.smil#span_000355">&lt;/export&gt;</span>
<span class="text" id="span_000356" smilref="Programming_Robots_with_ROS00002.smil#span_000356">&lt;/package&gt;</span></code>
                      </p>
                      <dl class="calloutlist" id="dl_000003">
                        <dt id="dt_000010">
                          <a class="co" id="ch02-acallout_preliminaries_CO1-1" href="#ch02-aco_preliminaries_CO1-1" external="false">
                            <img src="images/1.jpg" alt="1" id="img_000013" />
                          </a>
                        </dt>
                        <dd id="dd_000010">
                          <p id="p_000091" smilref="Programming_Robots_with_ROS00002.smil#p_000091">The name of your package. You shouldn't change this.</p>
                        </dd>
                        <dt id="dt_000011">
                          <a class="co" id="ch02-acallout_preliminaries_CO1-2" href="#ch02-aco_preliminaries_CO1-2" external="false">
                            <img src="images/2.jpg" alt="2" id="img_000014" />
                          </a>
                        </dt>
                        <dd id="dd_000011">
                          <p id="p_000092" smilref="Programming_Robots_with_ROS00002.smil#p_000092">The version number.</p>
                        </dd>
                        <dt id="dt_000012">
                          <a class="co" id="ch02-acallout_preliminaries_CO1-3" href="#ch02-aco_preliminaries_CO1-3" external="false">
                            <img src="images/3.jpg" alt="3" id="img_000015" />
                          </a>
                        </dt>
                        <dd id="dd_000012">
                          <p id="p_000093" smilref="Programming_Robots_with_ROS00002.smil#p_000093">A short description of what's in the package and what it's for.</p>
                        </dd>
                        <dt id="dt_000013">
                          <a class="co" id="ch02-acallout_preliminaries_CO1-4" href="#ch02-aco_preliminaries_CO1-4" external="false">
                            <img src="images/4.jpg" alt="4" id="img_000016" />
                          </a>
                        </dt>
                        <dd id="dd_000013">
                          <p id="p_000094" smilref="Programming_Robots_with_ROS00002.smil#p_000094">Who's responsible for maintaining the package and fixing bugs?</p>
                        </dd>
                        <dt id="dt_000014">
                          <a class="co" id="ch02-acallout_preliminaries_CO1-5" href="#ch02-aco_preliminaries_CO1-5" external="false">
                            <img src="images/5.jpg" alt="5" id="img_000017" />
                          </a>
                        </dt>
                        <dd id="dd_000014">
                          <p id="p_000095" smilref="Programming_Robots_with_ROS00002.smil#p_000095">What license are you releasing the code under?</p>
                        </dd>
                        <dt id="dt_000015">
                          <a class="co" id="ch02-acallout_preliminaries_CO1-6" href="#ch02-aco_preliminaries_CO1-6" external="false">
                            <img src="images/6.jpg" alt="6" id="img_000018" />
                          </a>
                        </dt>
                        <dd id="dd_000015">
                          <p id="p_000096" smilref="Programming_Robots_with_ROS00002.smil#p_000096">A URL, often pointing at the ROS wiki page for the package.</p>
                        </dd>
                        <dt id="dt_000016">
                          <a class="co" id="ch02-acallout_preliminaries_CO1-7" href="#ch02-aco_preliminaries_CO1-7" external="false">
                            <img src="images/7.jpg" alt="7" id="img_000019" />
                          </a>
                        </dt>
                        <dd id="dd_000016">
                          <p id="p_000097" smilref="Programming_Robots_with_ROS00002.smil#p_000097">Who wrote the package? One set of tags per author.</p>
                        </dd>
                        <dt id="dt_000017">
                          <a class="co" id="ch02-acallout_preliminaries_CO1-8" href="#ch02-aco_preliminaries_CO1-8" external="false">
                            <img src="images/8.jpg" alt="8" id="img_000020" />
                          </a>
                        </dt>
                        <dd id="dd_000017">
                          <p id="p_000098" smilref="Programming_Robots_with_ROS00002.smil#p_000098">What dependencies does the package have? We'll cover this later.</p>
                        </dd>
                        <dt id="dt_000018">
                          <a class="co" id="ch02-acallout_preliminaries_CO1-9" href="#ch02-aco_preliminaries_CO1-9" external="false">
                            <img src="images/9.jpg" alt="9" id="img_000021" />
                          </a>
                        </dt>
                        <dd id="dd_000018">
                          <p id="p_000099">
                            <span class="text" id="span_000357" smilref="Programming_Robots_with_ROS00002.smil#span_000357">This is for information used by other tools external to</span>
                            <code xml:space="preserve" id="code_000062" smilref="Programming_Robots_with_ROS00002.smil#code_000062">catkin</code>
                            <span class="text" id="span_000358" smilref="Programming_Robots_with_ROS00002.smil#span_000358">.</span>
                          </p>
                        </dd>
                      </dl>
                    </div>
                    <p id="p_000100">
                      <span class="text" id="span_000359" smilref="Programming_Robots_with_ROS00002.smil#span_000359">We're going to ignore the</span>
                      <em id="em_000071" smilref="Programming_Robots_with_ROS00002.smil#em_000071">CMakeLists.txt</em>
                      <span class="text" id="span_000360" smilref="Programming_Robots_with_ROS00002.smil#span_000360">file for now, since we'll return to it later. You can take a look at it if you like, but unless you are already familiar with</span>
                      <code xml:space="preserve" id="code_000063" smilref="Programming_Robots_with_ROS00002.smil#code_000063">CMake</code>
                      <span class="text" id="span_000361" smilref="Programming_Robots_with_ROS00002.smil#span_000361">it might not make a lot of sense to you.</span>
                    </p>
                    <p id="p_000101">
                      <span class="text" id="span_000362" smilref="Programming_Robots_with_ROS00002.smil#span_000362">Once you have a created package, you can put your Python nodes in the</span>
                      <em id="em_000072" smilref="Programming_Robots_with_ROS00002.smil#em_000072">src</em>
                      <span class="text" id="span_000363" smilref="Programming_Robots_with_ROS00002.smil#span_000363">directory. Other files go in directories under the package directory, too. For instance, launch files, which we'll talk about soon, conventionally go in a directory called</span>
                      <em id="em_000073" smilref="Programming_Robots_with_ROS00002.smil#em_000073">launch</em>
                      <span class="text" id="span_000364" smilref="Programming_Robots_with_ROS00002.smil#span_000364">.</span>
                    </p>
                    <p id="p_000102" smilref="Programming_Robots_with_ROS00002.smil#p_000102">Now that you know what a package directory looks like, we're going to talk about the tools that you're going to use to run nodes from your packages.</p>
                  </div>
                </section>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="rosrun" id="section_000025">
              <h1 id="h1_000036" smilref="Programming_Robots_with_ROS00002.smil#h1_000036">rosrun</h1>
              <div class="sect1" id="ch02-idp217664">
                <p data-type="indexterm" data-primary="ROS command-line tools" data-secondary="rosrun" id="ch02-ix_2-preliminaries-asciidoc3">
                  <span class="text" id="span_000365" smilref="Programming_Robots_with_ROS00002.smil#span_000365">Since ROS has a large, distributed community, its software is organized into packages that are independently developed by community members. The concept of a ROS package will be described in greater detail in subsequent chapters, but a package can be thought of as a collection of resources that are built and distributed together. Packages are just locations in the filesystem, and because ROS nodes are typically executable programs, one could manually</span>
                  <code xml:space="preserve" id="code_000064" smilref="Programming_Robots_with_ROS00002.smil#code_000064">cd</code>
                  <span class="text" id="span_000366" smilref="Programming_Robots_with_ROS00002.smil#span_000366">around the filesystem to start all the ROS nodes of interest.</span>
                </p>
                <p id="p_000103">
                  <span class="text" id="span_000367" smilref="Programming_Robots_with_ROS00002.smil#span_000367">For example, the</span>
                  <code xml:space="preserve" id="code_000065" smilref="Programming_Robots_with_ROS00002.smil#code_000065">talker</code>
                  <span class="text" id="span_000368" smilref="Programming_Robots_with_ROS00002.smil#span_000368">program lives in a package named</span>
                  <code xml:space="preserve" id="code_000066" smilref="Programming_Robots_with_ROS00002.smil#code_000066">rospy_tutorials</code>
                  <span class="text" id="span_000369" smilref="Programming_Robots_with_ROS00002.smil#span_000369">, and its executable programs are found in</span>
                  <em id="em_000074" smilref="Programming_Robots_with_ROS00002.smil#em_000074">/opt/ros/indigo/share/rospy_tutorials</em>
                  <span class="text" id="span_000370" smilref="Programming_Robots_with_ROS00002.smil#span_000370">. However, chasing down these long paths would become tiresome in large filesystems, since nodes can be deeply buried in large directory hierarchies. To automate this task, ROS provides a command-line utility called</span>
                  <code xml:space="preserve" id="code_000067" smilref="Programming_Robots_with_ROS00002.smil#code_000067">rosrun</code>
                  <span class="text" id="span_000371" smilref="Programming_Robots_with_ROS00002.smil#span_000371">that will search a package for the requested program and pass it any parameters supplied on the command line. The syntax is as follows:</span>
                </p>
                <p id="p_000104">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000068"><span class="text" id="span_000372" smilref="Programming_Robots_with_ROS00002.smil#span_000372">
user@hostname$ </span><strong id="strong_000020"><em id="em_000075" smilref="Programming_Robots_with_ROS00002.smil#em_000075">rosrun PACKAGE EXECUTABLE</em><span class="text" id="span_000373" smilref="Programming_Robots_with_ROS00002.smil#span_000373"> [</span><em id="em_000076" smilref="Programming_Robots_with_ROS00002.smil#em_000076">ARGS</em><span class="text" id="span_000374" smilref="Programming_Robots_with_ROS00002.smil#span_000374">]</span></strong>
</code>
                </p>
                <p id="p_000105">
                  <span class="text" id="span_000375" smilref="Programming_Robots_with_ROS00002.smil#span_000375">To run the</span>
                  <code xml:space="preserve" id="code_000069" smilref="Programming_Robots_with_ROS00002.smil#code_000069">talker</code>
                  <span class="text" id="span_000376" smilref="Programming_Robots_with_ROS00002.smil#span_000376">program in the</span>
                  <code xml:space="preserve" id="code_000070" smilref="Programming_Robots_with_ROS00002.smil#code_000070">rospy_tutorials</code>
                  <span class="text" id="span_000377" smilref="Programming_Robots_with_ROS00002.smil#span_000377">package, no matter where one happened to be in the filesystem, one would first start a</span>
                  <code xml:space="preserve" id="code_000071" smilref="Programming_Robots_with_ROS00002.smil#code_000071">roscore</code>
                  <span class="text" id="span_000378" smilref="Programming_Robots_with_ROS00002.smil#span_000378">instance in a terminal emulator window:</span>
                </p>
                <p id="p_000106">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000072"><span class="text" id="span_000379" smilref="Programming_Robots_with_ROS00002.smil#span_000379">
user@hostname$ </span><strong id="strong_000021" smilref="Programming_Robots_with_ROS00002.smil#strong_000021">roscore</strong>
</code>
                </p>
                <p id="p_000107" smilref="Programming_Robots_with_ROS00002.smil#p_000107">Then, in another terminal window, run:</p>
                <p id="p_000108">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000073"><span class="text" id="span_000380" smilref="Programming_Robots_with_ROS00002.smil#span_000380">
user@hostname$ </span><strong id="strong_000022" smilref="Programming_Robots_with_ROS00002.smil#strong_000022">rosrun rospy_tutorials talker</strong>
</code>
                </p>
                <p id="p_000109">
                  <span class="text" id="span_000381" smilref="Programming_Robots_with_ROS00002.smil#span_000381">This will create the ROS graph in</span>
                  <a data-type="xref" href="#ch02-talker_alone" external="false" id="a_000029" smilref="Programming_Robots_with_ROS00002.smil#a_000029">Figure 2-3</a>
                  <span class="text" id="span_000382" smilref="Programming_Robots_with_ROS00002.smil#span_000382">.</span>
                </p>
                <figure id="figure_000004">
                  <h1 id="h1_000037" smilref="Programming_Robots_with_ROS00002.smil#h1_000037">Figure 2-3. A ROS graph with only one node</h1>
                  <div id="ch02-talker_alone" class="figure">
                    <img src="images/prwr_0203.jpg" alt="A ROS graph with only one node" id="img_000022" />
                  </div>
                </figure>
                <p id="p_000110">
                  <span class="text" id="span_000383" smilref="Programming_Robots_with_ROS00002.smil#span_000383">In the terminal with</span>
                  <code xml:space="preserve" id="code_000074" smilref="Programming_Robots_with_ROS00002.smil#code_000074">talker</code>
                  <span class="text" id="span_000384" smilref="Programming_Robots_with_ROS00002.smil#span_000384">, there will be a sequence of timestamp messages printing to the console:</span>
                </p>
                <p id="p_000111">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000075"><span class="text" id="span_000385" smilref="Programming_Robots_with_ROS00002.smil#span_000385">
user@hostname$ </span><strong id="strong_000023" smilref="Programming_Robots_with_ROS00002.smil#strong_000023">rosrun rospy_tutorials talker</strong><span class="text" id="span_000386" smilref="Programming_Robots_with_ROS00002.smil#span_000386">

[INFO] [WallTime: 1439847784.336147] hello world 1439847784.34
[INFO] [WallTime: 1439847784.436334] hello world 1439847784.44
[INFO] [WallTime: 1439847784.536316] hello world 1439847784.54
[INFO] [WallTime: 1439847784.636319] hello world 1439847784.64
</span></code>
                </p>
                <p id="p_000112">
                  <span class="text" id="span_000387" smilref="Programming_Robots_with_ROS00002.smil#span_000387">The</span>
                  <code xml:space="preserve" id="code_000076" smilref="Programming_Robots_with_ROS00002.smil#code_000076">talker</code>
                  <span class="text" id="span_000388" smilref="Programming_Robots_with_ROS00002.smil#span_000388">program is the ROS equivalent of the canonical first program whose task is to print "Hello, world!" to the console. In the ROS case, since we are dealing with message streams rather than single statements,</span>
                  <code xml:space="preserve" id="code_000077" smilref="Programming_Robots_with_ROS00002.smil#code_000077">talker</code>
                  <span class="text" id="span_000389" smilref="Programming_Robots_with_ROS00002.smil#span_000389">sends a stream of "hello world" messages 10 times per second, appending the Unix timestamp so that it's easy to tell that the messages are changing over time.</span>
                  <code xml:space="preserve" id="code_000078" smilref="Programming_Robots_with_ROS00002.smil#code_000078">talker</code>
                  <span class="text" id="span_000390" smilref="Programming_Robots_with_ROS00002.smil#span_000390">prints these messages to the console as well as sending them via ROS to any nodes who are listening.</span>
                </p>
                <p id="p_000113">
                  <span class="text" id="span_000391" smilref="Programming_Robots_with_ROS00002.smil#span_000391">It is instructive to think about how this is implemented. In Unix, every program has a stream called "standard output," or</span>
                  <code xml:space="preserve" id="code_000079" smilref="Programming_Robots_with_ROS00002.smil#code_000079">stdout</code>
                  <span class="text" id="span_000392" smilref="Programming_Robots_with_ROS00002.smil#span_000392">. When an interactive terminal runs a "Hello, world!" program, its</span>
                  <code xml:space="preserve" id="code_000080" smilref="Programming_Robots_with_ROS00002.smil#code_000080">stdout</code>
                  <span class="text" id="span_000393" smilref="Programming_Robots_with_ROS00002.smil#span_000393">stream is received by its parent terminal program, which renders the text in a</span>
                  <em id="em_000077" smilref="Programming_Robots_with_ROS00002.smil#em_000077">terminal emulator</em>
                  <span class="text" id="span_000394" smilref="Programming_Robots_with_ROS00002.smil#span_000394">window. In ROS, this concept is extended so that programs have an arbitrary number of streams, connected to an arbitrary number of other programs running on machines anywhere in the network, any of which can start up or shut down at any time.</span>
                </p>
                <p id="p_000114">
                  <span class="text" id="span_000395" smilref="Programming_Robots_with_ROS00002.smil#span_000395">Therefore, creating a minimal "Hello, world!" system in ROS requires two nodes, with one node sending a stream of string messages to the other nodes. As we have seen,</span>
                  <code xml:space="preserve" id="code_000081" smilref="Programming_Robots_with_ROS00002.smil#code_000081">talker</code>
                  <span class="text" id="span_000396" smilref="Programming_Robots_with_ROS00002.smil#span_000396">will periodically send "hello world" as a text message. Simultaneously, we will start a</span>
                  <code xml:space="preserve" id="code_000082" smilref="Programming_Robots_with_ROS00002.smil#code_000082">listener</code>
                  <span class="text" id="span_000397" smilref="Programming_Robots_with_ROS00002.smil#span_000397">node, which will await new string messages and print them to the console as they arrive. Whenever both of these programs advertise themselves to the same</span>
                  <code xml:space="preserve" id="code_000083" smilref="Programming_Robots_with_ROS00002.smil#code_000083">roscore</code>
                  <span class="text" id="span_000398" smilref="Programming_Robots_with_ROS00002.smil#span_000398">, ROS will connect them as shown in</span>
                  <a data-type="xref" href="#ch02-hello_world_graph" external="false" id="a_000030" smilref="Programming_Robots_with_ROS00002.smil#a_000030">Figure 2-4</a>
                  <span class="text" id="span_000399" smilref="Programming_Robots_with_ROS00002.smil#span_000399">. Note that in</span>
                  <a data-type="xref" href="#ch02-hello_world_graph" external="false" id="a_000031" smilref="Programming_Robots_with_ROS00002.smil#a_000031">Figure 2-4</a>
                  <span class="text" id="span_000400" smilref="Programming_Robots_with_ROS00002.smil#span_000400">and all future ROS graph renderings, we will omit</span>
                  <code xml:space="preserve" id="code_000084" smilref="Programming_Robots_with_ROS00002.smil#code_000084">roscore</code>
                  <span class="text" id="span_000401" smilref="Programming_Robots_with_ROS00002.smil#span_000401">from the graph, since it is implied by the existence of the graph itself (i.e., without</span>
                  <code xml:space="preserve" id="code_000085" smilref="Programming_Robots_with_ROS00002.smil#code_000085">roscore</code>
                  <span class="text" id="span_000402" smilref="Programming_Robots_with_ROS00002.smil#span_000402">, there could be no ROS graph).</span>
                </p>
                <figure id="figure_000005">
                  <h1 id="h1_000038" smilref="Programming_Robots_with_ROS00002.smil#h1_000038">Figure 2-4. "Hello, world!" in ROS: talker sends messages to listener</h1>
                  <div id="ch02-hello_world_graph" class="figure">
                    <img src="images/prwr_0204.jpg" alt="Hello, world! as a ROS graph" id="img_000023" />
                  </div>
                </figure>
                <p class="pagebreak-before" id="p_000115">
                  <span class="text" id="span_000403" smilref="Programming_Robots_with_ROS00002.smil#span_000403">To create this graph on your own computer, you'll need three terminal windows. The first two, as before, will run</span>
                  <code xml:space="preserve" id="code_000086" smilref="Programming_Robots_with_ROS00002.smil#code_000086">roscore</code>
                  <span class="text" id="span_000404" smilref="Programming_Robots_with_ROS00002.smil#span_000404">and</span>
                  <code xml:space="preserve" id="code_000087" smilref="Programming_Robots_with_ROS00002.smil#code_000087">talker</code>
                  <span class="text" id="span_000405" smilref="Programming_Robots_with_ROS00002.smil#span_000405">, and the third one will run</span>
                  <span class="keep-together" id="span_000406">
                    <code xml:space="preserve" id="code_000088" smilref="Programming_Robots_with_ROS00002.smil#code_000088">listener</code>
                  </span>
                  <span class="text" id="span_000407" smilref="Programming_Robots_with_ROS00002.smil#span_000407">:</span>
                </p>
                <p id="p_000116">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000089"><span class="text" id="span_000408" smilref="Programming_Robots_with_ROS00002.smil#span_000408">
user@hostname$ </span><strong id="strong_000024" smilref="Programming_Robots_with_ROS00002.smil#strong_000024">rosrun rospy_tutorials listener</strong><span class="text" id="span_000409" smilref="Programming_Robots_with_ROS00002.smil#span_000409">

[INFO] [WallTime: 1439848277.141546] /listener_14364_1439848276913 \
  I heard hello world 1439848277.14
[INFO] [WallTime: 1439848277.241519] /listener_14364_1439848276913 \
  I heard hello world 1439848277.24
[INFO] [WallTime: 1439848277.341668] /listener_14364_1439848276913 \
  I heard hello world 1439848277.34
[INFO] [WallTime: 1439848277.441579] /listener_14364_1439848276913 \
  I heard hello world 1439848277.44
</span></code>
                </p>
                <p data-type="indexterm" data-primary="rqt_* interfaces" data-secondary="rqt_graph visualizer" id="ch02-idp16941936">
                  <span class="text" id="span_000410" smilref="Programming_Robots_with_ROS00002.smil#span_000410">Hooray! The</span>
                  <code xml:space="preserve" id="code_000090" smilref="Programming_Robots_with_ROS00002.smil#code_000090">talker</code>
                  <span class="text" id="span_000411" smilref="Programming_Robots_with_ROS00002.smil#span_000411">node is now sending messages to the</span>
                  <code xml:space="preserve" id="code_000091" smilref="Programming_Robots_with_ROS00002.smil#code_000091">listener</code>
                  <span class="text" id="span_000412" smilref="Programming_Robots_with_ROS00002.smil#span_000412">node. We can now use some ROS command-line tools to query the system and understand more about what's happening. First, we can use the command-line tool</span>
                  <code xml:space="preserve" id="code_000092" smilref="Programming_Robots_with_ROS00002.smil#code_000092">rostopic</code>
                  <span class="text" id="span_000413" smilref="Programming_Robots_with_ROS00002.smil#span_000413">, which is an extremely useful tool for introspecting running ROS systems.</span>
                  <code xml:space="preserve" id="code_000093" smilref="Programming_Robots_with_ROS00002.smil#code_000093">rostopic</code>
                  <span class="text" id="span_000414" smilref="Programming_Robots_with_ROS00002.smil#span_000414">has many subcommands that will be introduced in later chapters, but its simplest and most-commonly used subcommand is to print the list of current message topics to the console. While leaving the other three terminals open and running (that is, the terminals with,</span>
                  <code xml:space="preserve" id="code_000094" smilref="Programming_Robots_with_ROS00002.smil#code_000094">roscore</code>
                  <span class="text" id="span_000415" smilref="Programming_Robots_with_ROS00002.smil#span_000415">,</span>
                  <code xml:space="preserve" id="code_000095" smilref="Programming_Robots_with_ROS00002.smil#code_000095">talker</code>
                  <span class="text" id="span_000416" smilref="Programming_Robots_with_ROS00002.smil#span_000416">, and</span>
                  <code xml:space="preserve" id="code_000096" smilref="Programming_Robots_with_ROS00002.smil#code_000096">listener</code>
                  <span class="text" id="span_000417" smilref="Programming_Robots_with_ROS00002.smil#span_000417">), open a fourth terminal window and launch the ROS Qt-based graph visualizer,</span>
                  <code xml:space="preserve" id="code_000097" smilref="Programming_Robots_with_ROS00002.smil#code_000097">rqt_graph</code>
                  <span class="text" id="span_000418" smilref="Programming_Robots_with_ROS00002.smil#span_000418">:</span>
                </p>
                <p id="p_000117">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000098"><span class="text" id="span_000419" smilref="Programming_Robots_with_ROS00002.smil#span_000419">
user@hostname$ </span><strong id="strong_000025" smilref="Programming_Robots_with_ROS00002.smil#strong_000025">rqt_graph</strong>
</code>
                </p>
                <p id="p_000118">
                  <span class="text" id="span_000420" smilref="Programming_Robots_with_ROS00002.smil#span_000420">This will bring up a display that produces renderings similar to those shown in</span>
                  <a data-type="xref" href="#ch02-hello_world_graph" external="false" id="a_000032" smilref="Programming_Robots_with_ROS00002.smil#a_000032">Figure 2-4</a>
                  <span class="text" id="span_000421" smilref="Programming_Robots_with_ROS00002.smil#span_000421">. The renderings will not autorefresh, but you can click the refresh icon in the upper-left corner of the</span>
                  <code xml:space="preserve" id="code_000099" smilref="Programming_Robots_with_ROS00002.smil#code_000099">rqt_graph</code>
                  <span class="text" id="span_000422" smilref="Programming_Robots_with_ROS00002.smil#span_000422">window when you add a node to or remove one from the ROS graph by terminating (e.g., pressing Ctrl-C) or running (via</span>
                  <code xml:space="preserve" id="code_000100" smilref="Programming_Robots_with_ROS00002.smil#code_000100">rosrun</code>
                  <span class="text" id="span_000423" smilref="Programming_Robots_with_ROS00002.smil#span_000423">) its program, and the graph will be redrawn to represent the current state of the system.</span>
                </p>
                <p data-type="indexterm" data-primary="anonymous publish/subscribe system" id="ch02-idp16946960">
                  <span class="text" id="span_000424" smilref="Programming_Robots_with_ROS00002.smil#span_000424">Now that we have a ROS graph up and running, we can demonstrate some of the benefits of this message-passing architecture. Imagine that you wanted to create a log file of these "hello world" messages. Typical ROS development follows the pattern of an</span>
                  <em id="em_000078" smilref="Programming_Robots_with_ROS00002.smil#em_000078">anonymous</em>
                  <span class="text" id="span_000425" smilref="Programming_Robots_with_ROS00002.smil#span_000425">publish/subscribe system: nodes generally do not receive or use any details about the identity or function of the peer nodes, where their inbound messages are coming from, or where they are going. There are special cases (for example, debugging tools) that acquire and use this information, but generally speaking, typical ROS development does not, with the goal that software modules will work with a wide variety of peer nodes.</span>
                </p>
                <p data-type="indexterm" data-primary="logger program" id="ch02-idp16948656">
                  <span class="text" id="span_000426" smilref="Programming_Robots_with_ROS00002.smil#span_000426">We can thus create a generic</span>
                  <code xml:space="preserve" id="code_000101" smilref="Programming_Robots_with_ROS00002.smil#code_000101">logger</code>
                  <span class="text" id="span_000427" smilref="Programming_Robots_with_ROS00002.smil#span_000427">program that writes all incoming messages to disk, and tie that to</span>
                  <code xml:space="preserve" id="code_000102" smilref="Programming_Robots_with_ROS00002.smil#code_000102">talker</code>
                  <span class="text" id="span_000428" smilref="Programming_Robots_with_ROS00002.smil#span_000428">, as shown in</span>
                  <a data-type="xref" href="#ch02-hello_world_with_logging" external="false" id="a_000033" smilref="Programming_Robots_with_ROS00002.smil#a_000033">Figure 2-5</a>
                  <span class="text" id="span_000429" smilref="Programming_Robots_with_ROS00002.smil#span_000429">.</span>
                </p>
                <figure id="figure_000006">
                  <h1 id="h1_000039" smilref="Programming_Robots_with_ROS00002.smil#h1_000039">Figure 2-5. "Hello, world" with a logging node</h1>
                  <div id="ch02-hello_world_with_logging" class="figure">
                    <img src="images/prwr_0205.jpg" alt="Hello, world! with logging" id="img_000024" />
                  </div>
                </figure>
                <p id="p_000119">
                  <span class="text" id="span_000430" smilref="Programming_Robots_with_ROS00002.smil#span_000430">Perhaps we want to run our "Hello, world!" program on two different computers and have a single node receive both of their messages. Without having to modify any source code, we can just start</span>
                  <code xml:space="preserve" id="code_000103" smilref="Programming_Robots_with_ROS00002.smil#code_000103">talker</code>
                  <span class="text" id="span_000431" smilref="Programming_Robots_with_ROS00002.smil#span_000431">twice, calling the nodes</span>
                  <code xml:space="preserve" id="code_000104" smilref="Programming_Robots_with_ROS00002.smil#code_000104">talker1</code>
                  <span class="text" id="span_000432" smilref="Programming_Robots_with_ROS00002.smil#span_000432">and</span>
                  <code xml:space="preserve" id="code_000105" smilref="Programming_Robots_with_ROS00002.smil#code_000105">talker2</code>
                  <span class="text" id="span_000433" smilref="Programming_Robots_with_ROS00002.smil#span_000433">, respectively, and ROS will connect them as shown in</span>
                  <a data-type="xref" href="#ch02-double_hello" external="false" id="a_000034" smilref="Programming_Robots_with_ROS00002.smil#a_000034">Figure 2-6</a>
                  <span class="text" id="span_000434" smilref="Programming_Robots_with_ROS00002.smil#span_000434">.</span>
                </p>
                <figure id="figure_000007">
                  <h1 id="h1_000040" smilref="Programming_Robots_with_ROS00002.smil#h1_000040">Figure 2-6. Instantiating two "Hello, world!" programs and routing them to the same receiver</h1>
                  <div id="ch02-double_hello" class="figure">
                    <img src="images/prwr_0206.jpg" alt="Hello, world! twice" id="img_000025" />
                  </div>
                </figure>
                <p id="p_000120">
                  <span class="text" id="span_000435" smilref="Programming_Robots_with_ROS00002.smil#span_000435">Perhaps we want to simultaneously log and print both of those streams? Again, this can be accomplished without modifying any source code; ROS will happily route the streams as shown in</span>
                  <a data-type="xref" href="#ch02-double_hello_with_logging" external="false" id="a_000035" smilref="Programming_Robots_with_ROS00002.smil#a_000035">Figure 2-7</a>
                  <span class="text" id="span_000436" smilref="Programming_Robots_with_ROS00002.smil#span_000436">.</span>
                </p>
                <figure id="figure_000008">
                  <h1 id="h1_000041" smilref="Programming_Robots_with_ROS00002.smil#h1_000041">Figure 2-7. Two "Hello, world!" programs with two listeners</h1>
                  <div id="ch02-double_hello_with_logging" class="figure">
                    <img src="images/prwr_0207.jpg" alt="Hello, world! twice with logging" id="img_000026" />
                  </div>
                </figure>
                <p id="ch02-idp16960528" data-type="indexterm" data-primary="STAIR robot">
                  <span class="text" id="span_000437" smilref="Programming_Robots_with_ROS00002.smil#span_000437">Of course, a typical robot is more complicated than this "Hello, world!" example. For example, the "fetch an item" problem described at the beginning of this chapter was implemented on Stanford's STAIR robot in the early days of ROS development, using the exact graph previously shown as</span>
                  <a data-type="xref" href="#ch02-graph" external="false" id="a_000036" smilref="Programming_Robots_with_ROS00002.smil#a_000036">Figure 2-1</a>
                  <span class="text" id="span_000438" smilref="Programming_Robots_with_ROS00002.smil#span_000438">and reprinted as</span>
                  <a data-type="xref" href="#ch02-graph_redux" external="false" id="a_000037" smilref="Programming_Robots_with_ROS00002.smil#a_000037">Figure 2-8</a>
                  <span class="text" id="span_000439" smilref="Programming_Robots_with_ROS00002.smil#span_000439">for convenience. This system included 22 programs running on 4 computers and would now be considered a relatively simple software system.</span>
                </p>
                <figure id="figure_000009">
                  <h1 id="h1_000042" smilref="Programming_Robots_with_ROS00002.smil#h1_000042">Figure 2-8. ROS graph of a fetch-an-item robot</h1>
                  <div id="ch02-graph_redux" class="figure">
                    <img src="images/prwr_0201.jpg" alt="Graph for the 'fetch an item' robot" id="img_000027" />
                  </div>
                </figure>
                <p id="p_000121">
                  <span class="text" id="span_000440" smilref="Programming_Robots_with_ROS00002.smil#span_000440">In</span>
                  <a data-type="xref" href="#ch02-graph_redux" external="false" id="a_000038" smilref="Programming_Robots_with_ROS00002.smil#a_000038">Figure 2-8</a>
                  <span class="text" id="span_000441" smilref="Programming_Robots_with_ROS00002.smil#span_000441">, the STAIR navigation system is approximately the upper half of the graph, and its vision and grasping systems are in the lower-right corner. It is interesting to note that this graph is</span>
                  <em id="em_000079" smilref="Programming_Robots_with_ROS00002.smil#em_000079">sparse</em>
                  <span class="text" id="span_000442" smilref="Programming_Robots_with_ROS00002.smil#span_000442">, with most nodes connecting to a very small number of other nodes. This property is commonly seen in ROS graphs and can serve as a check on a software architecture: if a ROS graph starts looking like a star, where most nodes are streaming data to or from a central node, it is often worthwhile to re-assess the flow of data and separate functions into smaller pieces. The goal is to create small, manageable functional units, which ideally can be reused in other applications on other robots.</span>
                </p>
                <p data-type="indexterm" data-startref="ix_2-preliminaries-asciidoc3" id="ch02-idp16968976">
                  <span class="text" id="span_000443" smilref="Programming_Robots_with_ROS00002.smil#span_000443">Although</span>
                  <code xml:space="preserve" id="code_000106" smilref="Programming_Robots_with_ROS00002.smil#code_000106">rosrun</code>
                  <span class="text" id="span_000444" smilref="Programming_Robots_with_ROS00002.smil#span_000444">is great for starting single ROS nodes during debugging sessions, most robot systems end up consisting of tens or hundreds of nodes, all running at the same time. Since it wouldn't be practical to call</span>
                  <code xml:space="preserve" id="code_000107" smilref="Programming_Robots_with_ROS00002.smil#code_000107">rosrun</code>
                  <span class="text" id="span_000445" smilref="Programming_Robots_with_ROS00002.smil#span_000445">on each of these nodes, ROS includes a tool for starting collections of nodes, called</span>
                  <code xml:space="preserve" id="code_000108" smilref="Programming_Robots_with_ROS00002.smil#code_000108">roslaunch</code>
                  <span class="text" id="span_000446" smilref="Programming_Robots_with_ROS00002.smil#span_000446">. We'll look at</span>
                  <code xml:space="preserve" id="code_000109" smilref="Programming_Robots_with_ROS00002.smil#code_000109">roslaunch</code>
                  <span class="text" id="span_000447" smilref="Programming_Robots_with_ROS00002.smil#span_000447">shortly, but first we need to talk about how things are named in ROS.</span>
                </p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Names, Namespaces, and Remapping" id="section_000026">
              <h1 id="h1_000043" smilref="Programming_Robots_with_ROS00002.smil#h1_000043">Names, Namespaces, and Remapping</h1>
              <div class="sect1" id="ch02-names">
                <p data-type="indexterm" data-primary="names, in ROS" id="ch02-idp16971632">
                  <em id="em_000080" smilref="Programming_Robots_with_ROS00002.smil#em_000080">Names</em>
                  <span class="text" id="span_000448" smilref="Programming_Robots_with_ROS00002.smil#span_000448">are a fundamental concept in ROS. Nodes, message streams (often called "topics"), and parameters must all have unique names. For example, the camera node on a robot could be named</span>
                  <code xml:space="preserve" id="code_000110" smilref="Programming_Robots_with_ROS00002.smil#code_000110">camera</code>
                  <span class="text" id="span_000449" smilref="Programming_Robots_with_ROS00002.smil#span_000449">, and it could output a message topic named</span>
                  <code xml:space="preserve" id="code_000111" smilref="Programming_Robots_with_ROS00002.smil#code_000111">image</code>
                  <span class="text" id="span_000450" smilref="Programming_Robots_with_ROS00002.smil#span_000450">and read a parameter named</span>
                  <code xml:space="preserve" id="code_000112" smilref="Programming_Robots_with_ROS00002.smil#code_000112">frame_rate</code>
                  <span class="text" id="span_000451" smilref="Programming_Robots_with_ROS00002.smil#span_000451">to know how fast to send images.</span>
                </p>
                <p id="p_000122">
                  <span class="text" id="span_000452" smilref="Programming_Robots_with_ROS00002.smil#span_000452">So far, so good. But, what happens when a robot has two cameras? We wouldn't want to have to write a separate program for each camera, nor would we want the output of both cameras to be interleaved on the</span>
                  <code xml:space="preserve" id="code_000113" smilref="Programming_Robots_with_ROS00002.smil#code_000113">image</code>
                  <span class="text" id="span_000453" smilref="Programming_Robots_with_ROS00002.smil#span_000453">topic, since that would require all subscribers to</span>
                  <code xml:space="preserve" id="code_000114" smilref="Programming_Robots_with_ROS00002.smil#code_000114">image</code>
                  <span class="text" id="span_000454" smilref="Programming_Robots_with_ROS00002.smil#span_000454">to have logic that separates the image streams.</span>
                </p>
                <p data-type="indexterm" data-primary="namespaces" id="ch02-idp16975616">
                  <span class="text" id="span_000455" smilref="Programming_Robots_with_ROS00002.smil#span_000455">More generally, namespace collisions are extremely common in robotic systems, which often contain identical hardware or software subsystems to simplify their engineering, such as identical left and right arms, cameras, or wheels. ROS provides two mechanisms to handle these situations:</span>
                  <em id="em_000081" smilref="Programming_Robots_with_ROS00002.smil#em_000081">namespaces</em>
                  <span class="text" id="span_000456" smilref="Programming_Robots_with_ROS00002.smil#span_000456">and</span>
                  <em id="em_000082" smilref="Programming_Robots_with_ROS00002.smil#em_000082">remapping</em>
                  <span class="text" id="span_000457" smilref="Programming_Robots_with_ROS00002.smil#span_000457">.</span>
                </p>
                <p data-type="indexterm" data-primary="/ (forward slash)" id="ch02-idp16978032">
                  <span class="text" id="span_000458" smilref="Programming_Robots_with_ROS00002.smil#span_000458">Namespaces are a fundamental concept throughout computer science. Following the convention of Unix paths and Internet URIs, ROS uses the forward slash (</span>
                  <code xml:space="preserve" id="code_000115" smilref="Programming_Robots_with_ROS00002.smil#code_000115">/</code>
                  <span class="text" id="span_000459" smilref="Programming_Robots_with_ROS00002.smil#span_000459">) to delimit namespaces. Just like how two files named</span>
                  <em id="ch02-idp16978640" smilref="Programming_Robots_with_ROS00002.smil#ch02-idp16978640">readme.txt</em>
                  <span class="text" id="span_000460" smilref="Programming_Robots_with_ROS00002.smil#span_000460">can exist in separate paths, such as</span>
                  <em id="em_000083" smilref="Programming_Robots_with_ROS00002.smil#em_000083">/home/user1/readme.txt</em>
                  <span class="text" id="span_000461" smilref="Programming_Robots_with_ROS00002.smil#span_000461">and</span>
                  <em id="em_000084" smilref="Programming_Robots_with_ROS00002.smil#em_000084">/home/user2/readme.txt</em>
                  <span class="text" id="span_000462" smilref="Programming_Robots_with_ROS00002.smil#span_000462">, ROS can launch identical nodes into separate namespaces to avoid name collisions.</span>
                </p>
                <p id="p_000123">
                  <span class="text" id="span_000463" smilref="Programming_Robots_with_ROS00002.smil#span_000463">In the previous example, a robot with two cameras could launch two camera drivers in separate namespaces, such as</span>
                  <code xml:space="preserve" id="code_000116" smilref="Programming_Robots_with_ROS00002.smil#code_000116">left</code>
                  <span class="text" id="span_000464" smilref="Programming_Robots_with_ROS00002.smil#span_000464">and</span>
                  <code xml:space="preserve" id="code_000117" smilref="Programming_Robots_with_ROS00002.smil#code_000117">right</code>
                  <span class="text" id="span_000465" smilref="Programming_Robots_with_ROS00002.smil#span_000465">, which would result in image streams named</span>
                  <code xml:space="preserve" id="code_000118" smilref="Programming_Robots_with_ROS00002.smil#code_000118">left/image</code>
                  <span class="text" id="span_000466" smilref="Programming_Robots_with_ROS00002.smil#span_000466">and</span>
                  <code xml:space="preserve" id="code_000119" smilref="Programming_Robots_with_ROS00002.smil#code_000119">right/image</code>
                  <span class="text" id="span_000467" smilref="Programming_Robots_with_ROS00002.smil#span_000467">.</span>
                </p>
                <p data-type="indexterm" data-primary="remapping" id="ch02-idp16984400">
                  <span class="text" id="span_000468" smilref="Programming_Robots_with_ROS00002.smil#span_000468">This avoids a topic name collision, but how could we send these data streams to another program that was still expecting to receive messages on the topic</span>
                  <code xml:space="preserve" id="code_000120" smilref="Programming_Robots_with_ROS00002.smil#code_000120">image</code>
                  <span class="text" id="span_000469" smilref="Programming_Robots_with_ROS00002.smil#span_000469">? One answer would be to launch this other program in the same namespace as the first,</span>
                  <span class="keep-together" id="span_000470" smilref="Programming_Robots_with_ROS00002.smil#span_000470">but perhaps this</span>
                  <span class="text" id="span_000471" smilref="Programming_Robots_with_ROS00002.smil#span_000471">program needs to "reach into" more than one namespace. Enter</span>
                  <span class="keep-together" id="span_000472">
                    <em id="em_000085" smilref="Programming_Robots_with_ROS00002.smil#em_000085">remapping</em>
                  </span>
                  <span class="text" id="span_000473" smilref="Programming_Robots_with_ROS00002.smil#span_000473">.</span>
                </p>
                <p id="p_000124">
                  <span class="text" id="span_000474" smilref="Programming_Robots_with_ROS00002.smil#span_000474">In ROS, any string in a program that defines a name can be</span>
                  <em id="em_000086" smilref="Programming_Robots_with_ROS00002.smil#em_000086">remapped</em>
                  <span class="text" id="span_000475" smilref="Programming_Robots_with_ROS00002.smil#span_000475">at runtime. As one example, there is a commonly used program in ROS called</span>
                  <code xml:space="preserve" id="code_000121" smilref="Programming_Robots_with_ROS00002.smil#code_000121">image_view</code>
                  <span class="text" id="span_000476" smilref="Programming_Robots_with_ROS00002.smil#span_000476">that renders a live video window of images being sent on the</span>
                  <code xml:space="preserve" id="code_000122" smilref="Programming_Robots_with_ROS00002.smil#code_000122">image</code>
                  <span class="text" id="span_000477" smilref="Programming_Robots_with_ROS00002.smil#span_000477">topic. At least, that is what is written in the source code of the</span>
                  <code xml:space="preserve" id="code_000123" smilref="Programming_Robots_with_ROS00002.smil#code_000123">image_view</code>
                  <span class="text" id="span_000478" smilref="Programming_Robots_with_ROS00002.smil#span_000478">program. Using remapping, we can instead cause the</span>
                  <code xml:space="preserve" id="code_000124" smilref="Programming_Robots_with_ROS00002.smil#code_000124">image_view</code>
                  <span class="text" id="span_000479" smilref="Programming_Robots_with_ROS00002.smil#span_000479">program to render the</span>
                  <code xml:space="preserve" id="code_000125" smilref="Programming_Robots_with_ROS00002.smil#code_000125">right/image</code>
                  <span class="text" id="span_000480" smilref="Programming_Robots_with_ROS00002.smil#span_000480">topic, or the</span>
                  <code xml:space="preserve" id="code_000126" smilref="Programming_Robots_with_ROS00002.smil#code_000126">left/image</code>
                  <span class="text" id="span_000481" smilref="Programming_Robots_with_ROS00002.smil#span_000481">topic, without having to modify the source code of</span>
                  <code xml:space="preserve" id="code_000127" smilref="Programming_Robots_with_ROS00002.smil#code_000127">image_view</code>
                  <span class="text" id="span_000482" smilref="Programming_Robots_with_ROS00002.smil#span_000482">!</span>
                </p>
                <p id="p_000125">
                  <span class="text" id="span_000483" smilref="Programming_Robots_with_ROS00002.smil#span_000483">Because ROS design patterns try to encourage reuse of software, remapping names is very common when developing and deploying ROS software. To simplify this operation, ROS provides a standard syntax to remap names when starting nodes on the command line. For example, if the working directory contains the</span>
                  <code xml:space="preserve" id="code_000128" smilref="Programming_Robots_with_ROS00002.smil#code_000128">image_view</code>
                  <span class="text" id="span_000484" smilref="Programming_Robots_with_ROS00002.smil#span_000484">program, one could type the following to map</span>
                  <code xml:space="preserve" id="code_000129" smilref="Programming_Robots_with_ROS00002.smil#code_000129">image</code>
                  <span class="text" id="span_000485" smilref="Programming_Robots_with_ROS00002.smil#span_000485">to</span>
                  <code xml:space="preserve" id="code_000130" smilref="Programming_Robots_with_ROS00002.smil#code_000130">right/image</code>
                  <span class="text" id="span_000486" smilref="Programming_Robots_with_ROS00002.smil#span_000486">:</span>
                </p>
                <p id="p_000126">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000131"><span class="text" id="span_000487" smilref="Programming_Robots_with_ROS00002.smil#span_000487">
user@hostname$ </span><strong id="strong_000026" smilref="Programming_Robots_with_ROS00002.smil#strong_000026">./image_view image:=right/image</strong>
</code>
                </p>
                <p id="p_000127">
                  <span class="text" id="span_000488" smilref="Programming_Robots_with_ROS00002.smil#span_000488">This command-line remapping would produce the graph shown in</span>
                  <a data-type="xref" href="#ch02-image_remapping" external="false" id="a_000039" smilref="Programming_Robots_with_ROS00002.smil#a_000039">Figure 2-9</a>
                  <span class="text" id="span_000489" smilref="Programming_Robots_with_ROS00002.smil#span_000489">.</span>
                </p>
                <figure id="figure_000010">
                  <h1 id="h1_000044" smilref="Programming_Robots_with_ROS00002.smil#h1_000044">Figure 2-9. Image topic has right/image using command-line remapping</h1>
                  <div id="ch02-image_remapping" class="figure">
                    <img src="images/prwr_0209.jpg" alt="Command-line remapping" id="img_000028" />
                  </div>
                </figure>
                <p id="p_000128">
                  <span class="text" id="span_000490" smilref="Programming_Robots_with_ROS00002.smil#span_000490">Pushing a node into a namespace can be accomplished with a special</span>
                  <code xml:space="preserve" id="code_000132" smilref="Programming_Robots_with_ROS00002.smil#code_000132">__ns</code>
                  <span class="text" id="span_000491" smilref="Programming_Robots_with_ROS00002.smil#span_000491">namespace-remapping syntax (note the double underscore). For example, if the working directory contains the</span>
                  <code xml:space="preserve" id="code_000133" smilref="Programming_Robots_with_ROS00002.smil#code_000133">camera</code>
                  <span class="text" id="span_000492" smilref="Programming_Robots_with_ROS00002.smil#span_000492">program, the following shell command would launch</span>
                  <code xml:space="preserve" id="code_000134" smilref="Programming_Robots_with_ROS00002.smil#code_000134">camera</code>
                  <span class="text" id="span_000493" smilref="Programming_Robots_with_ROS00002.smil#span_000493">into the namespace</span>
                  <code xml:space="preserve" id="code_000135" smilref="Programming_Robots_with_ROS00002.smil#code_000135">right</code>
                  <span class="text" id="span_000494" smilref="Programming_Robots_with_ROS00002.smil#span_000494">:</span>
                </p>
                <p id="p_000129">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000136"><span class="text" id="span_000495" smilref="Programming_Robots_with_ROS00002.smil#span_000495">
user@hostname$ </span><strong id="strong_000027" smilref="Programming_Robots_with_ROS00002.smil#strong_000027">./camera __ns:=right</strong>
</code>
                </p>
                <p id="p_000130">
                  <span class="text" id="span_000496" smilref="Programming_Robots_with_ROS00002.smil#span_000496">Just as for filesystems, web URLs, and countless other domains, ROS names must be unique. If the same node is launched twice,</span>
                  <code xml:space="preserve" id="code_000137" smilref="Programming_Robots_with_ROS00002.smil#code_000137">roscore</code>
                  <span class="text" id="span_000497" smilref="Programming_Robots_with_ROS00002.smil#span_000497">directs the older node to exit to make way for the newer instance of the node.</span>
                </p>
                <p id="p_000131">
                  <span class="text" id="span_000498" smilref="Programming_Robots_with_ROS00002.smil#span_000498">Earlier in this chapter, a graph was shown that had two nodes,</span>
                  <code xml:space="preserve" id="code_000138" smilref="Programming_Robots_with_ROS00002.smil#code_000138">talker1</code>
                  <span class="text" id="span_000499" smilref="Programming_Robots_with_ROS00002.smil#span_000499">and</span>
                  <code xml:space="preserve" id="code_000139" smilref="Programming_Robots_with_ROS00002.smil#code_000139">talker2</code>
                  <span class="text" id="span_000500" smilref="Programming_Robots_with_ROS00002.smil#span_000500">, sending data to a node named</span>
                  <code xml:space="preserve" id="code_000140" smilref="Programming_Robots_with_ROS00002.smil#code_000140">listener</code>
                  <span class="text" id="span_000501" smilref="Programming_Robots_with_ROS00002.smil#span_000501">. To change the</span>
                  <em id="em_000087" smilref="Programming_Robots_with_ROS00002.smil#em_000087">name</em>
                  <span class="text" id="span_000502" smilref="Programming_Robots_with_ROS00002.smil#span_000502">of a node on the command line, the special</span>
                  <code xml:space="preserve" id="code_000141" smilref="Programming_Robots_with_ROS00002.smil#code_000141">__name</code>
                  <span class="text" id="span_000503" smilref="Programming_Robots_with_ROS00002.smil#span_000503">remapping syntax can be used. This changes the name of a program when it is launched (again, note the double underscore). The following two shell commands would launch two instances of</span>
                  <code xml:space="preserve" id="code_000142" smilref="Programming_Robots_with_ROS00002.smil#code_000142">talker</code>
                  <span class="text" id="span_000504" smilref="Programming_Robots_with_ROS00002.smil#span_000504">, one named</span>
                  <code xml:space="preserve" id="code_000143" smilref="Programming_Robots_with_ROS00002.smil#code_000143">talker1</code>
                  <span class="text" id="span_000505" smilref="Programming_Robots_with_ROS00002.smil#span_000505">and one named</span>
                  <code xml:space="preserve" id="code_000144" smilref="Programming_Robots_with_ROS00002.smil#code_000144">talker2</code>
                  <span class="text" id="span_000506" smilref="Programming_Robots_with_ROS00002.smil#span_000506">, as was shown in</span>
                  <a data-type="xref" href="#ch02-double_hello" external="false" id="a_000040" smilref="Programming_Robots_with_ROS00002.smil#a_000040">Figure 2-6</a>
                  <span class="text" id="span_000507" smilref="Programming_Robots_with_ROS00002.smil#span_000507">:</span>
                </p>
                <p id="p_000132">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000145"><span class="text" id="span_000508" smilref="Programming_Robots_with_ROS00002.smil#span_000508">
user@hostname$ </span><strong id="strong_000028" smilref="Programming_Robots_with_ROS00002.smil#strong_000028">./talker __name:=talker1</strong>
</code>
                </p>
                <p id="p_000133">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000146"><span class="text" id="span_000509" smilref="Programming_Robots_with_ROS00002.smil#span_000509">
user@hostname$ </span><strong id="strong_000029" smilref="Programming_Robots_with_ROS00002.smil#strong_000029">./talker __name:=talker2</strong>
</code>
                </p>
                <p id="p_000134">
                  <span class="text" id="span_000510" smilref="Programming_Robots_with_ROS00002.smil#span_000510">The previous examples demonstrated that ROS topics can be remapped quickly and easily on the command line. This is useful for debugging and for initially hacking systems together when experimenting with various ideas. However, after typing long command-line strings a few times, it's time to automate them! The</span>
                  <code xml:space="preserve" id="code_000147" smilref="Programming_Robots_with_ROS00002.smil#code_000147">roslaunch</code>
                  <span class="text" id="span_000511" smilref="Programming_Robots_with_ROS00002.smil#span_000511">tool was created for this purpose.</span>
                </p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="roslaunch" id="section_000027">
              <h1 id="h1_000045" smilref="Programming_Robots_with_ROS00002.smil#h1_000045">roslaunch</h1>
              <div class="sect1" id="ch02-idp16970224">
                <p data-type="indexterm" data-primary="ROS command-line tools" data-secondary="roslaunch" id="ch02-ix_2-preliminaries-asciidoc4">
                  <code xml:space="preserve" id="code_000148" smilref="Programming_Robots_with_ROS00002.smil#code_000148">roslaunch</code>
                  <span class="text" id="span_000512" smilref="Programming_Robots_with_ROS00002.smil#span_000512">is a command-line tool designed to automate the launching of collections of ROS nodes. On the surface, it looks a lot like</span>
                  <code xml:space="preserve" id="code_000149" smilref="Programming_Robots_with_ROS00002.smil#code_000149">rosrun</code>
                  <span class="text" id="span_000513" smilref="Programming_Robots_with_ROS00002.smil#span_000513">, needing a package name and a filename:</span>
                </p>
                <p id="p_000135">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000150"><span class="text" id="span_000514" smilref="Programming_Robots_with_ROS00002.smil#span_000514">
user@hostname$ </span><strong id="strong_000030"><span class="text" id="span_000515" smilref="Programming_Robots_with_ROS00002.smil#span_000515">roslaunch </span><em id="em_000088" smilref="Programming_Robots_with_ROS00002.smil#em_000088">PACKAGE LAUNCH_FILE</em></strong>
</code>
                </p>
                <p data-type="indexterm" data-primary="launch files" id="ch02-idp17011696" data-secondary="and launch files">
                  <span class="text" id="span_000516" smilref="Programming_Robots_with_ROS00002.smil#span_000516">However,</span>
                  <code xml:space="preserve" id="code_000151" smilref="Programming_Robots_with_ROS00002.smil#code_000151">roslaunch</code>
                  <span class="text" id="span_000517" smilref="Programming_Robots_with_ROS00002.smil#span_000517">operates on</span>
                  <em id="em_000089" smilref="Programming_Robots_with_ROS00002.smil#em_000089">launch files</em>
                  <span class="text" id="span_000518" smilref="Programming_Robots_with_ROS00002.smil#span_000518">, rather than nodes. Launch files are XML files that describe a collection of nodes along with their topic remappings and parameters. By convention, these files have a suffix of</span>
                  <em id="ch02-idp17013424" smilref="Programming_Robots_with_ROS00002.smil#ch02-idp17013424">.launch</em>
                  <span class="text" id="span_000519" smilref="Programming_Robots_with_ROS00002.smil#span_000519">. For example, here is</span>
                  <em id="em_000090" smilref="Programming_Robots_with_ROS00002.smil#em_000090">talker_listener.launch</em>
                  <span class="text" id="span_000520" smilref="Programming_Robots_with_ROS00002.smil#span_000520">in the</span>
                  <code xml:space="preserve" id="code_000152" smilref="Programming_Robots_with_ROS00002.smil#code_000152">rospy_tutorials</code>
                  <span class="text" id="span_000521" smilref="Programming_Robots_with_ROS00002.smil#span_000521">package:</span>
                </p>
                <p id="p_000136">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000153" smilref="Programming_Robots_with_ROS00002.smil#code_000153">&lt;launch&gt;
  &lt;node name="talker" pkg="rospy_tutorials"
        type="talker.py" output="screen" /&gt;
  &lt;node name="listener" pkg="rospy_tutorials"
        type="listener.py" output="screen" /&gt;
&lt;/launch&gt;</code>
                </p>
                <p id="p_000137">
                  <span class="text" id="span_000522" smilref="Programming_Robots_with_ROS00002.smil#span_000522">Each</span>
                  <code xml:space="preserve" id="code_000154" smilref="Programming_Robots_with_ROS00002.smil#code_000154">&lt;node&gt;</code>
                  <span class="text" id="span_000523" smilref="Programming_Robots_with_ROS00002.smil#span_000523">tag includes attributes declaring the ROS graph name of the node, the package in which it can be found, and the</span>
                  <em id="em_000091" smilref="Programming_Robots_with_ROS00002.smil#em_000091">type</em>
                  <span class="text" id="span_000524" smilref="Programming_Robots_with_ROS00002.smil#span_000524">of node, which is simply the filename of the executable program. In this example, the</span>
                  <code xml:space="preserve" id="code_000155" smilref="Programming_Robots_with_ROS00002.smil#code_000155">output="screen"</code>
                  <span class="text" id="span_000525" smilref="Programming_Robots_with_ROS00002.smil#span_000525">attributes indicate that the</span>
                  <code xml:space="preserve" id="code_000156" smilref="Programming_Robots_with_ROS00002.smil#code_000156">talker</code>
                  <span class="text" id="span_000526" smilref="Programming_Robots_with_ROS00002.smil#span_000526">and</span>
                  <code xml:space="preserve" id="code_000157" smilref="Programming_Robots_with_ROS00002.smil#code_000157">listener</code>
                  <span class="text" id="span_000527" smilref="Programming_Robots_with_ROS00002.smil#span_000527">nodes should dump their console outputs to the current console, instead of only to log files. This is a commonly used setting for debugging; once things start working, it is often convenient to remove this attribute so that the console has less noise.</span>
                </p>
                <p data-type="indexterm" data-primary="Ctrl-C" id="ch02-idp17041248">
                  <code xml:space="preserve" id="code_000158" smilref="Programming_Robots_with_ROS00002.smil#code_000158">roslaunch</code>
                  <span class="text" id="span_000528" smilref="Programming_Robots_with_ROS00002.smil#span_000528">has many other important features, such as the ability to launch programs on other computers across the network via</span>
                  <code xml:space="preserve" id="code_000159" smilref="Programming_Robots_with_ROS00002.smil#code_000159">ssh</code>
                  <span class="text" id="span_000529" smilref="Programming_Robots_with_ROS00002.smil#span_000529">, to automatically respawn nodes that crash, and so on. These features will be described throughout the book as they are necessary to accomplish various tasks. One of the most useful features of</span>
                  <code xml:space="preserve" id="code_000160" smilref="Programming_Robots_with_ROS00002.smil#code_000160">roslaunch</code>
                  <span class="text" id="span_000530" smilref="Programming_Robots_with_ROS00002.smil#span_000530">is that it closes all of its nodes when Ctrl-C is pressed in the console containing</span>
                  <code xml:space="preserve" id="code_000161" smilref="Programming_Robots_with_ROS00002.smil#code_000161">roslaunch</code>
                  <span class="text" id="span_000531" smilref="Programming_Robots_with_ROS00002.smil#span_000531">. Ctrl-C is a common way to force programs to exit on the Linux/Unix command line, and</span>
                  <code xml:space="preserve" id="code_000162" smilref="Programming_Robots_with_ROS00002.smil#code_000162">roslaunch</code>
                  <span class="text" id="span_000532" smilref="Programming_Robots_with_ROS00002.smil#span_000532">follows this convention by closing its collection of launched nodes and then finally exiting</span>
                  <code xml:space="preserve" id="code_000163" smilref="Programming_Robots_with_ROS00002.smil#code_000163">roslaunch</code>
                  <span class="text" id="span_000533" smilref="Programming_Robots_with_ROS00002.smil#span_000533">itself when Ctrl-C is typed into its console. For example, the following command would cause</span>
                  <code xml:space="preserve" id="code_000164" smilref="Programming_Robots_with_ROS00002.smil#code_000164">roslaunch</code>
                  <span class="text" id="span_000534" smilref="Programming_Robots_with_ROS00002.smil#span_000534">to spawn two nodes to form a talker-listener pair, as described in the</span>
                  <em id="em_000092" smilref="Programming_Robots_with_ROS00002.smil#em_000092">talker_listener.launch</em>
                  <span class="text" id="span_000535" smilref="Programming_Robots_with_ROS00002.smil#span_000535">file listed previously:</span>
                </p>
                <p id="p_000138">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000165"><span class="text" id="span_000536" smilref="Programming_Robots_with_ROS00002.smil#span_000536">
user@hostname$ </span><strong id="strong_000031" smilref="Programming_Robots_with_ROS00002.smil#strong_000031">roslaunch rospy_tutorials talker_listener.launch</strong>
</code>
                </p>
                <p id="p_000139">
                  <span class="text" id="span_000537" smilref="Programming_Robots_with_ROS00002.smil#span_000537">And, equally importantly, pressing Ctrl-C would cause the nodes to exit. Virtually every time you use ROS, you'll be invoking</span>
                  <code xml:space="preserve" id="code_000166" smilref="Programming_Robots_with_ROS00002.smil#code_000166">roslaunch</code>
                  <span class="text" id="span_000538" smilref="Programming_Robots_with_ROS00002.smil#span_000538">and eventually typing</span>
                  <span class="keep-together" id="span_000539" smilref="Programming_Robots_with_ROS00002.smil#span_000539">Ctrl-C</span>
                  <span class="text" id="span_000540" smilref="Programming_Robots_with_ROS00002.smil#span_000540">in the</span>
                  <code xml:space="preserve" id="code_000167" smilref="Programming_Robots_with_ROS00002.smil#code_000167">roslaunch</code>
                  <span class="text" id="span_000541" smilref="Programming_Robots_with_ROS00002.smil#span_000541">terminal(s) to create and destroy various collections of nodes.</span>
                </p>
                <p id="p_000140">
                  <code xml:space="preserve" id="code_000168" smilref="Programming_Robots_with_ROS00002.smil#code_000168">roslaunch</code>
                  <span class="text" id="span_000542" smilref="Programming_Robots_with_ROS00002.smil#span_000542">will automatically instantiate a</span>
                  <code xml:space="preserve" id="code_000169" smilref="Programming_Robots_with_ROS00002.smil#code_000169">roscore</code>
                  <span class="text" id="span_000543" smilref="Programming_Robots_with_ROS00002.smil#span_000543">if one does not exist when</span>
                  <code xml:space="preserve" id="code_000170" smilref="Programming_Robots_with_ROS00003.smil#code_000170">roslaunch</code>
                  <span class="text" id="span_000544" smilref="Programming_Robots_with_ROS00003.smil#span_000544">is invoked. However, this</span>
                  <code xml:space="preserve" id="code_000171" smilref="Programming_Robots_with_ROS00003.smil#code_000171">roscore</code>
                  <span class="text" id="span_000545" smilref="Programming_Robots_with_ROS00003.smil#span_000545">will exit when Ctrl-C is pressed in the</span>
                  <code xml:space="preserve" id="code_000172" smilref="Programming_Robots_with_ROS00003.smil#code_000172">roslaunch</code>
                  <span class="text" id="span_000546" smilref="Programming_Robots_with_ROS00003.smil#span_000546">window. If you have more than one terminal open when launching ROS programs, it's often easier to remember to launch a</span>
                  <code xml:space="preserve" id="code_000173" smilref="Programming_Robots_with_ROS00003.smil#code_000173">roscore</code>
                  <span class="text" id="span_000547" smilref="Programming_Robots_with_ROS00003.smil#span_000547">in a separate terminal, which is left open during the entire ROS session. Then, you can</span>
                  <code xml:space="preserve" id="code_000174" smilref="Programming_Robots_with_ROS00003.smil#code_000174">roslaunch</code>
                  <span class="text" id="span_000548" smilref="Programming_Robots_with_ROS00003.smil#span_000548">and Ctrl-C with abandon in all other consoles, without risk of losing the</span>
                  <code xml:space="preserve" id="code_000175" smilref="Programming_Robots_with_ROS00003.smil#code_000175">roscore</code>
                  <span class="text" id="span_000549" smilref="Programming_Robots_with_ROS00003.smil#span_000549">tying the whole system together.</span>
                </p>
                <p id="ch02-idp17052656" data-type="indexterm" data-startref="ix_2-preliminaries-asciidoc4" smilref="Programming_Robots_with_ROS00003.smil#ch02-idp17052656">Before we start to look at writing some code with ROS, there's one more thing to cover that will save you time and heartache as you try to remember the names of packages, nodes, and launch files: tab completion.</p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="The Tab Key" id="section_000028">
              <h1 id="h1_000046" smilref="Programming_Robots_with_ROS00003.smil#h1_000046">The Tab Key</h1>
              <div class="sect1" id="ch02-idp17007328">
                <p data-type="indexterm" data-primary="Tab key" id="ch02-idp17054768">
                  <span class="text" id="span_000550" smilref="Programming_Robots_with_ROS00003.smil#span_000550">The ROS command-line tools have tab-completion support. When using</span>
                  <code xml:space="preserve" id="code_000176" smilref="Programming_Robots_with_ROS00003.smil#code_000176">rosrun</code>
                  <span class="text" id="span_000551" smilref="Programming_Robots_with_ROS00003.smil#span_000551">, for example, hitting the Tab key in the middle of typing a package name will auto-complete it for you; or, if there are multiple potential completions, pressing Tab again will present you with a list of possible completions. As with many other Linux commands, using tab completion with ROS will save you a massive amount of typing, and help avoid spelling errors when trying to type long package or message names. For example, typing:</span>
                </p>
                <p id="p_000141">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000177"><span class="text" id="span_000552" smilref="Programming_Robots_with_ROS00003.smil#span_000552">
user@hostname$ </span><strong id="strong_000032" smilref="Programming_Robots_with_ROS00003.smil#strong_000032">rosrun rospy_tutorials ta[TAB]</strong>
</code>
                </p>
                <p id="p_000142" smilref="Programming_Robots_with_ROS00003.smil#p_000142">will autocomplete to:</p>
                <p id="p_000143">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000178"><span class="text" id="span_000553" smilref="Programming_Robots_with_ROS00003.smil#span_000553">
user@hostname$ </span><strong id="strong_000033" smilref="Programming_Robots_with_ROS00003.smil#strong_000033">rosrun rospy_tutorials talker</strong>
</code>
                </p>
                <p id="p_000144">
                  <span class="text" id="span_000554" smilref="Programming_Robots_with_ROS00003.smil#span_000554">since no other programs in the</span>
                  <code xml:space="preserve" id="code_000179" smilref="Programming_Robots_with_ROS00003.smil#code_000179">rospy_tutorials</code>
                  <span class="text" id="span_000555" smilref="Programming_Robots_with_ROS00003.smil#span_000555">package begin with</span>
                  <code xml:space="preserve" id="code_000180" smilref="Programming_Robots_with_ROS00003.smil#code_000180">ta</code>
                  <span class="text" id="span_000556" smilref="Programming_Robots_with_ROS00003.smil#span_000556">. Additionally,</span>
                  <code xml:space="preserve" id="code_000181" smilref="Programming_Robots_with_ROS00003.smil#code_000181">rosrun</code>
                  <span class="text" id="span_000557" smilref="Programming_Robots_with_ROS00003.smil#span_000557">(like virtually all ROS core tools) will autocomplete package names. For example, typing:</span>
                </p>
                <p id="p_000145">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000182"><span class="text" id="span_000558" smilref="Programming_Robots_with_ROS00003.smil#span_000558">
user@hostname$ </span><strong id="strong_000034" smilref="Programming_Robots_with_ROS00003.smil#strong_000034">rosrun rospy_tu[TAB]</strong>
</code>
                </p>
                <p id="p_000146" smilref="Programming_Robots_with_ROS00003.smil#p_000146">will autocomplete to:</p>
                <p id="p_000147">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000183"><span class="text" id="span_000559" smilref="Programming_Robots_with_ROS00003.smil#span_000559">
user@hostname$ </span><strong id="strong_000035" smilref="Programming_Robots_with_ROS00003.smil#strong_000035">rosrun rospy_tutorials</strong>
</code>
                </p>
                <p id="p_000148">
                  <span class="text" id="span_000560" smilref="Programming_Robots_with_ROS00003.smil#span_000560">since no other packages currently loaded begin with</span>
                  <code xml:space="preserve" id="code_000184" smilref="Programming_Robots_with_ROS00003.smil#code_000184">rospy_tu</code>
                  <span class="text" id="span_000561" smilref="Programming_Robots_with_ROS00003.smil#span_000561">.</span>
                </p>
                <h1 id="h1_000047" smilref="Programming_Robots_with_ROS00003.smil#h1_000047">Tip</h1>
                <div data-type="tip" id="div_000009">
                  <p id="p_000149">
                    <span class="text" id="span_000562" smilref="Programming_Robots_with_ROS00003.smil#span_000562">It's hard to emphasize this enough: pound the Tab key</span>
                    <em id="em_000093" smilref="Programming_Robots_with_ROS00003.smil#em_000093">furiously</em>
                    <span class="text" id="span_000563" smilref="Programming_Robots_with_ROS00003.smil#span_000563">when using the core ROS tools, or other standard Unix command-line tools. The Tab key is a huge time-saver!</span>
                  </p>
                </div>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="tf: Coordinate Transforms" id="section_000029">
              <h1 id="h1_000048" smilref="Programming_Robots_with_ROS00003.smil#h1_000048">tf: Coordinate Transforms</h1>
              <div class="sect1" id="ch02-idp17053872">
                <p id="ch02-ix_2-preliminaries-asciidoc5" data-type="indexterm" data-primary="coordinate frames">
                  <span class="text" id="span_000564" smilref="Programming_Robots_with_ROS00003.smil#span_000564">The "fetch an item" task described in</span>
                  <a data-type="xref" href="#ch02-prelim_ros_graph" external="false" id="a_000041" smilref="Programming_Robots_with_ROS00003.smil#a_000041">"The ROS Graph"</a>
                  <span class="text" id="span_000565" smilref="Programming_Robots_with_ROS00003.smil#span_000565">includes many, many problems to tackle, encompassing nearly every aspect of robotics and artificial intelligence (that's one reason that it made such a great challenge problem to drive the design of ROS). One problem that might not be immediately obvious, but is extremely important, is the management of</span>
                  <em id="em_000094" smilref="Programming_Robots_with_ROS00003.smil#em_000094">coordinate frames</em>
                  <span class="text" id="span_000566" smilref="Programming_Robots_with_ROS00003.smil#span_000566">. Seriously, coordinate frames are a big deal in robotics.</span>
                </p>
                <section data-type="sect2" data-pdf-bookmark="Poses, Positions, and Orientations" id="section_000030">
                  <h1 id="h1_000049" smilref="Programming_Robots_with_ROS00003.smil#h1_000049">Poses, Positions, and Orientations</h1>
                  <div class="sect2" id="ch02-idp17070288">
                    <p id="ch02-idp17071696" data-type="indexterm" data-primary="coordinate frames" data-secondary="poses, positions, and orientations" smilref="Programming_Robots_with_ROS00003.smil#ch02-idp17071696">Your average item-fetching robot will have a bunch of subsystems, such as a mobile base, a laser scanner attached to the base to allow it to navigate through the world, a camera (visual and/or depth) attached elsewhere to the base to find items to be fetched, and a manipulator arm with a hand that will do the actual grabbing of those items. A really good item-fetching robot might have many more features, but these are already plenty to make coordinate frames an important concern.</p>
                    <p id="p_000150">
                      <span class="text" id="span_000567" smilref="Programming_Robots_with_ROS00003.smil#span_000567">Let's start with the laser on the base. To correctly interpret a range scan produced by the laser, we need to know exactly</span>
                      <em id="em_000095" smilref="Programming_Robots_with_ROS00003.smil#em_000095">where</em>
                      <span class="text" id="span_000568" smilref="Programming_Robots_with_ROS00003.smil#span_000568">on the base the laser is attached. Is it mounted at the front of the base? The back? Is it facing backward? Is it mounted upside-down (which is not uncommon)? More generally, we could ask: what are the position and orientation of the laser with respect to the base?</span>
                    </p>
                    <p data-type="indexterm" data-primary="origin (coordinate frame of reference)" id="ch02-idp17074784">
                      <span class="text" id="span_000569" smilref="Programming_Robots_with_ROS00003.smil#span_000569">We actually need to be a bit more careful than that, asking: what are the position and orientation of the</span>
                      <em id="em_000096" smilref="Programming_Robots_with_ROS00003.smil#em_000096">origin</em>
                      <span class="text" id="span_000570" smilref="Programming_Robots_with_ROS00003.smil#span_000570">of the laser with respect to the</span>
                      <em id="em_000097" smilref="Programming_Robots_with_ROS00003.smil#em_000097">origin</em>
                      <span class="text" id="span_000571" smilref="Programming_Robots_with_ROS00003.smil#span_000571">of the base? Before we can talk about physical relationships between components on our robot, we need to pick for each component a coordinate frame of reference, or</span>
                      <em id="em_000098" smilref="Programming_Robots_with_ROS00003.smil#em_000098">origin</em>
                      <span class="text" id="span_000572" smilref="Programming_Robots_with_ROS00003.smil#span_000572">. In general, you can choose the origin arbitrarily, though there's usually a widely used convention that should be followed. For example, a mobile base should have its origin at the geometric centroid of the base, with the positive x-axis pointing forward, the positive y-axis pointing left, and the positive z-axis pointing up (you could have inferred the z-axis direction because we always use righthanded coordinate systems). Other than following such conventions, the important thing is that everyone understand and agree on (usually via documentation) where each component's origin is.</span>
                    </p>
                    <p data-type="indexterm" data-primary="orientation" id="ch02-idp17081232" data-secondary="defined">
                      <span class="text" id="span_000573" smilref="Programming_Robots_with_ROS00003.smil#span_000573">Let's establish some terminology. In our 3D world, a</span>
                      <em id="ch02-idp17078176" smilref="Programming_Robots_with_ROS00003.smil#ch02-idp17078176">position</em>
                      <span class="text" id="span_000574" smilref="Programming_Robots_with_ROS00003.smil#span_000574">is a vector of three numbers (</span>
                      <em id="em_000099" smilref="Programming_Robots_with_ROS00003.smil#em_000099">x</em>
                      <span class="text" id="span_000575" smilref="Programming_Robots_with_ROS00003.smil#span_000575">,</span>
                      <em id="em_000100" smilref="Programming_Robots_with_ROS00003.smil#em_000100">y</em>
                      <span class="text" id="span_000576" smilref="Programming_Robots_with_ROS00003.smil#span_000576">,</span>
                      <em id="em_000101" smilref="Programming_Robots_with_ROS00003.smil#em_000101">z</em>
                      <span class="text" id="span_000577" smilref="Programming_Robots_with_ROS00003.smil#span_000577">) that describe how far we have translated along each axis, with respect to some origin. Similarly, an</span>
                      <em id="em_000102" smilref="Programming_Robots_with_ROS00003.smil#em_000102">orientation</em>
                      <span class="text" id="span_000578" smilref="Programming_Robots_with_ROS00003.smil#span_000578">is a vector of three numbers (roll, pitch, yaw) that describe how far we have rotated about each axis, again with respect to some origin.</span>
                      <note id="ch02-idp17083584-marker">
                        <noteref data-type="noteref" idref="#ch02-idp17083584" id="ch02-idp17081936" smilref="Programming_Robots_with_ROS00003.smil#ch02-idp17081936">3</noteref>
                      </note>
                      <span class="text" id="span_000579" smilref="Programming_Robots_with_ROS00003.smil#span_000579">Taken together, a (position, orientation) pair is called a</span>
                      <em id="em_000103" smilref="Programming_Robots_with_ROS00003.smil#em_000103">pose</em>
                      <span class="text" id="span_000580" smilref="Programming_Robots_with_ROS00003.smil#span_000580">. For clarity, this kind of pose, which varies in six dimensions (three for translation plus three for rotation) is sometimes called a</span>
                      <em id="em_000104" smilref="Programming_Robots_with_ROS00003.smil#em_000104">6D pose</em>
                      <span class="text" id="span_000581" smilref="Programming_Robots_with_ROS00003.smil#span_000581">. Given the pose of one thing relative to another, we can</span>
                      <em id="em_000105" smilref="Programming_Robots_with_ROS00003.smil#em_000105">transform</em>
                      <span class="text" id="span_000582" smilref="Programming_Robots_with_ROS00003.smil#span_000582">data between their frames of reference, a process that usually involves some matrix multiplications.</span>
                    </p>
                    <p id="p_000151">
                      <span class="text" id="span_000583" smilref="Programming_Robots_with_ROS00003.smil#span_000583">Restating our earlier question, we need to know: what is the</span>
                      <em id="em_000106" smilref="Programming_Robots_with_ROS00003.smil#em_000106">pose</em>
                      <span class="text" id="span_000584" smilref="Programming_Robots_with_ROS00003.smil#span_000584">(of the origin) of the laser with respect to the</span>
                      <em id="em_000107" smilref="Programming_Robots_with_ROS00003.smil#em_000107">pose</em>
                      <span class="text" id="span_000585" smilref="Programming_Robots_with_ROS00003.smil#span_000585">(of the origin) of the base? That's not all, of course. And if we're going to use the base-mounted camera to find items in the environment, then we likely need to know the camera's pose with respect to the base. If we're going to use the locations of items found by the camera to send goals to the hand, then we further need to know the pose of the camera with respect to the hand. This case is especially interesting because the camera-to-hand relationship might be changing all the time as the arm moves the hand with respect to the camera. Then you have the mobile base moving around in the world (e.g., defined by a map), so there's a base-to-world relationship that is also constantly changing.</span>
                    </p>
                    <p id="p_000152">
                      <span class="text" id="span_000586" smilref="Programming_Robots_with_ROS00003.smil#span_000586">We could go on, but by now the point should be clear: you will, eventually, want to be able to compute the pose of every component of your robot with respect to every other pose. Some relationships are static (e.g., a laser bolted to a base), while others are dynamic (e.g., a hand reaching to grasp an item). We need to capture and combine all of these relationships, ideally in such a way that we can easily convert sensor data and actuator commands among them, while doing as little math as possible (because if we do the math ourselves, we'll just get it wrong). Enter</span>
                      <code xml:space="preserve" id="code_000185" smilref="Programming_Robots_with_ROS00003.smil#code_000185">tf</code>
                      <span class="text" id="span_000587" smilref="Programming_Robots_with_ROS00003.smil#span_000587">.</span>
                    </p>
                  </div>
                </section>
                <section data-type="sect2" data-pdf-bookmark="tf" id="section_000031">
                  <h1 id="h1_000050" smilref="Programming_Robots_with_ROS00003.smil#h1_000050">tf</h1>
                  <div class="sect2" id="ch02-idp17089776">
                    <p data-type="indexterm" data-primary="coordinate frames" data-secondary="tf and" id="ch02-idp17091248">
                      <span class="text" id="span_000588" smilref="Programming_Robots_with_ROS00003.smil#span_000588">There are many ways to manage coordinate frames and transforms between them. In ROS, continuing with the philosophy of keeping things small and modular, we take a distributed approach, using ROS topics to share transform data. Any node can be the authority that publishes the current information for some transform(s), and any node can subscribe to transform data, gathering from all the various authorities a complete picture of the robot. This system is implemented in the</span>
                      <code xml:space="preserve" id="code_000186" smilref="Programming_Robots_with_ROS00003.smil#code_000186">tf</code>
                      <span class="text" id="span_000589" smilref="Programming_Robots_with_ROS00003.smil#span_000589">(short for transform) package, which is extremely widely used throughout ROS software.</span>
                    </p>
                    <p id="p_000153">
                      <span class="text" id="span_000590" smilref="Programming_Robots_with_ROS00003.smil#span_000590">This approach makes a lot of sense when you consider that there's usually one place where the information for a given transform is most easily acquired or computed. For example, the driver that talks to a robot arm and has direct access to its joint encoder data might be the best node to publish the information about the transform from the start of the arm to the hand at the other end.</span>
                      <note id="ch02-idp17094720-marker">
                        <noteref data-type="noteref" idref="#ch02-idp17094720" id="noteref_000003" smilref="Programming_Robots_with_ROS00003.smil#noteref_000003">4</noteref>
                      </note>
                      <span class="text" id="span_000591" smilref="Programming_Robots_with_ROS00003.smil#span_000591">Similarly, the node that is performing localization of the base with respect to a map is the best authority for the base-to-world transform.</span>
                    </p>
                    <p data-type="indexterm" data-primary="strings, in tf" id="ch02-idp17097168">
                      <span class="text" id="span_000592" smilref="Programming_Robots_with_ROS00003.smil#span_000592">We need names for coordinate frames. In</span>
                      <code xml:space="preserve" id="code_000187" smilref="Programming_Robots_with_ROS00003.smil#code_000187">tf</code>
                      <span class="text" id="span_000593" smilref="Programming_Robots_with_ROS00003.smil#span_000593">, we use strings. The frame of the laser attached to the base might be called</span>
                      <code xml:space="preserve" id="code_000188" smilref="Programming_Robots_with_ROS00003.smil#code_000188">"laser"</code>
                      <span class="text" id="span_000594" smilref="Programming_Robots_with_ROS00003.smil#span_000594">or, if there's the potential for confusion,</span>
                      <code xml:space="preserve" id="code_000189" smilref="Programming_Robots_with_ROS00003.smil#code_000189">"front_laser"</code>
                      <span class="text" id="span_000595" smilref="Programming_Robots_with_ROS00003.smil#span_000595">. You can pick any names you like, so long as they're unique (and you should follow established naming conventions wherever they exist).</span>
                    </p>
                    <p class="pagebreak-before" id="p_000154">
                      <span class="text" id="span_000596" smilref="Programming_Robots_with_ROS00003.smil#span_000596">We also need a message format to use when publishing information about transforms. In</span>
                      <code xml:space="preserve" id="code_000190" smilref="Programming_Robots_with_ROS00003.smil#code_000190">tf</code>
                      <span class="text" id="span_000597" smilref="Programming_Robots_with_ROS00003.smil#span_000597">, we use</span>
                      <code xml:space="preserve" id="code_000191" smilref="Programming_Robots_with_ROS00003.smil#code_000191">tf/tfMessage</code>
                      <span class="text" id="span_000598" smilref="Programming_Robots_with_ROS00003.smil#span_000598">, sent over the</span>
                      <code xml:space="preserve" id="code_000192" smilref="Programming_Robots_with_ROS00003.smil#code_000192">/tf</code>
                      <span class="text" id="span_000599" smilref="Programming_Robots_with_ROS00003.smil#span_000599">topic. You don't need to know the details of this message, because you're unlikely to ever manipulate one manually. It's enough to know that each</span>
                      <code xml:space="preserve" id="code_000193" smilref="Programming_Robots_with_ROS00003.smil#code_000193">tf/tfMessage</code>
                      <span class="text" id="span_000600" smilref="Programming_Robots_with_ROS00003.smil#span_000600">message contains a list of transforms, specifying for each one the names of the frames involved (referred to as</span>
                      <em id="em_000108" smilref="Programming_Robots_with_ROS00003.smil#em_000108">parent</em>
                      <span class="text" id="span_000601" smilref="Programming_Robots_with_ROS00003.smil#span_000601">and</span>
                      <em id="em_000109" smilref="Programming_Robots_with_ROS00003.smil#em_000109">child</em>
                      <span class="text" id="span_000602" smilref="Programming_Robots_with_ROS00003.smil#span_000602">), their relative position and orientation, and the time at which that transform was measured or computed.</span>
                    </p>
                    <p id="p_000155" smilref="Programming_Robots_with_ROS00003.smil#p_000155">Time turns out to be extremely important when we talk about sensor data and coordinate frames. If you want to combine a laser scan from one second ago with a scan from five seconds ago, then you had better keep track of where that laser was over time and be able to convert the scan data between its one-second-ago pose and its five-seconds-ago pose.</p>
                    <p id="p_000156">
                      <span class="text" id="span_000603" smilref="Programming_Robots_with_ROS00003.smil#span_000603">We don't want every node that works with transform data to reinvent the publishing, subscribing, remembering, or computing of transforms. So,</span>
                      <code xml:space="preserve" id="code_000194" smilref="Programming_Robots_with_ROS00003.smil#code_000194">tf</code>
                      <span class="text" id="span_000604" smilref="Programming_Robots_with_ROS00003.smil#span_000604">also provides a set of libraries that can be used in any node to perform those common tasks. For example, if you create a</span>
                      <code xml:space="preserve" id="code_000195" smilref="Programming_Robots_with_ROS00003.smil#code_000195">tf</code>
                      <em id="em_000110" smilref="Programming_Robots_with_ROS00003.smil#em_000110">listener</em>
                      <span class="text" id="span_000605" smilref="Programming_Robots_with_ROS00003.smil#span_000605">in your node, then, behind the scenes, your node will subscribe to the</span>
                      <code xml:space="preserve" id="code_000196" smilref="Programming_Robots_with_ROS00003.smil#code_000196">/tf</code>
                      <span class="text" id="span_000606" smilref="Programming_Robots_with_ROS00003.smil#span_000606">topic and maintain a buffer of all the</span>
                      <code xml:space="preserve" id="code_000197" smilref="Programming_Robots_with_ROS00003.smil#code_000197">tf/tfMessage</code>
                      <span class="text" id="span_000607" smilref="Programming_Robots_with_ROS00003.smil#span_000607">data published by other nodes in the system. Then you can ask questions of</span>
                      <code xml:space="preserve" id="code_000198" smilref="Programming_Robots_with_ROS00003.smil#code_000198">tf</code>
                      <span class="text" id="span_000608" smilref="Programming_Robots_with_ROS00003.smil#span_000608">, like: Where is the laser with respect to the base? Or, where was the hand with respect to the map two seconds ago? Or, how does this point cloud taken from the depth camera look in the frame of the laser? In each case, the</span>
                      <code xml:space="preserve" id="code_000199" smilref="Programming_Robots_with_ROS00003.smil#code_000199">tf</code>
                      <span class="text" id="span_000609" smilref="Programming_Robots_with_ROS00003.smil#span_000609">libraries handle all the matrix manipulations for you, chaining together transforms and going back in time through its buffer as needed.</span>
                    </p>
                    <p id="p_000157">
                      <span class="text" id="span_000610" smilref="Programming_Robots_with_ROS00003.smil#span_000610">As is often the case for a powerful system,</span>
                      <code xml:space="preserve" id="code_000200" smilref="Programming_Robots_with_ROS00003.smil#code_000200">tf</code>
                      <span class="text" id="span_000611" smilref="Programming_Robots_with_ROS00003.smil#span_000611">is relatively complex, and there are a variety of ways in which things can go wrong. Consequently, there a number of</span>
                      <code xml:space="preserve" id="code_000201" smilref="Programming_Robots_with_ROS00003.smil#code_000201">tf</code>
                      <span class="text" id="span_000612" smilref="Programming_Robots_with_ROS00003.smil#span_000612">-specific introspection and debugging tools to help you understand what's happening, from printing a single transform on the console to rendering a graphical view of the entire transform hierarchy.</span>
                    </p>
                    <p id="ch02-idp17112336" data-type="indexterm" data-startref="ix_2-preliminaries-asciidoc5">
                      <span class="text" id="span_000613" smilref="Programming_Robots_with_ROS00003.smil#span_000613">There is much, much more to know about the</span>
                      <code xml:space="preserve" id="code_000202" smilref="Programming_Robots_with_ROS00003.smil#code_000202">tf</code>
                      <span class="text" id="span_000614" smilref="Programming_Robots_with_ROS00003.smil#span_000614">system, but for the work that we'll do in the rest of this book, this introduction should be enough for you to understand what's happening. When you get to the point that you want to start publishing and manipulating transforms yourself, start with the</span>
                      <a href="http://wiki.ros.org/tf?distro=indigo" external="true" id="a_000042">
                        <code xml:space="preserve" id="code_000203" smilref="Programming_Robots_with_ROS00003.smil#code_000203">tf</code>
                        <span class="text" id="span_000615" smilref="Programming_Robots_with_ROS00003.smil#span_000615">documentation</span>
                      </a>
                      <span class="text" id="span_000616" smilref="Programming_Robots_with_ROS00003.smil#span_000616">.</span>
                    </p>
                  </div>
                </section>
              </div>
            </section>
            <section data-type="sect1" class="pagebreak-before" data-pdf-bookmark="Summary" id="section_000032">
              <h1 id="h1_000051" smilref="Programming_Robots_with_ROS00003.smil#h1_000051">Summary</h1>
              <div class="sect1" id="ch02-idp17113344">
                <p id="p_000158">
                  <span class="text" id="span_000617" smilref="Programming_Robots_with_ROS00003.smil#span_000617">In this chapter, we looked at the ROS graph architecture and introduced you to the tools such as</span>
                  <code xml:space="preserve" id="code_000204" smilref="Programming_Robots_with_ROS00003.smil#code_000204">catkin</code>
                  <span class="text" id="span_000618" smilref="Programming_Robots_with_ROS00003.smil#span_000618">,</span>
                  <code xml:space="preserve" id="code_000205" smilref="Programming_Robots_with_ROS00003.smil#code_000205">rosrun</code>
                  <span class="text" id="span_000619" smilref="Programming_Robots_with_ROS00003.smil#span_000619">, and</span>
                  <code xml:space="preserve" id="code_000206" smilref="Programming_Robots_with_ROS00003.smil#code_000206">roslaunch</code>
                  <span class="text" id="span_000620" smilref="Programming_Robots_with_ROS00003.smil#span_000620">that you'll be using to interact with the ROS graph. We also introduced the ROS namespace conventions and showed how namespaces can be remapped to avoid collisions. We further discussed the importance of coordinate transforms and how they're handled in ROS by the</span>
                  <code xml:space="preserve" id="code_000207" smilref="Programming_Robots_with_ROS00003.smil#code_000207">tf</code>
                  <span class="text" id="span_000621" smilref="Programming_Robots_with_ROS00003.smil#span_000621">system.</span>
                </p>
                <p id="ch02-idp17118288" data-type="indexterm" data-startref="ix_2-preliminaries-asciidoc0">
                  <span class="text" id="span_000622" smilref="Programming_Robots_with_ROS00003.smil#span_000622">Now that you understand the underlying architecture of a ROS system, it's time to look at what sorts of messages the nodes might send to one another and how these messages are composed, sent, and received, and to think about some of the computations that the nodes might be doing. That brings us to</span>
                  <em id="em_000111" smilref="Programming_Robots_with_ROS00003.smil#em_000111">topics</em>
                  <span class="text" id="span_000623" smilref="Programming_Robots_with_ROS00003.smil#span_000623">, the fundamental communication method in ROS.</span>
                </p>
              </div>
            </section>
            <div data-type="footnotes" id="div_000010">
              <note id="ch02-idm187808">
                <p data-type="footnote" id="p_000159">
                  <noteref idref="#ch02-idm187808-marker" id="noteref_000004" smilref="Programming_Robots_with_ROS00003.smil#noteref_000004">1</noteref>
                  <span class="text" id="span_000624" smilref="Programming_Robots_with_ROS00003.smil#span_000624">Actually, it creates a symbolic link to a system-wide</span>
                  <em id="em_000112" smilref="Programming_Robots_with_ROS00003.smil#em_000112">CMakeLists.txt</em>
                  <span class="text" id="span_000625" smilref="Programming_Robots_with_ROS00003.smil#span_000625">file.</span>
                </p>
              </note>
              <note id="ch02-idp219184">
                <p data-type="footnote" class="keep-together" id="p_000160">
                  <noteref idref="#ch02-idp219184-marker" id="noteref_000005" smilref="Programming_Robots_with_ROS00003.smil#noteref_000005">2</noteref>
                  <span class="text" id="span_000626" smilref="Programming_Robots_with_ROS00003.smil#span_000626">Unfortunately, Ubuntu software is also organized into packages. The ROS Ubuntu packages (the things you install with</span>
                  <code xml:space="preserve" id="code_000208" smilref="Programming_Robots_with_ROS00003.smil#code_000208">apt-get</code>
                  <span class="text" id="span_000627" smilref="Programming_Robots_with_ROS00003.smil#span_000627">) are conceptually different from ROS packages. In this book, we'll use "ROS package" or simply "package" when referring to a ROS package. We'll use "Ubuntu package" to refer to an Ubuntu package.</span>
                </p>
              </note>
              <note id="ch02-idp17083584">
                <p data-type="footnote" id="p_000161">
                  <noteref idref="#ch02-idp17083584-marker" id="noteref_000006" smilref="Programming_Robots_with_ROS00003.smil#noteref_000006">3</noteref>
                  <span class="text" id="span_000628" smilref="Programming_Robots_with_ROS00003.smil#span_000628">For a variety of reasons, we actually represent orientation using a</span>
                  <em id="em_000113" smilref="Programming_Robots_with_ROS00003.smil#em_000113">quaternion</em>
                  <span class="text" id="span_000629" smilref="Programming_Robots_with_ROS00003.smil#span_000629">, which comprises four numbers, but we can ignore that for the purpose of this discussion.</span>
                </p>
              </note>
              <note id="ch02-idp17094720">
                <p data-type="footnote" id="p_000162">
                  <noteref idref="#ch02-idp17094720-marker" id="noteref_000007" smilref="Programming_Robots_with_ROS00003.smil#noteref_000007">4</noteref>
                  <span class="text" id="span_000630" smilref="Programming_Robots_with_ROS00003.smil#span_000630">In practice, an arm driver will publish just the joint encoder data and let the</span>
                  <code xml:space="preserve" id="code_000209" smilref="Programming_Robots_with_ROS00003.smil#code_000209">robot_state_publisher</code>
                  <span class="text" id="span_000631" smilref="Programming_Robots_with_ROS00003.smil#span_000631">compute the full 6D transforms, as described in</span>
                  <a data-type="xref" href="#ch18-rossify_robots3_verify_tf" external="false" id="a_000043" smilref="Programming_Robots_with_ROS00003.smil#a_000043">"Verifying Transforms"</a>
                  <span class="text" id="span_000632" smilref="Programming_Robots_with_ROS00003.smil#span_000632">.</span>
                </p>
              </note>
            </div>
          </div>
        </section>
      </level1>
      <level1 id="ch03">
        <section xmlns:epub="http://www.idpf.org/2007/ops" data-type="chapter" epub:type="chapter" data-pdf-bookmark="Chapter 3. Topics" id="section_000033">
          <h1 id="h1_000052" smilref="Programming_Robots_with_ROS00003.smil#h1_000052">Chapter 3. Topics</h1>
          <div class="chapter" id="ch03-topics">
            <p data-type="indexterm" data-primary="topics" id="ch03-ix_3-topics-asciidoc0" data-secondary="defined">
              <span class="text" id="span_000633" smilref="Programming_Robots_with_ROS00003.smil#span_000633">As we saw in the previous chapter, ROS systems consist of a number of independent</span>
              <em id="em_000114" smilref="Programming_Robots_with_ROS00003.smil#em_000114">nodes</em>
              <span class="text" id="span_000634" smilref="Programming_Robots_with_ROS00003.smil#span_000634">that comprise a</span>
              <em id="em_000115" smilref="Programming_Robots_with_ROS00003.smil#em_000115">graph</em>
              <span class="text" id="span_000635" smilref="Programming_Robots_with_ROS00003.smil#span_000635">. These nodes by themselves are typically not very useful. Things only get interesting when nodes communicate with each other, exchanging information and data. The most common way to do that is through</span>
              <em id="em_000116" smilref="Programming_Robots_with_ROS00003.smil#em_000116">topics</em>
              <span class="text" id="span_000636" smilref="Programming_Robots_with_ROS00003.smil#span_000636">. A topic is a name for a stream of messages with a defined type. For example, the data from a laser range-finder might be sent on a topic called</span>
              <code id="ch03-idp17123664" xml:space="preserve" smilref="Programming_Robots_with_ROS00003.smil#ch03-idp17123664">scan</code>
              <span class="text" id="span_000637" smilref="Programming_Robots_with_ROS00003.smil#span_000637">, with a message type of</span>
              <code xml:space="preserve" id="code_000210" smilref="Programming_Robots_with_ROS00003.smil#code_000210">LaserScan</code>
              <span class="text" id="span_000638" smilref="Programming_Robots_with_ROS00003.smil#span_000638">, while the data from a camera might be sent over a topic called</span>
              <code xml:space="preserve" id="code_000211" smilref="Programming_Robots_with_ROS00003.smil#code_000211">image</code>
              <span class="text" id="span_000639" smilref="Programming_Robots_with_ROS00003.smil#span_000639">, with a message type of</span>
              <code xml:space="preserve" id="code_000212" smilref="Programming_Robots_with_ROS00003.smil#code_000212">Image</code>
              <span class="text" id="span_000640" smilref="Programming_Robots_with_ROS00003.smil#span_000640">.</span>
            </p>
            <p data-type="indexterm" data-primary="publish/subscribe communication mechanism" id="ch03-idp17126784">
              <span class="text" id="span_000641" smilref="Programming_Robots_with_ROS00003.smil#span_000641">Topics implement a</span>
              <em id="em_000117" smilref="Programming_Robots_with_ROS00003.smil#em_000117">publish/subscribe</em>
              <span class="text" id="span_000642" smilref="Programming_Robots_with_ROS00003.smil#span_000642">communication mechanism, one of the more common ways to exchange data in a distributed system. Before nodes start to transmit data over topics, they must first announce, or</span>
              <em id="em_000118" smilref="Programming_Robots_with_ROS00003.smil#em_000118">advertise</em>
              <span class="text" id="span_000643" smilref="Programming_Robots_with_ROS00003.smil#span_000643">, both the topic name and the types of messages that are going to be sent. Then they can start to send, or</span>
              <em id="em_000119" smilref="Programming_Robots_with_ROS00003.smil#em_000119">publish</em>
              <span class="text" id="span_000644" smilref="Programming_Robots_with_ROS00003.smil#span_000644">, the actual data on the topic. Nodes that want to receive messages on a topic can</span>
              <em id="em_000120" smilref="Programming_Robots_with_ROS00003.smil#em_000120">subscribe</em>
              <span class="text" id="span_000645" smilref="Programming_Robots_with_ROS00003.smil#span_000645">to that topic by making a request to</span>
              <code xml:space="preserve" id="code_000213" smilref="Programming_Robots_with_ROS00003.smil#code_000213">roscore</code>
              <span class="text" id="span_000646" smilref="Programming_Robots_with_ROS00003.smil#span_000646">. After subscribing, all messages on the topic are delivered to the node that made the request. One of the main advantages to using ROS is that all the messy details of setting up the necessary connections when nodes advertise or subscribe to topics is handled for you by the underlying communication mechanism so that you don't have to worry about it yourself.</span>
            </p>
            <p id="p_000163">
              <span class="text" id="span_000647" smilref="Programming_Robots_with_ROS00003.smil#span_000647">In ROS, all messages on the same topic</span>
              <em id="em_000121" smilref="Programming_Robots_with_ROS00003.smil#em_000121">must</em>
              <span class="text" id="span_000648" smilref="Programming_Robots_with_ROS00003.smil#span_000648">be of the same data type. Although ROS does not enforce it, topic names often describe the messages that are sent over them. For example, on the PR2 robot, the topic</span>
              <code xml:space="preserve" id="code_000214" smilref="Programming_Robots_with_ROS00003.smil#code_000214">/wide_stereo/right/image_color</code>
              <span class="text" id="span_000649" smilref="Programming_Robots_with_ROS00003.smil#span_000649">is used for color images from the rightmost camera of the wide-angle stereo pair.</span>
            </p>
            <p id="p_000164" smilref="Programming_Robots_with_ROS00003.smil#p_000164">We'll start off by looking at how a node advertises a topic and publishes data on it.</p>
            <h1 id="h1_000053" smilref="Programming_Robots_with_ROS00003.smil#h1_000053">Note</h1>
            <div data-type="note" epub:type="note" id="div_000011">
              <p id="p_000165">
                <span class="text" id="span_000650" smilref="Programming_Robots_with_ROS00003.smil#span_000650">In this section, and in much of the rest of the book, we're going to assume that you know how to create workspaces and packages, and how to structure the files in them. If you can't remember how to do this, you should refresh your memory by looking at</span>
                <a data-type="xref" href="#ch02-prelim_catkin" external="false" id="a_000044" smilref="Programming_Robots_with_ROS00003.smil#a_000044">"catkin, Workspaces, and ROS Packages"</a>
                <span class="text" id="span_000651" smilref="Programming_Robots_with_ROS00003.smil#span_000651">again. If you're unsure about things, you can take a look at the code that goes along with this book, since things should be laid out correctly there.</span>
              </p>
            </div>
            <section data-type="sect1" data-pdf-bookmark="Publishing to a Topic" id="section_000034">
              <h1 id="h1_000054" smilref="Programming_Robots_with_ROS00003.smil#h1_000054">Publishing to a Topic</h1>
              <div class="sect1" id="ch03-publishing">
                <p data-type="indexterm" data-primary="advertising" id="ch03-idp17167760" data-secondary="to a topic">
                  <a data-type="xref" href="#ch03-topic_publisher" external="false" id="a_000045" smilref="Programming_Robots_with_ROS00003.smil#a_000045">Example 3-1</a>
                  <span class="text" id="span_000652" smilref="Programming_Robots_with_ROS00003.smil#span_000652">shows the basic code for advertising a topic and publishing messages on it. This node publishes consecutive integers on the topic</span>
                  <code xml:space="preserve" id="code_000215" smilref="Programming_Robots_with_ROS00003.smil#code_000215">counter</code>
                  <span class="text" id="span_000653" smilref="Programming_Robots_with_ROS00003.smil#span_000653">at a rate of 2 Hz.</span>
                </p>
                <h1 id="h1_000055" smilref="Programming_Robots_with_ROS00003.smil#h1_000055">Example 3-1. topic_publisher.py</h1>
                <div id="ch03-topic_publisher" data-type="example">
                  <p id="p_000166">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_000216" smilref="Programming_Robots_with_ROS00003.smil#code_000216">#!/usr/bin/env python

import rospy

from std_msgs.msg import Int32


rospy.init_node('topic_publisher')

pub = rospy.Publisher('counter', Int32)

rate = rospy.Rate(2)

count = 0
while not rospy.is_shutdown():
    pub.publish(count)
    count += 1
    rate.sleep()</code>
                  </p>
                </div>
                <p id="ch03-idp17253024" data-type="indexterm" data-primary="shebang" smilref="Programming_Robots_with_ROS00003.smil#ch03-idp17253024">The first line:</p>
                <p id="p_000167">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000217" smilref="Programming_Robots_with_ROS00003.smil#code_000217">#!/usr/bin/env python</code>
                </p>
                <p data-type="indexterm" data-primary="execute permissions" id="ch03-idp17666448">
                  <span class="text" id="span_000654" smilref="Programming_Robots_with_ROS00003.smil#span_000654">is known as the</span>
                  <em id="em_000122" smilref="Programming_Robots_with_ROS00003.smil#em_000122">shebang</em>
                  <span class="text" id="span_000655" smilref="Programming_Robots_with_ROS00003.smil#span_000655">. It lets the operating system know that this is a Python file, and that it should be passed to the Python interpreter. Since we're going to be running the nodes we write as programs, we also have to set</span>
                  <em id="em_000123" smilref="Programming_Robots_with_ROS00003.smil#em_000123">execute permissions</em>
                  <span class="text" id="span_000656" smilref="Programming_Robots_with_ROS00003.smil#span_000656">on them using the Linux</span>
                  <code xml:space="preserve" id="code_000218" smilref="Programming_Robots_with_ROS00003.smil#code_000218">chmod</code>
                  <span class="text" id="span_000657" smilref="Programming_Robots_with_ROS00003.smil#span_000657">command:</span>
                </p>
                <p id="p_000168">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000219"><span class="text" id="span_000658" smilref="Programming_Robots_with_ROS00003.smil#span_000658">
user@hostname$ </span><strong id="strong_000036" smilref="Programming_Robots_with_ROS00003.smil#strong_000036">chmod u+x topic_publisher.py</strong>
</code>
                </p>
                <p id="p_000169">
                  <span class="text" id="span_000659" smilref="Programming_Robots_with_ROS00003.smil#span_000659">This particular invocation of</span>
                  <code xml:space="preserve" id="code_000220" smilref="Programming_Robots_with_ROS00003.smil#code_000220">chmod</code>
                  <span class="text" id="span_000660" smilref="Programming_Robots_with_ROS00003.smil#span_000660">will allow the owner of the file to execute it. You should take a moment to look up the documentation for</span>
                  <code xml:space="preserve" id="code_000221" smilref="Programming_Robots_with_ROS00003.smil#code_000221">chmod</code>
                  <span class="text" id="span_000661" smilref="Programming_Robots_with_ROS00003.smil#span_000661">to understand permissions and how to set them, either using the Linux</span>
                  <code xml:space="preserve" id="code_000222" smilref="Programming_Robots_with_ROS00003.smil#code_000222">man</code>
                  <span class="text" id="span_000662" smilref="Programming_Robots_with_ROS00003.smil#span_000662">pages or by searching for</span>
                  <code xml:space="preserve" id="code_000223" smilref="Programming_Robots_with_ROS00003.smil#code_000223">chmod</code>
                  <span class="text" id="span_000663" smilref="Programming_Robots_with_ROS00003.smil#span_000663">on the Web.</span>
                </p>
                <p id="p_000170" smilref="Programming_Robots_with_ROS00003.smil#p_000170">The second line:</p>
                <p id="p_000171">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000224" smilref="Programming_Robots_with_ROS00003.smil#code_000224">import rospy</code>
                </p>
                <p id="p_000172" smilref="Programming_Robots_with_ROS00003.smil#p_000172">appears in every ROS Python node and imports all of the basic functionality that we'll need. The next line imports the definition of the message that we're going to send over the topic:</p>
                <p id="p_000173">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000225" smilref="Programming_Robots_with_ROS00003.smil#code_000225">from std_msgs.msg import Int32</code>
                </p>
                <p data-type="indexterm" data-primary="dependency, adding" id="ch03-idp17589520">
                  <span class="text" id="span_000664" smilref="Programming_Robots_with_ROS00003.smil#span_000664">In this case, we're going to use a 32-bit integer, defined in the ROS standard message package,</span>
                  <code xml:space="preserve" id="code_000226" smilref="Programming_Robots_with_ROS00003.smil#code_000226">std_msgs</code>
                  <span class="text" id="span_000665" smilref="Programming_Robots_with_ROS00003.smil#span_000665">. For the import to work as expected, we need to import from</span>
                  <em id="em_000124">
                    <code xml:space="preserve" id="code_000227" smilref="Programming_Robots_with_ROS00003.smil#code_000227">&lt;package name&gt;.msg</code>
                  </em>
                  <span class="text" id="span_000666" smilref="Programming_Robots_with_ROS00003.smil#span_000666">, since this is where the package definitions are stored (more on this later). Since we're using a message from another package, we have to tell the ROS build system about this by adding a</span>
                  <em id="em_000125" smilref="Programming_Robots_with_ROS00003.smil#em_000125">dependency</em>
                  <span class="text" id="span_000667" smilref="Programming_Robots_with_ROS00003.smil#span_000667">to our</span>
                  <em id="em_000126" smilref="Programming_Robots_with_ROS00003.smil#em_000126">package.xml</em>
                  <span class="text" id="span_000668" smilref="Programming_Robots_with_ROS00003.smil#span_000668">file:</span>
                </p>
                <p id="p_000174">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000228" smilref="Programming_Robots_with_ROS00003.smil#code_000228">&lt;depend package="std_msgs" /&gt;</code>
                </p>
                <p id="p_000175" smilref="Programming_Robots_with_ROS00003.smil#p_000175">Without this dependency, ROS will not know where to find the message definition, and the node will not be able to run.</p>
                <p data-type="indexterm" data-primary="advertising" data-secondary="with rospy.Publisher" id="ch03-idp17593488">
                  <span class="text" id="span_000669" smilref="Programming_Robots_with_ROS00003.smil#span_000669">After initializing the node, we advertise it with a</span>
                  <code xml:space="preserve" id="code_000229" smilref="Programming_Robots_with_ROS00003.smil#code_000229">Publisher</code>
                  <span class="text" id="span_000670" smilref="Programming_Robots_with_ROS00003.smil#span_000670">:</span>
                </p>
                <p id="p_000176">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000230" smilref="Programming_Robots_with_ROS00003.smil#code_000230">pub = rospy.Publisher('counter', Int32)</code>
                </p>
                <p id="p_000177">
                  <span class="text" id="span_000671" smilref="Programming_Robots_with_ROS00003.smil#span_000671">This gives the topic a name (</span>
                  <code xml:space="preserve" id="code_000231" smilref="Programming_Robots_with_ROS00003.smil#code_000231">counter</code>
                  <span class="text" id="span_000672" smilref="Programming_Robots_with_ROS00003.smil#span_000672">) and specifies the type of message that will be sent over it (</span>
                  <code xml:space="preserve" id="code_000232" smilref="Programming_Robots_with_ROS00003.smil#code_000232">Int32</code>
                  <span class="text" id="span_000673" smilref="Programming_Robots_with_ROS00003.smil#span_000673">). Behind the scenes, the publisher also sets up a connection to</span>
                  <code xml:space="preserve" id="code_000233" smilref="Programming_Robots_with_ROS00003.smil#code_000233">roscore</code>
                  <span class="text" id="span_000674" smilref="Programming_Robots_with_ROS00003.smil#span_000674">and sends some information to it. When another node tries to subscribe to the</span>
                  <code xml:space="preserve" id="code_000234" smilref="Programming_Robots_with_ROS00003.smil#code_000234">counter</code>
                  <span class="text" id="span_000675" smilref="Programming_Robots_with_ROS00003.smil#span_000675">topic,</span>
                  <code xml:space="preserve" id="code_000235" smilref="Programming_Robots_with_ROS00003.smil#code_000235">roscore</code>
                  <span class="text" id="span_000676" smilref="Programming_Robots_with_ROS00003.smil#span_000676">will share its list of publishers and subscribers, which the nodes will then use to create direct connections between all publishers and of all subscribers to each topic.</span>
                </p>
                <p id="p_000178" smilref="Programming_Robots_with_ROS00003.smil#p_000178">At this point, the topic is advertised and is available for other nodes to subscribe to. Now we can go about actually publishing messages over the topic:</p>
                <p id="p_000179">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000236" smilref="Programming_Robots_with_ROS00003.smil#code_000236">rate = rospy.Rate(2)

count = 0
while not rospy.is_shutdown():
    pub.publish(count)
    count += 1
    rate.sleep()</code>
                </p>
                <p id="p_000180">
                  <span class="text" id="span_000677" smilref="Programming_Robots_with_ROS00003.smil#span_000677">First, we set the rate, in hertz, at which we want to publish. For this example, we're going to publish twice a second. The</span>
                  <code xml:space="preserve" id="code_000237" smilref="Programming_Robots_with_ROS00003.smil#code_000237">is_shutdown()</code>
                  <span class="text" id="span_000678" smilref="Programming_Robots_with_ROS00003.smil#span_000678">function will return</span>
                  <code xml:space="preserve" id="code_000238" smilref="Programming_Robots_with_ROS00003.smil#code_000238">True</code>
                  <span class="text" id="span_000679" smilref="Programming_Robots_with_ROS00003.smil#span_000679">if the node is ready to be shut down and</span>
                  <code xml:space="preserve" id="code_000239" smilref="Programming_Robots_with_ROS00003.smil#code_000239">False</code>
                  <span class="text" id="span_000680" smilref="Programming_Robots_with_ROS00003.smil#span_000680">otherwise, so we can use this to determine if it is time to exit the</span>
                  <code xml:space="preserve" id="code_000240" smilref="Programming_Robots_with_ROS00003.smil#code_000240">while</code>
                  <span class="text" id="span_000681" smilref="Programming_Robots_with_ROS00003.smil#span_000681">loop.</span>
                </p>
                <p id="p_000181">
                  <span class="text" id="span_000682" smilref="Programming_Robots_with_ROS00003.smil#span_000682">Inside the</span>
                  <code xml:space="preserve" id="code_000241" smilref="Programming_Robots_with_ROS00003.smil#code_000241">while</code>
                  <span class="text" id="span_000683" smilref="Programming_Robots_with_ROS00003.smil#span_000683">loop, we publish the current value of the counter, increment its value by 1, and then sleep for a while. The call to</span>
                  <code xml:space="preserve" id="code_000242" smilref="Programming_Robots_with_ROS00003.smil#code_000242">rate.sleep()</code>
                  <span class="text" id="span_000684" smilref="Programming_Robots_with_ROS00003.smil#span_000684">will sleep for long enough to make sure that we run the body of the</span>
                  <code xml:space="preserve" id="code_000243" smilref="Programming_Robots_with_ROS00003.smil#code_000243">while</code>
                  <span class="text" id="span_000685" smilref="Programming_Robots_with_ROS00003.smil#span_000685">loop at approximately 2 Hz.</span>
                </p>
                <p id="p_000182">
                  <span class="text" id="span_000686" smilref="Programming_Robots_with_ROS00003.smil#span_000686">And that's it. We now have a minimalist ROS node that advertises the</span>
                  <code xml:space="preserve" id="code_000244" smilref="Programming_Robots_with_ROS00003.smil#code_000244">counter</code>
                  <span class="text" id="span_000687" smilref="Programming_Robots_with_ROS00003.smil#span_000687">topic and publishes integers on it.</span>
                </p>
                <section data-type="sect2" data-pdf-bookmark="Checking That Everything Works as Expected" id="section_000035">
                  <h1 id="h1_000056" smilref="Programming_Robots_with_ROS00003.smil#h1_000056">Checking That Everything Works as Expected</h1>
                  <div class="sect2" id="ch03-idp17822240">
                    <p data-type="indexterm" data-primary="publishing" data-secondary="checking" id="ch03-idp17824128">
                      <span class="text" id="span_000688" smilref="Programming_Robots_with_ROS00003.smil#span_000688">Now that we have a node set up, let's verify that it works. We can use the</span>
                      <code xml:space="preserve" id="code_000245" smilref="Programming_Robots_with_ROS00003.smil#code_000245">rostopic</code>
                      <span class="text" id="span_000689" smilref="Programming_Robots_with_ROS00003.smil#span_000689">command to dig into the currently available topics. Open a new terminal, and start up</span>
                      <code xml:space="preserve" id="code_000246" smilref="Programming_Robots_with_ROS00003.smil#code_000246">roscore</code>
                      <span class="text" id="span_000690" smilref="Programming_Robots_with_ROS00003.smil#span_000690">. Once it's running, you can see what topics are available by running</span>
                      <code xml:space="preserve" id="code_000247" smilref="Programming_Robots_with_ROS00003.smil#code_000247">rostopic list</code>
                      <span class="text" id="span_000691" smilref="Programming_Robots_with_ROS00003.smil#span_000691">in another terminal:</span>
                    </p>
                    <p id="p_000183">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000248"><span class="text" id="span_000692" smilref="Programming_Robots_with_ROS00003.smil#span_000692">
user@hostname$ </span><strong id="strong_000037" smilref="Programming_Robots_with_ROS00003.smil#strong_000037">rostopic list</strong><span class="text" id="span_000693" smilref="Programming_Robots_with_ROS00003.smil#span_000693">
/rosout
/rosout_agg
</span></code>
                    </p>
                    <p id="p_000184">
                      <span class="text" id="span_000694" smilref="Programming_Robots_with_ROS00003.smil#span_000694">These topics are used by ROS for logging and debugging; don't worry about them. If you ever forget what the arguments to</span>
                      <code xml:space="preserve" id="code_000249" smilref="Programming_Robots_with_ROS00003.smil#code_000249">rostopic</code>
                      <span class="text" id="span_000695" smilref="Programming_Robots_with_ROS00003.smil#span_000695">are, then you can use the</span>
                      <code xml:space="preserve" id="code_000250" smilref="Programming_Robots_with_ROS00003.smil#code_000250">-h</code>
                      <span class="text" id="span_000696" smilref="Programming_Robots_with_ROS00003.smil#span_000696">flag to list them. This generally works for the other ROS command-line tools, too:</span>
                    </p>
                    <p id="p_000185">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000251"><span class="text" id="span_000697" smilref="Programming_Robots_with_ROS00003.smil#span_000697">
user@hostname$ </span><strong id="strong_000038" smilref="Programming_Robots_with_ROS00003.smil#strong_000038">rostopic -h</strong><span class="text" id="span_000698" smilref="Programming_Robots_with_ROS00003.smil#span_000698">
rostopic is a command-line tool for printing information about ROS Topics.

Commands:
	rostopic bw	display bandwidth used by topic
	rostopic echo	print messages to screen
	rostopic find	find topics by type
	rostopic hz	display publishing rate of topic
	rostopic info	print information about active topic
	rostopic list	list active topics
	rostopic pub	publish data to topic
	rostopic type	print topic type

Type rostopic &lt;command&gt; -h for more detailed usage, e.g. 'rostopic echo -h'
</span></code>
                    </p>
                    <p class="keep-together" id="p_000186">
                      <span class="text" id="span_000699" smilref="Programming_Robots_with_ROS00003.smil#span_000699">Now, run the node we've just looked at in yet another terminal. Make sure that the</span>
                      <code xml:space="preserve" id="code_000252" smilref="Programming_Robots_with_ROS00003.smil#code_000252">basics</code>
                      <span class="text" id="span_000700" smilref="Programming_Robots_with_ROS00003.smil#span_000700">package is in a workspace, and you've sourced the setup file for that workspace:</span>
                    </p>
                    <p id="p_000187">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000253"><span class="text" id="span_000701" smilref="Programming_Robots_with_ROS00003.smil#span_000701">
user@hostname$ </span><strong id="strong_000039" smilref="Programming_Robots_with_ROS00003.smil#strong_000039">rosrun basics topic_publisher.py</strong>
</code>
                    </p>
                    <p id="p_000188">
                      <span class="text" id="span_000702" smilref="Programming_Robots_with_ROS00003.smil#span_000702">Remember that the</span>
                      <em id="em_000127" smilref="Programming_Robots_with_ROS00003.smil#em_000127">basics</em>
                      <span class="text" id="span_000703" smilref="Programming_Robots_with_ROS00003.smil#span_000703">directory has to be in your</span>
                      <code xml:space="preserve" id="code_000254" smilref="Programming_Robots_with_ROS00003.smil#code_000254">catkin</code>
                      <span class="text" id="span_000704" smilref="Programming_Robots_with_ROS00003.smil#span_000704">workspace, and that, if you typed in the code for the node yourself, the file will need to have its execute permissions set using</span>
                      <code xml:space="preserve" id="code_000255" smilref="Programming_Robots_with_ROS00003.smil#code_000255">chmod</code>
                      <span class="text" id="span_000705" smilref="Programming_Robots_with_ROS00003.smil#span_000705">. Once the node is running, you can verify that the</span>
                      <code xml:space="preserve" id="code_000256" smilref="Programming_Robots_with_ROS00003.smil#code_000256">counter</code>
                      <span class="text" id="span_000706" smilref="Programming_Robots_with_ROS00003.smil#span_000706">topic is advertised by running</span>
                      <code xml:space="preserve" id="code_000257" smilref="Programming_Robots_with_ROS00003.smil#code_000257">rostopic list</code>
                      <span class="text" id="span_000707" smilref="Programming_Robots_with_ROS00003.smil#span_000707">again:</span>
                    </p>
                    <p id="p_000189">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000258"><span class="text" id="span_000708" smilref="Programming_Robots_with_ROS00003.smil#span_000708">
user@hostname$ </span><strong id="strong_000040" smilref="Programming_Robots_with_ROS00003.smil#strong_000040">rostopic list</strong><span class="text" id="span_000709" smilref="Programming_Robots_with_ROS00003.smil#span_000709">
/counter
/rosout
/rosout_agg
</span></code>
                    </p>
                    <p id="p_000190">
                      <span class="text" id="span_000710" smilref="Programming_Robots_with_ROS00003.smil#span_000710">Even better, you can see the messages being published to the topic by running</span>
                      <span class="keep-together" id="span_000711">
                        <code xml:space="preserve" id="code_000259" smilref="Programming_Robots_with_ROS00003.smil#code_000259">rostopic echo</code>
                      </span>
                      <span class="text" id="span_000712" smilref="Programming_Robots_with_ROS00003.smil#span_000712">:</span>
                    </p>
                    <p id="p_000191">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000260"><span class="text" id="span_000713" smilref="Programming_Robots_with_ROS00003.smil#span_000713">
user@hostname$ </span><strong id="strong_000041" smilref="Programming_Robots_with_ROS00003.smil#strong_000041">rostopic echo counter -n 5</strong><span class="text" id="span_000714" smilref="Programming_Robots_with_ROS00003.smil#span_000714">
data: 681
---
data: 682
---
data: 683
---
data: 684
---
data: 685
---
</span></code>
                    </p>
                    <p id="p_000192">
                      <span class="text" id="span_000715" smilref="Programming_Robots_with_ROS00003.smil#span_000715">The</span>
                      <code xml:space="preserve" id="code_000261" smilref="Programming_Robots_with_ROS00003.smil#code_000261">-n 5</code>
                      <span class="text" id="span_000716" smilref="Programming_Robots_with_ROS00003.smil#span_000716">flag tells</span>
                      <code xml:space="preserve" id="code_000262" smilref="Programming_Robots_with_ROS00003.smil#code_000262">rostopic</code>
                      <span class="text" id="span_000717" smilref="Programming_Robots_with_ROS00003.smil#span_000717">to only print out five messages. Without it, it will happily go on printing messages forever, until you stop it with a Ctrl-C. We can also use</span>
                      <span class="keep-together" id="span_000718">
                        <code xml:space="preserve" id="code_000263" smilref="Programming_Robots_with_ROS00003.smil#code_000263">rostopic</code>
                      </span>
                      <span class="text" id="span_000719" smilref="Programming_Robots_with_ROS00003.smil#span_000719">to verify that we're publishing at the rate we think we are:</span>
                    </p>
                    <p id="p_000193">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000264"><span class="text" id="span_000720" smilref="Programming_Robots_with_ROS00003.smil#span_000720">
user@hostname$ </span><strong id="strong_000042" smilref="Programming_Robots_with_ROS00003.smil#strong_000042">rostopic hz counter</strong><span class="text" id="span_000721" smilref="Programming_Robots_with_ROS00003.smil#span_000721">
subscribed to [/counter]
average rate: 2.000
	min: 0.500s max: 0.500s std dev: 0.00000s window: 2
average rate: 2.000
	min: 0.500s max: 0.500s std dev: 0.00004s window: 4
average rate: 2.000
	min: 0.500s max: 0.500s std dev: 0.00006s window: 6
average rate: 2.000
	min: 0.500s max: 0.500s std dev: 0.00005s window: 7
</span></code>
                    </p>
                    <p id="p_000194">
                      <code xml:space="preserve" id="code_000265" smilref="Programming_Robots_with_ROS00003.smil#code_000265">rostopic hz</code>
                      <span class="text" id="span_000722" smilref="Programming_Robots_with_ROS00003.smil#span_000722">has to be stopped with a Ctrl-C. Similarly,</span>
                      <code xml:space="preserve" id="code_000266" smilref="Programming_Robots_with_ROS00003.smil#code_000266">rostopic
bw</code>
                      <span class="text" id="span_000723" smilref="Programming_Robots_with_ROS00003.smil#span_000723">will give information about the bandwidth being used by the topic.</span>
                    </p>
                    <p id="p_000195">
                      <span class="text" id="span_000724" smilref="Programming_Robots_with_ROS00003.smil#span_000724">You can also find out about an advertised topic with</span>
                      <code xml:space="preserve" id="code_000267" smilref="Programming_Robots_with_ROS00003.smil#code_000267">rostopic info</code>
                      <span class="text" id="span_000725" smilref="Programming_Robots_with_ROS00003.smil#span_000725">:</span>
                    </p>
                    <p id="p_000196">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000268"><span class="text" id="span_000726" smilref="Programming_Robots_with_ROS00003.smil#span_000726">
user@hostname$ </span><strong id="strong_000043" smilref="Programming_Robots_with_ROS00003.smil#strong_000043">rostopic info counter</strong><span class="text" id="span_000727" smilref="Programming_Robots_with_ROS00003.smil#span_000727">
Type: std_msgs/Int32

Publishers:
 * /topic_publisher (http://hostname:39964/)

Subscribers: None
</span></code>
                    </p>
                    <p id="p_000197">
                      <span class="text" id="span_000728" smilref="Programming_Robots_with_ROS00003.smil#span_000728">This reveals that</span>
                      <code xml:space="preserve" id="code_000269" smilref="Programming_Robots_with_ROS00003.smil#code_000269">counter</code>
                      <span class="text" id="span_000729" smilref="Programming_Robots_with_ROS00003.smil#span_000729">carries messages of type</span>
                      <code xml:space="preserve" id="code_000270" smilref="Programming_Robots_with_ROS00003.smil#code_000270">std_msgs/Int32</code>
                      <span class="text" id="span_000730" smilref="Programming_Robots_with_ROS00003.smil#span_000730">, that it is currently being advertised by</span>
                      <code xml:space="preserve" id="code_000271" smilref="Programming_Robots_with_ROS00003.smil#code_000271">topic_publisher</code>
                      <span class="text" id="span_000731" smilref="Programming_Robots_with_ROS00003.smil#span_000731">, and that no one is currently subscribing to it. Since it's possible for more than one node to publish to the same topic and for more than one node to be subscribed to a topic, this command can help you make sure things are connected in the way that you think they are. Here, the publisher</span>
                      <code xml:space="preserve" id="code_000272" smilref="Programming_Robots_with_ROS00003.smil#code_000272">topic_publisher</code>
                      <span class="text" id="span_000732" smilref="Programming_Robots_with_ROS00003.smil#span_000732">is running on the computer</span>
                      <code xml:space="preserve" id="code_000273" smilref="Programming_Robots_with_ROS00003.smil#code_000273">hostname</code>
                      <span class="text" id="span_000733" smilref="Programming_Robots_with_ROS00003.smil#span_000733">and is communicating over TCP port 39964.</span>
                      <note id="ch03-idp17850080-marker">
                        <noteref data-type="noteref" idref="#ch03-idp17850080" id="noteref_000008" smilref="Programming_Robots_with_ROS00003.smil#noteref_000008">1</noteref>
                      </note>
                      <code xml:space="preserve" id="code_000274" smilref="Programming_Robots_with_ROS00003.smil#code_000274">rostopic type</code>
                      <span class="text" id="span_000734" smilref="Programming_Robots_with_ROS00003.smil#span_000734">works similarly but only returns the message type for a given topic.</span>
                    </p>
                    <p id="p_000198">
                      <span class="text" id="span_000735" smilref="Programming_Robots_with_ROS00003.smil#span_000735">Finally, you can find all of the topics that publish a certain message type using</span>
                      <span class="keep-together" id="span_000736">
                        <code xml:space="preserve" id="code_000275" smilref="Programming_Robots_with_ROS00003.smil#code_000275">rostopic find</code>
                      </span>
                      <span class="text" id="span_000737" smilref="Programming_Robots_with_ROS00003.smil#span_000737">:</span>
                    </p>
                    <p id="p_000199">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000276"><span class="text" id="span_000738" smilref="Programming_Robots_with_ROS00003.smil#span_000738">
user@hostname$ </span><strong id="strong_000044" smilref="Programming_Robots_with_ROS00003.smil#strong_000044">rostopic find std_msgs/Int32</strong><span class="text" id="span_000739" smilref="Programming_Robots_with_ROS00003.smil#span_000739">
/counter
</span></code>
                    </p>
                    <p id="p_000200">
                      <span class="text" id="span_000740" smilref="Programming_Robots_with_ROS00003.smil#span_000740">Note that you have to give both the package name (</span>
                      <code xml:space="preserve" id="code_000277" smilref="Programming_Robots_with_ROS00003.smil#code_000277">std_msgs</code>
                      <span class="text" id="span_000741" smilref="Programming_Robots_with_ROS00003.smil#span_000741">) and the message type (</span>
                      <code xml:space="preserve" id="code_000278" smilref="Programming_Robots_with_ROS00003.smil#code_000278">Int32</code>
                      <span class="text" id="span_000742" smilref="Programming_Robots_with_ROS00003.smil#span_000742">) for this to work.</span>
                    </p>
                    <p id="p_000201" smilref="Programming_Robots_with_ROS00003.smil#p_000201">So, now we have a node that's happily publishing consecutive integers, and we can verify that everything is as it should be. Now let's turn our attention to a node that subscribes to this topic and uses the messages it is receiving.</p>
                    <h1 id="h1_000057" smilref="Programming_Robots_with_ROS00003.smil#h1_000057">Tip</h1>
                    <div data-type="tip" id="div_000012">
                      <p data-type="indexterm" data-primary="Linux" id="ch03-idp17856560" data-startref="ix_3-topics-asciidoc1">
                        <span class="text" id="span_000743" smilref="Programming_Robots_with_ROS00003.smil#span_000743">As you work through this book, you'll probably notice that we use a number of Linux command-line tools and talk about some of the underlying mechanisms in Linux, such as the use of TCP ports. You can use ROS with only a vague idea of what these things are. However, if you're going to be using ROS a lot, then it's probably a good idea to learn some more about Linux and what's going on under the hood. Knowing a bit about the operating system and how to work on the command line will make you more efficient, and will often help you debug problems with your ROS system</span>
                        <em id="em_000128" smilref="Programming_Robots_with_ROS00003.smil#em_000128">much</em>
                        <span class="text" id="span_000744" smilref="Programming_Robots_with_ROS00003.smil#span_000744">faster.</span>
                      </p>
                    </div>
                  </div>
                </section>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Subscribing to a Topic" id="section_000036">
              <h1 id="h1_000058" smilref="Programming_Robots_with_ROS00003.smil#h1_000058">Subscribing to a Topic</h1>
              <div class="sect1" id="ch03-subscribing">
                <p data-type="indexterm" data-primary="subscribing" data-secondary="to a topic" id="ch03-ix_3-topics-asciidoc3">
                  <a data-type="xref" href="#ch03-topic_subscriber" external="false" id="a_000046" smilref="Programming_Robots_with_ROS00003.smil#a_000046">Example 3-2</a>
                  <span class="text" id="span_000745" smilref="Programming_Robots_with_ROS00003.smil#span_000745">shows a minimalist node that subscribes to the</span>
                  <code xml:space="preserve" id="code_000279" smilref="Programming_Robots_with_ROS00003.smil#code_000279">counter</code>
                  <span class="text" id="span_000746" smilref="Programming_Robots_with_ROS00003.smil#span_000746">topic and prints out the values in the messages as they arrive.</span>
                </p>
                <h1 id="h1_000059" smilref="Programming_Robots_with_ROS00003.smil#h1_000059">Example 3-2. topic_subscriber.py</h1>
                <div id="ch03-topic_subscriber" data-type="example">
                  <p id="p_000202">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_000280" smilref="Programming_Robots_with_ROS00003.smil#code_000280">#!/usr/bin/env python


import rospy
from std_msgs.msg import Int32


def callback(msg):
    print msg.data


rospy.init_node('topic_subscriber')

sub = rospy.Subscriber('counter', Int32, callback)

rospy.spin()</code>
                  </p>
                </div>
                <p data-type="indexterm" data-primary="callback function" data-secondary="topics and" id="ch03-idp17746864">
                  <span class="text" id="span_000747" smilref="Programming_Robots_with_ROS00003.smil#span_000747">The first interesting part of this code is the</span>
                  <em id="em_000129" smilref="Programming_Robots_with_ROS00003.smil#em_000129">callback</em>
                  <span class="text" id="span_000748" smilref="Programming_Robots_with_ROS00003.smil#span_000748">that handles the messages as they come in:</span>
                </p>
                <p id="p_000203">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000281" smilref="Programming_Robots_with_ROS00003.smil#code_000281">def callback(msg):
    print msg.data</code>
                </p>
                <p id="p_000204">
                  <span class="text" id="span_000749" smilref="Programming_Robots_with_ROS00003.smil#span_000749">ROS is an event-driven system, and it uses callback functions heavily. Once a node has subscribed to a topic, every time a message arrives on it the associated callback function is called, with the message as its parameter. In this case, the function simply prints out the data contained in the message (see</span>
                  <a data-type="xref" href="#ch03-messages" external="false" id="a_000047" smilref="Programming_Robots_with_ROS00003.smil#a_000047">"Defining Your Own Message Types"</a>
                  <span class="text" id="span_000750" smilref="Programming_Robots_with_ROS00003.smil#span_000750">for more details about messages and what they contain).</span>
                </p>
                <p id="p_000205">
                  <span class="text" id="span_000751" smilref="Programming_Robots_with_ROS00003.smil#span_000751">After initializing the node, as before, we subscribe to the</span>
                  <code xml:space="preserve" id="code_000282" smilref="Programming_Robots_with_ROS00003.smil#code_000282">counter</code>
                  <span class="text" id="span_000752" smilref="Programming_Robots_with_ROS00003.smil#span_000752">topic:</span>
                </p>
                <p id="p_000206">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000283" smilref="Programming_Robots_with_ROS00003.smil#code_000283">sub = rospy.Subscriber('counter', Int32, callback)</code>
                </p>
                <p id="p_000207">
                  <span class="text" id="span_000753" smilref="Programming_Robots_with_ROS00003.smil#span_000753">We give the name of the topic, the message type of the topic, and the name of the callback function. Behind the scenes, the subscriber passes this information on to</span>
                  <code xml:space="preserve" id="code_000284" smilref="Programming_Robots_with_ROS00003.smil#code_000284">roscore</code>
                  <span class="text" id="span_000754" smilref="Programming_Robots_with_ROS00003.smil#span_000754">and tries to make a direct connection with the publishers of this topic. If the topic does not exist, or if the type is wrong, there are no error messages: the node will simply wait until messages start being published on the topic.</span>
                </p>
                <p class="keep-together" id="p_000208">
                  <span class="text" id="span_000755" smilref="Programming_Robots_with_ROS00003.smil#span_000755">Once the subscription is made, we give control over to ROS by calling</span>
                  <code xml:space="preserve" id="code_000285" smilref="Programming_Robots_with_ROS00003.smil#code_000285">rospy.spin()</code>
                  <span class="text" id="span_000756" smilref="Programming_Robots_with_ROS00003.smil#span_000756">. This function will only return when the node is ready to shut down. This is just a useful shortcut to avoid having to define a top-level</span>
                  <code xml:space="preserve" id="code_000286" smilref="Programming_Robots_with_ROS00003.smil#code_000286">while</code>
                  <span class="text" id="span_000757" smilref="Programming_Robots_with_ROS00003.smil#span_000757">loop like we did in</span>
                  <a data-type="xref" href="#ch03-topic_publisher" external="false" id="a_000048" smilref="Programming_Robots_with_ROS00003.smil#a_000048">Example 3-1</a>
                  <span class="text" id="span_000758" smilref="Programming_Robots_with_ROS00003.smil#span_000758">; ROS does not necessarily need to "take over" the main thread of execution.</span>
                </p>
                <section data-type="sect2" data-pdf-bookmark="Checking That Everything Works as Expected" id="section_000037">
                  <h1 id="h1_000060" smilref="Programming_Robots_with_ROS00003.smil#h1_000060">Checking That Everything Works as Expected</h1>
                  <div class="sect2" id="ch03-idp17885184">
                    <p data-type="indexterm" data-primary="subscribing" data-secondary="checking" id="ch03-idp17886624">
                      <span class="text" id="span_000759" smilref="Programming_Robots_with_ROS00003.smil#span_000759">First, make sure that the publisher node is still running and that it is still publishing messages on the</span>
                      <code xml:space="preserve" id="code_000287" smilref="Programming_Robots_with_ROS00003.smil#code_000287">counter</code>
                      <span class="text" id="span_000760" smilref="Programming_Robots_with_ROS00003.smil#span_000760">topic. Then, in another terminal, start up the subscriber node:</span>
                    </p>
                    <p id="p_000209">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000288"><span class="text" id="span_000761" smilref="Programming_Robots_with_ROS00003.smil#span_000761">
user@hostname$ </span><strong id="strong_000045" smilref="Programming_Robots_with_ROS00003.smil#strong_000045">rosrun basics topic_subscriber.py</strong><span class="text" id="span_000762" smilref="Programming_Robots_with_ROS00003.smil#span_000762">
355
356
357
358
359
360
</span></code>
                    </p>
                    <p id="p_000210">
                      <span class="text" id="span_000763" smilref="Programming_Robots_with_ROS00003.smil#span_000763">It should start to print out integers published to the</span>
                      <code xml:space="preserve" id="code_000289" smilref="Programming_Robots_with_ROS00003.smil#code_000289">counter</code>
                      <span class="text" id="span_000764" smilref="Programming_Robots_with_ROS00003.smil#span_000764">topic by the publisher node. Congratulations! You're now running your first ROS system:</span>
                      <a data-type="xref" href="#ch03-topic_publisher" external="false" id="a_000049" smilref="Programming_Robots_with_ROS00003.smil#a_000049">Example 3-1</a>
                      <span class="text" id="span_000765" smilref="Programming_Robots_with_ROS00003.smil#span_000765">is sending messages to</span>
                      <a data-type="xref" href="#ch03-topic_subscriber" external="false" id="a_000050" smilref="Programming_Robots_with_ROS00003.smil#a_000050">Example 3-2</a>
                      <span class="text" id="span_000766" smilref="Programming_Robots_with_ROS00003.smil#span_000766">. You can visualize this system by typing</span>
                      <code xml:space="preserve" id="code_000290" smilref="Programming_Robots_with_ROS00003.smil#code_000290">rqt_graph</code>
                      <span class="text" id="span_000767" smilref="Programming_Robots_with_ROS00003.smil#span_000767">, which will attempt to draw the publishers and subscribers in a logical manner.</span>
                    </p>
                    <p id="p_000211">
                      <span class="text" id="span_000768" smilref="Programming_Robots_with_ROS00003.smil#span_000768">We can also publish messages to a topic from the command line using</span>
                      <code xml:space="preserve" id="code_000291" smilref="Programming_Robots_with_ROS00003.smil#code_000291">rostopic pub</code>
                      <span class="text" id="span_000769" smilref="Programming_Robots_with_ROS00003.smil#span_000769">. Run the following command, and watch the output of the subscriber node:</span>
                    </p>
                    <p id="p_000212">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000292"><span class="text" id="span_000770" smilref="Programming_Robots_with_ROS00003.smil#span_000770">
user@hostname$ </span><strong id="strong_000046" smilref="Programming_Robots_with_ROS00003.smil#strong_000046">rostopic pub counter std_msgs/Int32 1000000</strong>
</code>
                    </p>
                    <p class="keep-together" id="ch03-idp18014704" data-type="indexterm" data-startref="ix_3-topics-asciidoc3">
                      <span class="text" id="span_000771" smilref="Programming_Robots_with_ROS00003.smil#span_000771">We can use</span>
                      <code xml:space="preserve" id="code_000293" smilref="Programming_Robots_with_ROS00003.smil#code_000293">rostopic info</code>
                      <span class="text" id="span_000772" smilref="Programming_Robots_with_ROS00003.smil#span_000772">again to make sure things are the way we expect them to be:</span>
                    </p>
                    <p id="p_000213">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000294"><span class="text" id="span_000773" smilref="Programming_Robots_with_ROS00003.smil#span_000773">
user@hostname$ </span><strong id="strong_000047" smilref="Programming_Robots_with_ROS00003.smil#strong_000047">rostopic info counter</strong><span class="text" id="span_000774" smilref="Programming_Robots_with_ROS00003.smil#span_000774">
Type: std_msgs/Int32

Publishers:
 * /topic_publisher (http://hostname:46674/)

Subscribers:
 * /topic_subscriber (http://hostname:53744/)
</span></code>
                    </p>
                    <p id="p_000214">
                      <span class="text" id="span_000775" smilref="Programming_Robots_with_ROS00003.smil#span_000775">Now that you understand how basic topics work, we can talk about a special type of topics designed for nodes that publish data only infrequently, called</span>
                      <em id="em_000130" smilref="Programming_Robots_with_ROS00003.smil#em_000130">latched topics</em>
                      <span class="text" id="span_000776" smilref="Programming_Robots_with_ROS00003.smil#span_000776">.</span>
                    </p>
                  </div>
                </section>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Latched Topics" id="section_000038">
              <h1 id="h1_000061" smilref="Programming_Robots_with_ROS00003.smil#h1_000061">Latched Topics</h1>
              <div class="sect1" id="ch03-latched_topics">
                <p id="ch03-idp18019360" data-type="indexterm" data-primary="latched topics" data-secondary="and latched topics" smilref="Programming_Robots_with_ROS00003.smil#ch03-idp18019360">Messages in ROS are fleeting. If you're not subscribed to a topic when a message goes out on it, you'll miss it and will have to wait for the next one. This is fine if the publisher sends out messages frequently, since it won't be long until the next message comes along. However, there are cases where sending out frequent messages is a bad idea.</p>
                <p data-type="indexterm" data-primary="map_server" data-secondary="and latched topics" id="ch03-idp18022704">
                  <span class="text" id="span_000777" smilref="Programming_Robots_with_ROS00003.smil#span_000777">For example, the</span>
                  <code xml:space="preserve" id="code_000295" smilref="Programming_Robots_with_ROS00003.smil#code_000295">map_server</code>
                  <span class="text" id="span_000778" smilref="Programming_Robots_with_ROS00003.smil#span_000778">node advertises a map (of type</span>
                  <code xml:space="preserve" id="code_000296" smilref="Programming_Robots_with_ROS00003.smil#code_000296">nav_msgs/OccupancyGrid</code>
                  <span class="text" id="span_000779" smilref="Programming_Robots_with_ROS00003.smil#span_000779">) on the</span>
                  <code xml:space="preserve" id="code_000297" smilref="Programming_Robots_with_ROS00003.smil#code_000297">map</code>
                  <span class="text" id="span_000780" smilref="Programming_Robots_with_ROS00003.smil#span_000780">topic. This represents a map of the world that the robot can use to determine where it is, such as the one shown in</span>
                  <a data-type="xref" href="#ch03-map_example" external="false" id="a_000051" smilref="Programming_Robots_with_ROS00003.smil#a_000051">Figure 3-1</a>
                  <span class="text" id="span_000781" smilref="Programming_Robots_with_ROS00003.smil#span_000781">. Often, this map never changes and is published only once, when the</span>
                  <code xml:space="preserve" id="code_000298" smilref="Programming_Robots_with_ROS00003.smil#code_000298">map_server</code>
                  <span class="text" id="span_000782" smilref="Programming_Robots_with_ROS00003.smil#span_000782">loads it from disk. However, this means if another node needs the map, but starts up after</span>
                  <code xml:space="preserve" id="code_000299" smilref="Programming_Robots_with_ROS00003.smil#code_000299">map_server</code>
                  <span class="text" id="span_000783" smilref="Programming_Robots_with_ROS00003.smil#span_000783">publishes it, it will never get the message.</span>
                </p>
                <figure id="figure_000011">
                  <h1 id="h1_000062" smilref="Programming_Robots_with_ROS00003.smil#h1_000062">Figure 3-1. An example map</h1>
                  <div id="ch03-map_example" class="figure">
                    <img src="images/prwr_0301.jpg" alt="example map" id="img_000029" />
                  </div>
                </figure>
                <p id="p_000215" smilref="Programming_Robots_with_ROS00003.smil#p_000215">We could periodically publish the map, but we don't want to publish the message more often than we have to, since it's typically huge. If we did decide to republish it, we would have to pick a suitable frequency, which might be tricky to get right.</p>
                <p id="p_000216">
                  <em id="em_000131" smilref="Programming_Robots_with_ROS00003.smil#em_000131">Latched topics</em>
                  <span class="text" id="span_000784" smilref="Programming_Robots_with_ROS00003.smil#span_000784">offer a simple solution to this problem. If a topic is marked as latched when it is advertised, subscribers automatically get</span>
                  <em id="em_000132" smilref="Programming_Robots_with_ROS00003.smil#em_000132">the last message sent</em>
                  <span class="text" id="span_000785" smilref="Programming_Robots_with_ROS00003.smil#span_000785">when they subscribe to the topic. In our</span>
                  <code xml:space="preserve" id="code_000300" smilref="Programming_Robots_with_ROS00003.smil#code_000300">map_server</code>
                  <span class="text" id="span_000786" smilref="Programming_Robots_with_ROS00003.smil#span_000786">example, this means that we only need to mark it as latched and publish it once. Topics can be marked as latched with the optional</span>
                  <code xml:space="preserve" id="code_000301" smilref="Programming_Robots_with_ROS00003.smil#code_000301">latched</code>
                  <span class="text" id="span_000787" smilref="Programming_Robots_with_ROS00003.smil#span_000787">argument:</span>
                </p>
                <p id="p_000217">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000302" smilref="Programming_Robots_with_ROS00003.smil#code_000302">pub = rospy.Publisher('map', nav_msgs/OccupancyGrid, latched=True)</code>
                </p>
                <p id="p_000218" smilref="Programming_Robots_with_ROS00003.smil#p_000218">Now that we know how to send messages over topics, it's time to think about what to do if we want to send a message that isn't already defined by ROS.</p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Defining Your Own Message Types" id="section_000039">
              <h1 id="h1_000063" smilref="Programming_Robots_with_ROS00003.smil#h1_000063">Defining Your Own Message Types</h1>
              <div class="sect1" id="ch03-messages">
                <p data-type="indexterm" data-primary="message types" data-secondary="defining your own" id="ch03-ix_3-topics-asciidoc5">
                  <span class="text" id="span_000788" smilref="Programming_Robots_with_ROS00003.smil#span_000788">ROS offers a rich set of built-in message types. The</span>
                  <code xml:space="preserve" id="code_000303" smilref="Programming_Robots_with_ROS00003.smil#code_000303">std_msgs</code>
                  <span class="text" id="span_000789" smilref="Programming_Robots_with_ROS00003.smil#span_000789">package defines the primitive types, shown in</span>
                  <a data-type="xref" href="#ch03-built-in-types" external="false" id="a_000052" smilref="Programming_Robots_with_ROS00003.smil#a_000052">Table 3-1</a>
                  <span class="text" id="span_000790" smilref="Programming_Robots_with_ROS00003.smil#span_000790">and documented more fully on the</span>
                  <a href="http://wiki.ros.org/msg#Field_Types?distro=indigo" external="true" id="a_000053">
                    <span class="text" id="span_000791" smilref="Programming_Robots_with_ROS00003.smil#span_000791">ROS wiki</span>
                    <code xml:space="preserve" id="code_000304" smilref="Programming_Robots_with_ROS00003.smil#code_000304">msg</code>
                    <span class="text" id="span_000792" smilref="Programming_Robots_with_ROS00003.smil#span_000792">page</span>
                  </a>
                  <span class="text" id="span_000793" smilref="Programming_Robots_with_ROS00003.smil#span_000793">. Arrays of these types, both fixed and variable length, are returned (from the lower-level communications deserialization code) as tuples in Python and can be set as either tuples or lists.</span>
                </p>
                <table id="ch03-built-in-types">
                  <caption id="caption_000001">
                    <span class="label" id="span_000794" smilref="Programming_Robots_with_ROS00003.smil#span_000794">Table 3-1.</span>
                    <span class="text" id="span_000795" smilref="Programming_Robots_with_ROS00003.smil#span_000795">ROS primitive message types, how they are serialized, and their corresponding C and Python types</span>
                  </caption>
                  <thead id="thead_000001">
                    <tr id="tr_000001">
                      <th rowspan="1" colspan="1" id="th_000001" smilref="Programming_Robots_with_ROS00003.smil#th_000001">ROS type</th>
                      <th rowspan="1" colspan="1" id="th_000002" smilref="Programming_Robots_with_ROS00003.smil#th_000002">Serialization</th>
                      <th rowspan="1" colspan="1" id="th_000003" smilref="Programming_Robots_with_ROS00003.smil#th_000003">C++ type</th>
                      <th rowspan="1" colspan="1" id="th_000004" smilref="Programming_Robots_with_ROS00003.smil#th_000004">Python type</th>
                      <th rowspan="1" colspan="1" id="th_000005" smilref="Programming_Robots_with_ROS00003.smil#th_000005">Notes</th>
                    </tr>
                  </thead>
                  <tbody id="tbody_000001">
                    <tr id="tr_000002">
                      <td rowspan="1" colspan="1" id="td_000001">
                        <p id="p_000219">
                          <code xml:space="preserve" id="code_000305" smilref="Programming_Robots_with_ROS00003.smil#code_000305">bool</code>
                        </p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000002">
                        <p id="p_000220" smilref="Programming_Robots_with_ROS00003.smil#p_000220">Unsigned 8-bit integer</p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000003">
                        <p id="p_000221">
                          <code xml:space="preserve" id="code_000306" smilref="Programming_Robots_with_ROS00003.smil#code_000306">uint8_t</code>
                        </p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000004">
                        <p id="p_000222">
                          <code xml:space="preserve" id="code_000307" smilref="Programming_Robots_with_ROS00003.smil#code_000307">bool</code>
                        </p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000005" />
                    </tr>
                    <tr id="tr_000003">
                      <td rowspan="1" colspan="1" id="td_000006">
                        <p id="p_000223">
                          <code xml:space="preserve" id="code_000308" smilref="Programming_Robots_with_ROS00003.smil#code_000308">int8</code>
                        </p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000007">
                        <p id="p_000224" smilref="Programming_Robots_with_ROS00003.smil#p_000224">Signed 8-bit integer</p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000008">
                        <p id="p_000225">
                          <code xml:space="preserve" id="code_000309" smilref="Programming_Robots_with_ROS00003.smil#code_000309">int8_t</code>
                        </p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000009">
                        <p id="p_000226">
                          <code xml:space="preserve" id="code_000310" smilref="Programming_Robots_with_ROS00003.smil#code_000310">int</code>
                        </p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000010" />
                    </tr>
                    <tr id="tr_000004">
                      <td rowspan="1" colspan="1" id="td_000011">
                        <p id="p_000227">
                          <code xml:space="preserve" id="code_000311" smilref="Programming_Robots_with_ROS00003.smil#code_000311">uint8</code>
                        </p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000012">
                        <p id="p_000228" smilref="Programming_Robots_with_ROS00003.smil#p_000228">Unsigned 8-bit integer</p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000013">
                        <p id="p_000229">
                          <code xml:space="preserve" id="code_000312" smilref="Programming_Robots_with_ROS00003.smil#code_000312">uint8_t</code>
                        </p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000014">
                        <p id="p_000230">
                          <code xml:space="preserve" id="code_000313" smilref="Programming_Robots_with_ROS00003.smil#code_000313">int</code>
                        </p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000015">
                        <p id="p_000231">
                          <code xml:space="preserve" id="code_000314" smilref="Programming_Robots_with_ROS00003.smil#code_000314">uint8[]</code>
                          <span class="text" id="span_000796" smilref="Programming_Robots_with_ROS00003.smil#span_000796">is treated as a</span>
                          <code xml:space="preserve" id="code_000315" smilref="Programming_Robots_with_ROS00003.smil#code_000315">string</code>
                          <span class="text" id="span_000797" smilref="Programming_Robots_with_ROS00003.smil#span_000797">in Python</span>
                        </p>
                      </td>
                    </tr>
                    <tr id="tr_000005">
                      <td rowspan="1" colspan="1" id="td_000016">
                        <p id="p_000232">
                          <code xml:space="preserve" id="code_000316" smilref="Programming_Robots_with_ROS00003.smil#code_000316">int16</code>
                        </p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000017">
                        <p id="p_000233" smilref="Programming_Robots_with_ROS00003.smil#p_000233">Signed 16-bit integer</p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000018">
                        <p id="p_000234">
                          <code xml:space="preserve" id="code_000317" smilref="Programming_Robots_with_ROS00003.smil#code_000317">int16_t</code>
                        </p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000019">
                        <p id="p_000235">
                          <code xml:space="preserve" id="code_000318" smilref="Programming_Robots_with_ROS00003.smil#code_000318">int</code>
                        </p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000020" />
                    </tr>
                    <tr id="tr_000006">
                      <td rowspan="1" colspan="1" id="td_000021">
                        <p id="p_000236">
                          <code xml:space="preserve" id="code_000319" smilref="Programming_Robots_with_ROS00003.smil#code_000319">uint16</code>
                        </p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000022">
                        <p id="p_000237" smilref="Programming_Robots_with_ROS00003.smil#p_000237">Unsigned 16-bit integer</p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000023">
                        <p id="p_000238">
                          <code xml:space="preserve" id="code_000320" smilref="Programming_Robots_with_ROS00003.smil#code_000320">uint16_t</code>
                        </p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000024">
                        <p id="p_000239">
                          <code xml:space="preserve" id="code_000321" smilref="Programming_Robots_with_ROS00003.smil#code_000321">int</code>
                        </p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000025" />
                    </tr>
                    <tr id="tr_000007">
                      <td rowspan="1" colspan="1" id="td_000026">
                        <p id="p_000240">
                          <code xml:space="preserve" id="code_000322" smilref="Programming_Robots_with_ROS00003.smil#code_000322">int32</code>
                        </p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000027">
                        <p id="p_000241" smilref="Programming_Robots_with_ROS00003.smil#p_000241">Signed 32-bit integer</p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000028">
                        <p id="p_000242">
                          <code xml:space="preserve" id="code_000323" smilref="Programming_Robots_with_ROS00003.smil#code_000323">int32_t</code>
                        </p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000029">
                        <p id="p_000243">
                          <code xml:space="preserve" id="code_000324" smilref="Programming_Robots_with_ROS00003.smil#code_000324">int</code>
                        </p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000030" />
                    </tr>
                    <tr id="tr_000008">
                      <td rowspan="1" colspan="1" id="td_000031">
                        <p id="p_000244">
                          <code xml:space="preserve" id="code_000325" smilref="Programming_Robots_with_ROS00003.smil#code_000325">uint32</code>
                        </p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000032">
                        <p id="p_000245" smilref="Programming_Robots_with_ROS00003.smil#p_000245">Unsigned 32-bit integer</p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000033">
                        <p id="p_000246">
                          <code xml:space="preserve" id="code_000326" smilref="Programming_Robots_with_ROS00003.smil#code_000326">uint32_t</code>
                        </p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000034">
                        <p id="p_000247">
                          <code xml:space="preserve" id="code_000327" smilref="Programming_Robots_with_ROS00003.smil#code_000327">int</code>
                        </p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000035" />
                    </tr>
                    <tr id="tr_000009">
                      <td rowspan="1" colspan="1" id="td_000036">
                        <p id="p_000248">
                          <code xml:space="preserve" id="code_000328" smilref="Programming_Robots_with_ROS00004.smil#code_000328">int64</code>
                        </p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000037">
                        <p id="p_000249" smilref="Programming_Robots_with_ROS00004.smil#p_000249">Signed 64-bit integer</p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000038">
                        <p id="p_000250">
                          <code xml:space="preserve" id="code_000329" smilref="Programming_Robots_with_ROS00004.smil#code_000329">int64_t</code>
                        </p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000039">
                        <p id="p_000251">
                          <code xml:space="preserve" id="code_000330" smilref="Programming_Robots_with_ROS00004.smil#code_000330">long</code>
                        </p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000040" />
                    </tr>
                    <tr id="tr_000010">
                      <td rowspan="1" colspan="1" id="td_000041">
                        <p id="p_000252">
                          <code xml:space="preserve" id="code_000331" smilref="Programming_Robots_with_ROS00004.smil#code_000331">uint64</code>
                        </p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000042">
                        <p id="p_000253" smilref="Programming_Robots_with_ROS00004.smil#p_000253">Unsigned 64-bit integer</p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000043">
                        <p id="p_000254">
                          <code xml:space="preserve" id="code_000332" smilref="Programming_Robots_with_ROS00004.smil#code_000332">uint64_t</code>
                        </p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000044">
                        <p id="p_000255">
                          <code xml:space="preserve" id="code_000333" smilref="Programming_Robots_with_ROS00004.smil#code_000333">long</code>
                        </p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000045" />
                    </tr>
                    <tr id="tr_000011">
                      <td rowspan="1" colspan="1" id="td_000046">
                        <p id="p_000256">
                          <code xml:space="preserve" id="code_000334" smilref="Programming_Robots_with_ROS00004.smil#code_000334">float32</code>
                        </p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000047">
                        <p id="p_000257" smilref="Programming_Robots_with_ROS00004.smil#p_000257">32-bit IEEE float</p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000048">
                        <p id="p_000258">
                          <code xml:space="preserve" id="code_000335" smilref="Programming_Robots_with_ROS00004.smil#code_000335">float</code>
                        </p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000049">
                        <p id="p_000259">
                          <code xml:space="preserve" id="code_000336" smilref="Programming_Robots_with_ROS00004.smil#code_000336">float</code>
                        </p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000050" />
                    </tr>
                    <tr id="tr_000012">
                      <td rowspan="1" colspan="1" id="td_000051">
                        <p id="p_000260">
                          <code xml:space="preserve" id="code_000337" smilref="Programming_Robots_with_ROS00004.smil#code_000337">float64</code>
                        </p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000052">
                        <p id="p_000261" smilref="Programming_Robots_with_ROS00004.smil#p_000261">64-bit IEEE float</p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000053">
                        <p id="p_000262">
                          <code xml:space="preserve" id="code_000338" smilref="Programming_Robots_with_ROS00004.smil#code_000338">double</code>
                        </p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000054">
                        <p id="p_000263">
                          <code xml:space="preserve" id="code_000339" smilref="Programming_Robots_with_ROS00004.smil#code_000339">float</code>
                        </p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000055" />
                    </tr>
                    <tr id="tr_000013">
                      <td rowspan="1" colspan="1" id="td_000056">
                        <p id="p_000264">
                          <code xml:space="preserve" id="code_000340" smilref="Programming_Robots_with_ROS00004.smil#code_000340">string</code>
                        </p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000057">
                        <p id="p_000265" smilref="Programming_Robots_with_ROS00004.smil#p_000265">ASCII string</p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000058">
                        <p id="p_000266">
                          <code xml:space="preserve" id="code_000341" smilref="Programming_Robots_with_ROS00004.smil#code_000341">std::string</code>
                        </p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000059">
                        <p id="p_000267">
                          <code xml:space="preserve" id="code_000342" smilref="Programming_Robots_with_ROS00004.smil#code_000342">string</code>
                        </p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000060">
                        <p id="p_000268" smilref="Programming_Robots_with_ROS00004.smil#p_000268">ROS does not support Unicode strings; use a UTF-8 encoding</p>
                      </td>
                    </tr>
                    <tr id="tr_000014">
                      <td rowspan="1" colspan="1" id="td_000061">
                        <p id="p_000269">
                          <code xml:space="preserve" id="code_000343" smilref="Programming_Robots_with_ROS00004.smil#code_000343">time</code>
                        </p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000062">
                        <p id="p_000270">
                          <code xml:space="preserve" id="code_000344" smilref="Programming_Robots_with_ROS00004.smil#code_000344">secs</code>
                          <span class="text" id="span_000798" smilref="Programming_Robots_with_ROS00004.smil#span_000798">/nsecs unsigned 32-bit ints</span>
                        </p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000063">
                        <p id="p_000271">
                          <code xml:space="preserve" id="code_000345" smilref="Programming_Robots_with_ROS00004.smil#code_000345">ros::Time</code>
                        </p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000064">
                        <p id="p_000272">
                          <code xml:space="preserve" id="code_000346" smilref="Programming_Robots_with_ROS00004.smil#code_000346">rospy.Time</code>
                        </p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000065">
                        <p id="p_000273">
                          <code xml:space="preserve" id="code_000347" smilref="Programming_Robots_with_ROS00004.smil#code_000347">duration</code>
                        </p>
                      </td>
                    </tr>
                  </tbody>
                </table>
                <h1 id="h1_000064" smilref="Programming_Robots_with_ROS00004.smil#h1_000064">Warning</h1>
                <div data-type="warning" epub:type="warning" id="div_000013">
                  <p data-type="indexterm" data-primary="C++" data-secondary="native data types" id="ch03-idp18072624">
                    <span class="text" id="span_000799" smilref="Programming_Robots_with_ROS00004.smil#span_000799">C++ has more native data types than Python, which can lead to subtle problems when nodes written in C++ and Python exchange data. For example, the ROS</span>
                    <code xml:space="preserve" id="code_000348" smilref="Programming_Robots_with_ROS00004.smil#code_000348">UInt8</code>
                    <span class="text" id="span_000800" smilref="Programming_Robots_with_ROS00004.smil#span_000800">is represented as an 8-bit unsigned integer in C++ and will behave normally. However, in Python it is represented as an integer, which means you can set it negative, or to a value greater than 255. When this out-of-range value is subsequently published as a ROS message, it will be interpreted as an 8-bit unsigned value. This will often lead to an unpredictable value being received and a hard-to-find error. Be careful when using range-limited ROS types in Python.</span>
                  </p>
                </div>
                <p id="ch03-idp18080736" data-type="indexterm" data-startref="ix_3-topics-asciidoc7">
                  <span class="text" id="span_000801" smilref="Programming_Robots_with_ROS00004.smil#span_000801">These primitive types are used to build all of the messages used in ROS. These messages are contained in the</span>
                  <a href="http://wiki.ros.org/std_msgs?distro=indigo" external="true" id="a_000054">
                    <code xml:space="preserve" id="code_000349" smilref="Programming_Robots_with_ROS00004.smil#code_000349">std_msgs</code>
                    <span class="text" id="span_000802" smilref="Programming_Robots_with_ROS00004.smil#span_000802">package</span>
                  </a>
                  <span class="text" id="span_000803" smilref="Programming_Robots_with_ROS00004.smil#span_000803">and the</span>
                  <a href="http://wiki.ros.org/common_msgs?distro=indigo" external="true" id="a_000055">
                    <code xml:space="preserve" id="code_000350" smilref="Programming_Robots_with_ROS00004.smil#code_000350">common_msgs</code>
                    <span class="text" id="span_000804" smilref="Programming_Robots_with_ROS00004.smil#span_000804">package</span>
                  </a>
                  <span class="text" id="span_000805" smilref="Programming_Robots_with_ROS00004.smil#span_000805">. These message types are part of what gives ROS its power. Since (most) laser range-finder sensors publish</span>
                  <code xml:space="preserve" id="code_000351" smilref="Programming_Robots_with_ROS00004.smil#code_000351">sensor_msgs/LaserScan</code>
                  <span class="text" id="span_000806" smilref="Programming_Robots_with_ROS00004.smil#span_000806">messages, we can write control code for our robots without having to know the specific details of the laser range-finder hardware. Furthermore, most robots can publish their estimated locations in a standard way. Using standardized message types for laser scans and location estimates enables nodes can be written that provide navigation and mapping (among many other things) for a wide variety of robots.</span>
                </p>
                <p id="p_000274" smilref="Programming_Robots_with_ROS00004.smil#p_000274">However, there are times when the built-in message types are not enough, and we have to define our own messages. These messages are "first-class citizens" in ROS, and there is no distinction between the message types that are defined in the core of ROS and those you define yourself.</p>
                <section data-type="sect2" data-pdf-bookmark="Defining a New Message" id="section_000040">
                  <h1 id="h1_000065" smilref="Programming_Robots_with_ROS00004.smil#h1_000065">Defining a New Message</h1>
                  <div class="sect2" id="ch03-idp18082224">
                    <p data-type="indexterm" data-primary="catkin_make" data-secondary="for defining message types" id="ch03-idp18087488">
                      <span class="text" id="span_000807" smilref="Programming_Robots_with_ROS00004.smil#span_000807">ROS messages are defined by special message-definition files in the</span>
                      <em id="ch03-ix_3-topics-asciidoc9" smilref="Programming_Robots_with_ROS00004.smil#ch03-ix_3-topics-asciidoc9">msg</em>
                      <span class="text" id="span_000808" smilref="Programming_Robots_with_ROS00004.smil#span_000808">directory of a package. These files are then compiled into language-specific implementations that can be used in your code. This means that, even if you're using an interpreted language such as Python, you need to run</span>
                      <code xml:space="preserve" id="code_000352" smilref="Programming_Robots_with_ROS00004.smil#code_000352">catkin_make</code>
                      <span class="text" id="span_000809" smilref="Programming_Robots_with_ROS00004.smil#span_000809">if you're going to define your own message types. Otherwise, the language-specific implementation will not be generated, and Python will not be able to find your new message type. Furthermore, if you don't rerun</span>
                      <code id="ch03-ix_3-topics-asciidoc10" xml:space="preserve" smilref="Programming_Robots_with_ROS00004.smil#ch03-ix_3-topics-asciidoc10">catkin_make</code>
                      <span class="text" id="span_000810" smilref="Programming_Robots_with_ROS00004.smil#span_000810">after you change the message definition, Python will still be using the older version of the message type. Although this sounds like an extra layer of complexity, there is a good reason to do things this way: it allows us to define a message once and have it automatically available in all languages that ROS supports, without having to manually write the (extremely tedious) code that "deflates" and "inflates" messages as they come across the network.</span>
                    </p>
                    <p data-type="indexterm" data-primary="message definition files" id="ch03-idp18090352">
                      <span class="text" id="span_000811" smilref="Programming_Robots_with_ROS00004.smil#span_000811">Message-definition files are typically quite simple and short. Each line specifies a type and a field name. Types can be built-in ROS primitive types, message types from other packages, arrays of types (either primitive or from other packages, and either fixed or variable length), or the special</span>
                      <code xml:space="preserve" id="code_000353" smilref="Programming_Robots_with_ROS00004.smil#code_000353">Header</code>
                      <span class="text" id="span_000812" smilref="Programming_Robots_with_ROS00004.smil#span_000812">type.</span>
                    </p>
                    <h1 id="h1_000066" smilref="Programming_Robots_with_ROS00004.smil#h1_000066">Note</h1>
                    <div data-type="note" epub:type="note" id="div_000014">
                      <p id="p_000275">
                        <span class="text" id="span_000813" smilref="Programming_Robots_with_ROS00004.smil#span_000813">A message-definition file comprises a list of types that make up the message. These types can either be ones that are built into ROS, such as those defined in the</span>
                        <code xml:space="preserve" id="code_000354" smilref="Programming_Robots_with_ROS00004.smil#code_000354">std_msgs</code>
                        <span class="text" id="span_000814" smilref="Programming_Robots_with_ROS00004.smil#span_000814">package, or types that you have defined yourself.</span>
                      </p>
                    </div>
                    <p id="p_000276">
                      <span class="text" id="span_000815" smilref="Programming_Robots_with_ROS00004.smil#span_000815">As a concrete example, suppose we wanted to modify</span>
                      <a data-type="xref" href="#ch03-topic_publisher" external="false" id="a_000056" smilref="Programming_Robots_with_ROS00004.smil#a_000056">Example 3-1</a>
                      <span class="text" id="span_000816" smilref="Programming_Robots_with_ROS00004.smil#span_000816">to publish random complex numbers, instead of integers. A complex number has two parts, real and imaginary, both of which are floating-point numbers. The message-definition file for our new type, called</span>
                      <code xml:space="preserve" id="code_000355" smilref="Programming_Robots_with_ROS00004.smil#code_000355">Complex</code>
                      <span class="text" id="span_000817" smilref="Programming_Robots_with_ROS00004.smil#span_000817">, is shown in</span>
                      <a data-type="xref" href="#ch03-complex_message" external="false" id="a_000057" smilref="Programming_Robots_with_ROS00004.smil#a_000057">Example 3-3</a>
                      <span class="text" id="span_000818" smilref="Programming_Robots_with_ROS00004.smil#span_000818">.</span>
                    </p>
                    <h1 id="h1_000067" smilref="Programming_Robots_with_ROS00004.smil#h1_000067">Example 3-3. Complex.msg</h1>
                    <div id="ch03-complex_message" data-type="example">
                      <p id="p_000277">
                        <code class="preserve-whitespace" xml:space="preserve" id="code_000356" smilref="Programming_Robots_with_ROS00004.smil#code_000356">float32 real
float32 imaginary</code>
                      </p>
                    </div>
                    <p id="p_000278">
                      <span class="text" id="span_000819" smilref="Programming_Robots_with_ROS00004.smil#span_000819">The file</span>
                      <em id="em_000133" smilref="Programming_Robots_with_ROS00004.smil#em_000133">Complex.msg</em>
                      <span class="text" id="span_000820" smilref="Programming_Robots_with_ROS00004.smil#span_000820">is in the</span>
                      <em id="em_000134" smilref="Programming_Robots_with_ROS00004.smil#em_000134">msg</em>
                      <span class="text" id="span_000821" smilref="Programming_Robots_with_ROS00004.smil#span_000821">directory of the</span>
                      <code xml:space="preserve" id="code_000357" smilref="Programming_Robots_with_ROS00004.smil#code_000357">basics</code>
                      <span class="text" id="span_000822" smilref="Programming_Robots_with_ROS00004.smil#span_000822">package. It defines two values,</span>
                      <code xml:space="preserve" id="code_000358" smilref="Programming_Robots_with_ROS00004.smil#code_000358">real</code>
                      <span class="text" id="span_000823" smilref="Programming_Robots_with_ROS00004.smil#span_000823">and</span>
                      <code xml:space="preserve" id="code_000359" smilref="Programming_Robots_with_ROS00004.smil#code_000359">imaginary</code>
                      <span class="text" id="span_000824" smilref="Programming_Robots_with_ROS00004.smil#span_000824">, both with the same type (</span>
                      <code xml:space="preserve" id="code_000360" smilref="Programming_Robots_with_ROS00004.smil#code_000360">float32</code>
                      <span class="text" id="span_000825" smilref="Programming_Robots_with_ROS00004.smil#span_000825">).</span>
                      <note id="ch03-idp18101568-marker">
                        <noteref data-type="noteref" idref="#ch03-idp18101568" id="noteref_000009" smilref="Programming_Robots_with_ROS00004.smil#noteref_000009">2</noteref>
                      </note>
                    </p>
                    <p class="keep-together" id="p_000279">
                      <span class="text" id="span_000826" smilref="Programming_Robots_with_ROS00004.smil#span_000826">Once the message is defined, we need to run</span>
                      <code xml:space="preserve" id="code_000361" smilref="Programming_Robots_with_ROS00004.smil#code_000361">catkin_make</code>
                      <span class="text" id="span_000827" smilref="Programming_Robots_with_ROS00004.smil#span_000827">to generate the language-specific code that will let us use it. This code includes a definition of the type, and code to marshal and unmarshal it for transmission down a topic. This allows us</span>
                      <span class="keep-together" id="span_000828" smilref="Programming_Robots_with_ROS00004.smil#span_000828">to use the message in all of</span>
                      <span class="text" id="span_000829" smilref="Programming_Robots_with_ROS00004.smil#span_000829">the languages that ROS supports; nodes written in one language can subscribe to topics from nodes written in another. Moreover, it allows</span>
                      <span class="keep-together" id="span_000830" smilref="Programming_Robots_with_ROS00004.smil#span_000830">us to use messages to communicate</span>
                      <span class="text" id="span_000831" smilref="Programming_Robots_with_ROS00004.smil#span_000831">seamlessly between computers with different architectures.</span>
                    </p>
                    <p id="p_000280">
                      <span class="text" id="span_000832" smilref="Programming_Robots_with_ROS00004.smil#span_000832">To get ROS to generate the language-specific message code, we need to make sure that we tell the build system about the new message definitions. We can do this by adding these lines to our</span>
                      <em id="em_000135" smilref="Programming_Robots_with_ROS00004.smil#em_000135">package.xml</em>
                      <span class="text" id="span_000833" smilref="Programming_Robots_with_ROS00004.smil#span_000833">file:</span>
                    </p>
                    <p id="p_000281">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000362" smilref="Programming_Robots_with_ROS00004.smil#code_000362">&lt;build_depend&gt;message_generation&lt;/build_depend&gt;
&lt;run_depend&gt;message_runtime&lt;/run_depend&gt;</code>
                    </p>
                    <p id="p_000282">
                      <span class="text" id="span_000834" smilref="Programming_Robots_with_ROS00004.smil#span_000834">Next, we need to make a few changes to the</span>
                      <em id="em_000136" smilref="Programming_Robots_with_ROS00004.smil#em_000136">CMakeLists.txt</em>
                      <span class="text" id="span_000835" smilref="Programming_Robots_with_ROS00004.smil#span_000835">file. First, we need to add</span>
                      <code xml:space="preserve" id="code_000363" smilref="Programming_Robots_with_ROS00004.smil#code_000363">message_generation</code>
                      <span class="text" id="span_000836" smilref="Programming_Robots_with_ROS00004.smil#span_000836">to the end of the</span>
                      <code xml:space="preserve" id="code_000364" smilref="Programming_Robots_with_ROS00004.smil#code_000364">find_package()</code>
                      <span class="text" id="span_000837" smilref="Programming_Robots_with_ROS00004.smil#span_000837">call, so that</span>
                      <code xml:space="preserve" id="code_000365" smilref="Programming_Robots_with_ROS00004.smil#code_000365">catkin</code>
                      <span class="text" id="span_000838" smilref="Programming_Robots_with_ROS00004.smil#span_000838">knows to look for the</span>
                      <code xml:space="preserve" id="code_000366" smilref="Programming_Robots_with_ROS00004.smil#code_000366">message_generation</code>
                      <span class="text" id="span_000839" smilref="Programming_Robots_with_ROS00004.smil#span_000839">package:</span>
                    </p>
                    <p id="p_000283">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000367" smilref="Programming_Robots_with_ROS00004.smil#code_000367">find_package(catkin REQUIRED COMPONENTS
   roscpp
   rospy
   std_msgs
   message_generation   # Add message_generation here, after the other packages
)</code>
                    </p>
                    <p id="p_000284">
                      <span class="text" id="span_000840" smilref="Programming_Robots_with_ROS00004.smil#span_000840">Then we need to tell</span>
                      <code xml:space="preserve" id="code_000368" smilref="Programming_Robots_with_ROS00004.smil#code_000368">catkin</code>
                      <span class="text" id="span_000841" smilref="Programming_Robots_with_ROS00004.smil#span_000841">that we're going to use messages at runtime, by adding</span>
                      <code xml:space="preserve" id="code_000369" smilref="Programming_Robots_with_ROS00004.smil#code_000369">message_runtime</code>
                      <span class="text" id="span_000842" smilref="Programming_Robots_with_ROS00004.smil#span_000842">to the</span>
                      <code xml:space="preserve" id="code_000370" smilref="Programming_Robots_with_ROS00004.smil#code_000370">catkin_package()</code>
                      <span class="text" id="span_000843" smilref="Programming_Robots_with_ROS00004.smil#span_000843">call:</span>
                    </p>
                    <p id="p_000285">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000371" smilref="Programming_Robots_with_ROS00004.smil#code_000371">catkin_package(
  CATKIN_DEPENDS message_runtime   # This will not be the only thing here
)</code>
                    </p>
                    <p id="p_000286">
                      <span class="text" id="span_000844" smilref="Programming_Robots_with_ROS00004.smil#span_000844">We tell</span>
                      <code xml:space="preserve" id="code_000372" smilref="Programming_Robots_with_ROS00004.smil#code_000372">catkin</code>
                      <span class="text" id="span_000845" smilref="Programming_Robots_with_ROS00004.smil#span_000845">which message files we want to compile by adding them to the</span>
                      <code xml:space="preserve" id="code_000373" smilref="Programming_Robots_with_ROS00004.smil#code_000373">add_message_files()</code>
                      <span class="text" id="span_000846" smilref="Programming_Robots_with_ROS00004.smil#span_000846">call:</span>
                    </p>
                    <p id="p_000287">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000374" smilref="Programming_Robots_with_ROS00004.smil#code_000374">add_message_files(
  FILES
  Complex.msg
)</code>
                    </p>
                    <p id="p_000288">
                      <span class="text" id="span_000847" smilref="Programming_Robots_with_ROS00004.smil#span_000847">Finally, still in the</span>
                      <em id="em_000137" smilref="Programming_Robots_with_ROS00004.smil#em_000137">CMakeLists.txt</em>
                      <span class="text" id="span_000848" smilref="Programming_Robots_with_ROS00004.smil#span_000848">file, we need to make sure the</span>
                      <code xml:space="preserve" id="code_000375" smilref="Programming_Robots_with_ROS00004.smil#code_000375">generate_messages()</code>
                      <span class="text" id="span_000849" smilref="Programming_Robots_with_ROS00004.smil#span_000849">call is uncommented and contains all the dependencies that are needed by our messages:</span>
                    </p>
                    <p id="p_000289">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000376" smilref="Programming_Robots_with_ROS00004.smil#code_000376">generate_messages(
  DEPENDENCIES
  std_msgs
)</code>
                    </p>
                    <p id="p_000290">
                      <span class="text" id="span_000850" smilref="Programming_Robots_with_ROS00004.smil#span_000850">Now that we've told</span>
                      <code xml:space="preserve" id="code_000377" smilref="Programming_Robots_with_ROS00004.smil#code_000377">catkin</code>
                      <span class="text" id="span_000851" smilref="Programming_Robots_with_ROS00004.smil#span_000851">everything that it needs to know about our messages, we're ready to compile them. Go to the root of your</span>
                      <code xml:space="preserve" id="code_000378" smilref="Programming_Robots_with_ROS00004.smil#code_000378">catkin</code>
                      <span class="text" id="span_000852" smilref="Programming_Robots_with_ROS00004.smil#span_000852">workspace, and run</span>
                      <code xml:space="preserve" id="code_000379" smilref="Programming_Robots_with_ROS00004.smil#code_000379">catkin_make</code>
                      <span class="text" id="span_000853" smilref="Programming_Robots_with_ROS00004.smil#span_000853">. This will generate a message type with the same name as the message-definition file, with the</span>
                      <em id="em_000138" smilref="Programming_Robots_with_ROS00004.smil#em_000138">.msg</em>
                      <span class="text" id="span_000854" smilref="Programming_Robots_with_ROS00004.smil#span_000854">extension removed. By convention, ROS types are capitalized and contain no underscores.</span>
                    </p>
                    <p id="p_000291">
                      <span class="text" id="span_000855" smilref="Programming_Robots_with_ROS00004.smil#span_000855">You'll probably never need to see the details of the Python class that</span>
                      <code xml:space="preserve" id="code_000380" smilref="Programming_Robots_with_ROS00004.smil#code_000380">catkin_make</code>
                      <span class="text" id="span_000856" smilref="Programming_Robots_with_ROS00004.smil#span_000856">generates in order to use it in your ROS code. However, for the sake of completeness,</span>
                      <a data-type="xref" href="#ch03-complex_generated" external="false" id="a_000058" smilref="Programming_Robots_with_ROS00004.smil#a_000058">Example 3-4</a>
                      <span class="text" id="span_000857" smilref="Programming_Robots_with_ROS00004.smil#span_000857">shows (parts of) the class generated from our complex number example.</span>
                    </p>
                    <h1 id="h1_000068" smilref="Programming_Robots_with_ROS00004.smil#h1_000068">Example 3-4. Part of the Python message definition generated by catkin_make for our complex number example</h1>
                    <div id="ch03-complex_generated" data-type="example">
                      <p id="p_000292">
                        <code class="preserve-whitespace" xml:space="preserve" id="code_000381" smilref="Programming_Robots_with_ROS00004.smil#code_000381">"""autogenerated by genpy from basics/Complex.msg. Do not edit."""
import sys
python3 = True if sys.hexversion &gt; 0x03000000 else False
import genpy
import struct


class Complex(genpy.Message):
  _md5sum = "54da470dccf15d60bd273ab751e1c0a1"
  _type = "basics/Complex"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 real
float32 imaginary

"""
  __slots__ = ['real','imaginary']
  _slot_types = ['float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       real,imaginary

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Complex, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.real is None:
        self.real = 0.
      if self.imaginary is None:
        self.imaginary = 0.
    else:
      self.real = 0.
      self.imaginary = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    ...

  def deserialize(self, str):
    ...

  def serialize_numpy(self, buff, numpy):
    ...

  def deserialize_numpy(self, str, numpy):
    ...</code>
                      </p>
                    </div>
                    <p id="p_000293">
                      <span class="text" id="span_000858" smilref="Programming_Robots_with_ROS00004.smil#span_000858">The important thing to notice here is that you can provide parameters to the constructor to initialize the values in the class. You can do this in two ways. You can give values for each of the elements of the class (</span>
                      <code xml:space="preserve" id="code_000382" smilref="Programming_Robots_with_ROS00004.smil#code_000382">real</code>
                      <span class="text" id="span_000859" smilref="Programming_Robots_with_ROS00004.smil#span_000859">and</span>
                      <code xml:space="preserve" id="code_000383" smilref="Programming_Robots_with_ROS00004.smil#code_000383">imaginary</code>
                      <span class="text" id="span_000860" smilref="Programming_Robots_with_ROS00004.smil#span_000860">in this example), in the order that they're listed in the message-definition file. In this case, you need to give values for</span>
                      <em id="em_000139" smilref="Programming_Robots_with_ROS00004.smil#em_000139">all</em>
                      <span class="text" id="span_000861" smilref="Programming_Robots_with_ROS00004.smil#span_000861">of the fields. Alternatively, you can use keyword arguments to give values to some of the fields, like this:</span>
                    </p>
                    <p id="p_000294">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000384" smilref="Programming_Robots_with_ROS00004.smil#code_000384">c = Complex(real=2.3)</code>
                    </p>
                    <p id="p_000295" smilref="Programming_Robots_with_ROS00004.smil#p_000295">and have default values be assigned to the remaining fields.</p>
                    <h1 id="h1_000069" smilref="Programming_Robots_with_ROS00004.smil#h1_000069">Warning</h1>
                    <div data-type="warning" epub:type="warning" id="div_000015">
                      <p data-type="indexterm" data-primary="C++" data-secondary="and checksum in generated message definitions" id="ch03-idp18326320" data-startref="ix_3-topics-asciidoc9">
                        <span class="text" id="span_000862" smilref="Programming_Robots_with_ROS00004.smil#span_000862">Generated message definitions contain an MD5 checksum. This is used by ROS to make sure that it's using the correct version of</span>
                        <span class="keep-together" id="ch03-idp18323264" smilref="Programming_Robots_with_ROS00004.smil#ch03-idp18323264">a message. If you modify</span>
                        <span class="text" id="span_000863" smilref="Programming_Robots_with_ROS00004.smil#span_000863">your message-definition files and run</span>
                        <span class="keep-together" id="span_000864">
                          <code xml:space="preserve" id="code_000385" smilref="Programming_Robots_with_ROS00004.smil#code_000385">catkin_make</code>
                        </span>
                        <span class="text" id="span_000865" smilref="Programming_Robots_with_ROS00004.smil#span_000865">over them, you might also have to run</span>
                        <code xml:space="preserve" id="code_000386" smilref="Programming_Robots_with_ROS00004.smil#code_000386">catkin_make</code>
                        <span class="text" id="span_000866" smilref="Programming_Robots_with_ROS00004.smil#span_000866">over any code that uses these messages, to make sure that the checksums match up. This is generally more of a problem with C++ than with Python, since the checksums are compiled into the executables. However, it can be an issue with Python with compiled byte code (</span>
                        <em id="em_000140" smilref="Programming_Robots_with_ROS00004.smil#em_000140">.pyc</em>
                        <span class="text" id="span_000867" smilref="Programming_Robots_with_ROS00004.smil#span_000867">files).</span>
                      </p>
                    </div>
                  </div>
                </section>
                <section data-type="sect2" data-pdf-bookmark="Using Your New Message" id="section_000041">
                  <h1 id="h1_000070" smilref="Programming_Robots_with_ROS00004.smil#h1_000070">Using Your New Message</h1>
                  <div class="sect2" id="ch03-idp18083168">
                    <p id="ch03-idp18331408" data-type="indexterm" data-primary="message" data-secondary="using new">
                      <span class="text" id="span_000868" smilref="Programming_Robots_with_ROS00004.smil#span_000868">Once your message is defined and compiled, you can use it just like any other message in ROS, as you can see in</span>
                      <a data-type="xref" href="#ch03-message_publisher" external="false" id="a_000059" smilref="Programming_Robots_with_ROS00004.smil#a_000059">Example 3-5</a>
                      <span class="text" id="span_000869" smilref="Programming_Robots_with_ROS00004.smil#span_000869">.</span>
                    </p>
                    <h1 id="h1_000071" smilref="Programming_Robots_with_ROS00004.smil#h1_000071">Example 3-5. message_publisher.py</h1>
                    <div id="ch03-message_publisher" data-type="example">
                      <p id="p_000296">
                        <code class="preserve-whitespace" xml:space="preserve" id="code_000387" smilref="Programming_Robots_with_ROS00004.smil#code_000387">#!/usr/bin/env python

import rospy

from basics.msg import Complex

from random import random


rospy.init_node('message_publisher')

pub = rospy.Publisher('complex', Complex)

rate = rospy.Rate(2)

while not rospy.is_shutdown():
    msg = Complex()
    msg.real = random()
    msg.imaginary = random()

    pub.publish(msg)
    rate.sleep()</code>
                      </p>
                    </div>
                    <p id="p_000297" smilref="Programming_Robots_with_ROS00004.smil#p_000297">Importing your new message type works just like including a standard ROS message type and allows you to create a message instance just like any other Python class. Once you've created the instance, you can fill in the values for the individual fields. Any fields that are not explicitly assigned a value should be considered to have an undefined value.</p>
                    <p class="keep-together" id="p_000298">
                      <span class="text" id="span_000870" smilref="Programming_Robots_with_ROS00004.smil#span_000870">Subscribing to and using your new message is similarly easy, as</span>
                      <a data-type="xref" href="#ch03-message_subscriber" external="false" id="a_000060" smilref="Programming_Robots_with_ROS00004.smil#a_000060">Example 3-6</a>
                      <span class="text" id="span_000871" smilref="Programming_Robots_with_ROS00004.smil#span_000871">demonstrates.</span>
                    </p>
                    <h1 id="h1_000072" smilref="Programming_Robots_with_ROS00004.smil#h1_000072">Example 3-6. message_subscriber.py</h1>
                    <div id="ch03-message_subscriber" data-type="example">
                      <p id="p_000299">
                        <code class="preserve-whitespace" xml:space="preserve" id="code_000388" smilref="Programming_Robots_with_ROS00004.smil#code_000388">#!/usr/bin/env python


import rospy
from basics.msg import Complex


def callback(msg):
    print 'Real:', msg.real
    print 'Imaginary:', msg.imaginary
    print


rospy.init_node('message_subscriber')

sub = rospy.Subscriber('complex', Complex, callback)

rospy.spin()</code>
                      </p>
                    </div>
                    <p id="p_000300">
                      <span class="text" id="span_000872" smilref="Programming_Robots_with_ROS00004.smil#span_000872">The</span>
                      <code xml:space="preserve" id="code_000389" smilref="Programming_Robots_with_ROS00004.smil#code_000389">rosmsg</code>
                      <span class="text" id="span_000873" smilref="Programming_Robots_with_ROS00004.smil#span_000873">command lets you look at the contents of a message type:</span>
                    </p>
                    <p id="p_000301">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000390"><span class="text" id="span_000874" smilref="Programming_Robots_with_ROS00004.smil#span_000874">
user@hostname$ </span><strong id="strong_000048" smilref="Programming_Robots_with_ROS00004.smil#strong_000048">rosmsg show Complex</strong><span class="text" id="span_000875" smilref="Programming_Robots_with_ROS00004.smil#span_000875">
[basics/Complex]:
float32 real
float32 imaginary
</span></code>
                    </p>
                    <p id="p_000302">
                      <span class="text" id="span_000876" smilref="Programming_Robots_with_ROS00004.smil#span_000876">If a message contains other messages, they are displayed recursively by</span>
                      <code xml:space="preserve" id="code_000391" smilref="Programming_Robots_with_ROS00004.smil#code_000391">rosmsg</code>
                      <span class="text" id="span_000877" smilref="Programming_Robots_with_ROS00004.smil#span_000877">. For example,</span>
                      <code xml:space="preserve" id="code_000392" smilref="Programming_Robots_with_ROS00004.smil#code_000392">PointStamped</code>
                      <span class="text" id="span_000878" smilref="Programming_Robots_with_ROS00004.smil#span_000878">has a</span>
                      <code xml:space="preserve" id="code_000393" smilref="Programming_Robots_with_ROS00004.smil#code_000393">Header</code>
                      <span class="text" id="span_000879" smilref="Programming_Robots_with_ROS00004.smil#span_000879">and a</span>
                      <code xml:space="preserve" id="code_000394" smilref="Programming_Robots_with_ROS00004.smil#code_000394">Point</code>
                      <span class="text" id="span_000880" smilref="Programming_Robots_with_ROS00004.smil#span_000880">, each of which is a ROS type:</span>
                    </p>
                    <p id="p_000303">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000395"><span class="text" id="span_000881" smilref="Programming_Robots_with_ROS00004.smil#span_000881">
user@hostname$ </span><strong id="strong_000049" smilref="Programming_Robots_with_ROS00004.smil#strong_000049">rosmsg show PointStamped</strong><span class="text" id="span_000882" smilref="Programming_Robots_with_ROS00004.smil#span_000882">
[geometry_msgs/PointStamped]:
std_msgs/Header header
  uint32 seq
  time stamp
  string frame_id
geometry_msgs/Point point
  float64 x
  float64 y
  float64 z
</span></code>
                    </p>
                    <p id="p_000304">
                      <code xml:space="preserve" id="code_000396" smilref="Programming_Robots_with_ROS00004.smil#code_000396">rosmsg list</code>
                      <span class="text" id="span_000883" smilref="Programming_Robots_with_ROS00004.smil#span_000883">will show all of the messages available in ROS.</span>
                      <code xml:space="preserve" id="code_000397" smilref="Programming_Robots_with_ROS00004.smil#code_000397">rosmsg
packages</code>
                      <span class="text" id="span_000884" smilref="Programming_Robots_with_ROS00004.smil#span_000884">will list all of the packages that define messages. Finally,</span>
                      <code xml:space="preserve" id="code_000398" smilref="Programming_Robots_with_ROS00004.smil#code_000398">rosmsg package</code>
                      <span class="text" id="span_000885" smilref="Programming_Robots_with_ROS00004.smil#span_000885">will list the messages defined in a particular package:</span>
                    </p>
                    <p id="p_000305">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000399"><span class="text" id="span_000886" smilref="Programming_Robots_with_ROS00004.smil#span_000886">
user@hostname$ </span><strong id="strong_000050" smilref="Programming_Robots_with_ROS00004.smil#strong_000050">rosmsg package basics</strong><span class="text" id="span_000887" smilref="Programming_Robots_with_ROS00004.smil#span_000887">
basics/Complex

user@hostname$ </span><strong id="strong_000051" smilref="Programming_Robots_with_ROS00004.smil#strong_000051">rosmsg package sensor_msgs</strong><span class="text" id="span_000888" smilref="Programming_Robots_with_ROS00004.smil#span_000888">
sensor_msgs/CameraInfo
sensor_msgs/ChannelFloat32
sensor_msgs/CompressedImage
sensor_msgs/FluidPressure
sensor_msgs/Illuminance
sensor_msgs/Image
sensor_msgs/Imu
sensor_msgs/JointState
sensor_msgs/Joy
sensor_msgs/JoyFeedback
sensor_msgs/JoyFeedbackArray
sensor_msgs/LaserEcho
sensor_msgs/LaserScan
sensor_msgs/MagneticField
sensor_msgs/MultiEchoLaserScan
sensor_msgs/NavSatFix
sensor_msgs/NavSatStatus
sensor_msgs/PointCloud
sensor_msgs/PointCloud2
sensor_msgs/PointField
sensor_msgs/Range
sensor_msgs/RegionOfInterest
sensor_msgs/RelativeHumidity
sensor_msgs/Temperature
sensor_msgs/TimeReference
</span></code>
                    </p>
                  </div>
                </section>
                <section data-type="sect2" data-pdf-bookmark="When Should You Make a New Message Type?" id="section_000042">
                  <h1 id="h1_000073" smilref="Programming_Robots_with_ROS00004.smil#h1_000073">When Should You Make a New Message Type?</h1>
                  <div class="sect2" id="ch03-idp18330752">
                    <p id="ch03-idp18439840" data-type="indexterm" data-startref="ix_3-topics-asciidoc5" data-primary="message types" data-secondary="determining appropriateness of new">
                      <span class="text" id="span_000889" smilref="Programming_Robots_with_ROS00004.smil#span_000889">The short answer is, "Only when you absolutely have to." ROS already has a rich set of message types, and you should use one of these if you can. Part of the power of ROS is the ability to combine nodes together to form complex systems, and this can only happen if nodes publish and receive messages of the same type. So, before you go and create a new message type, you should use</span>
                      <code id="ch03-idp18435632" xml:space="preserve" smilref="Programming_Robots_with_ROS00004.smil#ch03-idp18435632">rosmsg</code>
                      <span class="text" id="span_000890" smilref="Programming_Robots_with_ROS00004.smil#span_000890">to see if there is already something there that you can use instead. ROS messages define the public interface between nodes. Nodes that use the same messages can easily be combined into a running system. However, if every node uses a different message for similar data, then you'll have to do a lot of (pointless) work translating between these messages in order to get something working. You should prefer existing message types whenever you can, since this will make your code fit in more seamlessly with the existing ROS code base. Similarly, you should use SI units (meters, kilograms, seconds, etc.) whenever possible, since this is what the rest of ROS uses.</span>
                    </p>
                  </div>
                </section>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Mixing Publishers and Subscribers" id="section_000043">
              <h1 id="h1_000074" smilref="Programming_Robots_with_ROS00004.smil#h1_000074">Mixing Publishers and Subscribers</h1>
              <div class="sect1" id="ch03-idp18040688">
                <p id="ch03-idp18442816" data-type="indexterm" data-primary="publish/subscribe communication mechanism" data-secondary="mixing publishers and subscribers">
                  <span class="text" id="span_000891" smilref="Programming_Robots_with_ROS00004.smil#span_000891">The previous examples showed nodes that have a single publisher and a single subscriber, but there's no reason why a node can't be both a publisher and a subscriber or have multiple publications and subscriptions. In fact, one of the most common things nodes in ROS do is to transform data by performing computations on it. For example, a node might subscribe to a topic containing camera images, identify faces in those images, and publish the positions of those faces in another topic.</span>
                  <a data-type="xref" href="#ch03-doubler" external="false" id="a_000061" smilref="Programming_Robots_with_ROS00004.smil#a_000061">Example 3-7</a>
                  <span class="text" id="span_000892" smilref="Programming_Robots_with_ROS00004.smil#span_000892">shows an example of a node like this.</span>
                </p>
                <h1 id="h1_000075" smilref="Programming_Robots_with_ROS00004.smil#h1_000075">Example 3-7. doubler.py</h1>
                <div id="ch03-doubler" data-type="example">
                  <p id="p_000306">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_000400" smilref="Programming_Robots_with_ROS00004.smil#code_000400">#!/usr/bin/env python

import rospy

from std_msgs.msg import Int32


rospy.init_node('doubler')


def callback(msg):
    doubled = Int32()
    doubled.data = msg.data * 2

    pub.publish(doubled)


sub = rospy.Subscriber('number', Int32, callback)
pub = rospy.Publisher('doubled', Int32)

rospy.spin()</code>
                  </p>
                </div>
                <p id="p_000307" smilref="Programming_Robots_with_ROS00004.smil#p_000307">The subscriber and publisher are set up as before, but now we're going to publish data in the callback, rather than periodically. The idea behind this is that we only want to publish when we have new data coming in, since the purpose of this node is to transform data (in this case, by doubling the number that comes in on the subscribed topic).</p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Summary" id="section_000044">
              <h1 id="h1_000076" smilref="Programming_Robots_with_ROS00004.smil#h1_000076">Summary</h1>
              <div class="sect1" id="ch03-idp18451776">
                <p id="p_000308">
                  <span class="text" id="span_000893" smilref="Programming_Robots_with_ROS00004.smil#span_000893">In this chapter, we covered</span>
                  <em id="em_000141" smilref="Programming_Robots_with_ROS00004.smil#em_000141">topics</em>
                  <span class="text" id="span_000894" smilref="Programming_Robots_with_ROS00004.smil#span_000894">, the fundamental ROS communication mechanism. You should now know how to advertise a topic and publish messages over it, how to subscribe to a topic and receive messages from it, how to define your own messages, and how to write simple nodes that interact with topics. You should also know how to write nodes that transform data that comes in on one topic and republish it on another. This sort of node is the backbone in many ROS systems, performing computations to transform one sort of data into another, and we'll be seeing examples of this throughout the book.</span>
                </p>
                <p id="p_000309">
                  <span class="text" id="span_000895" smilref="Programming_Robots_with_ROS00004.smil#span_000895">Topics are probably the communication mechanism that you will use most often in ROS. Whenever you have a node that generates data that other nodes can use, you should consider using a topic to publish that data. Whenever you need to transform data from one form to another, a node like the one shown in</span>
                  <a data-type="xref" href="#ch03-doubler" external="false" id="a_000062" smilref="Programming_Robots_with_ROS00004.smil#a_000062">Example 3-7</a>
                  <span class="text" id="span_000896" smilref="Programming_Robots_with_ROS00004.smil#span_000896">is often a good choice.</span>
                </p>
                <p id="ch03-idp18755328" data-type="indexterm" data-startref="ix_3-topics-asciidoc0">
                  <span class="text" id="span_000897" smilref="Programming_Robots_with_ROS00004.smil#span_000897">While we covered most of what you can do with topics in this chapter, we didn't cover everything. For further details, you should look at</span>
                  <a href="http://wiki.ros.org/Topics?distro=indigo" external="true" id="a_000063" smilref="Programming_Robots_with_ROS00004.smil#a_000063">the topic's API documentation</a>
                  <span class="text" id="span_000898" smilref="Programming_Robots_with_ROS00004.smil#span_000898">.</span>
                </p>
                <p id="p_000310">
                  <span class="text" id="span_000899" smilref="Programming_Robots_with_ROS00004.smil#span_000899">Now that you've got the hang of topics, it's time to talk about the second main communication mechanism in ROS:</span>
                  <em id="em_000142" smilref="Programming_Robots_with_ROS00004.smil#em_000142">services</em>
                  <span class="text" id="span_000900" smilref="Programming_Robots_with_ROS00004.smil#span_000900">.</span>
                </p>
              </div>
            </section>
            <div data-type="footnotes" id="div_000016">
              <note id="ch03-idp17850080">
                <p data-type="footnote" id="p_000311">
                  <noteref idref="#ch03-idp17850080-marker" id="noteref_000010" smilref="Programming_Robots_with_ROS00004.smil#noteref_000010">1</noteref>
                  <span class="text" id="span_000901" smilref="Programming_Robots_with_ROS00004.smil#span_000901">Don't worry if you don't know what a TCP port is. ROS will generally take care of this for you without you having to think about it.</span>
                </p>
              </note>
              <note id="ch03-idp18101568">
                <p data-type="footnote" id="p_000312">
                  <noteref idref="#ch03-idp18101568-marker" id="noteref_000011" smilref="Programming_Robots_with_ROS00004.smil#noteref_000011">2</noteref>
                  <span class="text" id="span_000902" smilref="Programming_Robots_with_ROS00004.smil#span_000902">The two primitive floating-point types,</span>
                  <code xml:space="preserve" id="code_000401" smilref="Programming_Robots_with_ROS00004.smil#code_000401">float32</code>
                  <span class="text" id="span_000903" smilref="Programming_Robots_with_ROS00004.smil#span_000903">and</span>
                  <code xml:space="preserve" id="code_000402" smilref="Programming_Robots_with_ROS00004.smil#code_000402">float64</code>
                  <span class="text" id="span_000904" smilref="Programming_Robots_with_ROS00004.smil#span_000904">, both map to the Python</span>
                  <code xml:space="preserve" id="code_000403" smilref="Programming_Robots_with_ROS00004.smil#code_000403">float</code>
                  <span class="text" id="span_000905" smilref="Programming_Robots_with_ROS00004.smil#span_000905">type.</span>
                </p>
              </note>
            </div>
          </div>
        </section>
      </level1>
      <level1 id="ch04">
        <section xmlns:epub="http://www.idpf.org/2007/ops" data-type="chapter" epub:type="chapter" data-pdf-bookmark="Chapter 4. Services" id="section_000045">
          <h1 id="h1_000077" smilref="Programming_Robots_with_ROS00004.smil#h1_000077">Chapter 4. Services</h1>
          <div class="chapter" id="ch04-services">
            <p id="ch04-ix_4-services-asciidoc0" data-type="indexterm" data-primary="services" smilref="Programming_Robots_with_ROS00004.smil#ch04-ix_4-services-asciidoc0">Services are another way to pass data between nodes in ROS. Services are just synchronous remote procedure calls; they allow one node to call a function that executes in another node. We define the inputs and outputs of this function similarly to the way we define new message types. The server (which provides the service) specifies a callback to deal with the service request, and advertises the service. The client (which calls the service) then accesses this service through a local proxy.</p>
            <p id="p_000313" smilref="Programming_Robots_with_ROS00004.smil#p_000313">Service calls are well suited to things that you only need to do occasionally and that take a bounded amount of time to complete. Common computations, which you might want to distribute to other computers, are a good example. Discrete actions that the robot might do, such as turning on a sensor or taking a high-resolution picture with a camera, are also good candidates for a service-call implementation.</p>
            <p id="p_000314" smilref="Programming_Robots_with_ROS00004.smil#p_000314">Although there are several services already defined by packages in ROS, we'll start by looking at how to define and implement our own service, since this gives some insight into the underlying mechanisms of service calls. As a concrete example in this chapter, we're going to show how to create a service that counts the number of words in a string.</p>
            <section data-type="sect1" data-pdf-bookmark="Defining a Service" id="section_000046">
              <h1 id="h1_000078" smilref="Programming_Robots_with_ROS00004.smil#h1_000078">Defining a Service</h1>
              <div class="sect1" id="ch04-idp18762000">
                <p data-type="indexterm" data-primary="service definition file" id="ch04-idp18764992" data-secondary="defining">
                  <span class="text" id="span_000906" smilref="Programming_Robots_with_ROS00004.smil#span_000906">The first step in creating a new service is to define the service call inputs and outputs. This is done in a</span>
                  <em id="em_000143" smilref="Programming_Robots_with_ROS00004.smil#em_000143">service-definition file</em>
                  <span class="text" id="span_000907" smilref="Programming_Robots_with_ROS00004.smil#span_000907">, which has a similar structure to the message-definition files we've already seen. However, since a service call has both inputs and outputs, it's a bit more complicated than a message.</span>
                </p>
                <p class="keep-together" id="p_000315">
                  <span class="text" id="span_000908" smilref="Programming_Robots_with_ROS00004.smil#span_000908">Our example service counts the number of words in a string. This means that the input to the service call should be a</span>
                  <code xml:space="preserve" id="code_000404" smilref="Programming_Robots_with_ROS00004.smil#code_000404">string</code>
                  <span class="text" id="span_000909" smilref="Programming_Robots_with_ROS00004.smil#span_000909">and the output should be an integer. Although we're using messages from</span>
                  <code xml:space="preserve" id="code_000405" smilref="Programming_Robots_with_ROS00004.smil#code_000405">std_msg</code>
                  <span class="text" id="span_000910" smilref="Programming_Robots_with_ROS00004.smil#span_000910">s here, you can use</span>
                  <em id="em_000144" smilref="Programming_Robots_with_ROS00004.smil#em_000144">any</em>
                  <span class="text" id="span_000911" smilref="Programming_Robots_with_ROS00004.smil#span_000911">ROS message, even ones that you've defined yourself.</span>
                  <a data-type="xref" href="#ch04-word_count_service" external="false" id="a_000064" smilref="Programming_Robots_with_ROS00004.smil#a_000064">Example 4-1</a>
                  <span class="text" id="span_000912" smilref="Programming_Robots_with_ROS00004.smil#span_000912">shows a service definition for this.</span>
                </p>
                <h1 id="h1_000079" smilref="Programming_Robots_with_ROS00004.smil#h1_000079">Example 4-1. WordCount.srv</h1>
                <div id="ch04-word_count_service" data-type="example">
                  <p id="p_000316">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_000406" smilref="Programming_Robots_with_ROS00004.smil#code_000406">string words
---
uint32 count</code>
                  </p>
                </div>
                <h1 id="h1_000080" smilref="Programming_Robots_with_ROS00004.smil#h1_000080">Note</h1>
                <div data-type="note" epub:type="note" id="div_000017">
                  <p id="p_000317">
                    <span class="text" id="span_000913" smilref="Programming_Robots_with_ROS00004.smil#span_000913">Like message-definition files, service-definition files are just lists of message types. These can be built in, such as those defined in the</span>
                    <code xml:space="preserve" id="code_000407" smilref="Programming_Robots_with_ROS00004.smil#code_000407">std_msgs</code>
                    <span class="text" id="span_000914" smilref="Programming_Robots_with_ROS00004.smil#span_000914">package, or they can be ones you have defined yourself.</span>
                  </p>
                </div>
                <p id="p_000318">
                  <span class="text" id="span_000915" smilref="Programming_Robots_with_ROS00004.smil#span_000915">The inputs to the service call come first. In this case, we're just going to use the ROS built-in</span>
                  <code xml:space="preserve" id="code_000408" smilref="Programming_Robots_with_ROS00004.smil#code_000408">string</code>
                  <span class="text" id="span_000916" smilref="Programming_Robots_with_ROS00004.smil#span_000916">type. Three dashes (</span>
                  <code xml:space="preserve" id="code_000409" smilref="Programming_Robots_with_ROS00004.smil#code_000409">---</code>
                  <span class="text" id="span_000917" smilref="Programming_Robots_with_ROS00004.smil#span_000917">) mark the end of the inputs and the start of the output definition. We're going to use a 32-bit unsigned integer (</span>
                  <code xml:space="preserve" id="code_000410" smilref="Programming_Robots_with_ROS00004.smil#code_000410">uint32</code>
                  <span class="text" id="span_000918" smilref="Programming_Robots_with_ROS00004.smil#span_000918">) for our output. The file holding this definition is called</span>
                  <em id="em_000145" smilref="Programming_Robots_with_ROS00004.smil#em_000145">WordCount.srv</em>
                  <span class="text" id="span_000919" smilref="Programming_Robots_with_ROS00004.smil#span_000919">and is traditionally in a directory called</span>
                  <em id="em_000146" smilref="Programming_Robots_with_ROS00004.smil#em_000146">srv</em>
                  <span class="text" id="span_000920" smilref="Programming_Robots_with_ROS00004.smil#span_000920">in the main package directory (although this is not strictly required).</span>
                </p>
                <p data-type="indexterm" data-primary="catkin_make" data-secondary="for defining services" id="ch04-idp18776688">
                  <span class="text" id="span_000921" smilref="Programming_Robots_with_ROS00004.smil#span_000921">Once we've got the definition file in the right place, we need to run</span>
                  <code xml:space="preserve" id="code_000411" smilref="Programming_Robots_with_ROS00004.smil#code_000411">catkin_make</code>
                  <span class="text" id="span_000922" smilref="Programming_Robots_with_ROS00004.smil#span_000922">to create the code and class definitions that we will actually use when interacting with the service, just like we did for new messages. To get</span>
                  <code xml:space="preserve" id="code_000412" smilref="Programming_Robots_with_ROS00004.smil#code_000412">catkin_make</code>
                  <span class="text" id="span_000923" smilref="Programming_Robots_with_ROS00004.smil#span_000923">to generate this code, we need to make sure that the</span>
                  <code xml:space="preserve" id="code_000413" smilref="Programming_Robots_with_ROS00004.smil#code_000413">find_package()</code>
                  <span class="text" id="span_000924" smilref="Programming_Robots_with_ROS00004.smil#span_000924">call in</span>
                  <em id="em_000147" smilref="Programming_Robots_with_ROS00004.smil#em_000147">CMakeLists.txt</em>
                  <span class="text" id="span_000925" smilref="Programming_Robots_with_ROS00004.smil#span_000925">contains</span>
                  <code xml:space="preserve" id="code_000414" smilref="Programming_Robots_with_ROS00004.smil#code_000414">message_generation</code>
                  <span class="text" id="span_000926" smilref="Programming_Robots_with_ROS00004.smil#span_000926">, just like we did for new messages:</span>
                </p>
                <p id="p_000319">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000415" smilref="Programming_Robots_with_ROS00004.smil#code_000415">find_package(catkin REQUIRED COMPONENTS
   roscpp
   rospy
   message_generation   # Add message_generation here, after the other packages
)</code>
                </p>
                <p id="p_000320">
                  <span class="text" id="span_000927" smilref="Programming_Robots_with_ROS00004.smil#span_000927">We also have to make an addition to the</span>
                  <em id="em_000148" smilref="Programming_Robots_with_ROS00004.smil#em_000148">package.xml</em>
                  <span class="text" id="span_000928" smilref="Programming_Robots_with_ROS00004.smil#span_000928">file to reflect the dependencies on both</span>
                  <code xml:space="preserve" id="code_000416" smilref="Programming_Robots_with_ROS00004.smil#code_000416">rospy</code>
                  <span class="text" id="span_000929" smilref="Programming_Robots_with_ROS00004.smil#span_000929">and the message system. This means we need a build dependency on</span>
                  <code xml:space="preserve" id="code_000417" smilref="Programming_Robots_with_ROS00004.smil#code_000417">message_generation</code>
                  <span class="text" id="span_000930" smilref="Programming_Robots_with_ROS00004.smil#span_000930">and a runtime dependency on</span>
                  <code xml:space="preserve" id="code_000418" smilref="Programming_Robots_with_ROS00004.smil#code_000418">message_runtime</code>
                  <span class="text" id="span_000931" smilref="Programming_Robots_with_ROS00004.smil#span_000931">:</span>
                </p>
                <p id="p_000321">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000419" smilref="Programming_Robots_with_ROS00004.smil#code_000419">&lt;build_depend&gt;rospy&lt;/build_depend&gt;
&lt;run_depend&gt;rospy&lt;/run_depend&gt;

&lt;build_depend&gt;message_generation&lt;/build_depend&gt;
&lt;run_depend&gt;message_runtime&lt;/run_depend&gt;</code>
                </p>
                <p id="p_000322">
                  <span class="text" id="span_000932" smilref="Programming_Robots_with_ROS00004.smil#span_000932">Then, we need to tell</span>
                  <code xml:space="preserve" id="code_000420" smilref="Programming_Robots_with_ROS00004.smil#code_000420">catkin</code>
                  <span class="text" id="span_000933" smilref="Programming_Robots_with_ROS00004.smil#span_000933">which service-definition files we want compiled, using the</span>
                  <code xml:space="preserve" id="code_000421" smilref="Programming_Robots_with_ROS00004.smil#code_000421">add_service_files()</code>
                  <span class="text" id="span_000934" smilref="Programming_Robots_with_ROS00004.smil#span_000934">call in</span>
                  <em id="em_000149" smilref="Programming_Robots_with_ROS00004.smil#em_000149">CMakeLists.txt</em>
                  <span class="text" id="span_000935" smilref="Programming_Robots_with_ROS00004.smil#span_000935">:</span>
                </p>
                <p id="p_000323">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000422" smilref="Programming_Robots_with_ROS00004.smil#code_000422">add_service_files(
  FILES
  WordCount.srv
)</code>
                </p>
                <p id="p_000324">
                  <span class="text" id="span_000936" smilref="Programming_Robots_with_ROS00004.smil#span_000936">Finally, we must make sure that the dependencies for the service-definition file are declared (again in</span>
                  <em id="em_000150" smilref="Programming_Robots_with_ROS00004.smil#em_000150">CMakeLists.txt</em>
                  <span class="text" id="span_000937" smilref="Programming_Robots_with_ROS00004.smil#span_000937">), using the</span>
                  <code xml:space="preserve" id="code_000423" smilref="Programming_Robots_with_ROS00004.smil#code_000423">generate_messages()</code>
                  <span class="text" id="span_000938" smilref="Programming_Robots_with_ROS00004.smil#span_000938">call:</span>
                </p>
                <p id="p_000325">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000424" smilref="Programming_Robots_with_ROS00004.smil#code_000424">generate_messages(
  DEPENDENCIES
  std_msgs
)</code>
                </p>
                <p id="p_000326">
                  <span class="text" id="span_000939" smilref="Programming_Robots_with_ROS00004.smil#span_000939">With all of this in place, running</span>
                  <code xml:space="preserve" id="code_000425" smilref="Programming_Robots_with_ROS00004.smil#code_000425">catkin_make</code>
                  <span class="text" id="span_000940" smilref="Programming_Robots_with_ROS00004.smil#span_000940">will generate three classes:</span>
                  <code xml:space="preserve" id="code_000426" smilref="Programming_Robots_with_ROS00004.smil#code_000426">WordCount</code>
                  <span class="text" id="span_000941" smilref="Programming_Robots_with_ROS00004.smil#span_000941">,</span>
                  <code xml:space="preserve" id="code_000427" smilref="Programming_Robots_with_ROS00004.smil#code_000427">WordCountRequest</code>
                  <span class="text" id="span_000942" smilref="Programming_Robots_with_ROS00004.smil#span_000942">, and</span>
                  <code xml:space="preserve" id="code_000428" smilref="Programming_Robots_with_ROS00004.smil#code_000428">WordCountResponse</code>
                  <span class="text" id="span_000943" smilref="Programming_Robots_with_ROS00004.smil#span_000943">. These classes will be used to interact with the service, as we will see. Just like with messages, you will probably never have to look at the details of the generated classes. However, just in case you're interested, (part of) the classes generated by the</span>
                  <code xml:space="preserve" id="code_000429" smilref="Programming_Robots_with_ROS00004.smil#code_000429">WordCount</code>
                  <span class="text" id="span_000944" smilref="Programming_Robots_with_ROS00004.smil#span_000944">example are shown in</span>
                  <a data-type="xref" href="#ch04-word_count_generated" external="false" id="a_000065" smilref="Programming_Robots_with_ROS00004.smil#a_000065">Example 4-2</a>
                  <span class="text" id="span_000945" smilref="Programming_Robots_with_ROS00004.smil#span_000945">.</span>
                </p>
                <h1 id="h1_000081" smilref="Programming_Robots_with_ROS00004.smil#h1_000081">Example 4-2. The Python classes generated by catkin_make for the WordCount example (code in functions removed for clarity)</h1>
                <div id="ch04-word_count_generated" data-type="example">
                  <p id="p_000327">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_000430" smilref="Programming_Robots_with_ROS00004.smil#code_000430">"""autogenerated by genpy from basics/WordCountRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion &gt; 0x03000000 else False
import genpy
import struct


class WordCountRequest(genpy.Message):
  _md5sum = "6f897d3845272d18053a750c1cfb862a"
  _type = "basics/WordCountRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string words

"""
  __slots__ = ['words']
  _slot_types = ['string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       words

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WordCountRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.words is None:
        self.words = ''
    else:
      self.words = ''

  def _get_types(self):
    ...    """

  def serialize(self, buff):
    ...

  def deserialize(self, str):
    ...

  def serialize_numpy(self, buff, numpy):
    ...

  def deserialize_numpy(self, str, numpy):
    ...

class WordCountResponse(genpy.Message):
  ...

class WordCount(genpy.Message):
  ...</code>
                  </p>
                </div>
                <p id="p_000328">
                  <span class="text" id="span_000946" smilref="Programming_Robots_with_ROS00004.smil#span_000946">The details of the definitions for</span>
                  <code xml:space="preserve" id="code_000431" smilref="Programming_Robots_with_ROS00004.smil#code_000431">WordCountResponse</code>
                  <span class="text" id="span_000947" smilref="Programming_Robots_with_ROS00004.smil#span_000947">and</span>
                  <code xml:space="preserve" id="code_000432" smilref="Programming_Robots_with_ROS00004.smil#code_000432">WordCount</code>
                  <span class="text" id="span_000948" smilref="Programming_Robots_with_ROS00004.smil#span_000948">are similar to those for</span>
                  <code xml:space="preserve" id="code_000433" smilref="Programming_Robots_with_ROS00004.smil#code_000433">WordCountRequest</code>
                  <span class="text" id="span_000949" smilref="Programming_Robots_with_ROS00004.smil#span_000949">. All of these are just ROS messages.</span>
                </p>
                <p id="p_000329">
                  <span class="text" id="span_000950" smilref="Programming_Robots_with_ROS00004.smil#span_000950">We can verify that the service call definition is what we expect by using the</span>
                  <code xml:space="preserve" id="code_000434" smilref="Programming_Robots_with_ROS00004.smil#code_000434">rossrv</code>
                  <span class="text" id="span_000951" smilref="Programming_Robots_with_ROS00004.smil#span_000951">command:</span>
                </p>
                <p id="p_000330">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000435"><span class="text" id="span_000952" smilref="Programming_Robots_with_ROS00004.smil#span_000952">
user@hostname$ </span><strong id="strong_000052" smilref="Programming_Robots_with_ROS00004.smil#strong_000052">rossrv show WordCount</strong><span class="text" id="span_000953" smilref="Programming_Robots_with_ROS00004.smil#span_000953">
[basics/WordCount]:
string words
---
uint32 count
</span></code>
                </p>
                <p id="ch04-idp18936224" data-type="indexterm" data-startref="ix_4-services-asciidoc1">
                  <span class="text" id="span_000954" smilref="Programming_Robots_with_ROS00004.smil#span_000954">You can see all available services using</span>
                  <code xml:space="preserve" id="code_000436" smilref="Programming_Robots_with_ROS00004.smil#code_000436">rossrv list</code>
                  <span class="text" id="span_000955" smilref="Programming_Robots_with_ROS00004.smil#span_000955">, all packages offering services with</span>
                  <code xml:space="preserve" id="code_000437" smilref="Programming_Robots_with_ROS00004.smil#code_000437">rossrv packages</code>
                  <span class="text" id="span_000956" smilref="Programming_Robots_with_ROS00004.smil#span_000956">, and all the services offered by a particular package with</span>
                  <code xml:space="preserve" id="code_000438" smilref="Programming_Robots_with_ROS00004.smil#code_000438">rossrv package</code>
                  <span class="text" id="span_000957" smilref="Programming_Robots_with_ROS00004.smil#span_000957">.</span>
                </p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Implementing a Service" id="section_000047">
              <h1 id="h1_000082" smilref="Programming_Robots_with_ROS00004.smil#h1_000082">Implementing a Service</h1>
              <div class="sect1" id="ch04-idp18762944">
                <p id="ch04-idp18939488" data-type="indexterm" data-primary="callback function" data-secondary="services and">
                  <span class="text" id="span_000958" smilref="Programming_Robots_with_ROS00004.smil#span_000958">Now that we have a definition of the inputs and outputs for the service call, we're ready to write the code that implements the service. Like topics, services are a callback-based mechanism. The service provider specifies a callback that will be run when the service call is made, and then waits for requests to come in.</span>
                  <a data-type="xref" href="#ch04-service_server" external="false" id="a_000066" smilref="Programming_Robots_with_ROS00004.smil#a_000066">Example 4-3</a>
                  <span class="text" id="span_000959" smilref="Programming_Robots_with_ROS00004.smil#span_000959">shows a simple server that implements our word-counting service call.</span>
                </p>
                <h1 id="h1_000083" smilref="Programming_Robots_with_ROS00004.smil#h1_000083">Example 4-3. service_server.py</h1>
                <div id="ch04-service_server" data-type="example">
                  <p id="p_000331">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_000439" smilref="Programming_Robots_with_ROS00004.smil#code_000439">#!/usr/bin/env python

import rospy

from basics.srv import WordCount,WordCountResponse


def count_words(request):
    return WordCountResponse(len(request.words.split()))


rospy.init_node('service_server')

service = rospy.Service('word_count', WordCount, count_words)

rospy.spin()</code>
                  </p>
                </div>
                <p id="p_000332">
                  <span class="text" id="span_000960" smilref="Programming_Robots_with_ROS00004.smil#span_000960">We first need to import the code generated by</span>
                  <code xml:space="preserve" id="code_000440" smilref="Programming_Robots_with_ROS00004.smil#code_000440">catkin</code>
                  <span class="text" id="span_000961" smilref="Programming_Robots_with_ROS00004.smil#span_000961">:</span>
                </p>
                <p id="p_000333">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000441" smilref="Programming_Robots_with_ROS00004.smil#code_000441">from basics.srv import WordCount,WordCountResponse</code>
                </p>
                <p id="p_000334">
                  <span class="text" id="span_000962" smilref="Programming_Robots_with_ROS00004.smil#span_000962">Notice that we need to import both</span>
                  <code xml:space="preserve" id="code_000442" smilref="Programming_Robots_with_ROS00004.smil#code_000442">WordCount</code>
                  <span class="text" id="span_000963" smilref="Programming_Robots_with_ROS00004.smil#span_000963">and</span>
                  <code xml:space="preserve" id="code_000443" smilref="Programming_Robots_with_ROS00004.smil#code_000443">WordCountResponse</code>
                  <span class="text" id="span_000964" smilref="Programming_Robots_with_ROS00004.smil#span_000964">. Both of these are generated in a Python module with the same name as the package, with a</span>
                  <em id="em_000151" smilref="Programming_Robots_with_ROS00004.smil#em_000151">.srv</em>
                  <span class="text" id="span_000965" smilref="Programming_Robots_with_ROS00004.smil#span_000965">extension (</span>
                  <em id="em_000152" smilref="Programming_Robots_with_ROS00004.smil#em_000152">basics.srv</em>
                  <span class="text" id="span_000966" smilref="Programming_Robots_with_ROS00004.smil#span_000966">, in our case).</span>
                </p>
                <p id="p_000335">
                  <span class="text" id="span_000967" smilref="Programming_Robots_with_ROS00004.smil#span_000967">The callback function takes a single argument of type</span>
                  <code xml:space="preserve" id="code_000444" smilref="Programming_Robots_with_ROS00004.smil#code_000444">WordCountRequest</code>
                  <span class="text" id="span_000968" smilref="Programming_Robots_with_ROS00004.smil#span_000968">and returns a single argument of type</span>
                  <code xml:space="preserve" id="code_000445" smilref="Programming_Robots_with_ROS00004.smil#code_000445">WordCountResponse</code>
                  <span class="text" id="span_000969" smilref="Programming_Robots_with_ROS00004.smil#span_000969">:</span>
                </p>
                <p id="p_000336">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000446" smilref="Programming_Robots_with_ROS00004.smil#code_000446">def count_words(request):
    return WordCountResponse(len(request.words.split()))</code>
                </p>
                <p id="p_000337">
                  <span class="text" id="span_000970" smilref="Programming_Robots_with_ROS00004.smil#span_000970">The constructor for</span>
                  <code xml:space="preserve" id="code_000447" smilref="Programming_Robots_with_ROS00004.smil#code_000447">WordCountResponse</code>
                  <span class="text" id="span_000971" smilref="Programming_Robots_with_ROS00004.smil#span_000971">takes parameters that match those in the service-definition file. For us, this means an unsigned integer. By convention, services that fail, for whatever reason, should return</span>
                  <code xml:space="preserve" id="code_000448" smilref="Programming_Robots_with_ROS00004.smil#code_000448">None</code>
                  <span class="text" id="span_000972" smilref="Programming_Robots_with_ROS00004.smil#span_000972">.</span>
                </p>
                <p id="p_000338">
                  <span class="text" id="span_000973" smilref="Programming_Robots_with_ROS00004.smil#span_000973">After initializing the node, we advertise the service, giving it a name (</span>
                  <code xml:space="preserve" id="code_000449" smilref="Programming_Robots_with_ROS00004.smil#code_000449">word_count</code>
                  <span class="text" id="span_000974" smilref="Programming_Robots_with_ROS00004.smil#span_000974">) and a type (</span>
                  <code xml:space="preserve" id="code_000450" smilref="Programming_Robots_with_ROS00004.smil#code_000450">WordCount</code>
                  <span class="text" id="span_000975" smilref="Programming_Robots_with_ROS00004.smil#span_000975">), and specifying the callback that will implement it:</span>
                </p>
                <p id="p_000339">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000451" smilref="Programming_Robots_with_ROS00004.smil#code_000451">service = rospy.Service('word_count', WordCount, count_words)</code>
                </p>
                <p id="p_000340">
                  <span class="text" id="span_000976" smilref="Programming_Robots_with_ROS00004.smil#span_000976">Finally, we make a call to</span>
                  <code xml:space="preserve" id="code_000452" smilref="Programming_Robots_with_ROS00004.smil#code_000452">rospy.spin()</code>
                  <span class="text" id="span_000977" smilref="Programming_Robots_with_ROS00004.smil#span_000977">, which gives control of the node over to ROS and exits when the node is ready to shut down. You don't actually have to hand control over by calling</span>
                  <code xml:space="preserve" id="code_000453" smilref="Programming_Robots_with_ROS00004.smil#code_000453">rospy.spin()</code>
                  <span class="text" id="span_000978" smilref="Programming_Robots_with_ROS00004.smil#span_000978">(unlike in the C++ API), since callbacks run in their own threads. You could set up your own loop, remembering to check for node termination, if you have something else you need to do. However, using</span>
                  <code xml:space="preserve" id="code_000454" smilref="Programming_Robots_with_ROS00004.smil#code_000454">rospy.spin()</code>
                  <span class="text" id="span_000979" smilref="Programming_Robots_with_ROS00004.smil#span_000979">is a convenient way to keep the node alive until it's ready to shut down.</span>
                </p>
                <section data-type="sect2" data-pdf-bookmark="Checking That Everything Works as Expected" id="section_000048">
                  <h1 id="h1_000084" smilref="Programming_Robots_with_ROS00004.smil#h1_000084">Checking That Everything Works as Expected</h1>
                  <div class="sect2" id="ch04-idp19257856">
                    <p data-type="indexterm" data-primary="ROS command-line tools" data-secondary="rosservice" id="ch04-ix_4-services-asciidoc3">
                      <span class="text" id="span_000980" smilref="Programming_Robots_with_ROS00004.smil#span_000980">Now that we have the service defined and implemented, we can verify that everything is working as expected with the</span>
                      <code xml:space="preserve" id="code_000455" smilref="Programming_Robots_with_ROS00004.smil#code_000455">rosservice</code>
                      <span class="text" id="span_000981" smilref="Programming_Robots_with_ROS00004.smil#span_000981">command. Start up a</span>
                      <code id="ch04-idp19259072" xml:space="preserve" smilref="Programming_Robots_with_ROS00004.smil#ch04-idp19259072">roscore</code>
                      <span class="text" id="span_000982" smilref="Programming_Robots_with_ROS00004.smil#span_000982">and run the service node:</span>
                    </p>
                    <p id="p_000341">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000456"><span class="text" id="span_000983" smilref="Programming_Robots_with_ROS00004.smil#span_000983">
user@hostname$ </span><strong id="strong_000053" smilref="Programming_Robots_with_ROS00004.smil#strong_000053">rosrun basics service_server.py</strong>
</code>
                    </p>
                    <p id="p_000342" smilref="Programming_Robots_with_ROS00004.smil#p_000342">First, let's check that the service is there:</p>
                    <p id="p_000343">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000457"><span class="text" id="span_000984" smilref="Programming_Robots_with_ROS00004.smil#span_000984">
user@hostname$ </span><strong id="strong_000054" smilref="Programming_Robots_with_ROS00004.smil#strong_000054">rosservice list</strong><span class="text" id="span_000985" smilref="Programming_Robots_with_ROS00004.smil#span_000985">
/rosout/get_loggers
/rosout/set_logger_level
/service_server/get_loggers
/service_server/set_logger_level
/word_count
</span></code>
                    </p>
                    <p id="p_000344">
                      <span class="text" id="span_000986" smilref="Programming_Robots_with_ROS00004.smil#span_000986">In addition to the logging services provided by ROS, our service seems to be there. We can get some more information about it with</span>
                      <code xml:space="preserve" id="code_000458" smilref="Programming_Robots_with_ROS00004.smil#code_000458">rosservice info</code>
                      <span class="text" id="span_000987" smilref="Programming_Robots_with_ROS00004.smil#span_000987">:</span>
                    </p>
                    <p id="p_000345">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000459"><span class="text" id="span_000988" smilref="Programming_Robots_with_ROS00004.smil#span_000988">
user@hostname$ </span><strong id="strong_000055" smilref="Programming_Robots_with_ROS00004.smil#strong_000055">rosservice info word_count</strong><span class="text" id="span_000989" smilref="Programming_Robots_with_ROS00004.smil#span_000989">
Node: /service_server
URI: rosrpc://hostname:60085
Type: basics/WordCount
Args: words
</span></code>
                    </p>
                    <p id="p_000346">
                      <span class="text" id="span_000990" smilref="Programming_Robots_with_ROS00004.smil#span_000990">This tells us the node that provides the service, where it's running, the type that it uses, and the names of the arguments to the service call. We can also get some of this information using</span>
                      <code xml:space="preserve" id="code_000460" smilref="Programming_Robots_with_ROS00004.smil#code_000460">rosservice type
word_count</code>
                      <span class="text" id="span_000991" smilref="Programming_Robots_with_ROS00004.smil#span_000991">and</span>
                      <code xml:space="preserve" id="code_000461" smilref="Programming_Robots_with_ROS00004.smil#code_000461">roservice args word_count</code>
                      <span class="text" id="span_000992" smilref="Programming_Robots_with_ROS00004.smil#span_000992">.</span>
                    </p>
                  </div>
                </section>
                <section data-type="sect2" data-pdf-bookmark="Other Ways of Returning Values from a Service" id="section_000049">
                  <h1 id="h1_000085" smilref="Programming_Robots_with_ROS00004.smil#h1_000085">Other Ways of Returning Values from a Service</h1>
                  <div class="sect2" id="ch04-idp19262096">
                    <p data-type="indexterm" data-primary="services" data-secondary="returning values from" id="ch04-idp19263504">
                      <span class="text" id="span_000993" smilref="Programming_Robots_with_ROS00004.smil#span_000993">In the previous example, we explicitly created a</span>
                      <code xml:space="preserve" id="code_000462" smilref="Programming_Robots_with_ROS00004.smil#code_000462">WordCountResponse</code>
                      <span class="text" id="span_000994" smilref="Programming_Robots_with_ROS00004.smil#span_000994">object and returned it from the service callback. There are a number of other ways to return values from a service callback that you can use. In the case where there is a single return argument for the service, you can simply return that value:</span>
                    </p>
                    <p id="p_000347">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000463" smilref="Programming_Robots_with_ROS00004.smil#code_000463">def count_words(request):
    return len(request.words.split())</code>
                    </p>
                    <p id="p_000348" smilref="Programming_Robots_with_ROS00004.smil#p_000348">If there are multiple return arguments, you can return a tuple or a list. The values in the list will be assigned to the values in the service definition, in order. This works even if there's only one return value:</p>
                    <p id="p_000349">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000464" smilref="Programming_Robots_with_ROS00004.smil#code_000464">def count_words(request):
    return [len(request.words.split())]</code>
                    </p>
                    <p id="p_000350" smilref="Programming_Robots_with_ROS00004.smil#p_000350">You can also return a dictionary, where the keys are the argument names (given as strings):</p>
                    <p id="p_000351">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000465" smilref="Programming_Robots_with_ROS00004.smil#code_000465">def count_words(request):
    return {'count': len(request.words.split())}</code>
                    </p>
                    <p id="ch04-idp19293344" data-type="indexterm" data-startref="ix_4-services-asciidoc3">
                      <span class="text" id="span_000995" smilref="Programming_Robots_with_ROS00004.smil#span_000995">In both of these cases, the underlying service call code in ROS will translate these return types into a</span>
                      <code xml:space="preserve" id="code_000466" smilref="Programming_Robots_with_ROS00004.smil#code_000466">WordCountResponse</code>
                      <span class="text" id="span_000996" smilref="Programming_Robots_with_ROS00004.smil#span_000996">object and return it to the calling node, just as in the initial example code.</span>
                    </p>
                  </div>
                </section>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Using a Service" id="section_000050">
              <h1 id="h1_000086" smilref="Programming_Robots_with_ROS00004.smil#h1_000086">Using a Service</h1>
              <div class="sect1" id="ch04-idp18937216">
                <p data-type="indexterm" data-primary="services" data-secondary="using" id="ch04-ix_4-services-asciidoc4">
                  <span class="text" id="span_000997" smilref="Programming_Robots_with_ROS00004.smil#span_000997">The simplest way to use a service is to call it using the</span>
                  <code xml:space="preserve" id="code_000467" smilref="Programming_Robots_with_ROS00004.smil#code_000467">rosservice</code>
                  <span class="text" id="span_000998" smilref="Programming_Robots_with_ROS00004.smil#span_000998">command. For our word-counting service, the call looks like this:</span>
                </p>
                <p id="p_000352">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000468"><span class="text" id="span_000999" smilref="Programming_Robots_with_ROS00004.smil#span_000999">
user@hostname$ </span><strong id="strong_000056" smilref="Programming_Robots_with_ROS00004.smil#strong_000056">rosservice call word_count 'one two three'</strong><span class="text" id="span_001000" smilref="Programming_Robots_with_ROS00004.smil#span_001000">
count: 3
</span></code>
                </p>
                <p id="p_000353">
                  <span class="text" id="span_001001" smilref="Programming_Robots_with_ROS00004.smil#span_001001">The command takes the</span>
                  <code xml:space="preserve" id="code_000469" smilref="Programming_Robots_with_ROS00004.smil#code_000469">call</code>
                  <span class="text" id="span_001002" smilref="Programming_Robots_with_ROS00004.smil#span_001002">subcommand, the service name, and the arguments. While this lets us call the service and make sure that it's working as expected, it's not as useful as calling it from another running node.</span>
                  <a data-type="xref" href="#ch04-service_client" external="false" id="a_000067" smilref="Programming_Robots_with_ROS00004.smil#a_000067">Example 4-4</a>
                  <span class="text" id="span_001003" smilref="Programming_Robots_with_ROS00004.smil#span_001003">shows how to call our service programmatically.</span>
                </p>
                <h1 id="h1_000087" smilref="Programming_Robots_with_ROS00004.smil#h1_000087">Example 4-4. service_client.py</h1>
                <div id="ch04-service_client" data-type="example">
                  <p id="p_000354">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_000470" smilref="Programming_Robots_with_ROS00004.smil#code_000470">#!/usr/bin/env python

import rospy

from basics.srv import WordCount

import sys


rospy.init_node('service_client')

rospy.wait_for_service('word_count')

word_counter = rospy.ServiceProxy('word_count', WordCount)

words = ' '.join(sys.argv[1:])

word_count = word_counter(words)

print words, '-&gt;', word_count.count</code>
                  </p>
                </div>
                <p id="p_000355" smilref="Programming_Robots_with_ROS00004.smil#p_000355">First, we wait for the service to be advertised by the server:</p>
                <p id="p_000356">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000471" smilref="Programming_Robots_with_ROS00004.smil#code_000471">rospy.wait_for_service('word_count')</code>
                </p>
                <p id="p_000357" smilref="Programming_Robots_with_ROS00004.smil#p_000357">If we try to use the service before it's advertised, the call will fail with an exception. This is a major difference between topics and services. We can subscribe to topics that are not yet advertised, but we can only use advertised services. Once the service is advertised, we can set up a local proxy for it:</p>
                <p id="p_000358">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000472" smilref="Programming_Robots_with_ROS00004.smil#code_000472">word_counter = rospy.ServiceProxy('word_count', WordCount)</code>
                </p>
                <p id="ch04-idp19549952" data-type="indexterm" data-startref="ix_4-services-asciidoc4">
                  <span class="text" id="span_001004" smilref="Programming_Robots_with_ROS00004.smil#span_001004">We need to specify the name of the service (</span>
                  <code xml:space="preserve" id="code_000473" smilref="Programming_Robots_with_ROS00004.smil#code_000473">word_count</code>
                  <span class="text" id="span_001005" smilref="Programming_Robots_with_ROS00004.smil#span_001005">) and the type (</span>
                  <code xml:space="preserve" id="code_000474" smilref="Programming_Robots_with_ROS00004.smil#code_000474">WordCount</code>
                  <span class="text" id="span_001006" smilref="Programming_Robots_with_ROS00004.smil#span_001006">). This will allow us to use</span>
                  <code xml:space="preserve" id="code_000475" smilref="Programming_Robots_with_ROS00004.smil#code_000475">word_counter</code>
                  <span class="text" id="span_001007" smilref="Programming_Robots_with_ROS00004.smil#span_001007">like a local function that, when called, will actually make the service call for us:</span>
                </p>
                <p id="p_000359">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000476" smilref="Programming_Robots_with_ROS00004.smil#code_000476">word_count = word_counter(words)</code>
                </p>
                <section data-type="sect2" data-pdf-bookmark="Checking That Everything Works as Expected" id="section_000051">
                  <h1 id="h1_000088" smilref="Programming_Robots_with_ROS00004.smil#h1_000088">Checking That Everything Works as Expected</h1>
                  <div class="sect2" id="ch04-idp19354352">
                    <p data-type="indexterm" data-primary="services" data-secondary="checking with client node" id="ch04-idp19454688">
                      <span class="text" id="span_001008" smilref="Programming_Robots_with_ROS00004.smil#span_001008">Now that we've defined the service, built the support code with</span>
                      <code xml:space="preserve" id="code_000477" smilref="Programming_Robots_with_ROS00004.smil#code_000477">catkin</code>
                      <span class="text" id="span_001009" smilref="Programming_Robots_with_ROS00004.smil#span_001009">, and implemented both a server and a client, it's time to see if everything works. Check that your server is still running, and run the client node (make sure that you've sourced your workspace setup file in the shell in which you run the client node, or it will not work):</span>
                    </p>
                    <p id="p_000360">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000478"><span class="text" id="span_001010" smilref="Programming_Robots_with_ROS00004.smil#span_001010">
user@hostname$ </span><strong id="strong_000057" smilref="Programming_Robots_with_ROS00004.smil#strong_000057">rosrun basics service_client.py these are some words</strong><span class="text" id="span_001011" smilref="Programming_Robots_with_ROS00004.smil#span_001011">
these are some words -&gt; 4
</span></code>
                    </p>
                    <p id="p_000361" smilref="Programming_Robots_with_ROS00004.smil#p_000361">Now, stop the server and rerun the client node. It should stop, waiting for the service to be advertised. Starting the server node should result in the client completing normally, once the service is available. This highlights one of the limitations of ROS services: the service client can potentially wait forever if the service is not available for some reason. Perhaps the service server has died unexpectedly, or perhaps the service name is misspelled in the client call. In either case, the service client will get stuck.</p>
                  </div>
                </section>
                <section data-type="sect2" data-pdf-bookmark="Other Ways to Call Services" id="section_000052">
                  <h1 id="h1_000089" smilref="Programming_Robots_with_ROS00004.smil#h1_000089">Other Ways to Call Services</h1>
                  <div class="sect2" id="ch04-idp19458720">
                    <p data-type="indexterm" data-primary="services" data-secondary="calling" id="ch04-idp19460288">
                      <span class="text" id="span_001012" smilref="Programming_Robots_with_ROS00004.smil#span_001012">In our client node, we are calling the service through the proxy as if it were a local function. The arguments to this function are used to fill in the elements of the service request, in order. In our example, we only have one argument (</span>
                      <code xml:space="preserve" id="code_000479" smilref="Programming_Robots_with_ROS00004.smil#code_000479">words</code>
                      <span class="text" id="span_001013" smilref="Programming_Robots_with_ROS00004.smil#span_001013">), so we are only allowed to give the proxy function one argument. Similarly, since there is only one output from the service call, the proxy function returns a single value. If, on the other hand, our service definition were to look like this:</span>
                    </p>
                    <p id="p_000362">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000480" smilref="Programming_Robots_with_ROS00004.smil#code_000480">string words
int min_word_length
---
uint32 count
uint32 ignored</code>
                    </p>
                    <p id="p_000363" smilref="Programming_Robots_with_ROS00004.smil#p_000363">then the proxy function would take two arguments, and return two values:</p>
                    <p id="p_000364">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000481" smilref="Programming_Robots_with_ROS00004.smil#code_000481">c,i = word_count(words, 3)</code>
                    </p>
                    <p id="p_000365" smilref="Programming_Robots_with_ROS00004.smil#p_000365">The arguments are passed in the order they are defined in the service definition. It is also possible to explicitly construct a service request object and use that to call the service:</p>
                    <p id="p_000366">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000482" smilref="Programming_Robots_with_ROS00004.smil#code_000482">request = WordCountRequest('one two three', 3)
count,ignored = word_counter(request)</code>
                    </p>
                    <p id="p_000367">
                      <span class="text" id="span_001014" smilref="Programming_Robots_with_ROS00004.smil#span_001014">Note that, if you choose this mechanism, you will have to also import the definition for</span>
                      <code xml:space="preserve" id="code_000483" smilref="Programming_Robots_with_ROS00004.smil#code_000483">WordCountRequest</code>
                      <span class="text" id="span_001015" smilref="Programming_Robots_with_ROS00004.smil#span_001015">in the client code, as follows:</span>
                    </p>
                    <p id="p_000368">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000484" smilref="Programming_Robots_with_ROS00004.smil#code_000484">from basics.srv import WordCountRequest</code>
                    </p>
                    <p id="p_000369" smilref="Programming_Robots_with_ROS00004.smil#p_000369">Finally, if you only want to set some of the arguments, you can use keyword arguments to make the service call:</p>
                    <p id="p_000370">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000485" smilref="Programming_Robots_with_ROS00004.smil#code_000485">count,ignored = word_counter(words='one two three')</code>
                    </p>
                    <p id="ch04-idp19640240" data-type="indexterm" data-startref="ix_4-services-asciidoc2">
                      <span class="text" id="span_001016" smilref="Programming_Robots_with_ROS00004.smil#span_001016">While this mechanism can be useful, you should use it with care, since any arguments that you do not explicitly set will remain undefined. If you omit arguments that the service needs to run, you might get strange return values. You should probably steer clear of this calling style, unless you actually</span>
                      <em id="em_000153" smilref="Programming_Robots_with_ROS00004.smil#em_000153">need</em>
                      <span class="text" id="span_001017" smilref="Programming_Robots_with_ROS00004.smil#span_001017">to use it.</span>
                    </p>
                  </div>
                </section>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Summary" id="section_000053">
              <h1 id="h1_000090" smilref="Programming_Robots_with_ROS00004.smil#h1_000090">Summary</h1>
              <div class="sect1" id="ch04-idp19294304">
                <p id="p_000371" smilref="Programming_Robots_with_ROS00004.smil#p_000371">Now you know all about services, the second main communication mechanism in ROS. Services are really just synchronous remote procedure calls and allow explicit two-way communication between nodes. You should now be able to use services provided by other packages in ROS, and also to implement your own services.</p>
                <p id="p_000372">
                  <span class="text" id="span_001018" smilref="Programming_Robots_with_ROS00004.smil#span_001018">Once again, we didn't cover all of the details of services. To get more information</span>
                  <span class="keep-together" id="span_001019" smilref="Programming_Robots_with_ROS00004.smil#span_001019">on more sophisticated uses</span>
                  <span class="text" id="span_001020" smilref="Programming_Robots_with_ROS00004.smil#span_001020">of services, you should look at</span>
                  <a href="http://wiki.ros.org/Services?distro=indigo" class="keep-together" external="true" id="a_000068" smilref="Programming_Robots_with_ROS00004.smil#a_000068">the services API documentation</a>
                  <span class="text" id="span_001021" smilref="Programming_Robots_with_ROS00004.smil#span_001021">.</span>
                </p>
                <p id="ch04-idp19641920" data-type="indexterm" data-startref="ix_4-services-asciidoc0">
                  <span class="text" id="span_001022" smilref="Programming_Robots_with_ROS00004.smil#span_001022">You should use services for things that you only need to do occasionally, or when you need a synchronous reply. The computations in a service callback should take a short, bounded amount of time to complete. If they're going to take a long time, or the time is going to be highly variable, you should think about using an</span>
                  <em id="em_000154" smilref="Programming_Robots_with_ROS00004.smil#em_000154">action</em>
                  <span class="text" id="span_001023" smilref="Programming_Robots_with_ROS00004.smil#span_001023">, which we describe in the next chapter.</span>
                </p>
              </div>
            </section>
          </div>
        </section>
      </level1>
      <level1 id="ch05">
        <section xmlns:epub="http://www.idpf.org/2007/ops" data-type="chapter" epub:type="chapter" data-pdf-bookmark="Chapter 5. Actions" id="section_000054">
          <h1 id="h1_000091" smilref="Programming_Robots_with_ROS00004.smil#h1_000091">Chapter 5. Actions</h1>
          <div class="chapter" id="ch05-actions">
            <p id="ch05-ix_5-actions-asciidoc0" data-type="indexterm" data-primary="actions" data-secondary="services vs." smilref="Programming_Robots_with_ROS00004.smil#ch05-ix_5-actions-asciidoc0">The previous chapter described ROS services, which are useful for synchronous request/response interactions--that is, for those cases where asynchronous ROS topics don't seem like the best fit. However, services aren't always the best fit, either, in particular when the request that's being made is more than a simple instruction of the form "get (or set) the value of X."</p>
            <p id="p_000373">
              <span class="text" id="span_001024" smilref="Programming_Robots_with_ROS00004.smil#span_001024">While services are handy for simple get/set interactions like querying status and managing configuration, they don't work well when you need to initiate a long-running task. For example, imagine commanding a robot to drive to some distant location; call it</span>
              <code xml:space="preserve" id="code_000486" smilref="Programming_Robots_with_ROS00004.smil#code_000486">goto_position</code>
              <span class="text" id="span_001025" smilref="Programming_Robots_with_ROS00004.smil#span_001025">. The robot will require significant time (seconds, minutes, perhaps longer) to do so, with the exact amount of time impossible to know in advance, since obstacles may arise that result in a longer path.</span>
            </p>
            <p id="p_000374">
              <span class="text" id="span_001026" smilref="Programming_Robots_with_ROS00004.smil#span_001026">Imagine what a service interface to</span>
              <code xml:space="preserve" id="code_000487" smilref="Programming_Robots_with_ROS00004.smil#code_000487">goto_position</code>
              <span class="text" id="span_001027" smilref="Programming_Robots_with_ROS00004.smil#span_001027">might look like to the caller: you send a request containing the goal location, then you wait for an indeterminate amount of time to receive the response that tells you what happened. While waiting, your calling program is forced to block, you have no information about the robot's progress toward the goal, and you can't cancel or change the goal. To address these shortcomings, ROS provides</span>
              <em id="em_000155" smilref="Programming_Robots_with_ROS00004.smil#em_000155">actions</em>
              <span class="text" id="span_001028" smilref="Programming_Robots_with_ROS00004.smil#span_001028">.</span>
            </p>
            <p data-type="indexterm" data-primary="feedback" id="ch05-idp19466048">
              <span class="text" id="span_001029" smilref="Programming_Robots_with_ROS00004.smil#span_001029">ROS</span>
              <em id="em_000156" smilref="Programming_Robots_with_ROS00004.smil#em_000156">actions</em>
              <span class="text" id="span_001030" smilref="Programming_Robots_with_ROS00004.smil#span_001030">are the best way to implement interfaces to time-extended, goal-oriented behaviors like</span>
              <code xml:space="preserve" id="code_000488" smilref="Programming_Robots_with_ROS00004.smil#code_000488">goto_position</code>
              <span class="text" id="span_001031" smilref="Programming_Robots_with_ROS00004.smil#span_001031">. While services are synchronous, actions are asynchronous. Similar to the request and response of a service, an action uses a</span>
              <em id="ch05-idp19496304" smilref="Programming_Robots_with_ROS00004.smil#ch05-idp19496304">goal</em>
              <span class="text" id="span_001032" smilref="Programming_Robots_with_ROS00004.smil#span_001032">to initiate a behavior and sends a</span>
              <em id="ch05-idp19497008" smilref="Programming_Robots_with_ROS00004.smil#ch05-idp19497008">result</em>
              <span class="text" id="span_001033" smilref="Programming_Robots_with_ROS00004.smil#span_001033">when the behavior is complete. But the action further uses</span>
              <em id="em_000157" smilref="Programming_Robots_with_ROS00004.smil#em_000157">feedback</em>
              <span class="text" id="span_001034" smilref="Programming_Robots_with_ROS00004.smil#span_001034">to provide updates on the behavior's progress toward the goal and also allows for goals to be canceled. Actions are themselves implemented using topics. An action is essentially a higher-level protocol that specifies how a set of topics (goal, result, feedback, etc.) should be used in combination.</span>
            </p>
            <p id="p_000375">
              <span class="text" id="span_001035" smilref="Programming_Robots_with_ROS00004.smil#span_001035">Using an action interface to</span>
              <code xml:space="preserve" id="code_000489" smilref="Programming_Robots_with_ROS00004.smil#code_000489">goto_position</code>
              <span class="text" id="span_001036" smilref="Programming_Robots_with_ROS00004.smil#span_001036">, you send a goal, then move on to other tasks while the robot is driving. Along the way, you receive periodic progress updates (distance traveled, estimated time to goal, etc.), culminating in a result message (did the robot make it to the goal or was it forced to give up?). And if something more important comes up, you can at any time cancel the goal and send the robot somewhere else.</span>
            </p>
            <p id="p_000376" smilref="Programming_Robots_with_ROS00004.smil#p_000376">Actions require only a little more effort to define and use than do services, and they provide a lot more power and flexibility. Let's see how they work.</p>
            <section data-type="sect1" data-pdf-bookmark="Defining an Action" id="section_000055">
              <h1 id="h1_000092" smilref="Programming_Robots_with_ROS00004.smil#h1_000092">Defining an Action</h1>
              <div class="sect1" id="ch05-idp19469408">
                <p data-type="indexterm" data-primary="action definition file" id="ch05-idp19472608" data-secondary="defining">
                  <span class="text" id="span_001037" smilref="Programming_Robots_with_ROS00004.smil#span_001037">The first step in creating a new action is to define the</span>
                  <em id="em_000158" smilref="Programming_Robots_with_ROS00004.smil#em_000158">goal</em>
                  <span class="text" id="span_001038" smilref="Programming_Robots_with_ROS00004.smil#span_001038">,</span>
                  <em id="ch05-ix_5-actions-asciidoc1" smilref="Programming_Robots_with_ROS00004.smil#ch05-ix_5-actions-asciidoc1">result</em>
                  <span class="text" id="span_001039" smilref="Programming_Robots_with_ROS00004.smil#span_001039">, and</span>
                  <em id="em_000159" smilref="Programming_Robots_with_ROS00005.smil#em_000159">feedback</em>
                  <span class="text" id="span_001040" smilref="Programming_Robots_with_ROS00005.smil#span_001040">message formats in an</span>
                  <em id="em_000160" smilref="Programming_Robots_with_ROS00005.smil#em_000160">action definition file</em>
                  <span class="text" id="span_001041" smilref="Programming_Robots_with_ROS00005.smil#span_001041">, which by convention has the suffix</span>
                  <em id="em_000161" smilref="Programming_Robots_with_ROS00005.smil#em_000161">.action</em>
                  <span class="text" id="span_001042" smilref="Programming_Robots_with_ROS00005.smil#span_001042">. The</span>
                  <em id="em_000162" smilref="Programming_Robots_with_ROS00005.smil#em_000162">.action</em>
                  <span class="text" id="span_001043" smilref="Programming_Robots_with_ROS00005.smil#span_001043">file format is similar to the</span>
                  <em id="em_000163" smilref="Programming_Robots_with_ROS00005.smil#em_000163">.srv</em>
                  <span class="text" id="span_001044" smilref="Programming_Robots_with_ROS00005.smil#span_001044">format used to define services, just with an additional field. And, as with services, each field within an</span>
                  <em id="em_000164" smilref="Programming_Robots_with_ROS00005.smil#em_000164">.action</em>
                  <span class="text" id="span_001045" smilref="Programming_Robots_with_ROS00005.smil#span_001045">file will become its own message.</span>
                </p>
                <p id="p_000377">
                  <span class="text" id="span_001046" smilref="Programming_Robots_with_ROS00005.smil#span_001046">As a simple example, let's define an action that acts like a timer (we'll come back to the more useful</span>
                  <code xml:space="preserve" id="code_000490" smilref="Programming_Robots_with_ROS00005.smil#code_000490">goto_position</code>
                  <span class="text" id="span_001047" smilref="Programming_Robots_with_ROS00005.smil#span_001047">behavior in</span>
                  <a data-type="xref" href="#ch10-navigating" external="false" id="a_000069" smilref="Programming_Robots_with_ROS00005.smil#a_000069">Chapter 10</a>
                  <span class="text" id="span_001048" smilref="Programming_Robots_with_ROS00005.smil#span_001048">). We want this timer to count down, signaling us when the specified time has elapsed. Along the way, it should tell us periodically how much time is left. When it's done, it should tell us how much time actually elapsed.</span>
                </p>
                <h1 id="h1_000093" smilref="Programming_Robots_with_ROS00005.smil#h1_000093">Note</h1>
                <div data-type="note" epub:type="note" id="div_000018">
                  <p id="p_000378">
                    <span class="text" id="span_001049" smilref="Programming_Robots_with_ROS00005.smil#span_001049">We're building a timer because it's a simple example of an action. In a real robot system, you would use the time support that is built into ROS client libraries, such as</span>
                    <code xml:space="preserve" id="code_000491" smilref="Programming_Robots_with_ROS00005.smil#code_000491">rospy.sleep()</code>
                    <span class="text" id="span_001050" smilref="Programming_Robots_with_ROS00005.smil#span_001050">.</span>
                  </p>
                </div>
                <p id="p_000379">
                  <span class="text" id="span_001051" smilref="Programming_Robots_with_ROS00005.smil#span_001051">Shown in</span>
                  <a data-type="xref" href="#ch05-timer_action" external="false" id="a_000070" smilref="Programming_Robots_with_ROS00005.smil#a_000070">Example 5-1</a>
                  <span class="text" id="span_001052" smilref="Programming_Robots_with_ROS00005.smil#span_001052">is an action definition that will satisfy these requirements.</span>
                </p>
                <h1 id="h1_000094" smilref="Programming_Robots_with_ROS00005.smil#h1_000094">Example 5-1. Timer.action</h1>
                <div id="ch05-timer_action" data-type="example">
                  <p id="p_000380">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_000492" smilref="Programming_Robots_with_ROS00005.smil#code_000492"># This is an action definition file, which has three parts: the goal, the
# result, and the feedback.
#
# Part 1: the goal, to be sent by the client
#
# The amount of time we want to wait
duration time_to_wait
---
# Part 2: the result, to be sent by the server upon completion
#
# How much time we waited
duration time_elapsed
# How many updates we provided along the way
uint32 updates_sent
---
# Part 3: the feedback, to be sent periodically by the server during
# execution.
#
# The amount of time that has elapsed from the start
duration time_elapsed
# The amount of time remaining until we're done
duration time_remaining</code>
                  </p>
                </div>
                <p id="p_000381">
                  <span class="text" id="span_001053" smilref="Programming_Robots_with_ROS00005.smil#span_001053">Just like with service-definition files, we use three dashes (</span>
                  <code xml:space="preserve" id="code_000493" smilref="Programming_Robots_with_ROS00005.smil#code_000493">---</code>
                  <span class="text" id="span_001054" smilref="Programming_Robots_with_ROS00005.smil#span_001054">) as the separator between the parts of the definition. While service definitions have two parts (request and response), action definitions have three parts (goal, result, and feedback).</span>
                </p>
                <p id="p_000382">
                  <span class="text" id="span_001055" smilref="Programming_Robots_with_ROS00005.smil#span_001055">The action file</span>
                  <em id="em_000165" smilref="Programming_Robots_with_ROS00005.smil#em_000165">Timer.action</em>
                  <span class="text" id="span_001056" smilref="Programming_Robots_with_ROS00005.smil#span_001056">should be placed in a directory called</span>
                  <em id="em_000166" smilref="Programming_Robots_with_ROS00005.smil#em_000166">action</em>
                  <span class="text" id="span_001057" smilref="Programming_Robots_with_ROS00005.smil#span_001057">within a ROS package. As with our previous examples, this file is already present in the</span>
                  <code xml:space="preserve" id="code_000494" smilref="Programming_Robots_with_ROS00005.smil#code_000494">basics</code>
                  <span class="text" id="span_001058" smilref="Programming_Robots_with_ROS00005.smil#span_001058">package.</span>
                </p>
                <p data-type="indexterm" data-primary="catkin_make" data-secondary="for defining actions" id="ch05-idp19708000">
                  <span class="text" id="span_001059" smilref="Programming_Robots_with_ROS00005.smil#span_001059">With the definition file in the right place, we need to run</span>
                  <code xml:space="preserve" id="code_000495" smilref="Programming_Robots_with_ROS00005.smil#code_000495">catkin_make</code>
                  <span class="text" id="span_001060" smilref="Programming_Robots_with_ROS00005.smil#span_001060">to create the code and class definitions that we will actually use when interacting with the action, just like we did for new services. To get</span>
                  <code xml:space="preserve" id="code_000496" smilref="Programming_Robots_with_ROS00005.smil#code_000496">catkin_make</code>
                  <span class="text" id="span_001061" smilref="Programming_Robots_with_ROS00005.smil#span_001061">to generate this code, we need to add some lines to the</span>
                  <em id="em_000167" smilref="Programming_Robots_with_ROS00005.smil#em_000167">CMakeLists.txt</em>
                  <span class="text" id="span_001062" smilref="Programming_Robots_with_ROS00005.smil#span_001062">file. First, add</span>
                  <code xml:space="preserve" id="code_000497" smilref="Programming_Robots_with_ROS00005.smil#code_000497">actionlib_msgs</code>
                  <span class="text" id="span_001063" smilref="Programming_Robots_with_ROS00005.smil#span_001063">to the</span>
                  <code xml:space="preserve" id="code_000498" smilref="Programming_Robots_with_ROS00005.smil#code_000498">()</code>
                  <span class="text" id="span_001064" smilref="Programming_Robots_with_ROS00005.smil#span_001064">call (in addition to any other packages that are already there):</span>
                </p>
                <p id="p_000383">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000499" smilref="Programming_Robots_with_ROS00005.smil#code_000499">find_package(catkin REQUIRED COMPONENTS
  # other packages are already listed here
  actionlib_msgs
)</code>
                </p>
                <p id="p_000384">
                  <span class="text" id="span_001065" smilref="Programming_Robots_with_ROS00005.smil#span_001065">Then, use the</span>
                  <code xml:space="preserve" id="code_000500" smilref="Programming_Robots_with_ROS00005.smil#code_000500">add_action_files()</code>
                  <span class="text" id="span_001066" smilref="Programming_Robots_with_ROS00005.smil#span_001066">call to tell</span>
                  <code xml:space="preserve" id="code_000501" smilref="Programming_Robots_with_ROS00005.smil#code_000501">catkin</code>
                  <span class="text" id="span_001067" smilref="Programming_Robots_with_ROS00005.smil#span_001067">about the action files you want to compile:</span>
                </p>
                <p id="p_000385">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000502" smilref="Programming_Robots_with_ROS00005.smil#code_000502">add_action_files(
  DIRECTORY action
  FILES Timer.action
)</code>
                </p>
                <p id="p_000386">
                  <span class="text" id="span_001068" smilref="Programming_Robots_with_ROS00005.smil#span_001068">Make sure you list the dependencies for your actions. You also need to explicitly list</span>
                  <code xml:space="preserve" id="code_000503" smilref="Programming_Robots_with_ROS00005.smil#code_000503">actionlib_msgs</code>
                  <span class="text" id="span_001069" smilref="Programming_Robots_with_ROS00005.smil#span_001069">as a dependency in order for actions to compile properly:</span>
                </p>
                <p id="p_000387">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000504" smilref="Programming_Robots_with_ROS00005.smil#code_000504">generate_messages(
  DEPENDENCIES
  actionlib_msgs
  std_msgs
)</code>
                </p>
                <p id="p_000388">
                  <span class="text" id="span_001070" smilref="Programming_Robots_with_ROS00005.smil#span_001070">Finally, add</span>
                  <code xml:space="preserve" id="code_000505" smilref="Programming_Robots_with_ROS00005.smil#code_000505">actionlib_msgs</code>
                  <span class="text" id="span_001071" smilref="Programming_Robots_with_ROS00005.smil#span_001071">as a dependency for</span>
                  <code xml:space="preserve" id="code_000506" smilref="Programming_Robots_with_ROS00005.smil#code_000506">catkin</code>
                  <span class="text" id="span_001072" smilref="Programming_Robots_with_ROS00005.smil#span_001072">:</span>
                </p>
                <p id="p_000389">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000507" smilref="Programming_Robots_with_ROS00005.smil#code_000507">catkin_package(
  CATKIN_DEPENDS
  actionlib_msgs
)</code>
                </p>
                <p id="ch05-idp19748928" data-type="indexterm" data-startref="ix_5-actions-asciidoc1">
                  <span class="text" id="span_001073" smilref="Programming_Robots_with_ROS00005.smil#span_001073">With all of this information in place, running</span>
                  <code xml:space="preserve" id="code_000508" smilref="Programming_Robots_with_ROS00005.smil#code_000508">catkin_make</code>
                  <span class="text" id="span_001074" smilref="Programming_Robots_with_ROS00005.smil#span_001074">in the top level of our</span>
                  <code xml:space="preserve" id="code_000509" smilref="Programming_Robots_with_ROS00005.smil#code_000509">catkin</code>
                  <span class="text" id="span_001075" smilref="Programming_Robots_with_ROS00005.smil#span_001075">workspace does quite a bit of extra work for us. Our</span>
                  <em id="em_000168" smilref="Programming_Robots_with_ROS00005.smil#em_000168">Timer.action</em>
                  <span class="text" id="span_001076" smilref="Programming_Robots_with_ROS00005.smil#span_001076">file is processed to produce several message-definition files:</span>
                  <em id="em_000169" smilref="Programming_Robots_with_ROS00005.smil#em_000169">TimerAction.msg</em>
                  <span class="text" id="span_001077" smilref="Programming_Robots_with_ROS00005.smil#span_001077">,</span>
                  <em id="em_000170" smilref="Programming_Robots_with_ROS00005.smil#em_000170">TimerActionFeedback.msg</em>
                  <span class="text" id="span_001078" smilref="Programming_Robots_with_ROS00005.smil#span_001078">,</span>
                  <em id="em_000171" smilref="Programming_Robots_with_ROS00005.smil#em_000171">TimerActionGoal.msg</em>
                  <span class="text" id="span_001079" smilref="Programming_Robots_with_ROS00005.smil#span_001079">,</span>
                  <em id="em_000172" smilref="Programming_Robots_with_ROS00005.smil#em_000172">TimerActionResult.msg</em>
                  <span class="text" id="span_001080" smilref="Programming_Robots_with_ROS00005.smil#span_001080">,</span>
                  <em id="em_000173" smilref="Programming_Robots_with_ROS00005.smil#em_000173">TimerFeedback.msg</em>
                  <span class="text" id="span_001081" smilref="Programming_Robots_with_ROS00005.smil#span_001081">,</span>
                  <em id="em_000174" smilref="Programming_Robots_with_ROS00005.smil#em_000174">TimerGoal.msg</em>
                  <span class="text" id="span_001082" smilref="Programming_Robots_with_ROS00005.smil#span_001082">, and</span>
                  <em id="em_000175" smilref="Programming_Robots_with_ROS00005.smil#em_000175">TimerResult.msg</em>
                  <span class="text" id="span_001083" smilref="Programming_Robots_with_ROS00005.smil#span_001083">. These messages are used to implement the action client/server protocol, which, as mentioned previously, is built on top of ROS topics. The generated message definitions are in turn processed by the message generator to produce corresponding class definitions. Most of the time, you'll use only a few of those classes, as you'll see in the following examples.</span>
                </p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Implementing a Basic Action Server" id="section_000056">
              <h1 id="h1_000095" smilref="Programming_Robots_with_ROS00005.smil#h1_000095">Implementing a Basic Action Server</h1>
              <div class="sect1" id="ch05-idp19469904">
                <p id="ch05-ix_5-actions-asciidoc2" data-type="indexterm" data-primary="action server" data-secondary="basic" smilref="Programming_Robots_with_ROS00005.smil#ch05-ix_5-actions-asciidoc2">Now that we have a definition of the goal, result, and feedback for the timer action, we're ready to write the code that implements it. Like topics and services, actions are a callback-based mechanism, with your code being invoked as a result of receiving messages from another node.</p>
                <p data-type="indexterm" data-primary="SimpleActionServer class" id="ch05-ix_5-actions-asciidoc3">
                  <span class="text" id="span_001084" smilref="Programming_Robots_with_ROS00005.smil#span_001084">The easiest way to build an action server is to use the</span>
                  <code xml:space="preserve" id="code_000510" smilref="Programming_Robots_with_ROS00005.smil#code_000510">SimpleActionServer</code>
                  <span class="text" id="span_001085" smilref="Programming_Robots_with_ROS00005.smil#span_001085">class from the</span>
                  <code xml:space="preserve" id="code_000511" smilref="Programming_Robots_with_ROS00005.smil#code_000511">actionlib</code>
                  <span class="text" id="span_001086" smilref="Programming_Robots_with_ROS00005.smil#span_001086">package. We'll start by defining only the callback that will be invoked when a new goal is sent by an action client. In that callback, we'll do the work of the timer, then return a result when we're done. We'll add feedback reporting in the next step.</span>
                  <a data-type="xref" href="#ch05-simple_action_server" external="false" id="a_000071" smilref="Programming_Robots_with_ROS00005.smil#a_000071">Example 5-2</a>
                  <span class="text" id="span_001087" smilref="Programming_Robots_with_ROS00005.smil#span_001087">shows the code for our first action server.</span>
                </p>
                <h1 id="h1_000096" smilref="Programming_Robots_with_ROS00005.smil#h1_000096">Example 5-2. simple_action_server.py</h1>
                <div id="ch05-simple_action_server" data-type="example">
                  <p id="p_000390">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_000512" smilref="Programming_Robots_with_ROS00005.smil#code_000512">#! /usr/bin/env python
import rospy

import time
import actionlib
from basics.msg import TimerAction, TimerGoal, TimerResult

def do_timer(goal):
    start_time = time.time()
    time.sleep(goal.time_to_wait.to_sec())
    result = TimerResult()
    result.time_elapsed = rospy.Duration.from_sec(time.time() - start_time)
    result.updates_sent = 0
    server.set_succeeded(result)

rospy.init_node('timer_action_server')
server = actionlib.SimpleActionServer('timer', TimerAction, do_timer, False)
server.start()
rospy.spin()</code>
                  </p>
                </div>
                <p id="p_000391">
                  <span class="text" id="span_001088" smilref="Programming_Robots_with_ROS00005.smil#span_001088">Let's step through the key parts of the code. First we import the standard Python</span>
                  <code xml:space="preserve" id="code_000513" smilref="Programming_Robots_with_ROS00005.smil#code_000513">time</code>
                  <span class="text" id="span_001089" smilref="Programming_Robots_with_ROS00005.smil#span_001089">package, which we'll use for the timer functionality of our server. We also import the ROS</span>
                  <code xml:space="preserve" id="code_000514" smilref="Programming_Robots_with_ROS00005.smil#code_000514">actionlib</code>
                  <span class="text" id="span_001090" smilref="Programming_Robots_with_ROS00005.smil#span_001090">package that provides the</span>
                  <code xml:space="preserve" id="code_000515" smilref="Programming_Robots_with_ROS00005.smil#code_000515">SimpleActionServer</code>
                  <span class="text" id="span_001091" smilref="Programming_Robots_with_ROS00005.smil#span_001091">class that we'll be using. Finally, we import some of the message classes that were autogenerated from our</span>
                  <em id="em_000176" smilref="Programming_Robots_with_ROS00005.smil#em_000176">Timer.action</em>
                  <span class="text" id="span_001092" smilref="Programming_Robots_with_ROS00005.smil#span_001092">file:</span>
                </p>
                <p id="p_000392">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000516" smilref="Programming_Robots_with_ROS00005.smil#code_000516">import time
import actionlib
from basics.msg import TimerAction, TimerGoal, TimerResult</code>
                </p>
                <p id="p_000393">
                  <span class="text" id="span_001093" smilref="Programming_Robots_with_ROS00005.smil#span_001093">Next, we define</span>
                  <code xml:space="preserve" id="code_000517" smilref="Programming_Robots_with_ROS00005.smil#code_000517">do_timer()</code>
                  <span class="text" id="span_001094" smilref="Programming_Robots_with_ROS00005.smil#span_001094">, the function that will be invoked when we receive a new goal. In this function, we handle the new goal in-place and set a result before returning. The type of the</span>
                  <code xml:space="preserve" id="code_000518" smilref="Programming_Robots_with_ROS00005.smil#code_000518">goal</code>
                  <span class="text" id="span_001095" smilref="Programming_Robots_with_ROS00005.smil#span_001095">argument that is passed to</span>
                  <code xml:space="preserve" id="code_000519" smilref="Programming_Robots_with_ROS00005.smil#code_000519">do_timer()</code>
                  <span class="text" id="span_001096" smilref="Programming_Robots_with_ROS00005.smil#span_001096">is</span>
                  <code xml:space="preserve" id="code_000520" smilref="Programming_Robots_with_ROS00005.smil#code_000520">TimerGoal</code>
                  <span class="text" id="span_001097" smilref="Programming_Robots_with_ROS00005.smil#span_001097">, which corresponds to the goal part of</span>
                  <em id="em_000177" smilref="Programming_Robots_with_ROS00005.smil#em_000177">Timer.action</em>
                  <span class="text" id="span_001098" smilref="Programming_Robots_with_ROS00005.smil#span_001098">. We save the current time, using the standard Python</span>
                  <code xml:space="preserve" id="code_000521" smilref="Programming_Robots_with_ROS00005.smil#code_000521">time.time()</code>
                  <span class="text" id="span_001099" smilref="Programming_Robots_with_ROS00005.smil#span_001099">function, then sleep for the time requested in the goal, converting the</span>
                  <code xml:space="preserve" id="code_000522" smilref="Programming_Robots_with_ROS00005.smil#code_000522">time_to_wait</code>
                  <span class="text" id="span_001100" smilref="Programming_Robots_with_ROS00005.smil#span_001100">field from a ROS duration to seconds:</span>
                </p>
                <p id="p_000394">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000523" smilref="Programming_Robots_with_ROS00005.smil#code_000523">def do_timer(goal):
    start_time = time.time()
    time.sleep(goal.time_to_wait.to_sec())</code>
                </p>
                <p id="p_000395">
                  <span class="text" id="span_001101" smilref="Programming_Robots_with_ROS00005.smil#span_001101">The next step is to build up the result message, which will be of type</span>
                  <code xml:space="preserve" id="code_000524" smilref="Programming_Robots_with_ROS00005.smil#code_000524">TimerResult</code>
                  <span class="text" id="span_001102" smilref="Programming_Robots_with_ROS00005.smil#span_001102">; this corresponds to the result part of</span>
                  <em id="em_000178" smilref="Programming_Robots_with_ROS00005.smil#em_000178">Timer.action</em>
                  <span class="text" id="span_001103" smilref="Programming_Robots_with_ROS00005.smil#span_001103">. We fill in the</span>
                  <code xml:space="preserve" id="code_000525" smilref="Programming_Robots_with_ROS00005.smil#code_000525">time_elapsed</code>
                  <span class="text" id="span_001104" smilref="Programming_Robots_with_ROS00005.smil#span_001104">field by subtracting our saved start time from the current time, and converting the result to a ROS duration. We set</span>
                  <code xml:space="preserve" id="code_000526" smilref="Programming_Robots_with_ROS00005.smil#code_000526">updates_sent</code>
                  <span class="text" id="span_001105" smilref="Programming_Robots_with_ROS00005.smil#span_001105">to zero, because we didn't send any updates along the way (we'll add that part shortly):</span>
                </p>
                <p id="p_000396">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000527" smilref="Programming_Robots_with_ROS00005.smil#code_000527">    result = TimerResult()
    result.time_elapsed = rospy.Duration.from_sec(time.time() - start_time)
    result.updates_sent = 0</code>
                </p>
                <p id="p_000397">
                  <span class="text" id="span_001106" smilref="Programming_Robots_with_ROS00005.smil#span_001106">Our final step in the callback is to tell the</span>
                  <code xml:space="preserve" id="code_000528" smilref="Programming_Robots_with_ROS00005.smil#code_000528">SimpleActionServer</code>
                  <span class="text" id="span_001107" smilref="Programming_Robots_with_ROS00005.smil#span_001107">that we successfully achieved the goal by calling</span>
                  <code xml:space="preserve" id="code_000529" smilref="Programming_Robots_with_ROS00005.smil#code_000529">set_succeeded()</code>
                  <span class="text" id="span_001108" smilref="Programming_Robots_with_ROS00005.smil#span_001108">and passing it the result. For this simple server, we always succeed; we'll address failure cases later in this chapter:</span>
                </p>
                <p id="p_000398">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000530" smilref="Programming_Robots_with_ROS00005.smil#code_000530">    server.set_succeeded(result)</code>
                </p>
                <p data-type="indexterm" data-primary="autostarting" id="ch05-idp19991600">
                  <span class="text" id="span_001109" smilref="Programming_Robots_with_ROS00005.smil#span_001109">Back in the global scope, we initialize and name our node as usual, then create a</span>
                  <code xml:space="preserve" id="code_000531" smilref="Programming_Robots_with_ROS00005.smil#code_000531">SimpleActionServer</code>
                  <span class="text" id="span_001110" smilref="Programming_Robots_with_ROS00005.smil#span_001110">. The first constructor argument for</span>
                  <code xml:space="preserve" id="code_000532" smilref="Programming_Robots_with_ROS00005.smil#code_000532">SimpleActionServer</code>
                  <span class="text" id="span_001111" smilref="Programming_Robots_with_ROS00005.smil#span_001111">is the server's name, which will determine the namespace into which its constituent topics will be advertised; we'll use</span>
                  <code xml:space="preserve" id="code_000533" smilref="Programming_Robots_with_ROS00005.smil#code_000533">timer</code>
                  <span class="text" id="span_001112" smilref="Programming_Robots_with_ROS00005.smil#span_001112">. The second argument is the type of the action that the server will be handling, which in our case is</span>
                  <code xml:space="preserve" id="code_000534" smilref="Programming_Robots_with_ROS00005.smil#code_000534">TimerAction</code>
                  <span class="text" id="span_001113" smilref="Programming_Robots_with_ROS00005.smil#span_001113">. The third argument is the goal callback, which is the function</span>
                  <code xml:space="preserve" id="code_000535" smilref="Programming_Robots_with_ROS00005.smil#code_000535">do_timer()</code>
                  <span class="text" id="span_001114" smilref="Programming_Robots_with_ROS00005.smil#span_001114">that we defined earlier. Finally, we pass</span>
                  <code xml:space="preserve" id="code_000536" smilref="Programming_Robots_with_ROS00005.smil#code_000536">False</code>
                  <span class="text" id="span_001115" smilref="Programming_Robots_with_ROS00005.smil#span_001115">to disable autostarting the server. Having created the action server, we explicitly</span>
                  <code xml:space="preserve" id="code_000537" smilref="Programming_Robots_with_ROS00005.smil#code_000537">start()</code>
                  <span class="text" id="span_001116" smilref="Programming_Robots_with_ROS00005.smil#span_001116">it, then go into the usual ROS</span>
                  <code xml:space="preserve" id="code_000538" smilref="Programming_Robots_with_ROS00005.smil#code_000538">spin()</code>
                  <span class="text" id="span_001117" smilref="Programming_Robots_with_ROS00005.smil#span_001117">loop to wait for goals to arrive:</span>
                </p>
                <p id="p_000399">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000539" smilref="Programming_Robots_with_ROS00005.smil#code_000539">rospy.init_node('timer_action_server')
server = actionlib.SimpleActionServer('timer', TimerAction, do_timer, False)
server.start()
rospy.spin()</code>
                </p>
                <h1 id="h1_000097" smilref="Programming_Robots_with_ROS00005.smil#h1_000097">Caution</h1>
                <div data-type="caution" id="div_000019">
                  <p id="ch05-idp20131872" data-type="indexterm" data-startref="ix_5-actions-asciidoc3">
                    <span class="text" id="span_001118" smilref="Programming_Robots_with_ROS00005.smil#span_001118">Autostarting should</span>
                    <em id="em_000179" smilref="Programming_Robots_with_ROS00005.smil#em_000179">always</em>
                    <span class="text" id="span_001119" smilref="Programming_Robots_with_ROS00005.smil#span_001119">be disabled on action servers, because it can allow a race condition that leads to puzzling bugs. It was an oversight in the implementation of</span>
                    <code xml:space="preserve" id="code_000540" smilref="Programming_Robots_with_ROS00005.smil#code_000540">actionlib</code>
                    <span class="text" id="span_001120" smilref="Programming_Robots_with_ROS00005.smil#span_001120">to make autostarting the default, but by the time the problem was discovered, there was too much existing code that relied on that default behavior to change it.</span>
                  </p>
                </div>
                <section data-type="sect2" data-pdf-bookmark="Checking That Everything Works as Expected" id="section_000057">
                  <h1 id="h1_000098" smilref="Programming_Robots_with_ROS00005.smil#h1_000098">Checking That Everything Works as Expected</h1>
                  <div class="sect2" id="ch05-idp20132832">
                    <p data-type="indexterm" data-primary="action server" data-secondary="checking" id="ch05-idp20134368">
                      <span class="text" id="span_001121" smilref="Programming_Robots_with_ROS00005.smil#span_001121">Now that we have implemented the action server, we can do a couple of checks to ensure that it's working as expected. Start up a</span>
                      <code xml:space="preserve" id="code_000541" smilref="Programming_Robots_with_ROS00005.smil#code_000541">roscore</code>
                      <span class="text" id="span_001122" smilref="Programming_Robots_with_ROS00005.smil#span_001122">and then run the action server:</span>
                    </p>
                    <p id="p_000400">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000542"><span class="text" id="span_001123" smilref="Programming_Robots_with_ROS00005.smil#span_001123">
user@hostname$ </span><strong id="strong_000058" smilref="Programming_Robots_with_ROS00005.smil#strong_000058">rosrun basics simple_action_server.py</strong>
</code>
                    </p>
                    <p id="p_000401" smilref="Programming_Robots_with_ROS00005.smil#p_000401">Let's check that the expected topics are present:</p>
                    <p id="p_000402">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000543"><span class="text" id="span_001124" smilref="Programming_Robots_with_ROS00005.smil#span_001124">
user@hostname$ </span><strong id="strong_000059" smilref="Programming_Robots_with_ROS00005.smil#strong_000059">rostopic list</strong><span class="text" id="span_001125" smilref="Programming_Robots_with_ROS00005.smil#span_001125">
/rosout
/rosout_agg
/timer/cancel
/timer/feedback
/timer/goal
/timer/result
/timer/status
</span></code>
                    </p>
                    <p id="p_000403">
                      <span class="text" id="span_001126" smilref="Programming_Robots_with_ROS00005.smil#span_001126">That looks good: we can see the five topics in the</span>
                      <code xml:space="preserve" id="code_000544" smilref="Programming_Robots_with_ROS00005.smil#code_000544">timer</code>
                      <span class="text" id="span_001127" smilref="Programming_Robots_with_ROS00005.smil#span_001127">namespace that are used under the hood to manage the action. Let's take a closer look at the</span>
                      <code xml:space="preserve" id="code_000545" smilref="Programming_Robots_with_ROS00005.smil#code_000545">/timer/goal</code>
                      <span class="text" id="span_001128" smilref="Programming_Robots_with_ROS00005.smil#span_001128">topic, using</span>
                      <code xml:space="preserve" id="code_000546" smilref="Programming_Robots_with_ROS00005.smil#code_000546">rostopic</code>
                      <span class="text" id="span_001129" smilref="Programming_Robots_with_ROS00005.smil#span_001129">:</span>
                    </p>
                    <p id="p_000404">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000547"><span class="text" id="span_001130" smilref="Programming_Robots_with_ROS00005.smil#span_001130">
user@hostname$ </span><strong id="strong_000060" smilref="Programming_Robots_with_ROS00005.smil#strong_000060">rostopic info /timer/goal</strong><span class="text" id="span_001131" smilref="Programming_Robots_with_ROS00005.smil#span_001131">
Type: basics/TimerActionGoal

Publishers: None

Subscribers:
 * /timer_action_server (http://localhost:63174/)

</span></code>
                    </p>
                    <p id="p_000405">
                      <span class="text" id="span_001132" smilref="Programming_Robots_with_ROS00005.smil#span_001132">What's a</span>
                      <code xml:space="preserve" id="code_000548" smilref="Programming_Robots_with_ROS00005.smil#code_000548">TimerActionGoal</code>
                      <span class="text" id="span_001133" smilref="Programming_Robots_with_ROS00005.smil#span_001133">? Let's dig in further, now with</span>
                      <code xml:space="preserve" id="code_000549" smilref="Programming_Robots_with_ROS00005.smil#code_000549">rosmsg</code>
                      <span class="text" id="span_001134" smilref="Programming_Robots_with_ROS00005.smil#span_001134">:</span>
                    </p>
                    <p id="p_000406">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000550"><span class="text" id="span_001135" smilref="Programming_Robots_with_ROS00005.smil#span_001135">
user@hostname$ </span><strong id="strong_000061" smilref="Programming_Robots_with_ROS00005.smil#strong_000061">rosmsg show TimerActionGoal</strong><span class="text" id="span_001136" smilref="Programming_Robots_with_ROS00005.smil#span_001136">
[basics/TimerActionGoal]:
std_msgs/Header header
  uint32 seq
  time stamp
  string frame_id
actionlib_msgs/GoalID goal_id
  time stamp
  string id
basics/TimerGoal goal
  duration time_to_wait
</span></code>
                    </p>
                    <p id="p_000407">
                      <span class="text" id="span_001137" smilref="Programming_Robots_with_ROS00005.smil#span_001137">Interesting; we can see our goal definition in there, as the</span>
                      <code xml:space="preserve" id="code_000551" smilref="Programming_Robots_with_ROS00005.smil#code_000551">goal.time_to_wait</code>
                      <span class="text" id="span_001138" smilref="Programming_Robots_with_ROS00005.smil#span_001138">field, but there are also some extra fields that we didn't specify. Those extra fields are used by the action server and client code to keep track of what's happening. Fortunately, that bookkeeping information is automatically stripped away before our server code sees a goal message. While a</span>
                      <code xml:space="preserve" id="code_000552" smilref="Programming_Robots_with_ROS00005.smil#code_000552">TimerActionGoal</code>
                      <span class="text" id="span_001139" smilref="Programming_Robots_with_ROS00005.smil#span_001139">message is sent over the wire, what we see in our goal execution is a bare</span>
                      <code xml:space="preserve" id="code_000553" smilref="Programming_Robots_with_ROS00005.smil#code_000553">TimerGoal</code>
                      <span class="text" id="span_001140" smilref="Programming_Robots_with_ROS00005.smil#span_001140">message, which is just what we defined in our</span>
                      <em id="em_000180" smilref="Programming_Robots_with_ROS00005.smil#em_000180">.action</em>
                      <span class="text" id="span_001141" smilref="Programming_Robots_with_ROS00005.smil#span_001141">file:</span>
                    </p>
                    <p id="p_000408">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000554"><span class="text" id="span_001142" smilref="Programming_Robots_with_ROS00005.smil#span_001142">
user@hostname$ </span><strong id="strong_000062" smilref="Programming_Robots_with_ROS00005.smil#strong_000062">rosmsg show TimerGoal</strong><span class="text" id="span_001143" smilref="Programming_Robots_with_ROS00005.smil#span_001143">
[basics/TimerGoal]:
duration time_to_wait
</span></code>
                    </p>
                    <p id="p_000409">
                      <span class="text" id="span_001144" smilref="Programming_Robots_with_ROS00005.smil#span_001144">In general, if you're using the libraries in the</span>
                      <code xml:space="preserve" id="code_000555" smilref="Programming_Robots_with_ROS00005.smil#code_000555">actionlib</code>
                      <span class="text" id="span_001145" smilref="Programming_Robots_with_ROS00005.smil#span_001145">package, you should not need to access the autogenerated messages with</span>
                      <code xml:space="preserve" id="code_000556" smilref="Programming_Robots_with_ROS00005.smil#code_000556">Action</code>
                      <span class="text" id="span_001146" smilref="Programming_Robots_with_ROS00005.smil#span_001146">in their type name. The bare</span>
                      <code xml:space="preserve" id="code_000557" smilref="Programming_Robots_with_ROS00005.smil#code_000557">Goal</code>
                      <span class="text" id="span_001147" smilref="Programming_Robots_with_ROS00005.smil#span_001147">,</span>
                      <code xml:space="preserve" id="code_000558" smilref="Programming_Robots_with_ROS00005.smil#code_000558">Result</code>
                      <span class="text" id="span_001148" smilref="Programming_Robots_with_ROS00005.smil#span_001148">, and</span>
                      <code xml:space="preserve" id="code_000559" smilref="Programming_Robots_with_ROS00005.smil#code_000559">Feedback</code>
                      <span class="text" id="span_001149" smilref="Programming_Robots_with_ROS00005.smil#span_001149">messages should suffice.</span>
                    </p>
                    <p id="ch05-idp20152448" data-type="indexterm" data-startref="ix_5-actions-asciidoc2">
                      <span class="text" id="span_001150" smilref="Programming_Robots_with_ROS00005.smil#span_001150">If you like, you can publish and subscribe directly to an action server's topics using the autogenerated</span>
                      <code xml:space="preserve" id="code_000560" smilref="Programming_Robots_with_ROS00005.smil#code_000560">Action</code>
                      <span class="text" id="span_001151" smilref="Programming_Robots_with_ROS00005.smil#span_001151">message types. This is a nice feature of ROS actions: they are just a higher-level protocol built on top of ROS messages. But for most applications (including everything that we'll cover in this book), the</span>
                      <code xml:space="preserve" id="code_000561" smilref="Programming_Robots_with_ROS00005.smil#code_000561">actionlib</code>
                      <span class="text" id="span_001152" smilref="Programming_Robots_with_ROS00005.smil#span_001152">libraries will do the job, handling the underlying messages for you behind the scenes.</span>
                    </p>
                  </div>
                </section>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Using an Action" id="section_000058">
              <h1 id="h1_000099" smilref="Programming_Robots_with_ROS00005.smil#h1_000099">Using an Action</h1>
              <div class="sect1" id="ch05-idp19749968">
                <p data-type="indexterm" data-primary="actions" data-secondary="using" id="ch05-ix_5-actions-asciidoc4">
                  <span class="text" id="span_001153" smilref="Programming_Robots_with_ROS00005.smil#span_001153">The easiest way to use an action is via the</span>
                  <code xml:space="preserve" id="code_000562" smilref="Programming_Robots_with_ROS00005.smil#code_000562">SimpleActionClient</code>
                  <span class="text" id="span_001154" smilref="Programming_Robots_with_ROS00005.smil#span_001154">class from the</span>
                  <code id="ch05-idp20156032" xml:space="preserve" smilref="Programming_Robots_with_ROS00005.smil#ch05-idp20156032">actionlib</code>
                  <span class="text" id="span_001155" smilref="Programming_Robots_with_ROS00005.smil#span_001155">package.</span>
                  <a data-type="xref" href="#ch05-simple_action_client" external="false" id="a_000072" smilref="Programming_Robots_with_ROS00005.smil#a_000072">Example 5-3</a>
                  <span class="text" id="span_001156" smilref="Programming_Robots_with_ROS00005.smil#span_001156">shows a simple client that sends a goal to our action server and waits for the result.</span>
                </p>
                <h1 id="h1_000100" smilref="Programming_Robots_with_ROS00005.smil#h1_000100">Example 5-3. simple_action_client.py</h1>
                <div id="ch05-simple_action_client" data-type="example">
                  <p id="p_000410">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_000563" smilref="Programming_Robots_with_ROS00005.smil#code_000563">#! /usr/bin/env python
import rospy

import actionlib
from basics.msg import TimerAction, TimerGoal, TimerResult

rospy.init_node('timer_action_client')
client = actionlib.SimpleActionClient('timer', TimerAction)
client.wait_for_server()
goal = TimerGoal()
goal.time_to_wait = rospy.Duration.from_sec(5.0)
client.send_goal(goal)
client.wait_for_result()
print('Time elapsed: %f'%(client.get_result().time_elapsed.to_sec()))</code>
                  </p>
                </div>
                <p id="p_000411">
                  <span class="text" id="span_001157" smilref="Programming_Robots_with_ROS00005.smil#span_001157">Let's step through the key parts of the code. Following the usual imports and initialization of our ROS node, we create a</span>
                  <code xml:space="preserve" id="code_000564" smilref="Programming_Robots_with_ROS00005.smil#code_000564">SimpleActionClient</code>
                  <span class="text" id="span_001158" smilref="Programming_Robots_with_ROS00005.smil#span_001158">. The first constructor argument is the name of the action server, which the client will use to determine the topics that it will use when communicating with the server. This name must match the one that we used in creating the server, which is</span>
                  <code xml:space="preserve" id="code_000565" smilref="Programming_Robots_with_ROS00005.smil#code_000565">timer</code>
                  <span class="text" id="span_001159" smilref="Programming_Robots_with_ROS00005.smil#span_001159">. The second argument is the type of the action, which must also match the server:</span>
                  <code xml:space="preserve" id="code_000566" smilref="Programming_Robots_with_ROS00005.smil#code_000566">TimerAction</code>
                  <span class="text" id="span_001160" smilref="Programming_Robots_with_ROS00005.smil#span_001160">.</span>
                </p>
                <p id="p_000412">
                  <span class="text" id="span_001161" smilref="Programming_Robots_with_ROS00005.smil#span_001161">Having created the client, we tell it to wait for the action server to come up, which it does by checking for the five advertised topics that we saw earlier when testing the server. Similar to</span>
                  <code xml:space="preserve" id="code_000567" smilref="Programming_Robots_with_ROS00005.smil#code_000567">rospy.wait_for_service()</code>
                  <span class="text" id="span_001162" smilref="Programming_Robots_with_ROS00005.smil#span_001162">, which we used to wait for a service to be ready,</span>
                  <code xml:space="preserve" id="code_000568" smilref="Programming_Robots_with_ROS00005.smil#code_000568">SimpleActionClient.wait_for_server()</code>
                  <span class="text" id="span_001163" smilref="Programming_Robots_with_ROS00005.smil#span_001163">will block until the server is ready:</span>
                </p>
                <p id="p_000413">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000569" smilref="Programming_Robots_with_ROS00005.smil#code_000569">client = actionlib.SimpleActionClient('timer', TimerAction)
client.wait_for_server()</code>
                </p>
                <p id="p_000414">
                  <span class="text" id="span_001164" smilref="Programming_Robots_with_ROS00005.smil#span_001164">Now we create a goal of type</span>
                  <code xml:space="preserve" id="code_000570" smilref="Programming_Robots_with_ROS00005.smil#code_000570">TimerGoal</code>
                  <span class="text" id="span_001165" smilref="Programming_Robots_with_ROS00005.smil#span_001165">and fill in the amount of time we want the timer to wait, which is five seconds. Then we send the goal, which causes the transmission of the goal message to the server:</span>
                </p>
                <p id="p_000415">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000571" smilref="Programming_Robots_with_ROS00005.smil#code_000571">goal = TimerGoal()
goal.time_to_wait = rospy.Duration.from_sec(5.0)
client.send_goal(goal)</code>
                </p>
                <p id="p_000416">
                  <span class="text" id="span_001166" smilref="Programming_Robots_with_ROS00005.smil#span_001166">Next, we wait for a result from the server. If things are working properly, we expect to block here for about five seconds. After the result comes in, we use</span>
                  <code xml:space="preserve" id="code_000572" smilref="Programming_Robots_with_ROS00005.smil#code_000572">get_result()</code>
                  <span class="text" id="span_001167" smilref="Programming_Robots_with_ROS00005.smil#span_001167">to retrieve it from within the client object and print out the</span>
                  <code xml:space="preserve" id="code_000573" smilref="Programming_Robots_with_ROS00005.smil#code_000573">time_elapsed</code>
                  <span class="text" id="span_001168" smilref="Programming_Robots_with_ROS00005.smil#span_001168">field that was reported by the server:</span>
                </p>
                <p id="p_000417">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000574" smilref="Programming_Robots_with_ROS00005.smil#code_000574">client.wait_for_result()
print('Time elapsed: %f'%(client.get_result().time_elapsed.to_sec()))</code>
                </p>
                <section data-type="sect2" data-pdf-bookmark="Checking That Everything Works as Expected" id="section_000059">
                  <h1 id="h1_000101" smilref="Programming_Robots_with_ROS00005.smil#h1_000101">Checking That Everything Works as Expected</h1>
                  <div class="sect2" id="ch05-idp20500512">
                    <p data-type="indexterm" data-primary="actions" data-secondary="checking with action client" id="ch05-idp20502112">
                      <span class="text" id="span_001169" smilref="Programming_Robots_with_ROS00005.smil#span_001169">Now that we have implemented the action client, we can get to work. Make sure that your</span>
                      <code xml:space="preserve" id="code_000575" smilref="Programming_Robots_with_ROS00005.smil#code_000575">roscore</code>
                      <span class="text" id="span_001170" smilref="Programming_Robots_with_ROS00005.smil#span_001170">and action server are still running, then run the action client:</span>
                    </p>
                    <p id="p_000418">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000576"><span class="text" id="span_001171" smilref="Programming_Robots_with_ROS00005.smil#span_001171">
user@hostname$ </span><strong id="strong_000063" smilref="Programming_Robots_with_ROS00005.smil#strong_000063">rosrun basics simple_action_client.py</strong><span class="text" id="span_001172" smilref="Programming_Robots_with_ROS00005.smil#span_001172">
Time elapsed: 5.001044
</span></code>
                    </p>
                    <p id="ch05-idp20505824" data-type="indexterm" data-startref="ix_5-actions-asciidoc4">
                      <span class="text" id="span_001173" smilref="Programming_Robots_with_ROS00005.smil#span_001173">Between the invocation of the client and the printing of the result data, you should see a delay of approximately five seconds, as requested. The time elapsed should be slightly more than five seconds, because a call to</span>
                      <code xml:space="preserve" id="code_000577" smilref="Programming_Robots_with_ROS00005.smil#code_000577">time.sleep()</code>
                      <span class="text" id="span_001174" smilref="Programming_Robots_with_ROS00005.smil#span_001174">will usually take a little longer than requested.</span>
                    </p>
                  </div>
                </section>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Implementing a More Sophisticated Action Server" id="section_000060">
              <h1 id="h1_000102" smilref="Programming_Robots_with_ROS00005.smil#h1_000102">Implementing a More Sophisticated Action Server</h1>
              <div class="sect1" id="ch05-idp20153744">
                <p id="p_000419">
                  <span class="text" id="span_001175" smilref="Programming_Robots_with_ROS00005.smil#span_001175">508.450So far, actions look a lot like services, just with more configuration and setup. Now it's time to exercise the asynchronous aspects of actions that set them apart from services. We'll start on the server side, making some changes that demonstrate how to abort a goal, how to handle a goal preemption request, and how to provide feedback while pursuing a goal.</span>
                  <a data-type="xref" href="#ch05-fancy_action_server" external="false" id="a_000073" smilref="Programming_Robots_with_ROS00005.smil#a_000073">Example 5-4</a>
                  <span class="text" id="span_001176" smilref="Programming_Robots_with_ROS00005.smil#span_001176">shows the code for our improved action server.</span>
                </p>
                <h1 id="h1_000103" smilref="Programming_Robots_with_ROS00005.smil#h1_000103">Example 5-4. fancy_action_server.py</h1>
                <div id="ch05-fancy_action_server" data-type="example">
                  <p id="p_000420">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_000578" smilref="Programming_Robots_with_ROS00005.smil#code_000578">#! /usr/bin/env python
import rospy

import time
import actionlib
from basics.msg import TimerAction, TimerGoal, TimerResult, TimerFeedback

def do_timer(goal):
    start_time = time.time()
    update_count = 0

    if goal.time_to_wait.to_sec() &gt; 60.0:
        result = TimerResult()
        result.time_elapsed = rospy.Duration.from_sec(time.time() - start_time)
        result.updates_sent = update_count
        server.set_aborted(result, "Timer aborted due to too-long wait")
        return

    while (time.time() - start_time) &lt; goal.time_to_wait.to_sec():

        if server.is_preempt_requested():
            result = TimerResult()
            result.time_elapsed = \
                rospy.Duration.from_sec(time.time() - start_time)
            result.updates_sent = update_count
            server.set_preempted(result, "Timer preempted")
            return

        feedback = TimerFeedback()
        feedback.time_elapsed = rospy.Duration.from_sec(time.time() - start_time)
        feedback.time_remaining = goal.time_to_wait - feedback.time_elapsed
        server.publish_feedback(feedback)
        update_count += 1

        time.sleep(1.0)

    result = TimerResult()
    result.time_elapsed = rospy.Duration.from_sec(time.time() - start_time)
    result.updates_sent = update_count
    server.set_succeeded(result, "Timer completed successfully")

rospy.init_node('timer_action_server')
server = actionlib.SimpleActionServer('timer', TimerAction, do_timer, False)
server.start()
rospy.spin()</code>
                  </p>
                </div>
                <p data-type="indexterm" data-primary="feedback" id="ch05-idp20519344">
                  <span class="text" id="span_001177" smilref="Programming_Robots_with_ROS00005.smil#span_001177">Let's step through the changes with respect to</span>
                  <a data-type="xref" href="#ch05-simple_action_server" external="false" id="a_000074" smilref="Programming_Robots_with_ROS00005.smil#a_000074">Example 5-2</a>
                  <span class="text" id="span_001178" smilref="Programming_Robots_with_ROS00005.smil#span_001178">. Because we will be providing feedback, we add</span>
                  <code xml:space="preserve" id="code_000579" smilref="Programming_Robots_with_ROS00005.smil#code_000579">TimerFeedback</code>
                  <span class="text" id="span_001179" smilref="Programming_Robots_with_ROS00005.smil#span_001179">to the list of message types that we import:</span>
                </p>
                <p id="p_000421">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000580" smilref="Programming_Robots_with_ROS00005.smil#code_000580">from basics.msg import TimerAction, TimerGoal, TimerResult, TimerFeedback</code>
                </p>
                <p id="p_000422">
                  <span class="text" id="span_001180" smilref="Programming_Robots_with_ROS00005.smil#span_001180">Stepping inside our</span>
                  <code xml:space="preserve" id="code_000581" smilref="Programming_Robots_with_ROS00005.smil#code_000581">do_timer()</code>
                  <span class="text" id="span_001181" smilref="Programming_Robots_with_ROS00005.smil#span_001181">callback, we add a variable that will keep track of how many times we publish feedback:</span>
                </p>
                <p id="p_000423">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000582" smilref="Programming_Robots_with_ROS00005.smil#code_000582">    update_count = 0</code>
                </p>
                <p id="p_000424">
                  <span class="text" id="span_001182" smilref="Programming_Robots_with_ROS00005.smil#span_001182">Next, we add some error checking. We don't want this timer to be used for long waits, so we check whether the requested</span>
                  <code xml:space="preserve" id="code_000583" smilref="Programming_Robots_with_ROS00005.smil#code_000583">time_to_wait</code>
                  <span class="text" id="span_001183" smilref="Programming_Robots_with_ROS00005.smil#span_001183">is greater than 60 seconds, and if so, we explicitly abort the goal by calling</span>
                  <code xml:space="preserve" id="code_000584" smilref="Programming_Robots_with_ROS00005.smil#code_000584">set_aborted()</code>
                  <span class="text" id="span_001184" smilref="Programming_Robots_with_ROS00005.smil#span_001184">. This call sends a message to the client notifying it that the goal has been aborted. Like with</span>
                  <code xml:space="preserve" id="code_000585" smilref="Programming_Robots_with_ROS00005.smil#code_000585">set_succeeded()</code>
                  <span class="text" id="span_001185" smilref="Programming_Robots_with_ROS00005.smil#span_001185">, we include a result; doing this is optional, but a good idea if possible. We also include a status string to help the client understand what happened; in this case, we aborted because the requested wait was too long. Finally, we return from the callback because we're done with this goal:</span>
                </p>
                <p id="p_000425">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000586" smilref="Programming_Robots_with_ROS00005.smil#code_000586">    if goal.time_to_wait.to_sec() &gt; 60.0:
        result = TimerResult()
        result.time_elapsed = rospy.Duration.from_sec(time.time() - start_time)
        result.updates_sent = update_count
        server.set_aborted(result, "Timer aborted due to too-long wait")
        return</code>
                </p>
                <p id="p_000426" smilref="Programming_Robots_with_ROS00005.smil#p_000426">Now that we're past the error check, instead of just sleeping for the requested time in one shot, we're going to loop, sleeping in increments. This allows us to do things while we're working toward the goal, such as checking for preemption and providing feedback:</p>
                <p id="p_000427">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000587" smilref="Programming_Robots_with_ROS00005.smil#code_000587">    while (time.time() - start_time) &lt; goal.time_to_wait.to_sec():</code>
                </p>
                <p id="p_000428">
                  <span class="text" id="span_001186" smilref="Programming_Robots_with_ROS00005.smil#span_001186">In the loop, we first check for preemption by asking the server</span>
                  <code xml:space="preserve" id="code_000588" smilref="Programming_Robots_with_ROS00005.smil#code_000588">is_preempt_requested()</code>
                  <span class="text" id="span_001187" smilref="Programming_Robots_with_ROS00005.smil#span_001187">. This function will return</span>
                  <code xml:space="preserve" id="code_000589" smilref="Programming_Robots_with_ROS00005.smil#code_000589">True</code>
                  <span class="text" id="span_001188" smilref="Programming_Robots_with_ROS00005.smil#span_001188">if the client has requested that we stop pursuing the goal (this could also happen if a second client sends us a new goal). If so, similar to the abort case, we fill in a result and provide a status string, this time calling</span>
                  <code xml:space="preserve" id="code_000590" smilref="Programming_Robots_with_ROS00005.smil#code_000590">set_preempted()</code>
                  <span class="text" id="span_001189" smilref="Programming_Robots_with_ROS00005.smil#span_001189">:</span>
                </p>
                <p id="p_000429">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000591" smilref="Programming_Robots_with_ROS00005.smil#code_000591">        if server.is_preempt_requested():
            result = TimerResult()
            result.time_elapsed = \
                rospy.Duration.from_sec(time.time() - start_time)
            result.updates_sent = update_count
            server.set_preempted(result, "Timer preempted")
            return</code>
                </p>
                <p id="p_000430">
                  <span class="text" id="span_001190" smilref="Programming_Robots_with_ROS00005.smil#span_001190">Next we send feedback, using the type</span>
                  <code xml:space="preserve" id="code_000592" smilref="Programming_Robots_with_ROS00005.smil#code_000592">TimerFeedback</code>
                  <span class="text" id="span_001191" smilref="Programming_Robots_with_ROS00005.smil#span_001191">, which corresponds to the feedback part of</span>
                  <em id="em_000181" smilref="Programming_Robots_with_ROS00005.smil#em_000181">Timer.action</em>
                  <span class="text" id="span_001192" smilref="Programming_Robots_with_ROS00005.smil#span_001192">. We fill in the</span>
                  <code xml:space="preserve" id="code_000593" smilref="Programming_Robots_with_ROS00005.smil#code_000593">time_elapsed</code>
                  <span class="text" id="span_001193" smilref="Programming_Robots_with_ROS00005.smil#span_001193">and</span>
                  <code xml:space="preserve" id="code_000594" smilref="Programming_Robots_with_ROS00005.smil#code_000594">time_remaining</code>
                  <span class="text" id="span_001194" smilref="Programming_Robots_with_ROS00005.smil#span_001194">fields, then call</span>
                  <code xml:space="preserve" id="code_000595" smilref="Programming_Robots_with_ROS00005.smil#code_000595">publish_feedback()</code>
                  <span class="text" id="span_001195" smilref="Programming_Robots_with_ROS00005.smil#span_001195">to send it to the client. We also increment</span>
                  <code xml:space="preserve" id="code_000596" smilref="Programming_Robots_with_ROS00005.smil#code_000596">update_count</code>
                  <span class="text" id="span_001196" smilref="Programming_Robots_with_ROS00005.smil#span_001196">to reflect the fact that we sent another update:</span>
                </p>
                <p id="p_000431">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000597" smilref="Programming_Robots_with_ROS00005.smil#code_000597">        feedback = TimerFeedback()
        feedback.time_elapsed = rospy.Duration.from_sec(time.time() - start_time)
        feedback.time_remaining = goal.time_to_wait - feedback.time_elapsed
        server.publish_feedback(feedback)
        update_count += 1</code>
                </p>
                <p id="p_000432" smilref="Programming_Robots_with_ROS00005.smil#p_000432">Then we sleep a little and loop. Sleeping for a fixed amount of time here is not the right way to implement a timer, as we could easily end up sleeping longer than requested, but it makes for a simpler example:</p>
                <p id="p_000433">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000598" smilref="Programming_Robots_with_ROS00005.smil#code_000598">        time.sleep(1.0)</code>
                </p>
                <p id="p_000434">
                  <span class="text" id="span_001197" smilref="Programming_Robots_with_ROS00005.smil#span_001197">Exiting the loop means that we've successfully slept for the requested duration, so it's time to notify the client that we're done. This step is very similar to the simple action server, except that we fill in the</span>
                  <code xml:space="preserve" id="code_000599" smilref="Programming_Robots_with_ROS00005.smil#code_000599">updates_sent</code>
                  <span class="text" id="span_001198" smilref="Programming_Robots_with_ROS00005.smil#span_001198">field and add a status string:</span>
                </p>
                <p id="p_000435">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000600" smilref="Programming_Robots_with_ROS00005.smil#code_000600">    result = TimerResult()
    result.time_elapsed = rospy.Duration.from_sec(time.time() - start_time)
    result.updates_sent = update_count
    server.set_succeeded(result, "Timer completed successfully")</code>
                </p>
                <p id="p_000436">
                  <span class="text" id="span_001199" smilref="Programming_Robots_with_ROS00005.smil#span_001199">The rest of the code is unchanged from</span>
                  <a data-type="xref" href="#ch05-simple_action_server" external="false" id="a_000075" smilref="Programming_Robots_with_ROS00005.smil#a_000075">Example 5-2</a>
                  <span class="text" id="span_001200" smilref="Programming_Robots_with_ROS00005.smil#span_001200">: initialize the node, create and start the action server, then wait for goals.</span>
                </p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Using the More Sophisticated Action" id="section_000061">
              <h1 id="h1_000104" smilref="Programming_Robots_with_ROS00005.smil#h1_000104">Using the More Sophisticated Action</h1>
              <div class="sect1" id="ch05-idp20507568">
                <p id="ch05-idp21090096" data-type="indexterm" data-primary="action server" data-secondary="more sophisticated">
                  <span class="text" id="span_001201" smilref="Programming_Robots_with_ROS00005.smil#span_001201">Now we'll modify the action client to try out the new capabilities that we added to the action server: we'll process feedback, preempt a goal, and trigger an abort.</span>
                  <a data-type="xref" href="#ch05-fancy_action_client" external="false" id="a_000076" smilref="Programming_Robots_with_ROS00005.smil#a_000076">Example 5-5</a>
                  <span class="text" id="span_001202" smilref="Programming_Robots_with_ROS00005.smil#span_001202">shows the code for our improved action client.</span>
                </p>
                <h1 id="h1_000105" smilref="Programming_Robots_with_ROS00005.smil#h1_000105">Example 5-5. fancy_action_client.py</h1>
                <div id="ch05-fancy_action_client" data-type="example">
                  <p id="p_000437">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_000601" smilref="Programming_Robots_with_ROS00005.smil#code_000601">#! /usr/bin/env python
import rospy

import time
import actionlib
from basics.msg import TimerAction, TimerGoal, TimerResult, TimerFeedback

def feedback_cb(feedback):
    print('[Feedback] Time elapsed: %f'%(feedback.time_elapsed.to_sec()))
    print('[Feedback] Time remaining: %f'%(feedback.time_remaining.to_sec()))

rospy.init_node('timer_action_client')
client = actionlib.SimpleActionClient('timer', TimerAction)
client.wait_for_server()

goal = TimerGoal()
goal.time_to_wait = rospy.Duration.from_sec(5.0)
# Uncomment this line to test server-side abort:
#goal.time_to_wait = rospy.Duration.from_sec(500.0)
client.send_goal(goal, feedback_cb=feedback_cb)

# Uncomment these lines to test goal preemption:
#time.sleep(3.0)
#client.cancel_goal()

client.wait_for_result()
print('[Result] State: %d'%(client.get_state()))
print('[Result] Status: %s'%(client.get_goal_status_text()))
print('[Result] Time elapsed: %f'%(client.get_result().time_elapsed.to_sec()))
print('[Result] Updates sent: %d'%(client.get_result().updates_sent))</code>
                  </p>
                </div>
                <p id="p_000438">
                  <span class="text" id="span_001203" smilref="Programming_Robots_with_ROS00005.smil#span_001203">Let's step through the changes with respect to</span>
                  <a data-type="xref" href="#ch05-simple_action_client" external="false" id="a_000077" smilref="Programming_Robots_with_ROS00005.smil#a_000077">Example 5-3</a>
                  <span class="text" id="span_001204" smilref="Programming_Robots_with_ROS00005.smil#span_001204">. We define a callback,</span>
                  <code xml:space="preserve" id="code_000602" smilref="Programming_Robots_with_ROS00005.smil#code_000602">feedback_cb()</code>
                  <span class="text" id="span_001205" smilref="Programming_Robots_with_ROS00005.smil#span_001205">, that will be invoked when we receive a feedback message. In this callback we just print the contents of the feedback:</span>
                </p>
                <p id="p_000439">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000603" smilref="Programming_Robots_with_ROS00005.smil#code_000603">def feedback_cb(feedback):
    print('[Feedback] Time elapsed: %f'%(feedback.time_elapsed.to_sec()))
    print('[Feedback] Time remaining: %f'%(feedback.time_remaining.to_sec()))</code>
                </p>
                <p id="p_000440">
                  <span class="text" id="span_001206" smilref="Programming_Robots_with_ROS00005.smil#span_001206">We register our feedback callback by passing it as the</span>
                  <code xml:space="preserve" id="code_000604" smilref="Programming_Robots_with_ROS00005.smil#code_000604">feedback_cb</code>
                  <span class="text" id="span_001207" smilref="Programming_Robots_with_ROS00005.smil#span_001207">keyword argument when calling</span>
                  <code xml:space="preserve" id="code_000605" smilref="Programming_Robots_with_ROS00005.smil#code_000605">send_goal()</code>
                  <span class="text" id="span_001208" smilref="Programming_Robots_with_ROS00005.smil#span_001208">:</span>
                </p>
                <p id="p_000441">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000606" smilref="Programming_Robots_with_ROS00005.smil#code_000606">client.send_goal(goal, feedback_cb=feedback_cb)</code>
                </p>
                <p id="p_000442">
                  <span class="text" id="span_001209" smilref="Programming_Robots_with_ROS00005.smil#span_001209">After receiving the result, we print a little more information to show what happened. The</span>
                  <code xml:space="preserve" id="code_000607" smilref="Programming_Robots_with_ROS00005.smil#code_000607">get_state()</code>
                  <span class="text" id="span_001210" smilref="Programming_Robots_with_ROS00005.smil#span_001210">function returns the state of the goal, which is an enumeration that is defined in</span>
                  <code xml:space="preserve" id="code_000608" smilref="Programming_Robots_with_ROS00005.smil#code_000608">actionlib_msgs/GoalStatus</code>
                  <span class="text" id="span_001211" smilref="Programming_Robots_with_ROS00005.smil#span_001211">. While there are 10 possible states, in this example we'll encounter only three:</span>
                  <code xml:space="preserve" id="code_000609" smilref="Programming_Robots_with_ROS00005.smil#code_000609">PREEMPTED=2</code>
                  <span class="text" id="span_001212" smilref="Programming_Robots_with_ROS00005.smil#span_001212">,</span>
                  <code xml:space="preserve" id="code_000610" smilref="Programming_Robots_with_ROS00005.smil#code_000610">SUCCEEDED=3</code>
                  <span class="text" id="span_001213" smilref="Programming_Robots_with_ROS00005.smil#span_001213">, and</span>
                  <code xml:space="preserve" id="code_000611" smilref="Programming_Robots_with_ROS00005.smil#code_000611">ABORTED=4</code>
                  <span class="text" id="span_001214" smilref="Programming_Robots_with_ROS00005.smil#span_001214">. We also print the status text that was included by the server with the result:</span>
                </p>
                <p id="p_000443">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000612" smilref="Programming_Robots_with_ROS00005.smil#code_000612">print('[Result] State: %d'%(client.get_state()))
print('[Result] Status: %s'%(client.get_goal_status_text()))
print('[Result] Time elapsed: %f'%(client.get_result().time_elapsed.to_sec()))
print('[Result] Updates sent: %d'%(client.get_result().updates_sent))</code>
                </p>
                <section data-type="sect2" data-pdf-bookmark="Checking That Everything Works as Expected" id="section_000062">
                  <h1 id="h1_000106" smilref="Programming_Robots_with_ROS00005.smil#h1_000106">Checking That Everything Works as Expected</h1>
                  <div class="sect2" id="ch05-idp21444048">
                    <p data-type="indexterm" data-primary="action server" data-secondary="checking" id="ch05-idp21361664">
                      <span class="text" id="span_001215" smilref="Programming_Robots_with_ROS00005.smil#span_001215">Let's try out our new server and client. As before, start up a</span>
                      <code xml:space="preserve" id="code_000613" smilref="Programming_Robots_with_ROS00005.smil#code_000613">roscore</code>
                      <span class="text" id="span_001216" smilref="Programming_Robots_with_ROS00005.smil#span_001216">, then run the server:</span>
                    </p>
                    <p id="p_000444">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000614"><span class="text" id="span_001217" smilref="Programming_Robots_with_ROS00005.smil#span_001217">
user@hostname$ </span><strong id="strong_000064" smilref="Programming_Robots_with_ROS00005.smil#strong_000064">rosrun basics fancy_action_server.py</strong>
</code>
                    </p>
                    <p id="p_000445" smilref="Programming_Robots_with_ROS00005.smil#p_000445">In another terminal, run the client:</p>
                    <p id="p_000446">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000615"><span class="text" id="span_001218" smilref="Programming_Robots_with_ROS00005.smil#span_001218">
user@hostname$ </span><strong id="strong_000065" smilref="Programming_Robots_with_ROS00005.smil#strong_000065">rosrun basics fancy_action_client.py</strong><span class="text" id="span_001219" smilref="Programming_Robots_with_ROS00005.smil#span_001219">
[Feedback] Time elapsed: 0.000044
[Feedback] Time remaining: 4.999956
[Feedback] Time elapsed: 1.001626
[Feedback] Time remaining: 3.998374
[Feedback] Time elapsed: 2.003189
[Feedback] Time remaining: 2.996811
[Feedback] Time elapsed: 3.004825
[Feedback] Time remaining: 1.995175
[Feedback] Time elapsed: 4.006477
[Feedback] Time remaining: 0.993523
[Result] State: 3
[Result] Status: Timer completed successfully
[Result] Time elapsed: 5.008076
[Result] Updates sent: 5
</span></code>
                    </p>
                    <p id="p_000447">
                      <span class="text" id="span_001220" smilref="Programming_Robots_with_ROS00005.smil#span_001220">Everything works as expected: while waiting, we receive one feedback update per second, then we receive a successful result (</span>
                      <code xml:space="preserve" id="code_000616" smilref="Programming_Robots_with_ROS00005.smil#code_000616">SUCCEEDED=3</code>
                      <span class="text" id="span_001221" smilref="Programming_Robots_with_ROS00005.smil#span_001221">).</span>
                    </p>
                    <p data-type="indexterm" data-primary="goals" data-secondary="preempting" id="ch05-idp21367568">
                      <span class="text" id="span_001222" smilref="Programming_Robots_with_ROS00005.smil#span_001222">Now let's try preempting a goal. In the client, following the call to</span>
                      <code xml:space="preserve" id="code_000617" smilref="Programming_Robots_with_ROS00005.smil#code_000617">send_goal()</code>
                      <span class="text" id="span_001223" smilref="Programming_Robots_with_ROS00005.smil#span_001223">, uncomment these two lines, which will cause the client to sleep briefly, then request that the server preempt the goal:</span>
                    </p>
                    <p id="p_000448">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000618" smilref="Programming_Robots_with_ROS00005.smil#code_000618"># Uncomment these lines to test goal preemption:
#time.sleep(3.0)
#client.cancel_goal()</code>
                    </p>
                    <p id="p_000449" smilref="Programming_Robots_with_ROS00005.smil#p_000449">Run the client again:</p>
                    <p id="p_000450">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000619"><span class="text" id="span_001224" smilref="Programming_Robots_with_ROS00005.smil#span_001224">
user@hostname$ </span><strong id="strong_000066" smilref="Programming_Robots_with_ROS00005.smil#strong_000066">rosrun basics fancy_action_client.py</strong><span class="text" id="span_001225" smilref="Programming_Robots_with_ROS00005.smil#span_001225">
[Feedback] Time elapsed: 0.000044
[Feedback] Time remaining: 4.999956
[Feedback] Time elapsed: 1.001651
[Feedback] Time remaining: 3.998349
[Feedback] Time elapsed: 2.003297
[Feedback] Time remaining: 2.996703
[Result] State: 2
[Result] Status: Timer preempted
[Result] Time elapsed: 3.004926
[Result] Updates sent: 3
</span></code>
                    </p>
                    <p id="p_000451">
                      <span class="text" id="span_001226" smilref="Programming_Robots_with_ROS00005.smil#span_001226">That's the behavior we expect: the server pursues the goal, providing feedback, until we send the cancellation request, after which we receive the result confirming the preemption (</span>
                      <code xml:space="preserve" id="code_000620" smilref="Programming_Robots_with_ROS00005.smil#code_000620">PREEMPTED=2</code>
                      <span class="text" id="span_001227" smilref="Programming_Robots_with_ROS00005.smil#span_001227">).</span>
                    </p>
                    <p id="p_000452" smilref="Programming_Robots_with_ROS00005.smil#p_000452">Now let's trigger a server-side abort. In the client, uncomment this line to change the requested wait time from 5 seconds to 500 seconds:</p>
                    <p id="p_000453">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000621" smilref="Programming_Robots_with_ROS00005.smil#code_000621"># Uncomment this line to test server-side abort:
#goal.time_to_wait = rospy.Duration.from_sec(500.0)</code>
                    </p>
                    <p id="p_000454" smilref="Programming_Robots_with_ROS00005.smil#p_000454">Run the client again:</p>
                    <p id="p_000455">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_000622"><span class="text" id="span_001228" smilref="Programming_Robots_with_ROS00005.smil#span_001228">
user@hostname$ </span><strong id="strong_000067" smilref="Programming_Robots_with_ROS00005.smil#strong_000067">rosrun basics fancy_action_client.py</strong><span class="text" id="span_001229" smilref="Programming_Robots_with_ROS00005.smil#span_001229">
[Result] State: 4
[Result] Status: Timer aborted due to too-long wait
[Result] Time elapsed: 0.000012
[Result] Updates sent: 0
</span></code>
                    </p>
                    <p id="p_000456">
                      <span class="text" id="span_001230" smilref="Programming_Robots_with_ROS00005.smil#span_001230">As expected, the server immediately aborted the goal (</span>
                      <code xml:space="preserve" id="code_000623" smilref="Programming_Robots_with_ROS00005.smil#code_000623">ABORTED=4</code>
                      <span class="text" id="span_001231" smilref="Programming_Robots_with_ROS00005.smil#span_001231">).</span>
                    </p>
                  </div>
                </section>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Summary" id="section_000063">
              <h1 id="h1_000107" smilref="Programming_Robots_with_ROS00005.smil#h1_000107">Summary</h1>
              <div class="sect1" id="ch05-idp21360944">
                <p id="ch05-idp21696896" data-type="indexterm" data-primary="actions" data-secondary="services vs.">
                  <span class="text" id="span_001232" smilref="Programming_Robots_with_ROS00005.smil#span_001232">In this chapter, we covered</span>
                  <em id="em_000182" smilref="Programming_Robots_with_ROS00005.smil#em_000182">actions</em>
                  <span class="text" id="span_001233" smilref="Programming_Robots_with_ROS00005.smil#span_001233">, a powerful communications tool that is commonly used in ROS systems.</span>
                  <a data-type="xref" href="#ch05-topics_services_actions" external="false" id="a_000078" smilref="Programming_Robots_with_ROS00005.smil#a_000078">Table 5-1</a>
                  <span class="text" id="span_001234" smilref="Programming_Robots_with_ROS00005.smil#span_001234">compares actions to</span>
                  <em id="em_000183" smilref="Programming_Robots_with_ROS00005.smil#em_000183">topics</em>
                  <span class="text" id="span_001235" smilref="Programming_Robots_with_ROS00005.smil#span_001235">and</span>
                  <em id="em_000184" smilref="Programming_Robots_with_ROS00005.smil#em_000184">services</em>
                  <span class="text" id="span_001236" smilref="Programming_Robots_with_ROS00005.smil#span_001236">, which we covered in earlier chapters. Similar to services, actions allow you to make a request (for actions, a</span>
                  <em id="em_000185" smilref="Programming_Robots_with_ROS00005.smil#em_000185">goal</em>
                  <span class="text" id="span_001237" smilref="Programming_Robots_with_ROS00005.smil#span_001237">) and receive a response (for actions, a</span>
                  <em id="em_000186" smilref="Programming_Robots_with_ROS00005.smil#em_000186">result</em>
                  <span class="text" id="span_001238" smilref="Programming_Robots_with_ROS00005.smil#span_001238">). But actions offer much more control to both the client and the server than do services. The server can provide feedback along the way while it's servicing the request: the client can cancel a previously issued request; and, because they're built atop ROS</span>
                  <em id="em_000187" smilref="Programming_Robots_with_ROS00005.smil#em_000187">messages</em>
                  <span class="text" id="span_001239" smilref="Programming_Robots_with_ROS00005.smil#span_001239">, actions are asynchronous, allowing for nonblocking programming on both sides.</span>
                </p>
                <table id="ch05-topics_services_actions">
                  <caption id="caption_000002">
                    <span class="label" id="span_001240" smilref="Programming_Robots_with_ROS00005.smil#span_001240">Table 5-1.</span>
                    <span class="text" id="span_001241" smilref="Programming_Robots_with_ROS00005.smil#span_001241">Comparison of topics, services, and actions</span>
                  </caption>
                  <thead id="thead_000002">
                    <tr id="tr_000015">
                      <th rowspan="1" colspan="1" id="th_000006" smilref="Programming_Robots_with_ROS00005.smil#th_000006">Type</th>
                      <th rowspan="1" colspan="1" id="th_000007" smilref="Programming_Robots_with_ROS00005.smil#th_000007">Best used for</th>
                    </tr>
                  </thead>
                  <tbody id="tbody_000002">
                    <tr id="tr_000016">
                      <td rowspan="1" colspan="1" id="td_000066">
                        <p id="p_000457" smilref="Programming_Robots_with_ROS00005.smil#p_000457">Topic</p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000067">
                        <p id="p_000458" smilref="Programming_Robots_with_ROS00005.smil#p_000458">One-way communication, especially if there might be multiple nodes listening (e.g., streams of sensor data)</p>
                      </td>
                    </tr>
                    <tr id="tr_000017">
                      <td rowspan="1" colspan="1" id="td_000068">
                        <p id="p_000459" smilref="Programming_Robots_with_ROS00005.smil#p_000459">Service</p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000069">
                        <p id="p_000460" smilref="Programming_Robots_with_ROS00005.smil#p_000460">Simple request/response interactions, such as asking a question about a node's current state</p>
                      </td>
                    </tr>
                    <tr id="tr_000018">
                      <td rowspan="1" colspan="1" id="td_000070">
                        <p id="p_000461" smilref="Programming_Robots_with_ROS00005.smil#p_000461">Action</p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000071">
                        <p id="p_000462" smilref="Programming_Robots_with_ROS00005.smil#p_000462">Most request/response interactions, especially when servicing the request is not instantaneous (e.g., navigating to a goal location)</p>
                      </td>
                    </tr>
                  </tbody>
                </table>
                <p id="p_000463">
                  <span class="text" id="span_001242" smilref="Programming_Robots_with_ROS00005.smil#span_001242">Taken together, these features of actions make them well suited to many aspects of robot programming. It's common in a robotics application to implement time-extended, goal-seeking behaviors, whether it's</span>
                  <code xml:space="preserve" id="code_000624" smilref="Programming_Robots_with_ROS00005.smil#code_000624">goto_position</code>
                  <span class="text" id="span_001243" smilref="Programming_Robots_with_ROS00005.smil#span_001243">or</span>
                  <code xml:space="preserve" id="code_000625" smilref="Programming_Robots_with_ROS00005.smil#code_000625">clean_the_house</code>
                  <span class="text" id="span_001244" smilref="Programming_Robots_with_ROS00005.smil#span_001244">. Any time you need to be able trigger a behavior, actions are probably the right tool for the job. In fact, any time that you're using a service, it's worth considering replacing it with an action; actions require a bit more code to use, but in return they're much more powerful and extensible than services. We'll see many examples in future chapters where actions provide rich but easy-to-use interfaces to some pretty complex behaviors.</span>
                </p>
                <p id="ch05-idp21637712" data-type="indexterm" data-startref="ix_5-actions-asciidoc0">
                  <span class="text" id="span_001245" smilref="Programming_Robots_with_ROS00005.smil#span_001245">As usual, we did not cover the entire API in this chapter. There are more sophisticated uses of actions that can be useful in situations where you need more control over how the system behaves, such as what to do when there are multiple clients</span>
                  <span class="keep-together" id="span_001246" smilref="Programming_Robots_with_ROS00005.smil#span_001246">and/or multiple</span>
                  <span class="text" id="span_001247" smilref="Programming_Robots_with_ROS00005.smil#span_001247">simultaneous goals. For full details, consult</span>
                  <a href="http://wiki.ros.org/actionlib?distro=indigo" external="true" id="a_000079">
                    <span class="text" id="span_001248" smilref="Programming_Robots_with_ROS00005.smil#span_001248">the</span>
                    <code xml:space="preserve" id="code_000626" smilref="Programming_Robots_with_ROS00005.smil#code_000626">actionlib</code>
                    <span class="text" id="span_001249" smilref="Programming_Robots_with_ROS00005.smil#span_001249">API</span>
                    <span class="keep-together" id="span_001250" smilref="Programming_Robots_with_ROS00005.smil#span_001250">documentation</span>
                  </a>
                  <span class="text" id="span_001251" smilref="Programming_Robots_with_ROS00005.smil#span_001251">.</span>
                </p>
                <p id="p_000464">
                  <span class="text" id="span_001252" smilref="Programming_Robots_with_ROS00005.smil#span_001252">At this point, you know all of the basics of ROS: how nodes are organized into a graph, how to use the basic command-line tools, how to write simple nodes, and how to get these nodes to communicate with each other. Before we look at our first complete robot application in</span>
                  <a data-type="xref" href="#ch07-wanderbot" external="false" id="a_000080" smilref="Programming_Robots_with_ROS00005.smil#a_000080">Chapter 7</a>
                  <span class="text" id="span_001253" smilref="Programming_Robots_with_ROS00005.smil#span_001253">, let's take a moment to talk about the various parts of a robot system, for both real and simulated robots, and how they relate to ROS.</span>
                </p>
              </div>
            </section>
          </div>
        </section>
      </level1>
      <level1 id="ch06">
        <section xmlns:epub="http://www.idpf.org/2007/ops" data-type="chapter" epub:type="chapter" data-pdf-bookmark="Chapter 6. Robots and Simulators" id="section_000064">
          <h1 id="h1_000108" smilref="Programming_Robots_with_ROS00005.smil#h1_000108">Chapter 6. Robots and Simulators</h1>
          <div class="chapter" id="ch06-robots">
            <p id="p_000465" smilref="Programming_Robots_with_ROS00005.smil#p_000465">The previous chapters discussed many fundamental concepts of ROS. They may have seemed rather vague and abstract, but those concepts were necessary to describe how data moves around in ROS and how its software systems are organized. In this chapter, we will introduce common robot subsystems and describe how the ROS architecture handles them. Then, we will introduce the robots that we will use throughout the remainder of the book and describe the simulators in which we can most easily experiment with them.</p>
            <section data-type="sect1" data-pdf-bookmark="Subsystems" id="section_000065">
              <h1 id="h1_000109" smilref="Programming_Robots_with_ROS00005.smil#h1_000109">Subsystems</h1>
              <div class="sect1" id="ch06-idp21642208">
                <p data-type="indexterm" data-primary="subsystems" id="ch06-ix_6-robots-asciidoc0">
                  <span class="text" id="span_001254" smilref="Programming_Robots_with_ROS00005.smil#span_001254">Like all complex machines, robots are most easily designed and analyzed by considering one subsystem at a time. In this section, we will introduce the main subsystems commonly found on the types of robots considered in this book. Broadly speaking, they can be divided into three categories:</span>
                  <em id="em_000188" smilref="Programming_Robots_with_ROS00005.smil#em_000188">actuation</em>
                  <span class="text" id="span_001255" smilref="Programming_Robots_with_ROS00005.smil#span_001255">,</span>
                  <em id="em_000189" smilref="Programming_Robots_with_ROS00005.smil#em_000189">sensing</em>
                  <span class="text" id="span_001256" smilref="Programming_Robots_with_ROS00005.smil#span_001256">, and</span>
                  <em id="em_000190" smilref="Programming_Robots_with_ROS00005.smil#em_000190">computing</em>
                  <span class="text" id="span_001257" smilref="Programming_Robots_with_ROS00005.smil#span_001257">. In the ROS context, actuation subsystems are the subsystems that interact directly with how the robot's wheels or arms move. Sensing subsystems interact directly with sensor hardware, such as cameras or laser scanners. Finally, the computational subsystems are what tie actuators and sensing together, with (ideally) some relatively intelligent processing that allows the robot to perform useful tasks. We will introduce these subsystems in the next few sections. Note that we are not attempting to provide an exhaustive discussion; rather, we are trying to describe these subsystems just deeply enough to convey the issues typically faced when interacting with them from a software development standpoint.</span>
                </p>
                <section data-type="sect2" data-pdf-bookmark="Actuation: Mobile Platform" id="section_000066">
                  <h1 id="h1_000110" smilref="Programming_Robots_with_ROS00005.smil#h1_000110">Actuation: Mobile Platform</h1>
                  <div class="sect2" id="ch06-robots_actuation_mobile_platforms">
                    <p data-type="indexterm" data-primary="actuation" id="ch06-ix_6-robots-asciidoc1" data-secondary="mobile platform">
                      <span class="text" id="span_001258" smilref="Programming_Robots_with_ROS00005.smil#span_001258">The ability to move around, or</span>
                      <em id="em_000191" smilref="Programming_Robots_with_ROS00005.smil#em_000191">locomote</em>
                      <span class="text" id="span_001259" smilref="Programming_Robots_with_ROS00005.smil#span_001259">, is a fundamental capability of many robots. It is surprisingly nuanced: there are many books written entirely on this subject! However, broadly speaking, a mobile base is a collection of actuators that allow a robot to move around. They come in an astonishingly wide variety of shapes and sizes.</span>
                    </p>
                    <p id="p_000466" smilref="Programming_Robots_with_ROS00005.smil#p_000466">Although legged locomotion is popular in some domains in the research community, and camera-friendly walking robots have seen great progress in recent years, most robots drive around on wheels. This is because of two main reasons. First, wheeled platforms are often simpler to design and manufacture. Second, for the very smooth surfaces that are common in artificial environments, such as indoor floors or outdoor pavement, wheels are the most energy-efficient way to move around.</p>
                    <p data-type="indexterm" data-primary="casters" id="ch06-idp21658160">
                      <span class="text" id="span_001260" smilref="Programming_Robots_with_ROS00005.smil#span_001260">The simplest possible configuration of a wheeled mobile robot is called</span>
                      <em id="ch06-idp21656448" smilref="Programming_Robots_with_ROS00005.smil#ch06-idp21656448">differential drive</em>
                      <span class="text" id="span_001261" smilref="Programming_Robots_with_ROS00005.smil#span_001261">. It consists of two independently actuated wheels, often located on the centerline of a round robot. In this configuration, the robot moves forward when both wheels turn forward, and spins in place when one wheel drives forward and one drives backward. Differential-drive robots often have one or more</span>
                      <em id="em_000192" smilref="Programming_Robots_with_ROS00005.smil#em_000192">casters</em>
                      <span class="text" id="span_001262" smilref="Programming_Robots_with_ROS00005.smil#span_001262">, which are unpowered wheels that spin freely to support the front and back of the robot, just like the wheels on the bottom of a typical office chair. This is an example of a</span>
                      <em id="ch06-idp21659552" smilref="Programming_Robots_with_ROS00005.smil#ch06-idp21659552">statically stable</em>
                      <span class="text" id="span_001263" smilref="Programming_Robots_with_ROS00005.smil#span_001263">robot, which means that, when viewed from above, the center of mass of the robot is inside a polygon formed by the points of contact between the wheels and the ground. Statically stable robots are simple to model and control, and among their virtues is the fact that power can be shut off to the robot at any time, and it will not fall over.</span>
                    </p>
                    <p data-type="indexterm" data-primary="balancing wheeled mobile robot" id="ch06-idp21661280">
                      <span class="text" id="span_001264" smilref="Programming_Robots_with_ROS00005.smil#span_001264">However,</span>
                      <em id="em_000193" smilref="Programming_Robots_with_ROS00005.smil#em_000193">dynamically stable</em>
                      <span class="text" id="span_001265" smilref="Programming_Robots_with_ROS00005.smil#span_001265">or</span>
                      <em id="ch06-idp21661952" smilref="Programming_Robots_with_ROS00005.smil#ch06-idp21661952">balancing</em>
                      <span class="text" id="span_001266" smilref="Programming_Robots_with_ROS00005.smil#span_001266">wheeled mobile robots are also possible, with the term</span>
                      <em id="em_000194" smilref="Programming_Robots_with_ROS00005.smil#em_000194">dynamic</em>
                      <span class="text" id="span_001267" smilref="Programming_Robots_with_ROS00005.smil#span_001267">implying that the actuators must constantly be in motion (however slight) to preserve stability. The simplest dynamically stable wheeled robots look like (and often are literally built upon) Segway platforms, with a pair of large differential-drive wheels supporting a tall robot above. Among the benefits of balancing wheeled mobile bases is that the wheels contacting the ground can have very large diameters, which allows the robot to smoothly drive over small obstacles: imagine the difference between running over a pebble with an office-chair wheel versus a bicycle wheel (this is, in fact, precisely the reason why bicycle wheels are large). Another advantage of balancing wheeled mobile robots is that the footprint of the robot can be kept small, which can be useful in tight quarters.</span>
                    </p>
                    <p data-type="indexterm" data-primary="skid steering" id="ch06-idp21665152">
                      <span class="text" id="span_001268" smilref="Programming_Robots_with_ROS00005.smil#span_001268">The differential-drive scheme can be extended to more than two wheels and is often called</span>
                      <em id="em_000195" smilref="Programming_Robots_with_ROS00005.smil#em_000195">skid steering</em>
                      <span class="text" id="span_001269" smilref="Programming_Robots_with_ROS00005.smil#span_001269">. Four-wheel and six-wheel skid-steering schemes are common, in which all of the wheels on the left side of the robot actuate together, and all of the wheels on the right side actuate together. As the number of wheels extends beyond six, typically the wheels are connected by external</span>
                      <em id="ch06-idp21666736" smilref="Programming_Robots_with_ROS00005.smil#ch06-idp21666736">tracks</em>
                      <span class="text" id="span_001270" smilref="Programming_Robots_with_ROS00005.smil#span_001270">, as exemplified by excavators or tanks.</span>
                    </p>
                    <p id="p_000467" smilref="Programming_Robots_with_ROS00005.smil#p_000467">As is typically the case in engineering, there are trade-offs with the skid-steering scheme, and it makes sense for some applications, but not all. One advantage is that skid steering provides maximum traction while preserving mechanical simplicity (and thus controlling cost), since all contact points between the vehicle and the ground are being actively driven. However, skid steering is, as its name states, constantly skidding when it is not driving exactly forward or backward.</p>
                    <p id="p_000468" smilref="Programming_Robots_with_ROS00005.smil#p_000468">In some situations, traction and the ability to surmount large obstacles are valued so highly that skid steering platforms are used extensively. However, all this traction comes at a cost: the constant skidding is tremendously inefficient, since massive energy is spent tearing up the dirt (or heating up the wheels) whenever the robot turns at low speeds. In the most extreme case, when trying to turn in place with one set of wheels turning forwards and the other turning backward, the wheels are skidding dramatically, which can tear up gentle surfaces and wear tires quickly. This is why excavators are typically towed to a construction site on a trailer!</p>
                    <p data-type="indexterm" data-primary="Ackerman platforms" id="ch06-idp21670528">
                      <span class="text" id="span_001271" smilref="Programming_Robots_with_ROS00005.smil#span_001271">The inefficiencies and wear and tear of skid steering are among the reasons why passenger cars use more complex (and expensive) schemes to get around. They are often called</span>
                      <em id="em_000196" smilref="Programming_Robots_with_ROS00005.smil#em_000196">Ackerman</em>
                      <span class="text" id="span_001272" smilref="Programming_Robots_with_ROS00005.smil#span_001272">platforms, in which the rear wheels are always pointed straight ahead, and the front wheels turn together. Placing the wheels at the extreme corners of the vehicle maximizes the area of the supporting polygon, which is why cars can turn sharp corners without tipping over and (when not driven in action movies) car wheels do not have to skid when turning. However, the downside of Ackerman platforms is that they cannot drive sideways, since the rear wheels are always facing forward. This is why parallel parking is a dreaded portion of any driver's license examination: elaborate planning and sequential actuator maneuvers are required to move an Ackerman platform sideways.</span>
                    </p>
                    <p data-type="indexterm" data-primary="holonomic platforms" id="ch06-idp21674688">
                      <span class="text" id="span_001273" smilref="Programming_Robots_with_ROS00005.smil#span_001273">All of the platforms described thus far can be summarized as being</span>
                      <em id="ch06-idp21672752" smilref="Programming_Robots_with_ROS00005.smil#ch06-idp21672752">non-holonomic</em>
                      <span class="text" id="span_001274" smilref="Programming_Robots_with_ROS00005.smil#span_001274">, which means that they cannot move in</span>
                      <em id="em_000197" smilref="Programming_Robots_with_ROS00005.smil#em_000197">any</em>
                      <span class="text" id="span_001275" smilref="Programming_Robots_with_ROS00005.smil#span_001275">direction at any given time. For example, neither differential-drive platforms nor Ackerman platforms can move sideways. To do this, a</span>
                      <em id="em_000198" smilref="Programming_Robots_with_ROS00005.smil#em_000198">holonomic</em>
                      <span class="text" id="span_001276" smilref="Programming_Robots_with_ROS00005.smil#span_001276">platform is required, which can be built using</span>
                      <em id="ch06-idp21708144" smilref="Programming_Robots_with_ROS00005.smil#ch06-idp21708144">steered casters.</em>
                      <span class="text" id="span_001277" smilref="Programming_Robots_with_ROS00005.smil#span_001277">Each steered caster actuator has two motors: one motor rotates the wheel forward and backward, and another motor steers the wheel about its vertical axis. This allows the platform to move in any direction while spinning arbitrarily. Although significantly more complex to build and maintain, these platforms simplify motion planning. Imagine the ease of parallel parking if you could drive sideways into a parking spot!</span>
                    </p>
                    <p data-type="indexterm" data-primary="Mecanum wheels" id="ch06-idp21710480">
                      <span class="text" id="span_001278" smilref="Programming_Robots_with_ROS00005.smil#span_001278">As a special case, when the robot only needs to move on very smooth surfaces, a low-cost holonomic platform can be built using</span>
                      <em id="em_000199" smilref="Programming_Robots_with_ROS00005.smil#em_000199">Mecanum</em>
                      <span class="text" id="span_001279" smilref="Programming_Robots_with_ROS00005.smil#span_001279">wheels. These are clever contraptions in which each wheel has a series of rollers on its rim, angled at 45 degrees to the plane of the wheel. Using this scheme, motion in any direction (with any rate of rotation) is possible at all times, using only four actuators, without skidding. However, due to the small diameter of the roller wheels, it is only suitable for very smooth surfaces such as hard flooring or extremely short-pile carpets.</span>
                    </p>
                    <p data-type="indexterm" data-primary="Twist message" id="ch06-idp21712672">
                      <span class="text" id="span_001280" smilref="Programming_Robots_with_ROS00005.smil#span_001280">Because one of the design goals of ROS is to allow software reuse across a variety of robots, ROS software that interacts with mobile platforms virtually always uses a</span>
                      <code xml:space="preserve" id="code_000627" smilref="Programming_Robots_with_ROS00005.smil#code_000627">Twist</code>
                      <span class="text" id="span_001281" smilref="Programming_Robots_with_ROS00005.smil#span_001281">message. A</span>
                      <em id="em_000200" smilref="Programming_Robots_with_ROS00005.smil#em_000200">twist</em>
                      <span class="text" id="span_001282" smilref="Programming_Robots_with_ROS00005.smil#span_001282">is a way to express general linear and angular velocities in three dimensions. Although it may seem easier to express mobile base motions simply by expressing wheel velocities, using the linear and angular velocities of the center of the vehicle allows the software to abstract away the kinematics of the vehicle.</span>
                    </p>
                    <p id="p_000469" smilref="Programming_Robots_with_ROS00005.smil#p_000469">For example, high-level software can command the vehicle to drive forward at 0.5 meters/second while rotating clockwise at 0.1 radians/second. From the standpoint of the high-level software, whether the mobile platform's actuators are arranged as differential-drive, Ackerman steering, or Mecanum wheels is irrelevant, just as the transmission ratios and wheel diameters are irrelevant to high-level behaviors.</p>
                    <p id="ch06-idp21719824" data-type="indexterm" data-startref="ix_6-robots-asciidoc2" data-primary="planar robots">
                      <span class="text" id="span_001283" smilref="Programming_Robots_with_ROS00005.smil#span_001283">The robots described in this book will only be navigating on flat, two-dimensional surfaces and are commonly called</span>
                      <em id="ch06-idp21715936" smilref="Programming_Robots_with_ROS00005.smil#ch06-idp21715936">planar robots</em>
                      <span class="text" id="span_001284" smilref="Programming_Robots_with_ROS00005.smil#span_001284">. However, expressing velocities in three dimensions allows path planning or obstacle avoidance software to be used by vehicles capable of more general motions, such as aerial, underwater, or space vehicles. It is important to recognize that even for vehicles designed for two-dimensional navigation, the general three-dimensional twist methodology is necessary to express desired or actual motions of many types of actuators, such as grippers, since they are often capable of three-dimensional motions when flying on the end of a manipulator arm even when the mobile base is constrained to the floor plane. Manipulators, in fact, comprise the other main application domain for robot actuators and will be discussed in the next section.</span>
                    </p>
                  </div>
                </section>
                <section data-type="sect2" data-pdf-bookmark="Actuation: Manipulator Arm" id="section_000067">
                  <h1 id="h1_000111" smilref="Programming_Robots_with_ROS00005.smil#h1_000111">Actuation: Manipulator Arm</h1>
                  <div class="sect2" id="ch06-idp21647808">
                    <p data-type="indexterm" data-primary="actuation" data-secondary="manipulator arm" id="ch06-idp21721744">
                      <span class="text" id="span_001285" smilref="Programming_Robots_with_ROS00005.smil#span_001285">Many robots need to</span>
                      <em id="em_000201" smilref="Programming_Robots_with_ROS00005.smil#em_000201">manipulate</em>
                      <span class="text" id="span_001286" smilref="Programming_Robots_with_ROS00005.smil#span_001286">objects in their environment. For example, packing or palletizing robots sit on the end of a production line, grab items coming down the line, and place them into boxes or stacks. There is an entire domain of robot manipulation tasks called</span>
                      <em id="ch06-idp21722944" smilref="Programming_Robots_with_ROS00005.smil#ch06-idp21722944">pick and place</em>
                      <span class="text" id="span_001287" smilref="Programming_Robots_with_ROS00005.smil#span_001287">, in which manipulator arms grasp items and place them somewhere else. Security robot tasks include handling suspicious items, for which a strong manipulator arm is often required. An emerging class of</span>
                      <em id="ch06-idp21727008" smilref="Programming_Robots_with_ROS00005.smil#ch06-idp21727008">personal robots</em>
                      <span class="text" id="span_001288" smilref="Programming_Robots_with_ROS00005.smil#span_001288">hope to be useful in home and office applications, performing manipulation tasks including cleaning, delivering items, preparing meals, and so on.</span>
                    </p>
                    <p id="p_000470" smilref="Programming_Robots_with_ROS00005.smil#p_000470">As with mobile bases, there's astonishing variety in manipulator-arm subsystems across robots, with many trade-offs made to support particular application domains and price points.</p>
                    <p data-type="indexterm" data-primary="joints" id="ch06-idp21730400">
                      <span class="text" id="span_001289" smilref="Programming_Robots_with_ROS00005.smil#span_001289">Although there are exceptions, the majority of manipulator arms are formed by a</span>
                      <em id="em_000202" smilref="Programming_Robots_with_ROS00005.smil#em_000202">chain</em>
                      <span class="text" id="span_001290" smilref="Programming_Robots_with_ROS00005.smil#span_001290">of rigid</span>
                      <em id="em_000203" smilref="Programming_Robots_with_ROS00005.smil#em_000203">links</em>
                      <span class="text" id="span_001291" smilref="Programming_Robots_with_ROS00005.smil#span_001291">connected by</span>
                      <em id="em_000204" smilref="Programming_Robots_with_ROS00005.smil#em_000204">joints</em>
                      <span class="text" id="span_001292" smilref="Programming_Robots_with_ROS00005.smil#span_001292">. The simplest kinds of joints are single-axis revolute joints (also called "pin" joints), where one link has a shaft that serves as the axis around which the next link rotates, in the same way that a typical residential door rotates around its hinge pins. However,</span>
                      <em id="ch06-idp21733296" smilref="Programming_Robots_with_ROS00005.smil#ch06-idp21733296">linear</em>
                      <span class="text" id="span_001293" smilref="Programming_Robots_with_ROS00006.smil#span_001293">joints (also called</span>
                      <em id="ch06-idp21731520" smilref="Programming_Robots_with_ROS00006.smil#ch06-idp21731520">prismatic</em>
                      <span class="text" id="span_001294" smilref="Programming_Robots_with_ROS00006.smil#span_001294">joints) are also common, in which one link has a</span>
                      <em id="ch06-idp21733968" smilref="Programming_Robots_with_ROS00006.smil#ch06-idp21733968">slide</em>
                      <span class="text" id="span_001295" smilref="Programming_Robots_with_ROS00006.smil#span_001295">or tube along which the next link travels, just as a sliding door runs sideways back and forth along its track.</span>
                    </p>
                    <p data-type="indexterm" data-primary="degrees of freedom (DOF)" id="ch06-idp21736368">
                      <span class="text" id="span_001296" smilref="Programming_Robots_with_ROS00006.smil#span_001296">A fundamental characteristic of a robot manipulator is the number of</span>
                      <em id="em_000205" smilref="Programming_Robots_with_ROS00006.smil#em_000205">degrees of freedom</em>
                      <span class="text" id="span_001297" smilref="Programming_Robots_with_ROS00006.smil#span_001297">(DOF) of its design. Often, the number of joints is equal to the number of actuators; when those numbers differ, typically the DOF is taken to be the lower of the two numbers. Regardless, the number of degrees of freedom is one of the most significant drivers of manipulator size, mass, dexterity, cost, and reliability. Adding DOF to the</span>
                      <em id="ch06-idp21737072" smilref="Programming_Robots_with_ROS00006.smil#ch06-idp21737072">distal</em>
                      <span class="text" id="span_001298" smilref="Programming_Robots_with_ROS00006.smil#span_001298">(far) end of a robot arm typically increases its mass, which requires larger actuators on the</span>
                      <em id="em_000206" smilref="Programming_Robots_with_ROS00006.smil#em_000206">proximal</em>
                      <span class="text" id="span_001299" smilref="Programming_Robots_with_ROS00006.smil#span_001299">(near) joints, which further increases the mass of the manipulator.</span>
                    </p>
                    <p data-type="indexterm" data-primary="dextrous workspace" id="ch06-idp21741584">
                      <span class="text" id="span_001300" smilref="Programming_Robots_with_ROS00006.smil#span_001300">In general, six DOF are required to position the wrist of the manipulator arm in any location and orientation within its</span>
                      <em id="ch06-idp21739808" smilref="Programming_Robots_with_ROS00006.smil#ch06-idp21739808">workspace</em>
                      <span class="text" id="span_001301" smilref="Programming_Robots_with_ROS00006.smil#span_001301">, providing that each joint has full range of motion. In this context,</span>
                      <em id="em_000207" smilref="Programming_Robots_with_ROS00006.smil#em_000207">workspace</em>
                      <span class="text" id="span_001302" smilref="Programming_Robots_with_ROS00006.smil#span_001302">has a precise meaning: it is the space that a robot manipulator can reach. A subset of the robot's workspace, called the</span>
                      <em id="em_000208" smilref="Programming_Robots_with_ROS00006.smil#em_000208">dextrous workspace</em>
                      <span class="text" id="span_001303" smilref="Programming_Robots_with_ROS00006.smil#span_001303">, is the region in which a robot can achieve all positions and orientations of the end effector. Generally speaking, having a larger dextrous workspace is a good thing for robots, but unfortunately full (360-degree) range of motion on six joints of a robot is often extremely difficult to achieve at reasonable cost, due to constraints of mechanical structures, electrical wiring, and so on. As a result, seven-DOF arms are often used. The seventh DOF provides an extra degree of freedom that can be used to move the links of the arm while maintaining the position and orientation of the wrist, much as a human arm can move its elbow through an arc segment while maintaining the wrist in the same position. This "extra" DOF can help contribute to a relatively large dextrous workspace even when each individual joint has a restricted range of motion.</span>
                    </p>
                    <p id="p_000471" smilref="Programming_Robots_with_ROS00006.smil#p_000471">Research robots intended for manipulation tasks in human environments often have human-scale, seven-DOF arms, quite simply because the desired workspaces are human-scale surfaces, such as tables or countertops in home and office environments. In contrast, robots intended for industrial applications have wildly varying dimensions and joint configurations depending on the tasks they are to perform, since each additional DOF introduces additional cost and reliability concerns.</p>
                    <p id="ch06-idp21745392" data-type="indexterm" data-startref="ix_6-robots-asciidoc1" smilref="Programming_Robots_with_ROS00006.smil#ch06-idp21745392">So far, we have discussed the two main classes of robot actuators: those used for locomotion, and those used for manipulation. The next major class of robot hardware is its sensors. We'll start with the sensor head, a common mounting scheme, and then describe the subcomponents found in many robot sensor heads.</p>
                  </div>
                </section>
                <section data-type="sect2" data-pdf-bookmark="Sensors" id="section_000068">
                  <h1 id="h1_000112" smilref="Programming_Robots_with_ROS00006.smil#h1_000112">Sensors</h1>
                  <div class="sect2" id="ch06-idp21746224">
                    <p id="ch06-ix_6-robots-asciidoc6" data-type="indexterm" data-primary="sensor" data-secondary="sensors" smilref="Programming_Robots_with_ROS00006.smil#ch06-ix_6-robots-asciidoc6">Robots must sense the world around them in order to react to variations in tasks and environments. The sensors can range from minimalist setups designed for quick installation to highly elaborate and tremendously expensive sensor rigs.</p>
                    <p class="keep-together" data-type="indexterm" data-primary="binary sensors" id="ch06-idp21752576">
                      <span class="text" id="span_001304" smilref="Programming_Robots_with_ROS00006.smil#span_001304">Many successful industrial deployments use surprisingly little sensing. A remarkable number of complex and intricate industrial manipulation tasks can be performed through a combination of clever mechanical engineering and</span>
                      <em id="ch06-idp21751152" smilref="Programming_Robots_with_ROS00006.smil#ch06-idp21751152">limit switches</em>
                      <span class="text" id="span_001305" smilref="Programming_Robots_with_ROS00006.smil#span_001305">, which close or open an electrical circuit when a mechanical lever or plunger is pressed, in order to start execution of a preprogrammed robotic manipulation sequence. Through careful mechanical setup and tuning, these systems can achieve amazing levels of throughput and reliability. It is important, then, to consider these</span>
                      <em id="em_000209" smilref="Programming_Robots_with_ROS00006.smil#em_000209">binary</em>
                      <span class="text" id="span_001306" smilref="Programming_Robots_with_ROS00006.smil#span_001306">sensors when enumerating the world of robotic sensing. These sensors are typically either "on" or "off." In addition to mechanical limit switches, other binary sensors include</span>
                      <em id="ch06-idp21753872" smilref="Programming_Robots_with_ROS00006.smil#ch06-idp21753872">optical limit switches</em>
                      <span class="text" id="span_001307" smilref="Programming_Robots_with_ROS00006.smil#span_001307">, which use a mechanical "flag" to interrupt a light beam, and</span>
                      <em id="ch06-idp21754576" smilref="Programming_Robots_with_ROS00006.smil#ch06-idp21754576">bump sensors</em>
                      <span class="text" id="span_001308" smilref="Programming_Robots_with_ROS00006.smil#span_001308">, which channel mechanical pressure along a relatively large distance to a single mechanical switch. These relatively simple sensors are a key part</span>
                      <span class="keep-together" id="span_001309" smilref="Programming_Robots_with_ROS00006.smil#span_001309">of modern industrial</span>
                      <span class="text" id="span_001310" smilref="Programming_Robots_with_ROS00006.smil#span_001310">automation equipment, and their importance can hardly be overstated.</span>
                    </p>
                    <p id="ch06-idp21759248" data-type="indexterm" data-primary="range sensors">
                      <span class="text" id="span_001311" smilref="Programming_Robots_with_ROS00006.smil#span_001311">Another class of sensors return</span>
                      <em id="ch06-idp21757824" smilref="Programming_Robots_with_ROS00006.smil#ch06-idp21757824">scalar</em>
                      <span class="text" id="span_001312" smilref="Programming_Robots_with_ROS00006.smil#span_001312">readings. For example, a pressure sensor can estimate the mechanical or barometric pressure and will typically output a scalar value along some range of sensitivity chosen at time of manufacture. Range sensors can be constructed from many physical phenomena (sound, light, etc.) and will also typically return a scalar value in some range, which seldom includes zero or infinity!</span>
                    </p>
                    <p id="p_000472" smilref="Programming_Robots_with_ROS00006.smil#p_000472">Each sensor class has its own quirks that distort its view of reality and must be accommodated by sensor-processing algorithms. These quirks can often be surprisingly severe. For example, a range sensor may have a "minimum distance" restriction: if an object is closer than that minimum distance, it will not be sensed. As a result of these quirks, it is often advantageous to combine several different types of sensors in a robotic system.</p>
                    <p data-type="indexterm" data-primary="pan/tilt assembly" id="ch06-idp21763264">
                      <span class="text" id="span_001313" smilref="Programming_Robots_with_ROS00006.smil#span_001313">However, many of the applications we will describe in this book are reliant on "rich" sensor data, which is a vague term that generally means that the robot's perception algorithms consider something more than a small number of binary or scalar sensors. Any configuration of sensing hardware is possible (and has likely been tried), but for convenience, aesthetics, and to preserve line-of-sight with the center of the workspace, it is common for robots to have a</span>
                      <em id="ch06-idp21762048" smilref="Programming_Robots_with_ROS00006.smil#ch06-idp21762048">sensor head</em>
                      <span class="text" id="span_001314" smilref="Programming_Robots_with_ROS00006.smil#span_001314">on top of the platform that integrates several sensors in the same physical enclosure. Often, sensor heads sit atop a</span>
                      <em id="em_000210" smilref="Programming_Robots_with_ROS00006.smil#em_000210">pan/tilt</em>
                      <span class="text" id="span_001315" smilref="Programming_Robots_with_ROS00006.smil#span_001315">assembly, so that they can rotate to a bearing of interest and look up or down as needed. The following several sections will describe sensors commonly found in robot sensor heads and on other parts of their bodies.</span>
                    </p>
                    <section data-type="sect3" data-pdf-bookmark="Visual cameras" id="section_000069">
                      <h1 id="h1_000113" smilref="Programming_Robots_with_ROS00006.smil#h1_000113">Visual cameras</h1>
                      <div class="sect3" id="ch06-idp21764720">
                        <p id="ch06-idp21766096" data-type="indexterm" data-primary="cameras" data-secondary="visual" smilref="Programming_Robots_with_ROS00006.smil#ch06-idp21766096">Higher-order animals tends to rely on visual data to react to the world around them. If only robots were as smart as animals! Unfortunately, using camera data intelligently is surprisingly difficult, as we will describe in later chapters of this book. However, cameras are cheap and often useful for teleoperation, so it is common to see them on robot sensor heads.</p>
                        <p id="p_000473">
                          <span class="text" id="span_001316" smilref="Programming_Robots_with_ROS00006.smil#span_001316">Interestingly, it is often more mathematically robust to describe robot tasks and environments in three dimensions (3D) than it is to work with 2D camera images. This is because the 3D shapes of tasks and environments are</span>
                          <em id="em_000211" smilref="Programming_Robots_with_ROS00006.smil#em_000211">invariant</em>
                          <span class="text" id="span_001317" smilref="Programming_Robots_with_ROS00006.smil#span_001317">to changes in scene lighting, shadows, occlusions, and so on. In fact, in a surprising number of application domains, the visual data is largely ignored; the algorithms are interested in 3D data. As a result, intense research efforts have been expended on producing 3D data of the scene in front of the robot.</span>
                        </p>
                        <p data-type="indexterm" data-primary="stereo camera" id="ch06-idp21770976">
                          <span class="text" id="span_001318" smilref="Programming_Robots_with_ROS00006.smil#span_001318">When two cameras are rigidly mounted to a common mechanical structure, they form a</span>
                          <em id="em_000212" smilref="Programming_Robots_with_ROS00006.smil#em_000212">stereo camera</em>
                          <span class="text" id="span_001319" smilref="Programming_Robots_with_ROS00006.smil#span_001319">. Each camera sees a slightly different view of the world, and these slight differences can be used to estimate the distances to various features in the image. This sounds simple, but as always, the devil is in the details. The performance of a stereo camera depends on a large number of factors, such as the quality of the camera's mechanical design, its resolution, its lens type and quality, and so on. Equally important are the qualities of the scene being imaged: a stereo camera can only estimate the distances to mathematically discernable</span>
                          <em id="em_000213" smilref="Programming_Robots_with_ROS00006.smil#em_000213">features</em>
                          <span class="text" id="span_001320" smilref="Programming_Robots_with_ROS00006.smil#span_001320">in the scene, such as sharp, high-contrast corners. A stereo camera cannot, for example, estimate the distance to a featureless wall, although it can most likely estimate the distance to the corners and edges of the wall, if they intersect a floor, ceiling, or other wall of a different color. Many natural outdoor scenes possess sufficient texture that stereo vision can be made to work quite well for depth estimation. Uncluttered indoor scenes, however, can often be quite difficult.</span>
                        </p>
                        <p data-type="indexterm" data-primary="cameras" data-secondary="message types for" id="ch06-idp21773920">
                          <span class="text" id="span_001321" smilref="Programming_Robots_with_ROS00006.smil#span_001321">Several conventions have emerged in the ROS community for handling cameras. The canonical ROS message type for images is</span>
                          <code xml:space="preserve" id="code_000628" smilref="Programming_Robots_with_ROS00006.smil#code_000628">sensor_msgs/Image</code>
                          <span class="text" id="span_001322" smilref="Programming_Robots_with_ROS00006.smil#span_001322">, and it contains little more than the size of the image, its pixel encoding scheme, and the pixels themselves. To describe the</span>
                          <em id="ch06-idp21776576" smilref="Programming_Robots_with_ROS00006.smil#ch06-idp21776576">intrinsic distortion</em>
                          <span class="text" id="span_001323" smilref="Programming_Robots_with_ROS00006.smil#span_001323">of the camera resulting from its lens and sensor alignment, the</span>
                          <code id="ch06-idp21775392" xml:space="preserve" smilref="Programming_Robots_with_ROS00006.smil#ch06-idp21775392">sensor_msgs/CameraInfo</code>
                          <span class="text" id="span_001324" smilref="Programming_Robots_with_ROS00006.smil#span_001324">message is used. Often, these ROS images need to be sent to and from OpenCV, a popular computer vision library. The</span>
                          <code xml:space="preserve" id="code_000629" smilref="Programming_Robots_with_ROS00006.smil#code_000629">cv_bridge</code>
                          <span class="text" id="span_001325" smilref="Programming_Robots_with_ROS00006.smil#span_001325">package is intended to simplify this operation and will be used throughout the book.</span>
                        </p>
                      </div>
                    </section>
                    <section data-type="sect3" data-pdf-bookmark="Depth cameras" id="section_000070">
                      <h1 id="h1_000114" smilref="Programming_Robots_with_ROS00006.smil#h1_000114">Depth cameras</h1>
                      <div class="sect3" id="ch06-idp21778864">
                        <p data-type="indexterm" data-primary="cameras" data-secondary="depth" id="ch06-ix_6-robots-asciidoc8">
                          <span class="text" id="span_001326" smilref="Programming_Robots_with_ROS00006.smil#span_001326">As discussed in the previous section, even though visual camera data is intuitively appealing, and seems like it should be useful somehow, many perception algorithms work much better with 3D data. Fortunately, the past few years have seen massive progress in low-cost</span>
                          <em id="em_000214" smilref="Programming_Robots_with_ROS00006.smil#em_000214">depth cameras.</em>
                          <span class="text" id="span_001327" smilref="Programming_Robots_with_ROS00006.smil#span_001327">Unlike the passive stereo cameras described in the previous section, depth cameras are</span>
                          <em id="ch06-ix_6-robots-asciidoc9" smilref="Programming_Robots_with_ROS00006.smil#ch06-ix_6-robots-asciidoc9">active</em>
                          <span class="text" id="span_001328" smilref="Programming_Robots_with_ROS00006.smil#span_001328">devices. They illuminate the scene in various ways, which greatly improves the system performance. For example, a completely featureless indoor wall or surface is essentially impossible to detect using</span>
                          <span class="keep-together" id="ch06-ix_6-robots-asciidoc10" smilref="Programming_Robots_with_ROS00006.smil#ch06-ix_6-robots-asciidoc10">passive</span>
                          <span class="text" id="span_001329" smilref="Programming_Robots_with_ROS00006.smil#span_001329">stereo vision. However, many depth cameras will shine a texture pattern on the surface, which is subsequently imaged by its camera. The texture pattern and camera are typically set to operate in near-infrared wavelengths to reduce the system's sensitivity to the colors of objects, as well as to not be distracting to people nearby.</span>
                        </p>
                        <p data-type="indexterm" data-primary="cameras" data-secondary="Kinect" id="ch06-idp21786624">
                          <span class="text" id="span_001330" smilref="Programming_Robots_with_ROS00006.smil#span_001330">Some common depth cameras, such as the Microsoft Kinect, project a</span>
                          <em id="em_000215" smilref="Programming_Robots_with_ROS00006.smil#em_000215">structured light</em>
                          <span class="text" id="span_001331" smilref="Programming_Robots_with_ROS00006.smil#span_001331">image. The device projects a precisely known pattern into the scene, its camera observes how this pattern is deformed as it lands on the various objects and surfaces of the scene, and finally a</span>
                          <em id="ch06-idp21787600" smilref="Programming_Robots_with_ROS00006.smil#ch06-idp21787600">reconstruction algorithm</em>
                          <span class="text" id="span_001332" smilref="Programming_Robots_with_ROS00006.smil#span_001332">estimates the 3D structure of the scene from this data. It's hard to overstate the impact that the Kinect has had on modern robotics! It was designed for the gaming market, which is orders of magnitude larger than the robotics sensor market, and could justify massive expenditures for the development and production of the sensor. The launch price of $150 was incredibly cheap for a sensor capable of outputting so much useful data. Many robots were quickly retrofitted to hold Kinects, and the sensor continues to be used across research and industry.</span>
                        </p>
                        <p data-type="indexterm" data-primary="unstructured light depth cameras" id="ch06-idp21791936">
                          <span class="text" id="span_001333" smilref="Programming_Robots_with_ROS00006.smil#span_001333">Although the Kinect is the most famous (and certainly the most widely used) depth camera in robotics, many other depth-sensing schemes are possible. For example,</span>
                          <em id="em_000216" smilref="Programming_Robots_with_ROS00006.smil#em_000216">unstructured light</em>
                          <span class="text" id="span_001334" smilref="Programming_Robots_with_ROS00006.smil#span_001334">depth cameras employ "standard" stereo-vision algorithms with random texture injected into the scene by some sort of projector. This scheme has been shown to work far better than passive stereo systems in feature-scarce environments, such as many indoor scenes.</span>
                        </p>
                        <p data-type="indexterm" data-primary="depth image" id="ch06-idp21795152">
                          <span class="text" id="span_001335" smilref="Programming_Robots_with_ROS00006.smil#span_001335">A different approach is used by</span>
                          <em id="ch06-idp21793568" smilref="Programming_Robots_with_ROS00006.smil#ch06-idp21793568">time-of-flight</em>
                          <span class="text" id="span_001336" smilref="Programming_Robots_with_ROS00006.smil#span_001336">depth cameras. These imagers rapidly blink an infrared LED or laser illuminator, while using specially designed pixel structures in their image sensors to estimate the time required for these light pulses to fly into the scene and bounce back to the depth camera. Once this "time of flight" is estimated, the (constant) speed of light can be used to convert the estimates into a</span>
                          <em id="em_000217" smilref="Programming_Robots_with_ROS00006.smil#em_000217">depth image.</em>
                        </p>
                        <p id="p_000474" smilref="Programming_Robots_with_ROS00006.smil#p_000474">Intense research and development is occurring in this domain, due to the enormous existing and potential markets for depth cameras in video games and other mass-market user-interaction scenarios. It is not yet clear which (if any) of the schemes discussed previously will end up being best suited for robotics applications. At the time of writing, cameras using all of the previous modalities are in common usage in robotics experiments.</p>
                        <p id="ch06-idp21801376" data-type="indexterm" data-startref="ix_6-robots-asciidoc8" data-primary="point clouds">
                          <span class="text" id="span_001337" smilref="Programming_Robots_with_ROS00006.smil#span_001337">Just like visual cameras, depth cameras produce an enormous amount of data. This data is typically in the form of</span>
                          <em id="ch06-idp21797520" smilref="Programming_Robots_with_ROS00006.smil#ch06-idp21797520">point clouds</em>
                          <span class="text" id="span_001338" smilref="Programming_Robots_with_ROS00006.smil#span_001338">, which are the 3D points estimated to lie on the surfaces facing the camera. The fundamental point cloud message is</span>
                          <span class="keep-together" id="span_001339">
                            <code xml:space="preserve" id="code_000630" smilref="Programming_Robots_with_ROS00006.smil#code_000630">sensor_msgs/PointCloud2</code>
                          </span>
                          <span class="text" id="span_001340" smilref="Programming_Robots_with_ROS00006.smil#span_001340">(so named purely for historical reasons). This message allows for unstructured point cloud data, which is often advantageous, since depth cameras often cannot return valid depth estimates for each pixel in their images. As such, depth images often have substantial "holes," which processing algorithms must handle gracefully.</span>
                        </p>
                      </div>
                    </section>
                    <section data-type="sect3" data-pdf-bookmark="Laser scanners" id="section_000071">
                      <h1 id="h1_000115" smilref="Programming_Robots_with_ROS00006.smil#h1_000115">Laser scanners</h1>
                      <div class="sect3" id="ch06-laser_scanners">
                        <p data-type="indexterm" data-primary="laser scanners/sensors" id="ch06-idp21803760" data-secondary="laser scanners">
                          <span class="text" id="span_001341" smilref="Programming_Robots_with_ROS00006.smil#span_001341">Although depth cameras have greatly changed the depth-sensing market in the last few years due to their simplicity and low cost, there are still some applications in which</span>
                          <em id="em_000218" smilref="Programming_Robots_with_ROS00006.smil#em_000218">laser scanners</em>
                          <span class="text" id="span_001342" smilref="Programming_Robots_with_ROS00006.smil#span_001342">are widely used due to their superior accuracy and longer sensing range. There are many types of laser scanners, but one of the most common schemes used in robotics involves shining a laser beam on a rotating mirror spinning around 10 to 80 times per second (typically 600 to 4,800 RPM). As the mirror rotates, the laser light is pulsed rapidly, and the reflected waveforms are correlated with the outgoing waveform to estimate the time of flight of the laser pulse for a series of angles around the scanner.</span>
                        </p>
                        <p data-type="indexterm" data-primary="autonomous navigation" data-secondary="laser sensor for" id="ch06-idp21806928">
                          <span class="text" id="span_001343" smilref="Programming_Robots_with_ROS00006.smil#span_001343">Laser scanners used for autonomous vehicles are considerably different from those used for indoor or slow-moving robots. Vehicle laser scanners made by companies such as Velodyne must deal with the significant aerodynamic forces, vibrations, and temperature swings common to the automotive environment. Since vehicles typically move much faster than smaller robots, vehicle sensors must also have considerably longer range so that sufficient reaction time is possible. Additionally, many software tasks for autonomous driving, such as detecting vehicles and obstacles, work much better when multiple laser</span>
                          <em id="em_000219" smilref="Programming_Robots_with_ROS00006.smil#em_000219">scanlines</em>
                          <span class="text" id="span_001344" smilref="Programming_Robots_with_ROS00006.smil#span_001344">are received each time the device rotates, rather than just one. These extra scanlines can be extremely useful when distinguishing between classes of objects, such as between trees and pedestrians. To produce multiple scanlines, automotive laser scanners often have multiple lasers mounted together in a rotating structure, rather than simply rotating a mirror. All of these additional features naturally add to the complexity, weight, size, and thus the cost of the laser scanner.</span>
                        </p>
                        <p id="p_000475">
                          <span class="text" id="span_001345" smilref="Programming_Robots_with_ROS00006.smil#span_001345">The complex signal processing steps required to produce range estimates are virtually always handled by the firmware of the laser scanner itself. The devices typically output a vector of ranges several dozen times per second, along with the starting and stopping angles of each measurement vector. In ROS, laser scans are stored in</span>
                          <code xml:space="preserve" id="code_000631" smilref="Programming_Robots_with_ROS00006.smil#code_000631">sensor_msgs/LaserScan</code>
                          <span class="text" id="span_001346" smilref="Programming_Robots_with_ROS00006.smil#span_001346">messages, which map directly from the output of the laser scanner. Each manufacturer, of course, has their own raw message formats, but ROS drivers exist to translate between the raw output of many popular laser scanner manufacturers and the</span>
                          <code xml:space="preserve" id="code_000632" smilref="Programming_Robots_with_ROS00006.smil#code_000632">sensor_msgs/LaserScan</code>
                          <span class="text" id="span_001347" smilref="Programming_Robots_with_ROS00006.smil#span_001347">message format.</span>
                        </p>
                      </div>
                    </section>
                    <section data-type="sect3" data-pdf-bookmark="Shaft encoders" id="section_000072">
                      <h1 id="h1_000116" smilref="Programming_Robots_with_ROS00006.smil#h1_000116">Shaft encoders</h1>
                      <div class="sect3" id="ch06-idp21811520">
                        <p id="ch06-ix_6-robots-asciidoc11" data-type="indexterm" data-primary="sensor" data-secondary="shaft encoders" smilref="Programming_Robots_with_ROS00006.smil#ch06-ix_6-robots-asciidoc11">Estimating the motions of the robot is a critical component of virtually all robotic systems, with solutions ranging from low-level control schemes to high-level mapping, localization, and manipulation algorithms. Although estimates can be derived from many sources, the simplest and often most accurate estimates are produced simply by counting how many times the motors or wheels have turned.</p>
                        <p id="p_000476">
                          <span class="text" id="span_001348" smilref="Programming_Robots_with_ROS00006.smil#span_001348">Many different types of</span>
                          <em id="em_000220" smilref="Programming_Robots_with_ROS00006.smil#em_000220">shaft encoders</em>
                          <span class="text" id="span_001349" smilref="Programming_Robots_with_ROS00006.smil#span_001349">are designed expressly for this purpose. Shaft encoders are typically constructed by attaching a marker to the shaft and measuring its motion relative to another frame of reference, such as the chassis of the robot or the previous link on a manipulator arm. The implementation may be done with magnets, optical discs, variable resistors, or variable capacitors, among many other options, with trade-offs including size, cost, accuracy, maximum speed, and whether the measurement is</span>
                          <em id="em_000221" smilref="Programming_Robots_with_ROS00006.smil#em_000221">absolute</em>
                          <span class="text" id="span_001350" smilref="Programming_Robots_with_ROS00006.smil#span_001350">or</span>
                          <em id="em_000222" smilref="Programming_Robots_with_ROS00006.smil#em_000222">relative</em>
                          <span class="text" id="span_001351" smilref="Programming_Robots_with_ROS00006.smil#span_001351">to the position at power-up. Regardless, the principle remains the same: the angular position of a marker on a shaft is measured relative to an adjacent</span>
                          <em id="em_000223" smilref="Programming_Robots_with_ROS00006.smil#em_000223">frame of reference</em>
                          <span class="text" id="span_001352" smilref="Programming_Robots_with_ROS00006.smil#span_001352">.</span>
                        </p>
                        <p data-type="indexterm" data-primary="dead reckoning" id="ch06-idp21819296">
                          <span class="text" id="span_001353" smilref="Programming_Robots_with_ROS00006.smil#span_001353">Just like automobile speedometers and odometers, shaft encoders are used to count the precise number of rotations of the robot's wheels, and thereby estimate how far the vehicle has traveled and how much it has turned. Note that</span>
                          <em id="em_000224" smilref="Programming_Robots_with_ROS00006.smil#em_000224">odometry</em>
                          <span class="text" id="span_001354" smilref="Programming_Robots_with_ROS00006.smil#span_001354">is simply a count of how many times the drive wheels have turned, and is also known as</span>
                          <em id="ch06-idp21820000" smilref="Programming_Robots_with_ROS00006.smil#ch06-idp21820000">dead reckoning</em>
                          <span class="text" id="span_001355" smilref="Programming_Robots_with_ROS00006.smil#span_001355">in some domains. It is</span>
                          <em id="em_000225" smilref="Programming_Robots_with_ROS00006.smil#em_000225">not</em>
                          <span class="text" id="span_001356" smilref="Programming_Robots_with_ROS00006.smil#span_001356">a direct measurement of the vehicle position. Minute differences in wheel diameters, tire pressures, carpet weave direction (really!), axle misalignments, minor skidding, and countless other sources of error are cumulative over time. As a result, the raw odometry estimates of</span>
                          <em id="em_000226" smilref="Programming_Robots_with_ROS00006.smil#em_000226">any</em>
                          <span class="text" id="span_001357" smilref="Programming_Robots_with_ROS00006.smil#span_001357">robot will drift; the longer the robot drives, the more error accumulates in the estimate. For example, a robot traveling down the middle of a long, straight corridor will</span>
                          <em id="em_000227" smilref="Programming_Robots_with_ROS00006.smil#em_000227">always</em>
                          <span class="text" id="span_001358" smilref="Programming_Robots_with_ROS00006.smil#span_001358">have odometry that is a gradual curve. Put another way, if both tires of a differential-drive robot are turned in the same direction at the exact same wheel velocity, the robot will never drive in a truly straight line. This is why mobile robots need additional sensors and clever algorithms to build maps and navigate.</span>
                        </p>
                        <p data-type="indexterm" data-primary="manipulator configuration (vector)" id="ch06-idp21824304">
                          <span class="text" id="span_001359" smilref="Programming_Robots_with_ROS00006.smil#span_001359">Shaft encoders are also used extensively in robot manipulators. The vast majority of manipulator arms have at least one shaft encoder for every rotary joint, and the vector of shaft encoder readings is often called the</span>
                          <em id="em_000228" smilref="Programming_Robots_with_ROS00006.smil#em_000228">manipulator configuration</em>
                          <span class="text" id="span_001360" smilref="Programming_Robots_with_ROS00006.smil#span_001360">. When combined with a geometric model of each link of a manipulator arm, the shaft encoders allow higher-level collision-avoidance, planning, and trajectory-following algorithms to control the robot.</span>
                        </p>
                        <p id="p_000477">
                          <span class="text" id="span_001361" smilref="Programming_Robots_with_ROS00006.smil#span_001361">Because the mobility and manipulation uses of shaft encoders are quite different, the ROS conventions for each use are also quite different. Although the raw encoder counts may also be reported by some mobile-base device drivers, odometry estimates are most useful when reported as a</span>
                          <em id="em_000229" smilref="Programming_Robots_with_ROS00006.smil#em_000229">spatial transformation</em>
                          <span class="text" id="span_001362" smilref="Programming_Robots_with_ROS00006.smil#span_001362">represented by a</span>
                          <span class="keep-together" id="span_001363">
                            <code xml:space="preserve" id="code_000633" smilref="Programming_Robots_with_ROS00006.smil#code_000633">geometry_msgs/Transform</code>
                          </span>
                          <span class="text" id="span_001364" smilref="Programming_Robots_with_ROS00006.smil#span_001364">message. This concept will be discussed at great length throughout the book, but in general, a spatial transform describes one frame of reference relative to another frame of reference. In this case, the odometry transform typically describes the shaft encoder's odometric estimate relative to the position of the robot at power-up, or where its encoders were last reset.</span>
                        </p>
                        <p data-type="indexterm" data-primary="JointState message" id="ch06-idp21829136" data-startref="ix_6-robots-asciidoc11">
                          <span class="text" id="span_001365" smilref="Programming_Robots_with_ROS00006.smil#span_001365">In contrast, the encoder readings for manipulator arms are typically broadcast by ROS manipulator device drivers as</span>
                          <code xml:space="preserve" id="code_000634" smilref="Programming_Robots_with_ROS00006.smil#code_000634">sensor_msgs/JointState</code>
                          <span class="text" id="span_001366" smilref="Programming_Robots_with_ROS00006.smil#span_001366">messages. The</span>
                          <span class="keep-together" id="span_001367">
                            <code xml:space="preserve" id="code_000635" smilref="Programming_Robots_with_ROS00006.smil#code_000635">JointState</code>
                          </span>
                          <span class="text" id="span_001368" smilref="Programming_Robots_with_ROS00006.smil#span_001368">message contains vectors of angles in radians, and angular velocities in radians per second. Since typical shaft encoders have thousands of discrete states per revolution, the ROS device drivers for manipulator arms are required to scale the encoders as needed, accounting for transmissions and linkages, to produce a</span>
                          <code xml:space="preserve" id="code_000636" smilref="Programming_Robots_with_ROS00006.smil#code_000636">JointState</code>
                          <span class="text" id="span_001369" smilref="Programming_Robots_with_ROS00006.smil#span_001369">vector with standard units. These messages are used extensively by ROS software packages, as they provide the minimal complete description of the state of a manipulator.</span>
                        </p>
                        <p id="ch06-idp21834352" data-type="indexterm" data-startref="ix_6-robots-asciidoc6" smilref="Programming_Robots_with_ROS00006.smil#ch06-idp21834352">That about covers it for the physical parts of a robot system. We now turn our attention to the "brains," where the robot interprets sensor data and determines how to move its body, and where we'll be spending most of our time in this book.</p>
                      </div>
                    </section>
                  </div>
                </section>
                <section data-type="sect2" data-pdf-bookmark="Computation" id="section_000073">
                  <h1 id="h1_000117" smilref="Programming_Robots_with_ROS00006.smil#h1_000117">Computation</h1>
                  <div class="sect2" id="ch06-idp21746816">
                    <p id="ch06-idp21836336" data-type="indexterm" data-primary="computational subsystems" data-secondary="computation" smilref="Programming_Robots_with_ROS00006.smil#ch06-idp21836336">Impressive robotic systems have been implemented on computing resources ranging from large racks of servers down to extremely small and efficient 8-bit microcontrollers. Fierce debates have raged throughout the history of robotics as to exactly how much computer processing is required to produce robust, useful robot behavior. Insect brains, for example, are extremely small and power-efficient, yet insects are arguably the most successful life forms on the planet. Biological brains process data very differently from "mainstream" systems-engineering approaches of human technology, which has led to large and sustained research projects that study and try to replicate the success of bio-inspired computational architectures.</p>
                    <p class="keep-together" id="p_000478">
                      <span class="text" id="span_001370" smilref="Programming_Robots_with_ROS00006.smil#span_001370">ROS takes a more traditional software-engineering approach to robotic computational architecture; as described in the first few chapters of this book, ROS uses a dynamic message-passing graph to pass data between software nodes, which are typically isolated by the POSIX process model. This does not come for free. It certainly requires additional CPU cycles to serialize a message from one node, send it over some interprocess or network communications method to another node, and deserialize it for another node. However, it is our opinion that the rapid prototyping</span>
                      <span class="keep-together" id="span_001371" smilref="Programming_Robots_with_ROS00006.smil#span_001371">and software integration</span>
                      <span class="text" id="span_001372" smilref="Programming_Robots_with_ROS00006.smil#span_001372">benefits of this architecture outweigh its computational overhead.</span>
                    </p>
                    <p id="p_000479" smilref="Programming_Robots_with_ROS00006.smil#p_000479">Because of this messaging overhead and the emphasis on module isolation, ROS is not currently intended to run on extremely small microcontrollers. ROS can be (and has been) used to emulate and rapid-prototype minimalist processing paradigms. Typically, however, ROS is used to build systems that include considerable perceptual input and complex processing algorithms, where its modular and dynamically extensible architecture can simplify system design and operation.</p>
                    <p id="ch06-idp21843264" data-type="indexterm" data-startref="ix_6-robots-asciidoc0" smilref="Programming_Robots_with_ROS00006.smil#ch06-idp21843264">ROS currently must run on top of a full-featured operating system such as Linux or Mac OS X. Fortunately, the continuing advance of Moore's law and mass-market demand for battery-powered devices has led to ever-smaller and more power-efficient platforms capable of running full operating systems. ROS can run on small-form-factor embedded computer systems such as Gumstix, Raspberry Pi, or BeagleBone, among many others. Going up the performance and power curve, ROS has been widely used on a large range of laptops, desktops, and servers. Human-scale robots often carry one or more standard PC motherboards running Linux headless, which are accessed over a network link.</p>
                  </div>
                </section>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Complete Robots" id="section_000074">
              <h1 id="h1_000118" smilref="Programming_Robots_with_ROS00006.smil#h1_000118">Complete Robots</h1>
              <div class="sect1" id="ch06-idp21844096">
                <p id="ch06-ix_6-robots-asciidoc13" data-type="indexterm" data-primary="robots" data-seealso="specific robots, e.g.: TurtleBot" smilref="Programming_Robots_with_ROS00006.smil#ch06-ix_6-robots-asciidoc13">The previous section described subsystems commonly found on many types of robots running ROS. Many of these robots used in research settings are custom built to investigate a particular research problem. However, there are a growing number of standard products that can be purchased and used "out of the box" for research, development, and operations in many domains of robotics. This section will describe several of these platforms, which will be used for examples throughout the rest of the book.</p>
                <section data-type="sect2" data-pdf-bookmark="PR2" id="section_000075">
                  <h1 id="h1_000119" smilref="Programming_Robots_with_ROS00006.smil#h1_000119">PR2</h1>
                  <div class="sect2" id="ch06-idp21847392">
                    <p id="ch06-idp21848736" data-type="indexterm" data-primary="PR2 robot" smilref="Programming_Robots_with_ROS00006.smil#ch06-idp21848736">The PR2 robot was one of the original ROS target platforms. In many ways, it was the "ultimate" research platform for service-robotics software at the time of its release in 2010. Its mobile base is actuated by four steerable casters and has a laser scanner for navigation. Atop this mobile base, the robot has a telescoping torso that carries two human-scale seven-DOF arms. The arms have a unique passive mechanical counterbalance, which permits the use of surprisingly low-power motors for human-scale arms.</p>
                    <p id="p_000480" smilref="Programming_Robots_with_ROS00006.smil#p_000480">The PR2 has a pan/tilt head equipped with a wide range of sensors, including a "nodding" laser scanner that can tilt up and down independently of the head, a pair of stereo cameras for short and long distances, and a Kinect depth camera. Additionally, each forearm of the robot has a camera, and the gripper fingertips have tactile sensors. All told, the PR2 has two laser scanners, six cameras, a depth camera, four tactile arrays, and 1 kHz encoder feedback. All of this data is handled by a pair of computers in the base of the robot, with an onboard gigabit network connecting them to a pair of WiFi radios.</p>
                    <p id="p_000481">
                      <span class="text" id="span_001373" smilref="Programming_Robots_with_ROS00006.smil#span_001373">All of this functionality came at a price, since the PR2 was not designed for low cost. When it was commercially available, the PR2 listed for about $400,000.</span>
                      <note id="ch06-idp21851696-marker">
                        <noteref data-type="noteref" idref="#ch06-idp21851696" id="noteref_000012" smilref="Programming_Robots_with_ROS00006.smil#noteref_000012">1</noteref>
                      </note>
                      <span class="text" id="span_001374" smilref="Programming_Robots_with_ROS00006.smil#span_001374">Despite this financial hurdle, its fully integrated "out-of-the-box" experience was a landmark for research robots and is why PR2 robots are being actively used in dozens of research labs around the world.</span>
                      <a data-type="xref" href="#ch06-pr2_introductory_rendering" external="false" id="a_000081" smilref="Programming_Robots_with_ROS00006.smil#a_000081">Figure 6-1</a>
                      <span class="text" id="span_001375" smilref="Programming_Robots_with_ROS00006.smil#span_001375">shows a PR2 running in the Gazebo simulator. Simulators will be discussed later in this chapter.</span>
                    </p>
                    <figure id="figure_000012">
                      <h1 id="h1_000120" smilref="Programming_Robots_with_ROS00006.smil#h1_000120">Figure 6-1. The PR2 robot running in the Gazebo simulator</h1>
                      <div id="ch06-pr2_introductory_rendering" class="figure">
                        <img src="images/prwr_0601.jpg" alt="PR2" id="img_000030" />
                      </div>
                    </figure>
                  </div>
                </section>
                <section data-type="sect2" data-pdf-bookmark="Fetch" id="section_000076">
                  <h1 id="h1_000121" smilref="Programming_Robots_with_ROS00006.smil#h1_000121">Fetch</h1>
                  <div class="sect2" id="ch06-idp21855584">
                    <p id="ch06-idp21856784" data-type="indexterm" data-primary="Fetch robot">
                      <span class="text" id="span_001376" smilref="Programming_Robots_with_ROS00006.smil#span_001376">Fetch is a mobile manipulation robot intended for warehouse applications. The design team at Fetch Robotics, Inc. includes many of those who designed the PR2 robot, and in some ways the Fetch robot can be seen as a smaller, more practical and cost-effective "spiritual successor" of the PR2. The single-arm robot, shown in</span>
                      <a data-type="xref" href="#ch06-fetch_introductory_rendering" external="false" id="a_000082" smilref="Programming_Robots_with_ROS00006.smil#a_000082">Figure 6-2</a>
                      <span class="text" id="span_001377" smilref="Programming_Robots_with_ROS00006.smil#span_001377">is fully ROS-based and has a compact sensor head built around a depth camera. The differential-drive mobile base has a laser scanner intended for navigation purposes and a telescoping torso. At the time of writing, the price of the robot has not been publicly released, but it is expected to be much more affordable than the PR2.</span>
                    </p>
                    <figure id="figure_000013">
                      <h1 id="h1_000122" smilref="Programming_Robots_with_ROS00006.smil#h1_000122">Figure 6-2. The Fetch robot running in the Gazebo simulator</h1>
                      <div id="ch06-fetch_introductory_rendering" class="figure">
                        <img src="images/prwr_0602.jpg" alt="Fetch" id="img_000031" />
                      </div>
                    </figure>
                  </div>
                </section>
                <section data-type="sect2" data-pdf-bookmark="Robonaut 2" id="section_000077">
                  <h1 id="h1_000123" smilref="Programming_Robots_with_ROS00006.smil#h1_000123">Robonaut 2</h1>
                  <div class="sect2" id="ch06-idp21861392">
                    <p id="ch06-idp21862592" data-type="indexterm" data-primary="R2 (Robonaut 2)">
                      <span class="text" id="span_001378" smilref="Programming_Robots_with_ROS00006.smil#span_001378">The NASA/GM Robonaut 2 (</span>
                      <a data-type="xref" href="#ch06-r2_introductory_rendering" external="false" id="a_000083" smilref="Programming_Robots_with_ROS00006.smil#a_000083">Figure 6-3</a>
                      <span class="text" id="span_001379" smilref="Programming_Robots_with_ROS00006.smil#span_001379">is a human-scale robot designed with the extreme reliability and safety systems necessary for operation aboard the International Space Station. At the time of writing, the Robonaut 2 (a.k.a R2) aboard the space station is running ROS for high-level task control. Much more information is available at</span>
                      <a href="http://robonaut.jsc.nasa.gov" external="true" id="a_000084">
                        <em class="hyperlink" id="em_000230" smilref="Programming_Robots_with_ROS00006.smil#em_000230">http://robonaut.jsc.nasa.gov</em>
                      </a>
                      <span class="text" id="span_001380" smilref="Programming_Robots_with_ROS00006.smil#span_001380">.</span>
                    </p>
                    <figure id="figure_000014">
                      <h1 id="h1_000124" smilref="Programming_Robots_with_ROS00006.smil#h1_000124">Figure 6-3. The NASA R2 robot running in the Gazebo simulator</h1>
                      <div id="ch06-r2_introductory_rendering" class="figure">
                        <img src="images/prwr_0603.jpg" alt="R2" id="img_000032" />
                      </div>
                    </figure>
                  </div>
                </section>
                <section data-type="sect2" data-pdf-bookmark="TurtleBot" id="section_000078">
                  <h1 id="h1_000125" smilref="Programming_Robots_with_ROS00006.smil#h1_000125">TurtleBot</h1>
                  <div class="sect2" id="ch06-idp21868032">
                    <p id="ch06-idp21869232" data-type="indexterm" data-primary="TurtleBot" data-seealso="follow-bot, teleop-bot, wander-bot">
                      <span class="text" id="span_001381" smilref="Programming_Robots_with_ROS00006.smil#span_001381">The TurtleBot was designed in 2011 as a minimalist platform for ROS-based mobile robotics education and prototyping. It has a small differential-drive mobile base with an internal battery, power regulators, and charging contacts. Atop this base is a stack of laser-cut "shelves" that provide space to hold a netbook computer and depth camera, and lots of open space for prototyping. To control cost, the TurtleBot relies on a depth camera for range sensing; it does not have a laser scanner. Despite this, mapping and navigation can work quite well for indoor spaces. TurtleBots are available from several manufacturers for less than $2,000. More information is available at</span>
                      <a href="http://turtlebot.org" external="true" id="a_000085">
                        <em class="hyperlink" id="em_000231" smilref="Programming_Robots_with_ROS00006.smil#em_000231">http://turtlebot.org</em>
                      </a>
                      <span class="text" id="span_001382" smilref="Programming_Robots_with_ROS00006.smil#span_001382">.</span>
                    </p>
                    <p id="p_000482">
                      <span class="text" id="span_001383" smilref="Programming_Robots_with_ROS00006.smil#span_001383">Because the shelves of the TurtleBot (pictured in</span>
                      <a data-type="xref" href="#ch06-turtlebot_introductory_rendering" external="false" id="a_000086" smilref="Programming_Robots_with_ROS00006.smil#a_000086">Figure 6-4</a>
                      <span class="text" id="span_001384" smilref="Programming_Robots_with_ROS00006.smil#span_001384">) are covered with mounting holes, many owners have added additional subsystems to their TurtleBots, such as small manipulator arms, additional sensors, or upgraded computers. However, the "stock" TurtleBot is an excellent starting point for indoor mobile robotics. Many similar systems exist from other vendors, such as the Pioneer and Erratic robots and thousands of custom-built mobile robots around the world. The examples in this book will use the TurtleBot, but any other small differential-drive platform could easily be substituted.</span>
                    </p>
                    <figure id="figure_000015">
                      <h1 id="h1_000126" smilref="Programming_Robots_with_ROS00006.smil#h1_000126">Figure 6-4. The TurtleBot robot running in the Gazebo simulator</h1>
                      <div id="ch06-turtlebot_introductory_rendering" class="figure">
                        <img src="images/prwr_0604.jpg" alt="Turtlebot" id="img_000033" />
                      </div>
                    </figure>
                  </div>
                </section>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Simulators" id="section_000079">
              <h1 id="h1_000127" smilref="Programming_Robots_with_ROS00006.smil#h1_000127">Simulators</h1>
              <div class="sect1" id="ch06-idp21876224">
                <p id="ch06-ix_6-robots-asciidoc14" data-type="indexterm" data-primary="simulators" smilref="Programming_Robots_with_ROS00006.smil#ch06-ix_6-robots-asciidoc14">Although the preceding list of robots includes platforms that we consider to be remarkably low-cost compared to prior robots of similar capabilities, they are still significant investments. In addition, real robots require logistics including lab space, recharging of batteries, and operational quirks that often become part of the institutional knowledge of the organization operating the robot. Sadly, even the best robots break periodically due to various combinations of operator error, environmental conditions, manufacturing or design defects, and so on.</p>
                <p id="p_000483">
                  <span class="text" id="span_001385" smilref="Programming_Robots_with_ROS00006.smil#span_001385">Many of these headaches can be avoided by using</span>
                  <em id="em_000232" smilref="Programming_Robots_with_ROS00006.smil#em_000232">simulated</em>
                  <span class="text" id="span_001386" smilref="Programming_Robots_with_ROS00006.smil#span_001386">robots. At first glance, this seems to defeat the whole purpose of robotics; after all, the very definition of a robot involves perceiving and/or manipulating the environment. Software robots, however, are extraordinarily useful. In simulation, we can model as much or as little of reality as we desire. Sensors and actuators can be modeled as ideal devices, or they can incorporate various levels of distortion, errors, and unexpected faults. Although data logs can be used in automated test suites to verify that sensing algorithms produce expected results, automated testing of control algorithms typically requires simulated robots, since the algorithms under test need to be able to experience the consequences of their actions.</span>
                </p>
                <p id="p_000484">
                  <span class="text" id="span_001387" smilref="Programming_Robots_with_ROS00006.smil#span_001387">Simulated robots are the ultimate low-cost platforms. They are free! They do not require complex operating procedures; you simply spawn a</span>
                  <code xml:space="preserve" id="code_000637" smilref="Programming_Robots_with_ROS00006.smil#code_000637">roslaunch</code>
                  <span class="text" id="span_001388" smilref="Programming_Robots_with_ROS00006.smil#span_001388">script and wait a few seconds, and a shiny new robot is created. At the end of the experimental run, a quick Ctrl-C and the robot vaporizes. For those of us who have spent many long nights with the pain and suffering caused by operating real robots, the benefits of simulated robots are simply magical.</span>
                </p>
                <p id="p_000485">
                  <span class="text" id="span_001389" smilref="Programming_Robots_with_ROS00006.smil#span_001389">Due to the isolation provided by the messaging interfaces of ROS, a vast majority of the robot's software graph can be run identically whether it is controlling a real robot or a simulated robot. At runtime, as the various nodes are launched, they simply find one another and connect. Simulation input and output streams connect to the graph in the place of the device drivers of the real robot. Although some parameter tuning is often required, ideally the</span>
                  <em id="em_000233" smilref="Programming_Robots_with_ROS00006.smil#em_000233">structure</em>
                  <span class="text" id="span_001390" smilref="Programming_Robots_with_ROS00006.smil#span_001390">of the software will be the same, and often the simulation can be modified to reduce the amount of parameter tweaks required when transitioning between simulation and reality.</span>
                </p>
                <p id="p_000486" smilref="Programming_Robots_with_ROS00006.smil#p_000486">As alluded to in the previous paragraphs, there are many use cases for simulated robots, ranging from algorithm development to automated software verification. This has led to the creation of a large number of robot simulators, many of which integrate nicely with ROS. The following sections describe two simulators that will be used in this book.</p>
                <section data-type="sect2" data-pdf-bookmark="Stage" id="section_000080">
                  <h1 id="h1_000128" smilref="Programming_Robots_with_ROS00006.smil#h1_000128">Stage</h1>
                  <div class="sect2" id="ch06-idp21884624">
                    <p data-type="indexterm" data-primary="simulators" data-secondary="Stage" id="ch06-idp21885824">
                      <span class="text" id="span_001391" smilref="Programming_Robots_with_ROS00006.smil#span_001391">For many years, the two-dimensional</span>
                      <em id="em_000234" smilref="Programming_Robots_with_ROS00006.smil#em_000234">simultaneous localization and mapping</em>
                      <span class="text" id="span_001392" smilref="Programming_Robots_with_ROS00006.smil#span_001392">(SLAM) problem was one of the most heavily researched topics in the robotics community. A number of 2D simulators were developed in response to the need for repeatable experiments, as well as the many practical annoyances of gathering long datasets of robots driving down endless office corridors. Canonical laser range-finders and differential-drive robots were modeled, often using simple</span>
                      <em id="ch06-idp21887024" smilref="Programming_Robots_with_ROS00006.smil#ch06-idp21887024">kinematic</em>
                      <span class="text" id="span_001393" smilref="Programming_Robots_with_ROS00006.smil#span_001393">models that enforce that, for example, the robot stays plastered to a 2D surface and its range sensors only interact with vertical walls, creating worlds that vaguely resemble that of</span>
                      <em id="ch06-idp21887792" smilref="Programming_Robots_with_ROS00006.smil#ch06-idp21887792">Pac-Man</em>
                      <span class="text" id="span_001394" smilref="Programming_Robots_with_ROS00006.smil#span_001394">(see</span>
                      <a data-type="xref" href="#ch06-stage_introductory_rendering" external="false" id="a_000087" smilref="Programming_Robots_with_ROS00006.smil#a_000087">Figure 6-5</a>
                      <span class="text" id="span_001395" smilref="Programming_Robots_with_ROS00006.smil#span_001395">). Although limited in scope, these 2D simulators are very fast computationally, and they are generally quite simple to interact with.</span>
                    </p>
                    <figure id="figure_000016">
                      <h1 id="h1_000129" smilref="Programming_Robots_with_ROS00006.smil#h1_000129">Figure 6-5. Typical screenshot of the Stage simulator</h1>
                      <div id="ch06-stage_introductory_rendering" class="figure">
                        <img src="images/prwr_0605.jpg" alt="Stage" id="img_000034" />
                      </div>
                    </figure>
                    <p class="keep-together" id="p_000487">
                      <span class="text" id="span_001396" smilref="Programming_Robots_with_ROS00006.smil#span_001396">Stage is an excellent example of this type of 2D simulator. It has a relatively simple modeling language that allows the creation of planar worlds with simple types</span>
                      <span class="keep-together" id="span_001397" smilref="Programming_Robots_with_ROS00006.smil#span_001397">of objects. Stage</span>
                      <span class="text" id="span_001398" smilref="Programming_Robots_with_ROS00006.smil#span_001398">was designed from the outset to support multiple robots simultaneously interacting with the same world. It has been wrapped with a ROS integration package that accepts velocity commands from ROS and outputs an odometric</span>
                      <span class="keep-together" id="span_001399" smilref="Programming_Robots_with_ROS00006.smil#span_001399">transformation as well</span>
                      <span class="text" id="span_001400" smilref="Programming_Robots_with_ROS00006.smil#span_001400">as the simulated laser range-finders from the robot(s) in the simulation.</span>
                    </p>
                  </div>
                </section>
                <section data-type="sect2" class="pagebreak-before" data-pdf-bookmark="Gazebo" id="section_000081">
                  <h1 id="h1_000130" smilref="Programming_Robots_with_ROS00006.smil#h1_000130">Gazebo</h1>
                  <div class="sect2" id="ch06-idp21896432">
                    <p id="ch06-ix_6-robots-asciidoc15" data-type="indexterm" data-primary="Gazebo" data-secondary="Gazebo" data-seealso="Gazebo" smilref="Programming_Robots_with_ROS00006.smil#ch06-ix_6-robots-asciidoc15">Although Stage and other 2D simulators are computationally efficient and excel at simulating planar navigation in office-like environments, it is important to note that planar navigation is only one aspect of robotics. Even when only considering robot navigation, a vast array of environments require nonplanar motion, ranging from outdoor ground vehicles to aerial, underwater, and space robotics. Three-dimensional simulation is necessary for software development in these environments.</p>
                    <p id="p_000488">
                      <span class="text" id="span_001401" smilref="Programming_Robots_with_ROS00006.smil#span_001401">In general, robot motions can be divided into</span>
                      <em id="em_000235" smilref="Programming_Robots_with_ROS00006.smil#em_000235">mobility</em>
                      <span class="text" id="span_001402" smilref="Programming_Robots_with_ROS00006.smil#span_001402">and</span>
                      <em id="em_000236" smilref="Programming_Robots_with_ROS00006.smil#em_000236">manipulation</em>
                      <span class="text" id="span_001403" smilref="Programming_Robots_with_ROS00006.smil#span_001403">. The mobility aspects can be handled by two- or three-dimensional simulators in which the environment around the robot is</span>
                      <em id="em_000237" smilref="Programming_Robots_with_ROS00006.smil#em_000237">static</em>
                      <span class="text" id="span_001404" smilref="Programming_Robots_with_ROS00006.smil#span_001404">. Simulating manipulation, however, requires a significant increase in the complexity of the simulator to handle the dynamics of not just the robot, but also the</span>
                      <em id="em_000238" smilref="Programming_Robots_with_ROS00006.smil#em_000238">dynamic</em>
                      <span class="text" id="span_001405" smilref="Programming_Robots_with_ROS00006.smil#span_001405">models in the scene. For example, at the moment that a simulated household robot is picking up a handheld object, contact forces must be computed between the robot, the object, and the surface the object was previously resting upon.</span>
                    </p>
                    <p data-type="indexterm" data-primary="rigid-body dynamics" id="ch06-idp21904224">
                      <span class="text" id="span_001406" smilref="Programming_Robots_with_ROS00006.smil#span_001406">Simulators often use</span>
                      <em id="em_000239" smilref="Programming_Robots_with_ROS00006.smil#em_000239">rigid-body</em>
                      <span class="text" id="span_001407" smilref="Programming_Robots_with_ROS00006.smil#span_001407">dynamics, in which all objects are assumed to be incompressible, as if the world were a giant pinball machine. This assumption drastically improves the computational performance of the simulator, but often requires clever tricks to remain stable and realistic, since many rigid-body interactions become</span>
                      <em id="em_000240" smilref="Programming_Robots_with_ROS00006.smil#em_000240">point contacts</em>
                      <span class="text" id="span_001408" smilref="Programming_Robots_with_ROS00006.smil#span_001408">that do not accurately model the true physical phenomena. The art and science of managing the tension between computational performance and physical realism are highly nontrivial. There are many approaches to this trade-off, with many well suited to some domains but ill suited to others.</span>
                    </p>
                    <p id="ch06-idp21909008" data-type="indexterm" data-primary="Bullet Physics Library">
                      <span class="text" id="span_001409" smilref="Programming_Robots_with_ROS00006.smil#span_001409">Like all simulators, Gazebo (</span>
                      <a data-type="xref" href="#ch06-gazebo_introductory_rendering" external="false" id="a_000088" smilref="Programming_Robots_with_ROS00006.smil#a_000088">Figure 6-6</a>
                      <span class="text" id="span_001410" smilref="Programming_Robots_with_ROS00006.smil#span_001410">) is the product of a variety of trade-offs in its design and implementation. Historically, Gazebo has used the Open Dynamics Engine for rigid-body physics, but recently it has gained the ability to choose between physics engines at startup. For the purposes of this book, we will be using Gazebo with either the Open Dynamics Engine or with the Bullet Physics library, both of which are capable of real-time simulation with relatively simple worlds and robots and, with some care, can produce physically plausible behavior.</span>
                    </p>
                    <figure id="figure_000017">
                      <h1 id="h1_000131" smilref="Programming_Robots_with_ROS00006.smil#h1_000131">Figure 6-6. Typical screenshot of the Gazebo simulator</h1>
                      <div id="ch06-gazebo_introductory_rendering" class="figure">
                        <img src="images/prwr_0606.jpg" alt="Gazebo" id="img_000035" />
                      </div>
                    </figure>
                    <p id="ch06-idp21915808" data-type="indexterm" data-startref="ix_6-robots-asciidoc15" data-primary="gazebo_ros package">
                      <span class="text" id="span_001411" smilref="Programming_Robots_with_ROS00006.smil#span_001411">ROS integrates closely with Gazebo through the</span>
                      <code id="ch06-idp21912304" xml:space="preserve" smilref="Programming_Robots_with_ROS00006.smil#ch06-idp21912304">gazebo_ros</code>
                      <span class="text" id="span_001412" smilref="Programming_Robots_with_ROS00006.smil#span_001412">package. This package provides a Gazebo</span>
                      <em id="em_000241" smilref="Programming_Robots_with_ROS00006.smil#em_000241">plugin</em>
                      <span class="text" id="span_001413" smilref="Programming_Robots_with_ROS00006.smil#span_001413">module that allows bidirectional communication between Gazebo and ROS. Simulated sensor and physics data can stream from Gazebo to ROS, and actuator commands can stream from ROS back to Gazebo. In fact, by choosing consistent names and data types for these data streams, it is possible for Gazebo to</span>
                      <em id="em_000242" smilref="Programming_Robots_with_ROS00006.smil#em_000242">exactly</em>
                      <span class="text" id="span_001414" smilref="Programming_Robots_with_ROS00006.smil#span_001414">match the ROS API of a robot. When this is achieved, all of the robot software above the device-driver level can be run identically both on the real robot, and (after parameter tuning) in the simulator. This is an enormously powerful concept and will be used extensively throughout this book.</span>
                    </p>
                  </div>
                </section>
                <section data-type="sect2" data-pdf-bookmark="Other Simulators" id="section_000082">
                  <h1 id="h1_000132" smilref="Programming_Robots_with_ROS00006.smil#h1_000132">Other Simulators</h1>
                  <div class="sect2" id="ch06-idp21916608">
                    <p id="ch06-idp21919440" data-type="indexterm" data-startref="ix_6-robots-asciidoc14" data-primary="simulators" data-secondary="alternatives to Gazebo and Stage" smilref="Programming_Robots_with_ROS00006.smil#ch06-idp21919440">There are many other simulators that can be used with ROS, such as MORSE and V-REP. Each simulator, whether it be Gazebo, Stage, MORSE, V-REP, turtlesim, or any other, has a different set of trade-offs. These include trade-offs in speed, accuracy, graphics quality, dimensionality (2D versus 3D), types of sensors supported, usability, platform support, and so on. No simulator of which we are aware is capable of maximizing all of those attributes simultaneously, so the choice of the "right" simulator for a particular task will be dependent on many factors.</p>
                  </div>
                </section>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Summary" id="section_000083">
              <h1 id="h1_000133" smilref="Programming_Robots_with_ROS00006.smil#h1_000133">Summary</h1>
              <div class="sect1" id="ch06-idp21920368">
                <p id="p_000489" smilref="Programming_Robots_with_ROS00006.smil#p_000489">In this chapter, we've looked at the subsystems of a typical robot, focusing on the types of robots that ROS is most concerned with: mobile manipulation platforms. By now, you should have a pretty good idea of what a robot looks like, and you should be starting to figure out how ROS might be used to control one, reading data from the sensors, figuring out how to interpret that data and what to do, and sending commands to the acutators to make it move.</p>
                <p id="p_000490" smilref="Programming_Robots_with_ROS00006.smil#p_000490">The next chapter ties together all of the material you've already read and shows you how to write code that will make a robot wander around. As discussed in this chapter, all of the code we will write in this book can be targeted either at real robots or at simulated robots. Onward!</p>
              </div>
            </section>
            <div data-type="footnotes" id="div_000020">
              <note id="ch06-idp21851696">
                <p data-type="footnote" id="p_000491">
                  <noteref idref="#ch06-idp21851696-marker" id="noteref_000013" smilref="Programming_Robots_with_ROS00006.smil#noteref_000013">1</noteref>
                  <span class="text" id="span_001415" smilref="Programming_Robots_with_ROS00006.smil#span_001415">All prices are approximate, as of the time of writing, and quoted in US dollars.</span>
                </p>
              </note>
            </div>
          </div>
        </section>
      </level1>
      <level1 id="ch07">
        <section xmlns:epub="http://www.idpf.org/2007/ops" data-type="chapter" epub:type="chapter" data-pdf-bookmark="Chapter 7. Wander-bot" id="section_000084">
          <h1 id="h1_000134" smilref="Programming_Robots_with_ROS00006.smil#h1_000134">Chapter 7. Wander-bot</h1>
          <div class="chapter" id="ch07-wanderbot">
            <p id="ch07-ix_7-wanderbot-asciidoc0" data-type="indexterm" data-primary="wander-bot" smilref="Programming_Robots_with_ROS00006.smil#ch07-ix_7-wanderbot-asciidoc0">The first chapters of this book introduced many of the abstract ROS concepts used for communication between modules, such as topics, services, and actions. Then, the previous chapter introduced many of the sensing and actuation subsystems commonly found in modern robots. In this chapter, we will put these concepts together to create a robot that can wander around its environment. This might not sound terribly earth-shattering, but such a robot is actually capable of doing meaningful work: there is an entire class of tasks that are accomplished by driving across the environment. For example, many vacuuming or other floor-cleaning tasks can be accomplished by cleverly designed and carefully tuned algorithms where the robot, carrying its cleaning tool, traverses its environment somewhat randomly. The robot will eventually drive over all parts of the environment, completing its task.</p>
            <p id="p_000492" smilref="Programming_Robots_with_ROS00006.smil#p_000492">In this chapter, we will go step by step through the process of writing minimalist ROS-based robot control software, including creating a ROS package and testing it in simulation.</p>
            <section data-type="sect1" data-pdf-bookmark="Creating a Package" id="section_000085">
              <h1 id="h1_000135" smilref="Programming_Robots_with_ROS00006.smil#h1_000135">Creating a Package</h1>
              <div class="sect1" id="ch07-idp21927424">
                <p data-type="indexterm" data-primary="wander-bot" data-secondary="creating package for" id="ch07-ix_7-wanderbot-asciidoc2">
                  <span class="text" id="span_001416" smilref="Programming_Robots_with_ROS00006.smil#span_001416">First, let's create the workspace directory tree, which we will place in</span>
                  <em id="em_000243" smilref="Programming_Robots_with_ROS00006.smil#em_000243">~/wanderbot_ws</em>
                  <span class="text" id="span_001417" smilref="Programming_Robots_with_ROS00006.smil#span_001417">:</span>
                </p>
                <p id="p_000493">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000638"><span class="text" id="span_001418" smilref="Programming_Robots_with_ROS00006.smil#span_001418">
user@hostname$ </span><strong id="strong_000068" smilref="Programming_Robots_with_ROS00006.smil#strong_000068">mkdir -p ~/wanderbot_ws/src</strong><span class="text" id="span_001419" smilref="Programming_Robots_with_ROS00006.smil#span_001419">
user@hostname$ </span><strong id="strong_000069" smilref="Programming_Robots_with_ROS00006.smil#strong_000069">cd ~wanderbot_ws/src</strong><span class="text" id="span_001420" smilref="Programming_Robots_with_ROS00006.smil#span_001420">
user@hostname$ </span><strong id="strong_000070" smilref="Programming_Robots_with_ROS00006.smil#strong_000070">catkin_init_workspace</strong>
</code>
                </p>
                <p class="keep-together" id="p_000494">
                  <span class="text" id="span_001421" smilref="Programming_Robots_with_ROS00006.smil#span_001421">That's it! Next, it's just one more command to create a package in the new workspace. To create a package called</span>
                  <code xml:space="preserve" id="code_000639" smilref="Programming_Robots_with_ROS00006.smil#code_000639">wanderbot</code>
                  <span class="text" id="span_001422" smilref="Programming_Robots_with_ROS00006.smil#span_001422">that uses</span>
                  <code xml:space="preserve" id="code_000640" smilref="Programming_Robots_with_ROS00006.smil#code_000640">rospy</code>
                  <span class="text" id="span_001423" smilref="Programming_Robots_with_ROS00006.smil#span_001423">(the Python client for ROS)</span>
                  <span class="keep-together" id="span_001424" smilref="Programming_Robots_with_ROS00006.smil#span_001424">and a few standard</span>
                  <span class="text" id="span_001425" smilref="Programming_Robots_with_ROS00006.smil#span_001425">ROS message packages, we will use the</span>
                  <code xml:space="preserve" id="code_000641" smilref="Programming_Robots_with_ROS00006.smil#code_000641">catkin_create_pkg</code>
                  <span class="text" id="span_001426" smilref="Programming_Robots_with_ROS00006.smil#span_001426">command:</span>
                </p>
                <p id="p_000495">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000642"><span class="text" id="span_001427" smilref="Programming_Robots_with_ROS00006.smil#span_001427">
user@hostname$ </span><strong id="strong_000071" smilref="Programming_Robots_with_ROS00006.smil#strong_000071">cd ~/wanderbot_ws/src</strong><span class="text" id="span_001428" smilref="Programming_Robots_with_ROS00006.smil#span_001428">
user@hostname$ </span><strong id="strong_000072" smilref="Programming_Robots_with_ROS00006.smil#strong_000072">catkin_create_pkg wanderbot rospy geometry_msgs sensor_msgs</strong>
</code>
                </p>
                <p id="p_000496">
                  <span class="text" id="span_001429" smilref="Programming_Robots_with_ROS00006.smil#span_001429">The first argument,</span>
                  <code xml:space="preserve" id="code_000643" smilref="Programming_Robots_with_ROS00006.smil#code_000643">wanderbot</code>
                  <span class="text" id="span_001430" smilref="Programming_Robots_with_ROS00006.smil#span_001430">, is the name of the new package we want to create. The following arguments are the names of packages that the new package depends on. W must include these because the ROS build system needs to know the package dependencies in order to efficiently keep the builds up to date when source files change, and to generate any required installation dependencies when packages are released.</span>
                </p>
                <p id="p_000497">
                  <span class="text" id="span_001431" smilref="Programming_Robots_with_ROS00006.smil#span_001431">After running the</span>
                  <code xml:space="preserve" id="code_000644" smilref="Programming_Robots_with_ROS00006.smil#code_000644">catkin_create_pkg</code>
                  <span class="text" id="span_001432" smilref="Programming_Robots_with_ROS00006.smil#span_001432">command, there will be a package directory called</span>
                  <em id="em_000244" smilref="Programming_Robots_with_ROS00006.smil#em_000244">wanderbot</em>
                  <span class="text" id="span_001433" smilref="Programming_Robots_with_ROS00006.smil#span_001433">inside the workspace, including the following files:</span>
                </p>
                <list type="ul" id="list_000007">
                  <li id="li_000026">
                    <p id="p_000498">
                      <em id="em_000245" smilref="Programming_Robots_with_ROS00006.smil#em_000245">~/wanderbot_ws/src/wanderbot/CMakeLists.txt</em>
                      <span class="text" id="span_001434" smilref="Programming_Robots_with_ROS00006.smil#span_001434">, a starting point for the build script for this package</span>
                    </p>
                  </li>
                  <li id="li_000027">
                    <p id="p_000499">
                      <em id="em_000246" smilref="Programming_Robots_with_ROS00006.smil#em_000246">package.xml</em>
                      <span class="text" id="span_001435" smilref="Programming_Robots_with_ROS00006.smil#span_001435">, a machine-readable description of the package, including details such as its name, description, author, license, and which other packages it depends on to build and run</span>
                    </p>
                  </li>
                </list>
                <p id="p_000500">
                  <span class="text" id="span_001436" smilref="Programming_Robots_with_ROS00006.smil#span_001436">Now that we've created our</span>
                  <code xml:space="preserve" id="code_000645" smilref="Programming_Robots_with_ROS00006.smil#code_000645">wanderbot</code>
                  <span class="text" id="span_001437" smilref="Programming_Robots_with_ROS00006.smil#span_001437">package, we can create a minimal ROS node inside of it. In the previous chapters, we were just sending generic messages between nodes, such as strings or integers. Now, we can send something robot-specific. The following code will send a stream of motion commands 10 times per second, alternating every 3 seconds between driving and stopping. When driving, the program will send forward velocity commands of 0.5 meters per second. When stopped, it will send commands of 0 meters per second. This program is shown in</span>
                  <a data-type="xref" href="#ch07-red_light_green_light" external="false" id="a_000089" smilref="Programming_Robots_with_ROS00006.smil#a_000089">Example 7-1</a>
                  <span class="text" id="span_001438" smilref="Programming_Robots_with_ROS00006.smil#span_001438">.</span>
                </p>
                <h1 id="h1_000136" smilref="Programming_Robots_with_ROS00006.smil#h1_000136">Example 7-1. Red light! Green light!</h1>
                <div id="ch07-red_light_green_light" data-type="example">
                  <p id="p_000501">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_000646"><span class="text" id="span_001439" smilref="Programming_Robots_with_ROS00006.smil#span_001439">#!/usr/bin/env python</span>
<span class="text" id="span_001440" smilref="Programming_Robots_with_ROS00006.smil#span_001440">import</span> <span class="text" id="span_001441" smilref="Programming_Robots_with_ROS00006.smil#span_001441">rospy</span>
<span class="text" id="span_001442" smilref="Programming_Robots_with_ROS00006.smil#span_001442">from</span> <span class="text" id="span_001443" smilref="Programming_Robots_with_ROS00006.smil#span_001443">geometry_msgs.msg</span> <span class="text" id="span_001444" smilref="Programming_Robots_with_ROS00006.smil#span_001444">import</span> <span class="text" id="span_001445" smilref="Programming_Robots_with_ROS00006.smil#span_001445">Twist</span>

<span class="text" id="span_001446" smilref="Programming_Robots_with_ROS00006.smil#span_001446">cmd_vel_pub</span> <span class="text" id="span_001447" smilref="Programming_Robots_with_ROS00006.smil#span_001447">=</span> <span class="text" id="span_001448" smilref="Programming_Robots_with_ROS00006.smil#span_001448">rospy</span><span class="text" id="span_001449" smilref="Programming_Robots_with_ROS00006.smil#span_001449">.</span><span class="text" id="span_001450" smilref="Programming_Robots_with_ROS00006.smil#span_001450">Publisher</span><span class="text" id="span_001451" smilref="Programming_Robots_with_ROS00006.smil#span_001451">(</span><span class="text" id="span_001452" smilref="Programming_Robots_with_ROS00006.smil#span_001452">'</span><span class="text" id="span_001453" smilref="Programming_Robots_with_ROS00006.smil#span_001453">cmd_vel</span><span class="text" id="span_001454" smilref="Programming_Robots_with_ROS00006.smil#span_001454">'</span><span class="text" id="span_001455" smilref="Programming_Robots_with_ROS00006.smil#span_001455">,</span> <span class="text" id="span_001456" smilref="Programming_Robots_with_ROS00006.smil#span_001456">Twist</span><span class="text" id="span_001457" smilref="Programming_Robots_with_ROS00006.smil#span_001457">,</span> <span class="text" id="span_001458" smilref="Programming_Robots_with_ROS00006.smil#span_001458">queue_size</span><span class="text" id="span_001459" smilref="Programming_Robots_with_ROS00006.smil#span_001459">=</span><span class="text" id="span_001460" smilref="Programming_Robots_with_ROS00006.smil#span_001460">1</span><span class="text" id="span_001461" smilref="Programming_Robots_with_ROS00006.smil#span_001461">)</span> <a class="co" id="ch07-co_wander_bot_CO1-1" href="#ch07-callout_wander_bot_CO1-1" external="false"><img src="images/1.jpg" alt="1" id="img_000036" /></a>
<span class="text" id="span_001462" smilref="Programming_Robots_with_ROS00006.smil#span_001462">rospy</span><span class="text" id="span_001463" smilref="Programming_Robots_with_ROS00006.smil#span_001463">.</span><span class="text" id="span_001464" smilref="Programming_Robots_with_ROS00006.smil#span_001464">init_node</span><span class="text" id="span_001465" smilref="Programming_Robots_with_ROS00006.smil#span_001465">(</span><span class="text" id="span_001466" smilref="Programming_Robots_with_ROS00006.smil#span_001466">'</span><span class="text" id="span_001467" smilref="Programming_Robots_with_ROS00006.smil#span_001467">red_light_green_light</span><span class="text" id="span_001468" smilref="Programming_Robots_with_ROS00006.smil#span_001468">'</span><span class="text" id="span_001469" smilref="Programming_Robots_with_ROS00006.smil#span_001469">)</span>

<span class="text" id="span_001470" smilref="Programming_Robots_with_ROS00006.smil#span_001470">red_light_twist</span> <span class="text" id="span_001471" smilref="Programming_Robots_with_ROS00006.smil#span_001471">=</span> <span class="text" id="span_001472" smilref="Programming_Robots_with_ROS00006.smil#span_001472">Twist</span><span class="text" id="span_001473" smilref="Programming_Robots_with_ROS00006.smil#span_001473">(</span><span class="text" id="span_001474" smilref="Programming_Robots_with_ROS00006.smil#span_001474">)</span> <a class="co" id="ch07-co_wander_bot_CO1-2" href="#ch07-callout_wander_bot_CO1-2" external="false"><img src="images/2.jpg" alt="2" id="img_000037" /></a>
<span class="text" id="span_001475" smilref="Programming_Robots_with_ROS00006.smil#span_001475">green_light_twist</span> <span class="text" id="span_001476" smilref="Programming_Robots_with_ROS00006.smil#span_001476">=</span> <span class="text" id="span_001477" smilref="Programming_Robots_with_ROS00006.smil#span_001477">Twist</span><span class="text" id="span_001478" smilref="Programming_Robots_with_ROS00006.smil#span_001478">(</span><span class="text" id="span_001479" smilref="Programming_Robots_with_ROS00006.smil#span_001479">)</span>
<span class="text" id="span_001480" smilref="Programming_Robots_with_ROS00006.smil#span_001480">green_light_twist</span><span class="text" id="span_001481" smilref="Programming_Robots_with_ROS00006.smil#span_001481">.</span><span class="text" id="span_001482" smilref="Programming_Robots_with_ROS00006.smil#span_001482">linear</span><span class="text" id="span_001483" smilref="Programming_Robots_with_ROS00006.smil#span_001483">.</span><span class="text" id="span_001484" smilref="Programming_Robots_with_ROS00006.smil#span_001484">x</span> <span class="text" id="span_001485" smilref="Programming_Robots_with_ROS00006.smil#span_001485">=</span> <span class="text" id="span_001486" smilref="Programming_Robots_with_ROS00006.smil#span_001486">0.5</span> <a class="co" id="ch07-co_wander_bot_CO1-3" href="#ch07-callout_wander_bot_CO1-3" external="false"><img src="images/3.jpg" alt="3" id="img_000038" /></a>

<span class="text" id="span_001487" smilref="Programming_Robots_with_ROS00006.smil#span_001487">driving_forward</span> <span class="text" id="span_001488" smilref="Programming_Robots_with_ROS00006.smil#span_001488">=</span> <span class="text" id="span_001489" smilref="Programming_Robots_with_ROS00006.smil#span_001489">False</span>
<span class="text" id="span_001490" smilref="Programming_Robots_with_ROS00006.smil#span_001490">light_change_time</span> <span class="text" id="span_001491" smilref="Programming_Robots_with_ROS00006.smil#span_001491">=</span> <span class="text" id="span_001492" smilref="Programming_Robots_with_ROS00006.smil#span_001492">rospy</span><span class="text" id="span_001493" smilref="Programming_Robots_with_ROS00006.smil#span_001493">.</span><span class="text" id="span_001494" smilref="Programming_Robots_with_ROS00006.smil#span_001494">Time</span><span class="text" id="span_001495" smilref="Programming_Robots_with_ROS00006.smil#span_001495">.</span><span class="text" id="span_001496" smilref="Programming_Robots_with_ROS00006.smil#span_001496">now</span><span class="text" id="span_001497" smilref="Programming_Robots_with_ROS00006.smil#span_001497">(</span><span class="text" id="span_001498" smilref="Programming_Robots_with_ROS00006.smil#span_001498">)</span>
<span class="text" id="span_001499" smilref="Programming_Robots_with_ROS00006.smil#span_001499">rate</span> <span class="text" id="span_001500" smilref="Programming_Robots_with_ROS00006.smil#span_001500">=</span> <span class="text" id="span_001501" smilref="Programming_Robots_with_ROS00006.smil#span_001501">rospy</span><span class="text" id="span_001502" smilref="Programming_Robots_with_ROS00006.smil#span_001502">.</span><span class="text" id="span_001503" smilref="Programming_Robots_with_ROS00006.smil#span_001503">Rate</span><span class="text" id="span_001504" smilref="Programming_Robots_with_ROS00006.smil#span_001504">(</span><span class="text" id="span_001505" smilref="Programming_Robots_with_ROS00006.smil#span_001505">10</span><span class="text" id="span_001506" smilref="Programming_Robots_with_ROS00006.smil#span_001506">)</span>

<span class="text" id="span_001507" smilref="Programming_Robots_with_ROS00006.smil#span_001507">while</span> <span class="text" id="span_001508" smilref="Programming_Robots_with_ROS00006.smil#span_001508">not</span> <span class="text" id="span_001509" smilref="Programming_Robots_with_ROS00006.smil#span_001509">rospy</span><span class="text" id="span_001510" smilref="Programming_Robots_with_ROS00006.smil#span_001510">.</span><span class="text" id="span_001511" smilref="Programming_Robots_with_ROS00006.smil#span_001511">is_shutdown</span><span class="text" id="span_001512" smilref="Programming_Robots_with_ROS00006.smil#span_001512">(</span><span class="text" id="span_001513" smilref="Programming_Robots_with_ROS00006.smil#span_001513">)</span><span class="text" id="span_001514" smilref="Programming_Robots_with_ROS00006.smil#span_001514">:</span>
  <span class="text" id="span_001515" smilref="Programming_Robots_with_ROS00006.smil#span_001515">if</span> <span class="text" id="span_001516" smilref="Programming_Robots_with_ROS00006.smil#span_001516">driving_forward</span><span class="text" id="span_001517" smilref="Programming_Robots_with_ROS00006.smil#span_001517">:</span>
    <span class="text" id="span_001518" smilref="Programming_Robots_with_ROS00006.smil#span_001518">cmd_vel_pub</span><span class="text" id="span_001519" smilref="Programming_Robots_with_ROS00006.smil#span_001519">.</span><span class="text" id="span_001520" smilref="Programming_Robots_with_ROS00006.smil#span_001520">publish</span><span class="text" id="span_001521" smilref="Programming_Robots_with_ROS00006.smil#span_001521">(</span><span class="text" id="span_001522" smilref="Programming_Robots_with_ROS00006.smil#span_001522">green_light_twist</span><span class="text" id="span_001523" smilref="Programming_Robots_with_ROS00006.smil#span_001523">)</span> <a class="co" id="ch07-co_wander_bot_CO1-4" href="#ch07-callout_wander_bot_CO1-4" external="false"><img src="images/4.jpg" alt="4" id="img_000039" /></a>
  <span class="text" id="span_001524" smilref="Programming_Robots_with_ROS00006.smil#span_001524">else</span><span class="text" id="span_001525" smilref="Programming_Robots_with_ROS00006.smil#span_001525">:</span>
    <span class="text" id="span_001526" smilref="Programming_Robots_with_ROS00006.smil#span_001526">cmd_vel_pub</span><span class="text" id="span_001527" smilref="Programming_Robots_with_ROS00006.smil#span_001527">.</span><span class="text" id="span_001528" smilref="Programming_Robots_with_ROS00006.smil#span_001528">publish</span><span class="text" id="span_001529" smilref="Programming_Robots_with_ROS00006.smil#span_001529">(</span><span class="text" id="span_001530" smilref="Programming_Robots_with_ROS00006.smil#span_001530">red_light_twist</span><span class="text" id="span_001531" smilref="Programming_Robots_with_ROS00006.smil#span_001531">)</span>
  <span class="text" id="span_001532" smilref="Programming_Robots_with_ROS00006.smil#span_001532">if</span> <span class="text" id="span_001533" smilref="Programming_Robots_with_ROS00006.smil#span_001533">light_change_time</span> <span class="text" id="span_001534" smilref="Programming_Robots_with_ROS00006.smil#span_001534">&gt;</span> <span class="text" id="span_001535" smilref="Programming_Robots_with_ROS00006.smil#span_001535">rospy</span><span class="text" id="span_001536" smilref="Programming_Robots_with_ROS00006.smil#span_001536">.</span><span class="text" id="span_001537" smilref="Programming_Robots_with_ROS00006.smil#span_001537">Time</span><span class="text" id="span_001538" smilref="Programming_Robots_with_ROS00006.smil#span_001538">.</span><span class="text" id="span_001539" smilref="Programming_Robots_with_ROS00006.smil#span_001539">now</span><span class="text" id="span_001540" smilref="Programming_Robots_with_ROS00006.smil#span_001540">(</span><span class="text" id="span_001541" smilref="Programming_Robots_with_ROS00006.smil#span_001541">)</span><span class="text" id="span_001542" smilref="Programming_Robots_with_ROS00006.smil#span_001542">:</span> <a class="co" id="ch07-co_wander_bot_CO1-5" href="#ch07-callout_wander_bot_CO1-5" external="false"><img src="images/5.jpg" alt="5" id="img_000040" /></a>
    <span class="text" id="span_001543" smilref="Programming_Robots_with_ROS00006.smil#span_001543">driving_forward</span> <span class="text" id="span_001544" smilref="Programming_Robots_with_ROS00006.smil#span_001544">=</span> <span class="text" id="span_001545" smilref="Programming_Robots_with_ROS00006.smil#span_001545">not</span> <span class="text" id="span_001546" smilref="Programming_Robots_with_ROS00006.smil#span_001546">driving_forward</span>
    <span class="text" id="span_001547" smilref="Programming_Robots_with_ROS00006.smil#span_001547">light_change_time</span> <span class="text" id="span_001548" smilref="Programming_Robots_with_ROS00006.smil#span_001548">=</span> <span class="text" id="span_001549" smilref="Programming_Robots_with_ROS00006.smil#span_001549">rospy</span><span class="text" id="span_001550" smilref="Programming_Robots_with_ROS00006.smil#span_001550">.</span><span class="text" id="span_001551" smilref="Programming_Robots_with_ROS00006.smil#span_001551">Time</span><span class="text" id="span_001552" smilref="Programming_Robots_with_ROS00006.smil#span_001552">.</span><span class="text" id="span_001553" smilref="Programming_Robots_with_ROS00006.smil#span_001553">now</span><span class="text" id="span_001554" smilref="Programming_Robots_with_ROS00006.smil#span_001554">(</span><span class="text" id="span_001555" smilref="Programming_Robots_with_ROS00006.smil#span_001555">)</span> <span class="text" id="span_001556" smilref="Programming_Robots_with_ROS00006.smil#span_001556">+</span> <span class="text" id="span_001557" smilref="Programming_Robots_with_ROS00006.smil#span_001557">rospy</span><span class="text" id="span_001558" smilref="Programming_Robots_with_ROS00006.smil#span_001558">.</span><span class="text" id="span_001559" smilref="Programming_Robots_with_ROS00006.smil#span_001559">Duration</span><span class="text" id="span_001560" smilref="Programming_Robots_with_ROS00006.smil#span_001560">(</span><span class="text" id="span_001561" smilref="Programming_Robots_with_ROS00006.smil#span_001561">3</span><span class="text" id="span_001562" smilref="Programming_Robots_with_ROS00006.smil#span_001562">)</span>
  <span class="text" id="span_001563" smilref="Programming_Robots_with_ROS00006.smil#span_001563">rate</span><span class="text" id="span_001564" smilref="Programming_Robots_with_ROS00006.smil#span_001564">.</span><span class="text" id="span_001565" smilref="Programming_Robots_with_ROS00006.smil#span_001565">sleep</span><span class="text" id="span_001566" smilref="Programming_Robots_with_ROS00006.smil#span_001566">(</span><span class="text" id="span_001567" smilref="Programming_Robots_with_ROS00006.smil#span_001567">)</span> <a class="co" id="ch07-co_wander_bot_CO1-6" href="#ch07-callout_wander_bot_CO1-6" external="false"><img src="images/6.jpg" alt="6" id="img_000041" /></a></code>
                  </p>
                  <dl class="calloutlist" id="dl_000004">
                    <dt id="dt_000019">
                      <a class="co" id="ch07-callout_wander_bot_CO1-1" href="#ch07-co_wander_bot_CO1-1" external="false">
                        <img src="images/1.jpg" alt="1" id="img_000042" />
                      </a>
                    </dt>
                    <dd id="dd_000019">
                      <p id="p_000502">
                        <span class="text" id="span_001568" smilref="Programming_Robots_with_ROS00006.smil#span_001568">The</span>
                        <code xml:space="preserve" id="code_000647" smilref="Programming_Robots_with_ROS00006.smil#code_000647">queue_size=1</code>
                        <span class="text" id="span_001569" smilref="Programming_Robots_with_ROS00006.smil#span_001569">argument tells</span>
                        <code xml:space="preserve" id="code_000648" smilref="Programming_Robots_with_ROS00006.smil#code_000648">rospy</code>
                        <span class="text" id="span_001570" smilref="Programming_Robots_with_ROS00006.smil#span_001570">to only buffer a single outbound message. In case the node sending the messages is transmitting at a higher rate than the receiving node(s) can receive them,</span>
                        <code xml:space="preserve" id="code_000649" smilref="Programming_Robots_with_ROS00006.smil#code_000649">rospy</code>
                        <span class="text" id="span_001571" smilref="Programming_Robots_with_ROS00006.smil#span_001571">will simply drop any messages beyond the</span>
                        <code xml:space="preserve" id="code_000650" smilref="Programming_Robots_with_ROS00006.smil#code_000650">queue_size</code>
                        <span class="text" id="span_001572" smilref="Programming_Robots_with_ROS00006.smil#span_001572">.</span>
                      </p>
                    </dd>
                    <dt id="dt_000020">
                      <a class="co" id="ch07-callout_wander_bot_CO1-2" href="#ch07-co_wander_bot_CO1-2" external="false">
                        <img src="images/2.jpg" alt="2" id="img_000043" />
                      </a>
                    </dt>
                    <dd id="dd_000020">
                      <p id="p_000503">
                        <span class="text" id="span_001573" smilref="Programming_Robots_with_ROS00006.smil#span_001573">The message constructors set all fields to zero. Therefore, the</span>
                        <code xml:space="preserve" id="code_000651" smilref="Programming_Robots_with_ROS00006.smil#code_000651">red_light_twist</code>
                        <span class="text" id="span_001574" smilref="Programming_Robots_with_ROS00006.smil#span_001574">message tells a robot to stop, since all of its velocity subcomponents are zero.</span>
                      </p>
                    </dd>
                    <dt id="dt_000021">
                      <a class="co" id="ch07-callout_wander_bot_CO1-3" href="#ch07-co_wander_bot_CO1-3" external="false">
                        <img src="images/3.jpg" alt="3" id="img_000044" />
                      </a>
                    </dt>
                    <dd id="dd_000021">
                      <p id="p_000504">
                        <span class="text" id="span_001575" smilref="Programming_Robots_with_ROS00006.smil#span_001575">The</span>
                        <code xml:space="preserve" id="code_000652" smilref="Programming_Robots_with_ROS00006.smil#code_000652">x</code>
                        <span class="text" id="span_001576" smilref="Programming_Robots_with_ROS00006.smil#span_001576">component of the linear velocity in a</span>
                        <code xml:space="preserve" id="code_000653" smilref="Programming_Robots_with_ROS00006.smil#code_000653">Twist</code>
                        <span class="text" id="span_001577" smilref="Programming_Robots_with_ROS00006.smil#span_001577">message is, by convention, aligned in the direction the robot is facing, so this line means "drive straight ahead at 0.5 meters per second."</span>
                      </p>
                    </dd>
                    <dt id="dt_000022">
                      <a class="co" id="ch07-callout_wander_bot_CO1-4" href="#ch07-co_wander_bot_CO1-4" external="false">
                        <img src="images/4.jpg" alt="4" id="img_000045" />
                      </a>
                    </dt>
                    <dd id="dd_000022">
                      <p id="p_000505" smilref="Programming_Robots_with_ROS00006.smil#p_000505">We need to continually publish a stream of velocity command messages, since most mobile base drivers will time out and stop the robot if they don't receive at least several messages per second.</p>
                    </dd>
                    <dt id="dt_000023">
                      <a class="co" id="ch07-callout_wander_bot_CO1-5" href="#ch07-co_wander_bot_CO1-5" external="false">
                        <img src="images/5.jpg" alt="5" id="img_000046" />
                      </a>
                    </dt>
                    <dd id="dd_000023">
                      <p id="p_000506" smilref="Programming_Robots_with_ROS00006.smil#p_000506">This branch checks the system time and toggles the red/green light periodically.</p>
                    </dd>
                    <dt id="dt_000024">
                      <a class="co" id="ch07-callout_wander_bot_CO1-6" href="#ch07-co_wander_bot_CO1-6" external="false">
                        <img src="images/6.jpg" alt="6" id="img_000047" />
                      </a>
                    </dt>
                    <dd id="dd_000024">
                      <p id="p_000507">
                        <span class="text" id="span_001578" smilref="Programming_Robots_with_ROS00006.smil#span_001578">Without this call to</span>
                        <code xml:space="preserve" id="code_000654" smilref="Programming_Robots_with_ROS00006.smil#code_000654">rospy.sleep()</code>
                        <span class="text" id="span_001579" smilref="Programming_Robots_with_ROS00006.smil#span_001579">the code would still run, but it would send far too many messages, and take up an entire CPU core!</span>
                      </p>
                    </dd>
                  </dl>
                </div>
                <p id="p_000508">
                  <span class="text" id="span_001580" smilref="Programming_Robots_with_ROS00006.smil#span_001580">A lot of</span>
                  <a data-type="xref" href="#ch07-red_light_green_light" external="false" id="a_000090" smilref="Programming_Robots_with_ROS00006.smil#a_000090">Example 7-1</a>
                  <span class="text" id="span_001581" smilref="Programming_Robots_with_ROS00006.smil#span_001581">is just setting up the system and its data structures. The most important function of this program is to change behavior every 3 seconds from driving to stopping. This is performed by the three-line block reproduced here, which uses</span>
                  <code xml:space="preserve" id="code_000655" smilref="Programming_Robots_with_ROS00006.smil#code_000655">rospy.Time</code>
                  <span class="text" id="span_001582" smilref="Programming_Robots_with_ROS00006.smil#span_001582">to measure the duration since the last change of behavior:</span>
                </p>
                <p id="p_000509">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000656" smilref="Programming_Robots_with_ROS00006.smil#code_000656">  if light_change_time &gt; rospy.Time.now():
    driving_forward = not driving_forward
    light_change_time = rospy.Time.now() + rospy.Duration(3)</code>
                </p>
                <p id="p_000510" smilref="Programming_Robots_with_ROS00006.smil#p_000510">Like all Python scripts, it is convenient to make it an executable so that we can invoke the script directly on the command line:</p>
                <p id="p_000511">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000657"><span class="text" id="span_001583" smilref="Programming_Robots_with_ROS00006.smil#span_001583">
user@hostname$ </span><strong id="strong_000073" smilref="Programming_Robots_with_ROS00006.smil#strong_000073">chmod +x red_light_green_light.py</strong>
</code>
                </p>
                <p id="p_000512" smilref="Programming_Robots_with_ROS00006.smil#p_000512">Now, we can use our program to control a simulated robot. But first, we need to make sure that the Turtlebot simulation stack is installed:</p>
                <p id="p_000513">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000658"><span class="text" id="span_001584" smilref="Programming_Robots_with_ROS00006.smil#span_001584">
user@hostname$ </span><strong id="strong_000074" smilref="Programming_Robots_with_ROS00006.smil#strong_000074">sudo apt-get install ros-indigo-turtlebot-gazebo</strong>
</code>
                </p>
                <p id="p_000514" smilref="Programming_Robots_with_ROS00006.smil#p_000514">We are now ready to instantiate a Turtlebot in the simulator. We'll use a simple world to start, by typing this in a new terminal window (remember to hit the Tab key often when typing ROS shell commands for autocompletion):</p>
                <p id="p_000515">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000659"><span class="text" id="span_001585" smilref="Programming_Robots_with_ROS00006.smil#span_001585">
user@hostname$ </span><strong id="strong_000075" smilref="Programming_Robots_with_ROS00006.smil#strong_000075">roslaunch turtlebot_gazebo turtlebot_world.launch</strong>
</code>
                </p>
                <p id="p_000516">
                  <a data-type="xref" href="#ch07-turtlebot_initial_gazebo" external="false" id="a_000091" smilref="Programming_Robots_with_ROS00006.smil#a_000091">Figure 7-1</a>
                  <span class="text" id="span_001586" smilref="Programming_Robots_with_ROS00006.smil#span_001586">shows the initial TurtleBot world, in which a few obstacles are strewn about.</span>
                </p>
                <figure id="figure_000018">
                  <h1 id="h1_000137" smilref="Programming_Robots_with_ROS00006.smil#h1_000137">Figure 7-1. The initial Turtlebot world in Gazebo</h1>
                  <div id="ch07-turtlebot_initial_gazebo" class="figure">
                    <img src="images/prwr_0701.jpg" alt="Gazebo" id="img_000048" />
                  </div>
                </figure>
                <p id="p_000517" smilref="Programming_Robots_with_ROS00006.smil#p_000517">Now, in a different terminal window, let's fire up our control node:</p>
                <p id="p_000518">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000660"><span class="text" id="span_001587" smilref="Programming_Robots_with_ROS00006.smil#span_001587">
user@hostname$ </span><strong id="strong_000076" smilref="Programming_Robots_with_ROS00006.smil#strong_000076">./red_light_green_light.py cmd_vel:=cmd_vel_mux/input/teleop</strong>
</code>
                </p>
                <p id="p_000519">
                  <span class="text" id="span_001588" smilref="Programming_Robots_with_ROS00006.smil#span_001588">The</span>
                  <code xml:space="preserve" id="code_000661" smilref="Programming_Robots_with_ROS00006.smil#code_000661">cmd_vel</code>
                  <span class="text" id="span_001589" smilref="Programming_Robots_with_ROS00006.smil#span_001589">remapping is necessary so that we are publishing our</span>
                  <code xml:space="preserve" id="code_000662" smilref="Programming_Robots_with_ROS00006.smil#code_000662">Twist</code>
                  <span class="text" id="span_001590" smilref="Programming_Robots_with_ROS00006.smil#span_001590">messages to the topic that the Turtlebot software stack is expecting. Although we could have declared our</span>
                  <code xml:space="preserve" id="code_000663" smilref="Programming_Robots_with_ROS00006.smil#code_000663">cmd_vel_pub</code>
                  <span class="text" id="span_001591" smilref="Programming_Robots_with_ROS00006.smil#span_001591">to publish to this topic in the</span>
                  <em id="em_000247" smilref="Programming_Robots_with_ROS00006.smil#em_000247">red_light_green_light.py</em>
                  <span class="text" id="span_001592" smilref="Programming_Robots_with_ROS00006.smil#span_001592">source code, our usual goal is to write ROS nodes that are as generic as possible, and in this case, we can easily remap</span>
                  <code xml:space="preserve" id="code_000664" smilref="Programming_Robots_with_ROS00006.smil#code_000664">cmd_vel</code>
                  <span class="text" id="span_001593" smilref="Programming_Robots_with_ROS00006.smil#span_001593">to whatever is required by any robot's software stack.</span>
                </p>
                <p id="ch07-idp22249776" data-type="indexterm" data-startref="ix_7-wanderbot-asciidoc2">
                  <span class="text" id="span_001594" smilref="Programming_Robots_with_ROS00006.smil#span_001594">When</span>
                  <code xml:space="preserve" id="code_000665" smilref="Programming_Robots_with_ROS00006.smil#code_000665">red_light_green_light.py</code>
                  <span class="text" id="span_001595" smilref="Programming_Robots_with_ROS00006.smil#span_001595">is running, you should now see a Turtlebot alternating every second between driving forward and stopping. Progress! When you are bored with it, just give a Ctrl-C to the newly created node as well as the TurtleBot simulation.</span>
                </p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Reading Sensor Data" id="section_000086">
              <h1 id="h1_000138" smilref="Programming_Robots_with_ROS00006.smil#h1_000138">Reading Sensor Data</h1>
              <div class="sect1" id="ch07-idp21928368">
                <p id="ch07-ix_7-wanderbot-asciidoc3" data-type="indexterm" data-primary="sensor" data-secondary="data for wander-bot" smilref="Programming_Robots_with_ROS00006.smil#ch07-ix_7-wanderbot-asciidoc3">Blindly driving around is fun, but we typically want robots to use sensor data. Fortunately, streaming sensor data into ROS nodes is quite easy. Whenever we want to receive a topic in ROS, it's often helpful to first just echo it to the console, to make sure that it is actually being published under the topic name we expect and to confirm that we understand the data type.</p>
                <p data-type="indexterm" data-primary="cameras" data-secondary="Kinect" id="ch07-idp22257040">
                  <span class="text" id="span_001596" smilref="Programming_Robots_with_ROS00006.smil#span_001596">In the case of Turtlebot, we want to see something like a laser scan: a linear vector of ranges from the robot to the nearest obstacles in various directions. To save on cost, sadly, the Turtlebot does not have a real laser scanner. It does, however, have a Kinect depth camera, and the Turtlebot software stack extracts the middle few rows of the Kinect's depth image, does a bit of filtering, and then publishes the data as</span>
                  <span class="keep-together" id="span_001597">
                    <code id="ch07-idp22258016" xml:space="preserve" smilref="Programming_Robots_with_ROS00006.smil#ch07-idp22258016">sensor_msgs/LaserScan</code>
                  </span>
                  <span class="text" id="span_001598" smilref="Programming_Robots_with_ROS00006.smil#span_001598">messages on the</span>
                  <code id="ch07-idp22258688" xml:space="preserve" smilref="Programming_Robots_with_ROS00006.smil#ch07-idp22258688">scan</code>
                  <span class="text" id="span_001599" smilref="Programming_Robots_with_ROS00006.smil#span_001599">topic. This means that from the standpoint of the high-level software, the data shows up exactly like "real" laser scans on more expensive robots. The only difference is that the field of view is just narrower, and the maximum detectable range is quite a bit shorter than with typical laser scanners. To illustrate this difference in field of view, compare the Gazebo simulation rendering shown in</span>
                  <a data-type="xref" href="#ch07-turtlebot_gazebo_birdseye" external="false" id="a_000092" smilref="Programming_Robots_with_ROS00006.smil#a_000092">Figure 7-2</a>
                  <span class="text" id="span_001600" smilref="Programming_Robots_with_ROS00006.smil#span_001600">to the actual simulated laser-scanner stream shown in</span>
                  <a data-type="xref" href="#ch07-turtlebot_rviz_birdseye" external="false" id="a_000093" smilref="Programming_Robots_with_ROS00006.smil#a_000093">Figure 7-3</a>
                  <span class="text" id="span_001601" smilref="Programming_Robots_with_ROS00006.smil#span_001601">. Although the Turtlebot is able to perceive the obstacle directly in front of it, the obstacle on its right side is mostly out of view. Such are the trade-offs involved with using low-cost depth cameras as navigation sensors!</span>
                </p>
                <p id="p_000520">
                  <span class="text" id="span_001602" smilref="Programming_Robots_with_ROS00006.smil#span_001602">To start using the sensor data, we can just dump the</span>
                  <code xml:space="preserve" id="code_000666" smilref="Programming_Robots_with_ROS00006.smil#code_000666">scan</code>
                  <span class="text" id="span_001603" smilref="Programming_Robots_with_ROS00006.smil#span_001603">topic to the console to verify that the simulated laser scanner is working. First, fire up a Turtlebot simulation, if one isn't already running:</span>
                </p>
                <p id="p_000521">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000667"><span class="text" id="span_001604" smilref="Programming_Robots_with_ROS00007.smil#span_001604">
user@hostname$ </span><strong id="strong_000077" smilref="Programming_Robots_with_ROS00007.smil#strong_000077">roslaunch turtlebot_gazebo turtlebot_world.launch</strong>
</code>
                </p>
                <p id="p_000522">
                  <span class="text" id="span_001605" smilref="Programming_Robots_with_ROS00007.smil#span_001605">Then, in another console, use</span>
                  <code xml:space="preserve" id="code_000668" smilref="Programming_Robots_with_ROS00007.smil#code_000668">rostopic</code>
                  <span class="text" id="span_001606" smilref="Programming_Robots_with_ROS00007.smil#span_001606">to echo the topic:</span>
                </p>
                <p id="p_000523">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000669"><span class="text" id="span_001607" smilref="Programming_Robots_with_ROS00007.smil#span_001607">
user@hostname$ </span><strong id="strong_000078" smilref="Programming_Robots_with_ROS00007.smil#strong_000078">rostopic echo scan</strong>
</code>
                </p>
                <figure id="figure_000019">
                  <h1 id="h1_000139" smilref="Programming_Robots_with_ROS00007.smil#h1_000139">Figure 7-2. A bird's-eye Gazebo view of a Turtlebot in front of two obstacles</h1>
                  <div id="ch07-turtlebot_gazebo_birdseye" class="figure">
                    <img src="images/prwr_0702.jpg" alt="Gazebo" id="img_000049" />
                  </div>
                </figure>
                <p data-type="indexterm" data-primary="ranges array" id="ch07-idp22271168">
                  <span class="text" id="span_001608" smilref="Programming_Robots_with_ROS00007.smil#span_001608">This will print a continuous stream of text representing the</span>
                  <code xml:space="preserve" id="code_000670" smilref="Programming_Robots_with_ROS00007.smil#code_000670">LaserScan</code>
                  <span class="text" id="span_001609" smilref="Programming_Robots_with_ROS00007.smil#span_001609">messages. When you're bored, press Ctrl-C to stop it. Most of the text is the</span>
                  <code xml:space="preserve" id="code_000671" smilref="Programming_Robots_with_ROS00007.smil#code_000671">ranges</code>
                  <span class="text" id="span_001610" smilref="Programming_Robots_with_ROS00007.smil#span_001610">member of the</span>
                  <code xml:space="preserve" id="code_000672" smilref="Programming_Robots_with_ROS00007.smil#code_000672">LaserScan</code>
                  <span class="text" id="span_001611" smilref="Programming_Robots_with_ROS00007.smil#span_001611">message, which is exactly what we are interested in: the</span>
                  <code xml:space="preserve" id="code_000673" smilref="Programming_Robots_with_ROS00007.smil#code_000673">ranges</code>
                  <span class="text" id="span_001612" smilref="Programming_Robots_with_ROS00007.smil#span_001612">array contains the range from the Turtlebot to the nearest object at bearings easily computed from the</span>
                  <code xml:space="preserve" id="code_000674" smilref="Programming_Robots_with_ROS00007.smil#code_000674">ranges</code>
                  <span class="text" id="span_001613" smilref="Programming_Robots_with_ROS00007.smil#span_001613">array index. Specifically, if the message instance is named</span>
                  <code xml:space="preserve" id="code_000675" smilref="Programming_Robots_with_ROS00007.smil#code_000675">msg</code>
                  <span class="text" id="span_001614" smilref="Programming_Robots_with_ROS00007.smil#span_001614">, we can compute the bearing for a particular range estimate as follows, where</span>
                  <code xml:space="preserve" id="code_000676" smilref="Programming_Robots_with_ROS00007.smil#code_000676">i</code>
                  <span class="text" id="span_001615" smilref="Programming_Robots_with_ROS00007.smil#span_001615">is the index into the</span>
                  <code xml:space="preserve" id="code_000677" smilref="Programming_Robots_with_ROS00007.smil#code_000677">ranges</code>
                  <span class="text" id="span_001616" smilref="Programming_Robots_with_ROS00007.smil#span_001616">array:</span>
                </p>
                <p id="p_000524">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000678" smilref="Programming_Robots_with_ROS00007.smil#code_000678">bearing = msg.angle_min + i * msg.angle_max / len(msg.ranges)</code>
                </p>
                <p id="p_000525">
                  <span class="text" id="span_001617" smilref="Programming_Robots_with_ROS00007.smil#span_001617">To retrieve the range to the nearest obstacle directly in front of the robot, we will select the middle element of the</span>
                  <code xml:space="preserve" id="code_000679" smilref="Programming_Robots_with_ROS00007.smil#code_000679">ranges</code>
                  <span class="text" id="span_001618" smilref="Programming_Robots_with_ROS00007.smil#span_001618">array:</span>
                </p>
                <p id="p_000526">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000680" smilref="Programming_Robots_with_ROS00007.smil#code_000680">range_ahead = msg.ranges[len(msg.ranges)/2]</code>
                </p>
                <p id="p_000527" smilref="Programming_Robots_with_ROS00007.smil#p_000527">Or, to return the range of the closest obstacle detected by the scanner:</p>
                <p id="p_000528">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000681" smilref="Programming_Robots_with_ROS00007.smil#code_000681">closest_range = min(msg.ranges)</code>
                </p>
                <figure id="figure_000020">
                  <h1 id="h1_000140" smilref="Programming_Robots_with_ROS00007.smil#h1_000140">Figure 7-3. A bird's-eye view of the same scene as Figure 7-2, rendering the simulated laser scan extracted from the simulated Kinect data of the Turtlebot--the object directly in front of the robot is visible, but the object to its right is mostly out of view</h1>
                  <div id="ch07-turtlebot_rviz_birdseye" class="figure">
                    <img src="images/prwr_0703.jpg" alt="Gazebo" id="img_000050" />
                  </div>
                </figure>
                <p id="ch07-idp22281568" data-type="indexterm" data-primary="Gazebo" data-secondary="and Kinect depth camera">
                  <span class="text" id="span_001619" smilref="Programming_Robots_with_ROS00007.smil#span_001619">This signal chain is deceptively complex: we are picking out elements of an</span>
                  <em id="em_000248" smilref="Programming_Robots_with_ROS00007.smil#em_000248">emulated</em>
                  <span class="text" id="span_001620" smilref="Programming_Robots_with_ROS00007.smil#span_001620">laser scan, which is itself produced by picking out a few of the middle rows of the Turtlebot's Kinect depth camera, which is itself generated in Gazebo by backprojecting rays into a simulated environment! It's hard to overemphasize the utility of simulation for robot software development.</span>
                </p>
                <p id="p_000529">
                  <a data-type="xref" href="#ch07-range_ahead" external="false" id="a_000094" smilref="Programming_Robots_with_ROS00007.smil#a_000094">Example 7-2</a>
                  <span class="text" id="span_001621" smilref="Programming_Robots_with_ROS00007.smil#span_001621">is a complete ROS node that prints the distance to an obstacle directly in front of the robot.</span>
                </p>
                <h1 id="h1_000141" smilref="Programming_Robots_with_ROS00007.smil#h1_000141">Example 7-2. range_ahead.py</h1>
                <div id="ch07-range_ahead" data-type="example">
                  <p id="p_000530">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_000682" smilref="Programming_Robots_with_ROS00007.smil#code_000682">#!/usr/bin/env python
import rospy
from sensor_msgs.msg import LaserScan

def scan_callback(msg):
  range_ahead = msg.ranges[len(msg.ranges)/2]
  print "range ahead: %0.1f" % range_ahead

rospy.init_node('range_ahead')
scan_sub = rospy.Subscriber('scan', LaserScan, scan_callback)
rospy.spin()</code>
                  </p>
                </div>
                <p id="p_000531">
                  <span class="text" id="span_001622" smilref="Programming_Robots_with_ROS00007.smil#span_001622">This little program shows how easy it is to connect to data streams in ROS and process them in Python. The</span>
                  <code xml:space="preserve" id="code_000683" smilref="Programming_Robots_with_ROS00007.smil#code_000683">scan_callback()</code>
                  <span class="text" id="span_001623" smilref="Programming_Robots_with_ROS00007.smil#span_001623">function is called each time a new message arrives on the</span>
                  <code xml:space="preserve" id="code_000684" smilref="Programming_Robots_with_ROS00007.smil#code_000684">scan</code>
                  <span class="text" id="span_001624" smilref="Programming_Robots_with_ROS00007.smil#span_001624">topic. This callback function then prints the range measured to the object directly in front of the robot by picking the middle element of the</span>
                  <code xml:space="preserve" id="code_000685" smilref="Programming_Robots_with_ROS00007.smil#code_000685">ranges</code>
                  <span class="text" id="span_001625" smilref="Programming_Robots_with_ROS00007.smil#span_001625">field of the</span>
                  <code xml:space="preserve" id="code_000686" smilref="Programming_Robots_with_ROS00007.smil#code_000686">LaserScan</code>
                  <span class="text" id="span_001626" smilref="Programming_Robots_with_ROS00007.smil#span_001626">message:</span>
                </p>
                <p id="p_000532">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000687" smilref="Programming_Robots_with_ROS00007.smil#code_000687">def scan_callback(msg):
  range_ahead = msg.ranges[len(msg.ranges)/2]
  print "range ahead: %0.1f" % range_ahead</code>
                </p>
                <p id="p_000533">
                  <span class="text" id="span_001627" smilref="Programming_Robots_with_ROS00007.smil#span_001627">We can experiment with this program in Gazebo by dragging and rotating the Turtlebot around in the world. Click the Move icon in the Gazebo toolbar to enter Move mode, and then click and drag the Turtlebot around the scene. The terminal running</span>
                  <code xml:space="preserve" id="code_000688" smilref="Programming_Robots_with_ROS00007.smil#code_000688">range_ahead.py</code>
                  <span class="text" id="span_001628" smilref="Programming_Robots_with_ROS00007.smil#span_001628">will print a continually changing stream of numbers indicating the range (in meters) from the Turtlebot to the nearest obstacle (if any) directly in front of it.</span>
                </p>
                <p data-type="indexterm" data-primary="Gazebo" data-secondary="Rotate tool" id="ch07-idp22387728" data-startref="ix_7-wanderbot-asciidoc3">
                  <span class="text" id="span_001629" smilref="Programming_Robots_with_ROS00007.smil#span_001629">Gazebo also has a Rotate tool that will (by default) rotate a model about its vertical axis. Both the Move and Rotate tools will immediately affect the output of the</span>
                  <em id="em_000249" smilref="Programming_Robots_with_ROS00007.smil#em_000249">range_ahead.py</em>
                  <span class="text" id="span_001630" smilref="Programming_Robots_with_ROS00007.smil#span_001630">program, since the simulation (by default) stays running while models are being dragged and rotated.</span>
                </p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Sensing and Actuation: Wander-bot!" id="section_000087">
              <h1 id="h1_000142" smilref="Programming_Robots_with_ROS00007.smil#h1_000142">Sensing and Actuation: Wander-bot!</h1>
              <div class="sect1" id="ch07-idp22251328">
                <p data-type="indexterm" data-primary="actuation" data-secondary="wander-bot" id="ch07-idp22520096">
                  <span class="text" id="span_001631" smilref="Programming_Robots_with_ROS00007.smil#span_001631">We have now written</span>
                  <em id="em_000250" smilref="Programming_Robots_with_ROS00007.smil#em_000250">red_light_green_light.py</em>
                  <span class="text" id="span_001632" smilref="Programming_Robots_with_ROS00007.smil#span_001632">, which causes Turtlebot to drive</span>
                  <em id="ch07-idp22521232" smilref="Programming_Robots_with_ROS00007.smil#ch07-idp22521232">open-loop</em>
                  <span class="text" id="span_001633" smilref="Programming_Robots_with_ROS00007.smil#span_001633">, and</span>
                  <em id="ch07-idp22522176" smilref="Programming_Robots_with_ROS00007.smil#ch07-idp22522176">range_ahead.py</em>
                  <span class="text" id="span_001634" smilref="Programming_Robots_with_ROS00007.smil#span_001634">, which uses the Turtlebot's sensors to estimate the range to the nearest object directly in front of the Turtlebot. We can put these two capabilities together and write</span>
                  <em id="em_000251" smilref="Programming_Robots_with_ROS00007.smil#em_000251">wander.py</em>
                  <span class="text" id="span_001635" smilref="Programming_Robots_with_ROS00007.smil#span_001635">, shown in</span>
                  <a data-type="xref" href="#ch07-wander" external="false" id="a_000095" smilref="Programming_Robots_with_ROS00007.smil#a_000095">Example 7-3</a>
                  <span class="text" id="span_001636" smilref="Programming_Robots_with_ROS00007.smil#span_001636">, which will cause the Turtlebot to drive straight ahead until it sees an obstacle within 0.8 meters or times out after 30 seconds. Then, the Turtlebot will stop and spin to a new heading. It will continue doing those two things until the end of time or Ctrl-C, whichever comes first.</span>
                </p>
                <h1 id="h1_000143" smilref="Programming_Robots_with_ROS00007.smil#h1_000143">Example 7-3. wander.py</h1>
                <div id="ch07-wander" data-type="example">
                  <p id="p_000534">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_000689" smilref="Programming_Robots_with_ROS00007.smil#code_000689">#!/usr/bin/env python
import rospy
from geometry_msgs.msg import Twist
from sensor_msgs.msg import LaserScan

def scan_callback(msg):
  global g_range_ahead
  g_range_ahead = min(msg.ranges)

g_range_ahead = 1 # anything to start
scan_sub = rospy.Subscriber('scan', LaserScan, scan_callback)
cmd_vel_pub = rospy.Publisher('cmd_vel', Twist, queue_size=1)
rospy.init_node('wander')
state_change_time = rospy.Time.now()
driving_forward = True
rate = rospy.Rate(10)

while not rospy.is_shutdown():
  if driving_forward:
    if (g_range_ahead &lt; 0.8 or rospy.Time.now() &gt; state_change_time):
      driving_forward = False
      state_change_time = rospy.Time.now() + rospy.Duration(5)
  else: # we're not driving_forward
    if rospy.Time.now() &gt; state_change_time:
      driving_forward = True # we're done spinning, time to go forward!
      state_change_time = rospy.Time.now() + rospy.Duration(30)
  twist = Twist()
  if driving_forward:
    twist.linear.x = 1
  else:
    twist.angular.z = 1
  cmd_vel_pub.publish(twist)

  rate.sleep()</code>
                  </p>
                </div>
                <p id="p_000535">
                  <span class="text" id="span_001637" smilref="Programming_Robots_with_ROS00007.smil#span_001637">As will always be the case with ROS Python programs, we start by importing</span>
                  <code xml:space="preserve" id="code_000690" smilref="Programming_Robots_with_ROS00007.smil#code_000690">rospy</code>
                  <span class="text" id="span_001638" smilref="Programming_Robots_with_ROS00007.smil#span_001638">and the ROS message types we'll need: the</span>
                  <code xml:space="preserve" id="code_000691" smilref="Programming_Robots_with_ROS00007.smil#code_000691">Twist</code>
                  <span class="text" id="span_001639" smilref="Programming_Robots_with_ROS00007.smil#span_001639">and</span>
                  <code xml:space="preserve" id="code_000692" smilref="Programming_Robots_with_ROS00007.smil#code_000692">LaserScan</code>
                  <span class="text" id="span_001640" smilref="Programming_Robots_with_ROS00007.smil#span_001640">messages. Since this program is so simple, we'll just use a global variable called</span>
                  <code xml:space="preserve" id="code_000693" smilref="Programming_Robots_with_ROS00007.smil#code_000693">g_range_ahead</code>
                  <span class="text" id="span_001641" smilref="Programming_Robots_with_ROS00007.smil#span_001641">to store the minimum range that our (simulated) laser scanner detects in front of the robot. This makes the</span>
                  <code xml:space="preserve" id="code_000694" smilref="Programming_Robots_with_ROS00007.smil#code_000694">scan_callback()</code>
                  <span class="text" id="span_001642" smilref="Programming_Robots_with_ROS00007.smil#span_001642">function very simple; it just copies out the range to our global variable. And yes, this is horrible programming practice in complex programs, but for this small example, we'll pretend it's OK.</span>
                </p>
                <p data-type="indexterm" data-primary="rate variable" id="ch07-idp22596128">
                  <span class="text" id="span_001643" smilref="Programming_Robots_with_ROS00007.smil#span_001643">We start the actual program by creating a subscriber to</span>
                  <code xml:space="preserve" id="code_000695" smilref="Programming_Robots_with_ROS00007.smil#code_000695">scan</code>
                  <span class="text" id="span_001644" smilref="Programming_Robots_with_ROS00007.smil#span_001644">and a publisher to</span>
                  <code xml:space="preserve" id="code_000696" smilref="Programming_Robots_with_ROS00007.smil#code_000696">cmd_vel</code>
                  <span class="text" id="span_001645" smilref="Programming_Robots_with_ROS00007.smil#span_001645">, as we did previously. We also set up two variables that we'll use in our controller logic:</span>
                  <code xml:space="preserve" id="code_000697" smilref="Programming_Robots_with_ROS00007.smil#code_000697">state_change_time</code>
                  <span class="text" id="span_001646" smilref="Programming_Robots_with_ROS00007.smil#span_001646">and</span>
                  <code xml:space="preserve" id="code_000698" smilref="Programming_Robots_with_ROS00007.smil#code_000698">driving_forward</code>
                  <span class="text" id="span_001647" smilref="Programming_Robots_with_ROS00007.smil#span_001647">. The</span>
                  <code xml:space="preserve" id="code_000699" smilref="Programming_Robots_with_ROS00007.smil#code_000699">rate</code>
                  <span class="text" id="span_001648" smilref="Programming_Robots_with_ROS00007.smil#span_001648">variable is a helpful construct in</span>
                  <code xml:space="preserve" id="code_000700" smilref="Programming_Robots_with_ROS00007.smil#code_000700">rospy</code>
                  <span class="text" id="span_001649" smilref="Programming_Robots_with_ROS00007.smil#span_001649">: it helps create loops that run at a fixed frequency. In this case, we'd like to run our controller at 10 Hz, so we construct a</span>
                  <code xml:space="preserve" id="code_000701" smilref="Programming_Robots_with_ROS00007.smil#code_000701">rospy.Rate</code>
                  <span class="text" id="span_001650" smilref="Programming_Robots_with_ROS00007.smil#span_001650">object by passing 10 to its constructor. Then, we call</span>
                  <code xml:space="preserve" id="code_000702" smilref="Programming_Robots_with_ROS00007.smil#code_000702">rate.sleep()</code>
                  <span class="text" id="span_001651" smilref="Programming_Robots_with_ROS00007.smil#span_001651">at the end of our main loop; each time through,</span>
                  <code xml:space="preserve" id="code_000703" smilref="Programming_Robots_with_ROS00007.smil#code_000703">rospy</code>
                  <span class="text" id="span_001652" smilref="Programming_Robots_with_ROS00007.smil#span_001652">will adjust the amount of actual sleeping time so that we run at something close to 10 Hz on average. The actual amount of sleeping time will depend on what else is being done in the control loop and the speed of the computer; we can just call</span>
                  <code xml:space="preserve" id="code_000704" smilref="Programming_Robots_with_ROS00007.smil#code_000704">rospy.Rate.sleep()</code>
                  <span class="text" id="span_001653" smilref="Programming_Robots_with_ROS00007.smil#span_001653">and not worry about it.</span>
                </p>
                <p id="p_000536">
                  <span class="text" id="span_001654" smilref="Programming_Robots_with_ROS00007.smil#span_001654">The actual control loop is kept as simple as possible. The robot is in one of two states:</span>
                  <code xml:space="preserve" id="code_000705" smilref="Programming_Robots_with_ROS00007.smil#code_000705">driving_forward</code>
                  <span class="text" id="span_001655" smilref="Programming_Robots_with_ROS00007.smil#span_001655">or</span>
                  <code xml:space="preserve" id="code_000706" smilref="Programming_Robots_with_ROS00007.smil#code_000706">not driving_forward</code>
                  <span class="text" id="span_001656" smilref="Programming_Robots_with_ROS00007.smil#span_001656">. When in the</span>
                  <code xml:space="preserve" id="code_000707" smilref="Programming_Robots_with_ROS00007.smil#code_000707">driving_forward</code>
                  <span class="text" id="span_001657" smilref="Programming_Robots_with_ROS00007.smil#span_001657">state, the robot keeps driving until it either sees an obstacle within 0.8 meters or times out after 30 seconds, after which it transitions to the</span>
                  <code xml:space="preserve" id="code_000708" smilref="Programming_Robots_with_ROS00007.smil#code_000708">not driving_forward</code>
                  <span class="text" id="span_001658" smilref="Programming_Robots_with_ROS00007.smil#span_001658">state:</span>
                </p>
                <p id="p_000537">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000709" smilref="Programming_Robots_with_ROS00007.smil#code_000709">    if (g_range_ahead &lt; 0.8 or rospy.Time.now() &gt; state_change_time):
      driving_forward = False
      state_change_time = rospy.Time.now() + rospy.Duration(5)</code>
                </p>
                <p id="p_000538">
                  <span class="text" id="span_001659" smilref="Programming_Robots_with_ROS00007.smil#span_001659">When the robot is in the</span>
                  <code xml:space="preserve" id="code_000710" smilref="Programming_Robots_with_ROS00007.smil#code_000710">not driving_forward</code>
                  <span class="text" id="span_001660" smilref="Programming_Robots_with_ROS00007.smil#span_001660">state, it simply spins in place for five seconds, then transitions back to the</span>
                  <code xml:space="preserve" id="code_000711" smilref="Programming_Robots_with_ROS00007.smil#code_000711">driving_forward</code>
                  <span class="text" id="span_001661" smilref="Programming_Robots_with_ROS00007.smil#span_001661">state:</span>
                </p>
                <p id="p_000539">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000712" smilref="Programming_Robots_with_ROS00007.smil#code_000712">    if rospy.Time.now() &gt; state_change_time:
      driving_forward = True # we're done spinning, time to go forward!
      state_change_time = rospy.Time.now() + rospy.Duration(30)</code>
                </p>
                <p class="keep-together" id="p_000540" smilref="Programming_Robots_with_ROS00007.smil#p_000540">As before, we can quickly test our program in a Turtlebot simulation. Let's start one up:</p>
                <p id="p_000541">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000713"><span class="text" id="span_001662" smilref="Programming_Robots_with_ROS00007.smil#span_001662">
user@hostname$ </span><strong id="strong_000079" smilref="Programming_Robots_with_ROS00007.smil#strong_000079">roslaunch turtlebot_gazebo turtlebot_world.launch</strong>
</code>
                </p>
                <p id="p_000542">
                  <span class="text" id="span_001663" smilref="Programming_Robots_with_ROS00007.smil#span_001663">Then, in a separate console, we can make</span>
                  <code xml:space="preserve" id="code_000714" smilref="Programming_Robots_with_ROS00007.smil#code_000714">wander.py</code>
                  <span class="text" id="span_001664" smilref="Programming_Robots_with_ROS00007.smil#span_001664">executable and run it:</span>
                </p>
                <p id="p_000543">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000715"><span class="text" id="span_001665" smilref="Programming_Robots_with_ROS00007.smil#span_001665">
user@hostname$ </span><strong id="strong_000080" smilref="Programming_Robots_with_ROS00007.smil#strong_000080">chmod +x red_light_green_light.py</strong><span class="text" id="span_001666" smilref="Programming_Robots_with_ROS00007.smil#span_001666">
user@hostname$ </span><strong id="strong_000081" smilref="Programming_Robots_with_ROS00007.smil#strong_000081">./wander.py cmd_vel:=cmd_vel_mux/input/teleop</strong>
</code>
                </p>
                <p id="p_000544" smilref="Programming_Robots_with_ROS00007.smil#p_000544">The TurtleBot will wander around aimlessly, while avoiding collisions with obstacles it can see. Hooray!</p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Summary" id="section_000088">
              <h1 id="h1_000144" smilref="Programming_Robots_with_ROS00007.smil#h1_000144">Summary</h1>
              <div class="sect1" id="ch07-idp22519152">
                <p id="ch07-idp22631664" data-type="indexterm" data-startref="ix_7-wanderbot-asciidoc0">
                  <span class="text" id="span_001667" smilref="Programming_Robots_with_ROS00007.smil#span_001667">In this chapter, we first created an open-loop control system in</span>
                  <em id="em_000252" smilref="Programming_Robots_with_ROS00007.smil#em_000252">red_light_green_light.py</em>
                  <span class="text" id="span_001668" smilref="Programming_Robots_with_ROS00007.smil#span_001668">that started and stopped the Turtlebot based on a simple timer. Then, we saw how to read the information from the Turtlebot's depth camera. Finally, we closed the loop between sensing and actuation by creating Wander-bot, a program that causes the Turtlebot to avoid obstacles and randomly wander around its environment. This brought together all of the aspects of the book thus far: the streaming data transport mechanisms of ROS, the discussion of robot sensors and actuators, and the simulation framework of Gazebo. In the next chapter, we will start making things more complex by listening to user input, as we create Teleop-bot.</span>
                </p>
              </div>
            </section>
          </div>
        </section>
      </level1>
      <level1 xmlns:epub="http://www.idpf.org/2007/ops" data-type="part" epub:type="part" data-pdf-bookmark="Part II. Moving Around Using ROS" id="part02">
        <h1 id="h1_000145" smilref="Programming_Robots_with_ROS00007.smil#h1_000145">Part II. Moving Around Using ROS</h1>
        <p id="p_000545" />
      </level1>
      <level1 id="ch08">
        <section xmlns:epub="http://www.idpf.org/2007/ops" data-type="chapter" epub:type="chapter" data-pdf-bookmark="Chapter 8. Teleop-bot" id="section_000089">
          <h1 id="h1_000146" smilref="Programming_Robots_with_ROS00007.smil#h1_000146">Chapter 8. Teleop-bot</h1>
          <div class="chapter" id="ch08-teleop_bot">
            <p id="ch08-ix_8-teleop_bot-asciidoc0" data-type="indexterm" data-primary="teleop-bot" smilref="Programming_Robots_with_ROS00007.smil#ch08-ix_8-teleop_bot-asciidoc0">The previous section covered fundamental concepts in ROS, provided a brief overview of subsystems common to many robots, and finished with Wander-bot, a program that drove a Turtlebot around aimlessly. In this section of the book, we will show how to build a series of robots that become more and more sophisticated in their motions, culminating with a state-of-the-art 2D navigation system. We will then conclude this section by showing how to move manipulator arms using common ROS packages.</p>
            <p data-type="indexterm" data-primary="teleoperation" data-seealso="teleop-bot" id="ch08-idp22637664">
              <span class="text" id="span_001669" smilref="Programming_Robots_with_ROS00007.smil#span_001669">This chapter will describe how to drive a robot around via</span>
              <em id="em_000253" smilref="Programming_Robots_with_ROS00007.smil#em_000253">teleoperation</em>
              <span class="text" id="span_001670" smilref="Programming_Robots_with_ROS00007.smil#span_001670">. Although the term "robot" often brings up images of</span>
              <em id="em_000254" smilref="Programming_Robots_with_ROS00007.smil#em_000254">fully autonomous</em>
              <span class="text" id="span_001671" smilref="Programming_Robots_with_ROS00007.smil#span_001671">robots that are able to make their own decisions in all situations, there are many domains in which close human guidance is standard practice due to a variety of factors. Since teleoperated systems are, generally speaking, simpler than autonomous systems, they make a natural starting point. In this chapter, we will construct progressively more complex teleoperation systems.</span>
            </p>
            <p data-type="indexterm" data-primary="Twist message" id="ch08-idp22640384">
              <span class="text" id="span_001672" smilref="Programming_Robots_with_ROS00007.smil#span_001672">As discussed in the previous chapter, we drive a Turtlebot by publishing a stream of</span>
              <code xml:space="preserve" id="code_000716" smilref="Programming_Robots_with_ROS00007.smil#code_000716">Twist</code>
              <span class="text" id="span_001673" smilref="Programming_Robots_with_ROS00007.smil#span_001673">messages. Although the</span>
              <code xml:space="preserve" id="code_000717" smilref="Programming_Robots_with_ROS00007.smil#code_000717">Twist</code>
              <span class="text" id="span_001674" smilref="Programming_Robots_with_ROS00007.smil#span_001674">message has the ability to describe full 3D motion, when operating differential-drive planar robots, we only need to populate two members: the linear (forward/backward) velocity, and the angular velocity about the vertical axis, which can also be called</span>
              <em id="ch08-idp22642160" smilref="Programming_Robots_with_ROS00007.smil#ch08-idp22642160">yaw rate</em>
              <span class="text" id="span_001675" smilref="Programming_Robots_with_ROS00007.smil#span_001675">and is simply the measure of how quickly the robot is spinning. From those two fields, it is then an exercise in trigonometry to compute the required wheel velocities of the robot as a function of the spacing of the wheels and their diameter. This calculation is usually done at low levels in the software stack, either in the robot's device driver or in the firmware of a microcontroller onboard the robot. From the teleoperation software's perspective, we simply command the linear and angular velocities in meters per second and radians per second, respectively.</span>
            </p>
            <p id="p_000546" smilref="Programming_Robots_with_ROS00007.smil#p_000546">Given that we need to produce a stream of velocity commands to move the robot, the next question is, how can we elicit these commands from the robot operator? There are a wide variety of approaches to this problem, and naturally we should start with the simplest approach to program: keyboard input.</p>
            <section data-type="sect1" data-pdf-bookmark="Development Pattern" id="section_000090">
              <h1 id="h1_000147" smilref="Programming_Robots_with_ROS00007.smil#h1_000147">Development Pattern</h1>
              <div class="sect1" id="ch08-idp22644704">
                <p id="ch08-idp22645904" data-type="indexterm" data-primary="teleop-bot" data-secondary="development pattern" smilref="Programming_Robots_with_ROS00007.smil#ch08-idp22645904">Throughout the remainder of the book, we will encourage a development pattern that makes use of the ROS debugging tools wherever possible. Since ROS is a distributed system with topic-based communications, we can quickly create testing environments to help our debugging, so that we are only starting and stopping a single piece of the system every time we need to tweak a bit of code. Structuring our software as a collection of very small message-passing programs makes it easier and more productive to insert ROS debugging tools into these message flows.</p>
                <p id="p_000547">
                  <span class="text" id="span_001676" smilref="Programming_Robots_with_ROS00007.smil#span_001676">In the specific case of producing Teleop-bot velocity commands, we will write two programs: one that listens for keystrokes and then broadcasts them as ROS messages, and one that listens for those keystroke ROS messages and outputs</span>
                  <code xml:space="preserve" id="code_000718" smilref="Programming_Robots_with_ROS00007.smil#code_000718">Twist</code>
                  <span class="text" id="span_001677" smilref="Programming_Robots_with_ROS00007.smil#span_001677">messages in response. This extra layer of indirection helps isolate the two functional pieces of this system, as well as making it easier for us, or anyone else in the open source community, to reuse the individual pieces in a completely different system. Creating a constellation of small ROS nodes often will simplify the creation of manual and (especially) automated software tests. For example, we can feed a canned sequence of keystroke messages to the node that translates between keystrokes and motion commands, comparing the output motion command with the previously defined "correct" response. Then, we can set up automated testing to verify the correct behavior as the software evolves over time.</span>
                </p>
                <p id="p_000548">
                  <span class="text" id="span_001678" smilref="Programming_Robots_with_ROS00007.smil#span_001678">Once we have decided the highest-level breakdown of how a task should be split into ROS nodes, the next task is to write them! As is often the case with software design, sometimes it helps to create a</span>
                  <em id="em_000255" smilref="Programming_Robots_with_ROS00007.smil#em_000255">skeleton</em>
                  <span class="text" id="span_001679" smilref="Programming_Robots_with_ROS00007.smil#span_001679">of the desired system that prints console messages or just publishes dummy messages to other nodes in the system. However, our preferred approach is to build the required collection of new ROS nodes incrementally, with a strong preference for writing</span>
                  <em id="em_000256" smilref="Programming_Robots_with_ROS00007.smil#em_000256">small</em>
                  <span class="text" id="span_001680" smilref="Programming_Robots_with_ROS00007.smil#span_001680">nodes.</span>
                </p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Keyboard Driver" id="section_000091">
              <h1 id="h1_000148" smilref="Programming_Robots_with_ROS00007.smil#h1_000148">Keyboard Driver</h1>
              <div class="sect1" id="ch08-teleop_bot_keyboard_driver">
                <p data-type="indexterm" data-primary="keyboard, as teleop-bot driver" id="ch08-ix_8-teleop_bot-asciidoc1" data-secondary="keyboard driver">
                  <span class="text" id="span_001681" smilref="Programming_Robots_with_ROS00007.smil#span_001681">The first node we need to write for keyboard-Teleop-bot is a keyboard driver that listens for keystrokes and publishes them as</span>
                  <code xml:space="preserve" id="code_000719" smilref="Programming_Robots_with_ROS00007.smil#code_000719">std_msgs/String</code>
                  <span class="text" id="span_001682" smilref="Programming_Robots_with_ROS00007.smil#span_001682">messages on the</span>
                  <code id="ch08-ix_8-teleop_bot-asciidoc2" xml:space="preserve" smilref="Programming_Robots_with_ROS00007.smil#ch08-ix_8-teleop_bot-asciidoc2">keys</code>
                  <span class="text" id="span_001683" smilref="Programming_Robots_with_ROS00007.smil#span_001683">topic. There are many ways to perform this task.</span>
                  <a data-type="xref" href="#ch08-key_publisher" external="false" id="a_000096" smilref="Programming_Robots_with_ROS00007.smil#a_000096">Example 8-1</a>
                  <span class="text" id="span_001684" smilref="Programming_Robots_with_ROS00007.smil#span_001684">uses the Python</span>
                  <span class="keep-together" id="span_001685">
                    <code xml:space="preserve" id="code_000720" smilref="Programming_Robots_with_ROS00007.smil#code_000720">termios</code>
                  </span>
                  <span class="text" id="span_001686" smilref="Programming_Robots_with_ROS00007.smil#span_001686">and</span>
                  <code xml:space="preserve" id="code_000721" smilref="Programming_Robots_with_ROS00007.smil#code_000721">tty</code>
                  <span class="text" id="span_001687" smilref="Programming_Robots_with_ROS00007.smil#span_001687">libraries to place the terminal in raw mode and capture keystrokes, which are then published as</span>
                  <code xml:space="preserve" id="code_000722" smilref="Programming_Robots_with_ROS00007.smil#code_000722">std_msgs/String</code>
                  <span class="text" id="span_001688" smilref="Programming_Robots_with_ROS00007.smil#span_001688">messages.</span>
                </p>
                <h1 id="h1_000149" smilref="Programming_Robots_with_ROS00007.smil#h1_000149">Example 8-1. key_publisher.py</h1>
                <div id="ch08-key_publisher" data-type="example">
                  <p id="p_000549">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_000723" smilref="Programming_Robots_with_ROS00007.smil#code_000723">#!/usr/bin/env python
import sys, select, tty, termios
import rospy
from std_msgs.msg import String

if __name__ == '__main__':
  key_pub = rospy.Publisher('keys', String, queue_size=1)
  rospy.init_node("keyboard_driver")
  rate = rospy.Rate(100)
  old_attr = termios.tcgetattr(sys.stdin)
  tty.setcbreak(sys.stdin.fileno())
  print "Publishing keystrokes. Press Ctrl-C to exit..."
  while not rospy.is_shutdown():
    if select.select([sys.stdin], [], [], 0)[0] == [sys.stdin]:
      key_pub.publish(sys.stdin.read(1))
    rate.sleep()
  termios.tcsetattr(sys.stdin, termios.TCSADRAIN, old_attr)</code>
                  </p>
                </div>
                <p id="p_000550">
                  <span class="text" id="span_001689" smilref="Programming_Robots_with_ROS00007.smil#span_001689">This program uses the</span>
                  <code xml:space="preserve" id="code_000724" smilref="Programming_Robots_with_ROS00007.smil#code_000724">termios</code>
                  <span class="text" id="span_001690" smilref="Programming_Robots_with_ROS00007.smil#span_001690">library to capture raw keystrokes, which requires working around some quirks of how Unix consoles operate. Typically, consoles buffer an entire line of text, only sending it to programs when the user presses Enter. In our case, we want to receive the keys on our program's standard input stream as soon as they are pressed. To alter this behavior of the console, we first need to save the attributes:</span>
                </p>
                <p id="p_000551">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000725" smilref="Programming_Robots_with_ROS00007.smil#code_000725">  old_attr = termios.tcgetattr(sys.stdin)
  tty.setcbreak(sys.stdin.fileno())</code>
                </p>
                <p id="p_000552">
                  <span class="text" id="span_001691" smilref="Programming_Robots_with_ROS00007.smil#span_001691">Now, we can continually poll the</span>
                  <code xml:space="preserve" id="code_000726" smilref="Programming_Robots_with_ROS00007.smil#code_000726">stdin</code>
                  <span class="text" id="span_001692" smilref="Programming_Robots_with_ROS00007.smil#span_001692">stream to see if any characters are ready. Although we could simply block on</span>
                  <code xml:space="preserve" id="code_000727" smilref="Programming_Robots_with_ROS00007.smil#code_000727">stdin</code>
                  <span class="text" id="span_001693" smilref="Programming_Robots_with_ROS00007.smil#span_001693">, that would cause our process to not fire any ROS callbacks, should we add any in the future. Thus, it is good practice to instead call</span>
                  <code xml:space="preserve" id="code_000728" smilref="Programming_Robots_with_ROS00007.smil#code_000728">select()</code>
                  <span class="text" id="span_001694" smilref="Programming_Robots_with_ROS00007.smil#span_001694">with a timeout of zero, which will return immediately. We will then spend the rest of our loop time inside</span>
                  <code xml:space="preserve" id="code_000729" smilref="Programming_Robots_with_ROS00007.smil#code_000729">rate.sleep()</code>
                  <span class="text" id="span_001695" smilref="Programming_Robots_with_ROS00007.smil#span_001695">, as shown in this snippet:</span>
                </p>
                <p id="p_000553">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000730" smilref="Programming_Robots_with_ROS00007.smil#code_000730">    if select.select([sys.stdin], [], [], 0)[0] == [sys.stdin]:
      key_pub.publish(sys.stdin.read(1))
    rate.sleep()</code>
                </p>
                <p id="p_000554" smilref="Programming_Robots_with_ROS00007.smil#p_000554">Finally, we need to put the console back into standard mode before our program exits:</p>
                <p id="p_000555">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000731" smilref="Programming_Robots_with_ROS00007.smil#code_000731">  termios.tcsetattr(sys.stdin, termios.TCSADRAIN, old_attr)</code>
                </p>
                <p id="p_000556">
                  <span class="text" id="span_001696" smilref="Programming_Robots_with_ROS00007.smil#span_001696">To test if the keyboard driver node is operating as expected, three terminals</span>
                  <span class="keep-together" id="span_001697" smilref="Programming_Robots_with_ROS00007.smil#span_001697">are needed. In the</span>
                  <span class="text" id="span_001698" smilref="Programming_Robots_with_ROS00007.smil#span_001698">first terminal, run</span>
                  <code xml:space="preserve" id="code_000732" smilref="Programming_Robots_with_ROS00007.smil#code_000732">roscore</code>
                  <span class="text" id="span_001699" smilref="Programming_Robots_with_ROS00007.smil#span_001699">. In the second terminal, run the</span>
                  <span class="keep-together" id="span_001700">
                    <code xml:space="preserve" id="code_000733" smilref="Programming_Robots_with_ROS00007.smil#code_000733">key_publisher.py</code>
                  </span>
                  <span class="text" id="span_001701" smilref="Programming_Robots_with_ROS00007.smil#span_001701">node. In the third terminal, run</span>
                  <code xml:space="preserve" id="code_000734" smilref="Programming_Robots_with_ROS00007.smil#code_000734">rostopic echo keys</code>
                  <span class="text" id="span_001702" smilref="Programming_Robots_with_ROS00007.smil#span_001702">, which will print any and all messages that it receives on the</span>
                  <code xml:space="preserve" id="code_000735" smilref="Programming_Robots_with_ROS00007.smil#code_000735">keys</code>
                  <span class="text" id="span_001703" smilref="Programming_Robots_with_ROS00007.smil#span_001703">topic to the console. Then, set focus back to the second terminal by clicking on it or using window manager</span>
                  <span class="keep-together" id="span_001704" smilref="Programming_Robots_with_ROS00007.smil#span_001704">shortcuts</span>
                  <span class="text" id="span_001705" smilref="Programming_Robots_with_ROS00007.smil#span_001705">such as Alt-Tab to switch between terminals. Keystrokes in the second terminal should cause</span>
                  <code xml:space="preserve" id="code_000736" smilref="Programming_Robots_with_ROS00007.smil#code_000736">std_msgs/String</code>
                  <span class="text" id="span_001706" smilref="Programming_Robots_with_ROS00007.smil#span_001706">messages to print to the console of the third terminal. Progress! When you're finished testing, press Ctrl-C in all terminals to shut everything down.</span>
                </p>
                <p id="ch08-idp23179248" data-type="indexterm" data-startref="ix_8-teleop_bot-asciidoc1">
                  <span class="text" id="span_001707" smilref="Programming_Robots_with_ROS00007.smil#span_001707">You'll notice that "normal" keys, such as letters, numerals, and simple punctuation, work as expected. However, "extended" keys, such as the arrow keys, result in</span>
                  <code xml:space="preserve" id="code_000737" smilref="Programming_Robots_with_ROS00007.smil#code_000737">std_msgs/String</code>
                  <span class="text" id="span_001708" smilref="Programming_Robots_with_ROS00007.smil#span_001708">messages that are either weird symbols or multiple messages (or both). That is expected, since our minimalist</span>
                  <code xml:space="preserve" id="code_000738" smilref="Programming_Robots_with_ROS00007.smil#code_000738">key_publisher.py</code>
                  <span class="text" id="span_001709" smilref="Programming_Robots_with_ROS00007.smil#span_001709">node is just pulling characters one at a time from</span>
                  <code xml:space="preserve" id="code_000739" smilref="Programming_Robots_with_ROS00007.smil#code_000739">stdin</code>
                  <span class="text" id="span_001710" smilref="Programming_Robots_with_ROS00007.smil#span_001710">--and improving</span>
                  <code xml:space="preserve" id="code_000740" smilref="Programming_Robots_with_ROS00007.smil#code_000740">key_publisher.py</code>
                  <span class="text" id="span_001711" smilref="Programming_Robots_with_ROS00007.smil#span_001711">is an exercise left to the motivated reader! For the remainder of this chapter, we will use just alphabetic characters.</span>
                </p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Motion Generator" id="section_000092">
              <h1 id="h1_000150" smilref="Programming_Robots_with_ROS00007.smil#h1_000150">Motion Generator</h1>
              <div class="sect1" id="ch08-idp22652112">
                <p data-type="indexterm" data-primary="motion generator" id="ch08-ix_8-teleop_bot-asciidoc3" data-secondary="motion generator">
                  <span class="text" id="span_001712" smilref="Programming_Robots_with_ROS00007.smil#span_001712">In this section, we will use the common keyboard mapping of</span>
                  <em id="em_000257" smilref="Programming_Robots_with_ROS00007.smil#em_000257">w</em>
                  <span class="text" id="span_001713" smilref="Programming_Robots_with_ROS00007.smil#span_001713">,</span>
                  <em id="ch08-ix_8-teleop_bot-asciidoc4" smilref="Programming_Robots_with_ROS00007.smil#ch08-ix_8-teleop_bot-asciidoc4">x</em>
                  <span class="text" id="span_001714" smilref="Programming_Robots_with_ROS00007.smil#span_001714">,</span>
                  <em id="em_000258" smilref="Programming_Robots_with_ROS00007.smil#em_000258">a</em>
                  <span class="text" id="span_001715" smilref="Programming_Robots_with_ROS00007.smil#span_001715">,</span>
                  <em id="em_000259" smilref="Programming_Robots_with_ROS00007.smil#em_000259">d</em>
                  <span class="text" id="span_001716" smilref="Programming_Robots_with_ROS00007.smil#span_001716">,</span>
                  <em id="em_000260" smilref="Programming_Robots_with_ROS00007.smil#em_000260">s</em>
                  <span class="text" id="span_001717" smilref="Programming_Robots_with_ROS00007.smil#span_001717">to express, respectively, that we want the robot to go forward, go backward, turn left, turn right, and stop.</span>
                </p>
                <p id="p_000557">
                  <span class="text" id="span_001718" smilref="Programming_Robots_with_ROS00007.smil#span_001718">As a first attempt at this problem, we'll make a ROS node that outputs a</span>
                  <code xml:space="preserve" id="code_000741" smilref="Programming_Robots_with_ROS00007.smil#code_000741">Twist</code>
                  <span class="text" id="span_001719" smilref="Programming_Robots_with_ROS00007.smil#span_001719">message every time it receives a</span>
                  <code xml:space="preserve" id="code_000742" smilref="Programming_Robots_with_ROS00007.smil#code_000742">std_msgs/String</code>
                  <span class="text" id="span_001720" smilref="Programming_Robots_with_ROS00007.smil#span_001720">message that starts with a character it understands, as shown in</span>
                  <a data-type="xref" href="#ch08-keyop_first_try" external="false" id="a_000097" smilref="Programming_Robots_with_ROS00007.smil#a_000097">Example 8-2</a>
                  <span class="text" id="span_001721" smilref="Programming_Robots_with_ROS00007.smil#span_001721">.</span>
                </p>
                <h1 id="h1_000151" smilref="Programming_Robots_with_ROS00007.smil#h1_000151">Example 8-2. keys_to_twist.py</h1>
                <div id="ch08-keyop_first_try" data-type="example">
                  <p id="p_000558">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_000743" smilref="Programming_Robots_with_ROS00007.smil#code_000743">#!/usr/bin/env python
import rospy
from std_msgs.msg import String
from geometry_msgs.msg import Twist

key_mapping = { 'w': [ 0, 1], 'x': [0, -1],
                'a': [-1, 0], 'd': [1,  0],
                's': [ 0, 0] }

def keys_cb(msg, twist_pub):
  if len(msg.data) == 0 or not key_mapping.has_key(msg.data[0]):
    return # unknown key
  vels = key_mapping[msg.data[0]]
  t = Twist()
  t.angular.z = vels[0]
  t.linear.x  = vels[1]
  twist_pub.publish(t)

if __name__ == '__main__':
  rospy.init_node('keys_to_twist')
  twist_pub = rospy.Publisher('cmd_vel', Twist, queue_size=1)
  rospy.Subscriber('keys', String, keys_cb, twist_pub)
  rospy.spin()</code>
                  </p>
                </div>
                <p id="p_000559" smilref="Programming_Robots_with_ROS00007.smil#p_000559">This program uses a Python dictionary to store the mapping between keystrokes and the target velocities:</p>
                <p id="p_000560">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000744" smilref="Programming_Robots_with_ROS00007.smil#code_000744">key_mapping = { 'w': [ 0, 1], 'x': [0, -1],
                'a': [-1, 0], 'd': [1,  0],
                's': [ 0, 0] }</code>
                </p>
                <p id="p_000561">
                  <span class="text" id="span_001722" smilref="Programming_Robots_with_ROS00007.smil#span_001722">In the callback function for the</span>
                  <code xml:space="preserve" id="code_000745" smilref="Programming_Robots_with_ROS00007.smil#code_000745">keys</code>
                  <span class="text" id="span_001723" smilref="Programming_Robots_with_ROS00007.smil#span_001723">topic, incoming keys are looked up in this dictionary. If a key is found, the target velocities are extracted from the dictionary:</span>
                </p>
                <p id="p_000562">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000746" smilref="Programming_Robots_with_ROS00007.smil#code_000746">  if len(msg.data) == 0 or not key_mapping.has_key(msg.data[0]):
    return # unknown key
  vels = key_mapping[msg.data[0]]</code>
                </p>
                <p id="p_000563">
                  <span class="text" id="span_001724" smilref="Programming_Robots_with_ROS00007.smil#span_001724">In an effort to prevent runaway robots, most robot device drivers will automatically stop the robot if no messages are received in a few hundred milliseconds. The program in the previous listing would work, but only if it had a continual stream of keypresses to continually generate</span>
                  <code xml:space="preserve" id="code_000747" smilref="Programming_Robots_with_ROS00007.smil#code_000747">Twist</code>
                  <span class="text" id="span_001725" smilref="Programming_Robots_with_ROS00007.smil#span_001725">messages for the robot driver. That would be exciting for a few seconds, but once the euphoria of "Hey, the robot is moving!" wears off, we'll be searching for improvements!</span>
                </p>
                <p id="p_000564">
                  <span class="text" id="span_001726" smilref="Programming_Robots_with_ROS00007.smil#span_001726">Issues such as robot firmware timeouts can be tricky to debug. As with everything in ROS (and complex systems in general), the key for debugging is to find ways</span>
                  <span class="keep-together" id="span_001727" smilref="Programming_Robots_with_ROS00007.smil#span_001727">to divide the</span>
                  <span class="text" id="span_001728" smilref="Programming_Robots_with_ROS00007.smil#span_001728">system into smaller pieces and discover where the problem</span>
                  <span class="keep-together" id="span_001729">
                    <span class="text" id="span_001730" smilref="Programming_Robots_with_ROS00007.smil#span_001730">lies. The</span>
                    <code xml:space="preserve" id="code_000748" smilref="Programming_Robots_with_ROS00007.smil#code_000748">rostopic</code>
                    <span class="text" id="span_001731" smilref="Programming_Robots_with_ROS00007.smil#span_001731">tool</span>
                  </span>
                  <span class="text" id="span_001732" smilref="Programming_Robots_with_ROS00007.smil#span_001732">can help in several ways. As in the previous section, start</span>
                  <span class="keep-together" id="span_001733" smilref="Programming_Robots_with_ROS00007.smil#span_001733">three terminals: one with</span>
                  <code xml:space="preserve" id="code_000749" smilref="Programming_Robots_with_ROS00007.smil#code_000749">roscore</code>
                  <span class="text" id="span_001734" smilref="Programming_Robots_with_ROS00007.smil#span_001734">, one with</span>
                  <code xml:space="preserve" id="code_000750" smilref="Programming_Robots_with_ROS00007.smil#code_000750">key_publisher.py</code>
                  <span class="text" id="span_001735" smilref="Programming_Robots_with_ROS00007.smil#span_001735">, and one with</span>
                  <code xml:space="preserve" id="code_000751" smilref="Programming_Robots_with_ROS00007.smil#code_000751">keys_to_twist.py</code>
                  <span class="text" id="span_001736" smilref="Programming_Robots_with_ROS00007.smil#span_001736">. Then, we can start a fourth terminal for various incantations of</span>
                  <code xml:space="preserve" id="code_000752" smilref="Programming_Robots_with_ROS00007.smil#code_000752">rostopic</code>
                  <span class="text" id="span_001737" smilref="Programming_Robots_with_ROS00007.smil#span_001737">.</span>
                </p>
                <p id="p_000565" smilref="Programming_Robots_with_ROS00007.smil#p_000565">First, we can see what topics are available:</p>
                <p id="p_000566">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000753"><span class="text" id="span_001738" smilref="Programming_Robots_with_ROS00007.smil#span_001738">
user@hostname$ </span><strong id="strong_000082" smilref="Programming_Robots_with_ROS00007.smil#strong_000082">rostopic list</strong>
</code>
                </p>
                <p id="p_000567" smilref="Programming_Robots_with_ROS00007.smil#p_000567">This provides the following output:</p>
                <p id="p_000568">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000754" smilref="Programming_Robots_with_ROS00007.smil#code_000754">/cmd_vel
/keys
/rosout
/rosout_agg</code>
                </p>
                <p id="p_000569">
                  <span class="text" id="span_001739" smilref="Programming_Robots_with_ROS00007.smil#span_001739">The last two items,</span>
                  <code xml:space="preserve" id="code_000755" smilref="Programming_Robots_with_ROS00007.smil#code_000755">/rosout</code>
                  <span class="text" id="span_001740" smilref="Programming_Robots_with_ROS00007.smil#span_001740">and</span>
                  <code xml:space="preserve" id="code_000756" smilref="Programming_Robots_with_ROS00007.smil#code_000756">/rosout_agg</code>
                  <span class="text" id="span_001741" smilref="Programming_Robots_with_ROS00007.smil#span_001741">, are part of the general-purpose ROS logging scheme and are always there. The other two,</span>
                  <code xml:space="preserve" id="code_000757" smilref="Programming_Robots_with_ROS00007.smil#code_000757">cmd_vel</code>
                  <span class="text" id="span_001742" smilref="Programming_Robots_with_ROS00007.smil#span_001742">and</span>
                  <code xml:space="preserve" id="code_000758" smilref="Programming_Robots_with_ROS00007.smil#code_000758">keys</code>
                  <span class="text" id="span_001743" smilref="Programming_Robots_with_ROS00007.smil#span_001743">, are what our programs are publishing. Now, let's dump the</span>
                  <code xml:space="preserve" id="code_000759" smilref="Programming_Robots_with_ROS00007.smil#code_000759">cmd_vel</code>
                  <span class="text" id="span_001744" smilref="Programming_Robots_with_ROS00007.smil#span_001744">data stream to the console:</span>
                </p>
                <p id="p_000570">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000760"><span class="text" id="span_001745" smilref="Programming_Robots_with_ROS00007.smil#span_001745">
user@hostname$ </span><strong id="strong_000083" smilref="Programming_Robots_with_ROS00007.smil#strong_000083">rostopic echo cmd_vel</strong>
</code>
                </p>
                <p data-type="indexterm" data-primary="ROS command-line tools" data-secondary="rostopic" id="ch08-idp23397568">
                  <span class="text" id="span_001746" smilref="Programming_Robots_with_ROS00007.smil#span_001746">Each time a valid key is pressed in the console with</span>
                  <code xml:space="preserve" id="code_000761" smilref="Programming_Robots_with_ROS00007.smil#code_000761">key_publisher.py</code>
                  <span class="text" id="span_001747" smilref="Programming_Robots_with_ROS00007.smil#span_001747">, the</span>
                  <code xml:space="preserve" id="code_000762" smilref="Programming_Robots_with_ROS00007.smil#code_000762">rostopic</code>
                  <span class="text" id="span_001748" smilref="Programming_Robots_with_ROS00007.smil#span_001748">console should print the contents of the resulting</span>
                  <code xml:space="preserve" id="code_000763" smilref="Programming_Robots_with_ROS00007.smil#code_000763">Twist</code>
                  <span class="text" id="span_001749" smilref="Programming_Robots_with_ROS00007.smil#span_001749">message published by</span>
                  <code xml:space="preserve" id="code_000764" smilref="Programming_Robots_with_ROS00007.smil#code_000764">keys_to_twist.py</code>
                  <span class="text" id="span_001750" smilref="Programming_Robots_with_ROS00007.smil#span_001750">. Progress! As always with ROS console tools, simply press Ctrl-C to exit. Next, let's use</span>
                  <code xml:space="preserve" id="code_000765" smilref="Programming_Robots_with_ROS00007.smil#code_000765">rostopic hz</code>
                  <span class="text" id="span_001751" smilref="Programming_Robots_with_ROS00007.smil#span_001751">to compute the average rate of messages:</span>
                </p>
                <p id="p_000571">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000766"><span class="text" id="span_001752" smilref="Programming_Robots_with_ROS00007.smil#span_001752">
user@hostname$ </span><strong id="strong_000084" smilref="Programming_Robots_with_ROS00007.smil#strong_000084">rostopic hz cmd_vel</strong>
</code>
                </p>
                <p id="p_000572">
                  <span class="text" id="span_001753" smilref="Programming_Robots_with_ROS00007.smil#span_001753">The</span>
                  <code xml:space="preserve" id="code_000767" smilref="Programming_Robots_with_ROS00007.smil#code_000767">rostopic hz</code>
                  <span class="text" id="span_001754" smilref="Programming_Robots_with_ROS00007.smil#span_001754">command will compute an average of the rate of messages on a topic every second and print those estimates to the console. With</span>
                  <code xml:space="preserve" id="code_000768" smilref="Programming_Robots_with_ROS00007.smil#code_000768">keys_to_twist.py</code>
                  <span class="text" id="span_001755" smilref="Programming_Robots_with_ROS00007.smil#span_001755">, this estimate will almost always be zero, with minor bumps up and down each time a key is pressed in the keyboard driver console.</span>
                </p>
                <h1 id="h1_000152" smilref="Programming_Robots_with_ROS00007.smil#h1_000152">Tip</h1>
                <div data-type="tip" id="div_000021">
                  <p id="p_000573">
                    <span class="text" id="span_001756" smilref="Programming_Robots_with_ROS00007.smil#span_001756">The</span>
                    <code xml:space="preserve" id="code_000769" smilref="Programming_Robots_with_ROS00007.smil#code_000769">rostopic</code>
                    <span class="text" id="span_001757" smilref="Programming_Robots_with_ROS00007.smil#span_001757">tools are your friends! Virtually every ROS programming and (especially) debugging session includes some usage of</span>
                    <code xml:space="preserve" id="code_000770" smilref="Programming_Robots_with_ROS00007.smil#code_000770">rostopic</code>
                    <span class="text" id="span_001758" smilref="Programming_Robots_with_ROS00007.smil#span_001758">to rapidly introspect the system and verify that data is flowing as expected.</span>
                  </p>
                </div>
                <p id="p_000574">
                  <span class="text" id="span_001759" smilref="Programming_Robots_with_ROS00007.smil#span_001759">To make this node useful for robots that require a steady stream of velocity commands, we will output a</span>
                  <code xml:space="preserve" id="code_000771" smilref="Programming_Robots_with_ROS00007.smil#code_000771">Twist</code>
                  <span class="text" id="span_001760" smilref="Programming_Robots_with_ROS00007.smil#span_001760">message every 100 milliseconds, or at a rate of 10 Hz, by simply repeating the last motion command if a new key was not pressed. Although we could do something like this by using a</span>
                  <code xml:space="preserve" id="code_000772" smilref="Programming_Robots_with_ROS00007.smil#code_000772">sleep(0.1)</code>
                  <span class="text" id="span_001761" smilref="Programming_Robots_with_ROS00007.smil#span_001761">call in the</span>
                  <code xml:space="preserve" id="code_000773" smilref="Programming_Robots_with_ROS00007.smil#code_000773">while</code>
                  <span class="text" id="span_001762" smilref="Programming_Robots_with_ROS00007.smil#span_001762">loop, this would only ensure that the loop runs</span>
                  <em id="em_000261" smilref="Programming_Robots_with_ROS00007.smil#em_000261">no faster</em>
                  <span class="text" id="span_001763" smilref="Programming_Robots_with_ROS00007.smil#span_001763">than 10 Hz; the timing results would likely have quite a bit of variance since the scheduling and execution time of the loop itself are not taken into account. Because computers have widely varying clock speeds and overall computational performance, the exact amount of CPU time that a loop would need to sleep to maintain a particular update rate is not knowable ahead of time. Looping tasks are thus better accomplished with the ROS</span>
                  <em id="em_000262" smilref="Programming_Robots_with_ROS00007.smil#em_000262">rate</em>
                  <span class="text" id="span_001764" smilref="Programming_Robots_with_ROS00007.smil#span_001764">construct, which continually estimates the time spent processing the loop to obtain more consistent results, as shown in</span>
                  <a data-type="xref" href="#ch08-keyop_second_try" external="false" id="a_000098" smilref="Programming_Robots_with_ROS00007.smil#a_000098">Example 8-3</a>
                  <span class="text" id="span_001765" smilref="Programming_Robots_with_ROS00007.smil#span_001765">.</span>
                </p>
                <h1 id="h1_000153" smilref="Programming_Robots_with_ROS00007.smil#h1_000153">Example 8-3. keys_to_twist_using_rate.py</h1>
                <div id="ch08-keyop_second_try" data-type="example">
                  <p id="p_000575">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_000774" smilref="Programming_Robots_with_ROS00007.smil#code_000774">#!/usr/bin/env python
import rospy
from std_msgs.msg import String
from geometry_msgs.msg import Twist

key_mapping = { 'w': [ 0, 1], 'x': [0, -1],
                'a': [-1, 0], 'd': [1,  0],
                's': [ 0, 0] }
g_last_twist = None

def keys_cb(msg, twist_pub):
  global g_last_twist
  if len(msg.data) == 0 or not key_mapping.has_key(msg.data[0]):
    return # unknown key
  vels = key_mapping[msg.data[0]]
  g_last_twist.angular.z = vels[0]
  g_last_twist.linear.x  = vels[1]
  twist_pub.publish(g_last_twist)

if __name__ == '__main__':
  rospy.init_node('keys_to_twist')
  twist_pub = rospy.Publisher('cmd_vel', Twist, queue_size=1)
  rospy.Subscriber('keys', String, keys_cb, twist_pub)
  rate = rospy.Rate(10)
  g_last_twist = Twist() # initializes to zero
  while not rospy.is_shutdown():
    twist_pub.publish(g_last_twist)
    rate.sleep()</code>
                  </p>
                </div>
                <p id="p_000576">
                  <span class="text" id="span_001766" smilref="Programming_Robots_with_ROS00007.smil#span_001766">Now, when the</span>
                  <code xml:space="preserve" id="code_000775" smilref="Programming_Robots_with_ROS00007.smil#code_000775">keys_to_twist_using_rate.py</code>
                  <span class="text" id="span_001767" smilref="Programming_Robots_with_ROS00007.smil#span_001767">node is running, we will see a quite consistent 10 Hz message stream when we run</span>
                  <code xml:space="preserve" id="code_000776" smilref="Programming_Robots_with_ROS00007.smil#code_000776">rostopic hz cmd_vel</code>
                  <span class="text" id="span_001768" smilref="Programming_Robots_with_ROS00007.smil#span_001768">. This can be seen using a separate console running</span>
                  <code xml:space="preserve" id="code_000777" smilref="Programming_Robots_with_ROS00007.smil#code_000777">rostopic echo cmd_vel</code>
                  <span class="text" id="span_001769" smilref="Programming_Robots_with_ROS00007.smil#span_001769">, as in the previous section. The key difference between this program and the previous one is the use of</span>
                  <code xml:space="preserve" id="code_000778" smilref="Programming_Robots_with_ROS00007.smil#code_000778">rospy.Rate()</code>
                  <span class="text" id="span_001770" smilref="Programming_Robots_with_ROS00007.smil#span_001770">:</span>
                </p>
                <p id="p_000577">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000779" smilref="Programming_Robots_with_ROS00007.smil#code_000779">  rate = rospy.Rate(10)
  g_last_twist = Twist() # initializes to zero
  while not rospy.is_shutdown():
    twist_pub.publish(g_last_twist)
    rate.sleep()</code>
                </p>
                <p data-type="indexterm" data-primary="debugging" data-secondary="rqt_plot" id="ch08-idp23760368">
                  <span class="text" id="span_001771" smilref="Programming_Robots_with_ROS00007.smil#span_001771">When debugging low-dimensional data, such as the velocity commands sent to a robot, it is often useful to plot the data stream as a time series. ROS provides a command-line tool called</span>
                  <code xml:space="preserve" id="code_000780" smilref="Programming_Robots_with_ROS00007.smil#code_000780">rqt_plot</code>
                  <span class="text" id="span_001772" smilref="Programming_Robots_with_ROS00007.smil#span_001772">that can accept</span>
                  <em id="ch08-idp23916224" smilref="Programming_Robots_with_ROS00007.smil#ch08-idp23916224">any</em>
                  <span class="text" id="span_001773" smilref="Programming_Robots_with_ROS00007.smil#span_001773">numerical data message stream and plot it graphically in real time.</span>
                </p>
                <p data-type="indexterm" data-primary="YAML" data-secondary="and rostopic" id="ch08-idp23920176">
                  <span class="text" id="span_001774" smilref="Programming_Robots_with_ROS00007.smil#span_001774">To create an</span>
                  <code xml:space="preserve" id="code_000781" smilref="Programming_Robots_with_ROS00007.smil#code_000781">rqt_plot</code>
                  <span class="text" id="span_001775" smilref="Programming_Robots_with_ROS00007.smil#span_001775">visualization, we need to send</span>
                  <code xml:space="preserve" id="code_000782" smilref="Programming_Robots_with_ROS00007.smil#code_000782">rqt_plot</code>
                  <span class="text" id="span_001776" smilref="Programming_Robots_with_ROS00007.smil#span_001776">the exact message field that we want to see plotted. To find this field name, we can use several methods. The simplest is to look at the output of</span>
                  <code xml:space="preserve" id="code_000783" smilref="Programming_Robots_with_ROS00007.smil#code_000783">rostopic echo</code>
                  <span class="text" id="span_001777" smilref="Programming_Robots_with_ROS00007.smil#span_001777">. This is always printed in YAML, a simple whitespace-based markup format. For example,</span>
                  <code xml:space="preserve" id="code_000784" smilref="Programming_Robots_with_ROS00007.smil#code_000784">rostopic echo cmd_vel</code>
                  <span class="text" id="span_001778" smilref="Programming_Robots_with_ROS00007.smil#span_001778">will print a series of records of this format:</span>
                </p>
                <p id="p_000578">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000785" smilref="Programming_Robots_with_ROS00007.smil#code_000785">linear:
  x: 0.0
  y: 0.0
  z: 0.0
angular:
  x: 0.0
  y: 0.0
  z: 0.0</code>
                </p>
                <p id="p_000579">
                  <span class="text" id="span_001779" smilref="Programming_Robots_with_ROS00007.smil#span_001779">Nested structures are indicated by whitespace: first, the</span>
                  <code xml:space="preserve" id="code_000786" smilref="Programming_Robots_with_ROS00007.smil#code_000786">linear</code>
                  <span class="text" id="span_001780" smilref="Programming_Robots_with_ROS00007.smil#span_001780">field structure has field names</span>
                  <code xml:space="preserve" id="code_000787" smilref="Programming_Robots_with_ROS00007.smil#code_000787">x</code>
                  <span class="text" id="span_001781" smilref="Programming_Robots_with_ROS00007.smil#span_001781">,</span>
                  <code xml:space="preserve" id="code_000788" smilref="Programming_Robots_with_ROS00007.smil#code_000788">y</code>
                  <span class="text" id="span_001782" smilref="Programming_Robots_with_ROS00007.smil#span_001782">,</span>
                  <code xml:space="preserve" id="code_000789" smilref="Programming_Robots_with_ROS00007.smil#code_000789">z</code>
                  <span class="text" id="span_001783" smilref="Programming_Robots_with_ROS00007.smil#span_001783">; this is followed by the</span>
                  <code xml:space="preserve" id="code_000790" smilref="Programming_Robots_with_ROS00007.smil#code_000790">angular</code>
                  <span class="text" id="span_001784" smilref="Programming_Robots_with_ROS00007.smil#span_001784">field structure, with the same members.</span>
                </p>
                <p id="p_000580">
                  <span class="text" id="span_001785" smilref="Programming_Robots_with_ROS00007.smil#span_001785">Alternatively, we can discover the topic data type using</span>
                  <code xml:space="preserve" id="code_000791" smilref="Programming_Robots_with_ROS00007.smil#code_000791">rostopic</code>
                  <span class="text" id="span_001786" smilref="Programming_Robots_with_ROS00007.smil#span_001786">:</span>
                </p>
                <p id="p_000581">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000792"><span class="text" id="span_001787" smilref="Programming_Robots_with_ROS00007.smil#span_001787">
user@hostname$ </span><strong id="strong_000085" smilref="Programming_Robots_with_ROS00007.smil#strong_000085">rostopic info cmd_vel</strong>
</code>
                </p>
                <p id="p_000582">
                  <span class="text" id="span_001788" smilref="Programming_Robots_with_ROS00007.smil#span_001788">This will print quite a bit of information about the topic publishers and subscribers, as well as stating that the</span>
                  <code xml:space="preserve" id="code_000793" smilref="Programming_Robots_with_ROS00007.smil#code_000793">cmd_vel</code>
                  <span class="text" id="span_001789" smilref="Programming_Robots_with_ROS00007.smil#span_001789">topic is of type</span>
                  <code xml:space="preserve" id="code_000794" smilref="Programming_Robots_with_ROS00007.smil#code_000794">geometry_msgs/Twist</code>
                  <span class="text" id="span_001790" smilref="Programming_Robots_with_ROS00007.smil#span_001790">. With this data type name, we can use the</span>
                  <code xml:space="preserve" id="code_000795" smilref="Programming_Robots_with_ROS00007.smil#code_000795">rosmsg</code>
                  <span class="text" id="span_001791" smilref="Programming_Robots_with_ROS00007.smil#span_001791">command to print the structure:</span>
                </p>
                <p id="p_000583">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000796"><span class="text" id="span_001792" smilref="Programming_Robots_with_ROS00007.smil#span_001792">
user@hostname$ </span><strong id="strong_000086" smilref="Programming_Robots_with_ROS00007.smil#strong_000086">rosmsg show geometry_msgs/Twist</strong><span class="text" id="span_001793" smilref="Programming_Robots_with_ROS00007.smil#span_001793">
geometry_msgs/Vector3 linear
  float64 x
  float64 y
  float64 z
geometry_msgs/Vector3 angular
  float64 x
  float64 y
  float64 z
</span></code>
                </p>
                <p id="p_000584">
                  <span class="text" id="span_001794" smilref="Programming_Robots_with_ROS00007.smil#span_001794">This console output shows us that the</span>
                  <code xml:space="preserve" id="code_000797" smilref="Programming_Robots_with_ROS00007.smil#code_000797">linear</code>
                  <span class="text" id="span_001795" smilref="Programming_Robots_with_ROS00007.smil#span_001795">and</span>
                  <code xml:space="preserve" id="code_000798" smilref="Programming_Robots_with_ROS00007.smil#code_000798">angular</code>
                  <span class="text" id="span_001796" smilref="Programming_Robots_with_ROS00007.smil#span_001796">members of the</span>
                  <code xml:space="preserve" id="code_000799" smilref="Programming_Robots_with_ROS00007.smil#code_000799">Twist</code>
                  <span class="text" id="span_001797" smilref="Programming_Robots_with_ROS00007.smil#span_001797">message are of type</span>
                  <code xml:space="preserve" id="code_000800" smilref="Programming_Robots_with_ROS00007.smil#code_000800">geometry_msgs/Vector3</code>
                  <span class="text" id="span_001798" smilref="Programming_Robots_with_ROS00007.smil#span_001798">, which has fields named</span>
                  <code xml:space="preserve" id="code_000801" smilref="Programming_Robots_with_ROS00007.smil#code_000801">x</code>
                  <span class="text" id="span_001799" smilref="Programming_Robots_with_ROS00007.smil#span_001799">,</span>
                  <code xml:space="preserve" id="code_000802" smilref="Programming_Robots_with_ROS00007.smil#code_000802">y</code>
                  <span class="text" id="span_001800" smilref="Programming_Robots_with_ROS00007.smil#span_001800">, and</span>
                  <code xml:space="preserve" id="code_000803" smilref="Programming_Robots_with_ROS00007.smil#code_000803">z</code>
                  <span class="text" id="span_001801" smilref="Programming_Robots_with_ROS00007.smil#span_001801">. Granted, we already knew that from the</span>
                  <code xml:space="preserve" id="code_000804" smilref="Programming_Robots_with_ROS00007.smil#code_000804">rostopic echo</code>
                  <span class="text" id="span_001802" smilref="Programming_Robots_with_ROS00007.smil#span_001802">output, but</span>
                  <code xml:space="preserve" id="code_000805" smilref="Programming_Robots_with_ROS00007.smil#code_000805">rosmsg show</code>
                  <span class="text" id="span_001803" smilref="Programming_Robots_with_ROS00007.smil#span_001803">is sometimes a useful way of obtaining this information when we don't have a data stream available to print to the console.</span>
                </p>
                <p id="p_000585">
                  <span class="text" id="span_001804" smilref="Programming_Robots_with_ROS00007.smil#span_001804">Now that we know the topic name and the names of the fields, we can generate streaming plots of the linear velocity that we are publishing by using slashes to descend into the message structure and select the fields of interest. As mentioned previously, for planar differential-drive robots, the only nonzero fields in the</span>
                  <code xml:space="preserve" id="code_000806" smilref="Programming_Robots_with_ROS00007.smil#code_000806">Twist</code>
                  <span class="text" id="span_001805" smilref="Programming_Robots_with_ROS00007.smil#span_001805">message will be the x-axis linear (forward/backward) velocity and the z-axis (yaw) angular velocity. We can start streaming those fields to a plot with a single command:</span>
                </p>
                <p id="p_000586">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000807"><span class="text" id="span_001806" smilref="Programming_Robots_with_ROS00007.smil#span_001806">
user@hostname$ </span><strong id="strong_000087" smilref="Programming_Robots_with_ROS00007.smil#strong_000087">rqt_plot cmd_vel/linear/x cmd_vel/angular/z</strong>
</code>
                </p>
                <p id="p_000587">
                  <span class="text" id="span_001807" smilref="Programming_Robots_with_ROS00007.smil#span_001807">This plot will look something like</span>
                  <a data-type="xref" href="#ch08-rqt_plot_keys" external="false" id="a_000099" smilref="Programming_Robots_with_ROS00007.smil#a_000099">Figure 8-1</a>
                  <span class="text" id="span_001808" smilref="Programming_Robots_with_ROS00007.smil#span_001808">as keys are pressed and the stream of velocity commands changes.</span>
                </p>
                <figure id="figure_000021">
                  <h1 id="h1_000154" smilref="Programming_Robots_with_ROS00007.smil#h1_000154">Figure 8-1. A live plot rendered by rqt_plot that shows the linear and angular velocity commands over time</h1>
                  <div id="ch08-rqt_plot_keys" class="figure">
                    <img src="images/prwr_0801.jpg" alt="rqt_plot" id="img_000051" />
                  </div>
                </figure>
                <p id="ch08-idp23943216" data-type="indexterm" data-startref="ix_8-teleop_bot-asciidoc3">
                  <span class="text" id="span_001809" smilref="Programming_Robots_with_ROS00007.smil#span_001809">We now have a pipeline built where pressing letters on the keyboard will send velocity commands to a robot, and we can view those velocities in a live plot. That's great! But there's a lot of room for improvement. First, notice in the previous plot that our velocities are always either 0, -1, or +1. ROS uses SI units throughout, which means that we are asking our robot to drive forward and backward at one meter per second and turn at one radian per second. Unfortunately, robots run at greatly varying speeds in different applications: for a robotic car, one meter per second is very slow; however, for a small indoor robot navigating a corridor, one meter per second is actually quite fast. We need a way to</span>
                  <em id="em_000263" smilref="Programming_Robots_with_ROS00007.smil#em_000263">parameterize</em>
                  <span class="text" id="span_001810" smilref="Programming_Robots_with_ROS00007.smil#span_001810">this program, so that it can be used with multiple robots. We'll do that in the next section.</span>
                </p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Parameter Server" id="section_000093">
              <h1 id="h1_000155" smilref="Programming_Robots_with_ROS00007.smil#h1_000155">Parameter Server</h1>
              <div class="sect1" id="ch08-teleop_bot_params">
                <p data-type="indexterm" data-primary="parameter server" data-secondary="teleop-bot and" id="ch08-ix_8-teleop_bot-asciidoc5">
                  <span class="text" id="span_001811" smilref="Programming_Robots_with_ROS00007.smil#span_001811">We can improve the</span>
                  <em id="em_000264" smilref="Programming_Robots_with_ROS00007.smil#em_000264">keys_to_twist_using_rate.py</em>
                  <span class="text" id="span_001812" smilref="Programming_Robots_with_ROS00007.smil#span_001812">program by using ROS</span>
                  <em id="ch08-ix_8-teleop_bot-asciidoc6" smilref="Programming_Robots_with_ROS00007.smil#ch08-ix_8-teleop_bot-asciidoc6">parameters</em>
                  <span class="text" id="span_001813" smilref="Programming_Robots_with_ROS00007.smil#span_001813">to specify the linear and angular velocity scales. Of course, there are countless ways that we can give parameters to programs. When developing robotic systems, it is often useful to set parameters in a variety of ways: at the command line when debugging, in</span>
                  <code id="ch08-ix_8-teleop_bot-asciidoc7" xml:space="preserve" smilref="Programming_Robots_with_ROS00007.smil#ch08-ix_8-teleop_bot-asciidoc7">roslaunch</code>
                  <span class="text" id="span_001814" smilref="Programming_Robots_with_ROS00007.smil#span_001814">files, from graphical interfaces, from other ROS nodes, or even in separate parameter files to cleanly define behavior for multiple platforms or environments. The ROS master, often called</span>
                  <code xml:space="preserve" id="code_000808" smilref="Programming_Robots_with_ROS00007.smil#code_000808">roscore</code>
                  <span class="text" id="span_001815" smilref="Programming_Robots_with_ROS00007.smil#span_001815">, includes a</span>
                  <em id="em_000265" smilref="Programming_Robots_with_ROS00007.smil#em_000265">parameter server</em>
                  <span class="text" id="span_001816" smilref="Programming_Robots_with_ROS00007.smil#span_001816">that can be read or written by all ROS nodes and command-line tools. The parameter server can support quite sophisticated interactions, but for our purposes in this chapter, we will only be setting parameters at the command line when running our teleoperation nodes.</span>
                </p>
                <p data-type="indexterm" data-primary="private parameter name" id="ch08-idp23952928">
                  <span class="text" id="span_001817" smilref="Programming_Robots_with_ROS00007.smil#span_001817">The parameter server is a generic key/value store. There are many strategies for how to name parameters, but for our teleoperation node, we want a</span>
                  <em id="em_000266" smilref="Programming_Robots_with_ROS00007.smil#em_000266">private</em>
                  <span class="text" id="span_001818" smilref="Programming_Robots_with_ROS00007.smil#span_001818">parameter name. In ROS, a private parameter name is still publicly accessible; the notion of "private" simply means that its full name is formed by appending the parameter name to the node's name. This ensures that no name clashes can occur, because node names are always unique (see</span>
                  <a data-type="xref" href="#ch02-names" external="false" id="a_000100" smilref="Programming_Robots_with_ROS00007.smil#a_000100">"Names, Namespaces, and Remapping"</a>
                  <span class="text" id="span_001819" smilref="Programming_Robots_with_ROS00007.smil#span_001819">). For example, if our node name is</span>
                  <code xml:space="preserve" id="code_000809" smilref="Programming_Robots_with_ROS00007.smil#code_000809">keys_to_twist</code>
                  <span class="text" id="span_001820" smilref="Programming_Robots_with_ROS00007.smil#span_001820">, we can have private parameters named</span>
                  <code xml:space="preserve" id="code_000810" smilref="Programming_Robots_with_ROS00007.smil#code_000810">keys_to_twist/linear_scale</code>
                  <span class="text" id="span_001821" smilref="Programming_Robots_with_ROS00007.smil#span_001821">and</span>
                  <code xml:space="preserve" id="code_000811" smilref="Programming_Robots_with_ROS00007.smil#code_000811">keys_to_twist/angular_scale</code>
                  <span class="text" id="span_001822" smilref="Programming_Robots_with_ROS00007.smil#span_001822">.</span>
                </p>
                <p class="keep-together" id="p_000588">
                  <span class="text" id="span_001823" smilref="Programming_Robots_with_ROS00007.smil#span_001823">To set private parameters on the command line at the time the node is launched, prepend the parameter name with an underscore and set its value using</span>
                  <code xml:space="preserve" id="code_000812" smilref="Programming_Robots_with_ROS00007.smil#code_000812">:=</code>
                  <span class="text" id="span_001824" smilref="Programming_Robots_with_ROS00007.smil#span_001824">syntax, as follows:</span>
                </p>
                <p id="p_000589">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000813" smilref="Programming_Robots_with_ROS00007.smil#code_000813">./keys_to_twist_parameterized.py _linear_scale:=0.5 _angular_scale:=0.4</code>
                </p>
                <p id="p_000590">
                  <span class="text" id="span_001825" smilref="Programming_Robots_with_ROS00007.smil#span_001825">This would set the</span>
                  <code xml:space="preserve" id="code_000814" smilref="Programming_Robots_with_ROS00007.smil#code_000814">keys_to_twist/linear_scale</code>
                  <span class="text" id="span_001826" smilref="Programming_Robots_with_ROS00007.smil#span_001826">parameter to 0.5 and the</span>
                  <code xml:space="preserve" id="code_000815" smilref="Programming_Robots_with_ROS00007.smil#code_000815">keys_to_twist/angular_scale</code>
                  <span class="text" id="span_001827" smilref="Programming_Robots_with_ROS00007.smil#span_001827">parameter to 0.4, immediately before the node is launched. These parameter values are then returned by the</span>
                  <code xml:space="preserve" id="code_000816" smilref="Programming_Robots_with_ROS00007.smil#code_000816">has_param()</code>
                  <span class="text" id="span_001828" smilref="Programming_Robots_with_ROS00007.smil#span_001828">and</span>
                  <code xml:space="preserve" id="code_000817" smilref="Programming_Robots_with_ROS00007.smil#code_000817">get_param()</code>
                  <span class="text" id="span_001829" smilref="Programming_Robots_with_ROS00007.smil#span_001829">calls, as shown in</span>
                  <a data-type="xref" href="#ch08-keys_to_twist_parameterized" external="false" id="a_000101" smilref="Programming_Robots_with_ROS00007.smil#a_000101">Example 8-4</a>
                  <span class="text" id="span_001830" smilref="Programming_Robots_with_ROS00007.smil#span_001830">.</span>
                </p>
                <h1 id="h1_000156" smilref="Programming_Robots_with_ROS00007.smil#h1_000156">Example 8-4. keys_to_twist_parameterized.py</h1>
                <div id="ch08-keys_to_twist_parameterized" data-type="example">
                  <p id="p_000591">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_000818" smilref="Programming_Robots_with_ROS00007.smil#code_000818">#!/usr/bin/env python
import rospy
from std_msgs.msg import String
from geometry_msgs.msg import Twist

key_mapping = { 'w': [ 0, 1], 'x': [0, -1],
                'a': [-1, 0], 'd': [1,  0],
                's': [ 0, 0] }
g_last_twist = None
g_vel_scales = [0.1, 0.1] # default to very slow

def keys_cb(msg, twist_pub):
  global g_last_twist, g_vel_scales
  if len(msg.data) == 0 or not key_mapping.has_key(msg.data[0]):
    return # unknown key
  vels = key_mapping[msg.data[0]]
  g_last_twist.angular.z = vels[0] * g_vel_scales[0]
  g_last_twist.linear.x  = vels[1] * g_vel_scales[1]
  twist_pub.publish(g_last_twist)

if __name__ == '__main__':
  rospy.init_node('keys_to_twist')
  twist_pub = rospy.Publisher('cmd_vel', Twist, queue_size=1)
  rospy.Subscriber('keys', String, keys_cb, twist_pub)
  g_last_twist = Twist() # initializes to zero
  if rospy.has_param('~linear_scale'):
    g_vel_scales[1] = rospy.get_param('~linear_scale')
  else:
    rospy.logwarn("linear scale not provided; using %.1f" %\
                  g_vel_scales[1])

  if rospy.has_param('~angular_scale'):
    g_vel_scales[0] = rospy.get_param('~angular_scale')
  else:
    rospy.logwarn("angular scale not provided; using %.1f" %\
                  g_vel_scales[0])

  rate = rospy.Rate(10)
  while not rospy.is_shutdown():
    twist_pub.publish(g_last_twist)
    rate.sleep()</code>
                  </p>
                </div>
                <p id="p_000592">
                  <span class="text" id="span_001831" smilref="Programming_Robots_with_ROS00007.smil#span_001831">At startup, this program queries the parameter server using</span>
                  <code xml:space="preserve" id="code_000819" smilref="Programming_Robots_with_ROS00007.smil#code_000819">rospy.has_param()</code>
                  <span class="text" id="span_001832" smilref="Programming_Robots_with_ROS00007.smil#span_001832">and</span>
                  <code xml:space="preserve" id="code_000820" smilref="Programming_Robots_with_ROS00007.smil#code_000820">rospy.get_param()</code>
                  <span class="text" id="span_001833" smilref="Programming_Robots_with_ROS00007.smil#span_001833">, and outputs a warning if the specified parameter was not set:</span>
                </p>
                <p id="p_000593">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000821" smilref="Programming_Robots_with_ROS00007.smil#code_000821">  if rospy.has_param('~linear_scale'):
    g_vel_scales[1] = rospy.get_param('~linear_scale')
  else:
    rospy.logwarn("linear scale not provided; using %.1f" %\
                  g_vel_scales[1])</code>
                </p>
                <p id="p_000594">
                  <span class="text" id="span_001834" smilref="Programming_Robots_with_ROS00007.smil#span_001834">This warning is printed using the ROS logging system, which has a few benefits over a standard Python</span>
                  <code xml:space="preserve" id="code_000822" smilref="Programming_Robots_with_ROS00007.smil#code_000822">print()</code>
                  <span class="text" id="span_001835" smilref="Programming_Robots_with_ROS00007.smil#span_001835">call. First, the ROS logging calls, such as</span>
                  <code xml:space="preserve" id="code_000823" smilref="Programming_Robots_with_ROS00007.smil#code_000823">logwarn()</code>
                  <span class="text" id="span_001836" smilref="Programming_Robots_with_ROS00007.smil#span_001836">,</span>
                  <code xml:space="preserve" id="code_000824" smilref="Programming_Robots_with_ROS00007.smil#code_000824">loginfo()</code>
                  <span class="text" id="span_001837" smilref="Programming_Robots_with_ROS00007.smil#span_001837">, and</span>
                  <code xml:space="preserve" id="code_000825" smilref="Programming_Robots_with_ROS00007.smil#code_000825">logerror()</code>
                  <span class="text" id="span_001838" smilref="Programming_Robots_with_ROS00007.smil#span_001838">, print colorized text to the console. That may sound inconsequential, but it actually can be quite useful when watching or scrolling for warnings or errors in a noisy console stream. The ROS logging calls can also (optionally) be routed to a centralized console of warnings and errors, so that the warning and error streams from large, complex collections of nodes can be monitored more easily.</span>
                </p>
                <p id="p_000595">
                  <span class="text" id="span_001839" smilref="Programming_Robots_with_ROS00007.smil#span_001839">The warning text produced by</span>
                  <code xml:space="preserve" id="code_000826" smilref="Programming_Robots_with_ROS00007.smil#code_000826">rospy.logwarn()</code>
                  <span class="text" id="span_001840" smilref="Programming_Robots_with_ROS00007.smil#span_001840">also prepends a timestamp:</span>
                </p>
                <p id="p_000596">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000827" smilref="Programming_Robots_with_ROS00007.smil#code_000827">[WARN] [WallTime: 1429164125.989] linear scale not provided. Defaulting to 0.1
[WARN] [WallTime: 1429164125.989] angular scale not provided. Defaulting to 0.1</code>
                </p>
                <p id="p_000597">
                  <span class="text" id="span_001841" smilref="Programming_Robots_with_ROS00007.smil#span_001841">The</span>
                  <code xml:space="preserve" id="code_000828" smilref="Programming_Robots_with_ROS00007.smil#code_000828">get_param()</code>
                  <span class="text" id="span_001842" smilref="Programming_Robots_with_ROS00007.smil#span_001842">function optionally accepts a second parameter, serving as a default parameter when the parameter key is not available on the parameter server. In many cases, using this optional second parameter can shorten code and provides an appropriate level of functionality. For general-purpose nodes such as</span>
                  <code xml:space="preserve" id="code_000829" smilref="Programming_Robots_with_ROS00007.smil#code_000829">keys_to_twist.py</code>
                  <span class="text" id="span_001843" smilref="Programming_Robots_with_ROS00007.smil#span_001843">that want a parameter to be explicitly defined, however, using</span>
                  <code xml:space="preserve" id="code_000830" smilref="Programming_Robots_with_ROS00007.smil#code_000830">has_param()</code>
                  <span class="text" id="span_001844" smilref="Programming_Robots_with_ROS00007.smil#span_001844">to determine the existence of an explicit parameter definition can be useful.</span>
                </p>
                <p id="p_000598">
                  <span class="text" id="span_001845" smilref="Programming_Robots_with_ROS00007.smil#span_001845">The syntax to use</span>
                  <code xml:space="preserve" id="code_000831" smilref="Programming_Robots_with_ROS00007.smil#code_000831">keys_to_twist_parameterized.py</code>
                  <span class="text" id="span_001846" smilref="Programming_Robots_with_ROS00007.smil#span_001846">with explicit command-line parameters is as follows:</span>
                </p>
                <p id="p_000599">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000832" smilref="Programming_Robots_with_ROS00007.smil#code_000832">./keys_to_twist_parameterized.py _linear_scale:=0.5 _angular_scale:=0.4</code>
                </p>
                <p id="p_000600">
                  <span class="text" id="span_001847" smilref="Programming_Robots_with_ROS00007.smil#span_001847">The resulting stream of</span>
                  <code xml:space="preserve" id="code_000833" smilref="Programming_Robots_with_ROS00007.smil#code_000833">Twist</code>
                  <span class="text" id="span_001848" smilref="Programming_Robots_with_ROS00007.smil#span_001848">messages is scaled as expected: for example, pressing</span>
                  <em id="em_000267" smilref="Programming_Robots_with_ROS00007.smil#em_000267">w</em>
                  <span class="text" id="span_001849" smilref="Programming_Robots_with_ROS00007.smil#span_001849">(move forward) in the console running</span>
                  <code xml:space="preserve" id="code_000834" smilref="Programming_Robots_with_ROS00007.smil#code_000834">key_publisher.py</code>
                  <span class="text" id="span_001850" smilref="Programming_Robots_with_ROS00007.smil#span_001850">will result in a stream of these messages appearing in the</span>
                  <code xml:space="preserve" id="code_000835" smilref="Programming_Robots_with_ROS00007.smil#code_000835">rostopic echo cmd_vel</code>
                  <span class="text" id="span_001851" smilref="Programming_Robots_with_ROS00007.smil#span_001851">output:</span>
                </p>
                <p id="p_000601">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000836" smilref="Programming_Robots_with_ROS00007.smil#code_000836">linear:
  x: 0.5
  y: 0.0
  z: 0.0
angular:
  x: 0.0
  y: 0.0
  z: 0.0</code>
                </p>
                <p id="ch08-idp24260864" data-type="indexterm" data-startref="ix_8-teleop_bot-asciidoc5">
                  <span class="text" id="span_001852" smilref="Programming_Robots_with_ROS00007.smil#span_001852">Each time we launch</span>
                  <code xml:space="preserve" id="code_000837" smilref="Programming_Robots_with_ROS00007.smil#code_000837">keys_to_twist_parameterized.py</code>
                  <span class="text" id="span_001853" smilref="Programming_Robots_with_ROS00007.smil#span_001853">, we can specify the desired maximum velocities for our robot. Even more conveniently, we can put these parameters into launch files so that we don't have to remember them! But first, we need to deal with the physics problem of finite acceleration, which we will address in the next section.</span>
                </p>
              </div>
            </section>
            <section data-type="sect1" class="pagebreak-before" data-pdf-bookmark="Velocity Ramps" id="section_000094">
              <h1 id="h1_000157" smilref="Programming_Robots_with_ROS00007.smil#h1_000157">Velocity Ramps</h1>
              <div class="sect1" id="ch08-idp23944160">
                <p data-type="indexterm" data-primary="ramping" id="ch08-ix_8-teleop_bot-asciidoc8" data-secondary="velocity ramps for">
                  <span class="text" id="span_001854" smilref="Programming_Robots_with_ROS00007.smil#span_001854">Unfortunately, like all objects with mass, robots cannot start and stop instantaneously. Physics dictates that robots accelerate gradually over time. As a result, when a robot's wheel motors try to instantly jump to a wildly different velocity, typically something bad happens, such as skidding, belts slipping, "shuddering" as the robot repeatedly hits electrical current limits, or possibly even something breaking in the mechanical driveline. To avoid these problems, we should</span>
                  <em id="em_000268" smilref="Programming_Robots_with_ROS00007.smil#em_000268">ramp</em>
                  <span class="text" id="span_001855" smilref="Programming_Robots_with_ROS00007.smil#span_001855">our motion commands up and down over a finite amount of time. Often lower levels of robot firmware will enforce this, but in general, it's considered good practice not to send impossible commands to robots.</span>
                  <a data-type="xref" href="#ch08-keys_to_twist_with_ramps" external="false" id="a_000102" smilref="Programming_Robots_with_ROS00007.smil#a_000102">Example 8-5</a>
                  <span class="text" id="span_001856" smilref="Programming_Robots_with_ROS00007.smil#span_001856">applies ramps to the outgoing velocity stream, to limit the instantaneous accelerations that we are asking of the motors.</span>
                </p>
                <h1 id="h1_000158" smilref="Programming_Robots_with_ROS00007.smil#h1_000158">Example 8-5. keys_to_twist_with_ramps.py</h1>
                <div id="ch08-keys_to_twist_with_ramps" data-type="example">
                  <p id="p_000602">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_000838" smilref="Programming_Robots_with_ROS00007.smil#code_000838">#!/usr/bin/env python
import rospy
import math
from std_msgs.msg import String
from geometry_msgs.msg import Twist

key_mapping = { 'w': [ 0, 1], 'x': [ 0, -1],
                'a': [ 1, 0], 'd': [-1,  0],
                's': [ 0, 0] }
g_twist_pub = None
g_target_twist = None
g_last_twist = None
g_last_send_time = None
g_vel_scales = [0.1, 0.1] # default to very slow
g_vel_ramps = [1, 1] # units: meters per second^2

def ramped_vel(v_prev, v_target, t_prev, t_now, ramp_rate):
  # compute maximum velocity step
  step = ramp_rate * (t_now - t_prev).to_sec()
  sign = 1.0 if (v_target &gt; v_prev) else -1.0
  error = math.fabs(v_target - v_prev)
  if error &lt; step: # we can get there within this timestep-we're done.
    return v_target
  else:
    return v_prev + sign * step  # take a step toward the target

def ramped_twist(prev, target, t_prev, t_now, ramps):
  tw = Twist()
  tw.angular.z = ramped_vel(prev.angular.z, target.angular.z, t_prev,
                            t_now, ramps[0])
  tw.linear.x = ramped_vel(prev.linear.x, target.linear.x, t_prev,
                           t_now, ramps[1])
  return tw

def send_twist():
  global g_last_twist_send_time, g_target_twist, g_last_twist,\
         g_vel_scales, g_vel_ramps, g_twist_pub
  t_now = rospy.Time.now()
  g_last_twist = ramped_twist(g_last_twist, g_target_twist,
                              g_last_twist_send_time, t_now, g_vel_ramps)
  g_last_twist_send_time = t_now
  g_twist_pub.publish(g_last_twist)

def keys_cb(msg):
  global g_target_twist, g_last_twist, g_vel_scales
  if len(msg.data) == 0 or not key_mapping.has_key(msg.data[0]):
    return # unknown key
  vels = key_mapping[msg.data[0]]
  g_target_twist.angular.z = vels[0] * g_vel_scales[0]
  g_target_twist.linear.x  = vels[1] * g_vel_scales[1]

def fetch_param(name, default):
  if rospy.has_param(name):
    return rospy.get_param(name)
  else:
    print "parameter [%s] not defined. Defaulting to %.3f" % (name, default)
    return default

if __name__ == '__main__':
  rospy.init_node('keys_to_twist')
  g_last_twist_send_time = rospy.Time.now()
  g_twist_pub = rospy.Publisher('cmd_vel', Twist, queue_size=1)
  rospy.Subscriber('keys', String, keys_cb)
  g_target_twist = Twist() # initializes to zero
  g_last_twist = Twist()
  g_vel_scales[0] = fetch_param('~angular_scale', 0.1)
  g_vel_scales[1] = fetch_param('~linear_scale', 0.1)
  g_vel_ramps[0] = fetch_param('~angular_accel', 1.0)
  g_vel_ramps[1] = fetch_param('~linear_accel', 1.0)

  rate = rospy.Rate(20)
  while not rospy.is_shutdown():
    send_twist()
    rate.sleep()</code>
                  </p>
                </div>
                <p class="pagebreak-before" id="p_000603">
                  <span class="text" id="span_001857" smilref="Programming_Robots_with_ROS00007.smil#span_001857">The code is a bit more complex, but the main lines of interest are in the</span>
                  <code xml:space="preserve" id="code_000839" smilref="Programming_Robots_with_ROS00007.smil#code_000839">ramped_vel()</code>
                  <span class="text" id="span_001858" smilref="Programming_Robots_with_ROS00007.smil#span_001858">function, where the velocity is computed under the acceleration constraint provided as a parameter. Each time it is called, this function takes a step toward the target velocity, or, if the target velocity is within one step away, it goes directly to it:</span>
                </p>
                <p id="p_000604">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000840" smilref="Programming_Robots_with_ROS00007.smil#code_000840">def ramped_vel(v_prev, v_target, t_prev, t_now, ramp_rate):
  # compute maximum velocity step
  step = ramp_rate * (t_now - t_prev).to_sec()
  sign = 1.0 if (v_target &gt; v_prev) else -1.0
  error = math.fabs(v_target - v_prev)
  if error &lt; step: # we can get there within this timestep-we're done.
    return v_target
  else:
    return v_prev + sign * step  # take a step toward the target</code>
                </p>
                <p id="p_000605" smilref="Programming_Robots_with_ROS00007.smil#p_000605">At the command line, the following incantation of our teleop program will produce reasonable behavior for the Turtlebot:</p>
                <p id="p_000606">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000841"><span class="text" id="span_001859" smilref="Programming_Robots_with_ROS00007.smil#span_001859">
user@hostname$ </span><strong id="strong_000088" smilref="Programming_Robots_with_ROS00008.smil#strong_000088">./keys_to_twist_with_ramps.py _linear_scale:=0.5\
    _angular_scale:=1.0_linear_accel:=1.0 _angular_accel:=1.0</strong>
</code>
                </p>
                <p id="p_000607">
                  <span class="text" id="span_001860" smilref="Programming_Robots_with_ROS00008.smil#span_001860">The motion commands we are sending the Turtlebot are now physically possible to achieve, as shown in</span>
                  <a data-type="xref" href="#ch08-velocity_ramps" external="false" id="a_000103" smilref="Programming_Robots_with_ROS00008.smil#a_000103">Figure 8-2</a>
                  <span class="text" id="span_001861" smilref="Programming_Robots_with_ROS00008.smil#span_001861">, since they take nonzero time to ramp up and down. Using the</span>
                  <code xml:space="preserve" id="code_000842" smilref="Programming_Robots_with_ROS00008.smil#code_000842">rqt_plot</code>
                  <span class="text" id="span_001862" smilref="Programming_Robots_with_ROS00008.smil#span_001862">program as shown previously, we can generate a live plot of the system:</span>
                </p>
                <p id="p_000608">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000843"><span class="text" id="span_001863" smilref="Programming_Robots_with_ROS00008.smil#span_001863">
user@hostname$ </span><strong id="strong_000089" smilref="Programming_Robots_with_ROS00008.smil#strong_000089">rqt_plot cmd_vel/linear/x cmd_vel/angular/z</strong>
</code>
                </p>
                <figure id="figure_000022">
                  <h1 id="h1_000159" smilref="Programming_Robots_with_ROS00008.smil#h1_000159">Figure 8-2. The velocity commands in this plot ramp up and down over finite time, allowing this trajectory to be physically achievable</h1>
                  <div id="ch08-velocity_ramps" class="figure">
                    <img src="images/prwr_0802.jpg" alt="with_ramps" id="img_000052" />
                  </div>
                </figure>
                <p class="pagebreak-before" id="ch08-idp25095424" data-type="indexterm" data-startref="ix_8-teleop_bot-asciidoc8" smilref="Programming_Robots_with_ROS00008.smil#ch08-idp25095424">To reiterate: even if we were to give instantaneously changing or "step" commands to the Turtlebot, somewhere in the signal path, or in the physics of the mechanical system, the step commands would be slowed into ramps. The advantage to doing this in higher-level software is that there is simply more visibility into what is happening, and hence a better understanding of the behavior of the system.</p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Let's Drive!" id="section_000095">
              <h1 id="h1_000160" smilref="Programming_Robots_with_ROS00008.smil#h1_000160">Let's Drive!</h1>
              <div class="sect1" id="ch08-idp24262144">
                <p data-type="indexterm" data-primary="teleop-bot" data-secondary="driving" id="ch08-idp25097056">
                  <span class="text" id="span_001864" smilref="Programming_Robots_with_ROS00008.smil#span_001864">Now that we have reasonable</span>
                  <code xml:space="preserve" id="code_000844" smilref="Programming_Robots_with_ROS00008.smil#code_000844">Twist</code>
                  <span class="text" id="span_001865" smilref="Programming_Robots_with_ROS00008.smil#span_001865">messages streaming from our teleop program over the</span>
                  <code xml:space="preserve" id="code_000845" smilref="Programming_Robots_with_ROS00008.smil#code_000845">cmd_vel</code>
                  <span class="text" id="span_001866" smilref="Programming_Robots_with_ROS00008.smil#span_001866">topic, we can drive some robots. Let's start by driving a Turtlebot. Thanks to the magic of robot simulation, we can get a Turtlebot up and running with a single command:</span>
                </p>
                <p id="p_000609">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000846"><span class="text" id="span_001867" smilref="Programming_Robots_with_ROS00008.smil#span_001867">
user@hostname$ </span><strong id="strong_000090" smilref="Programming_Robots_with_ROS00008.smil#strong_000090">roslaunch turtlebot_gazebo turtlebot_world.launch</strong>
</code>
                </p>
                <p id="p_000610">
                  <span class="text" id="span_001868" smilref="Programming_Robots_with_ROS00008.smil#span_001868">This will launch a Gazebo instance with a world similar to that shown in</span>
                  <a data-type="xref" href="#ch08-turtlebot_gazebo" external="false" id="a_000104" smilref="Programming_Robots_with_ROS00008.smil#a_000104">Figure 8-3</a>
                  <span class="text" id="span_001869" smilref="Programming_Robots_with_ROS00008.smil#span_001869">, as well as emulating the software and firmware of the Turtlebot behind the scenes.</span>
                </p>
                <figure id="figure_000023">
                  <h1 id="h1_000161" smilref="Programming_Robots_with_ROS00008.smil#h1_000161">Figure 8-3. A snapshot of a simulated Turtlebot in front of a bookcase in the Gazebo simulator</h1>
                  <div id="ch08-turtlebot_gazebo" class="figure">
                    <img src="images/prwr_0803.jpg" alt="Turtlebot in Gazebo" id="img_000053" />
                  </div>
                </figure>
                <p class="pagebreak-before" id="p_000611">
                  <span class="text" id="span_001870" smilref="Programming_Robots_with_ROS00008.smil#span_001870">Next, we want to run our teleop program, which broadcasts</span>
                  <code xml:space="preserve" id="code_000847" smilref="Programming_Robots_with_ROS00008.smil#code_000847">Twist</code>
                  <span class="text" id="span_001871" smilref="Programming_Robots_with_ROS00008.smil#span_001871">messages on the</span>
                  <code xml:space="preserve" id="code_000848" smilref="Programming_Robots_with_ROS00008.smil#code_000848">cmd_vel</code>
                  <span class="text" id="span_001872" smilref="Programming_Robots_with_ROS00008.smil#span_001872">topic:</span>
                </p>
                <p id="p_000612">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000849"><span class="text" id="span_001873" smilref="Programming_Robots_with_ROS00008.smil#span_001873">
user@hostname$ </span><strong id="strong_000091" smilref="Programming_Robots_with_ROS00008.smil#strong_000091">./keys_to_twist_with_ramps.py </strong>
</code>
                </p>
                <p id="p_000613">
                  <span class="text" id="span_001874" smilref="Programming_Robots_with_ROS00008.smil#span_001874">However, if we do this, it won't work! Why? Because the Turtlebot looks for its</span>
                  <code xml:space="preserve" id="code_000850" smilref="Programming_Robots_with_ROS00008.smil#code_000850">Twist</code>
                  <span class="text" id="span_001875" smilref="Programming_Robots_with_ROS00008.smil#span_001875">motion messages on a different topic. This is an extremely common problem to debug in distributed robotic software systems, or in any large software system, for that matter. We will describe a variety of tools for debugging these types of problems in a later chapter. For now, however, to make the Turtlebot simulator work, we need to publish</span>
                  <code xml:space="preserve" id="code_000851" smilref="Programming_Robots_with_ROS00008.smil#code_000851">Twist</code>
                  <span class="text" id="span_001876" smilref="Programming_Robots_with_ROS00008.smil#span_001876">messages to a topic named</span>
                  <code xml:space="preserve" id="code_000852" smilref="Programming_Robots_with_ROS00008.smil#code_000852">cmd_vel_mux/input/teleop</code>
                  <span class="text" id="span_001877" smilref="Programming_Robots_with_ROS00008.smil#span_001877">. That is, we need to</span>
                  <em id="em_000269" smilref="Programming_Robots_with_ROS00008.smil#em_000269">remap</em>
                  <span class="text" id="span_001878" smilref="Programming_Robots_with_ROS00008.smil#span_001878">our</span>
                  <code xml:space="preserve" id="code_000853" smilref="Programming_Robots_with_ROS00008.smil#code_000853">cmd_vel</code>
                  <span class="text" id="span_001879" smilref="Programming_Robots_with_ROS00008.smil#span_001879">message so that they are published on that topic instead. We can use the ROS remapping syntax to do this on the command line, without changing our source code:</span>
                </p>
                <p id="p_000614">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000854"><span class="text" id="span_001880" smilref="Programming_Robots_with_ROS00008.smil#span_001880">
user@hostname$ </span><strong id="strong_000092" smilref="Programming_Robots_with_ROS00008.smil#strong_000092">./keys_to_twist_with_ramps.py cmd_vel:=cmd_vel_mux/input/teleop</strong>
</code>
                </p>
                <p id="p_000615">
                  <span class="text" id="span_001881" smilref="Programming_Robots_with_ROS00008.smil#span_001881">We can now drive the Turtlebot around in Gazebo using the</span>
                  <em id="em_000270" smilref="Programming_Robots_with_ROS00008.smil#em_000270">w</em>
                  <span class="text" id="span_001882" smilref="Programming_Robots_with_ROS00008.smil#span_001882">,</span>
                  <em id="em_000271" smilref="Programming_Robots_with_ROS00008.smil#em_000271">a</em>
                  <span class="text" id="span_001883" smilref="Programming_Robots_with_ROS00008.smil#span_001883">,</span>
                  <em id="em_000272" smilref="Programming_Robots_with_ROS00008.smil#em_000272">s</em>
                  <span class="text" id="span_001884" smilref="Programming_Robots_with_ROS00008.smil#span_001884">,</span>
                  <em id="em_000273" smilref="Programming_Robots_with_ROS00008.smil#em_000273">d</em>
                  <span class="text" id="span_001885" smilref="Programming_Robots_with_ROS00008.smil#span_001885">,</span>
                  <em id="em_000274" smilref="Programming_Robots_with_ROS00008.smil#em_000274">x</em>
                  <span class="text" id="span_001886" smilref="Programming_Robots_with_ROS00008.smil#span_001886">buttons on the keyboard. Hooray!</span>
                </p>
                <p id="p_000616">
                  <span class="text" id="span_001887" smilref="Programming_Robots_with_ROS00008.smil#span_001887">This style of teleoperation is similar to how remote-controlled cars work: the teleoperator maintains line-of-sight with the robot, sends motion commands, observes how they affect the robot and its environment, and reacts accordingly. However, it is often impossible or undesirable to maintain line-of-sight contact with the robot. This requires the teleoperator to visualize the robot's sensors and see the world through the "eyes" of the robot. ROS provides several tools to simplify development of such systems, including</span>
                  <code xml:space="preserve" id="code_000855" smilref="Programming_Robots_with_ROS00008.smil#code_000855">rviz</code>
                  <span class="text" id="span_001888" smilref="Programming_Robots_with_ROS00008.smil#span_001888">, which will be described in the following section.</span>
                </p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="rviz" id="section_000096">
              <h1 id="h1_000162" smilref="Programming_Robots_with_ROS00008.smil#h1_000162">rviz</h1>
              <div class="sect1" id="ch08-idp25096656">
                <p data-type="indexterm" data-primary="rviz (ROS visualization)" id="ch08-ix_8-teleop_bot-asciidoc11" data-secondary="rviz for">
                  <code xml:space="preserve" id="code_000856" smilref="Programming_Robots_with_ROS00008.smil#code_000856">rviz</code>
                  <span class="text" id="span_001889" smilref="Programming_Robots_with_ROS00008.smil#span_001889">stands for</span>
                  <em id="ch08-ix_8-teleop_bot-asciidoc12" smilref="Programming_Robots_with_ROS00008.smil#ch08-ix_8-teleop_bot-asciidoc12">ROS visualization</em>
                  <span class="text" id="span_001890" smilref="Programming_Robots_with_ROS00008.smil#span_001890">. It is a general-purpose 3D visualization environment for robots, sensors, and algorithms. Like most ROS tools, it can be used for any robot and rapidly configured for a particular application. For teleoperation, we want to be able to see the camera feed of the robot. First, we will start from the configuration described in the previous section, where we have four terminals open: one for</span>
                  <code xml:space="preserve" id="code_000857" smilref="Programming_Robots_with_ROS00008.smil#code_000857">roscore</code>
                  <span class="text" id="span_001891" smilref="Programming_Robots_with_ROS00008.smil#span_001891">, one for the keyboard driver, one for</span>
                  <code xml:space="preserve" id="code_000858" smilref="Programming_Robots_with_ROS00008.smil#code_000858">keys_to_teleop_with_rates.py</code>
                  <span class="text" id="span_001892" smilref="Programming_Robots_with_ROS00008.smil#span_001892">, and one that ran a</span>
                  <code xml:space="preserve" id="code_000859" smilref="Programming_Robots_with_ROS00008.smil#code_000859">roslaunch</code>
                  <span class="text" id="span_001893" smilref="Programming_Robots_with_ROS00008.smil#span_001893">script to bring up Gazebo and a simulated TurtleBot. Now, we'll need a fifth console to run</span>
                  <code xml:space="preserve" id="code_000860" smilref="Programming_Robots_with_ROS00008.smil#code_000860">rviz</code>
                  <span class="text" id="span_001894" smilref="Programming_Robots_with_ROS00008.smil#span_001894">, which is in its own package, also called</span>
                  <code xml:space="preserve" id="code_000861" smilref="Programming_Robots_with_ROS00008.smil#code_000861">rviz</code>
                  <span class="text" id="span_001895" smilref="Programming_Robots_with_ROS00008.smil#span_001895">:</span>
                </p>
                <p id="p_000617">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000862"><span class="text" id="span_001896" smilref="Programming_Robots_with_ROS00008.smil#span_001896">
user@hostname$ </span><strong id="strong_000093" smilref="Programming_Robots_with_ROS00008.smil#strong_000093">rosrun rviz rviz</strong>
</code>
                </p>
                <p data-type="indexterm" data-primary="frame of reference" id="ch08-idp25125056" data-secondary="odom topic">
                  <code xml:space="preserve" id="code_000863" smilref="Programming_Robots_with_ROS00008.smil#code_000863">rviz</code>
                  <span class="text" id="span_001897" smilref="Programming_Robots_with_ROS00008.smil#span_001897">can plot a variety of data types streaming through a typical ROS system, with heavy emphasis on the three-dimensional nature of the data. In ROS, all forms of data are attached to a</span>
                  <em id="em_000275" smilref="Programming_Robots_with_ROS00008.smil#em_000275">frame of reference</em>
                  <span class="text" id="span_001898" smilref="Programming_Robots_with_ROS00008.smil#span_001898">. For example, the camera on a Turtlebot is attached to a reference frame defined relative to the center of the Turtlebot's mobile base. The</span>
                  <em id="ch08-idp25126304" smilref="Programming_Robots_with_ROS00008.smil#ch08-idp25126304">odometry</em>
                  <span class="text" id="span_001899" smilref="Programming_Robots_with_ROS00008.smil#span_001899">reference frame, often called</span>
                  <code id="ch08-idp25127008" xml:space="preserve" smilref="Programming_Robots_with_ROS00008.smil#ch08-idp25127008">odom</code>
                  <span class="text" id="span_001900" smilref="Programming_Robots_with_ROS00008.smil#span_001900">, is taken by convention to have its origin at the location where the robot was powered on, or where its odometers were most recently reset. Each of these frames can be useful for teleoperation, but it is often desirable to have a "chase" perspective, which is immediately behind the robot and looking over its "shoulders." This is because simply viewing the robot's camera frame can be deceiving--the field of view of a camera is often much narrower than we are used to as humans, and thus it is easy for teleoperators to bonk the robot's shoulders when turning corners. A sample view of</span>
                  <code xml:space="preserve" id="code_000864" smilref="Programming_Robots_with_ROS00008.smil#code_000864">rviz</code>
                  <span class="text" id="span_001901" smilref="Programming_Robots_with_ROS00008.smil#span_001901">configured to generate a chase perspective is shown in</span>
                  <a data-type="xref" href="#ch08-intro_rviz_depth_and_image" external="false" id="a_000105" smilref="Programming_Robots_with_ROS00008.smil#a_000105">Figure 8-4</a>
                  <span class="text" id="span_001902" smilref="Programming_Robots_with_ROS00008.smil#span_001902">. Observing the sensor data in the same 3D view as a rendering of the robot's geometry can make teleoperation more intuitive.</span>
                </p>
                <p id="p_000618">
                  <span class="text" id="span_001903" smilref="Programming_Robots_with_ROS00008.smil#span_001903">Like many complex graphical user interfaces (GUIs),</span>
                  <code xml:space="preserve" id="code_000865" smilref="Programming_Robots_with_ROS00008.smil#code_000865">rviz</code>
                  <span class="text" id="span_001904" smilref="Programming_Robots_with_ROS00008.smil#span_001904">has a number of</span>
                  <em id="em_000276" smilref="Programming_Robots_with_ROS00008.smil#em_000276">panels</em>
                  <span class="text" id="span_001905" smilref="Programming_Robots_with_ROS00008.smil#span_001905">and</span>
                  <em id="em_000277" smilref="Programming_Robots_with_ROS00008.smil#em_000277">plugins</em>
                  <span class="text" id="span_001906" smilref="Programming_Robots_with_ROS00008.smil#span_001906">that can be configured as needed for a given task. Configuring</span>
                  <code xml:space="preserve" id="code_000866" smilref="Programming_Robots_with_ROS00008.smil#code_000866">rviz</code>
                  <span class="text" id="span_001907" smilref="Programming_Robots_with_ROS00008.smil#span_001907">can take some time and effort, so the</span>
                  <em id="em_000278" smilref="Programming_Robots_with_ROS00008.smil#em_000278">state</em>
                  <span class="text" id="span_001908" smilref="Programming_Robots_with_ROS00008.smil#span_001908">of the visualization can be saved to configuration files for later reuse. Additionally, when closing</span>
                  <code xml:space="preserve" id="code_000867" smilref="Programming_Robots_with_ROS00008.smil#code_000867">rviz</code>
                  <span class="text" id="span_001909" smilref="Programming_Robots_with_ROS00008.smil#span_001909">, by default the program will save its configuration to a special local file; the next time</span>
                  <code xml:space="preserve" id="code_000868" smilref="Programming_Robots_with_ROS00008.smil#code_000868">rviz</code>
                  <span class="text" id="span_001910" smilref="Programming_Robots_with_ROS00008.smil#span_001910">is run, it will then instantiate and configure the same panels and plugins.</span>
                </p>
                <p id="p_000619">
                  <span class="text" id="span_001911" smilref="Programming_Robots_with_ROS00008.smil#span_001911">The default, unconfigured</span>
                  <code xml:space="preserve" id="code_000869" smilref="Programming_Robots_with_ROS00008.smil#code_000869">rviz</code>
                  <span class="text" id="span_001912" smilref="Programming_Robots_with_ROS00008.smil#span_001912">window will appear as shown in</span>
                  <a data-type="xref" href="#ch08-rviz_default" external="false" id="a_000106" smilref="Programming_Robots_with_ROS00008.smil#a_000106">Figure 8-5</a>
                  <span class="text" id="span_001913" smilref="Programming_Robots_with_ROS00008.smil#span_001913">. It can be disconcerting at first, since there is nothing there! In the next few pages, we will show how to add various streams to</span>
                  <code xml:space="preserve" id="code_000870" smilref="Programming_Robots_with_ROS00008.smil#code_000870">rviz</code>
                  <span class="text" id="span_001914" smilref="Programming_Robots_with_ROS00008.smil#span_001914">to end up with the visualization shown in</span>
                  <a data-type="xref" href="#ch08-intro_rviz_depth_and_image" external="false" id="a_000107" smilref="Programming_Robots_with_ROS00008.smil#a_000107">Figure 8-4</a>
                  <span class="text" id="span_001915" smilref="Programming_Robots_with_ROS00008.smil#span_001915">.</span>
                </p>
                <p data-type="indexterm" data-primary="rviz (ROS visualization)" data-secondary="frame of reference for" id="ch08-idp25138208">
                  <span class="text" id="span_001916" smilref="Programming_Robots_with_ROS00008.smil#span_001916">The first task is to choose the frame of reference for the visualization. In our case, we want a visualization perspective that is attached to the robot, so we can follow the robot as it drives around. On any given robot, there are many possible frames of reference, such as the center of the mobile base, various links of the robot's structure, or even a wheel (note that this frame would continually flip around and around, making it rather dizzying as a vantage point for</span>
                  <code xml:space="preserve" id="code_000871" smilref="Programming_Robots_with_ROS00008.smil#code_000871">rviz</code>
                  <span class="text" id="span_001917" smilref="Programming_Robots_with_ROS00008.smil#span_001917">). For the purposes of teleoperation, we will select a frame of reference attached to the optical center of the Kinect depth camera on the Turtlebot. To do this, click in the table cell to the right of the "Fixed Frame" row in the upper-left panel of</span>
                  <code xml:space="preserve" id="code_000872" smilref="Programming_Robots_with_ROS00008.smil#code_000872">rviz</code>
                  <span class="text" id="span_001918" smilref="Programming_Robots_with_ROS00008.smil#span_001918">. This will pop up the menu shown in the following screenshot, which contains all transform frames currently broadcasting in this ROS system. For now, select</span>
                  <code xml:space="preserve" id="code_000873" smilref="Programming_Robots_with_ROS00008.smil#code_000873">camera_depth_frame</code>
                  <span class="text" id="span_001919" smilref="Programming_Robots_with_ROS00008.smil#span_001919">in the pop-up menu, as shown in</span>
                  <a data-type="xref" href="#ch08-rviz_frame_menu" external="false" id="a_000108" smilref="Programming_Robots_with_ROS00008.smil#a_000108">Figure 8-6</a>
                  <span class="text" id="span_001920" smilref="Programming_Robots_with_ROS00008.smil#span_001920">. Selecting the fixed frame for visualization is one of the most important configuration steps of</span>
                  <code xml:space="preserve" id="code_000874" smilref="Programming_Robots_with_ROS00008.smil#code_000874">rviz</code>
                  <span class="text" id="span_001921" smilref="Programming_Robots_with_ROS00008.smil#span_001921">.</span>
                </p>
                <figure id="figure_000024">
                  <h1 id="h1_000163" smilref="Programming_Robots_with_ROS00008.smil#h1_000163">Figure 8-4. rviz configured to render the Turtlebot geometry as well as its depth camera and 2D image data</h1>
                  <div id="ch08-intro_rviz_depth_and_image" class="figure">
                    <img src="images/prwr_0804.jpg" alt="rviz_depth_and_image" id="img_000054" />
                  </div>
                </figure>
                <figure id="figure_000025">
                  <h1 id="h1_000164" smilref="Programming_Robots_with_ROS00008.smil#h1_000164">Figure 8-5. The initial state of rviz, before any visualization panels have been added to the configuration</h1>
                  <div id="ch08-rviz_default" class="figure">
                    <img src="images/prwr_0805.jpg" alt="rviz_unconfigured" id="img_000055" />
                  </div>
                </figure>
                <figure id="figure_000026">
                  <h1 id="h1_000165" smilref="Programming_Robots_with_ROS00008.smil#h1_000165">Figure 8-6. The fixed frame pop-up menu</h1>
                  <div id="ch08-rviz_frame_menu" class="figure">
                    <img src="images/prwr_0806.jpg" alt="rviz_with_fixed_frame_menu" id="img_000056" />
                  </div>
                </figure>
                <p data-type="indexterm" data-primary="robot model plugin" id="ch08-idp25149760">
                  <span class="text" id="span_001922" smilref="Programming_Robots_with_ROS00008.smil#span_001922">Next, we want to view the 3D model of the robot. To accomplish this, we will insert an instance of the</span>
                  <em id="em_000279" smilref="Programming_Robots_with_ROS00008.smil#em_000279">robot model</em>
                  <span class="text" id="span_001923" smilref="Programming_Robots_with_ROS00008.smil#span_001923">plugin. Although the Turtlebot has no moving parts (other than its wheels) that we need to visualize, it is still useful to see a rendering of the robot to improve situational awareness and a get sense of scale for teleoperation. To add the robot model to the</span>
                  <code xml:space="preserve" id="code_000875" smilref="Programming_Robots_with_ROS00008.smil#code_000875">rviz</code>
                  <span class="text" id="span_001924" smilref="Programming_Robots_with_ROS00008.smil#span_001924">scene, click the "Add" button on the lefthand side of the</span>
                  <code xml:space="preserve" id="code_000876" smilref="Programming_Robots_with_ROS00008.smil#code_000876">rviz</code>
                  <span class="text" id="span_001925" smilref="Programming_Robots_with_ROS00008.smil#span_001925">window, approximately halfway down. This will bring up a dialog box, shown in</span>
                  <a data-type="xref" href="#ch08-rviz_datatypes" external="false" id="a_000109" smilref="Programming_Robots_with_ROS00008.smil#a_000109">Figure 8-7</a>
                  <span class="text" id="span_001926" smilref="Programming_Robots_with_ROS00008.smil#span_001926">, that contains all of the available</span>
                  <code xml:space="preserve" id="code_000877" smilref="Programming_Robots_with_ROS00008.smil#code_000877">rviz</code>
                  <span class="text" id="span_001927" smilref="Programming_Robots_with_ROS00008.smil#span_001927">plugins for various data types.</span>
                </p>
                <figure id="figure_000027">
                  <h1 id="h1_000166" smilref="Programming_Robots_with_ROS00008.smil#h1_000166">Figure 8-7. rviz dialog box used to select the data type that is currently being added to the visualization</h1>
                  <div id="ch08-rviz_datatypes" class="figure">
                    <img src="images/prwr_0807.jpg" alt="rviz_datatypes" id="img_000057" />
                  </div>
                </figure>
                <p id="p_000620">
                  <span class="text" id="span_001928" smilref="Programming_Robots_with_ROS00008.smil#span_001928">From this dialog box, select "RobotModel" and then click "OK". Plugin instances appear in the tree-view control at the left of the</span>
                  <code xml:space="preserve" id="code_000878" smilref="Programming_Robots_with_ROS00008.smil#code_000878">rviz</code>
                  <span class="text" id="span_001929" smilref="Programming_Robots_with_ROS00008.smil#span_001929">window. To configure a plugin, ensure it is expanded in the tree view. Its configurable parameters can then be edited. For the Robot Model plugin, the only configuration typically required is to enter the name of the robot model on the parameter server. However, since the ROS convention is for this to be called</span>
                  <code xml:space="preserve" id="code_000879" smilref="Programming_Robots_with_ROS00008.smil#code_000879">robot_description</code>
                  <span class="text" id="span_001930" smilref="Programming_Robots_with_ROS00008.smil#span_001930">, this is autofilled and typically "just works" for single-robot applications. This will produce an</span>
                  <code xml:space="preserve" id="code_000880" smilref="Programming_Robots_with_ROS00008.smil#code_000880">rviz</code>
                  <span class="text" id="span_001931" smilref="Programming_Robots_with_ROS00008.smil#span_001931">visualization similar to that shown in</span>
                  <a data-type="xref" href="#ch08-rviz_turtlebot_model" external="false" id="a_000110" smilref="Programming_Robots_with_ROS00008.smil#a_000110">Figure 8-8</a>
                  <span class="text" id="span_001932" smilref="Programming_Robots_with_ROS00008.smil#span_001932">, which is centered on a model of the Turtlebot.</span>
                </p>
                <figure id="figure_000028">
                  <h1 id="h1_000167" smilref="Programming_Robots_with_ROS00008.smil#h1_000167">Figure 8-8. A Turtlebot model added to rviz</h1>
                  <div id="ch08-rviz_turtlebot_model" class="figure">
                    <img src="images/prwr_0808.jpg" alt="rviz_turtlebot_model" id="img_000058" />
                  </div>
                </figure>
                <p class="keep-together" data-type="indexterm" data-primary="PointCloud2 plugin" id="ch08-idp25162048">
                  <span class="text" id="span_001933" smilref="Programming_Robots_with_ROS00008.smil#span_001933">In order to teleoperate the Turtlebot reasonably, we need to plot its sensors. To plot the depth image from the Kinect camera on the Turtlebot, click "Add" and then select "PointCloud2" from the plugin dialog box, near the lower-left corner of</span>
                  <code xml:space="preserve" id="code_000881" smilref="Programming_Robots_with_ROS00008.smil#code_000881">rviz</code>
                  <span class="text" id="span_001934" smilref="Programming_Robots_with_ROS00008.smil#span_001934">. The PointCloud2 plugin has quite a few options to configure in the tree-view control in the left pane of</span>
                  <code xml:space="preserve" id="code_000882" smilref="Programming_Robots_with_ROS00008.smil#code_000882">rviz</code>
                  <span class="text" id="span_001935" smilref="Programming_Robots_with_ROS00008.smil#span_001935">. Most importantly, we need to tell the plugin which topic should be plotted. Click the space to the right of the "Topic" label, and a drop-down box will appear, showing the PointCloud2 topics currently visible on the system. Select /camera/depth/points, and the Turtlebot's point cloud should be visible, as shown in</span>
                  <a data-type="xref" href="#ch08-rviz_kinect_bookshelf" external="false" id="a_000111" smilref="Programming_Robots_with_ROS00008.smil#a_000111">Figure 8-9</a>
                  <span class="text" id="span_001936" smilref="Programming_Robots_with_ROS00008.smil#span_001936">.</span>
                </p>
                <p data-type="indexterm" data-primary="cameras" data-secondary="Kinect" id="ch08-idp25165424">
                  <span class="text" id="span_001937" smilref="Programming_Robots_with_ROS00008.smil#span_001937">The Kinect camera on the Turtlebot also produces a color image output, in addition to its depth image. Sometimes it can be useful for teleoperation to render both the image and the point cloud.</span>
                  <code xml:space="preserve" id="code_000883" smilref="Programming_Robots_with_ROS00008.smil#code_000883">rviz</code>
                  <span class="text" id="span_001938" smilref="Programming_Robots_with_ROS00008.smil#span_001938">provides a plugin for this. Click "Add" near the lower-left corner of</span>
                  <code id="ch08-idp25166592" xml:space="preserve" smilref="Programming_Robots_with_ROS00008.smil#ch08-idp25166592">rviz</code>
                  <span class="text" id="span_001939" smilref="Programming_Robots_with_ROS00008.smil#span_001939">, and then select "Image" from the plugin dialog box. As usual, this will instantiate the plugin, and now we need to configure it. Click on the whitespace to the right of the "Image Topic" label of the Image plugin property tree, and then select</span>
                  <code xml:space="preserve" id="code_000884" smilref="Programming_Robots_with_ROS00008.smil#code_000884">/camera/rgb/image_raw</code>
                  <span class="text" id="span_001940" smilref="Programming_Robots_with_ROS00008.smil#span_001940">. The camera stream from the Turtlebot should then be plotted in the left pane of</span>
                  <code xml:space="preserve" id="code_000885" smilref="Programming_Robots_with_ROS00008.smil#code_000885">rviz</code>
                  <span class="text" id="span_001941" smilref="Programming_Robots_with_ROS00008.smil#span_001941">, as shown in</span>
                  <a data-type="xref" href="#ch08-rviz_depth_and_image" external="false" id="a_000112" smilref="Programming_Robots_with_ROS00008.smil#a_000112">Figure 8-10</a>
                  <span class="text" id="span_001942" smilref="Programming_Robots_with_ROS00008.smil#span_001942">.</span>
                </p>
                <figure id="figure_000029">
                  <h1 id="h1_000168" smilref="Programming_Robots_with_ROS00008.smil#h1_000168">Figure 8-9. The Turtlebot's depth camera data has been added to the visualization</h1>
                  <div id="ch08-rviz_kinect_bookshelf" class="figure">
                    <img src="images/prwr_0809.jpg" alt="rviz_kinect_bookshelf" id="img_000059" />
                  </div>
                </figure>
                <figure id="figure_000030">
                  <h1 id="h1_000169" smilref="Programming_Robots_with_ROS00008.smil#h1_000169">Figure 8-10. The camera image in the lower-left corner has been added to the visualization, allowing teleoperators to see the first-person perspective as well as the third-person perspective of the main window</h1>
                  <div id="ch08-rviz_depth_and_image" class="figure">
                    <img src="images/prwr_0804.jpg" alt="rviz_depth_and_image" id="img_000060" />
                  </div>
                </figure>
                <p id="p_000621">
                  <span class="text" id="span_001943" smilref="Programming_Robots_with_ROS00008.smil#span_001943">The</span>
                  <code xml:space="preserve" id="code_000886" smilref="Programming_Robots_with_ROS00008.smil#code_000886">rviz</code>
                  <span class="text" id="span_001944" smilref="Programming_Robots_with_ROS00008.smil#span_001944">interface is panelized and thus can be easily modified to suit the needs of the application. For example, we can drag the Image panel to the righthand column of the</span>
                  <code xml:space="preserve" id="code_000887" smilref="Programming_Robots_with_ROS00008.smil#code_000887">rviz</code>
                  <span class="text" id="span_001945" smilref="Programming_Robots_with_ROS00008.smil#span_001945">window and resize it so that the depth image and camera image are similarly sized. We can then rotate the 3D visualization so that it is looking at the point cloud data from the side, which could be useful in some situations. An example panel configuration is shown in</span>
                  <a data-type="xref" href="#ch08-rviz_side_by_side" external="false" id="a_000113" smilref="Programming_Robots_with_ROS00008.smil#a_000113">Figure 8-11</a>
                  <span class="text" id="span_001946" smilref="Programming_Robots_with_ROS00008.smil#span_001946">.</span>
                </p>
                <figure id="figure_000031">
                  <h1 id="h1_000170" smilref="Programming_Robots_with_ROS00008.smil#h1_000170">Figure 8-11. rviz panels can be dragged around to create different arrangements--here, the left panel has the third-person renderings of the depth camera data, and the visual camera is shown in the right panel</h1>
                  <div id="ch08-rviz_side_by_side" class="figure">
                    <img src="images/prwr_0811.jpg" alt="rviz_from_side" id="img_000061" />
                  </div>
                </figure>
                <p id="p_000622">
                  <span class="text" id="span_001947" smilref="Programming_Robots_with_ROS00008.smil#span_001947">Alternatively, we can rotate the 3D scene so that it has a top-down perspective, which can be useful for driving in tight quarters. An example of this "bird's-eye" perspective is shown in</span>
                  <a data-type="xref" href="#ch08-rviz_topdown" external="false" id="a_000114" smilref="Programming_Robots_with_ROS00008.smil#a_000114">Figure 8-12</a>
                  <span class="text" id="span_001948" smilref="Programming_Robots_with_ROS00008.smil#span_001948">.</span>
                </p>
                <p id="ch08-idp25182480" data-type="indexterm" data-startref="ix_8-teleop_bot-asciidoc11">
                  <span class="text" id="span_001949" smilref="Programming_Robots_with_ROS00008.smil#span_001949">These examples just scratch the surface of what</span>
                  <code xml:space="preserve" id="code_000888" smilref="Programming_Robots_with_ROS00008.smil#code_000888">rviz</code>
                  <span class="text" id="span_001950" smilref="Programming_Robots_with_ROS00008.smil#span_001950">can do! It is an extremely flexible tool that we will use throughout the remainder of the book.</span>
                </p>
                <figure id="figure_000032">
                  <h1 id="h1_000171" smilref="Programming_Robots_with_ROS00008.smil#h1_000171">Figure 8-12. Rotating the perspective of the 3D view to create a "bird's eye" view of the environment</h1>
                  <div id="ch08-rviz_topdown" class="figure">
                    <img src="images/prwr_0812.jpg" alt="rviz_topdown" id="img_000062" />
                  </div>
                </figure>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Summary" id="section_000097">
              <h1 id="h1_000172" smilref="Programming_Robots_with_ROS00008.smil#h1_000172">Summary</h1>
              <div class="sect1" id="ch08-idp25116032">
                <p id="ch08-idp25187392" data-type="indexterm" data-startref="ix_8-teleop_bot-asciidoc0">
                  <span class="text" id="span_001951" smilref="Programming_Robots_with_ROS00008.smil#span_001951">This chapter developed a progressively more complex keyboard-based teleoperation scheme and then showed how to connect the resulting motion commands to a Turtlebot. Finally, this chapter introduced</span>
                  <code xml:space="preserve" id="code_000889" smilref="Programming_Robots_with_ROS00008.smil#code_000889">rviz</code>
                  <span class="text" id="span_001952" smilref="Programming_Robots_with_ROS00008.smil#span_001952">and showed how to quickly configure</span>
                  <code xml:space="preserve" id="code_000890" smilref="Programming_Robots_with_ROS00008.smil#code_000890">rviz</code>
                  <span class="text" id="span_001953" smilref="Programming_Robots_with_ROS00008.smil#span_001953">to render point cloud and camera data, to create a teleoperation interface for a mobile robot.</span>
                </p>
                <p id="p_000623" smilref="Programming_Robots_with_ROS00008.smil#p_000623">Although teleoperated robots have many important applications, it is often more convenient or economical for robots to drive themselves. In the next chapter, we will describe one approach for building 2D maps, which is a necessary step for robots to start driving themselves.</p>
              </div>
            </section>
          </div>
        </section>
      </level1>
      <level1 id="ch09">
        <section xmlns:epub="http://www.idpf.org/2007/ops" data-type="chapter" epub:type="chapter" data-pdf-bookmark="Chapter 9. Building Maps of the World" id="section_000098">
          <h1 id="h1_000173" smilref="Programming_Robots_with_ROS00008.smil#h1_000173">Chapter 9. Building Maps of the World</h1>
          <div class="chapter" id="ch09-mapping">
            <p id="ch09-ix_9-mapping-asciidoc0" data-type="indexterm" data-primary="maps" smilref="Programming_Robots_with_ROS00008.smil#ch09-ix_9-mapping-asciidoc0">Now that you know how ROS works and have moved your robot around a bit, it's time to start looking at how to get it to navigate around the world on its own. In order to do this, the robot needs to know where it is, and where you want it to go to. Typically, this means that it needs to have a map of the world and to know where it is in this map. In this chapter, we're going to see how to build a high-quality map of the world, using data from your robot's sensors. We'll then use these maps in the next chapter when we talk about how to make the robot move about in the world.</p>
            <p id="p_000624" smilref="Programming_Robots_with_ROS00008.smil#p_000624">If your robot had perfect sensors and knew exactly how it was moving, then building a map would be simple: you could take the objects detected by the sensors, transform them into some global coordinate frame (using the robot's position and some geometry), and then record them in a map (in this global coordinate frame). Unfortunately, in the real world, it's not quite that easy. The robot doesn't know exactly how it's moving, since it's interacting with an uncertain world. No sensor is perfect, and you'll have to deal with noisy measurements. How can you combine all this error-laden information together to produce a usable map?</p>
            <p id="p_000625" smilref="Programming_Robots_with_ROS00008.smil#p_000625">Luckily, ROS has a set of tools that will do this for you. The tools are based on some quite advanced mathematics, but, luckily, you don't have to understand everything that's going on under the hood in order to use them. We'll describe these tools in this chapter, but first let's talk a bit about exactly what we mean by "map."</p>
            <section data-type="sect1" data-pdf-bookmark="Maps in ROS" id="section_000099">
              <h1 id="h1_000174" smilref="Programming_Robots_with_ROS00008.smil#h1_000174">Maps in ROS</h1>
              <div class="sect1" id="ch09-idp25194432">
                <p id="ch09-ix_9-mapping-asciidoc2" data-type="indexterm" data-primary="cells, in map files" data-secondary="in ROS">
                  <span class="text" id="span_001954" smilref="Programming_Robots_with_ROS00008.smil#span_001954">Navigation maps in ROS are represented by a 2D grid, where each grid cell contains a value that corresponds to how likely it is to be occupied.</span>
                  <a data-type="xref" href="#ch09-willow_map" external="false" id="a_000115" smilref="Programming_Robots_with_ROS00008.smil#a_000115">Figure 9-1</a>
                  <span class="text" id="span_001955" smilref="Programming_Robots_with_ROS00008.smil#span_001955">shows an example of a map learned directly from the sensor data on a robot. White is open space, black is occupied, and the grayish color is unknown.</span>
                </p>
                <figure id="figure_000033">
                  <h1 id="h1_000175" smilref="Programming_Robots_with_ROS00008.smil#h1_000175">Figure 9-1. An example of a map used by ROS</h1>
                  <div id="ch09-willow_map" class="figure">
                    <img src="images/prwr_0301.jpg" alt="willow_map" id="img_000063" />
                  </div>
                </figure>
                <p id="ch09-idp25202208" data-type="indexterm" data-primary="YAML" data-secondary="and maps">
                  <span class="text" id="span_001956" smilref="Programming_Robots_with_ROS00008.smil#span_001956">Map files are stored as images, with a variety of common formats being supported (such as PNG, JPG, and PGM). Although color images can be used, they are converted to grayscale images before being interpreted by ROS. This means that maps can be displayed with any image display program. Associated with each map is a YAML file that holds additional information, such as the resolution (the length of each grid cell in meters), where the origin of the map is, and thresholds for deciding if a cell is occupied or unoccupied.</span>
                  <a data-type="xref" href="#ch09-map_yaml" external="false" id="a_000116" smilref="Programming_Robots_with_ROS00008.smil#a_000116">Example 9-1</a>
                  <span class="text" id="span_001957" smilref="Programming_Robots_with_ROS00008.smil#span_001957">shows an example of a map YAML file.</span>
                </p>
                <h1 id="h1_000176" smilref="Programming_Robots_with_ROS00008.smil#h1_000176">Example 9-1. map.yaml</h1>
                <div id="ch09-map_yaml" data-type="example">
                  <p id="p_000626">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_000891" smilref="Programming_Robots_with_ROS00008.smil#code_000891">image: map.pgm
resolution: 0.1
origin: [0.0, 0.0, 0.0]
occupied_thresh: 0.65
free_thresh: 0.196
negate: 1</code>
                  </p>
                </div>
                <h1 id="h1_000177" smilref="Programming_Robots_with_ROS00008.smil#h1_000177">Note</h1>
                <div data-type="note" epub:type="note" id="div_000022">
                  <p id="ch09-idp25207360" data-type="indexterm" data-primary="coordinate frames" data-secondary="maps vs. images" smilref="Programming_Robots_with_ROS00008.smil#ch09-idp25207360">It's worth pointing out that images and maps have different coordinate frames and conventions associated with them. Images are indexed from the top left, with the y-axis going down the image, and store integer values, often from 0 to 255. High values (such as 255) correspond to white, and low values (such as 0) correspond to black. Maps, on the other hand, can have an arbitrary origin, specified in the YAML file. Since maps are probabilistic representations of the world, high values correspond to something being there, and low values correspond to empty space. Since we're used to using paper, most people associate black with something there and white with nothing there when using a map.</p>
                  <p class="keep-together" id="p_000627" smilref="Programming_Robots_with_ROS00008.smil#p_000627">As with many things in ROS, most of the time, you won't need to think about this. However, if you're going to be directly editing your maps in an image editor, then it really helps to understand the differences between the image file format and the map that it represents.</p>
                </div>
                <p id="ch09-idp25216576" data-type="indexterm" data-startref="ix_9-mapping-asciidoc2">
                  <span class="text" id="span_001958" smilref="Programming_Robots_with_ROS00008.smil#span_001958">This map is stored in the file</span>
                  <em id="em_000280" smilref="Programming_Robots_with_ROS00008.smil#em_000280">map.png</em>
                  <span class="text" id="span_001959" smilref="Programming_Robots_with_ROS00008.smil#span_001959">, has cells that represent 10 cm squares of the world, and has an origin at (0, 0, 0). A cell is considered to be occupied if the value in it is more than 65% of the total range allowed by the image format. A cell is unoccupied if it has a value less than 19.6% of the allowable range. This means that occupied cells will have a large value and will appear lighter in color in the image. Unoccupied cells will have a lower value and would appear darker. Since it is more intuitive for open space to be represented by white and occupied space by black, the</span>
                  <code xml:space="preserve" id="code_000892" smilref="Programming_Robots_with_ROS00008.smil#code_000892">negate</code>
                  <span class="text" id="span_001960" smilref="Programming_Robots_with_ROS00008.smil#span_001960">flag allows for the values in the cells to be inverted before being used by ROS. So, for</span>
                  <a data-type="xref" href="#ch09-map_yaml" external="false" id="a_000117" smilref="Programming_Robots_with_ROS00008.smil#a_000117">Example 9-1</a>
                  <span class="text" id="span_001961" smilref="Programming_Robots_with_ROS00008.smil#span_001961">, if we assume that each cell holds a single unsigned byte (an integer from 0 to 255), each of the values will first be inverted by subtracting the original value from 255. Then, all cells with a value less that 49 (255 * 0.196 = 49.98) will be considered free, and all those with a value greater than 165 (255 * 0.65 = 165.75) will be considered to be occupied. All other cells will be classified as "unknown." These classifications will be used by ROS when we try to plan a path through this map for the robot to follow.</span>
                </p>
                <p id="p_000628">
                  <span class="text" id="span_001962" smilref="Programming_Robots_with_ROS00008.smil#span_001962">Since maps are represented as image files, you can edit them in your favorite image editor. This allows you to tidy up any maps that you create from sensor data, removing things that shouldn't be there, or adding in fake obstacles to influence path planning. A common use of this is to stop the robot from planning paths through certain areas of the map by, for example, drawing a line across a corridor you don't want to the robot to drive through, as you can see in</span>
                  <a data-type="xref" href="#ch09-modified_willow_map" external="false" id="a_000118" smilref="Programming_Robots_with_ROS00008.smil#a_000118">Figure 9-2</a>
                  <span class="text" id="span_001963" smilref="Programming_Robots_with_ROS00008.smil#span_001963">. The navigation system (which we'll talk about in the next chapter) will not be able to plan a path through these lines. This allows you to control where the robot can and cannot go as it wanders around the world.</span>
                </p>
                <figure id="figure_000034">
                  <h1 id="h1_000178" smilref="Programming_Robots_with_ROS00008.smil#h1_000178">Figure 9-2. A hand-modified map--black lines were added to stop the robot from planning paths down the corridor in the middle of the map</h1>
                  <div id="ch09-modified_willow_map" class="figure">
                    <img src="images/prwr_0902.jpg" alt="modified_willow_map" id="img_000064" />
                  </div>
                </figure>
                <p id="ch09-idp25222416" data-type="indexterm" data-startref="ix_9-mapping-asciidoc1">
                  <span class="text" id="span_001964" smilref="Programming_Robots_with_ROS00008.smil#span_001964">Before we start to talk about how we're going to build maps in ROS, we're going to take a short detour to talk about</span>
                  <code xml:space="preserve" id="code_000893" smilref="Programming_Robots_with_ROS00008.smil#code_000893">rosbag</code>
                  <span class="text" id="span_001965" smilref="Programming_Robots_with_ROS00008.smil#span_001965">. This is a tool that allows you to record and replay published messages and is especially useful when building large maps of the world.</span>
                </p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Recording Data with rosbag" id="section_000100">
              <h1 id="h1_000179" smilref="Programming_Robots_with_ROS00008.smil#h1_000179">Recording Data with rosbag</h1>
              <div class="sect1" id="ch09-idp25195056">
                <p id="ch09-ix_9-mapping-asciidoc3" data-type="indexterm" data-primary="bags" data-secondary="recording data with rosbag">
                  <code id="ch09-ix_9-mapping-asciidoc4" xml:space="preserve" smilref="Programming_Robots_with_ROS00008.smil#ch09-ix_9-mapping-asciidoc4">rosbag</code>
                  <span class="text" id="span_001966" smilref="Programming_Robots_with_ROS00008.smil#span_001966">is a tool that lets us record messages and replay them later. This is really useful when debugging new algorithms, since it lets you present the same data to the algorithm over and over, which will help you isolate and fix bugs. It also allows you to develop algorithms without having to use a robot all the time. You can record some sensor data from the robot with</span>
                  <code id="ch09-ix_9-mapping-asciidoc5" xml:space="preserve" smilref="Programming_Robots_with_ROS00008.smil#ch09-ix_9-mapping-asciidoc5">rosbag</code>
                  <span class="text" id="span_001967" smilref="Programming_Robots_with_ROS00008.smil#span_001967">, then use this recorded data to work on your code.</span>
                  <code id="ch09-ix_9-mapping-asciidoc6" xml:space="preserve" smilref="Programming_Robots_with_ROS00008.smil#ch09-ix_9-mapping-asciidoc6">rosbag</code>
                  <span class="text" id="span_001968" smilref="Programming_Robots_with_ROS00008.smil#span_001968">can do more than record and play back data, but that's what we're going to focus on for now.</span>
                </p>
                <p class="pagebreak-before" id="p_000629">
                  <span class="text" id="span_001969" smilref="Programming_Robots_with_ROS00008.smil#span_001969">To record messages, we use the</span>
                  <code xml:space="preserve" id="code_000894" smilref="Programming_Robots_with_ROS00008.smil#code_000894">record</code>
                  <span class="text" id="span_001970" smilref="Programming_Robots_with_ROS00008.smil#span_001970">functionality and a list of topic names. For example, to record all the messages sent over the</span>
                  <code xml:space="preserve" id="code_000895" smilref="Programming_Robots_with_ROS00008.smil#code_000895">scan</code>
                  <span class="text" id="span_001971" smilref="Programming_Robots_with_ROS00008.smil#span_001971">and</span>
                  <code xml:space="preserve" id="code_000896" smilref="Programming_Robots_with_ROS00008.smil#code_000896">tf</code>
                  <span class="text" id="span_001972" smilref="Programming_Robots_with_ROS00008.smil#span_001972">topics, you would run:</span>
                </p>
                <p id="p_000630">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000897"><span class="text" id="span_001973" smilref="Programming_Robots_with_ROS00008.smil#span_001973">
user@hostname$ </span><strong id="strong_000094" smilref="Programming_Robots_with_ROS00008.smil#strong_000094">rosbag record scan tf</strong>
</code>
                </p>
                <p id="p_000631">
                  <span class="text" id="span_001974" smilref="Programming_Robots_with_ROS00008.smil#span_001974">This will save all of the messages in a file with a name in the format</span>
                  <em id="em_000281" smilref="Programming_Robots_with_ROS00008.smil#em_000281">YYYY-MM-DD-HH-mm-ss.bag</em>
                  <span class="text" id="span_001975" smilref="Programming_Robots_with_ROS00008.smil#span_001975">, corresponding to the time that</span>
                  <code xml:space="preserve" id="code_000898" smilref="Programming_Robots_with_ROS00008.smil#code_000898">rosbag</code>
                  <span class="text" id="span_001976" smilref="Programming_Robots_with_ROS00008.smil#span_001976">was run. This should give each bag file a unique name, assuming you don't run</span>
                  <code xml:space="preserve" id="code_000899" smilref="Programming_Robots_with_ROS00008.smil#code_000899">rosbag</code>
                  <span class="text" id="span_001977" smilref="Programming_Robots_with_ROS00008.smil#span_001977">more than once a second. You can change the name of the output file using the</span>
                  <code xml:space="preserve" id="code_000900" smilref="Programming_Robots_with_ROS00008.smil#code_000900">-O</code>
                  <span class="text" id="span_001978" smilref="Programming_Robots_with_ROS00008.smil#span_001978">or</span>
                  <code xml:space="preserve" id="code_000901" smilref="Programming_Robots_with_ROS00008.smil#code_000901">--output-name</code>
                  <span class="text" id="span_001979" smilref="Programming_Robots_with_ROS00008.smil#span_001979">flags, and add a prefix with the</span>
                  <code xml:space="preserve" id="code_000902" smilref="Programming_Robots_with_ROS00008.smil#code_000902">-o</code>
                  <span class="text" id="span_001980" smilref="Programming_Robots_with_ROS00008.smil#span_001980">and</span>
                  <code xml:space="preserve" id="code_000903" smilref="Programming_Robots_with_ROS00008.smil#code_000903">--output-prefix</code>
                  <span class="text" id="span_001981" smilref="Programming_Robots_with_ROS00008.smil#span_001981">flags. For example, these commands:</span>
                </p>
                <p id="p_000632">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000904"><span class="text" id="span_001982" smilref="Programming_Robots_with_ROS00008.smil#span_001982">
user@hostname$ </span><strong id="strong_000095" smilref="Programming_Robots_with_ROS00008.smil#strong_000095">rosbag record -O foo.bag scan tf</strong><span class="text" id="span_001983" smilref="Programming_Robots_with_ROS00008.smil#span_001983">
user@hostname$ </span><strong id="strong_000096" smilref="Programming_Robots_with_ROS00008.smil#strong_000096">rosbag record -o foo scan tf</strong>
</code>
                </p>
                <p id="p_000633">
                  <span class="text" id="span_001984" smilref="Programming_Robots_with_ROS00008.smil#span_001984">would create bags named</span>
                  <em id="em_000282" smilref="Programming_Robots_with_ROS00008.smil#em_000282">foo.bag</em>
                  <span class="text" id="span_001985" smilref="Programming_Robots_with_ROS00008.smil#span_001985">and</span>
                  <em id="em_000283" smilref="Programming_Robots_with_ROS00008.smil#em_000283">foo_2015-10-05-14-29-30.bag</em>
                  <span class="text" id="span_001986" smilref="Programming_Robots_with_ROS00008.smil#span_001986">, respectively (obviously, with appropriate values for the current date and time). We can also record</span>
                  <em id="em_000284" smilref="Programming_Robots_with_ROS00008.smil#em_000284">all</em>
                  <span class="text" id="span_001987" smilref="Programming_Robots_with_ROS00008.smil#span_001987">of the topics that are currently publishing with the</span>
                  <code xml:space="preserve" id="code_000905" smilref="Programming_Robots_with_ROS00008.smil#code_000905">-a</code>
                  <span class="text" id="span_001988" smilref="Programming_Robots_with_ROS00008.smil#span_001988">flag:</span>
                </p>
                <p id="p_000634">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000906"><span class="text" id="span_001989" smilref="Programming_Robots_with_ROS00008.smil#span_001989">
user@hostname$ </span><strong id="strong_000097" smilref="Programming_Robots_with_ROS00008.smil#strong_000097">rosbag record -a</strong>
</code>
                </p>
                <p id="p_000635">
                  <span class="text" id="span_001990" smilref="Programming_Robots_with_ROS00008.smil#span_001990">While this is often useful, it can also record</span>
                  <em id="em_000285" smilref="Programming_Robots_with_ROS00008.smil#em_000285">a lot</em>
                  <span class="text" id="span_001991" smilref="Programming_Robots_with_ROS00008.smil#span_001991">of data, especially on robots with a lot of sensors, like the PR2. There are also flags that let you record topics that match a regular expression, which are described in detail on the</span>
                  <a href="http://wiki.ros.org/rosbag?distro=indigo" external="true" id="a_000119">
                    <code xml:space="preserve" id="code_000907" smilref="Programming_Robots_with_ROS00008.smil#code_000907">rosbag</code>
                    <span class="text" id="span_001992" smilref="Programming_Robots_with_ROS00008.smil#span_001992">wiki page</span>
                  </a>
                  <span class="text" id="span_001993" smilref="Programming_Robots_with_ROS00008.smil#span_001993">.</span>
                  <code xml:space="preserve" id="code_000908" smilref="Programming_Robots_with_ROS00008.smil#code_000908">rosbag</code>
                  <span class="text" id="span_001994" smilref="Programming_Robots_with_ROS00008.smil#span_001994">will record data until you stop it with a Ctrl-C.</span>
                </p>
                <p id="p_000636">
                  <span class="text" id="span_001995" smilref="Programming_Robots_with_ROS00008.smil#span_001995">You can play back a pre-recorded bag file with the</span>
                  <code xml:space="preserve" id="code_000909" smilref="Programming_Robots_with_ROS00008.smil#code_000909">play</code>
                  <span class="text" id="span_001996" smilref="Programming_Robots_with_ROS00008.smil#span_001996">functionality. There are a number of command-line parameters that allow you to manipulate how fast you play back the bag, where you start in the file, and other things (all of which are documented on the wiki), but the basic usage is straightforward:</span>
                </p>
                <p id="p_000637">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000910"><span class="text" id="span_001997" smilref="Programming_Robots_with_ROS00008.smil#span_001997">
user@hostname$ </span><strong id="strong_000098" smilref="Programming_Robots_with_ROS00008.smil#strong_000098">rosbag play --clock foo.bag</strong>
</code>
                </p>
                <p id="p_000638">
                  <span class="text" id="span_001998" smilref="Programming_Robots_with_ROS00008.smil#span_001998">This will replay the messages recorded in the bag file</span>
                  <em id="em_000286" smilref="Programming_Robots_with_ROS00008.smil#em_000286">foo.bag</em>
                  <span class="text" id="span_001999" smilref="Programming_Robots_with_ROS00008.smil#span_001999">, as if they were being generated live from ROS nodes. Giving more than one bag file name will result in the bag files being played sequentially. The</span>
                  <code xml:space="preserve" id="code_000911" smilref="Programming_Robots_with_ROS00008.smil#code_000911">--clock</code>
                  <span class="text" id="span_002000" smilref="Programming_Robots_with_ROS00008.smil#span_002000">flag causes</span>
                  <code xml:space="preserve" id="code_000912" smilref="Programming_Robots_with_ROS00008.smil#code_000912">rosbag</code>
                  <span class="text" id="span_002001" smilref="Programming_Robots_with_ROS00008.smil#span_002001">to publish the clock time, which will be important when we come to build our maps.</span>
                </p>
                <h1 id="h1_000180" smilref="Programming_Robots_with_ROS00008.smil#h1_000180">Warning</h1>
                <div data-type="warning" epub:type="warning" id="div_000023">
                  <p data-type="indexterm" data-primary="rosbag" data-secondary="--clock flag" id="ch09-idp24871344">
                    <span class="text" id="span_002002" smilref="Programming_Robots_with_ROS00008.smil#span_002002">The</span>
                    <code xml:space="preserve" id="code_000913" smilref="Programming_Robots_with_ROS00008.smil#code_000913">--clock</code>
                    <span class="text" id="span_002003" smilref="Programming_Robots_with_ROS00008.smil#span_002003">flag will cause</span>
                    <code xml:space="preserve" id="code_000914" smilref="Programming_Robots_with_ROS00008.smil#code_000914">rosbag</code>
                    <span class="text" id="span_002004" smilref="Programming_Robots_with_ROS00008.smil#span_002004">to publish the clock time from when the bag was recorded. If something else is also publishing time, such as the Gazebo simulator, this can cause a lot of problems. If two sources are publishing (different) times, then time will appear to jump around, and this will confuse the mapping algorithm (and possibly many other nodes). When you're using</span>
                    <code xml:space="preserve" id="code_000915" smilref="Programming_Robots_with_ROS00008.smil#code_000915">rosbag</code>
                    <span class="text" id="span_002005" smilref="Programming_Robots_with_ROS00008.smil#span_002005">with the</span>
                    <code xml:space="preserve" id="code_000916" smilref="Programming_Robots_with_ROS00008.smil#code_000916">--clock--</code>
                    <span class="text" id="span_002006" smilref="Programming_Robots_with_ROS00008.smil#span_002006">argument, make sure that nothing else is publishing a time. The easiest way to do this is to stop any simulators you have running.</span>
                  </p>
                </div>
                <p class="pagebreak-before" id="p_000639">
                  <span class="text" id="span_002007" smilref="Programming_Robots_with_ROS00008.smil#span_002007">You can find out information about a bag file with the</span>
                  <code xml:space="preserve" id="code_000917" smilref="Programming_Robots_with_ROS00008.smil#code_000917">info</code>
                  <span class="text" id="span_002008" smilref="Programming_Robots_with_ROS00008.smil#span_002008">functionality:</span>
                </p>
                <p id="p_000640">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000918"><span class="text" id="span_002009" smilref="Programming_Robots_with_ROS00008.smil#span_002009">
user@hostname$ </span><strong id="strong_000099" smilref="Programming_Robots_with_ROS00008.smil#strong_000099">rosbag info laser.bag</strong><span class="text" id="span_002010" smilref="Programming_Robots_with_ROS00008.smil#span_002010">
path:        laser.bag
version:     2.0
duration:    1:44s (104s)
start:       Jul 07 2011 10:04:13.44 (1310058253.44)
end:         Jul 07 2011 10:05:58.04 (1310058358.04)
size:        8.2 MB
messages:    2004
compression: none [11/11 chunks]
types:       sensor_msgs/LaserScan [90c7ef2dc6895d81024acba2ac42f369]
topics:      base_scan   2004 msgs: sensor_msgs/LaserScan
</span></code>
                </p>
                <p id="p_000641" smilref="Programming_Robots_with_ROS00008.smil#p_000641">This gives you details about how much time the bag covers, when it started and stopped recording, how large it is, how many messages it has in it, and what those messages (and topics) are. This is useful for you to verify that a bag that you just recorded has the right information in it.</p>
                <h1 id="h1_000181" smilref="Programming_Robots_with_ROS00008.smil#h1_000181">Tip</h1>
                <div data-type="tip" id="div_000024">
                  <p id="ch09-idp24886368" data-type="indexterm" data-startref="ix_9-mapping-asciidoc3" data-primary="debugging" data-secondary="rosbag for">
                    <code id="ch09-idp24879248" xml:space="preserve" smilref="Programming_Robots_with_ROS00008.smil#ch09-idp24879248">rosbag</code>
                    <span class="text" id="span_002011" smilref="Programming_Robots_with_ROS00008.smil#span_002011">is also a great tool to use when debugging new algorithms for your robot. Instead of feeding live sensor data to your algorithm as you try to debug it, you can record a representative set of data with</span>
                    <code id="ch09-idp24880448" xml:space="preserve" smilref="Programming_Robots_with_ROS00008.smil#ch09-idp24880448">rosbag</code>
                    <span class="text" id="span_002012" smilref="Programming_Robots_with_ROS00008.smil#span_002012">and then play it back. This means that your algorithm is seeing exactly the same data every time you run it. This repeatability will speed up your debugging, since you can guarantee that any changes in behavior are caused by changes in your code, and not by some new sensor input that you've never seen before. Even if the world does not change and your sensor does not move, measurement errors mean that you'll never see the same stream of sensor data twice. This will slow down your debugging, especially for complex algorithms.</span>
                  </p>
                </div>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Building Maps" id="section_000101">
              <h1 id="h1_000182" smilref="Programming_Robots_with_ROS00008.smil#h1_000182">Building Maps</h1>
              <div class="sect1" id="ch09-idp25223712">
                <p id="ch09-ix_9-mapping-asciidoc9" data-type="indexterm" data-primary="maps" data-secondary="building">
                  <span class="text" id="span_002013" smilref="Programming_Robots_with_ROS00008.smil#span_002013">Now we're going to look at how you can build a map like the one shown in</span>
                  <a data-type="xref" href="#ch09-willow_map" external="false" id="a_000120" smilref="Programming_Robots_with_ROS00008.smil#a_000120">Figure 9-1</a>
                  <span class="text" id="span_002014" smilref="Programming_Robots_with_ROS00008.smil#span_002014">using the tools in ROS. One thing to note about that map in</span>
                  <a data-type="xref" href="#ch09-willow_map" external="false" id="a_000121" smilref="Programming_Robots_with_ROS00008.smil#a_000121">Figure 9-1</a>
                  <span class="text" id="span_002015" smilref="Programming_Robots_with_ROS00008.smil#span_002015">is that it's quite "messy." Since it was created from sensor data taken from a robot, it includes some things you might not expect. Along the bottom edge of the map, the wall seems to have holes in it. These are caused by bad sensor readings, possibly the result of clutter under the desks in those rooms. The strange blob in the largish room toward the top in the middle is a pool table. The gray spots in the larger room going diagonally down and right are chair legs (this was a conference room). The walls are not always perfectly straight, and there are sometimes "unknown" areas in the middle of rooms if the sensors never made measurements there. When you start to make maps of your own with your robot, you should be prepared for them to look like this. Generally speaking, using more data to create the map will result in a better map. However, no map will be perfect. Even though the maps might not look all that great to you, they're still perfectly useful to the robot, as we will see.</span>
                </p>
                <p data-type="indexterm" data-primary="slam_gmapping" id="ch09-ix_9-mapping-asciidoc10">
                  <span class="text" id="span_002016" smilref="Programming_Robots_with_ROS00008.smil#span_002016">You can build maps with the</span>
                  <code xml:space="preserve" id="code_000919" smilref="Programming_Robots_with_ROS00008.smil#code_000919">slam_gmapping</code>
                  <span class="text" id="span_002017" smilref="Programming_Robots_with_ROS00008.smil#span_002017">node from the</span>
                  <code xml:space="preserve" id="code_000920" smilref="Programming_Robots_with_ROS00008.smil#code_000920">gmapping</code>
                  <span class="text" id="span_002018" smilref="Programming_Robots_with_ROS00008.smil#span_002018">package. The</span>
                  <code xml:space="preserve" id="code_000921" smilref="Programming_Robots_with_ROS00008.smil#code_000921">slam_gmapping</code>
                  <span class="text" id="span_002019" smilref="Programming_Robots_with_ROS00008.smil#span_002019">node uses an implementation of the GMapping algorithm, written by Giorgio Grisstti, Cyrill Stachniss, and Wolfram Burgard. GMapping uses a Rao-Blackwellized particle filter to keep track of the likely positions of the robot, based on its sensor data and the parts of the map that have already been built. If you're interested in the details of the algorithm, they're described in these two papers:</span>
                </p>
                <list type="ul" id="list_000008">
                  <li id="li_000028">
                    <p id="p_000642">
                      <span class="text" id="span_002020" smilref="Programming_Robots_with_ROS00008.smil#span_002020">Giorgio Grisetti, Cyrill Stachniss, and Wolfram Burgard, "Improved Techniques for Grid Mapping with Rao-Blackwellized Particle Filters,"</span>
                      <em id="em_000287" smilref="Programming_Robots_with_ROS00008.smil#em_000287">IEEE Transactions on Robotics</em>
                      <span class="text" id="span_002021" smilref="Programming_Robots_with_ROS00008.smil#span_002021">23 (2007): 34-46.</span>
                    </p>
                  </li>
                  <li id="li_000029">
                    <p id="p_000643">
                      <span class="text" id="span_002022" smilref="Programming_Robots_with_ROS00008.smil#span_002022">Giorgio Grisetti, Cyrill Stachniss, and Wolfram Burgard, "Improving Grid-based SLAM with Rao-Blackwellized Particle Filters by Adaptive Proposals and Selective Resampling,"</span>
                      <em id="em_000288" smilref="Programming_Robots_with_ROS00008.smil#em_000288">Proceedings of the IEEE International Conference on Robotics and Automation</em>
                      <span class="text" id="span_002023" smilref="Programming_Robots_with_ROS00008.smil#span_002023">(2005): 2432-2437.</span>
                    </p>
                  </li>
                </list>
                <p data-type="indexterm" data-primary="bags" data-secondary="using when building maps" id="ch09-idp24901216">
                  <span class="text" id="span_002024" smilref="Programming_Robots_with_ROS00008.smil#span_002024">First, we're going to generate some data to build the map from. Although you can build a map using live sensor data, as the robot moves about the world, we're going to take another approach. We're going to drive the robot around and save the sensor data to a file using</span>
                  <code xml:space="preserve" id="code_000922" smilref="Programming_Robots_with_ROS00008.smil#code_000922">rosbag</code>
                  <span class="text" id="span_002025" smilref="Programming_Robots_with_ROS00008.smil#span_002025">. We're then going to replay this sensor data and use</span>
                  <code xml:space="preserve" id="code_000923" smilref="Programming_Robots_with_ROS00008.smil#code_000923">slam_gmapping</code>
                  <span class="text" id="span_002026" smilref="Programming_Robots_with_ROS00008.smil#span_002026">to build a map for us. Collecting data in a bag file is often a good idea when building a map, since it lets you play around with the parameters of the</span>
                  <code xml:space="preserve" id="code_000924" smilref="Programming_Robots_with_ROS00008.smil#code_000924">slam_gmapping</code>
                  <span class="text" id="span_002027" smilref="Programming_Robots_with_ROS00008.smil#span_002027">node to get a good map, without having to go and run the robot through the world again. This can be a real time-saver, especially if you need to tweak the mapping node parameters a lot.</span>
                </p>
                <p id="ch09-idp24903408" data-type="indexterm" data-primary="TurtleBot" data-secondary="and map creation" smilref="Programming_Robots_with_ROS00008.smil#ch09-idp24903408">First, let's record some data.Start up a simulator with a Turtlebot in it:</p>
                <p id="p_000644">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000925"><span class="text" id="span_002028" smilref="Programming_Robots_with_ROS00008.smil#span_002028">user@hostname$ </span><strong id="strong_000100" smilref="Programming_Robots_with_ROS00008.smil#strong_000100">roslaunch turtlebot_stage turtlebot_in_stage.launch</strong>
</code>
                </p>
                <p id="p_000645">
                  <span class="text" id="span_002029" smilref="Programming_Robots_with_ROS00008.smil#span_002029">This launch file starts up the Stage robot simulator and an instance of</span>
                  <code xml:space="preserve" id="code_000926" smilref="Programming_Robots_with_ROS00008.smil#code_000926">rviz</code>
                  <span class="text" id="span_002030" smilref="Programming_Robots_with_ROS00008.smil#span_002030">. Zoom out a bit in the simulator (using the mouse wheel), and you should see something like</span>
                  <a data-type="xref" href="#ch09-mapping_rviz" external="false" id="a_000122" smilref="Programming_Robots_with_ROS00008.smil#a_000122">Figure 9-3</a>
                  <span class="text" id="span_002031" smilref="Programming_Robots_with_ROS00008.smil#span_002031">.</span>
                </p>
                <figure id="figure_000035">
                  <h1 id="h1_000183" smilref="Programming_Robots_with_ROS00008.smil#h1_000183">Figure 9-3. The rviz visualizer showing a simple world with a Turtlebot in it</h1>
                  <div id="ch09-mapping_rviz" class="figure">
                    <img src="images/prwr_0903.jpg" alt="mapping_viz" id="img_000065" />
                  </div>
                </figure>
                <p id="p_000646">
                  <span class="text" id="span_002032" smilref="Programming_Robots_with_ROS00008.smil#span_002032">Now, start up the the</span>
                  <code xml:space="preserve" id="code_000927" smilref="Programming_Robots_with_ROS00008.smil#code_000927">keyboard_teleop</code>
                  <span class="text" id="span_002033" smilref="Programming_Robots_with_ROS00008.smil#span_002033">node from the</span>
                  <code xml:space="preserve" id="code_000928" smilref="Programming_Robots_with_ROS00008.smil#code_000928">turtlebot_teleop</code>
                  <span class="text" id="span_002034" smilref="Programming_Robots_with_ROS00008.smil#span_002034">package:</span>
                </p>
                <p id="p_000647">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000929"><span class="text" id="span_002035" smilref="Programming_Robots_with_ROS00008.smil#span_002035">
user@hostname$ </span><strong id="strong_000101" smilref="Programming_Robots_with_ROS00008.smil#strong_000101">roslaunch turtlebot_teleop keyboard_teleop.launch</strong>
</code>
                </p>
                <p id="p_000648" smilref="Programming_Robots_with_ROS00008.smil#p_000648">This will let you drive the robot around in the simulated world using the keys shown by the node when it started:</p>
                <p id="p_000649">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000930" smilref="Programming_Robots_with_ROS00008.smil#code_000930">
Control Your Turtlebot!
//---------------------------
Moving around:
   u    i    o
   j    k    l
   m    ,    .

q/z : increase/decrease max speeds by 10%
w/x : increase/decrease only linear speed by 10%
e/c : increase/decrease only angular speed by 10%
space key, k : force stop
anything else : stop smoothly

CTRL-C to quit

currently:	speed 0.2	turn 1
</code>
                </p>
                <p class="pagebreak-before" id="p_000650">
                  <span class="text" id="span_002036" smilref="Programming_Robots_with_ROS00008.smil#span_002036">Practice driving the robot around for a bit. Once you've got the hang of it, we can get started collecting some data.</span>
                  <code xml:space="preserve" id="code_000931" smilref="Programming_Robots_with_ROS00008.smil#code_000931">slam_gmapping</code>
                  <span class="text" id="span_002037" smilref="Programming_Robots_with_ROS00008.smil#span_002037">builds maps from data from the laser range-finder and the odometry system, as reported by</span>
                  <code xml:space="preserve" id="code_000932" smilref="Programming_Robots_with_ROS00008.smil#code_000932">tf</code>
                  <span class="text" id="span_002038" smilref="Programming_Robots_with_ROS00008.smil#span_002038">. Although the Turtlebot doesn't actually have a laser range-finder, it creates</span>
                  <code xml:space="preserve" id="code_000933" smilref="Programming_Robots_with_ROS00008.smil#code_000933">LaserScan</code>
                  <span class="text" id="span_002039" smilref="Programming_Robots_with_ROS00008.smil#span_002039">messages from its Kinect data and sends them over the</span>
                  <code xml:space="preserve" id="code_000934" smilref="Programming_Robots_with_ROS00008.smil#code_000934">scan</code>
                  <span class="text" id="span_002040" smilref="Programming_Robots_with_ROS00008.smil#span_002040">topic. With the simulator still running, in a new terminal window, start recording some data:</span>
                </p>
                <p id="p_000651">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000935"><span class="text" id="span_002041" smilref="Programming_Robots_with_ROS00008.smil#span_002041">
user@hostname$ </span><strong id="strong_000102" smilref="Programming_Robots_with_ROS00008.smil#strong_000102">rosbag record -O data.bag /scan /tf</strong>
</code>
                </p>
                <p id="p_000652" smilref="Programming_Robots_with_ROS00008.smil#p_000652">Now, drive the robot around the world for a while. Try to cover as much of the map as possible, and make sure you visit the same locations a couple of times. Doing this will result in a better final map. If you get to the end of this section and your map doesn't look very good, try recording some new data and drive the robot around the simulated world for longer, or a bit more slowly.</p>
                <p id="p_000653">
                  <span class="text" id="span_002042" smilref="Programming_Robots_with_ROS00008.smil#span_002042">Once you've driven around for a while, use Ctrl-C to stop</span>
                  <code xml:space="preserve" id="code_000936" smilref="Programming_Robots_with_ROS00008.smil#code_000936">rosbag</code>
                  <span class="text" id="span_002043" smilref="Programming_Robots_with_ROS00008.smil#span_002043">. Verify that you have a data bag called</span>
                  <em id="em_000289" smilref="Programming_Robots_with_ROS00008.smil#em_000289">data.bag</em>
                  <span class="text" id="span_002044" smilref="Programming_Robots_with_ROS00008.smil#span_002044">. You can find out what's in this bag by using the</span>
                  <code xml:space="preserve" id="code_000937" smilref="Programming_Robots_with_ROS00008.smil#code_000937">rosbag info</code>
                  <span class="text" id="span_002045" smilref="Programming_Robots_with_ROS00008.smil#span_002045">command:</span>
                </p>
                <p id="p_000654">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000938"><span class="text" id="span_002046" smilref="Programming_Robots_with_ROS00008.smil#span_002046">
user@hostname$ </span><strong id="strong_000103" smilref="Programming_Robots_with_ROS00008.smil#strong_000103">rosbag info data.bag</strong><span class="text" id="span_002047" smilref="Programming_Robots_with_ROS00008.smil#span_002047">
path:        data.bag
version:     2.0
duration:    3:15s (195s)
start:       Dec 31 1969 16:00:23.80 (23.80)
end:         Dec 31 1969 16:03:39.60 (219.60)
size:        14.4 MB
messages:    11749
compression: none [19/19 chunks]
types:       sensor_msgs/LaserScan [90c7ef2dc6895d81024acba2ac42f369]
             tf2_msgs/TFMessage    [94810edda583a504dfda3829e70d7eec]
topics:      /scan   1959 msgs: sensor_msgs/LaserScan
             /tf     9790 msgs: tf2_msgs/TFMessage    (3 connections)
</span></code>
                </p>
                <p id="p_000655">
                  <span class="text" id="span_002048" smilref="Programming_Robots_with_ROS00008.smil#span_002048">Once you have a bag that seems to have enough data in it, stop the simulator with a Ctrl-C in the terminal you ran</span>
                  <code xml:space="preserve" id="code_000939" smilref="Programming_Robots_with_ROS00008.smil#code_000939">roslaunch</code>
                  <span class="text" id="span_002049" smilref="Programming_Robots_with_ROS00008.smil#span_002049">in. It's important to stop the simulator before starting the mapping process, because it will be publishing</span>
                  <code xml:space="preserve" id="code_000940" smilref="Programming_Robots_with_ROS00008.smil#code_000940">LaserScan</code>
                  <span class="text" id="span_002050" smilref="Programming_Robots_with_ROS00008.smil#span_002050">messages that will conflict with those that are being replayed by</span>
                  <code xml:space="preserve" id="code_000941" smilref="Programming_Robots_with_ROS00008.smil#code_000941">rosbag</code>
                  <span class="text" id="span_002051" smilref="Programming_Robots_with_ROS00008.smil#span_002051">. Now it's time to build a map. Start</span>
                  <code xml:space="preserve" id="code_000942" smilref="Programming_Robots_with_ROS00008.smil#code_000942">roscore</code>
                  <span class="text" id="span_002052" smilref="Programming_Robots_with_ROS00008.smil#span_002052">in one of the terminals. In another terminal, we're going to tell ROS to use the timestamps recorded in the bag file, and start the</span>
                  <code xml:space="preserve" id="code_000943" smilref="Programming_Robots_with_ROS00008.smil#code_000943">slam_gmapping</code>
                  <span class="text" id="span_002053" smilref="Programming_Robots_with_ROS00008.smil#span_002053">node:</span>
                </p>
                <p id="p_000656">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000944"><span class="text" id="span_002054" smilref="Programming_Robots_with_ROS00008.smil#span_002054">
user@hostname$ </span><strong id="strong_000104" smilref="Programming_Robots_with_ROS00008.smil#strong_000104">rosparam set use_sim_time true</strong><span class="text" id="span_002055" smilref="Programming_Robots_with_ROS00008.smil#span_002055">
user@hostname$ </span><strong id="strong_000105" smilref="Programming_Robots_with_ROS00008.smil#strong_000105">rosrun gmapping slam_gmapping</strong>
</code>
                </p>
                <p class="pagebreak-before" id="p_000657">
                  <span class="text" id="span_002056" smilref="Programming_Robots_with_ROS00008.smil#span_002056">If your robot's laser scan topic is not called</span>
                  <code xml:space="preserve" id="code_000945" smilref="Programming_Robots_with_ROS00008.smil#code_000945">scan</code>
                  <span class="text" id="span_002057" smilref="Programming_Robots_with_ROS00008.smil#span_002057">, you will need to tell</span>
                  <code xml:space="preserve" id="code_000946" smilref="Programming_Robots_with_ROS00008.smil#code_000946">slam_gmapping</code>
                  <span class="text" id="span_002058" smilref="Programming_Robots_with_ROS00008.smil#span_002058">what it is by adding</span>
                  <em id="em_000290">
                    <code xml:space="preserve" id="code_000947" smilref="Programming_Robots_with_ROS00008.smil#code_000947">scan:=laser_scan_topic</code>
                  </em>
                  <span class="text" id="span_002059" smilref="Programming_Robots_with_ROS00008.smil#span_002059">when you start the node. The mapper should now be running, waiting to see some data.</span>
                </p>
                <p id="p_000658">
                  <span class="text" id="span_002060" smilref="Programming_Robots_with_ROS00008.smil#span_002060">We're going to use</span>
                  <code xml:space="preserve" id="code_000948" smilref="Programming_Robots_with_ROS00008.smil#code_000948">rosbag play</code>
                  <span class="text" id="span_002061" smilref="Programming_Robots_with_ROS00008.smil#span_002061">to replay the data that we recorded from the simulated robot:</span>
                </p>
                <p id="p_000659">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000949"><span class="text" id="span_002062" smilref="Programming_Robots_with_ROS00008.smil#span_002062">
user@hostname$ </span><strong id="strong_000106" smilref="Programming_Robots_with_ROS00008.smil#strong_000106">rosbag play --clock data.bag</strong>
</code>
                </p>
                <p id="p_000660">
                  <span class="text" id="span_002063" smilref="Programming_Robots_with_ROS00008.smil#span_002063">When it starts receiving data,</span>
                  <code xml:space="preserve" id="code_000950" smilref="Programming_Robots_with_ROS00008.smil#code_000950">slam_gmapping</code>
                  <span class="text" id="span_002064" smilref="Programming_Robots_with_ROS00008.smil#span_002064">should start printing out diagnostic information. Sit back and wait until</span>
                  <code xml:space="preserve" id="code_000951" smilref="Programming_Robots_with_ROS00008.smil#code_000951">rosbag</code>
                  <span class="text" id="span_002065" smilref="Programming_Robots_with_ROS00008.smil#span_002065">finishes replaying the data and</span>
                  <code xml:space="preserve" id="code_000952" smilref="Programming_Robots_with_ROS00008.smil#code_000952">slam_gmapping</code>
                  <span class="text" id="span_002066" smilref="Programming_Robots_with_ROS00008.smil#span_002066">has stopped printing diagnostics. At this point, your map has been built, but it hasn't been saved to disk. Tell</span>
                  <code xml:space="preserve" id="code_000953" smilref="Programming_Robots_with_ROS00008.smil#code_000953">slam_gmapping</code>
                  <span class="text" id="span_002067" smilref="Programming_Robots_with_ROS00008.smil#span_002067">to do this by using the</span>
                  <code xml:space="preserve" id="code_000954" smilref="Programming_Robots_with_ROS00008.smil#code_000954">map_saver</code>
                  <span class="text" id="span_002068" smilref="Programming_Robots_with_ROS00008.smil#span_002068">node from the</span>
                  <code xml:space="preserve" id="code_000955" smilref="Programming_Robots_with_ROS00008.smil#code_000955">map_server</code>
                  <span class="text" id="span_002069" smilref="Programming_Robots_with_ROS00008.smil#span_002069">package. Without stopping</span>
                  <code xml:space="preserve" id="code_000956" smilref="Programming_Robots_with_ROS00008.smil#code_000956">slam_gmapping</code>
                  <span class="text" id="span_002070" smilref="Programming_Robots_with_ROS00008.smil#span_002070">, run the</span>
                  <code xml:space="preserve" id="code_000957" smilref="Programming_Robots_with_ROS00008.smil#code_000957">map_saver</code>
                  <span class="text" id="span_002071" smilref="Programming_Robots_with_ROS00008.smil#span_002071">node in another terminal:</span>
                </p>
                <p id="p_000661">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000958"><span class="text" id="span_002072" smilref="Programming_Robots_with_ROS00008.smil#span_002072">
user@hostname$ </span><strong id="strong_000107" smilref="Programming_Robots_with_ROS00008.smil#strong_000107">rosrun map_server map_saver</strong>
</code>
                </p>
                <p id="p_000662">
                  <span class="text" id="span_002073" smilref="Programming_Robots_with_ROS00008.smil#span_002073">This will save two files to disk:</span>
                  <em id="em_000291" smilref="Programming_Robots_with_ROS00008.smil#em_000291">map.pgm</em>
                  <span class="text" id="span_002074" smilref="Programming_Robots_with_ROS00008.smil#span_002074">, which contains the map, and</span>
                  <em id="em_000292" smilref="Programming_Robots_with_ROS00008.smil#em_000292">map.yaml</em>
                  <span class="text" id="span_002075" smilref="Programming_Robots_with_ROS00008.smil#span_002075">, which contains the map metadata. Take a look, and make sure you can see these files. You can view the map file using any standard image viewer, such as</span>
                  <code xml:space="preserve" id="code_000959" smilref="Programming_Robots_with_ROS00008.smil#code_000959">eog</code>
                  <span class="text" id="span_002076" smilref="Programming_Robots_with_ROS00008.smil#span_002076">.</span>
                </p>
                <p id="ch09-idp24938960" data-type="indexterm" data-primary="TurtleBot" data-secondary="and map creation">
                  <span class="text" id="span_002077" smilref="Programming_Robots_with_ROS00008.smil#span_002077">The map shown in</span>
                  <a data-type="xref" href="#ch09-one_room_map" external="false" id="a_000123" smilref="Programming_Robots_with_ROS00008.smil#a_000123">Figure 9-4</a>
                  <span class="text" id="span_002078" smilref="Programming_Robots_with_ROS00008.smil#span_002078">was generated by slowly rotating the TurtleBot in place for a little more than one revolution, without moving from its starting position in the simulator. The first thing to notice about this map is that the actual mapped part of the world is tiny compared to the rest of the map. This is because the default size of ROS maps is 200 m Ã 200 m, with a cell size of 5 cm (that means that the image size is 2,000 x 2,000 pixels).</span>
                  <a data-type="xref" href="#ch09-one_room_map_zoom" external="false" id="a_000124" smilref="Programming_Robots_with_ROS00008.smil#a_000124">Figure 9-5</a>
                  <span class="text" id="span_002079" smilref="Programming_Robots_with_ROS00008.smil#span_002079">shows a zoomed-in version of the interesting part of the map. This map isn't very good: the walls are not at right angles to each other, the open space extends beyond one of the walls, and there are notable gaps in several of the walls. As</span>
                  <a data-type="xref" href="#ch09-one_room_map_zoom" external="false" id="a_000125" smilref="Programming_Robots_with_ROS00008.smil#a_000125">Figure 9-5</a>
                  <span class="text" id="span_002080" smilref="Programming_Robots_with_ROS00008.smil#span_002080">shows, getting a good map is not just a simple matter of running</span>
                  <code xml:space="preserve" id="code_000960" smilref="Programming_Robots_with_ROS00008.smil#code_000960">slam_gmapping</code>
                  <span class="text" id="span_002081" smilref="Programming_Robots_with_ROS00008.smil#span_002081">on any old set of data. Building a good map is hard and can be time-consuming, but it's worth the investment--a good map will make navigating around the world and knowing where you are a lot easier, as we'll see in the next chapter.</span>
                </p>
                <figure id="figure_000036">
                  <h1 id="h1_000184" smilref="Programming_Robots_with_ROS00008.smil#h1_000184">Figure 9-4. A map generated from a Turtlebot spinning in place</h1>
                  <div id="ch09-one_room_map" class="figure">
                    <img src="images/prwr_0904.jpg" alt="one_room_map" id="img_000066" />
                  </div>
                </figure>
                <figure id="figure_000037">
                  <h1 id="h1_000185" smilref="Programming_Robots_with_ROS00008.smil#h1_000185">Figure 9-5. A zoomed-in section of the map generated from a Turtlebot spinning in place</h1>
                  <div id="ch09-one_room_map_zoom" class="figure">
                    <img src="images/prwr_0905.jpg" alt="one_room_map_zoom" id="img_000067" />
                  </div>
                </figure>
                <p class="pagebreak-before" id="p_000663">
                  <span class="text" id="span_002082" smilref="Programming_Robots_with_ROS00008.smil#span_002082">The YAML file generated by</span>
                  <code xml:space="preserve" id="code_000961" smilref="Programming_Robots_with_ROS00008.smil#code_000961">slam_gmapping</code>
                  <span class="text" id="span_002083" smilref="Programming_Robots_with_ROS00008.smil#span_002083">looks like this:</span>
                </p>
                <p id="p_000664">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000962" smilref="Programming_Robots_with_ROS00008.smil#code_000962">image: map.pgm
resolution: 0.050000
origin: [-100.000000, -100.000000, 0.000000]
negate: 0
occupied_thresh: 0.65
free_thresh: 0.196</code>
                </p>
                <p id="p_000665">
                  <span class="text" id="span_002084" smilref="Programming_Robots_with_ROS00008.smil#span_002084">Why is the map</span>
                  <em id="em_000293" smilref="Programming_Robots_with_ROS00008.smil#em_000293">so</em>
                  <span class="text" id="span_002085" smilref="Programming_Robots_with_ROS00008.smil#span_002085">bad? One of the reasons is that the sensors on the Turtlebot are not great for creating maps.</span>
                  <code xml:space="preserve" id="code_000963" smilref="Programming_Robots_with_ROS00008.smil#code_000963">slam_gmapping</code>
                  <span class="text" id="span_002086" smilref="Programming_Robots_with_ROS00008.smil#span_002086">expects</span>
                  <code xml:space="preserve" id="code_000964" smilref="Programming_Robots_with_ROS00008.smil#code_000964">LaserScan</code>
                  <span class="text" id="span_002087" smilref="Programming_Robots_with_ROS00008.smil#span_002087">messages, and as mentioned earlier, the Turtlebot doesn't have a laser range-finder; instead, it uses the data from a Microsoft Kinect sensor to synthesize</span>
                  <code xml:space="preserve" id="code_000965" smilref="Programming_Robots_with_ROS00008.smil#code_000965">LaserScan</code>
                  <span class="text" id="span_002088" smilref="Programming_Robots_with_ROS00008.smil#span_002088">messages, which can be used by</span>
                  <code xml:space="preserve" id="code_000966" smilref="Programming_Robots_with_ROS00008.smil#code_000966">slam_gmapping</code>
                  <span class="text" id="span_002089" smilref="Programming_Robots_with_ROS00008.smil#span_002089">. The problem is that this fake laser range-finder has a shorter range and a narrower field of view than a typical laser sensor does.</span>
                  <code xml:space="preserve" id="code_000967" smilref="Programming_Robots_with_ROS00008.smil#code_000967">slam_gmapping</code>
                  <span class="text" id="span_002090" smilref="Programming_Robots_with_ROS00008.smil#span_002090">uses the laser data to estimate how the robot is moving, and this estimation is better with long-range data over a wide field of view.</span>
                </p>
                <p id="p_000666">
                  <span class="text" id="span_002091" smilref="Programming_Robots_with_ROS00008.smil#span_002091">We can improve mapping quality by setting some of the</span>
                  <code xml:space="preserve" id="code_000968" smilref="Programming_Robots_with_ROS00008.smil#code_000968">gmapping</code>
                  <span class="text" id="span_002092" smilref="Programming_Robots_with_ROS00008.smil#span_002092">parameters to different values:</span>
                </p>
                <p id="p_000667">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000969"><span class="text" id="span_002093" smilref="Programming_Robots_with_ROS00008.smil#span_002093">
user@hostname$ </span><strong id="strong_000108" smilref="Programming_Robots_with_ROS00008.smil#strong_000108">rosparam set /slam_gmapping/angularUpdate 0.1</strong><span class="text" id="span_002094" smilref="Programming_Robots_with_ROS00008.smil#span_002094">
user@hostname$ </span><strong id="strong_000109" smilref="Programming_Robots_with_ROS00008.smil#strong_000109">rosparam set /slam_gmapping/linearUpdate 0.1</strong><span class="text" id="span_002095" smilref="Programming_Robots_with_ROS00008.smil#span_002095">
user@hostname$ </span><strong id="strong_000110" smilref="Programming_Robots_with_ROS00008.smil#strong_000110">rosparam set /slam_gmapping/lskip 10</strong><span class="text" id="span_002096" smilref="Programming_Robots_with_ROS00008.smil#span_002096">
user@hostname$ </span><strong id="strong_000111" smilref="Programming_Robots_with_ROS00008.smil#strong_000111">rosparam set /slam_gmapping/xmax 10</strong><span class="text" id="span_002097" smilref="Programming_Robots_with_ROS00008.smil#span_002097">
user@hostname$ </span><strong id="strong_000112" smilref="Programming_Robots_with_ROS00008.smil#strong_000112">rosparam set /slam_gmapping/xmin -10</strong><span class="text" id="span_002098" smilref="Programming_Robots_with_ROS00008.smil#span_002098">
user@hostname$ </span><strong id="strong_000113" smilref="Programming_Robots_with_ROS00008.smil#strong_000113">rosparam set /slam_gmapping/ymax 10</strong><span class="text" id="span_002099" smilref="Programming_Robots_with_ROS00008.smil#span_002099">
user@hostname$ </span><strong id="strong_000114" smilref="Programming_Robots_with_ROS00008.smil#strong_000114">rosparam set /slam_gmapping/ymin -10</strong>
</code>
                </p>
                <p id="p_000668">
                  <span class="text" id="span_002100" smilref="Programming_Robots_with_ROS00008.smil#span_002100">These change how far the robot has to rotate (</span>
                  <code xml:space="preserve" id="code_000970" smilref="Programming_Robots_with_ROS00008.smil#code_000970">angularUpdate</code>
                  <span class="text" id="span_002101" smilref="Programming_Robots_with_ROS00008.smil#span_002101">) and move (</span>
                  <code xml:space="preserve" id="code_000971" smilref="Programming_Robots_with_ROS00008.smil#code_000971">linearUpdate</code>
                  <span class="text" id="span_002102" smilref="Programming_Robots_with_ROS00008.smil#span_002102">) before a new scan is considered for inclusion in the map, how many beams to skip when processing each</span>
                  <code xml:space="preserve" id="code_000972" smilref="Programming_Robots_with_ROS00008.smil#code_000972">LaserScan</code>
                  <span class="text" id="span_002103" smilref="Programming_Robots_with_ROS00008.smil#span_002103">message (</span>
                  <code xml:space="preserve" id="code_000973" smilref="Programming_Robots_with_ROS00008.smil#code_000973">lskip</code>
                  <span class="text" id="span_002104" smilref="Programming_Robots_with_ROS00008.smil#span_002104">), and the extent of the map (</span>
                  <code xml:space="preserve" id="code_000974" smilref="Programming_Robots_with_ROS00008.smil#code_000974">xmin</code>
                  <span class="text" id="span_002105" smilref="Programming_Robots_with_ROS00008.smil#span_002105">,</span>
                  <code xml:space="preserve" id="code_000975" smilref="Programming_Robots_with_ROS00008.smil#code_000975">xmax</code>
                  <span class="text" id="span_002106" smilref="Programming_Robots_with_ROS00008.smil#span_002106">,</span>
                  <code xml:space="preserve" id="code_000976" smilref="Programming_Robots_with_ROS00008.smil#code_000976">ymin</code>
                  <span class="text" id="span_002107" smilref="Programming_Robots_with_ROS00009.smil#span_002107">,</span>
                  <code xml:space="preserve" id="code_000977" smilref="Programming_Robots_with_ROS00009.smil#code_000977">ymax</code>
                  <span class="text" id="span_002108" smilref="Programming_Robots_with_ROS00009.smil#span_002108">).</span>
                </p>
                <p id="p_000669">
                  <span class="text" id="span_002109" smilref="Programming_Robots_with_ROS00009.smil#span_002109">We can also improve the quality of the maps by driving around slowly, especially when turning the robot. Make the parameter changes listed here and collect a new bag of data by driving your robot around slowly, and you'll get a map that looks more like</span>
                  <a data-type="xref" href="#ch09-better_map" external="false" id="a_000126" smilref="Programming_Robots_with_ROS00009.smil#a_000126">Figure 9-6</a>
                  <span class="text" id="span_002110" smilref="Programming_Robots_with_ROS00009.smil#span_002110">. It's still not perfect (no map built from sensor data ever is), but it's certainly better than the previous one. Note that the parameter changes only affect</span>
                  <code xml:space="preserve" id="code_000978" smilref="Programming_Robots_with_ROS00009.smil#code_000978">slam_gmapping</code>
                  <span class="text" id="span_002111" smilref="Programming_Robots_with_ROS00009.smil#span_002111">, so you could use them with the original data bag you collected, without driving the robot around again. As we noted earlier, this is one of the advantages of using recorded data when building maps.</span>
                </p>
                <h1 id="h1_000186" smilref="Programming_Robots_with_ROS00009.smil#h1_000186">Tip</h1>
                <div data-type="tip" id="div_000025">
                  <p id="p_000670">
                    <span class="text" id="span_002112" smilref="Programming_Robots_with_ROS00009.smil#span_002112">When building a map with</span>
                    <code xml:space="preserve" id="code_000979" smilref="Programming_Robots_with_ROS00009.smil#code_000979">slam_gmapping</code>
                    <span class="text" id="span_002113" smilref="Programming_Robots_with_ROS00009.smil#span_002113">, record the information you need with</span>
                    <code xml:space="preserve" id="code_000980" smilref="Programming_Robots_with_ROS00009.smil#code_000980">rosbag</code>
                    <span class="text" id="span_002114" smilref="Programming_Robots_with_ROS00009.smil#span_002114">. This will let you experiment with different values of the</span>
                    <code xml:space="preserve" id="code_000981" smilref="Programming_Robots_with_ROS00009.smil#code_000981">slam_gmapping</code>
                    <span class="text" id="span_002115" smilref="Programming_Robots_with_ROS00009.smil#span_002115">parameters to get a better map.</span>
                  </p>
                </div>
                <figure id="figure_000038">
                  <h1 id="h1_000187" smilref="Programming_Robots_with_ROS00009.smil#h1_000187">Figure 9-6. A better map, built from more carefully collected data and better parameter settings</h1>
                  <div id="ch09-better_map" class="figure">
                    <img src="images/prwr_0906.jpg" alt="better_map" id="img_000068" />
                  </div>
                </figure>
                <p id="ch09-idp24971456" data-type="indexterm" data-startref="ix_9-mapping-asciidoc10">
                  <span class="text" id="span_002116" smilref="Programming_Robots_with_ROS00009.smil#span_002116">You can also build your maps directly from published messages, without saving them to a bag file first. To do this, you just need to start the</span>
                  <code xml:space="preserve" id="code_000982" smilref="Programming_Robots_with_ROS00009.smil#code_000982">slam_gmapping</code>
                  <span class="text" id="span_002117" smilref="Programming_Robots_with_ROS00009.smil#span_002117">node while you're driving your robot around. We prefer to record the data first, since there's less computational load on the robot when you're driving it around that way. In the end, however, you should end up with similar maps, regardless of whether or not you saved the data with</span>
                  <code xml:space="preserve" id="code_000983" smilref="Programming_Robots_with_ROS00009.smil#code_000983">rosbag</code>
                  <span class="text" id="span_002118" smilref="Programming_Robots_with_ROS00009.smil#span_002118">first.</span>
                </p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Starting a Map Server and Looking at a Map" id="section_000102">
              <h1 id="h1_000188" smilref="Programming_Robots_with_ROS00009.smil#h1_000188">Starting a Map Server and Looking at a Map</h1>
              <div class="sect1" id="ch09-idp24887952">
                <p data-type="indexterm" data-primary="maps" data-secondary="starting a map server" id="ch09-idp24973392">
                  <span class="text" id="span_002119" smilref="Programming_Robots_with_ROS00009.smil#span_002119">Once you have a map, you need to make it available to ROS. You do this by running the</span>
                  <code xml:space="preserve" id="code_000984" smilref="Programming_Robots_with_ROS00009.smil#code_000984">map_server</code>
                  <span class="text" id="span_002120" smilref="Programming_Robots_with_ROS00009.smil#span_002120">node from the</span>
                  <code id="ch09-idp24974656" xml:space="preserve" smilref="Programming_Robots_with_ROS00009.smil#ch09-idp24974656">map_server</code>
                  <span class="text" id="span_002121" smilref="Programming_Robots_with_ROS00009.smil#span_002121">package, and pointing it at the YAML file for a map you have already made. As explained earlier, this YAML file contains the filename for the image that represents the map and additional information about it, like the resolution (meters per pixel), where the origin is, what the thresholds for occupied and open space are, and whether the image uses white for open space or occupied space. With</span>
                  <code id="ch09-idp24975536" xml:space="preserve" smilref="Programming_Robots_with_ROS00009.smil#ch09-idp24975536">roscore</code>
                  <span class="text" id="span_002122" smilref="Programming_Robots_with_ROS00009.smil#span_002122">running, you can start a map server like this:</span>
                </p>
                <p id="p_000671">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000985"><span class="text" id="span_002123" smilref="Programming_Robots_with_ROS00009.smil#span_002123">
user@hostname$ </span><strong id="strong_000115" smilref="Programming_Robots_with_ROS00009.smil#strong_000115">rosrun map_server map_server map.yaml</strong>
</code>
                </p>
                <p id="p_000672">
                  <span class="text" id="span_002124" smilref="Programming_Robots_with_ROS00009.smil#span_002124">where</span>
                  <code xml:space="preserve" id="code_000986" smilref="Programming_Robots_with_ROS00009.smil#code_000986">map.yaml</code>
                  <span class="text" id="span_002125" smilref="Programming_Robots_with_ROS00009.smil#span_002125">is the map YAML file. Running the map server will result in two topics being published.</span>
                  <code xml:space="preserve" id="code_000987" smilref="Programming_Robots_with_ROS00009.smil#code_000987">map</code>
                  <span class="text" id="span_002126" smilref="Programming_Robots_with_ROS00009.smil#span_002126">contains messages of type</span>
                  <code xml:space="preserve" id="code_000988" smilref="Programming_Robots_with_ROS00009.smil#code_000988">nav_msgs/OccupancyGrid</code>
                  <span class="text" id="span_002127" smilref="Programming_Robots_with_ROS00009.smil#span_002127">, corresponding to the map itself.</span>
                  <code xml:space="preserve" id="code_000989" smilref="Programming_Robots_with_ROS00009.smil#code_000989">map_metadata</code>
                  <span class="text" id="span_002128" smilref="Programming_Robots_with_ROS00009.smil#span_002128">contains messages of type</span>
                  <code xml:space="preserve" id="code_000990" smilref="Programming_Robots_with_ROS00009.smil#code_000990">nav_msgs/MapMetaData</code>
                  <span class="text" id="span_002129" smilref="Programming_Robots_with_ROS00009.smil#span_002129">, corresponding to the data in the YAML file:</span>
                </p>
                <p id="p_000673">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000991"><span class="text" id="span_002130" smilref="Programming_Robots_with_ROS00009.smil#span_002130">
user@hostname$ </span><strong id="strong_000116" smilref="Programming_Robots_with_ROS00009.smil#strong_000116">rostopic list</strong><span class="text" id="span_002131" smilref="Programming_Robots_with_ROS00009.smil#span_002131">
/map
/map_metadata
/rosout
/rosout_agg

user@hostname$ </span><strong id="strong_000117" smilref="Programming_Robots_with_ROS00009.smil#strong_000117">rostopic echo map_metadata</strong><span class="text" id="span_002132" smilref="Programming_Robots_with_ROS00009.smil#span_002132">
map_load_time:
  secs: 1427308667
  nsecs: 991178307
resolution: 0.0250000003725
width: 2265
height: 2435
origin:
  position:
    x: 0.0
    y: 0.0
    z: 0.0
  orientation:
    x: 0.0
    y: 0.0
    z: 0.0
    w: 1.0
</span></code>
                </p>
                <p id="p_000674">
                  <span class="text" id="span_002133" smilref="Programming_Robots_with_ROS00009.smil#span_002133">This shows that the map contains 2,265 x 2,435 cells, with a resolution of 2.5 cm per cell. The origin of the world coordinate frame is the origin of the map, with the same orientation. We can take a look at the map in</span>
                  <code xml:space="preserve" id="code_000992" smilref="Programming_Robots_with_ROS00009.smil#code_000992">rviz</code>
                  <span class="text" id="span_002134" smilref="Programming_Robots_with_ROS00009.smil#span_002134">, to see what's actually in it. Start up a map server like this:</span>
                </p>
                <p id="p_000675">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000993"><span class="text" id="span_002135" smilref="Programming_Robots_with_ROS00009.smil#span_002135">
user@hostname$ </span><strong id="strong_000118" smilref="Programming_Robots_with_ROS00009.smil#strong_000118">roscd mapping/maps</strong><span class="text" id="span_002136" smilref="Programming_Robots_with_ROS00009.smil#span_002136">
user@hostname$ </span><strong id="strong_000119" smilref="Programming_Robots_with_ROS00009.smil#strong_000119">rosrun map_server map_server willow.yaml</strong>
</code>
                </p>
                <p id="p_000676">
                  <span class="text" id="span_002137" smilref="Programming_Robots_with_ROS00009.smil#span_002137">Now, in another terminal, start up an instance of</span>
                  <code xml:space="preserve" id="code_000994" smilref="Programming_Robots_with_ROS00009.smil#code_000994">rviz</code>
                  <span class="text" id="span_002138" smilref="Programming_Robots_with_ROS00009.smil#span_002138">:</span>
                </p>
                <p id="p_000677">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_000995"><span class="text" id="span_002139" smilref="Programming_Robots_with_ROS00009.smil#span_002139">
user@hostname$ </span><strong id="strong_000120" smilref="Programming_Robots_with_ROS00009.smil#strong_000120">rosrun rviz rviz</strong>
</code>
                </p>
                <p data-type="indexterm" data-primary="maps" data-secondary="displaying" id="ch09-idp24989136">
                  <span class="text" id="span_002140" smilref="Programming_Robots_with_ROS00009.smil#span_002140">Add a display of type Map, and set the topic name to</span>
                  <code xml:space="preserve" id="code_000996" smilref="Programming_Robots_with_ROS00009.smil#code_000996">/map</code>
                  <span class="text" id="span_002141" smilref="Programming_Robots_with_ROS00009.smil#span_002141">. Make sure that the fixed frame is also set to</span>
                  <code xml:space="preserve" id="code_000997" smilref="Programming_Robots_with_ROS00009.smil#code_000997">/map</code>
                  <span class="text" id="span_002142" smilref="Programming_Robots_with_ROS00009.smil#span_002142">. You should see something like</span>
                  <a data-type="xref" href="#ch09-rviz_map" external="false" id="a_000127" smilref="Programming_Robots_with_ROS00009.smil#a_000127">Figure 9-7</a>
                  <span class="text" id="span_002143" smilref="Programming_Robots_with_ROS00009.smil#span_002143">.</span>
                </p>
                <p id="p_000678">
                  <span class="text" id="span_002144" smilref="Programming_Robots_with_ROS00009.smil#span_002144">This map was built using a PR2 robot with a laser range-finder and</span>
                  <code xml:space="preserve" id="code_000998" smilref="Programming_Robots_with_ROS00009.smil#code_000998">slam_gmapping</code>
                  <span class="text" id="span_002145" smilref="Programming_Robots_with_ROS00009.smil#span_002145">, and it illustrates a number of things you often see in maps built from sensor data. First, it is not axis-aligned. When the robot was collecting data to build the map, the odometry data coordinate frame was aligned with the starting position of the robot, which means that the final map is rotated a bit. We can fix this in the YAML file if we want to, although it doesn't affect the robot's ability to navigate.</span>
                </p>
                <figure id="figure_000039">
                  <h1 id="h1_000189" smilref="Programming_Robots_with_ROS00009.smil#h1_000189">Figure 9-7. A map built using slam_gmapping and displayed in rviz</h1>
                  <div id="ch09-rviz_map" class="figure">
                    <img src="images/prwr_09in01.jpg" alt="rviz_map" id="img_000069" />
                  </div>
                </figure>
                <p id="p_000679" smilref="Programming_Robots_with_ROS00009.smil#p_000679">Second, the map is quite messy. Although the corridors and open spaces are fairly clean, there seem to be a lot of long, skinny open spaces coming off these open spaces. These are actually rooms that the robot did not drive into. As the robot drove past these rooms, the laser range-finder made some measurements into them, but there wasn't enough data to reconstruct a decent map of each room. Again, this won't affect the ability of the robot to localize itself, but it does mean that we might not be able to get the robot to navigate into these rooms autonomously, since they're technically not in the map.</p>
                <p data-type="indexterm" data-primary="localization" data-secondary="maps and" id="ch09-idp24997888" data-startref="ix_9-mapping-asciidoc9">
                  <span class="text" id="span_002146" smilref="Programming_Robots_with_ROS00009.smil#span_002146">Finally, there's a big black blob in the lower-right corner of the map. This is a room that the robot should not go into, even though it's on the map. After the map was made, someone loaded the image file into a graphics program like</span>
                  <code xml:space="preserve" id="code_000999" smilref="Programming_Robots_with_ROS00009.smil#code_000999">gimp</code>
                  <span class="text" id="span_002147" smilref="Programming_Robots_with_ROS00009.smil#span_002147">and painted the pixels in the room black. When the robot tries to plan a path in the map, these areas will be considered to be occupied, and it will not plan a path through them. This change will affect the robot's ability to localize itself a bit, especially when it is near the doorway to this space. Localization involves comparing the current sensor readings to the map, to make sure the robot is seeing what it expects to in a given location. Since there's an obstacle in the map (the big black blob) that doesn't match up with something in the real world, the robot's confidence in where it is will be lower. However, as long as it can see enough of the world that</span>
                  <em id="em_000294" smilref="Programming_Robots_with_ROS00009.smil#em_000294">does</em>
                  <span class="text" id="span_002148" smilref="Programming_Robots_with_ROS00009.smil#span_002148">match up with its map (which it can in this case, because the laser range-finder on the PR2 has a wide field of view), the localization algorithm is robust enough to cope.</span>
                </p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Summary" id="section_000103">
              <h1 id="h1_000190" smilref="Programming_Robots_with_ROS00009.smil#h1_000190">Summary</h1>
              <div class="sect1" id="ch09-idp24972448">
                <p id="p_000680">
                  <span class="text" id="span_002149" smilref="Programming_Robots_with_ROS00009.smil#span_002149">In this chapter, we looked at how to use the</span>
                  <code xml:space="preserve" id="code_001000" smilref="Programming_Robots_with_ROS00009.smil#code_001000">slam_gmapping</code>
                  <span class="text" id="span_002150" smilref="Programming_Robots_with_ROS00009.smil#span_002150">package to create a high-quality map of the robot's environment. We also introduced you to</span>
                  <code xml:space="preserve" id="code_001001" smilref="Programming_Robots_with_ROS00009.smil#code_001001">rosbag</code>
                  <span class="text" id="span_002151" smilref="Programming_Robots_with_ROS00009.smil#span_002151">, which can let you save published messages to a file and replay them later. We'll be seeing</span>
                  <code xml:space="preserve" id="code_001002" smilref="Programming_Robots_with_ROS00009.smil#code_001002">rosbag</code>
                  <span class="text" id="span_002152" smilref="Programming_Robots_with_ROS00009.smil#span_002152">again later on in this book, since it's a useful tool.</span>
                </p>
                <p id="p_000681" smilref="Programming_Robots_with_ROS00009.smil#p_000681">One of the important things to remember about building maps is that, although many roboticists consider it to be a "solved problem," it is often tricky to do in practice, especially with cheaper robots and less capable sensors.</p>
                <p id="p_000682">
                  <span class="text" id="span_002153" smilref="Programming_Robots_with_ROS00009.smil#span_002153">We've really just scratched the surface of the ROS mapping system. There are a huge number of parameters you can set to alter the mapping behavior. These are all documented at the</span>
                  <a href="http://wiki.ros.org/gmapping?distro=indigo" external="true" id="a_000128">
                    <code xml:space="preserve" id="code_001003" smilref="Programming_Robots_with_ROS00009.smil#code_001003">gmapping</code>
                    <span class="text" id="span_002154" smilref="Programming_Robots_with_ROS00009.smil#span_002154">wiki page</span>
                  </a>
                  <span class="text" id="span_002155" smilref="Programming_Robots_with_ROS00009.smil#span_002155">and described in the papers mentioned earlier. However, unless you know what the effects of changing these parameters are, we'd recommend that you don't fiddle with them too much. Find some settings that work for your robot, and then don't change them.</span>
                </p>
                <p id="ch09-idp25007120" data-type="indexterm" data-startref="ix_9-mapping-asciidoc0" smilref="Programming_Robots_with_ROS00009.smil#ch09-idp25007120">Once you've built maps a few times, and you have a feel for it, it shouldn't take too long to make a new one when you find yourself in a new environment. Once you have a map, then you're ready to have your robot start to autonomously navigate about, which is the subject of the next chapter.</p>
              </div>
            </section>
          </div>
        </section>
      </level1>
      <level1 id="ch10">
        <section xmlns:epub="http://www.idpf.org/2007/ops" data-type="chapter" epub:type="chapter" data-pdf-bookmark="Chapter 10. Navigating About the World" id="section_000104">
          <h1 id="h1_000191" smilref="Programming_Robots_with_ROS00009.smil#h1_000191">Chapter 10. Navigating About the World</h1>
          <div class="chapter" id="ch10-navigating">
            <p id="ch10-ix_10-navigation-asciidoc0" data-type="indexterm" data-primary="navigation" smilref="Programming_Robots_with_ROS00009.smil#ch10-ix_10-navigation-asciidoc0">One of the most basic things that a robot can do is to move around the world. To do this effectively, the robot needs to know where it is and where it should be going. This is usually acheived by giving the robot a map of the world, a starting location, and a goal location. In the previous chapter, we saw how to build a map of the world from sensor data. Now, we'll look at how to make your robot autonomously navigate from one part of the world to another, using this map and the ROS navigation packages. We'll start by helping the robot to figure out where it is.</p>
            <section data-type="sect1" data-pdf-bookmark="Localizing the Robot in a Map" id="section_000105">
              <h1 id="h1_000192" smilref="Programming_Robots_with_ROS00009.smil#h1_000192">Localizing the Robot in a Map</h1>
              <div class="sect1" id="ch10-idp25011360">
                <p class="keep-together" data-type="indexterm" data-primary="Adaptive Monte Carlo Localization" id="ch10-idp25559824" data-secondary="to localize robot in a map">
                  <span class="text" id="span_002156" smilref="Programming_Robots_with_ROS00009.smil#span_002156">In this section, we'll see how we can use the ROS</span>
                  <code id="ch10-ix_10-navigation-asciidoc1" xml:space="preserve" smilref="Programming_Robots_with_ROS00009.smil#ch10-ix_10-navigation-asciidoc1">amcl</code>
                  <span class="text" id="span_002157" smilref="Programming_Robots_with_ROS00009.smil#span_002157">package to localize the robot in a map. The</span>
                  <code xml:space="preserve" id="code_001004" smilref="Programming_Robots_with_ROS00009.smil#code_001004">amcl</code>
                  <span class="text" id="span_002158" smilref="Programming_Robots_with_ROS00009.smil#span_002158">node implements a set of probabilistic localization algorithms,</span>
                  <span class="keep-together" id="ch10-ix_10-navigation-asciidoc2" smilref="Programming_Robots_with_ROS00009.smil#ch10-ix_10-navigation-asciidoc2">collectively known as</span>
                  <em id="ch10-ix_10-navigation-asciidoc3" smilref="Programming_Robots_with_ROS00009.smil#ch10-ix_10-navigation-asciidoc3">Adaptive Monte Carlo Localization</em>
                  <span class="text" id="span_002159" smilref="Programming_Robots_with_ROS00009.smil#span_002159">, which are described in the book</span>
                  <em id="em_000295" smilref="Programming_Robots_with_ROS00009.smil#em_000295">Probabilistic Robotics</em>
                  <span class="text" id="span_002160" smilref="Programming_Robots_with_ROS00009.smil#span_002160">by Sebsastian Thrun, Wolfram Burgard, and Dieter Fox (MIT Press). In particular, it uses the algorithms</span>
                  <code xml:space="preserve" id="code_001005" smilref="Programming_Robots_with_ROS00009.smil#code_001005">sample_motion_ model_odometry</code>
                  <span class="text" id="span_002161" smilref="Programming_Robots_with_ROS00009.smil#span_002161">,</span>
                  <code xml:space="preserve" id="code_001006" smilref="Programming_Robots_with_ROS00009.smil#code_001006">beam_range_finder_model</code>
                  <span class="text" id="span_002162" smilref="Programming_Robots_with_ROS00009.smil#span_002162">,</span>
                  <code xml:space="preserve" id="code_001007" smilref="Programming_Robots_with_ROS00009.smil#code_001007">likelihood_field_range_finder_ model</code>
                  <span class="text" id="span_002163" smilref="Programming_Robots_with_ROS00009.smil#span_002163">,</span>
                  <code xml:space="preserve" id="code_001008" smilref="Programming_Robots_with_ROS00009.smil#code_001008">Augmented_MCL</code>
                  <span class="text" id="span_002164" smilref="Programming_Robots_with_ROS00009.smil#span_002164">, and</span>
                  <code xml:space="preserve" id="code_001009" smilref="Programming_Robots_with_ROS00009.smil#code_001009">KLD_Sampling_MCL</code>
                  <span class="text" id="span_002165" smilref="Programming_Robots_with_ROS00009.smil#span_002165">. While you don't need to know all of the technical details of how these algorithms work in order to use the localization package, understanding some of the high-level details will make your life easier when you're trying to make localization work.</span>
                  <note id="ch10-idp25566848-marker">
                    <noteref data-type="noteref" idref="#ch10-idp25566848" id="noteref_000014" smilref="Programming_Robots_with_ROS00009.smil#noteref_000014">1</noteref>
                  </note>
                </p>
                <p data-type="indexterm" data-primary="localization" data-secondary="candidate poses" id="ch10-idp25571888">
                  <span class="text" id="span_002166" smilref="Programming_Robots_with_ROS00009.smil#span_002166">The location of the robot, also known as its</span>
                  <em id="ch10-idp25568000" smilref="Programming_Robots_with_ROS00009.smil#ch10-idp25568000">pose</em>
                  <span class="text" id="span_002167" smilref="Programming_Robots_with_ROS00009.smil#span_002167">, is represented by a position and orientation in the</span>
                  <em id="ch10-idp25569152" smilref="Programming_Robots_with_ROS00009.smil#ch10-idp25569152">map coordinate frame</em>
                  <span class="text" id="span_002168" smilref="Programming_Robots_with_ROS00009.smil#span_002168">(sometimes also called the</span>
                  <em id="ch10-idp25569856" smilref="Programming_Robots_with_ROS00009.smil#ch10-idp25569856">world coordinate frame</em>
                  <span class="text" id="span_002169" smilref="Programming_Robots_with_ROS00009.smil#span_002169">).</span>
                  <code xml:space="preserve" id="code_001010" smilref="Programming_Robots_with_ROS00009.smil#code_001010">amcl</code>
                  <span class="text" id="span_002170" smilref="Programming_Robots_with_ROS00009.smil#span_002170">maintains a set of these poses, representing where it thinks the robot might be. Each of these</span>
                  <em id="em_000296" smilref="Programming_Robots_with_ROS00009.smil#em_000296">candidate poses</em>
                  <span class="text" id="span_002171" smilref="Programming_Robots_with_ROS00009.smil#span_002171">has associated with it a probability; higher-probability poses are more likely to be where the robot actually is. As the robot moves around the world, the sensor readings are compared to the readings that would be expected for each of the poses, according to the map. For each candidate pose, if the readings are consistent with the map, then the probability of that pose increases. If the readings are inconsistent, then the probability decreases. Over time, candidate poses with very low probability (i.e., where the robot is most likely not really in that pose) go away, while those with high probability stick around. As the robot moves around the world, the candidate poses move with it, following the odometry estimates that the robot generates.</span>
                </p>
                <p id="p_000683">
                  <span class="text" id="span_002172" smilref="Programming_Robots_with_ROS00009.smil#span_002172">So,</span>
                  <code xml:space="preserve" id="code_001011" smilref="Programming_Robots_with_ROS00009.smil#code_001011">amcl</code>
                  <span class="text" id="span_002173" smilref="Programming_Robots_with_ROS00009.smil#span_002173">starts off with a set of candidate poses centered around where we think that the robot is. Over time, as the robot moves around and takes sensor measurements of the world, this set of poses should converge to the actual pose of the robot. At any given time, the most likely pose of the robot, which is used for path planning, is the candidate pose with the highest probability. It's important to note, however, that this might not be the actual pose of the robot. It's likely to be</span>
                  <em id="em_000297" smilref="Programming_Robots_with_ROS00009.smil#em_000297">close</em>
                  <span class="text" id="span_002174" smilref="Programming_Robots_with_ROS00009.smil#span_002174">to the actual pose, but it's very unlikely to be</span>
                  <em id="em_000298" smilref="Programming_Robots_with_ROS00009.smil#em_000298">exactly</em>
                  <span class="text" id="span_002175" smilref="Programming_Robots_with_ROS00009.smil#span_002175">the actual pose. In practice, this means that when you use the navigation system to move the robot to a particular place in the world, it's likely to get close, but it will never end up in exactly the right place, even if the localization system claims that it's there. This is one of the trade-offs of using probabilistic algorithms; they're really robust and work well most of the time, but you can't guarantee that they're completely accurate. However, they're usually accurate enough for path planning and, when combined with a sensor-based local path-following algorithm, for navigation.</span>
                </p>
                <p id="p_000684" smilref="Programming_Robots_with_ROS00009.smil#p_000684">Now that you understand a bit about how the localization system works, let's take a look at it in action. First, let's make sure that any map server you might be running is stopped. Once you've done that run this launch file:</p>
                <p id="p_000685">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001012"><span class="text" id="span_002176" smilref="Programming_Robots_with_ROS00009.smil#span_002176">
user@hostname$ </span><strong id="strong_000121" smilref="Programming_Robots_with_ROS00009.smil#strong_000121">roslaunch turtlebot_stage turtlebot_in_stage.launch</strong>
</code>
                </p>
                <p data-type="indexterm" data-primary="rviz (ROS visualization)" data-secondary="for localization" id="ch10-idp25581296">
                  <span class="text" id="span_002177" smilref="Programming_Robots_with_ROS00009.smil#span_002177">This will start up a simulation of a simple maze world with a Turtlebot robot in it, launch a map server with a map made from this world, start the</span>
                  <code id="ch10-idp25578944" xml:space="preserve" smilref="Programming_Robots_with_ROS00009.smil#ch10-idp25578944">amcl</code>
                  <span class="text" id="span_002178" smilref="Programming_Robots_with_ROS00009.smil#span_002178">node, and launch an instance of</span>
                  <code xml:space="preserve" id="code_001013" smilref="Programming_Robots_with_ROS00009.smil#code_001013">rviz</code>
                  <span class="text" id="span_002179" smilref="Programming_Robots_with_ROS00009.smil#span_002179">so that you can see what's going on. Your</span>
                  <code xml:space="preserve" id="code_001014" smilref="Programming_Robots_with_ROS00009.smil#code_001014">rviz</code>
                  <span class="text" id="span_002180" smilref="Programming_Robots_with_ROS00009.smil#span_002180">window should look similar to</span>
                  <a data-type="xref" href="#ch10-turtlebot_rviz" external="false" id="a_000129" smilref="Programming_Robots_with_ROS00009.smil#a_000129">Figure 10-1</a>
                  <span class="text" id="span_002181" smilref="Programming_Robots_with_ROS00009.smil#span_002181">, and you should also see a few other windows appear (for the simulator and some other things; we'll ignore them for now).</span>
                </p>
                <figure id="figure_000040">
                  <h1 id="h1_000193" smilref="Programming_Robots_with_ROS00009.smil#h1_000193">Figure 10-1. The rviz view of a Turtlebot 2 robot being simulated in Stage</h1>
                  <div id="ch10-turtlebot_rviz" class="figure">
                    <img src="images/prwr_0903.jpg" alt="turtlebot_rviz" id="img_000070" />
                  </div>
                </figure>
                <p id="p_000686">
                  <span class="text" id="span_002182" smilref="Programming_Robots_with_ROS00009.smil#span_002182">Uncheck all of the displays in</span>
                  <code xml:space="preserve" id="code_001015" smilref="Programming_Robots_with_ROS00009.smil#code_001015">rviz</code>
                  <span class="text" id="span_002183" smilref="Programming_Robots_with_ROS00009.smil#span_002183">except RobotModel, Map, and ParticleCloud. We'll get back to the other displays later, when we talk about how the navigation system in ROS works. For now, you should be able to see the robot, a map (which has been hand-drawn, rather than learned from sensor data), and a set of green arrows, like in</span>
                  <a data-type="xref" href="#ch10-just_amcl_rviz" external="false" id="a_000130" smilref="Programming_Robots_with_ROS00009.smil#a_000130">Figure 10-2</a>
                  <span class="text" id="span_002184" smilref="Programming_Robots_with_ROS00009.smil#span_002184">. The green arrows are the pose estimates from</span>
                  <code xml:space="preserve" id="code_001016" smilref="Programming_Robots_with_ROS00009.smil#code_001016">amcl</code>
                  <span class="text" id="span_002185" smilref="Programming_Robots_with_ROS00009.smil#span_002185">; that is, the places where the localization algorithm thinks that the robot might be. With this launch file they're automatically generated, but in some situations, you might have to provide an initial position estimate yourself. You can do this by clicking on the "2D Pose Estimate" button, then clicking, holding, and dragging in the</span>
                  <code xml:space="preserve" id="code_001017" smilref="Programming_Robots_with_ROS00009.smil#code_001017">rviz</code>
                  <span class="text" id="span_002186" smilref="Programming_Robots_with_ROS00009.smil#span_002186">window. The arrow that you see is your estimate of where the robot should be in the map, and it's passed on to the</span>
                  <code xml:space="preserve" id="code_001018" smilref="Programming_Robots_with_ROS00009.smil#code_001018">amcl</code>
                  <span class="text" id="span_002187" smilref="Programming_Robots_with_ROS00009.smil#span_002187">algorithm. The algorithm then probabilistically generates possible poses around this initial estimate. Try this now. You can set the initial pose of the robot to anywhere in the map, even if it's really not there. Once you set the estimate, notice how the visualization of the robot jumps to that location. This is because</span>
                  <code xml:space="preserve" id="code_001019" smilref="Programming_Robots_with_ROS00009.smil#code_001019">rviz</code>
                  <span class="text" id="span_002188" smilref="Programming_Robots_with_ROS00009.smil#span_002188">relies on the pose estimate to place the robot in the map, while stage (the simulator) actually</span>
                  <em id="em_000299" smilref="Programming_Robots_with_ROS00009.smil#em_000299">knows</em>
                  <span class="text" id="span_002189" smilref="Programming_Robots_with_ROS00009.smil#span_002189">where the robot is.</span>
                </p>
                <figure id="figure_000041">
                  <h1 id="h1_000194" smilref="Programming_Robots_with_ROS00009.smil#h1_000194">Figure 10-2. rviz showing just the robot, the map, and the amcl localization estimates</h1>
                  <div id="ch10-just_amcl_rviz" class="figure">
                    <img src="images/prwr_1002.jpg" alt="just_amcl_rviz" id="img_000071" />
                  </div>
                </figure>
                <section data-type="sect2" data-pdf-bookmark="Getting a Good Initial Localization" id="section_000106">
                  <h1 id="h1_000195" smilref="Programming_Robots_with_ROS00009.smil#h1_000195">Getting a Good Initial Localization</h1>
                  <div class="sect2" id="ch10-idp25592912">
                    <p data-type="indexterm" data-primary="localization" data-secondary="initial" id="ch10-idp25594288">
                      <span class="text" id="span_002190" smilref="Programming_Robots_with_ROS00009.smil#span_002190">How do you get a good initial localization for the robot? After you have the hang of giving pose estimates using</span>
                      <code xml:space="preserve" id="code_001020" smilref="Programming_Robots_with_ROS00009.smil#code_001020">rviz</code>
                      <span class="text" id="span_002191" smilref="Programming_Robots_with_ROS00009.smil#span_002191">, try to give a pose estimate that reflects the actual position of the robot. You can see this in the stage simulation window. It's quite easy to get a rough estimate, but how can you tell how good it actually is?</span>
                    </p>
                    <p id="ch10-idp25597440" data-type="indexterm" data-primary="sensor data" data-secondary="for improving initial localization">
                      <span class="text" id="span_002192" smilref="Programming_Robots_with_ROS00009.smil#span_002192">One way to improve the estimate is to compare it to the robot's sensor data. Turn on the "LaserScan (kinect)" display, and you should see the data from the simulated laser range-finder on the Turtlebot. If the robot is well localized, then this data should line up well with the map.</span>
                      <a data-type="xref" href="#ch10-bad_initial_localization" external="false" id="a_000131" smilref="Programming_Robots_with_ROS00009.smil#a_000131">Figure 10-3</a>
                      <span class="text" id="span_002193" smilref="Programming_Robots_with_ROS00009.smil#span_002193">shows a poor initial estimate: the laser contact points don't line up with the walls at all.</span>
                    </p>
                    <figure id="figure_000042">
                      <h1 id="h1_000196" smilref="Programming_Robots_with_ROS00009.smil#h1_000196">Figure 10-3. A poor initial localization, where the sensor data does not line up with the map</h1>
                      <div id="ch10-bad_initial_localization" class="figure">
                        <img src="images/prwr_1003.jpg" alt="bad_amcl_rviz" id="img_000072" />
                      </div>
                    </figure>
                    <p id="p_000687">
                      <span class="text" id="span_002194" smilref="Programming_Robots_with_ROS00009.smil#span_002194">Try giving some more initial pose estimates, and see if you can get the sensor data to agree with the map. Remember that</span>
                      <code xml:space="preserve" id="code_001021" smilref="Programming_Robots_with_ROS00009.smil#code_001021">rviz</code>
                      <span class="text" id="span_002195" smilref="Programming_Robots_with_ROS00009.smil#span_002195">is rendering things in 3D, with perspective, and that the laser data is being shown slightly above the floor. This means that even a perfectly located robot might result in laser data looking like it's not quite on top of the walls in the map. Once you have the robot well localized again, you can get it to drive around the world. Don't worry if you're not in exactly the right place. As long as you're roughly localized, ROS can deal with it.</span>
                    </p>
                  </div>
                </section>
                <section data-type="sect2" data-pdf-bookmark="What's Going on Behind the Scenes" id="section_000107">
                  <h1 id="h1_000197" smilref="Programming_Robots_with_ROS00009.smil#h1_000197">What's Going on Behind the Scenes</h1>
                  <div class="sect2" id="ch10-idp25603424">
                    <p data-type="indexterm" data-primary="localization" data-secondary="and topics" id="ch10-idp25604768">
                      <span class="text" id="span_002196" smilref="Programming_Robots_with_ROS00009.smil#span_002196">You've seen how to localize the robot using</span>
                      <code xml:space="preserve" id="code_001022" smilref="Programming_Robots_with_ROS00009.smil#code_001022">rviz</code>
                      <span class="text" id="span_002197" smilref="Programming_Robots_with_ROS00009.smil#span_002197">, but what's actually happening behind the scenes? As with everything in ROS, it's all about messages sent over topics.</span>
                    </p>
                    <p id="p_000688">
                      <code xml:space="preserve" id="code_001023" smilref="Programming_Robots_with_ROS00009.smil#code_001023">rviz</code>
                      <span class="text" id="span_002198" smilref="Programming_Robots_with_ROS00009.smil#span_002198">subscribes to a topic called</span>
                      <code xml:space="preserve" id="code_001024" smilref="Programming_Robots_with_ROS00009.smil#code_001024">initialpose</code>
                      <span class="text" id="span_002199" smilref="Programming_Robots_with_ROS00009.smil#span_002199">, of type</span>
                      <code xml:space="preserve" id="code_001025" smilref="Programming_Robots_with_ROS00009.smil#code_001025">geometry_msgs/PoseWith Co varianceStamped</code>
                      <span class="text" id="span_002200" smilref="Programming_Robots_with_ROS00009.smil#span_002200">. When it gets a message on this topic, it resets the set of candidate poses that it's keeping, randomly generating them from a normal distribution, centered on the pose in the message. All</span>
                      <code xml:space="preserve" id="code_001026" smilref="Programming_Robots_with_ROS00009.smil#code_001026">rviz</code>
                      <span class="text" id="span_002201" smilref="Programming_Robots_with_ROS00009.smil#span_002201">is doing when you use it to set an initial pose is publishing a message on this topic.</span>
                    </p>
                    <p id="p_000689">
                      <span class="text" id="span_002202" smilref="Programming_Robots_with_ROS00009.smil#span_002202">Instead of using a normally distributed initial pose, you can get</span>
                      <code xml:space="preserve" id="code_001027" smilref="Programming_Robots_with_ROS00009.smil#code_001027">amcl</code>
                      <span class="text" id="span_002203" smilref="Programming_Robots_with_ROS00009.smil#span_002203">to use a uniform set of candidate poses, scattered all over the map. You might do this if you really don't have a good idea of where the robot is. However, this makes it (much) harder for the algorithms to converge on a good pose estimate, so you should only do this if you</span>
                      <em id="em_000300" smilref="Programming_Robots_with_ROS00009.smil#em_000300">really</em>
                      <span class="text" id="span_002204" smilref="Programming_Robots_with_ROS00009.smil#span_002204">don't know where the robot is starting. You can enable this behavior by making a service call to the</span>
                      <code xml:space="preserve" id="code_001028" smilref="Programming_Robots_with_ROS00009.smil#code_001028">global_localization</code>
                      <span class="text" id="span_002205" smilref="Programming_Robots_with_ROS00009.smil#span_002205">service, using an empty request (of type</span>
                      <code xml:space="preserve" id="code_001029" smilref="Programming_Robots_with_ROS00009.smil#code_001029">std_srvs/Empty</code>
                      <span class="text" id="span_002206" smilref="Programming_Robots_with_ROS00009.smil#span_002206">).</span>
                    </p>
                    <p id="p_000690">
                      <code xml:space="preserve" id="code_001030" smilref="Programming_Robots_with_ROS00009.smil#code_001030">amcl</code>
                      <span class="text" id="span_002207" smilref="Programming_Robots_with_ROS00009.smil#span_002207">was initially designed to work with robots that have a laser range-finder that generates</span>
                      <code xml:space="preserve" id="code_001031" smilref="Programming_Robots_with_ROS00009.smil#code_001031">sensor_msgs/LaserScan</code>
                      <span class="text" id="span_002208" smilref="Programming_Robots_with_ROS00009.smil#span_002208">messages. It subscribes to the topics</span>
                      <code xml:space="preserve" id="code_001032" smilref="Programming_Robots_with_ROS00009.smil#code_001032">scan</code>
                      <span class="text" id="span_002209" smilref="Programming_Robots_with_ROS00009.smil#span_002209">(for the laser),</span>
                      <code xml:space="preserve" id="code_001033" smilref="Programming_Robots_with_ROS00009.smil#code_001033">map</code>
                      <span class="text" id="span_002210" smilref="Programming_Robots_with_ROS00009.smil#span_002210">(for the map),</span>
                      <code xml:space="preserve" id="code_001034" smilref="Programming_Robots_with_ROS00009.smil#code_001034">initialpose</code>
                      <span class="text" id="span_002211" smilref="Programming_Robots_with_ROS00009.smil#span_002211">(for the pose estimate), and</span>
                      <code xml:space="preserve" id="code_001035" smilref="Programming_Robots_with_ROS00009.smil#code_001035">tf</code>
                      <span class="text" id="span_002212" smilref="Programming_Robots_with_ROS00009.smil#span_002212">(for transform information, which summarizes the odometry information published by the robot). It publishes on the</span>
                      <code xml:space="preserve" id="code_001036" smilref="Programming_Robots_with_ROS00009.smil#code_001036">tf</code>
                      <span class="text" id="span_002213" smilref="Programming_Robots_with_ROS00009.smil#span_002213">topic, with a transform from the</span>
                      <code xml:space="preserve" id="code_001037" smilref="Programming_Robots_with_ROS00009.smil#code_001037">odom</code>
                      <span class="text" id="span_002214" smilref="Programming_Robots_with_ROS00009.smil#span_002214">coordinate frame to the</span>
                      <code xml:space="preserve" id="code_001038" smilref="Programming_Robots_with_ROS00009.smil#code_001038">map</code>
                      <span class="text" id="span_002215" smilref="Programming_Robots_with_ROS00009.smil#span_002215">coordinate frame. This transform represents the correction that needs to be applied to the robot's odometry estimate to correctly locate it in the map coordinate frame. Generally, you don't need to worry about any of this, since ROS takes care of it for you. However, understanding the underlying mechanisms is helpful in understanding how the system can fail, and how you might fix it.</span>
                    </p>
                  </div>
                </section>
                <section data-type="sect2" data-pdf-bookmark="Tips for Setting a Better Initial Pose" id="section_000108">
                  <h1 id="h1_000198" smilref="Programming_Robots_with_ROS00009.smil#h1_000198">Tips for Setting a Better Initial Pose</h1>
                  <div class="sect2" id="ch10-idp25619456">
                    <p data-type="indexterm" data-primary="navigation" data-secondary="tips for setting better initial pose" id="ch10-idp25620624">
                      <span class="text" id="span_002216" smilref="Programming_Robots_with_ROS00009.smil#span_002216">Good navigation relies on a good localization of the robot. One way to improve the initial pose of the robot is to look at its sensor readings in</span>
                      <code xml:space="preserve" id="code_001039" smilref="Programming_Robots_with_ROS00009.smil#code_001039">rviz</code>
                      <span class="text" id="span_002217" smilref="Programming_Robots_with_ROS00009.smil#span_002217">and make sure that they match the map well, like we did earlier. This works particularly well if you have a laser range-finder, since the data from it is like a local map. Move the initial pose estimate around until the laser readings correspond well to the map, and you should have a good pose estimate.</span>
                    </p>
                    <p id="ch10-idp25626336" data-type="indexterm" data-startref="ix_10-navigation-asciidoc1">
                      <span class="text" id="span_002218" smilref="Programming_Robots_with_ROS00009.smil#span_002218">To make the pose estimate even better, you can drive the robot around a bit before doing any autonomous navigation. This will let the set of candidate particles in the</span>
                      <code xml:space="preserve" id="code_001040" smilref="Programming_Robots_with_ROS00009.smil#code_001040">amcl</code>
                      <span class="text" id="span_002219" smilref="Programming_Robots_with_ROS00009.smil#span_002219">node converge onto the actual position of the robot, and give a more reliable estimate of where it is. With a bit of practice, you can learn the sorts of movements that will make this happen quickly for your particular robot and sensors.</span>
                    </p>
                  </div>
                </section>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Using the ROS Navigation Stack" id="section_000109">
              <h1 id="h1_000199" smilref="Programming_Robots_with_ROS00009.smil#h1_000199">Using the ROS Navigation Stack</h1>
              <div class="sect1" id="ch10-idp25011952">
                <p data-type="indexterm" data-primary="navigation" data-secondary="with ROS nav stack" id="ch10-ix_10-navigation-asciidoc4">
                  <span class="text" id="span_002220" smilref="Programming_Robots_with_ROS00009.smil#span_002220">Now that we've got a (more-or-less) localized robot, let's get it to drive around a bit. We're going to start by interacting with the navigation system, often called the</span>
                  <em id="em_000301" smilref="Programming_Robots_with_ROS00009.smil#em_000301">nav stack</em>
                  <span class="text" id="span_002221" smilref="Programming_Robots_with_ROS00009.smil#span_002221">by ROS old-timers, through</span>
                  <code id="ch10-ix_10-navigation-asciidoc5" xml:space="preserve" smilref="Programming_Robots_with_ROS00009.smil#ch10-ix_10-navigation-asciidoc5">rviz</code>
                  <span class="text" id="span_002222" smilref="Programming_Robots_with_ROS00009.smil#span_002222">. First, though, let's talk a bit about what the nav stack actually is and how it works.</span>
                </p>
                <section data-type="sect2" data-pdf-bookmark="The ROS Navigation Stack" id="section_000110">
                  <h1 id="h1_000200" smilref="Programming_Robots_with_ROS00009.smil#h1_000200">The ROS Navigation Stack</h1>
                  <div class="sect2" id="ch10-idp25631952">
                    <p id="p_000691">
                      <span class="text" id="span_002223" smilref="Programming_Robots_with_ROS00009.smil#span_002223">The ROS navigation system is pretty complex, and we're only going to scratch the surface of it here. Full details of what it can do and how it can be configured are available on the</span>
                      <a href="http://wiki.ros.org/navigation?distro=indigo" external="true" id="a_000132" smilref="Programming_Robots_with_ROS00009.smil#a_000132">navigation wiki page</a>
                      <span class="text" id="span_002224" smilref="Programming_Robots_with_ROS00009.smil#span_002224">. For now, we're going to assume that the nav stack has been configured for your robot and is working as it should. If this isn't the case, you're going to need to go to the wiki and follow the instructions there (or jump ahead to</span>
                      <a data-type="xref" href="#ch17-rossify_robots2" external="false" id="a_000133" smilref="Programming_Robots_with_ROS00009.smil#a_000133">Chapter 17</a>
                      <span class="text" id="span_002225" smilref="Programming_Robots_with_ROS00009.smil#span_002225">).</span>
                    </p>
                    <p id="p_000692" smilref="Programming_Robots_with_ROS00009.smil#p_000692">At its heart, the nav stack is a system that allows a ROS-enabled robot to move about the world to a specified goal position efficiently, and without hitting things along the way. It integrates information from the map, localization system, sensors, and odometry to plan a good path from the current position to the goal position, and then follows it to the best of the robot's ability. If the robot gets stuck, usually because of some unmapped obstacles, it can replan and recover. The nav stack is one of the most heavily used parts of ROS, since almost every robot that moves uses it.</p>
                    <p id="ch10-idp25636864" data-type="indexterm" data-primary="navigation stack (nav stack)" data-secondary="steps in operation of" smilref="Programming_Robots_with_ROS00009.smil#ch10-idp25636864">At a high level, the nav stack works like this:</p>
                    <list type="ol" id="list_000009">
                      <li id="li_000030">
                        <p data-type="indexterm" data-primary="navigation goal" id="ch10-idp25639152">
                          <span class="text" id="span_002226" smilref="Programming_Robots_with_ROS00009.smil#span_002226">A</span>
                          <em id="em_000302" smilref="Programming_Robots_with_ROS00009.smil#em_000302">navigation goal</em>
                          <span class="text" id="span_002227" smilref="Programming_Robots_with_ROS00009.smil#span_002227">is sent to the nav stack. This is done using an action call with a goal of type</span>
                          <code xml:space="preserve" id="code_001041" smilref="Programming_Robots_with_ROS00009.smil#code_001041">MoveBaseGoal</code>
                          <span class="text" id="span_002228" smilref="Programming_Robots_with_ROS00009.smil#span_002228">, which specifies a goal pose (position and orientation) in some coordinate frame (commonly the</span>
                          <code xml:space="preserve" id="code_001042" smilref="Programming_Robots_with_ROS00009.smil#code_001042">map</code>
                          <span class="text" id="span_002229" smilref="Programming_Robots_with_ROS00009.smil#span_002229">frame).</span>
                        </p>
                      </li>
                      <li id="li_000031">
                        <p data-type="indexterm" data-primary="global planner" id="ch10-idp25642368">
                          <span class="text" id="span_002230" smilref="Programming_Robots_with_ROS00009.smil#span_002230">The nav stack uses a path-planning algorithm in the</span>
                          <em id="em_000303" smilref="Programming_Robots_with_ROS00009.smil#em_000303">global planner</em>
                          <span class="text" id="span_002231" smilref="Programming_Robots_with_ROS00009.smil#span_002231">to plan the shortest path from the current location to the goal, using the map.</span>
                        </p>
                      </li>
                      <li id="li_000032">
                        <p data-type="indexterm" data-primary="local planner" id="ch10-idp25644320">
                          <span class="text" id="span_002232" smilref="Programming_Robots_with_ROS00009.smil#span_002232">This path is passed to the</span>
                          <em id="em_000304" smilref="Programming_Robots_with_ROS00009.smil#em_000304">local planner</em>
                          <span class="text" id="span_002233" smilref="Programming_Robots_with_ROS00009.smil#span_002233">, which tries to drive the robot along the path. The local planner uses information from the sensors in order to avoid obstacles that appear in front of the robot but that are not in the map, such as people. If the local planner gets stuck and cannot make progress, it can ask the global planner to make a new plan and then attempt to follow that.</span>
                        </p>
                      </li>
                      <li id="li_000033">
                        <p id="p_000693" smilref="Programming_Robots_with_ROS00009.smil#p_000693">When the robot gets close to the goal pose, the action terminates and we're done.</p>
                      </li>
                    </list>
                    <p id="p_000694">
                      <span class="text" id="span_002234" smilref="Programming_Robots_with_ROS00009.smil#span_002234">We'll start by looking at how to do this in</span>
                      <code xml:space="preserve" id="code_001043" smilref="Programming_Robots_with_ROS00009.smil#code_001043">rviz</code>
                      <span class="text" id="span_002235" smilref="Programming_Robots_with_ROS00009.smil#span_002235">.</span>
                    </p>
                  </div>
                </section>
                <section data-type="sect2" data-pdf-bookmark="Navigating in rviz" id="section_000111">
                  <h1 id="h1_000201" smilref="Programming_Robots_with_ROS00009.smil#h1_000201">Navigating in rviz</h1>
                  <div class="sect2" id="ch10-idp25648016">
                    <p data-type="indexterm" data-primary="navigation stack (nav stack)" data-secondary="navigating in rviz" id="ch10-idp25649392">
                      <span class="text" id="span_002236" smilref="Programming_Robots_with_ROS00009.smil#span_002236">Assuming that your robot is well localized, getting it to navigate around the world is easy. Click on the "2D Nav Goal" button, and then click and drag in the</span>
                      <code xml:space="preserve" id="code_001044" smilref="Programming_Robots_with_ROS00009.smil#code_001044">rviz</code>
                      <span class="text" id="span_002237" smilref="Programming_Robots_with_ROS00009.smil#span_002237">window to give the robot a target position, known as a</span>
                      <em id="ch10-idp25650432" smilref="Programming_Robots_with_ROS00009.smil#ch10-idp25650432">goal pose</em>
                      <span class="text" id="span_002238" smilref="Programming_Robots_with_ROS00009.smil#span_002238">. The robot should drive to the goal pose on its own, not hitting anything along the way. Congratulations! You've just used the nav stack in ROS.</span>
                    </p>
                    <p data-type="indexterm" data-primary="amcl" data-secondary="possible poses maintained by" id="ch10-idp25653024">
                      <span class="text" id="span_002239" smilref="Programming_Robots_with_ROS00009.smil#span_002239">Before we show you what's actually going on under the hood, take a look at the set of possible poses maintained by</span>
                      <code xml:space="preserve" id="code_001045" smilref="Programming_Robots_with_ROS00009.smil#code_001045">amcl</code>
                      <span class="text" id="span_002240" smilref="Programming_Robots_with_ROS00009.smil#span_002240">. As the robot was moving,</span>
                      <code xml:space="preserve" id="code_001046" smilref="Programming_Robots_with_ROS00009.smil#code_001046">amcl</code>
                      <span class="text" id="span_002241" smilref="Programming_Robots_with_ROS00009.smil#span_002241">was comparing the readings from the laser range-finder to what it expected to see, given the possible poses and the map. If the readings and the predictions were similar in a particular candidate pose,</span>
                      <code xml:space="preserve" id="code_001047" smilref="Programming_Robots_with_ROS00009.smil#code_001047">amcl</code>
                      <span class="text" id="span_002242" smilref="Programming_Robots_with_ROS00009.smil#span_002242">gave it a higher probability of being the real pose. If the readings and the predictions were very different,</span>
                      <code xml:space="preserve" id="code_001048" smilref="Programming_Robots_with_ROS00009.smil#code_001048">amcl</code>
                      <span class="text" id="span_002243" smilref="Programming_Robots_with_ROS00009.smil#span_002243">lowered the probability of the pose. Poses with very low probabilities were deleted and replaced with new ones close to the existing ones with higher probability. Over time, the cloud of poses converged onto the actual position of the robot.</span>
                    </p>
                    <p id="p_000695">
                      <span class="text" id="span_002244" smilref="Programming_Robots_with_ROS00009.smil#span_002244">This convergence of the</span>
                      <code xml:space="preserve" id="code_001049" smilref="Programming_Robots_with_ROS00009.smil#code_001049">amcl</code>
                      <span class="text" id="span_002245" smilref="Programming_Robots_with_ROS00009.smil#span_002245">localization happens even if the pose is slightly off. Give the robot a new pose estimate a little bit away from its actual location, and notice how the set of candidate poses spreads out again. Now, give it a nav goal a small distance away, and watch what happens to the set of candidate poses. Either the navigation stack failed because the pose estimate was just too far off to recover from, or the pose estimate converged on the robot's position. If navigation failed, then try again, making the pose estimate a little closer to the robot's actual position than the last time. Keep trying it until you can get the localization estimate to converge, so that you can get a sense of how far off you can be and still recover.</span>
                    </p>
                    <p id="p_000696" smilref="Programming_Robots_with_ROS00009.smil#p_000696">Once you're done confusing the robot, make sure it's well-localized again. Now, we're going to take a look at what's actually going on inside the nav stack. You don't, strictly speaking, need to know this to use the nav stack, but it's often useful when it comes to understanding situations where there's a navigation failure.</p>
                  </div>
                </section>
                <section data-type="sect2" data-pdf-bookmark="Seeing What's Going On" id="section_000112">
                  <h1 id="h1_000202" smilref="Programming_Robots_with_ROS00009.smil#h1_000202">Seeing What's Going On</h1>
                  <div class="sect2" id="ch10-idp25659040">
                    <p data-type="indexterm" data-primary="navigation stack (nav stack)" data-secondary="in action" id="ch10-ix_10-navigation-asciidoc6">
                      <span class="text" id="span_002246" smilref="Programming_Robots_with_ROS00009.smil#span_002246">There are a lot of moving parts in the nav stack, and you can see what many of them are doing using</span>
                      <code xml:space="preserve" id="code_001050" smilref="Programming_Robots_with_ROS00009.smil#code_001050">rviz</code>
                      <span class="text" id="span_002247" smilref="Programming_Robots_with_ROS00009.smil#span_002247">. In this section, we're going to get the robot to navigate around the world, looking at how the various functions of the nav stack interact.</span>
                    </p>
                    <p data-type="indexterm" data-primary="costmaps" id="ch10-ix_10-navigation-asciidoc7" data-secondary="costmaps">
                      <span class="text" id="span_002248" smilref="Programming_Robots_with_ROS00009.smil#span_002248">The first thing that the nav stack does is to create the</span>
                      <em id="em_000305" smilref="Programming_Robots_with_ROS00009.smil#em_000305">global costmap</em>
                      <span class="text" id="span_002249" smilref="Programming_Robots_with_ROS00009.smil#span_002249">. This is a data structure that says how good or bad it is for the robot to be in a particular place in the map. Being in collision with a wall is really bad. Being in open space is good. Getting close to a wall is worse than being in open space, but not as bad as hitting it. Click the checkbox for the Global Planning display, expand it, then click the Costmap checkbox. This will show you the global costmap, as in</span>
                      <a data-type="xref" href="#ch10-global_costmap_rviz" external="false" id="a_000134" smilref="Programming_Robots_with_ROS00009.smil#a_000134">Figure 10-4</a>
                      <span class="text" id="span_002250" smilref="Programming_Robots_with_ROS00009.smil#span_002250">.</span>
                    </p>
                    <figure id="figure_000043">
                      <h1 id="h1_000203" smilref="Programming_Robots_with_ROS00009.smil#h1_000203">Figure 10-4. The global costmap, showing more expensive areas close to the walls</h1>
                      <div id="ch10-global_costmap_rviz" class="figure">
                        <img src="images/prwr_1004.jpg" alt="global_costmap" id="img_000073" />
                      </div>
                    </figure>
                    <p id="p_000697">
                      <span class="text" id="span_002251" smilref="Programming_Robots_with_ROS00009.smil#span_002251">As with most things in ROS, the costmap is available on a topic. In this case, the topic is</span>
                      <code xml:space="preserve" id="code_001051" smilref="Programming_Robots_with_ROS00009.smil#code_001051">/move_base/global_costmap/costmap</code>
                      <span class="text" id="span_002252" smilref="Programming_Robots_with_ROS00009.smil#span_002252">, which has a type of</span>
                      <code xml:space="preserve" id="code_001052" smilref="Programming_Robots_with_ROS00009.smil#code_001052">nav_msgs/OccupancyGrid</code>
                      <span class="text" id="span_002253" smilref="Programming_Robots_with_ROS00009.smil#span_002253">. In general, it's a good idea to make internal data structures in your nodes visible in this way, since it lets you look at them in</span>
                      <code xml:space="preserve" id="code_001053" smilref="Programming_Robots_with_ROS00009.smil#code_001053">rviz</code>
                      <span class="text" id="span_002254" smilref="Programming_Robots_with_ROS00009.smil#span_002254">, which can be invaluable for debugging and figuring out why your robot isn't doing what you expect it to.</span>
                    </p>
                    <p id="p_000698">
                      <span class="text" id="span_002255" smilref="Programming_Robots_with_ROS00009.smil#span_002255">Enable the "Path (global)" display to see the global path that ROS calculates, the "Pose (move_base)" display to see the goal pose, and the "Planner" display to see the near-term path. Now give the robot a navigation goal and see what happens. Once it starts moving, you should see something like</span>
                      <a data-type="xref" href="#ch10-global_path_plan" external="false" id="a_000135" smilref="Programming_Robots_with_ROS00009.smil#a_000135">Figure 10-5</a>
                      <span class="text" id="span_002256" smilref="Programming_Robots_with_ROS00009.smil#span_002256">.</span>
                    </p>
                    <figure id="figure_000044">
                      <h1 id="h1_000204" smilref="Programming_Robots_with_ROS00009.smil#h1_000204">Figure 10-5. The robot in motion, showing the global path that it has calculated</h1>
                      <div id="ch10-global_path_plan" class="figure">
                        <img src="images/prwr_1005.jpg" alt="global_plan" id="img_000074" />
                      </div>
                    </figure>
                    <p id="ch10-idp25676000" data-type="indexterm" data-primary="goal pose" smilref="Programming_Robots_with_ROS00009.smil#ch10-idp25676000">The goal pose is shown by the red arrow in the lower right of the map. The path that ROS has decided on is shown as the green line. Notice how this line stays in areas of low cost, away from the walls. The part of the path that is closest to the robot is shown by the red line.</p>
                    <p id="ch10-idp25682368" data-type="indexterm" data-startref="ix_10-navigation-asciidoc7" data-primary="local costmaps">
                      <span class="text" id="span_002257" smilref="Programming_Robots_with_ROS00009.smil#span_002257">The global path is the one that the robot wants to follow, but the</span>
                      <em id="em_000306" smilref="Programming_Robots_with_ROS00009.smil#em_000306">actual</em>
                      <span class="text" id="span_002258" smilref="Programming_Robots_with_ROS00009.smil#span_002258">path that it moves along is determined by the local planner. The local planner balances following the global path with avoiding local obstacles that are detected by the robot's sensors, but are not in the map. Enable the "Local Planning" display (and make sure that the "Costmap", "Planner", and "Cost Cloud" displays are enabled) to see the local costmap and planning information (see</span>
                      <a data-type="xref" href="#ch10-full_nav_rviz" external="false" id="a_000136" smilref="Programming_Robots_with_ROS00009.smil#a_000136">Figure 10-6</a>
                      <span class="text" id="span_002259" smilref="Programming_Robots_with_ROS00009.smil#span_002259">). The local planner balances following the path and not hitting things, and shows good places to move through as "hot" colors and bad places as "cold" colors. The local costmap shows how good or bad it thinks cells are, with hot colors being bad and cold colors being good (confusingly). Give the robot a few navigation goals, and see how the local path mostly stays within the red regions of the planner visualization. Also notice how the planner and the local costmap are attached to the robot's coordinate frame, and follow it around.</span>
                    </p>
                    <figure id="figure_000045">
                      <h1 id="h1_000205" smilref="Programming_Robots_with_ROS00009.smil#h1_000205">Figure 10-6. A Turtlebot driving to a navigation goal, with all displays enabled</h1>
                      <div id="ch10-full_nav_rviz" class="figure">
                        <img src="images/prwr_1006.jpg" alt="full_nav" id="img_000075" />
                      </div>
                    </figure>
                    <p id="ch10-idp25688064" data-type="indexterm" data-startref="ix_10-navigation-asciidoc4">
                      <span class="text" id="span_002260" smilref="Programming_Robots_with_ROS00009.smil#span_002260">Now that you know how to get your robot to navigate around the world using</span>
                      <code xml:space="preserve" id="code_001054" smilref="Programming_Robots_with_ROS00009.smil#code_001054">rviz</code>
                      <span class="text" id="span_002261" smilref="Programming_Robots_with_ROS00009.smil#span_002261">, let's look at how to do the same thing in a program.</span>
                    </p>
                  </div>
                </section>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Navigating in Code" id="section_000113">
              <h1 id="h1_000206" smilref="Programming_Robots_with_ROS00009.smil#h1_000206">Navigating in Code</h1>
              <div class="sect1" id="ch10-idp25659664">
                <p data-type="indexterm" data-primary="navigation" data-secondary="using code" id="ch10-ix_10-navigation-asciidoc9">
                  <span class="text" id="span_002262" smilref="Programming_Robots_with_ROS00009.smil#span_002262">It's just as easy to move your robot around using code as it is to move it with</span>
                  <code xml:space="preserve" id="code_001055" smilref="Programming_Robots_with_ROS00009.smil#code_001055">rviz</code>
                  <span class="text" id="span_002263" smilref="Programming_Robots_with_ROS00009.smil#span_002263">. All you have to do is make the action calls yourself. You can send the robot on a patrol with our example</span>
                  <code xml:space="preserve" id="code_001056" smilref="Programming_Robots_with_ROS00009.smil#code_001056">patrol</code>
                  <span class="text" id="span_002264" smilref="Programming_Robots_with_ROS00009.smil#span_002264">node:</span>
                </p>
                <p id="p_000699">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001057"><span class="text" id="span_002265" smilref="Programming_Robots_with_ROS00009.smil#span_002265">
user@hostname$ </span><strong id="strong_000122" smilref="Programming_Robots_with_ROS00009.smil#strong_000122">rosrun navigation patrol.py</strong>
</code>
                </p>
                <p data-type="indexterm" data-primary="move_base" data-secondary="and patrol node" id="ch10-idp25694880">
                  <span class="text" id="span_002266" smilref="Programming_Robots_with_ROS00009.smil#span_002266">This node, shown in</span>
                  <a data-type="xref" href="#ch10-patrol_node" external="false" id="a_000137" smilref="Programming_Robots_with_ROS00009.smil#a_000137">Example 10-1</a>
                  <span class="text" id="span_002267" smilref="Programming_Robots_with_ROS00009.smil#span_002267">, has a list of goal poses that it cycles through in order, calling the</span>
                  <code xml:space="preserve" id="code_001058" smilref="Programming_Robots_with_ROS00009.smil#code_001058">move_base</code>
                  <span class="text" id="span_002268" smilref="Programming_Robots_with_ROS00009.smil#span_002268">action repeatedly and then waiting for it to terminate.</span>
                </p>
                <h1 id="h1_000207" smilref="Programming_Robots_with_ROS00009.smil#h1_000207">Example 10-1. patrol.py</h1>
                <div id="ch10-patrol_node" data-type="example">
                  <p id="p_000700">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001059"><span class="text" id="span_002269" smilref="Programming_Robots_with_ROS00009.smil#span_002269">#!/usr/bin/env python</span>

<span class="text" id="span_002270" smilref="Programming_Robots_with_ROS00009.smil#span_002270">import</span> <span class="text" id="span_002271" smilref="Programming_Robots_with_ROS00009.smil#span_002271">rospy</span>
<span class="text" id="span_002272" smilref="Programming_Robots_with_ROS00009.smil#span_002272">import</span> <span class="text" id="span_002273" smilref="Programming_Robots_with_ROS00009.smil#span_002273">actionlib</span>

<span class="text" id="span_002274" smilref="Programming_Robots_with_ROS00009.smil#span_002274">from</span> <span class="text" id="span_002275" smilref="Programming_Robots_with_ROS00009.smil#span_002275">move_base_msgs.msg</span> <span class="text" id="span_002276" smilref="Programming_Robots_with_ROS00009.smil#span_002276">import</span> <span class="text" id="span_002277" smilref="Programming_Robots_with_ROS00009.smil#span_002277">MoveBaseAction</span><span class="text" id="span_002278" smilref="Programming_Robots_with_ROS00009.smil#span_002278">,</span> <span class="text" id="span_002279" smilref="Programming_Robots_with_ROS00009.smil#span_002279">MoveBaseGoal</span>


<span class="text" id="span_002280" smilref="Programming_Robots_with_ROS00009.smil#span_002280">waypoints</span> <span class="text" id="span_002281" smilref="Programming_Robots_with_ROS00009.smil#span_002281">=</span> <span class="text" id="span_002282" smilref="Programming_Robots_with_ROS00009.smil#span_002282">[</span>  <a class="co" id="ch10-co_navigating_about_the_world_CO1-1" href="#ch10-callout_navigating_about_the_world_CO1-1" external="false"><img src="images/1.jpg" alt="1" id="img_000076" /></a>
    <span class="text" id="span_002283" smilref="Programming_Robots_with_ROS00009.smil#span_002283">[</span><span class="text" id="span_002284" smilref="Programming_Robots_with_ROS00009.smil#span_002284">(</span><span class="text" id="span_002285" smilref="Programming_Robots_with_ROS00009.smil#span_002285">2.1</span><span class="text" id="span_002286" smilref="Programming_Robots_with_ROS00009.smil#span_002286">,</span> <span class="text" id="span_002287" smilref="Programming_Robots_with_ROS00009.smil#span_002287">2.2</span><span class="text" id="span_002288" smilref="Programming_Robots_with_ROS00009.smil#span_002288">,</span> <span class="text" id="span_002289" smilref="Programming_Robots_with_ROS00009.smil#span_002289">0.0</span><span class="text" id="span_002290" smilref="Programming_Robots_with_ROS00009.smil#span_002290">)</span><span class="text" id="span_002291" smilref="Programming_Robots_with_ROS00009.smil#span_002291">,</span> <span class="text" id="span_002292" smilref="Programming_Robots_with_ROS00009.smil#span_002292">(</span><span class="text" id="span_002293" smilref="Programming_Robots_with_ROS00009.smil#span_002293">0.0</span><span class="text" id="span_002294" smilref="Programming_Robots_with_ROS00009.smil#span_002294">,</span> <span class="text" id="span_002295" smilref="Programming_Robots_with_ROS00009.smil#span_002295">0.0</span><span class="text" id="span_002296" smilref="Programming_Robots_with_ROS00009.smil#span_002296">,</span> <span class="text" id="span_002297" smilref="Programming_Robots_with_ROS00009.smil#span_002297">0.0</span><span class="text" id="span_002298" smilref="Programming_Robots_with_ROS00009.smil#span_002298">,</span> <span class="text" id="span_002299" smilref="Programming_Robots_with_ROS00009.smil#span_002299">1.0</span><span class="text" id="span_002300" smilref="Programming_Robots_with_ROS00009.smil#span_002300">)</span><span class="text" id="span_002301" smilref="Programming_Robots_with_ROS00009.smil#span_002301">]</span><span class="text" id="span_002302" smilref="Programming_Robots_with_ROS00009.smil#span_002302">,</span>
    <span class="text" id="span_002303" smilref="Programming_Robots_with_ROS00009.smil#span_002303">[</span><span class="text" id="span_002304" smilref="Programming_Robots_with_ROS00009.smil#span_002304">(</span><span class="text" id="span_002305" smilref="Programming_Robots_with_ROS00009.smil#span_002305">6.5</span><span class="text" id="span_002306" smilref="Programming_Robots_with_ROS00009.smil#span_002306">,</span> <span class="text" id="span_002307" smilref="Programming_Robots_with_ROS00009.smil#span_002307">4.43</span><span class="text" id="span_002308" smilref="Programming_Robots_with_ROS00009.smil#span_002308">,</span> <span class="text" id="span_002309" smilref="Programming_Robots_with_ROS00009.smil#span_002309">0.0</span><span class="text" id="span_002310" smilref="Programming_Robots_with_ROS00009.smil#span_002310">)</span><span class="text" id="span_002311" smilref="Programming_Robots_with_ROS00009.smil#span_002311">,</span> <span class="text" id="span_002312" smilref="Programming_Robots_with_ROS00009.smil#span_002312">(</span><span class="text" id="span_002313" smilref="Programming_Robots_with_ROS00009.smil#span_002313">0.0</span><span class="text" id="span_002314" smilref="Programming_Robots_with_ROS00009.smil#span_002314">,</span> <span class="text" id="span_002315" smilref="Programming_Robots_with_ROS00009.smil#span_002315">0.0</span><span class="text" id="span_002316" smilref="Programming_Robots_with_ROS00009.smil#span_002316">,</span> <span class="text" id="span_002317" smilref="Programming_Robots_with_ROS00009.smil#span_002317">-</span><span class="text" id="span_002318" smilref="Programming_Robots_with_ROS00009.smil#span_002318">0.984047240305</span><span class="text" id="span_002319" smilref="Programming_Robots_with_ROS00009.smil#span_002319">,</span> <span class="text" id="span_002320" smilref="Programming_Robots_with_ROS00009.smil#span_002320">0.177907360295</span><span class="text" id="span_002321" smilref="Programming_Robots_with_ROS00009.smil#span_002321">)</span><span class="text" id="span_002322" smilref="Programming_Robots_with_ROS00009.smil#span_002322">]</span>
<span class="text" id="span_002323" smilref="Programming_Robots_with_ROS00009.smil#span_002323">]</span>


<span class="text" id="span_002324" smilref="Programming_Robots_with_ROS00009.smil#span_002324">def</span> <span class="text" id="span_002325" smilref="Programming_Robots_with_ROS00009.smil#span_002325">goal_pose</span><span class="text" id="span_002326" smilref="Programming_Robots_with_ROS00009.smil#span_002326">(</span><span class="text" id="span_002327" smilref="Programming_Robots_with_ROS00009.smil#span_002327">pose</span><span class="text" id="span_002328" smilref="Programming_Robots_with_ROS00009.smil#span_002328">)</span><span class="text" id="span_002329" smilref="Programming_Robots_with_ROS00009.smil#span_002329">:</span>  <a class="co" id="ch10-co_navigating_about_the_world_CO1-2" href="#ch10-callout_navigating_about_the_world_CO1-2" external="false"><img src="images/2.jpg" alt="2" id="img_000077" /></a>
    <span class="text" id="span_002330" smilref="Programming_Robots_with_ROS00009.smil#span_002330">goal_pose</span> <span class="text" id="span_002331" smilref="Programming_Robots_with_ROS00009.smil#span_002331">=</span> <span class="text" id="span_002332" smilref="Programming_Robots_with_ROS00009.smil#span_002332">MoveBaseGoal</span><span class="text" id="span_002333" smilref="Programming_Robots_with_ROS00009.smil#span_002333">(</span><span class="text" id="span_002334" smilref="Programming_Robots_with_ROS00009.smil#span_002334">)</span>
    <span class="text" id="span_002335" smilref="Programming_Robots_with_ROS00009.smil#span_002335">goal_pose</span><span class="text" id="span_002336" smilref="Programming_Robots_with_ROS00009.smil#span_002336">.</span><span class="text" id="span_002337" smilref="Programming_Robots_with_ROS00009.smil#span_002337">target_pose</span><span class="text" id="span_002338" smilref="Programming_Robots_with_ROS00009.smil#span_002338">.</span><span class="text" id="span_002339" smilref="Programming_Robots_with_ROS00009.smil#span_002339">header</span><span class="text" id="span_002340" smilref="Programming_Robots_with_ROS00009.smil#span_002340">.</span><span class="text" id="span_002341" smilref="Programming_Robots_with_ROS00009.smil#span_002341">frame_id</span> <span class="text" id="span_002342" smilref="Programming_Robots_with_ROS00009.smil#span_002342">=</span> <span class="text" id="span_002343" smilref="Programming_Robots_with_ROS00009.smil#span_002343">'</span><span class="text" id="span_002344" smilref="Programming_Robots_with_ROS00009.smil#span_002344">map</span><span class="text" id="span_002345" smilref="Programming_Robots_with_ROS00009.smil#span_002345">'</span>
    <span class="text" id="span_002346" smilref="Programming_Robots_with_ROS00009.smil#span_002346">goal_pose</span><span class="text" id="span_002347" smilref="Programming_Robots_with_ROS00009.smil#span_002347">.</span><span class="text" id="span_002348" smilref="Programming_Robots_with_ROS00009.smil#span_002348">target_pose</span><span class="text" id="span_002349" smilref="Programming_Robots_with_ROS00009.smil#span_002349">.</span><span class="text" id="span_002350" smilref="Programming_Robots_with_ROS00009.smil#span_002350">pose</span><span class="text" id="span_002351" smilref="Programming_Robots_with_ROS00009.smil#span_002351">.</span><span class="text" id="span_002352" smilref="Programming_Robots_with_ROS00009.smil#span_002352">position</span><span class="text" id="span_002353" smilref="Programming_Robots_with_ROS00009.smil#span_002353">.</span><span class="text" id="span_002354" smilref="Programming_Robots_with_ROS00009.smil#span_002354">x</span> <span class="text" id="span_002355" smilref="Programming_Robots_with_ROS00009.smil#span_002355">=</span> <span class="text" id="span_002356" smilref="Programming_Robots_with_ROS00009.smil#span_002356">pose</span><span class="text" id="span_002357" smilref="Programming_Robots_with_ROS00009.smil#span_002357">[</span><span class="text" id="span_002358" smilref="Programming_Robots_with_ROS00009.smil#span_002358">0</span><span class="text" id="span_002359" smilref="Programming_Robots_with_ROS00009.smil#span_002359">]</span><span class="text" id="span_002360" smilref="Programming_Robots_with_ROS00009.smil#span_002360">[</span><span class="text" id="span_002361" smilref="Programming_Robots_with_ROS00009.smil#span_002361">0</span><span class="text" id="span_002362" smilref="Programming_Robots_with_ROS00009.smil#span_002362">]</span>
    <span class="text" id="span_002363" smilref="Programming_Robots_with_ROS00009.smil#span_002363">goal_pose</span><span class="text" id="span_002364" smilref="Programming_Robots_with_ROS00009.smil#span_002364">.</span><span class="text" id="span_002365" smilref="Programming_Robots_with_ROS00009.smil#span_002365">target_pose</span><span class="text" id="span_002366" smilref="Programming_Robots_with_ROS00009.smil#span_002366">.</span><span class="text" id="span_002367" smilref="Programming_Robots_with_ROS00009.smil#span_002367">pose</span><span class="text" id="span_002368" smilref="Programming_Robots_with_ROS00009.smil#span_002368">.</span><span class="text" id="span_002369" smilref="Programming_Robots_with_ROS00009.smil#span_002369">position</span><span class="text" id="span_002370" smilref="Programming_Robots_with_ROS00009.smil#span_002370">.</span><span class="text" id="span_002371" smilref="Programming_Robots_with_ROS00009.smil#span_002371">y</span> <span class="text" id="span_002372" smilref="Programming_Robots_with_ROS00009.smil#span_002372">=</span> <span class="text" id="span_002373" smilref="Programming_Robots_with_ROS00009.smil#span_002373">pose</span><span class="text" id="span_002374" smilref="Programming_Robots_with_ROS00009.smil#span_002374">[</span><span class="text" id="span_002375" smilref="Programming_Robots_with_ROS00009.smil#span_002375">0</span><span class="text" id="span_002376" smilref="Programming_Robots_with_ROS00009.smil#span_002376">]</span><span class="text" id="span_002377" smilref="Programming_Robots_with_ROS00009.smil#span_002377">[</span><span class="text" id="span_002378" smilref="Programming_Robots_with_ROS00009.smil#span_002378">1</span><span class="text" id="span_002379" smilref="Programming_Robots_with_ROS00009.smil#span_002379">]</span>
    <span class="text" id="span_002380" smilref="Programming_Robots_with_ROS00009.smil#span_002380">goal_pose</span><span class="text" id="span_002381" smilref="Programming_Robots_with_ROS00009.smil#span_002381">.</span><span class="text" id="span_002382" smilref="Programming_Robots_with_ROS00009.smil#span_002382">target_pose</span><span class="text" id="span_002383" smilref="Programming_Robots_with_ROS00009.smil#span_002383">.</span><span class="text" id="span_002384" smilref="Programming_Robots_with_ROS00009.smil#span_002384">pose</span><span class="text" id="span_002385" smilref="Programming_Robots_with_ROS00009.smil#span_002385">.</span><span class="text" id="span_002386" smilref="Programming_Robots_with_ROS00009.smil#span_002386">position</span><span class="text" id="span_002387" smilref="Programming_Robots_with_ROS00009.smil#span_002387">.</span><span class="text" id="span_002388" smilref="Programming_Robots_with_ROS00009.smil#span_002388">z</span> <span class="text" id="span_002389" smilref="Programming_Robots_with_ROS00009.smil#span_002389">=</span> <span class="text" id="span_002390" smilref="Programming_Robots_with_ROS00009.smil#span_002390">pose</span><span class="text" id="span_002391" smilref="Programming_Robots_with_ROS00009.smil#span_002391">[</span><span class="text" id="span_002392" smilref="Programming_Robots_with_ROS00009.smil#span_002392">0</span><span class="text" id="span_002393" smilref="Programming_Robots_with_ROS00009.smil#span_002393">]</span><span class="text" id="span_002394" smilref="Programming_Robots_with_ROS00009.smil#span_002394">[</span><span class="text" id="span_002395" smilref="Programming_Robots_with_ROS00009.smil#span_002395">2</span><span class="text" id="span_002396" smilref="Programming_Robots_with_ROS00009.smil#span_002396">]</span>
    <span class="text" id="span_002397" smilref="Programming_Robots_with_ROS00009.smil#span_002397">goal_pose</span><span class="text" id="span_002398" smilref="Programming_Robots_with_ROS00009.smil#span_002398">.</span><span class="text" id="span_002399" smilref="Programming_Robots_with_ROS00009.smil#span_002399">target_pose</span><span class="text" id="span_002400" smilref="Programming_Robots_with_ROS00009.smil#span_002400">.</span><span class="text" id="span_002401" smilref="Programming_Robots_with_ROS00009.smil#span_002401">pose</span><span class="text" id="span_002402" smilref="Programming_Robots_with_ROS00009.smil#span_002402">.</span><span class="text" id="span_002403" smilref="Programming_Robots_with_ROS00009.smil#span_002403">orientation</span><span class="text" id="span_002404" smilref="Programming_Robots_with_ROS00009.smil#span_002404">.</span><span class="text" id="span_002405" smilref="Programming_Robots_with_ROS00009.smil#span_002405">x</span> <span class="text" id="span_002406" smilref="Programming_Robots_with_ROS00009.smil#span_002406">=</span> <span class="text" id="span_002407" smilref="Programming_Robots_with_ROS00009.smil#span_002407">pose</span><span class="text" id="span_002408" smilref="Programming_Robots_with_ROS00009.smil#span_002408">[</span><span class="text" id="span_002409" smilref="Programming_Robots_with_ROS00009.smil#span_002409">1</span><span class="text" id="span_002410" smilref="Programming_Robots_with_ROS00009.smil#span_002410">]</span><span class="text" id="span_002411" smilref="Programming_Robots_with_ROS00009.smil#span_002411">[</span><span class="text" id="span_002412" smilref="Programming_Robots_with_ROS00009.smil#span_002412">0</span><span class="text" id="span_002413" smilref="Programming_Robots_with_ROS00009.smil#span_002413">]</span>
    <span class="text" id="span_002414" smilref="Programming_Robots_with_ROS00009.smil#span_002414">goal_pose</span><span class="text" id="span_002415" smilref="Programming_Robots_with_ROS00009.smil#span_002415">.</span><span class="text" id="span_002416" smilref="Programming_Robots_with_ROS00009.smil#span_002416">target_pose</span><span class="text" id="span_002417" smilref="Programming_Robots_with_ROS00009.smil#span_002417">.</span><span class="text" id="span_002418" smilref="Programming_Robots_with_ROS00009.smil#span_002418">pose</span><span class="text" id="span_002419" smilref="Programming_Robots_with_ROS00009.smil#span_002419">.</span><span class="text" id="span_002420" smilref="Programming_Robots_with_ROS00009.smil#span_002420">orientation</span><span class="text" id="span_002421" smilref="Programming_Robots_with_ROS00009.smil#span_002421">.</span><span class="text" id="span_002422" smilref="Programming_Robots_with_ROS00009.smil#span_002422">y</span> <span class="text" id="span_002423" smilref="Programming_Robots_with_ROS00009.smil#span_002423">=</span> <span class="text" id="span_002424" smilref="Programming_Robots_with_ROS00009.smil#span_002424">pose</span><span class="text" id="span_002425" smilref="Programming_Robots_with_ROS00009.smil#span_002425">[</span><span class="text" id="span_002426" smilref="Programming_Robots_with_ROS00009.smil#span_002426">1</span><span class="text" id="span_002427" smilref="Programming_Robots_with_ROS00009.smil#span_002427">]</span><span class="text" id="span_002428" smilref="Programming_Robots_with_ROS00009.smil#span_002428">[</span><span class="text" id="span_002429" smilref="Programming_Robots_with_ROS00009.smil#span_002429">1</span><span class="text" id="span_002430" smilref="Programming_Robots_with_ROS00009.smil#span_002430">]</span>
    <span class="text" id="span_002431" smilref="Programming_Robots_with_ROS00009.smil#span_002431">goal_pose</span><span class="text" id="span_002432" smilref="Programming_Robots_with_ROS00009.smil#span_002432">.</span><span class="text" id="span_002433" smilref="Programming_Robots_with_ROS00009.smil#span_002433">target_pose</span><span class="text" id="span_002434" smilref="Programming_Robots_with_ROS00009.smil#span_002434">.</span><span class="text" id="span_002435" smilref="Programming_Robots_with_ROS00009.smil#span_002435">pose</span><span class="text" id="span_002436" smilref="Programming_Robots_with_ROS00009.smil#span_002436">.</span><span class="text" id="span_002437" smilref="Programming_Robots_with_ROS00009.smil#span_002437">orientation</span><span class="text" id="span_002438" smilref="Programming_Robots_with_ROS00009.smil#span_002438">.</span><span class="text" id="span_002439" smilref="Programming_Robots_with_ROS00009.smil#span_002439">z</span> <span class="text" id="span_002440" smilref="Programming_Robots_with_ROS00009.smil#span_002440">=</span> <span class="text" id="span_002441" smilref="Programming_Robots_with_ROS00009.smil#span_002441">pose</span><span class="text" id="span_002442" smilref="Programming_Robots_with_ROS00009.smil#span_002442">[</span><span class="text" id="span_002443" smilref="Programming_Robots_with_ROS00009.smil#span_002443">1</span><span class="text" id="span_002444" smilref="Programming_Robots_with_ROS00009.smil#span_002444">]</span><span class="text" id="span_002445" smilref="Programming_Robots_with_ROS00010.smil#span_002445">[</span><span class="text" id="span_002446" smilref="Programming_Robots_with_ROS00010.smil#span_002446">2</span><span class="text" id="span_002447" smilref="Programming_Robots_with_ROS00010.smil#span_002447">]</span>
    <span class="text" id="span_002448" smilref="Programming_Robots_with_ROS00010.smil#span_002448">goal_pose</span><span class="text" id="span_002449" smilref="Programming_Robots_with_ROS00010.smil#span_002449">.</span><span class="text" id="span_002450" smilref="Programming_Robots_with_ROS00010.smil#span_002450">target_pose</span><span class="text" id="span_002451" smilref="Programming_Robots_with_ROS00010.smil#span_002451">.</span><span class="text" id="span_002452" smilref="Programming_Robots_with_ROS00010.smil#span_002452">pose</span><span class="text" id="span_002453" smilref="Programming_Robots_with_ROS00010.smil#span_002453">.</span><span class="text" id="span_002454" smilref="Programming_Robots_with_ROS00010.smil#span_002454">orientation</span><span class="text" id="span_002455" smilref="Programming_Robots_with_ROS00010.smil#span_002455">.</span><span class="text" id="span_002456" smilref="Programming_Robots_with_ROS00010.smil#span_002456">w</span> <span class="text" id="span_002457" smilref="Programming_Robots_with_ROS00010.smil#span_002457">=</span> <span class="text" id="span_002458" smilref="Programming_Robots_with_ROS00010.smil#span_002458">pose</span><span class="text" id="span_002459" smilref="Programming_Robots_with_ROS00010.smil#span_002459">[</span><span class="text" id="span_002460" smilref="Programming_Robots_with_ROS00010.smil#span_002460">1</span><span class="text" id="span_002461" smilref="Programming_Robots_with_ROS00010.smil#span_002461">]</span><span class="text" id="span_002462" smilref="Programming_Robots_with_ROS00010.smil#span_002462">[</span><span class="text" id="span_002463" smilref="Programming_Robots_with_ROS00010.smil#span_002463">3</span><span class="text" id="span_002464" smilref="Programming_Robots_with_ROS00010.smil#span_002464">]</span>

    <span class="text" id="span_002465" smilref="Programming_Robots_with_ROS00010.smil#span_002465">return</span> <span class="text" id="span_002466" smilref="Programming_Robots_with_ROS00010.smil#span_002466">goal_pose</span>


<span class="text" id="span_002467" smilref="Programming_Robots_with_ROS00010.smil#span_002467">if</span> <span class="text" id="span_002468" smilref="Programming_Robots_with_ROS00010.smil#span_002468">__name__</span> <span class="text" id="span_002469" smilref="Programming_Robots_with_ROS00010.smil#span_002469">==</span> <span class="text" id="span_002470" smilref="Programming_Robots_with_ROS00010.smil#span_002470">'</span><span class="text" id="span_002471" smilref="Programming_Robots_with_ROS00010.smil#span_002471">__main__</span><span class="text" id="span_002472" smilref="Programming_Robots_with_ROS00010.smil#span_002472">'</span><span class="text" id="span_002473" smilref="Programming_Robots_with_ROS00010.smil#span_002473">:</span>
    <span class="text" id="span_002474" smilref="Programming_Robots_with_ROS00010.smil#span_002474">rospy</span><span class="text" id="span_002475" smilref="Programming_Robots_with_ROS00010.smil#span_002475">.</span><span class="text" id="span_002476" smilref="Programming_Robots_with_ROS00010.smil#span_002476">init_node</span><span class="text" id="span_002477" smilref="Programming_Robots_with_ROS00010.smil#span_002477">(</span><span class="text" id="span_002478" smilref="Programming_Robots_with_ROS00010.smil#span_002478">'</span><span class="text" id="span_002479" smilref="Programming_Robots_with_ROS00010.smil#span_002479">patrol</span><span class="text" id="span_002480" smilref="Programming_Robots_with_ROS00010.smil#span_002480">'</span><span class="text" id="span_002481" smilref="Programming_Robots_with_ROS00010.smil#span_002481">)</span>

    <span class="text" id="span_002482" smilref="Programming_Robots_with_ROS00010.smil#span_002482">client</span> <span class="text" id="span_002483" smilref="Programming_Robots_with_ROS00010.smil#span_002483">=</span> <span class="text" id="span_002484" smilref="Programming_Robots_with_ROS00010.smil#span_002484">actionlib</span><span class="text" id="span_002485" smilref="Programming_Robots_with_ROS00010.smil#span_002485">.</span><span class="text" id="span_002486" smilref="Programming_Robots_with_ROS00010.smil#span_002486">SimpleActionClient</span><span class="text" id="span_002487" smilref="Programming_Robots_with_ROS00010.smil#span_002487">(</span><span class="text" id="span_002488" smilref="Programming_Robots_with_ROS00010.smil#span_002488">'</span><span class="text" id="span_002489" smilref="Programming_Robots_with_ROS00010.smil#span_002489">move_base</span><span class="text" id="span_002490" smilref="Programming_Robots_with_ROS00010.smil#span_002490">'</span><span class="text" id="span_002491" smilref="Programming_Robots_with_ROS00010.smil#span_002491">,</span> <span class="text" id="span_002492" smilref="Programming_Robots_with_ROS00010.smil#span_002492">MoveBaseAction</span><span class="text" id="span_002493" smilref="Programming_Robots_with_ROS00010.smil#span_002493">)</span>  <a class="co" id="ch10-co_navigating_about_the_world_CO1-3" href="#ch10-callout_navigating_about_the_world_CO1-3" external="false"><img src="images/3.jpg" alt="3" id="img_000078" /></a>
    <span class="text" id="span_002494" smilref="Programming_Robots_with_ROS00010.smil#span_002494">client</span><span class="text" id="span_002495" smilref="Programming_Robots_with_ROS00010.smil#span_002495">.</span><span class="text" id="span_002496" smilref="Programming_Robots_with_ROS00010.smil#span_002496">wait_for_server</span><span class="text" id="span_002497" smilref="Programming_Robots_with_ROS00010.smil#span_002497">(</span><span class="text" id="span_002498" smilref="Programming_Robots_with_ROS00010.smil#span_002498">)</span>

    <span class="text" id="span_002499" smilref="Programming_Robots_with_ROS00010.smil#span_002499">while</span> <span class="text" id="span_002500" smilref="Programming_Robots_with_ROS00010.smil#span_002500">True</span><span class="text" id="span_002501" smilref="Programming_Robots_with_ROS00010.smil#span_002501">:</span>
        <span class="text" id="span_002502" smilref="Programming_Robots_with_ROS00010.smil#span_002502">for</span> <span class="text" id="span_002503" smilref="Programming_Robots_with_ROS00010.smil#span_002503">pose</span> <span class="text" id="span_002504" smilref="Programming_Robots_with_ROS00010.smil#span_002504">in</span> <span class="text" id="span_002505" smilref="Programming_Robots_with_ROS00010.smil#span_002505">waypoints</span><span class="text" id="span_002506" smilref="Programming_Robots_with_ROS00010.smil#span_002506">:</span>   <a class="co" id="ch10-co_navigating_about_the_world_CO1-4" href="#ch10-callout_navigating_about_the_world_CO1-4" external="false"><img src="images/4.jpg" alt="4" id="img_000079" /></a>
            <span class="text" id="span_002507" smilref="Programming_Robots_with_ROS00010.smil#span_002507">goal</span> <span class="text" id="span_002508" smilref="Programming_Robots_with_ROS00010.smil#span_002508">=</span> <span class="text" id="span_002509" smilref="Programming_Robots_with_ROS00010.smil#span_002509">goal_pose</span><span class="text" id="span_002510" smilref="Programming_Robots_with_ROS00010.smil#span_002510">(</span><span class="text" id="span_002511" smilref="Programming_Robots_with_ROS00010.smil#span_002511">pose</span><span class="text" id="span_002512" smilref="Programming_Robots_with_ROS00010.smil#span_002512">)</span>
            <span class="text" id="span_002513" smilref="Programming_Robots_with_ROS00010.smil#span_002513">client</span><span class="text" id="span_002514" smilref="Programming_Robots_with_ROS00010.smil#span_002514">.</span><span class="text" id="span_002515" smilref="Programming_Robots_with_ROS00010.smil#span_002515">send_goal</span><span class="text" id="span_002516" smilref="Programming_Robots_with_ROS00010.smil#span_002516">(</span><span class="text" id="span_002517" smilref="Programming_Robots_with_ROS00010.smil#span_002517">goal</span><span class="text" id="span_002518" smilref="Programming_Robots_with_ROS00010.smil#span_002518">)</span>
            <span class="text" id="span_002519" smilref="Programming_Robots_with_ROS00010.smil#span_002519">client</span><span class="text" id="span_002520" smilref="Programming_Robots_with_ROS00010.smil#span_002520">.</span><span class="text" id="span_002521" smilref="Programming_Robots_with_ROS00010.smil#span_002521">wait_for_result</span><span class="text" id="span_002522" smilref="Programming_Robots_with_ROS00010.smil#span_002522">(</span><span class="text" id="span_002523" smilref="Programming_Robots_with_ROS00010.smil#span_002523">)</span></code>
                  </p>
                  <dl class="calloutlist" id="dl_000005">
                    <dt id="dt_000025">
                      <a class="co" id="ch10-callout_navigating_about_the_world_CO1-1" href="#ch10-co_navigating_about_the_world_CO1-1" external="false">
                        <img src="images/1.jpg" alt="1" id="img_000080" />
                      </a>
                    </dt>
                    <dd id="dd_000025">
                      <p id="p_000701" smilref="Programming_Robots_with_ROS00010.smil#p_000701">A list of the waypoints for the robot to patrol.</p>
                    </dd>
                    <dt id="dt_000026">
                      <a class="co" id="ch10-callout_navigating_about_the_world_CO1-2" href="#ch10-co_navigating_about_the_world_CO1-2" external="false">
                        <img src="images/2.jpg" alt="2" id="img_000081" />
                      </a>
                    </dt>
                    <dd id="dd_000026">
                      <p id="p_000702">
                        <span class="text" id="span_002524" smilref="Programming_Robots_with_ROS00010.smil#span_002524">A helper function to turn a waypoint into a</span>
                        <code xml:space="preserve" id="code_001060" smilref="Programming_Robots_with_ROS00010.smil#code_001060">MoveBaseGoal</code>
                        <span class="text" id="span_002525" smilref="Programming_Robots_with_ROS00010.smil#span_002525">.</span>
                      </p>
                    </dd>
                    <dt id="dt_000027">
                      <a class="co" id="ch10-callout_navigating_about_the_world_CO1-3" href="#ch10-co_navigating_about_the_world_CO1-3" external="false">
                        <img src="images/3.jpg" alt="3" id="img_000082" />
                      </a>
                    </dt>
                    <dd id="dd_000027">
                      <p id="p_000703" smilref="Programming_Robots_with_ROS00010.smil#p_000703">Create a simple action client, and wait for the server to be ready.</p>
                    </dd>
                    <dt id="dt_000028">
                      <a class="co" id="ch10-callout_navigating_about_the_world_CO1-4" href="#ch10-co_navigating_about_the_world_CO1-4" external="false">
                        <img src="images/4.jpg" alt="4" id="img_000083" />
                      </a>
                    </dt>
                    <dd id="dd_000028">
                      <p id="p_000704" smilref="Programming_Robots_with_ROS00010.smil#p_000704">Loop through the waypoints, sending each as an action goal.</p>
                    </dd>
                  </dl>
                </div>
                <p id="ch10-idp25941216" data-type="indexterm" data-startref="ix_10-navigation-asciidoc9">
                  <span class="text" id="span_002526" smilref="Programming_Robots_with_ROS00010.smil#span_002526">This code just repeatedly sends action goals to the</span>
                  <code xml:space="preserve" id="code_001061" smilref="Programming_Robots_with_ROS00010.smil#code_001061">move_base</code>
                  <span class="text" id="span_002527" smilref="Programming_Robots_with_ROS00010.smil#span_002527">action and waits for them to complete. The waypoints are specified by position and a quaternion that represents rotation. You can specify the frame that these coordinates are in as part of the</span>
                  <code xml:space="preserve" id="code_001062" smilref="Programming_Robots_with_ROS00010.smil#code_001062">MoveBaseGoal</code>
                  <span class="text" id="span_002528" smilref="Programming_Robots_with_ROS00010.smil#span_002528">argument. In our case, we're using the</span>
                  <code xml:space="preserve" id="code_001063" smilref="Programming_Robots_with_ROS00010.smil#code_001063">map</code>
                  <span class="text" id="span_002529" smilref="Programming_Robots_with_ROS00010.smil#span_002529">frame. However, if you wanted to go to an object, and that object had its own coordinate frame that ROS knew about, you could just as easily use that. We'll talk more about coordinate frames later on in this book.</span>
                </p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Summary" id="section_000114">
              <h1 id="h1_000208" smilref="Programming_Robots_with_ROS00010.smil#h1_000208">Summary</h1>
              <div class="sect1" id="ch10-idp25941840">
                <p id="p_000705">
                  <span class="text" id="span_002530" smilref="Programming_Robots_with_ROS00010.smil#span_002530">In this chapter, we saw how to get a robot to move about in the world and how to issue high-level commands that harness the power of the ROS nav stack. We saw how to localize the robot in a map and how to give it navigation commands both with</span>
                  <code xml:space="preserve" id="code_001064" smilref="Programming_Robots_with_ROS00010.smil#code_001064">rviz</code>
                  <span class="text" id="span_002531" smilref="Programming_Robots_with_ROS00010.smil#span_002531">and through an action call in our own code. We also talked a little about how the navigation system in ROS works and how to see it working through</span>
                  <code xml:space="preserve" id="code_001065" smilref="Programming_Robots_with_ROS00010.smil#code_001065">rviz</code>
                  <span class="text" id="span_002532" smilref="Programming_Robots_with_ROS00010.smil#span_002532">.</span>
                </p>
                <p id="ch10-idp26453664" data-type="indexterm" data-primary="move_base" data-secondary="and nav stack performance tuning">
                  <span class="text" id="span_002533" smilref="Programming_Robots_with_ROS00010.smil#span_002533">The nav stack in ROS is a complicated and highly configurable thing, and we've barely scratched the surface of it in this chapter. The</span>
                  <a href="http://wiki.ros.org/navigation?distro=indigo" external="true" id="a_000138" smilref="Programming_Robots_with_ROS00010.smil#a_000138">navigation wiki page</a>
                  <span class="text" id="span_002534" smilref="Programming_Robots_with_ROS00010.smil#span_002534">has a lot more detail, both on how to use the nav stack and on how to adapt it to work better for your particular use case. In particular,</span>
                  <a href="http://wiki.ros.org/move_base?distro=indigo" external="true" id="a_000139">
                    <span class="text" id="span_002535" smilref="Programming_Robots_with_ROS00010.smil#span_002535">the</span>
                    <code xml:space="preserve" id="code_001066" smilref="Programming_Robots_with_ROS00010.smil#code_001066">move_base</code>
                    <span class="text" id="span_002536" smilref="Programming_Robots_with_ROS00010.smil#span_002536">wiki page</span>
                  </a>
                  <span class="text" id="span_002537" smilref="Programming_Robots_with_ROS00010.smil#span_002537">lists all of the parameters you can set to tune the performance of the nav stack.</span>
                </p>
                <p id="p_000706">
                  <span class="text" id="span_002538" smilref="Programming_Robots_with_ROS00010.smil#span_002538">If you're interested in how the navigation system works in detail, it's described in</span>
                  <a href="http://bit.ly/lu_roscon2014" external="true" id="a_000140" smilref="Programming_Robots_with_ROS00010.smil#a_000140">David Lu's ROSCon 2014 talk</a>
                  <span class="text" id="span_002539" smilref="Programming_Robots_with_ROS00010.smil#span_002539">and in this paper:</span>
                </p>
                <list type="ul" id="list_000010">
                  <li id="li_000034">
                    <p id="p_000707" smilref="Programming_Robots_with_ROS00010.smil#p_000707">David V. Lu, Dave Hershberger, and William D. Smart, "Layered Costmaps for Context-Sensitive Navigation." Proceedings of the IEEE/RSJ International Conference on Robots and Systems (2014): 709-715.</p>
                  </li>
                </list>
                <p id="ch10-idp25965056" data-type="indexterm" data-startref="ix_10-navigation-asciidoc0" smilref="Programming_Robots_with_ROS00010.smil#ch10-idp25965056">We'll return to navigating a robot around the world later in the book, when we look at how to get the robot to do some something useful as it patrols your building. Next, however, we're going to look at how to move your robot's arms and how to manipulate things in the world.</p>
              </div>
            </section>
            <div data-type="footnotes" id="div_000026">
              <note id="ch10-idp25566848">
                <p data-type="footnote" id="p_000708">
                  <noteref idref="#ch10-idp25566848-marker" id="noteref_000015" smilref="Programming_Robots_with_ROS00010.smil#noteref_000015">1</noteref>
                  <span class="text" id="span_002540" smilref="Programming_Robots_with_ROS00010.smil#span_002540">This is true of many things in ROS. While it's possible to use them without understanding the underlying algorithms, knowing what's going on under the hood will be invaluable if you ever need to debug strange robot behavior.</span>
                </p>
              </note>
            </div>
          </div>
        </section>
      </level1>
      <level1 id="ch11">
        <section xmlns:epub="http://www.idpf.org/2007/ops" data-type="chapter" epub:type="chapter" data-pdf-bookmark="Chapter 11. Chess-bot" id="section_000115">
          <h1 id="h1_000209" smilref="Programming_Robots_with_ROS00010.smil#h1_000209">Chapter 11. Chess-bot</h1>
          <div class="chapter" id="ch11-chess_bot">
            <p id="ch11-idp26438144" data-type="indexterm" data-primary="Gazebo" data-secondary="for developing manipulation software" data-seealso="Chess-bot, CougarBot">
              <span class="text" id="span_002541" smilref="Programming_Robots_with_ROS00010.smil#span_002541">Thus far, this book has focused on driving mobile robots in office-like environments. This was because planar robot navigation can be explored using relatively low-cost hardware, and the topic is sufficiently valuable, complex, and nuanced to use it as a practical introduction to controlling robots using ROS. However, the field of robotics is far larger than planar mobile robots! In this chapter, we will enter an entirely different domain:</span>
              <em id="ch11-ix_11-chessbot-asciidoc0" smilref="Programming_Robots_with_ROS00010.smil#ch11-ix_11-chessbot-asciidoc0">manipulation</em>
              <span class="text" id="span_002542" smilref="Programming_Robots_with_ROS00010.smil#span_002542">. Unfortunately, robot manipulators are often complex and expensive machines, making them less commonly found in academic and hobbyist laboratories. Fortunately, it's possible, and strongly encouraged, to develop robot-manipulation software entirely using the free and open source Gazebo simulator! In this chapter, we will use Gazebo extensively to demonstrate how to develop software for the Robonaut 2 (also known as R2), a stunning state-of-the-art robot developed by NASA and GM. One copy of Robonaut 2 is actually on the International Space Station, and the software you will write in this chapter will run just as well in the Gazebo simulator on your personal computer as it would run on the actual R2 on the space station!</span>
            </p>
            <p data-type="indexterm" data-primary="workcell" id="ch11-idp26430784">
              <span class="text" id="span_002543" smilref="Programming_Robots_with_ROS00010.smil#span_002543">Robotic manipulators come in an astonishingly wide variety of shapes and sizes. Industrial robotic manipulators are famous for performing tasks like welding, painting, and stacking with superhuman power, speed, and endurance. It is important to note, however, that despite how things may appear at first glance, many industrial robot installations are "blind." That is, the robotic spot welder or painter will perform</span>
              <em id="em_000307" smilref="Programming_Robots_with_ROS00010.smil#em_000307">exactly</em>
              <span class="text" id="span_002544" smilref="Programming_Robots_with_ROS00010.smil#span_002544">the same operation whenever an object enters its environment, typically called a</span>
              <em id="em_000308" smilref="Programming_Robots_with_ROS00010.smil#em_000308">workcell</em>
              <span class="text" id="span_002545" smilref="Programming_Robots_with_ROS00010.smil#span_002545">. A major effort when designing a workcell is thus to ensure that the workpiece--for example, a partially finished car body--always arrives in precisely the same location before the robotic manipulator starts its preplanned motion. This is the type of functionality that we will develop in this chapter; we won't use perceptual data until later in the book.</span>
            </p>
            <p id="p_000709" smilref="Programming_Robots_with_ROS00010.smil#p_000709">The goal of this chapter is to describe the fundamentals of understanding and programming robot manipulators, and to demonstrate how to move robot manipulators through prespecified environments using the toolchains of ROS and related open source projects. We will absolutely not present a complete theoretical derivation of robotic manipulation! That deserves an entire book (or bookshelf) of its own. In this book, we will cover just enough of the principles to help explain the complexity of the tools.</p>
            <section data-type="sect1" data-pdf-bookmark="Joints, Links, and Kinematic Chains" id="section_000116">
              <h1 id="h1_000210" smilref="Programming_Robots_with_ROS00010.smil#h1_000210">Joints, Links, and Kinematic Chains</h1>
              <div class="sect1" id="ch11-idp26433328">
                <p data-type="indexterm" data-primary="axis of rotation" id="ch11-idp26436256" data-secondary="and manipulators">
                  <span class="text" id="span_002546" smilref="Programming_Robots_with_ROS00010.smil#span_002546">Robotic manipulators are a collection of</span>
                  <em id="ch11-idp25975776" smilref="Programming_Robots_with_ROS00010.smil#ch11-idp25975776">joints</em>
                  <span class="text" id="span_002547" smilref="Programming_Robots_with_ROS00010.smil#span_002547">held together by a structure of some sort. In classical robotics, there are two major classes of manipulator joints:</span>
                  <em id="ch11-idp25977152" smilref="Programming_Robots_with_ROS00010.smil#ch11-idp25977152">revolute</em>
                  <span class="text" id="span_002548" smilref="Programming_Robots_with_ROS00010.smil#span_002548">and</span>
                  <em id="em_000309" smilref="Programming_Robots_with_ROS00010.smil#em_000309">prismatic</em>
                  <span class="text" id="span_002549" smilref="Programming_Robots_with_ROS00010.smil#span_002549">. Revolute joints (also known as</span>
                  <em id="em_000310" smilref="Programming_Robots_with_ROS00010.smil#em_000310">rotary</em>
                  <span class="text" id="span_002550" smilref="Programming_Robots_with_ROS00010.smil#span_002550">or</span>
                  <em id="ch11-idp26436992" smilref="Programming_Robots_with_ROS00010.smil#ch11-idp26436992">pin</em>
                  <span class="text" id="span_002551" smilref="Programming_Robots_with_ROS00010.smil#span_002551">joints) rotate about an</span>
                  <em id="ch11-idp25891744" smilref="Programming_Robots_with_ROS00010.smil#ch11-idp25891744">axis of rotation</em>
                  <span class="text" id="span_002552" smilref="Programming_Robots_with_ROS00010.smil#span_002552">. For example, your elbow behaves like a revolute joint. In contrast,</span>
                  <em id="ch11-idp25905424" smilref="Programming_Robots_with_ROS00010.smil#ch11-idp25905424">prismatic</em>
                  <span class="text" id="span_002553" smilref="Programming_Robots_with_ROS00010.smil#span_002553">joints (also known as</span>
                  <em id="ch11-idp25906016" smilref="Programming_Robots_with_ROS00010.smil#ch11-idp25906016">linear</em>
                  <span class="text" id="span_002554" smilref="Programming_Robots_with_ROS00010.smil#span_002554">joints) move linearly along an axis of motion, like a sliding door or a telescoping car radio antenna.</span>
                </p>
                <p id="p_000710" smilref="Programming_Robots_with_ROS00010.smil#p_000710">Prismatic joints are often used where extreme precision is required, such as in robots that place tiny electrical components on circuit boards, robotic imaging systems for microscopy, or "3D printers," which are typically prismatic robots that precisely move a plastic extruder. Many robots include a combination of revolute and prismatic joints. However, to reduce the size, weight, and cost of the robot while maximizing the workspace size, many manipulators include only revolute joints. As a result, for the remainder of this chapter, we will exclusively discuss revolute joints.</p>
                <p data-type="indexterm" data-primary="links" data-secondary="and manipulators" id="ch11-idp26382848">
                  <span class="text" id="span_002555" smilref="Programming_Robots_with_ROS00010.smil#span_002555">In manipulator terminology, a</span>
                  <em id="em_000311" smilref="Programming_Robots_with_ROS00010.smil#em_000311">link</em>
                  <span class="text" id="span_002556" smilref="Programming_Robots_with_ROS00010.smil#span_002556">is a section of a robot arm connected by a</span>
                  <em id="ch11-idp26383712" smilref="Programming_Robots_with_ROS00010.smil#ch11-idp26383712">joint</em>
                  <span class="text" id="span_002557" smilref="Programming_Robots_with_ROS00010.smil#span_002557">. For example, your upper arm is a link, as is your lower arm. Typically, robotic links are made from a relatively rigid material, such as aluminum or hard plastic. In this book, we will assume that links are truly rigid. In many domains, this assumption is not always correct, because the links are heavily loaded, they are moving very quickly, or both, which requires complex analysis to ensure stable control. We won't go there. For the purposes of the following discussion, links are rigid sections of material that connect joints. These fundamental terms are illustrated by the sketch in</span>
                  <a data-type="xref" href="#ch11-arm_cartoon" external="false" id="a_000141" smilref="Programming_Robots_with_ROS00010.smil#a_000141">Figure 11-1</a>
                  <span class="text" id="span_002558" smilref="Programming_Robots_with_ROS00010.smil#span_002558">.</span>
                </p>
                <p data-type="indexterm" data-primary="end effector" id="ch11-idp26401872" data-secondary="and kinematic chains">
                  <span class="text" id="span_002559" smilref="Programming_Robots_with_ROS00010.smil#span_002559">A series of connected links and joints is known as a</span>
                  <em id="ch11-idp26380384" smilref="Programming_Robots_with_ROS00010.smil#ch11-idp26380384">kinematic chain</em>
                  <span class="text" id="span_002560" smilref="Programming_Robots_with_ROS00010.smil#span_002560">. Knowing the geometry of a kinematic chain is a fundamental requirement of controlling a robotic manipulator. Usually, one side of a kinematic chain is considered to be</span>
                  <em id="ch11-idp26423520" smilref="Programming_Robots_with_ROS00010.smil#ch11-idp26423520">grounded</em>
                  <span class="text" id="span_002561" smilref="Programming_Robots_with_ROS00010.smil#span_002561">, meaning that it is fixed with respect to some other coordinate frame, such as a factory floor or the torso of a robot. An</span>
                  <em id="ch11-idp26425696" smilref="Programming_Robots_with_ROS00010.smil#ch11-idp26425696">open</em>
                  <span class="text" id="span_002562" smilref="Programming_Robots_with_ROS00010.smil#span_002562">kinematic chain is one in which the non-grounded side of the chain is free to move around the workspace. The free-floating side of a manipulator is usually fitted with some sort of</span>
                  <em id="em_000312" smilref="Programming_Robots_with_ROS00010.smil#em_000312">end effector</em>
                  <span class="text" id="span_002563" smilref="Programming_Robots_with_ROS00010.smil#span_002563">, such as a welding iron, a paint gun, a grinding wheel, or a general-purpose gripper or suction cup.</span>
                </p>
                <figure id="figure_000046">
                  <h1 id="h1_000211" smilref="Programming_Robots_with_ROS00010.smil#h1_000211">Figure 11-1. The fundamental components of robot manipulators: joints and links</h1>
                  <div id="ch11-arm_cartoon" class="figure">
                    <img src="images/prwr_1101.jpg" alt="arm parts" id="img_000084" />
                  </div>
                </figure>
                <p data-type="indexterm" data-primary="motion planning" id="ch11-idp25888144">
                  <span class="text" id="span_002564" smilref="Programming_Robots_with_ROS00010.smil#span_002564">From a programming perspective, we want to be able to position the end effector of a robot manipulator in any position and orientation within its workspace. In an ideal world, this would be easy. Sadly, the real world complicates things, for several reasons. First, in many robots, each joint has a limited</span>
                  <em id="ch11-idp26417616" smilref="Programming_Robots_with_ROS00010.smil#ch11-idp26417616">range of motion</em>
                  <span class="text" id="span_002565" smilref="Programming_Robots_with_ROS00010.smil#span_002565">. Wires, hoses, mechanical structures, and other constraints often prevent manipulator joints from being able to spin endlessly. Second, the workspace usually has some</span>
                  <em id="em_000313" smilref="Programming_Robots_with_ROS00010.smil#em_000313">obstacles</em>
                  <span class="text" id="span_002566" smilref="Programming_Robots_with_ROS00010.smil#span_002566">, such as fixed objects the manipulator must avoid. Third, real-world robotic joints can only accelerate and decelerate at limited rates.</span>
                  <em id="em_000314" smilref="Programming_Robots_with_ROS00010.smil#em_000314">Motion planning</em>
                  <span class="text" id="span_002567" smilref="Programming_Robots_with_ROS00010.smil#span_002567">is the field of study that addresses these issues (and more). To appreciate them, we will first dive into a bit of theory.</span>
                </p>
                <section data-type="sect2" data-pdf-bookmark="Joint Space" id="section_000117">
                  <h1 id="h1_000212" smilref="Programming_Robots_with_ROS00010.smil#h1_000212">Joint Space</h1>
                  <div class="sect2" id="ch11-idp25889504">
                    <p data-type="indexterm" data-primary="joint space" id="ch11-ix_11-chessbot-asciidoc1" data-secondary="and joint space">
                      <span class="text" id="span_002568" smilref="Programming_Robots_with_ROS00010.smil#span_002568">When we were considering planar mobile robots, there were only two major coordinate frames to keep in mind: the</span>
                      <em id="em_000315" smilref="Programming_Robots_with_ROS00010.smil#em_000315">map</em>
                      <em id="ch11-ix_11-chessbot-asciidoc2" smilref="Programming_Robots_with_ROS00010.smil#ch11-ix_11-chessbot-asciidoc2">frame</em>
                      <span class="text" id="span_002569" smilref="Programming_Robots_with_ROS00010.smil#span_002569">, which is fixed relative to the environment and never moves; and the</span>
                      <em id="em_000316" smilref="Programming_Robots_with_ROS00010.smil#em_000316">robot</em>
                      <em id="em_000317" smilref="Programming_Robots_with_ROS00010.smil#em_000317">frame</em>
                      <span class="text" id="span_002570" smilref="Programming_Robots_with_ROS00010.smil#span_002570">, which is attached to the robot and moves with it. As described in the previous chapter, mobile robot</span>
                      <em id="em_000318" smilref="Programming_Robots_with_ROS00010.smil#em_000318">localization</em>
                      <span class="text" id="span_002571" smilref="Programming_Robots_with_ROS00010.smil#span_002571">algorithms seek to describe the relationship between the map frame and the robot frame.</span>
                    </p>
                    <p data-type="indexterm" data-primary="joint encoders" id="ch11-idp26411248">
                      <span class="text" id="span_002572" smilref="Programming_Robots_with_ROS00010.smil#span_002572">In manipulation, we typically have many more coordinate frames to deal with: each link of a robot manipulator has a coordinate frame that needs to be described relative to the link before it. Fortunately, the relationships between these frames are usually known to a high degree of precision, thanks to sensors called</span>
                      <em id="em_000319" smilref="Programming_Robots_with_ROS00010.smil#em_000319">joint encoders</em>
                      <span class="text" id="span_002573" smilref="Programming_Robots_with_ROS00010.smil#span_002573">, which are typically fitted to each joint of a manipulator and directly measure the rotational positions. The exact mechanism varies: joint encoders can measure magnetic, optical, resistive, or capacitive phenomena. However, after low-level processing (typically performed at high speed in firmware), most manipulators typically know the angular positions of all their joints to high precision. This vector of angles is called the</span>
                      <em id="ch11-idp26033696" smilref="Programming_Robots_with_ROS00010.smil#ch11-idp26033696">joint state</em>
                      <span class="text" id="span_002574" smilref="Programming_Robots_with_ROS00010.smil#span_002574">, and is fundamental to the analysis and control of robot manipulators.</span>
                    </p>
                    <p id="p_000711">
                      <span class="text" id="span_002575" smilref="Programming_Robots_with_ROS00010.smil#span_002575">For the manipulators we will describe in this book, the joint state vector is simply a list of joint angles that the manipulator hardware "magically" produces for us. The simplest approach to controlling a robot manipulator is in</span>
                      <em id="em_000320" smilref="Programming_Robots_with_ROS00010.smil#em_000320">joint space</em>
                      <span class="text" id="span_002576" smilref="Programming_Robots_with_ROS00010.smil#span_002576">. For purposes of illustration, we will present a diagram of a two-dimensional planar arm, since it projects nicely onto a two-dimensional diagram. Let's say that you have a task where you want the arm to endlessly move from position A to position B. The simplest control strategy is to measure the joint angles at position A and position B, and then interpolate between them in joint space. And indeed, the manipulator will travel from position A to position B.</span>
                    </p>
                    <p data-type="indexterm" data-primary="Cartesian space" id="ch11-idp26407008">
                      <span class="text" id="span_002577" smilref="Programming_Robots_with_ROS00010.smil#span_002577">However, although the trajectory will be linear in joint space, it will not be linear in the "real world," or the</span>
                      <em id="ch11-idp26405920" smilref="Programming_Robots_with_ROS00010.smil#ch11-idp26405920">task space</em>
                      <span class="text" id="span_002578" smilref="Programming_Robots_with_ROS00010.smil#span_002578">of the end effector. Sometimes, the task space is called</span>
                      <em id="em_000321" smilref="Programming_Robots_with_ROS00010.smil#em_000321">Cartesian space</em>
                      <span class="text" id="span_002579" smilref="Programming_Robots_with_ROS00010.smil#span_002579">to emphasize that the end effector is moving through a Cartesian world, not joint space. Most of the time, we want to control an end effector in task space, not joint space. That is, we want the end effector to move in straight lines in task space, not straight lines in joint space. To illustrate this, let's assume that we are programming a robot to clean a window that is in front of it, on a vertical wall. The robot needs to gently wipe the window with its end effector. If we place the starting position at the top of the window and the ending position at the bottom of the window, a straightforward joint-space interpolation will result in the end effector crashing through the window, as pictured in</span>
                      <a data-type="xref" href="#ch11-broken_window" external="false" id="a_000142" smilref="Programming_Robots_with_ROS00010.smil#a_000142">Figure 11-2</a>
                      <span class="text" id="span_002580" smilref="Programming_Robots_with_ROS00010.smil#span_002580">. Whoops!</span>
                    </p>
                    <p id="p_000712">
                      <span class="text" id="span_002581" smilref="Programming_Robots_with_ROS00010.smil#span_002581">To explain what's happening, we need to use</span>
                      <em id="em_000322" smilref="Programming_Robots_with_ROS00010.smil#em_000322">forward kinematics</em>
                      <span class="text" id="span_002582" smilref="Programming_Robots_with_ROS00010.smil#span_002582">. This is how we convert from joint space to task space; we apply transformations that use our knowledge of the geometry, or</span>
                      <em id="em_000323" smilref="Programming_Robots_with_ROS00010.smil#em_000323">kinematics</em>
                      <span class="text" id="span_002583" smilref="Programming_Robots_with_ROS00010.smil#span_002583">, of the robot arm. This geometry includes how long each link is, the angles between the axes of rotation, and the joint angles. The math can get messy to write longhand, but after some simplification it always reduces to a few matrix multiplications, which computers are really good at doing. The forward kinematics function thus transforms the joint state of the manipulator into the task space position of its end effector. The forward kinematics function is fast and unambiguous: you put in a joint state, you get out a position. ROS provides many tools for this, most notably the</span>
                      <code xml:space="preserve" id="code_001067" smilref="Programming_Robots_with_ROS00010.smil#code_001067">tf</code>
                      <span class="text" id="span_002584" smilref="Programming_Robots_with_ROS00010.smil#span_002584">package, which will be used later in this chapter.</span>
                    </p>
                    <figure id="figure_000047">
                      <h1 id="h1_000213" smilref="Programming_Robots_with_ROS00010.smil#h1_000213">Figure 11-2. Poor motion planning causes the robot at left, attempting to clean the window at right, to break it instead</h1>
                      <div id="ch11-broken_window" class="figure">
                        <img src="images/prwr_1102.jpg" alt="Bad example of motion planning" id="img_000085" />
                      </div>
                    </figure>
                    <p id="ch11-idp26339808" data-type="indexterm" data-startref="ix_11-chessbot-asciidoc1">
                      <span class="text" id="span_002585" smilref="Programming_Robots_with_ROS00010.smil#span_002585">Forward kinematics tells us where the end of the arm is, relative to the rest of the robot. That is useful, but really what we want is the opposite operation: given a desired point in the world (say, the top of the window we are trying to clean), what should the arm's joint angles be? This is called</span>
                      <em id="em_000324" smilref="Programming_Robots_with_ROS00010.smil#em_000324">inverse kinematics</em>
                      <span class="text" id="span_002586" smilref="Programming_Robots_with_ROS00010.smil#span_002586">.</span>
                    </p>
                  </div>
                </section>
                <section data-type="sect2" data-pdf-bookmark="Inverse Kinematics" id="section_000118">
                  <h1 id="h1_000214" smilref="Programming_Robots_with_ROS00010.smil#h1_000214">Inverse Kinematics</h1>
                  <div class="sect2" id="ch11-idp26340624">
                    <p id="ch11-ix_11-chessbot-asciidoc3" data-type="indexterm" data-primary="forward kinematics" data-secondary="forward" smilref="Programming_Robots_with_ROS00010.smil#ch11-ix_11-chessbot-asciidoc3">Let's say that we have a task space position A (the top of the window) and a task space position B (the bottom of the window). We want to compute the joint states for each of those position, which we can feed to joint-space controllers to move the arm.</p>
                    <p id="p_000713">
                      <span class="text" id="span_002587" smilref="Programming_Robots_with_ROS00010.smil#span_002587">Although we can relatively quickly derive the inverse kinematics equations for the two-dimensional arm shown in these diagrams, things will get nasty really quickly when we move up to arms with more joints. Once the arm has more than six joints, it gets even more interesting: there is no longer a unique inverse kinematics solution! Instead, there can be a</span>
                      <em id="em_000325" smilref="Programming_Robots_with_ROS00010.smil#em_000325">set</em>
                      <span class="text" id="span_002588" smilref="Programming_Robots_with_ROS00010.smil#span_002588">or</span>
                      <em id="em_000326" smilref="Programming_Robots_with_ROS00010.smil#em_000326">manifold</em>
                      <span class="text" id="span_002589" smilref="Programming_Robots_with_ROS00010.smil#span_002589">of solutions, all of which achieve the desired end-effector position. For example, you can hold your hand in the same position in front of you and move your elbow in an arc. That is the one-dimensional subspace of inverse kinematic solutions for that particular location and orientation of your hand. Because we're lazy and our arms are heavy, we usually choose the solution where our elbow is hanging down. But that is just one out of many possible arm configurations that result in our hands staying in the same place.</span>
                    </p>
                    <p id="p_000714">
                      <span class="text" id="span_002590" smilref="Programming_Robots_with_ROS00010.smil#span_002590">It gets still more complex: things that are "out of reach" of the robot have no inverse kinematics solution. There is also a nasty region right on the edge of what the robot can reach, where it can achieve</span>
                      <em id="em_000327" smilref="Programming_Robots_with_ROS00010.smil#em_000327">some</em>
                      <span class="text" id="span_002591" smilref="Programming_Robots_with_ROS00010.smil#span_002591">end effector orientations, but not all. To illustrate this, imagine reaching out for something that is</span>
                      <em id="em_000328" smilref="Programming_Robots_with_ROS00010.smil#em_000328">just</em>
                      <span class="text" id="span_002592" smilref="Programming_Robots_with_ROS00010.smil#span_002592">within your reach. You'll find that you can only grab it in one way. But once you bring that object a few inches closer, you can pick it up in any direction by reorienting your wrist and elbow.</span>
                    </p>
                    <p class="keep-together" id="p_000715">
                      <span class="text" id="span_002593" smilref="Programming_Robots_with_ROS00010.smil#span_002593">To reiterate: the inverse kinematics problem is really hard. For any given position</span>
                      <span class="keep-together" id="span_002594" smilref="Programming_Robots_with_ROS00010.smil#span_002594">and orientation of</span>
                      <span class="text" id="span_002595" smilref="Programming_Robots_with_ROS00010.smil#span_002595">the end effector, there can be infinite, finite, or zero joint-state solutions.</span>
                    </p>
                    <p id="p_000716" smilref="Programming_Robots_with_ROS00010.smil#p_000716">Fortunately, there are some good inverse kinematics software packages out there, including several that operate nicely with ROS. You can describe the arm geometry to these packages using ROS parameters and then call ROS services to ask for joint-state solutions for desired end effector positions. Using such a package, we could improve our window-cleaning robot: we could calculate a series of "waypoints" along the trajectory from position A to position B, all of which lie on the task space straight line between A and B.</p>
                    <p id="ch11-idp26389744" data-type="indexterm" data-startref="ix_11-chessbot-asciidoc3">
                      <span class="text" id="span_002596" smilref="Programming_Robots_with_ROS00010.smil#span_002596">If we calculate enough of these intermediate points, we may even be able to get the robot to wipe the window without breaking it. But this approach is still a bit nasty, due to several concerns we haven't addressed yet, including singularities (when a joint is fully extended), limited ranges of motion, limited joint velocities and accelerations, and obstacles in the environment. Dealing with these issues in a general fashion is really hard. This is why there are complex software packages called</span>
                      <em id="em_000329" smilref="Programming_Robots_with_ROS00010.smil#em_000329">motion planners</em>
                      <span class="text" id="span_002597" smilref="Programming_Robots_with_ROS00010.smil#span_002597">, which take all of these factors into account. You simply tell them where the manipulator is, where you want it to be, and provide a description of the robot and its environment. The motion planner then performs some impressive mathematics and responds with a</span>
                      <em id="em_000330" smilref="Programming_Robots_with_ROS00010.smil#em_000330">trajectory</em>
                      <span class="text" id="span_002598" smilref="Programming_Robots_with_ROS00010.smil#span_002598">of joint states that you can feed to the manipulator's joint controllers. If all goes well, the manipulator end effector will then smoothly follow the calculated path in the task space while not crashing into anything.</span>
                    </p>
                  </div>
                </section>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="The Key to Success" id="section_000119">
              <h1 id="h1_000215" smilref="Programming_Robots_with_ROS00010.smil#h1_000215">The Key to Success</h1>
              <div class="sect1" id="ch11-idp25974864">
                <p data-type="indexterm" data-primary="manipulators" data-secondary="simulation as key to programming success with" id="ch11-idp26391840">
                  <span class="text" id="span_002599" smilref="Programming_Robots_with_ROS00010.smil#span_002599">Robot manipulators are complex beasts: they have many motors and mechanical moving parts, they are filled with flexing cables and electronics, and they have delicate sensors throughout to measure joint angles and forces. In other words, they are expensive and prone to failure. Indeed, working with manipulators offers wonderful glimpses of an advanced technological future, contrasted with the sad, broken reality of the present when a robot stops working. Just like for any robotics domain, the key to success when developing software for robot manipulation is</span>
                  <em id="em_000331" smilref="Programming_Robots_with_ROS00010.smil#em_000331">simulation</em>
                  <span class="text" id="span_002600" smilref="Programming_Robots_with_ROS00010.smil#span_002600">. For planar mobile robots, we were championing simulation from an operational standpoint: simulated robot batteries can be "recharged" instantly, you don't have to chase down the hallway after them when debugging, you can simulate faster than reality to cover many kilometers of experiments very quickly, and so on.</span>
                </p>
                <p class="keep-together" id="p_000717" smilref="Programming_Robots_with_ROS00010.smil#p_000717">For manipulation, this rationale is even more convincing, since robot manipulators are far more complex and expensive. They often have a relatively delicate end effector attached to the very end of the manipulator, which is of course the part of the manipulator that experiences the highest velocities and is most likely to crash into something.</p>
                <p id="ch11-idp26359584" data-type="indexterm" data-primary="R2 (Robonaut 2)" data-secondary="suitability for simulation studies">
                  <span class="text" id="span_002601" smilref="Programming_Robots_with_ROS00010.smil#span_002601">So, like a broken record, we will repeat it again: the key to success in robot manipulation, as in all areas in robotics, is</span>
                  <em id="em_000332" smilref="Programming_Robots_with_ROS00010.smil#em_000332">simulation</em>
                  <span class="text" id="span_002602" smilref="Programming_Robots_with_ROS00010.smil#span_002602">. Throughout this book, we are using simulated robots as development targets. For this chapter, we will take advantage of the fact that simulation is free in order to program a stunningly beautiful state-of-the-art robot: the NASA/GM Robonaut 2. This is a fun robot to use in simulation, since one copy of the R2 is actually on the International Space Station (see</span>
                  <a data-type="xref" href="#ch11-r2_iss" external="false" id="a_000143" smilref="Programming_Robots_with_ROS00010.smil#a_000143">Figure 11-3</a>
                  <span class="text" id="span_002603" smilref="Programming_Robots_with_ROS00010.smil#span_002603">).</span>
                </p>
                <figure id="figure_000048">
                  <h1 id="h1_000216" smilref="Programming_Robots_with_ROS00010.smil#h1_000216">Figure 11-3. The R2 robot on the International Space Station (image credit: NASA)</h1>
                  <div id="ch11-r2_iss" class="figure">
                    <img src="images/prwr_1103.jpg" alt="R2 on the International Space Station" id="img_000086" />
                  </div>
                </figure>
                <p id="p_000718" smilref="Programming_Robots_with_ROS00010.smil#p_000718">As you'd expect for a machine rated for operation in space, the R2 is extraordinarily reliable and was designed for high performance and predictability. As a consequence, it is very expensive and is not the type of platform you'd want to use when carelessly experimenting with some new code you've hacked together. Fortunately, NASA has released a Gazebo model of an R2, which we can easily install. Then, we can instantiate R2 in Gazebo and aggressively prototype our software, risking none of the guilt associated with wrecking millions of dollars' worth of equipment!</p>
                <p id="p_000719" smilref="Programming_Robots_with_ROS00010.smil#p_000719">Since the code we will write is generally robot-agnostic, everything we learn about controlling an R2 in Gazebo can be applied to other robots (it just looks cooler on an R2). So, let's get started.</p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Installing and Running a Simulated R2" id="section_000120">
              <h1 id="h1_000217" smilref="Programming_Robots_with_ROS00010.smil#h1_000217">Installing and Running a Simulated R2</h1>
              <div class="sect1" id="ch11-idp25970480">
                <p id="ch11-ix_11-chessbot-asciidoc5" data-type="indexterm" data-primary="Gazebo" data-secondary="installing/running R2 in" smilref="Programming_Robots_with_ROS00010.smil#ch11-ix_11-chessbot-asciidoc5">The following commands will check out the latest version of the R2 simulation model for Gazebo and the R2 controllers, as well as installing some more ROS packages from the build farm:</p>
                <p id="p_000720">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001068"><span class="text" id="span_002604" smilref="Programming_Robots_with_ROS00010.smil#span_002604">user@hostname$ </span><strong id="strong_000123" smilref="Programming_Robots_with_ROS00010.smil#strong_000123">sudo apt-get install ros-indigo-ros-control \
  ros-indigo-gazebo-ros-control ros-indigo-joint-state-controller \
  ros-indigo-effort-controllers ros-indigo-joint-trajectory-controller \
  ros-indigo-moveit* ros-indigo-octomap* ros-indigo-object-recognition-*</strong><span class="text" id="span_002605" smilref="Programming_Robots_with_ROS00010.smil#span_002605">
user@hostname$ </span><strong id="strong_000124" smilref="Programming_Robots_with_ROS00010.smil#strong_000124">mkdir -p ~/chessbot/src</strong><span class="text" id="span_002606" smilref="Programming_Robots_with_ROS00010.smil#span_002606">
user@hostname$ </span><strong id="strong_000125" smilref="Programming_Robots_with_ROS00010.smil#strong_000125">cd ~/chessbot/src</strong><span class="text" id="span_002607" smilref="Programming_Robots_with_ROS00010.smil#span_002607">
user@hostname$ </span><strong id="strong_000126" smilref="Programming_Robots_with_ROS00010.smil#strong_000126">git clone -b indigo \
  https://bitbucket.org/nasa_ros_pkg/nasa_r2_simulator.git</strong><span class="text" id="span_002608" smilref="Programming_Robots_with_ROS00010.smil#span_002608">
user@hostname$ </span><strong id="strong_000127" smilref="Programming_Robots_with_ROS00010.smil#strong_000127">git clone -b indigo \
  https://bitbucket.org/nasa_ros_pkg/nasa_r2_common.git</strong><span class="text" id="span_002609" smilref="Programming_Robots_with_ROS00010.smil#span_002609">
user@hostname$ </span><strong id="strong_000128" smilref="Programming_Robots_with_ROS00010.smil#strong_000128">cd ..</strong><span class="text" id="span_002610" smilref="Programming_Robots_with_ROS00010.smil#span_002610">
user@hostname$ </span><strong id="strong_000129" smilref="Programming_Robots_with_ROS00010.smil#strong_000129">catkin_make</strong>
</code>
                </p>
                <p id="p_000721" smilref="Programming_Robots_with_ROS00010.smil#p_000721">Now, we can load our newly built R2 simulation workspace and start up an R2 in Gazebo:</p>
                <p id="p_000722">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001069" smilref="Programming_Robots_with_ROS00010.smil#code_001069">cd ~/chessbot
source devel/setup.bash
roslaunch r2_gazebo r2_gazebo.launch</code>
                </p>
                <p id="p_000723">
                  <span class="text" id="span_002611" smilref="Programming_Robots_with_ROS00010.smil#span_002611">This will launch Gazebo with a world file that includes an R2 and looks something like</span>
                  <a data-type="xref" href="#ch11-r2_mime_screenshot" external="false" id="a_000144" smilref="Programming_Robots_with_ROS00010.smil#a_000144">Figure 11-4</a>
                  <span class="text" id="span_002612" smilref="Programming_Robots_with_ROS00010.smil#span_002612">.</span>
                </p>
                <figure id="figure_000049">
                  <h1 id="h1_000218" smilref="Programming_Robots_with_ROS00010.smil#h1_000218">Figure 11-4. The starting configuration of the R2 simulation</h1>
                  <div id="ch11-r2_mime_screenshot" class="figure">
                    <img src="images/prwr_0603.jpg" alt="R2 in Gazebo" id="img_000087" />
                  </div>
                </figure>
                <p id="ch11-ix_11-chessbot-asciidoc9" data-type="indexterm" data-primary="MoveIt" data-secondary="and R2 arm movement simulation" smilref="Programming_Robots_with_ROS00010.smil#ch11-ix_11-chessbot-asciidoc9">Thanks to the wonders of robot simulation and the abstraction layers of ROS, we can now write software for the R2 that will run identically either on this simulation or on a real robot. To start, let's make the R2 wave its arms around randomly . To do this, we will use MoveIt, a comprehensive motion planning package that interacts nicely with ROS. Fortunately for us, MoveIt already includes all of the configuration details for the R2, such as the geometries of all its links, the joint positions and orientations, and so on. We can simply tell MoveIt where we want the end effectors to be positioned, and MoveIt will perform the necessary high-dimensional computational geometry to produce a collision-free path to the goal.</p>
                <p data-type="indexterm" data-primary="robot_state_publisher node" id="ch11-idp26364432">
                  <span class="text" id="span_002613" smilref="Programming_Robots_with_ROS00010.smil#span_002613">First, we need to run a</span>
                  <code xml:space="preserve" id="code_001070" smilref="Programming_Robots_with_ROS00010.smil#code_001070">robot_state_publisher</code>
                  <span class="text" id="span_002614" smilref="Programming_Robots_with_ROS00010.smil#span_002614">node, which will use the geometric descriptions of the R2 and its joint state vector to continually calculate all of the coordinate frames of the robot (i.e., it computes forward kinematics). The standard ROS implementation of this operation is robot-neutral, so we can just start it up, and it will do the right thing for the R2:</span>
                </p>
                <p id="p_000724">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001071"><span class="text" id="span_002615" smilref="Programming_Robots_with_ROS00010.smil#span_002615">
user@hostname$ </span><strong id="strong_000130" smilref="Programming_Robots_with_ROS00010.smil#strong_000130">rosrun robot_state_publisher robot_state_publisher</strong>
</code>
                </p>
                <p id="p_000725">
                  <span class="text" id="span_002616" smilref="Programming_Robots_with_ROS00010.smil#span_002616">Now, we have a console that has spawned the R2 simulator (</span>
                  <code xml:space="preserve" id="code_001072" smilref="Programming_Robots_with_ROS00010.smil#code_001072">r2_gazebo</code>
                  <span class="text" id="span_002617" smilref="Programming_Robots_with_ROS00010.smil#span_002617">), a console that is running</span>
                  <code xml:space="preserve" id="code_001073" smilref="Programming_Robots_with_ROS00010.smil#code_001073">robot_state_publisher</code>
                  <span class="text" id="span_002618" smilref="Programming_Robots_with_ROS00010.smil#span_002618">, and a graphical window showing the R2 simulation. We can now get a new terminal and start MoveIt, configured for the R2:</span>
                </p>
                <p id="p_000726">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001074" smilref="Programming_Robots_with_ROS00010.smil#code_001074">*cd* ~/chessbot
source devel/setup.bash
roslaunch r2_moveit_config move_group.launch</code>
                </p>
                <p id="p_000727" smilref="Programming_Robots_with_ROS00010.smil#p_000727">This will start a number of programs, topics, and services, and set a large number of parameters. MoveIt is a very complex piece of software, and a full explanation of its inner workings is beyond the scope of this book. For the purposes of this chapter, we can give MoveIt target positions for the R2 hands, and it will find and follow a smooth trajectory to get there.</p>
                <p id="p_000728">
                  <span class="text" id="span_002619" smilref="Programming_Robots_with_ROS00010.smil#span_002619">The program shown in</span>
                  <a data-type="xref" href="#ch11-r2_mime" external="false" id="a_000145" smilref="Programming_Robots_with_ROS00010.smil#a_000145">Example 11-1</a>
                  <span class="text" id="span_002620" smilref="Programming_Robots_with_ROS00010.smil#span_002620">will continually generate random poses for the hands of the Robonaut 2, so it will wave its arms around endlessly. Note, however, that the behavior is not purely random: the planner will seek to keep the elbows in the middle of their ranges of motion. This prevents the robot from nearing the singularities or collisions that can occur if the elbow gets jammed up against the torso or flies up toward the vertical. You'll also notice that the joint velocities smoothly ramp up and down during acceleration and deceleration of the arms. All of this is critical to producing smooth, reliable trajectories on real robots. The full source code follows.</span>
                </p>
                <h1 id="h1_000219" smilref="Programming_Robots_with_ROS00010.smil#h1_000219">Example 11-1. r2_mime.py</h1>
                <div id="ch11-r2_mime" data-type="example">
                  <p id="p_000729">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001075"><span class="text" id="span_002621" smilref="Programming_Robots_with_ROS00010.smil#span_002621">#!/usr/bin/env python</span>
<span class="text" id="span_002622" smilref="Programming_Robots_with_ROS00010.smil#span_002622">import</span> <span class="text" id="span_002623" smilref="Programming_Robots_with_ROS00010.smil#span_002623">sys</span><span class="text" id="span_002624" smilref="Programming_Robots_with_ROS00010.smil#span_002624">,</span> <span class="text" id="span_002625" smilref="Programming_Robots_with_ROS00010.smil#span_002625">rospy</span><span class="text" id="span_002626" smilref="Programming_Robots_with_ROS00010.smil#span_002626">,</span> <span class="text" id="span_002627" smilref="Programming_Robots_with_ROS00010.smil#span_002627">tf</span><span class="text" id="span_002628" smilref="Programming_Robots_with_ROS00010.smil#span_002628">,</span> <span class="text" id="span_002629" smilref="Programming_Robots_with_ROS00010.smil#span_002629">moveit_commander</span><span class="text" id="span_002630" smilref="Programming_Robots_with_ROS00010.smil#span_002630">,</span> <span class="text" id="span_002631" smilref="Programming_Robots_with_ROS00010.smil#span_002631">random</span>
<span class="text" id="span_002632" smilref="Programming_Robots_with_ROS00010.smil#span_002632">from</span> <span class="text" id="span_002633" smilref="Programming_Robots_with_ROS00010.smil#span_002633">geometry_msgs.msg</span> <span class="text" id="span_002634" smilref="Programming_Robots_with_ROS00010.smil#span_002634">import</span> <span class="text" id="span_002635" smilref="Programming_Robots_with_ROS00010.smil#span_002635">Pose</span><span class="text" id="span_002636" smilref="Programming_Robots_with_ROS00010.smil#span_002636">,</span> <span class="text" id="span_002637" smilref="Programming_Robots_with_ROS00010.smil#span_002637">Point</span><span class="text" id="span_002638" smilref="Programming_Robots_with_ROS00010.smil#span_002638">,</span> <span class="text" id="span_002639" smilref="Programming_Robots_with_ROS00010.smil#span_002639">Quaternion</span>
<span class="text" id="span_002640" smilref="Programming_Robots_with_ROS00010.smil#span_002640">from</span> <span class="text" id="span_002641" smilref="Programming_Robots_with_ROS00010.smil#span_002641">math</span> <span class="text" id="span_002642" smilref="Programming_Robots_with_ROS00010.smil#span_002642">import</span> <span class="text" id="span_002643" smilref="Programming_Robots_with_ROS00010.smil#span_002643">pi</span>

<span class="text" id="span_002644" smilref="Programming_Robots_with_ROS00010.smil#span_002644">orient</span> <span class="text" id="span_002645" smilref="Programming_Robots_with_ROS00010.smil#span_002645">=</span> <span class="text" id="span_002646" smilref="Programming_Robots_with_ROS00010.smil#span_002646">[</span><span class="text" id="span_002647" smilref="Programming_Robots_with_ROS00010.smil#span_002647">Quaternion</span><span class="text" id="span_002648" smilref="Programming_Robots_with_ROS00010.smil#span_002648">(</span><span class="text" id="span_002649" smilref="Programming_Robots_with_ROS00010.smil#span_002649">*</span><span class="text" id="span_002650" smilref="Programming_Robots_with_ROS00010.smil#span_002650">tf</span><span class="text" id="span_002651" smilref="Programming_Robots_with_ROS00010.smil#span_002651">.</span><span class="text" id="span_002652" smilref="Programming_Robots_with_ROS00010.smil#span_002652">transformations</span><span class="text" id="span_002653" smilref="Programming_Robots_with_ROS00010.smil#span_002653">.</span><span class="text" id="span_002654" smilref="Programming_Robots_with_ROS00010.smil#span_002654">quaternion_from_euler</span><span class="text" id="span_002655" smilref="Programming_Robots_with_ROS00010.smil#span_002655">(</span><span class="text" id="span_002656" smilref="Programming_Robots_with_ROS00010.smil#span_002656">pi</span><span class="text" id="span_002657" smilref="Programming_Robots_with_ROS00010.smil#span_002657">,</span> <span class="text" id="span_002658" smilref="Programming_Robots_with_ROS00010.smil#span_002658">-</span><span class="text" id="span_002659" smilref="Programming_Robots_with_ROS00010.smil#span_002659">pi</span><span class="text" id="span_002660" smilref="Programming_Robots_with_ROS00010.smil#span_002660">/</span><span class="text" id="span_002661" smilref="Programming_Robots_with_ROS00010.smil#span_002661">2</span><span class="text" id="span_002662" smilref="Programming_Robots_with_ROS00010.smil#span_002662">,</span> <span class="text" id="span_002663" smilref="Programming_Robots_with_ROS00010.smil#span_002663">-</span><span class="text" id="span_002664" smilref="Programming_Robots_with_ROS00010.smil#span_002664">pi</span><span class="text" id="span_002665" smilref="Programming_Robots_with_ROS00010.smil#span_002665">/</span><span class="text" id="span_002666" smilref="Programming_Robots_with_ROS00010.smil#span_002666">2</span><span class="text" id="span_002667" smilref="Programming_Robots_with_ROS00010.smil#span_002667">)</span><span class="text" id="span_002668" smilref="Programming_Robots_with_ROS00010.smil#span_002668">)</span><span class="text" id="span_002669" smilref="Programming_Robots_with_ROS00010.smil#span_002669">,</span>
          <span class="text" id="span_002670" smilref="Programming_Robots_with_ROS00010.smil#span_002670">Quaternion</span><span class="text" id="span_002671" smilref="Programming_Robots_with_ROS00010.smil#span_002671">(</span><span class="text" id="span_002672" smilref="Programming_Robots_with_ROS00010.smil#span_002672">*</span><span class="text" id="span_002673" smilref="Programming_Robots_with_ROS00010.smil#span_002673">tf</span><span class="text" id="span_002674" smilref="Programming_Robots_with_ROS00010.smil#span_002674">.</span><span class="text" id="span_002675" smilref="Programming_Robots_with_ROS00010.smil#span_002675">transformations</span><span class="text" id="span_002676" smilref="Programming_Robots_with_ROS00010.smil#span_002676">.</span><span class="text" id="span_002677" smilref="Programming_Robots_with_ROS00010.smil#span_002677">quaternion_from_euler</span><span class="text" id="span_002678" smilref="Programming_Robots_with_ROS00010.smil#span_002678">(</span><span class="text" id="span_002679" smilref="Programming_Robots_with_ROS00010.smil#span_002679">pi</span><span class="text" id="span_002680" smilref="Programming_Robots_with_ROS00010.smil#span_002680">,</span> <span class="text" id="span_002681" smilref="Programming_Robots_with_ROS00010.smil#span_002681">-</span><span class="text" id="span_002682" smilref="Programming_Robots_with_ROS00010.smil#span_002682">pi</span><span class="text" id="span_002683" smilref="Programming_Robots_with_ROS00010.smil#span_002683">/</span><span class="text" id="span_002684" smilref="Programming_Robots_with_ROS00010.smil#span_002684">2</span><span class="text" id="span_002685" smilref="Programming_Robots_with_ROS00010.smil#span_002685">,</span> <span class="text" id="span_002686" smilref="Programming_Robots_with_ROS00010.smil#span_002686">-</span><span class="text" id="span_002687" smilref="Programming_Robots_with_ROS00010.smil#span_002687">pi</span><span class="text" id="span_002688" smilref="Programming_Robots_with_ROS00010.smil#span_002688">/</span><span class="text" id="span_002689" smilref="Programming_Robots_with_ROS00010.smil#span_002689">2</span><span class="text" id="span_002690" smilref="Programming_Robots_with_ROS00010.smil#span_002690">)</span><span class="text" id="span_002691" smilref="Programming_Robots_with_ROS00010.smil#span_002691">)</span><span class="text" id="span_002692" smilref="Programming_Robots_with_ROS00010.smil#span_002692">]</span> <a class="co" id="ch11-co_chess_bot_CO1-1" href="#ch11-callout_chess_bot_CO1-1" external="false"><img src="images/1.jpg" alt="1" id="img_000088" /></a>
<span class="text" id="span_002693" smilref="Programming_Robots_with_ROS00010.smil#span_002693">pose</span> <span class="text" id="span_002694" smilref="Programming_Robots_with_ROS00010.smil#span_002694">=</span> <span class="text" id="span_002695" smilref="Programming_Robots_with_ROS00010.smil#span_002695">[</span><span class="text" id="span_002696" smilref="Programming_Robots_with_ROS00010.smil#span_002696">Pose</span><span class="text" id="span_002697" smilref="Programming_Robots_with_ROS00010.smil#span_002697">(</span><span class="text" id="span_002698" smilref="Programming_Robots_with_ROS00010.smil#span_002698">Point</span><span class="text" id="span_002699" smilref="Programming_Robots_with_ROS00010.smil#span_002699">(</span> <span class="text" id="span_002700" smilref="Programming_Robots_with_ROS00010.smil#span_002700">0.5</span><span class="text" id="span_002701" smilref="Programming_Robots_with_ROS00010.smil#span_002701">,</span> <span class="text" id="span_002702" smilref="Programming_Robots_with_ROS00010.smil#span_002702">-</span><span class="text" id="span_002703" smilref="Programming_Robots_with_ROS00010.smil#span_002703">0.5</span><span class="text" id="span_002704" smilref="Programming_Robots_with_ROS00010.smil#span_002704">,</span> <span class="text" id="span_002705" smilref="Programming_Robots_with_ROS00010.smil#span_002705">1.3</span><span class="text" id="span_002706" smilref="Programming_Robots_with_ROS00010.smil#span_002706">)</span><span class="text" id="span_002707" smilref="Programming_Robots_with_ROS00010.smil#span_002707">,</span> <span class="text" id="span_002708" smilref="Programming_Robots_with_ROS00010.smil#span_002708">orient</span><span class="text" id="span_002709" smilref="Programming_Robots_with_ROS00010.smil#span_002709">[</span><span class="text" id="span_002710" smilref="Programming_Robots_with_ROS00010.smil#span_002710">0</span><span class="text" id="span_002711" smilref="Programming_Robots_with_ROS00010.smil#span_002711">]</span><span class="text" id="span_002712" smilref="Programming_Robots_with_ROS00010.smil#span_002712">)</span><span class="text" id="span_002713" smilref="Programming_Robots_with_ROS00010.smil#span_002713">,</span>
        <span class="text" id="span_002714" smilref="Programming_Robots_with_ROS00010.smil#span_002714">Pose</span><span class="text" id="span_002715" smilref="Programming_Robots_with_ROS00010.smil#span_002715">(</span><span class="text" id="span_002716" smilref="Programming_Robots_with_ROS00010.smil#span_002716">Point</span><span class="text" id="span_002717" smilref="Programming_Robots_with_ROS00010.smil#span_002717">(</span><span class="text" id="span_002718" smilref="Programming_Robots_with_ROS00010.smil#span_002718">-</span><span class="text" id="span_002719" smilref="Programming_Robots_with_ROS00010.smil#span_002719">0.5</span><span class="text" id="span_002720" smilref="Programming_Robots_with_ROS00010.smil#span_002720">,</span> <span class="text" id="span_002721" smilref="Programming_Robots_with_ROS00010.smil#span_002721">-</span><span class="text" id="span_002722" smilref="Programming_Robots_with_ROS00010.smil#span_002722">0.5</span><span class="text" id="span_002723" smilref="Programming_Robots_with_ROS00010.smil#span_002723">,</span> <span class="text" id="span_002724" smilref="Programming_Robots_with_ROS00010.smil#span_002724">1.3</span><span class="text" id="span_002725" smilref="Programming_Robots_with_ROS00010.smil#span_002725">)</span><span class="text" id="span_002726" smilref="Programming_Robots_with_ROS00010.smil#span_002726">,</span> <span class="text" id="span_002727" smilref="Programming_Robots_with_ROS00010.smil#span_002727">orient</span><span class="text" id="span_002728" smilref="Programming_Robots_with_ROS00010.smil#span_002728">[</span><span class="text" id="span_002729" smilref="Programming_Robots_with_ROS00010.smil#span_002729">1</span><span class="text" id="span_002730" smilref="Programming_Robots_with_ROS00010.smil#span_002730">]</span><span class="text" id="span_002731" smilref="Programming_Robots_with_ROS00010.smil#span_002731">)</span><span class="text" id="span_002732" smilref="Programming_Robots_with_ROS00010.smil#span_002732">]</span> <a class="co" id="ch11-co_chess_bot_CO1-2" href="#ch11-callout_chess_bot_CO1-2" external="false"><img src="images/2.jpg" alt="2" id="img_000089" /></a>
<span class="text" id="span_002733" smilref="Programming_Robots_with_ROS00010.smil#span_002733">moveit_commander</span><span class="text" id="span_002734" smilref="Programming_Robots_with_ROS00010.smil#span_002734">.</span><span class="text" id="span_002735" smilref="Programming_Robots_with_ROS00010.smil#span_002735">roscpp_initialize</span><span class="text" id="span_002736" smilref="Programming_Robots_with_ROS00010.smil#span_002736">(</span><span class="text" id="span_002737" smilref="Programming_Robots_with_ROS00010.smil#span_002737">sys</span><span class="text" id="span_002738" smilref="Programming_Robots_with_ROS00010.smil#span_002738">.</span><span class="text" id="span_002739" smilref="Programming_Robots_with_ROS00010.smil#span_002739">argv</span><span class="text" id="span_002740" smilref="Programming_Robots_with_ROS00010.smil#span_002740">)</span> <a class="co" id="ch11-co_chess_bot_CO1-3" href="#ch11-callout_chess_bot_CO1-3" external="false"><img src="images/3.jpg" alt="3" id="img_000090" /></a>
<span class="text" id="span_002741" smilref="Programming_Robots_with_ROS00010.smil#span_002741">rospy</span><span class="text" id="span_002742" smilref="Programming_Robots_with_ROS00010.smil#span_002742">.</span><span class="text" id="span_002743" smilref="Programming_Robots_with_ROS00010.smil#span_002743">init_node</span><span class="text" id="span_002744" smilref="Programming_Robots_with_ROS00010.smil#span_002744">(</span><span class="text" id="span_002745" smilref="Programming_Robots_with_ROS00010.smil#span_002745">'</span><span class="text" id="span_002746" smilref="Programming_Robots_with_ROS00010.smil#span_002746">r2_wave_arm</span><span class="text" id="span_002747" smilref="Programming_Robots_with_ROS00010.smil#span_002747">'</span><span class="text" id="span_002748" smilref="Programming_Robots_with_ROS00010.smil#span_002748">,</span><span class="text" id="span_002749" smilref="Programming_Robots_with_ROS00010.smil#span_002749">anonymous</span><span class="text" id="span_002750" smilref="Programming_Robots_with_ROS00010.smil#span_002750">=</span><span class="text" id="span_002751" smilref="Programming_Robots_with_ROS00010.smil#span_002751">True</span><span class="text" id="span_002752" smilref="Programming_Robots_with_ROS00010.smil#span_002752">)</span>
<span class="text" id="span_002753" smilref="Programming_Robots_with_ROS00010.smil#span_002753">group</span> <span class="text" id="span_002754" smilref="Programming_Robots_with_ROS00010.smil#span_002754">=</span> <span class="text" id="span_002755" smilref="Programming_Robots_with_ROS00010.smil#span_002755">[</span><span class="text" id="span_002756" smilref="Programming_Robots_with_ROS00010.smil#span_002756">moveit_commander</span><span class="text" id="span_002757" smilref="Programming_Robots_with_ROS00010.smil#span_002757">.</span><span class="text" id="span_002758" smilref="Programming_Robots_with_ROS00010.smil#span_002758">MoveGroupCommander</span><span class="text" id="span_002759" smilref="Programming_Robots_with_ROS00010.smil#span_002759">(</span><span class="text" id="span_002760" smilref="Programming_Robots_with_ROS00010.smil#span_002760">"</span><span class="text" id="span_002761" smilref="Programming_Robots_with_ROS00010.smil#span_002761">left_arm</span><span class="text" id="span_002762" smilref="Programming_Robots_with_ROS00010.smil#span_002762">"</span><span class="text" id="span_002763" smilref="Programming_Robots_with_ROS00010.smil#span_002763">)</span><span class="text" id="span_002764" smilref="Programming_Robots_with_ROS00010.smil#span_002764">,</span>
         <span class="text" id="span_002765" smilref="Programming_Robots_with_ROS00010.smil#span_002765">moveit_commander</span><span class="text" id="span_002766" smilref="Programming_Robots_with_ROS00010.smil#span_002766">.</span><span class="text" id="span_002767" smilref="Programming_Robots_with_ROS00010.smil#span_002767">MoveGroupCommander</span><span class="text" id="span_002768" smilref="Programming_Robots_with_ROS00010.smil#span_002768">(</span><span class="text" id="span_002769" smilref="Programming_Robots_with_ROS00010.smil#span_002769">"</span><span class="text" id="span_002770" smilref="Programming_Robots_with_ROS00010.smil#span_002770">right_arm</span><span class="text" id="span_002771" smilref="Programming_Robots_with_ROS00010.smil#span_002771">"</span><span class="text" id="span_002772" smilref="Programming_Robots_with_ROS00010.smil#span_002772">)</span><span class="text" id="span_002773" smilref="Programming_Robots_with_ROS00010.smil#span_002773">]</span>
<span class="text" id="span_002774" smilref="Programming_Robots_with_ROS00010.smil#span_002774"># now, wave arms around randomly</span>
<span class="text" id="span_002775" smilref="Programming_Robots_with_ROS00010.smil#span_002775">while</span> <span class="text" id="span_002776" smilref="Programming_Robots_with_ROS00010.smil#span_002776">not</span> <span class="text" id="span_002777" smilref="Programming_Robots_with_ROS00010.smil#span_002777">rospy</span><span class="text" id="span_002778" smilref="Programming_Robots_with_ROS00010.smil#span_002778">.</span><span class="text" id="span_002779" smilref="Programming_Robots_with_ROS00010.smil#span_002779">is_shutdown</span><span class="text" id="span_002780" smilref="Programming_Robots_with_ROS00010.smil#span_002780">(</span><span class="text" id="span_002781" smilref="Programming_Robots_with_ROS00010.smil#span_002781">)</span><span class="text" id="span_002782" smilref="Programming_Robots_with_ROS00010.smil#span_002782">:</span>
  <span class="text" id="span_002783" smilref="Programming_Robots_with_ROS00010.smil#span_002783">pose</span><span class="text" id="span_002784" smilref="Programming_Robots_with_ROS00010.smil#span_002784">[</span><span class="text" id="span_002785" smilref="Programming_Robots_with_ROS00010.smil#span_002785">0</span><span class="text" id="span_002786" smilref="Programming_Robots_with_ROS00010.smil#span_002786">]</span><span class="text" id="span_002787" smilref="Programming_Robots_with_ROS00010.smil#span_002787">.</span><span class="text" id="span_002788" smilref="Programming_Robots_with_ROS00010.smil#span_002788">position</span><span class="text" id="span_002789" smilref="Programming_Robots_with_ROS00010.smil#span_002789">.</span><span class="text" id="span_002790" smilref="Programming_Robots_with_ROS00010.smil#span_002790">x</span> <span class="text" id="span_002791" smilref="Programming_Robots_with_ROS00010.smil#span_002791">=</span>  <span class="text" id="span_002792" smilref="Programming_Robots_with_ROS00010.smil#span_002792">0.5</span> <span class="text" id="span_002793" smilref="Programming_Robots_with_ROS00010.smil#span_002793">+</span> <span class="text" id="span_002794" smilref="Programming_Robots_with_ROS00010.smil#span_002794">random</span><span class="text" id="span_002795" smilref="Programming_Robots_with_ROS00010.smil#span_002795">.</span><span class="text" id="span_002796" smilref="Programming_Robots_with_ROS00010.smil#span_002796">uniform</span><span class="text" id="span_002797" smilref="Programming_Robots_with_ROS00010.smil#span_002797">(</span><span class="text" id="span_002798" smilref="Programming_Robots_with_ROS00010.smil#span_002798">-</span><span class="text" id="span_002799" smilref="Programming_Robots_with_ROS00010.smil#span_002799">0.1</span><span class="text" id="span_002800" smilref="Programming_Robots_with_ROS00010.smil#span_002800">,</span> <span class="text" id="span_002801" smilref="Programming_Robots_with_ROS00010.smil#span_002801">0.1</span><span class="text" id="span_002802" smilref="Programming_Robots_with_ROS00010.smil#span_002802">)</span>
  <span class="text" id="span_002803" smilref="Programming_Robots_with_ROS00010.smil#span_002803">pose</span><span class="text" id="span_002804" smilref="Programming_Robots_with_ROS00010.smil#span_002804">[</span><span class="text" id="span_002805" smilref="Programming_Robots_with_ROS00010.smil#span_002805">1</span><span class="text" id="span_002806" smilref="Programming_Robots_with_ROS00010.smil#span_002806">]</span><span class="text" id="span_002807" smilref="Programming_Robots_with_ROS00010.smil#span_002807">.</span><span class="text" id="span_002808" smilref="Programming_Robots_with_ROS00010.smil#span_002808">position</span><span class="text" id="span_002809" smilref="Programming_Robots_with_ROS00010.smil#span_002809">.</span><span class="text" id="span_002810" smilref="Programming_Robots_with_ROS00010.smil#span_002810">x</span> <span class="text" id="span_002811" smilref="Programming_Robots_with_ROS00010.smil#span_002811">=</span> <span class="text" id="span_002812" smilref="Programming_Robots_with_ROS00010.smil#span_002812">-</span><span class="text" id="span_002813" smilref="Programming_Robots_with_ROS00010.smil#span_002813">0.5</span> <span class="text" id="span_002814" smilref="Programming_Robots_with_ROS00010.smil#span_002814">+</span> <span class="text" id="span_002815" smilref="Programming_Robots_with_ROS00010.smil#span_002815">random</span><span class="text" id="span_002816" smilref="Programming_Robots_with_ROS00010.smil#span_002816">.</span><span class="text" id="span_002817" smilref="Programming_Robots_with_ROS00010.smil#span_002817">uniform</span><span class="text" id="span_002818" smilref="Programming_Robots_with_ROS00010.smil#span_002818">(</span><span class="text" id="span_002819" smilref="Programming_Robots_with_ROS00010.smil#span_002819">-</span><span class="text" id="span_002820" smilref="Programming_Robots_with_ROS00010.smil#span_002820">0.1</span><span class="text" id="span_002821" smilref="Programming_Robots_with_ROS00010.smil#span_002821">,</span> <span class="text" id="span_002822" smilref="Programming_Robots_with_ROS00010.smil#span_002822">0.1</span><span class="text" id="span_002823" smilref="Programming_Robots_with_ROS00010.smil#span_002823">)</span>
  <span class="text" id="span_002824" smilref="Programming_Robots_with_ROS00010.smil#span_002824">for</span> <span class="text" id="span_002825" smilref="Programming_Robots_with_ROS00010.smil#span_002825">side</span> <span class="text" id="span_002826" smilref="Programming_Robots_with_ROS00010.smil#span_002826">in</span> <span class="text" id="span_002827" smilref="Programming_Robots_with_ROS00010.smil#span_002827">[</span><span class="text" id="span_002828" smilref="Programming_Robots_with_ROS00010.smil#span_002828">0</span><span class="text" id="span_002829" smilref="Programming_Robots_with_ROS00010.smil#span_002829">,</span><span class="text" id="span_002830" smilref="Programming_Robots_with_ROS00010.smil#span_002830">1</span><span class="text" id="span_002831" smilref="Programming_Robots_with_ROS00010.smil#span_002831">]</span><span class="text" id="span_002832" smilref="Programming_Robots_with_ROS00010.smil#span_002832">:</span>
    <span class="text" id="span_002833" smilref="Programming_Robots_with_ROS00010.smil#span_002833">pose</span><span class="text" id="span_002834" smilref="Programming_Robots_with_ROS00010.smil#span_002834">[</span><span class="text" id="span_002835" smilref="Programming_Robots_with_ROS00011.smil#span_002835">side</span><span class="text" id="span_002836" smilref="Programming_Robots_with_ROS00011.smil#span_002836">]</span><span class="text" id="span_002837" smilref="Programming_Robots_with_ROS00011.smil#span_002837">.</span><span class="text" id="span_002838" smilref="Programming_Robots_with_ROS00011.smil#span_002838">position</span><span class="text" id="span_002839" smilref="Programming_Robots_with_ROS00011.smil#span_002839">.</span><span class="text" id="span_002840" smilref="Programming_Robots_with_ROS00011.smil#span_002840">z</span> <span class="text" id="span_002841" smilref="Programming_Robots_with_ROS00011.smil#span_002841">=</span>  <span class="text" id="span_002842" smilref="Programming_Robots_with_ROS00011.smil#span_002842">1.5</span> <span class="text" id="span_002843" smilref="Programming_Robots_with_ROS00011.smil#span_002843">+</span> <span class="text" id="span_002844" smilref="Programming_Robots_with_ROS00011.smil#span_002844">random</span><span class="text" id="span_002845" smilref="Programming_Robots_with_ROS00011.smil#span_002845">.</span><span class="text" id="span_002846" smilref="Programming_Robots_with_ROS00011.smil#span_002846">uniform</span><span class="text" id="span_002847" smilref="Programming_Robots_with_ROS00011.smil#span_002847">(</span><span class="text" id="span_002848" smilref="Programming_Robots_with_ROS00011.smil#span_002848">-</span><span class="text" id="span_002849" smilref="Programming_Robots_with_ROS00011.smil#span_002849">0.1</span><span class="text" id="span_002850" smilref="Programming_Robots_with_ROS00011.smil#span_002850">,</span> <span class="text" id="span_002851" smilref="Programming_Robots_with_ROS00011.smil#span_002851">0.1</span><span class="text" id="span_002852" smilref="Programming_Robots_with_ROS00011.smil#span_002852">)</span>
    <span class="text" id="span_002853" smilref="Programming_Robots_with_ROS00011.smil#span_002853">group</span><span class="text" id="span_002854" smilref="Programming_Robots_with_ROS00011.smil#span_002854">[</span><span class="text" id="span_002855" smilref="Programming_Robots_with_ROS00011.smil#span_002855">side</span><span class="text" id="span_002856" smilref="Programming_Robots_with_ROS00011.smil#span_002856">]</span><span class="text" id="span_002857" smilref="Programming_Robots_with_ROS00011.smil#span_002857">.</span><span class="text" id="span_002858" smilref="Programming_Robots_with_ROS00011.smil#span_002858">set_pose_target</span><span class="text" id="span_002859" smilref="Programming_Robots_with_ROS00011.smil#span_002859">(</span><span class="text" id="span_002860" smilref="Programming_Robots_with_ROS00011.smil#span_002860">pose</span><span class="text" id="span_002861" smilref="Programming_Robots_with_ROS00011.smil#span_002861">[</span><span class="text" id="span_002862" smilref="Programming_Robots_with_ROS00011.smil#span_002862">side</span><span class="text" id="span_002863" smilref="Programming_Robots_with_ROS00011.smil#span_002863">]</span><span class="text" id="span_002864" smilref="Programming_Robots_with_ROS00011.smil#span_002864">)</span>
    <span class="text" id="span_002865" smilref="Programming_Robots_with_ROS00011.smil#span_002865">group</span><span class="text" id="span_002866" smilref="Programming_Robots_with_ROS00011.smil#span_002866">[</span><span class="text" id="span_002867" smilref="Programming_Robots_with_ROS00011.smil#span_002867">side</span><span class="text" id="span_002868" smilref="Programming_Robots_with_ROS00011.smil#span_002868">]</span><span class="text" id="span_002869" smilref="Programming_Robots_with_ROS00011.smil#span_002869">.</span><span class="text" id="span_002870" smilref="Programming_Robots_with_ROS00011.smil#span_002870">go</span><span class="text" id="span_002871" smilref="Programming_Robots_with_ROS00011.smil#span_002871">(</span><span class="text" id="span_002872" smilref="Programming_Robots_with_ROS00011.smil#span_002872">True</span><span class="text" id="span_002873" smilref="Programming_Robots_with_ROS00011.smil#span_002873">)</span>

<span class="text" id="span_002874" smilref="Programming_Robots_with_ROS00011.smil#span_002874">moveit_commander</span><span class="text" id="span_002875" smilref="Programming_Robots_with_ROS00011.smil#span_002875">.</span><span class="text" id="span_002876" smilref="Programming_Robots_with_ROS00011.smil#span_002876">roscpp_shutdown</span><span class="text" id="span_002877" smilref="Programming_Robots_with_ROS00011.smil#span_002877">(</span><span class="text" id="span_002878" smilref="Programming_Robots_with_ROS00011.smil#span_002878">)</span></code>
                  </p>
                  <dl class="calloutlist" id="dl_000006">
                    <dt id="dt_000029">
                      <a class="co" id="ch11-callout_chess_bot_CO1-1" href="#ch11-co_chess_bot_CO1-1" external="false">
                        <img src="images/1.jpg" alt="1" id="img_000091" />
                      </a>
                    </dt>
                    <dd id="dd_000029">
                      <p id="p_000730">
                        <span class="text" id="span_002879" smilref="Programming_Robots_with_ROS00011.smil#span_002879">The</span>
                        <code xml:space="preserve" id="code_001076" smilref="Programming_Robots_with_ROS00011.smil#code_001076">quaternion_from_euler()</code>
                        <span class="text" id="span_002880" smilref="Programming_Robots_with_ROS00011.smil#span_002880">function converts orientations between the Euler-angle representation (roll/pitch/yaw), which is relatively intuitive, and the quaternion representation, which is used by most computational geometry packages because of its numerical stability but unfortunately is very difficult to intuitively understand.</span>
                      </p>
                    </dd>
                    <dt id="dt_000030">
                      <a class="co" id="ch11-callout_chess_bot_CO1-2" href="#ch11-co_chess_bot_CO1-2" external="false">
                        <img src="images/2.jpg" alt="2" id="img_000092" />
                      </a>
                    </dt>
                    <dd id="dd_000030">
                      <p id="p_000731">
                        <span class="text" id="span_002881" smilref="Programming_Robots_with_ROS00011.smil#span_002881">The orientations created by the previous lines are used to stuff the</span>
                        <code xml:space="preserve" id="code_001077" smilref="Programming_Robots_with_ROS00011.smil#code_001077">Pose</code>
                        <span class="text" id="span_002882" smilref="Programming_Robots_with_ROS00011.smil#span_002882">messages.</span>
                      </p>
                    </dd>
                    <dt id="dt_000031">
                      <a class="co" id="ch11-callout_chess_bot_CO1-3" href="#ch11-co_chess_bot_CO1-3" external="false">
                        <img src="images/3.jpg" alt="3" id="img_000093" />
                      </a>
                    </dt>
                    <dd id="dd_000031">
                      <p class="keep-together" id="p_000732">
                        <code xml:space="preserve" id="code_001078" smilref="Programming_Robots_with_ROS00011.smil#code_001078">moveit_commander</code>
                        <span class="text" id="span_002883" smilref="Programming_Robots_with_ROS00011.smil#span_002883">is the Python interface to the MoveIt motion planning system.</span>
                      </p>
                    </dd>
                  </dl>
                </div>
                <p id="p_000733">
                  <span class="text" id="span_002884" smilref="Programming_Robots_with_ROS00011.smil#span_002884">The robot moves! Hooray! That little program will choose random positions for the R2's palms that lie on a vertical plane just in front of the robot. Every second or so, it will choose a new point on that plane and then move the robot's palms to lie flat on the plane for each arm, as shown in</span>
                  <a data-type="xref" href="#ch11-simulated_r2_mime" external="false" id="a_000146" smilref="Programming_Robots_with_ROS00011.smil#a_000146">Figure 11-5</a>
                  <span class="text" id="span_002885" smilref="Programming_Robots_with_ROS00011.smil#span_002885">.</span>
                </p>
                <figure id="figure_000050">
                  <h1 id="h1_000220" smilref="Programming_Robots_with_ROS00011.smil#h1_000220">Figure 11-5. A simulated R2 mime</h1>
                  <div id="ch11-simulated_r2_mime" class="figure">
                    <img src="images/prwr_1104.jpg" alt="Simulated R2 Mime" id="img_000094" />
                  </div>
                </figure>
                <p id="ch11-idp26336784" data-type="indexterm" data-startref="ix_11-chessbot-asciidoc5" smilref="Programming_Robots_with_ROS00011.smil#ch11-idp26336784">The benefits of MoveIt are clearly apparent in this simple little program. Notice how we didn't need to know anything about the joint limits, link lengths, acceleration/deceleration capabilities, or really anything about the R2? We simply told MoveIt where we wanted the hands to go, and it figured out everything else.</p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Moving R2 from the Command Line" id="section_000121">
              <h1 id="h1_000221" smilref="Programming_Robots_with_ROS00011.smil#h1_000221">Moving R2 from the Command Line</h1>
              <div class="sect1" id="ch11-idp25872320">
                <p id="ch11-idp26331680" data-type="indexterm" data-primary="manipulators" data-secondary="moving R2 from the command line">
                  <span class="text" id="span_002886" smilref="Programming_Robots_with_ROS00011.smil#span_002886">Now, let's create a simple interface where we can type in arm poses and have the R2 nicely move its arms to those positions using MoveIt.</span>
                  <a data-type="xref" href="#ch11-r2_cli" external="false" id="a_000147" smilref="Programming_Robots_with_ROS00011.smil#a_000147">Example 11-2</a>
                  <span class="text" id="span_002887" smilref="Programming_Robots_with_ROS00011.smil#span_002887">is just a</span>
                  <span class="keep-together" id="span_002888" smilref="Programming_Robots_with_ROS00011.smil#span_002888">refactoring</span>
                  <span class="text" id="span_002889" smilref="Programming_Robots_with_ROS00011.smil#span_002889">of the previous code snippet, wrapping it up into something that will be a bit easier to reuse.</span>
                </p>
                <h1 id="h1_000222" smilref="Programming_Robots_with_ROS00011.smil#h1_000222">Example 11-2. r2_cli.py</h1>
                <div id="ch11-r2_cli" data-type="example">
                  <p id="p_000734">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001079"><span class="text" id="span_002890" smilref="Programming_Robots_with_ROS00011.smil#span_002890">#!/usr/bin/env python</span>
<span class="text" id="span_002891" smilref="Programming_Robots_with_ROS00011.smil#span_002891">import</span> <span class="text" id="span_002892" smilref="Programming_Robots_with_ROS00011.smil#span_002892">sys</span><span class="text" id="span_002893" smilref="Programming_Robots_with_ROS00011.smil#span_002893">,</span> <span class="text" id="span_002894" smilref="Programming_Robots_with_ROS00011.smil#span_002894">rospy</span><span class="text" id="span_002895" smilref="Programming_Robots_with_ROS00011.smil#span_002895">,</span> <span class="text" id="span_002896" smilref="Programming_Robots_with_ROS00011.smil#span_002896">tf</span><span class="text" id="span_002897" smilref="Programming_Robots_with_ROS00011.smil#span_002897">,</span> <span class="text" id="span_002898" smilref="Programming_Robots_with_ROS00011.smil#span_002898">moveit_commander</span><span class="text" id="span_002899" smilref="Programming_Robots_with_ROS00011.smil#span_002899">,</span> <span class="text" id="span_002900" smilref="Programming_Robots_with_ROS00011.smil#span_002900">random</span>
<span class="text" id="span_002901" smilref="Programming_Robots_with_ROS00011.smil#span_002901">from</span> <span class="text" id="span_002902" smilref="Programming_Robots_with_ROS00011.smil#span_002902">geometry_msgs.msg</span> <span class="text" id="span_002903" smilref="Programming_Robots_with_ROS00011.smil#span_002903">import</span> <span class="text" id="span_002904" smilref="Programming_Robots_with_ROS00011.smil#span_002904">Pose</span><span class="text" id="span_002905" smilref="Programming_Robots_with_ROS00011.smil#span_002905">,</span> <span class="text" id="span_002906" smilref="Programming_Robots_with_ROS00011.smil#span_002906">Point</span><span class="text" id="span_002907" smilref="Programming_Robots_with_ROS00011.smil#span_002907">,</span> <span class="text" id="span_002908" smilref="Programming_Robots_with_ROS00011.smil#span_002908">Quaternion</span>

<span class="text" id="span_002909" smilref="Programming_Robots_with_ROS00011.smil#span_002909">class</span> <span class="text" id="span_002910" smilref="Programming_Robots_with_ROS00011.smil#span_002910">R2Wrapper</span><span class="text" id="span_002911" smilref="Programming_Robots_with_ROS00011.smil#span_002911">:</span>
  <span class="text" id="span_002912" smilref="Programming_Robots_with_ROS00011.smil#span_002912">def</span> <span class="text" id="span_002913" smilref="Programming_Robots_with_ROS00011.smil#span_002913">__init__</span><span class="text" id="span_002914" smilref="Programming_Robots_with_ROS00011.smil#span_002914">(</span><span class="text" id="span_002915" smilref="Programming_Robots_with_ROS00011.smil#span_002915">self</span><span class="text" id="span_002916" smilref="Programming_Robots_with_ROS00011.smil#span_002916">)</span><span class="text" id="span_002917" smilref="Programming_Robots_with_ROS00011.smil#span_002917">:</span>
    <span class="text" id="span_002918" smilref="Programming_Robots_with_ROS00011.smil#span_002918">self</span><span class="text" id="span_002919" smilref="Programming_Robots_with_ROS00011.smil#span_002919">.</span><span class="text" id="span_002920" smilref="Programming_Robots_with_ROS00011.smil#span_002920">group</span> <span class="text" id="span_002921" smilref="Programming_Robots_with_ROS00011.smil#span_002921">=</span> <span class="text" id="span_002922" smilref="Programming_Robots_with_ROS00011.smil#span_002922">{</span><span class="text" id="span_002923" smilref="Programming_Robots_with_ROS00011.smil#span_002923">'</span><span class="text" id="span_002924" smilref="Programming_Robots_with_ROS00011.smil#span_002924">left</span><span class="text" id="span_002925" smilref="Programming_Robots_with_ROS00011.smil#span_002925">'</span><span class="text" id="span_002926" smilref="Programming_Robots_with_ROS00011.smil#span_002926">:</span> <span class="text" id="span_002927" smilref="Programming_Robots_with_ROS00011.smil#span_002927">moveit_commander</span><span class="text" id="span_002928" smilref="Programming_Robots_with_ROS00011.smil#span_002928">.</span><span class="text" id="span_002929" smilref="Programming_Robots_with_ROS00011.smil#span_002929">MoveGroupCommander</span><span class="text" id="span_002930" smilref="Programming_Robots_with_ROS00011.smil#span_002930">(</span><span class="text" id="span_002931" smilref="Programming_Robots_with_ROS00011.smil#span_002931">"</span><span class="text" id="span_002932" smilref="Programming_Robots_with_ROS00011.smil#span_002932">left_arm</span><span class="text" id="span_002933" smilref="Programming_Robots_with_ROS00011.smil#span_002933">"</span><span class="text" id="span_002934" smilref="Programming_Robots_with_ROS00011.smil#span_002934">)</span><span class="text" id="span_002935" smilref="Programming_Robots_with_ROS00011.smil#span_002935">,</span>
                  <span class="text" id="span_002936" smilref="Programming_Robots_with_ROS00011.smil#span_002936">'</span><span class="text" id="span_002937" smilref="Programming_Robots_with_ROS00011.smil#span_002937">right</span><span class="text" id="span_002938" smilref="Programming_Robots_with_ROS00011.smil#span_002938">'</span><span class="text" id="span_002939" smilref="Programming_Robots_with_ROS00011.smil#span_002939">:</span> <span class="text" id="span_002940" smilref="Programming_Robots_with_ROS00011.smil#span_002940">moveit_commander</span><span class="text" id="span_002941" smilref="Programming_Robots_with_ROS00011.smil#span_002941">.</span><span class="text" id="span_002942" smilref="Programming_Robots_with_ROS00011.smil#span_002942">MoveGroupCommander</span><span class="text" id="span_002943" smilref="Programming_Robots_with_ROS00011.smil#span_002943">(</span><span class="text" id="span_002944" smilref="Programming_Robots_with_ROS00011.smil#span_002944">"</span><span class="text" id="span_002945" smilref="Programming_Robots_with_ROS00011.smil#span_002945">right_arm</span><span class="text" id="span_002946" smilref="Programming_Robots_with_ROS00011.smil#span_002946">"</span><span class="text" id="span_002947" smilref="Programming_Robots_with_ROS00011.smil#span_002947">)</span><span class="text" id="span_002948" smilref="Programming_Robots_with_ROS00011.smil#span_002948">}</span>
  <span class="text" id="span_002949" smilref="Programming_Robots_with_ROS00011.smil#span_002949">def</span> <span class="text" id="span_002950" smilref="Programming_Robots_with_ROS00011.smil#span_002950">setPose</span><span class="text" id="span_002951" smilref="Programming_Robots_with_ROS00011.smil#span_002951">(</span><span class="text" id="span_002952" smilref="Programming_Robots_with_ROS00011.smil#span_002952">self</span><span class="text" id="span_002953" smilref="Programming_Robots_with_ROS00011.smil#span_002953">,</span> <span class="text" id="span_002954" smilref="Programming_Robots_with_ROS00011.smil#span_002954">arm</span><span class="text" id="span_002955" smilref="Programming_Robots_with_ROS00011.smil#span_002955">,</span> <span class="text" id="span_002956" smilref="Programming_Robots_with_ROS00011.smil#span_002956">x</span><span class="text" id="span_002957" smilref="Programming_Robots_with_ROS00011.smil#span_002957">,</span> <span class="text" id="span_002958" smilref="Programming_Robots_with_ROS00011.smil#span_002958">y</span><span class="text" id="span_002959" smilref="Programming_Robots_with_ROS00011.smil#span_002959">,</span> <span class="text" id="span_002960" smilref="Programming_Robots_with_ROS00011.smil#span_002960">z</span><span class="text" id="span_002961" smilref="Programming_Robots_with_ROS00011.smil#span_002961">,</span> <span class="text" id="span_002962" smilref="Programming_Robots_with_ROS00011.smil#span_002962">phi</span><span class="text" id="span_002963" smilref="Programming_Robots_with_ROS00011.smil#span_002963">,</span> <span class="text" id="span_002964" smilref="Programming_Robots_with_ROS00011.smil#span_002964">theta</span><span class="text" id="span_002965" smilref="Programming_Robots_with_ROS00011.smil#span_002965">,</span> <span class="text" id="span_002966" smilref="Programming_Robots_with_ROS00011.smil#span_002966">psi</span><span class="text" id="span_002967" smilref="Programming_Robots_with_ROS00011.smil#span_002967">)</span><span class="text" id="span_002968" smilref="Programming_Robots_with_ROS00011.smil#span_002968">:</span>
    <span class="text" id="span_002969" smilref="Programming_Robots_with_ROS00011.smil#span_002969">if</span> <span class="text" id="span_002970" smilref="Programming_Robots_with_ROS00011.smil#span_002970">arm</span> <span class="text" id="span_002971" smilref="Programming_Robots_with_ROS00011.smil#span_002971">!=</span> <span class="text" id="span_002972" smilref="Programming_Robots_with_ROS00011.smil#span_002972">'</span><span class="text" id="span_002973" smilref="Programming_Robots_with_ROS00011.smil#span_002973">left</span><span class="text" id="span_002974" smilref="Programming_Robots_with_ROS00011.smil#span_002974">'</span> <span class="text" id="span_002975" smilref="Programming_Robots_with_ROS00011.smil#span_002975">and</span> <span class="text" id="span_002976" smilref="Programming_Robots_with_ROS00011.smil#span_002976">arm</span> <span class="text" id="span_002977" smilref="Programming_Robots_with_ROS00011.smil#span_002977">!=</span> <span class="text" id="span_002978" smilref="Programming_Robots_with_ROS00011.smil#span_002978">'</span><span class="text" id="span_002979" smilref="Programming_Robots_with_ROS00011.smil#span_002979">right</span><span class="text" id="span_002980" smilref="Programming_Robots_with_ROS00011.smil#span_002980">'</span><span class="text" id="span_002981" smilref="Programming_Robots_with_ROS00011.smil#span_002981">:</span>
      <span class="text" id="span_002982" smilref="Programming_Robots_with_ROS00011.smil#span_002982">raise</span> <span class="text" id="span_002983" smilref="Programming_Robots_with_ROS00011.smil#span_002983">ValueError</span><span class="text" id="span_002984" smilref="Programming_Robots_with_ROS00011.smil#span_002984">(</span><span class="text" id="span_002985" smilref="Programming_Robots_with_ROS00011.smil#span_002985">"</span><span class="text" id="span_002986" smilref="Programming_Robots_with_ROS00011.smil#span_002986">unknown arm: </span><span class="text" id="span_002987" smilref="Programming_Robots_with_ROS00011.smil#span_002987">'</span><span class="text" id="span_002988" smilref="Programming_Robots_with_ROS00011.smil#span_002988">%s</span><span class="text" id="span_002989" smilref="Programming_Robots_with_ROS00011.smil#span_002989">'</span><span class="text" id="span_002990" smilref="Programming_Robots_with_ROS00011.smil#span_002990">"</span> <span class="text" id="span_002991" smilref="Programming_Robots_with_ROS00011.smil#span_002991">%</span> <span class="text" id="span_002992" smilref="Programming_Robots_with_ROS00011.smil#span_002992">arm</span><span class="text" id="span_002993" smilref="Programming_Robots_with_ROS00011.smil#span_002993">)</span>
    <span class="text" id="span_002994" smilref="Programming_Robots_with_ROS00011.smil#span_002994">orient</span> <span class="text" id="span_002995" smilref="Programming_Robots_with_ROS00011.smil#span_002995">=</span> <span class="text" id="span_002996" smilref="Programming_Robots_with_ROS00011.smil#span_002996">\
</span>      <span class="text" id="span_002997" smilref="Programming_Robots_with_ROS00011.smil#span_002997">Quaternion</span><span class="text" id="span_002998" smilref="Programming_Robots_with_ROS00011.smil#span_002998">(</span><span class="text" id="span_002999" smilref="Programming_Robots_with_ROS00011.smil#span_002999">*</span><span class="text" id="span_003000" smilref="Programming_Robots_with_ROS00011.smil#span_003000">tf</span><span class="text" id="span_003001" smilref="Programming_Robots_with_ROS00011.smil#span_003001">.</span><span class="text" id="span_003002" smilref="Programming_Robots_with_ROS00011.smil#span_003002">transformations</span><span class="text" id="span_003003" smilref="Programming_Robots_with_ROS00011.smil#span_003003">.</span><span class="text" id="span_003004" smilref="Programming_Robots_with_ROS00011.smil#span_003004">quaternion_from_euler</span><span class="text" id="span_003005" smilref="Programming_Robots_with_ROS00011.smil#span_003005">(</span><span class="text" id="span_003006" smilref="Programming_Robots_with_ROS00011.smil#span_003006">phi</span><span class="text" id="span_003007" smilref="Programming_Robots_with_ROS00011.smil#span_003007">,</span> <span class="text" id="span_003008" smilref="Programming_Robots_with_ROS00011.smil#span_003008">theta</span><span class="text" id="span_003009" smilref="Programming_Robots_with_ROS00011.smil#span_003009">,</span> <span class="text" id="span_003010" smilref="Programming_Robots_with_ROS00011.smil#span_003010">psi</span><span class="text" id="span_003011" smilref="Programming_Robots_with_ROS00011.smil#span_003011">)</span><span class="text" id="span_003012" smilref="Programming_Robots_with_ROS00011.smil#span_003012">)</span> <a class="co" id="ch11-co_chess_bot_CO2-1" href="#ch11-callout_chess_bot_CO2-1" external="false"><img src="images/1.jpg" alt="1" id="img_000095" /></a>
    <span class="text" id="span_003013" smilref="Programming_Robots_with_ROS00011.smil#span_003013">pose</span> <span class="text" id="span_003014" smilref="Programming_Robots_with_ROS00011.smil#span_003014">=</span> <span class="text" id="span_003015" smilref="Programming_Robots_with_ROS00011.smil#span_003015">Pose</span><span class="text" id="span_003016" smilref="Programming_Robots_with_ROS00011.smil#span_003016">(</span><span class="text" id="span_003017" smilref="Programming_Robots_with_ROS00011.smil#span_003017">Point</span><span class="text" id="span_003018" smilref="Programming_Robots_with_ROS00011.smil#span_003018">(</span><span class="text" id="span_003019" smilref="Programming_Robots_with_ROS00011.smil#span_003019">x</span><span class="text" id="span_003020" smilref="Programming_Robots_with_ROS00011.smil#span_003020">,</span> <span class="text" id="span_003021" smilref="Programming_Robots_with_ROS00011.smil#span_003021">y</span><span class="text" id="span_003022" smilref="Programming_Robots_with_ROS00011.smil#span_003022">,</span> <span class="text" id="span_003023" smilref="Programming_Robots_with_ROS00011.smil#span_003023">z</span><span class="text" id="span_003024" smilref="Programming_Robots_with_ROS00011.smil#span_003024">)</span><span class="text" id="span_003025" smilref="Programming_Robots_with_ROS00011.smil#span_003025">,</span> <span class="text" id="span_003026" smilref="Programming_Robots_with_ROS00011.smil#span_003026">orient</span><span class="text" id="span_003027" smilref="Programming_Robots_with_ROS00011.smil#span_003027">)</span>
    <span class="text" id="span_003028" smilref="Programming_Robots_with_ROS00011.smil#span_003028">self</span><span class="text" id="span_003029" smilref="Programming_Robots_with_ROS00011.smil#span_003029">.</span><span class="text" id="span_003030" smilref="Programming_Robots_with_ROS00011.smil#span_003030">group</span><span class="text" id="span_003031" smilref="Programming_Robots_with_ROS00011.smil#span_003031">[</span><span class="text" id="span_003032" smilref="Programming_Robots_with_ROS00011.smil#span_003032">arm</span><span class="text" id="span_003033" smilref="Programming_Robots_with_ROS00011.smil#span_003033">]</span><span class="text" id="span_003034" smilref="Programming_Robots_with_ROS00011.smil#span_003034">.</span><span class="text" id="span_003035" smilref="Programming_Robots_with_ROS00011.smil#span_003035">set_pose_target</span><span class="text" id="span_003036" smilref="Programming_Robots_with_ROS00011.smil#span_003036">(</span><span class="text" id="span_003037" smilref="Programming_Robots_with_ROS00011.smil#span_003037">pose</span><span class="text" id="span_003038" smilref="Programming_Robots_with_ROS00011.smil#span_003038">)</span>
    <span class="text" id="span_003039" smilref="Programming_Robots_with_ROS00011.smil#span_003039">self</span><span class="text" id="span_003040" smilref="Programming_Robots_with_ROS00011.smil#span_003040">.</span><span class="text" id="span_003041" smilref="Programming_Robots_with_ROS00011.smil#span_003041">group</span><span class="text" id="span_003042" smilref="Programming_Robots_with_ROS00011.smil#span_003042">[</span><span class="text" id="span_003043" smilref="Programming_Robots_with_ROS00011.smil#span_003043">arm</span><span class="text" id="span_003044" smilref="Programming_Robots_with_ROS00011.smil#span_003044">]</span><span class="text" id="span_003045" smilref="Programming_Robots_with_ROS00011.smil#span_003045">.</span><span class="text" id="span_003046" smilref="Programming_Robots_with_ROS00011.smil#span_003046">go</span><span class="text" id="span_003047" smilref="Programming_Robots_with_ROS00011.smil#span_003047">(</span><span class="text" id="span_003048" smilref="Programming_Robots_with_ROS00011.smil#span_003048">True</span><span class="text" id="span_003049" smilref="Programming_Robots_with_ROS00011.smil#span_003049">)</span>

<span class="text" id="span_003050" smilref="Programming_Robots_with_ROS00011.smil#span_003050">if</span> <span class="text" id="span_003051" smilref="Programming_Robots_with_ROS00011.smil#span_003051">__name__</span> <span class="text" id="span_003052" smilref="Programming_Robots_with_ROS00011.smil#span_003052">==</span> <span class="text" id="span_003053" smilref="Programming_Robots_with_ROS00011.smil#span_003053">'</span><span class="text" id="span_003054" smilref="Programming_Robots_with_ROS00011.smil#span_003054">__main__</span><span class="text" id="span_003055" smilref="Programming_Robots_with_ROS00011.smil#span_003055">'</span><span class="text" id="span_003056" smilref="Programming_Robots_with_ROS00011.smil#span_003056">:</span>
  <span class="text" id="span_003057" smilref="Programming_Robots_with_ROS00011.smil#span_003057">moveit_commander</span><span class="text" id="span_003058" smilref="Programming_Robots_with_ROS00011.smil#span_003058">.</span><span class="text" id="span_003059" smilref="Programming_Robots_with_ROS00011.smil#span_003059">roscpp_initialize</span><span class="text" id="span_003060" smilref="Programming_Robots_with_ROS00011.smil#span_003060">(</span><span class="text" id="span_003061" smilref="Programming_Robots_with_ROS00011.smil#span_003061">sys</span><span class="text" id="span_003062" smilref="Programming_Robots_with_ROS00011.smil#span_003062">.</span><span class="text" id="span_003063" smilref="Programming_Robots_with_ROS00011.smil#span_003063">argv</span><span class="text" id="span_003064" smilref="Programming_Robots_with_ROS00011.smil#span_003064">)</span>
  <span class="text" id="span_003065" smilref="Programming_Robots_with_ROS00011.smil#span_003065">rospy</span><span class="text" id="span_003066" smilref="Programming_Robots_with_ROS00011.smil#span_003066">.</span><span class="text" id="span_003067" smilref="Programming_Robots_with_ROS00011.smil#span_003067">init_node</span><span class="text" id="span_003068" smilref="Programming_Robots_with_ROS00011.smil#span_003068">(</span><span class="text" id="span_003069" smilref="Programming_Robots_with_ROS00011.smil#span_003069">'</span><span class="text" id="span_003070" smilref="Programming_Robots_with_ROS00011.smil#span_003070">r2_cli</span><span class="text" id="span_003071" smilref="Programming_Robots_with_ROS00011.smil#span_003071">'</span><span class="text" id="span_003072" smilref="Programming_Robots_with_ROS00011.smil#span_003072">,</span><span class="text" id="span_003073" smilref="Programming_Robots_with_ROS00011.smil#span_003073">anonymous</span><span class="text" id="span_003074" smilref="Programming_Robots_with_ROS00011.smil#span_003074">=</span><span class="text" id="span_003075" smilref="Programming_Robots_with_ROS00011.smil#span_003075">True</span><span class="text" id="span_003076" smilref="Programming_Robots_with_ROS00011.smil#span_003076">)</span>
  <span class="text" id="span_003077" smilref="Programming_Robots_with_ROS00011.smil#span_003077">argv</span> <span class="text" id="span_003078" smilref="Programming_Robots_with_ROS00011.smil#span_003078">=</span> <span class="text" id="span_003079" smilref="Programming_Robots_with_ROS00011.smil#span_003079">rospy</span><span class="text" id="span_003080" smilref="Programming_Robots_with_ROS00011.smil#span_003080">.</span><span class="text" id="span_003081" smilref="Programming_Robots_with_ROS00011.smil#span_003081">myargv</span><span class="text" id="span_003082" smilref="Programming_Robots_with_ROS00011.smil#span_003082">(</span><span class="text" id="span_003083" smilref="Programming_Robots_with_ROS00011.smil#span_003083">argv</span><span class="text" id="span_003084" smilref="Programming_Robots_with_ROS00011.smil#span_003084">=</span><span class="text" id="span_003085" smilref="Programming_Robots_with_ROS00011.smil#span_003085">sys</span><span class="text" id="span_003086" smilref="Programming_Robots_with_ROS00011.smil#span_003086">.</span><span class="text" id="span_003087" smilref="Programming_Robots_with_ROS00011.smil#span_003087">argv</span><span class="text" id="span_003088" smilref="Programming_Robots_with_ROS00011.smil#span_003088">)</span> <span class="text" id="span_003089" smilref="Programming_Robots_with_ROS00011.smil#span_003089"># filter out any arguments used by ROS</span>
  <span class="text" id="span_003090" smilref="Programming_Robots_with_ROS00011.smil#span_003090">if</span> <span class="text" id="span_003091" smilref="Programming_Robots_with_ROS00011.smil#span_003091">len</span><span class="text" id="span_003092" smilref="Programming_Robots_with_ROS00011.smil#span_003092">(</span><span class="text" id="span_003093" smilref="Programming_Robots_with_ROS00011.smil#span_003093">argv</span><span class="text" id="span_003094" smilref="Programming_Robots_with_ROS00011.smil#span_003094">)</span> <span class="text" id="span_003095" smilref="Programming_Robots_with_ROS00011.smil#span_003095">!=</span> <span class="text" id="span_003096" smilref="Programming_Robots_with_ROS00011.smil#span_003096">8</span><span class="text" id="span_003097" smilref="Programming_Robots_with_ROS00011.smil#span_003097">:</span>
    <span class="text" id="span_003098" smilref="Programming_Robots_with_ROS00011.smil#span_003098">print</span> <span class="text" id="span_003099" smilref="Programming_Robots_with_ROS00011.smil#span_003099">"</span><span class="text" id="span_003100" smilref="Programming_Robots_with_ROS00011.smil#span_003100">usage: r2_cli.py arm X Y Z phi theta psi</span><span class="text" id="span_003101" smilref="Programming_Robots_with_ROS00011.smil#span_003101">"</span>
    <span class="text" id="span_003102" smilref="Programming_Robots_with_ROS00011.smil#span_003102">sys</span><span class="text" id="span_003103" smilref="Programming_Robots_with_ROS00011.smil#span_003103">.</span><span class="text" id="span_003104" smilref="Programming_Robots_with_ROS00011.smil#span_003104">exit</span><span class="text" id="span_003105" smilref="Programming_Robots_with_ROS00011.smil#span_003105">(</span><span class="text" id="span_003106" smilref="Programming_Robots_with_ROS00011.smil#span_003106">1</span><span class="text" id="span_003107" smilref="Programming_Robots_with_ROS00011.smil#span_003107">)</span>
  <span class="text" id="span_003108" smilref="Programming_Robots_with_ROS00011.smil#span_003108">r2w</span> <span class="text" id="span_003109" smilref="Programming_Robots_with_ROS00011.smil#span_003109">=</span> <span class="text" id="span_003110" smilref="Programming_Robots_with_ROS00011.smil#span_003110">R2Wrapper</span><span class="text" id="span_003111" smilref="Programming_Robots_with_ROS00011.smil#span_003111">(</span><span class="text" id="span_003112" smilref="Programming_Robots_with_ROS00011.smil#span_003112">)</span>
  <span class="text" id="span_003113" smilref="Programming_Robots_with_ROS00011.smil#span_003113">r2w</span><span class="text" id="span_003114" smilref="Programming_Robots_with_ROS00011.smil#span_003114">.</span><span class="text" id="span_003115" smilref="Programming_Robots_with_ROS00011.smil#span_003115">setPose</span><span class="text" id="span_003116" smilref="Programming_Robots_with_ROS00011.smil#span_003116">(</span><span class="text" id="span_003117" smilref="Programming_Robots_with_ROS00011.smil#span_003117">argv</span><span class="text" id="span_003118" smilref="Programming_Robots_with_ROS00011.smil#span_003118">[</span><span class="text" id="span_003119" smilref="Programming_Robots_with_ROS00011.smil#span_003119">1</span><span class="text" id="span_003120" smilref="Programming_Robots_with_ROS00011.smil#span_003120">]</span><span class="text" id="span_003121" smilref="Programming_Robots_with_ROS00011.smil#span_003121">,</span> <span class="text" id="span_003122" smilref="Programming_Robots_with_ROS00011.smil#span_003122">*</span><span class="text" id="span_003123" smilref="Programming_Robots_with_ROS00011.smil#span_003123">[</span><span class="text" id="span_003124" smilref="Programming_Robots_with_ROS00011.smil#span_003124">float</span><span class="text" id="span_003125" smilref="Programming_Robots_with_ROS00011.smil#span_003125">(</span><span class="text" id="span_003126" smilref="Programming_Robots_with_ROS00011.smil#span_003126">num</span><span class="text" id="span_003127" smilref="Programming_Robots_with_ROS00011.smil#span_003127">)</span> <span class="text" id="span_003128" smilref="Programming_Robots_with_ROS00011.smil#span_003128">for</span> <span class="text" id="span_003129" smilref="Programming_Robots_with_ROS00011.smil#span_003129">num</span> <span class="text" id="span_003130" smilref="Programming_Robots_with_ROS00011.smil#span_003130">in</span> <span class="text" id="span_003131" smilref="Programming_Robots_with_ROS00011.smil#span_003131">sys</span><span class="text" id="span_003132" smilref="Programming_Robots_with_ROS00011.smil#span_003132">.</span><span class="text" id="span_003133" smilref="Programming_Robots_with_ROS00011.smil#span_003133">argv</span><span class="text" id="span_003134" smilref="Programming_Robots_with_ROS00011.smil#span_003134">[</span><span class="text" id="span_003135" smilref="Programming_Robots_with_ROS00011.smil#span_003135">2</span><span class="text" id="span_003136" smilref="Programming_Robots_with_ROS00011.smil#span_003136">:</span><span class="text" id="span_003137" smilref="Programming_Robots_with_ROS00011.smil#span_003137">]</span><span class="text" id="span_003138" smilref="Programming_Robots_with_ROS00011.smil#span_003138">]</span><span class="text" id="span_003139" smilref="Programming_Robots_with_ROS00011.smil#span_003139">)</span>
  <span class="text" id="span_003140" smilref="Programming_Robots_with_ROS00011.smil#span_003140">moveit_commander</span><span class="text" id="span_003141" smilref="Programming_Robots_with_ROS00011.smil#span_003141">.</span><span class="text" id="span_003142" smilref="Programming_Robots_with_ROS00011.smil#span_003142">roscpp_shutdown</span><span class="text" id="span_003143" smilref="Programming_Robots_with_ROS00011.smil#span_003143">(</span><span class="text" id="span_003144" smilref="Programming_Robots_with_ROS00011.smil#span_003144">)</span></code>
                  </p>
                  <dl class="calloutlist" id="dl_000007">
                    <dt id="dt_000032">
                      <a class="co" id="ch11-callout_chess_bot_CO2-1" href="#ch11-co_chess_bot_CO2-1" external="false">
                        <img src="images/1.jpg" alt="1" id="img_000096" />
                      </a>
                    </dt>
                    <dd id="dd_000032">
                      <p id="p_000735">
                        <span class="text" id="span_003145" smilref="Programming_Robots_with_ROS00011.smil#span_003145">The</span>
                        <code xml:space="preserve" id="code_001080" smilref="Programming_Robots_with_ROS00011.smil#code_001080">quaternion_from_euler()</code>
                        <span class="text" id="span_003146" smilref="Programming_Robots_with_ROS00011.smil#span_003146">function does the trigonometry required to convert between the Euler-angle and quaternion representations of an orientation.</span>
                      </p>
                    </dd>
                  </dl>
                </div>
                <p id="p_000736" smilref="Programming_Robots_with_ROS00011.smil#p_000736">With this little wrapper program, we can type commands at the shell to move the arms around, like these few examples:</p>
                <p id="p_000737">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001081"><span class="text" id="span_003147" smilref="Programming_Robots_with_ROS00011.smil#span_003147">
user@hostname$ </span><strong id="strong_000131" smilref="Programming_Robots_with_ROS00011.smil#strong_000131">./r2_cli.py left   0.5 -0.5 1.3 3.14 -1.5 -1.57</strong><span class="text" id="span_003148" smilref="Programming_Robots_with_ROS00011.smil#span_003148">
user@hostname$ </span><strong id="strong_000132" smilref="Programming_Robots_with_ROS00011.smil#strong_000132">./r2_cli.py right -0.4 -0.6 1.4 3.14 -1.5 -1.57</strong><span class="text" id="span_003149" smilref="Programming_Robots_with_ROS00011.smil#span_003149">
user@hostname$ </span><strong id="strong_000133" smilref="Programming_Robots_with_ROS00011.smil#strong_000133">./r2_cli.py left   0.4 -0.4 1.2 3.14 -1.5 -1.57 </strong>
</code>
                </p>
                <p id="p_000738">
                  <span class="text" id="span_003150" smilref="Programming_Robots_with_ROS00011.smil#span_003150">Now, at first glance, it might seem like typing random six-dimensional coordinates at the command line isn't a particularly elegant user interface. It is, indeed, rather terrible. However, we can use this building block to create some command-line aliases, so that our shell becomes more useful for running the R2. We can put these aliases into a simple text file that the command shell (</span>
                  <code xml:space="preserve" id="code_001082" smilref="Programming_Robots_with_ROS00011.smil#code_001082">bash</code>
                  <span class="text" id="span_003151" smilref="Programming_Robots_with_ROS00011.smil#span_003151">) can read, named</span>
                  <em id="em_000333" smilref="Programming_Robots_with_ROS00011.smil#em_000333">r2.bash</em>
                  <span class="text" id="span_003152" smilref="Programming_Robots_with_ROS00011.smil#span_003152">, as shown in</span>
                  <a data-type="xref" href="#ch11-r2_bash" external="false" id="a_000148" smilref="Programming_Robots_with_ROS00011.smil#a_000148">Example 11-3</a>
                  <span class="text" id="span_003153" smilref="Programming_Robots_with_ROS00011.smil#span_003153">.</span>
                </p>
                <h1 id="h1_000223" smilref="Programming_Robots_with_ROS00011.smil#h1_000223">Example 11-3. r2.bash</h1>
                <div id="ch11-r2_bash" data-type="example">
                  <p id="p_000739">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001083" smilref="Programming_Robots_with_ROS00011.smil#code_001083">#!/bin/bash
alias r2lhome="./r2_cli.py left   0.5 -0.5 1  1.57 0 -1.57"
alias r2rhome="./r2_cli.py right -0.5 -0.5 1 -1.57 0 -1.57"
alias r2home="r2lhome;r2rhome"</code>
                  </p>
                </div>
                <p id="p_000740">
                  <span class="text" id="span_003154" smilref="Programming_Robots_with_ROS00011.smil#span_003154">To load these aliases into the current shell, type</span>
                  <code xml:space="preserve" id="code_001084" smilref="Programming_Robots_with_ROS00011.smil#code_001084">source ./r2.bash</code>
                  <span class="text" id="span_003155" smilref="Programming_Robots_with_ROS00011.smil#span_003155">at the command line. You can then simply type</span>
                  <code xml:space="preserve" id="code_001085" smilref="Programming_Robots_with_ROS00011.smil#code_001085">r2home</code>
                  <span class="text" id="span_003156" smilref="Programming_Robots_with_ROS00011.smil#span_003156">, and the robot will plan a safe path to its home position and smoothly execute it.</span>
                </p>
                <p id="p_000741" smilref="Programming_Robots_with_ROS00011.smil#p_000741">For most robots, there are typically a few postures that are useful for many tasks, or even just for daily operation and maintenance. A small command-line program and a few bash aliases like this can make life much more convenient.</p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Moving R2 Around a Chessboard" id="section_000122">
              <h1 id="h1_000224" smilref="Programming_Robots_with_ROS00011.smil#h1_000224">Moving R2 Around a Chessboard</h1>
              <div class="sect1" id="ch11-idp27046736">
                <p data-type="indexterm" data-primary="chessboard" data-secondary="moving R2 (Chess-bot) around a" id="ch11-idp27136912">
                  <span class="text" id="span_003157" smilref="Programming_Robots_with_ROS00011.smil#span_003157">The previous</span>
                  <code xml:space="preserve" id="code_001086" smilref="Programming_Robots_with_ROS00011.smil#code_001086">R2Wrapper</code>
                  <span class="text" id="span_003158" smilref="Programming_Robots_with_ROS00011.smil#span_003158">class accepted six-dimensional coordinates for its pose targets: the three-dimensional Cartesian (</span>
                  <em id="ch11-idp27138080" smilref="Programming_Robots_with_ROS00011.smil#ch11-idp27138080">x</em>
                  <span class="text" id="span_003159" smilref="Programming_Robots_with_ROS00011.smil#span_003159">,</span>
                  <em id="em_000334" smilref="Programming_Robots_with_ROS00011.smil#em_000334">y</em>
                  <span class="text" id="span_003160" smilref="Programming_Robots_with_ROS00011.smil#span_003160">,</span>
                  <em id="em_000335" smilref="Programming_Robots_with_ROS00011.smil#em_000335">z</em>
                  <span class="text" id="span_003161" smilref="Programming_Robots_with_ROS00011.smil#span_003161">) coordinates, and a description of the desired rotation of the hand using Euler angles (roll, pitch, and yaw). For example, we could ask the R2 robot to position its hand 30 centimeters above, 20 centimeters to the right, and 10 centimeters in front of its torso, with its palm facing outward (0 degrees roll, 90 degrees pitch, 0 degrees yaw), to prepare for a</span>
                  <em id="em_000336" smilref="Programming_Robots_with_ROS00011.smil#em_000336">high-five</em>
                  <span class="text" id="span_003162" smilref="Programming_Robots_with_ROS00011.smil#span_003162">maneuver. Specifying commands in six dimensions is a useful way to express the desired manipulator behavior of a robot when we must be as general-purpose as possible. It's fun for the first few times to type 6D coordinates at the command line, but it gets old quickly. Often, it is much more convenient to describe the robot's postures in terms of the task the robot is supposed to be doing.</span>
                </p>
                <p id="ch11-ix_11-chessbot-asciidoc10" data-type="indexterm" data-primary="Chess-bot" data-secondary="using chessboard coordinates for arm positions" data-seealso="Chess-bot" smilref="Programming_Robots_with_ROS00011.smil#ch11-ix_11-chessbot-asciidoc10">As an example of this type of task, we will build a Chess-bot. It will thus be convenient to describe the positions of the arms in chessboard coordinates. The standard way of describing a chessboard is to use a letter for a row (also known as a "rank" in chess) and a number for a column (called a "file" in chess)--for example, g2, a3, f1, a8, and so on.</p>
                <p id="p_000742">
                  <a data-type="xref" href="#ch11-r2_chessboard_cli" external="false" id="a_000149" smilref="Programming_Robots_with_ROS00011.smil#a_000149">Example 11-4</a>
                  <span class="text" id="span_003163" smilref="Programming_Robots_with_ROS00011.smil#span_003163">builds upon our previous example, showing one way to accept command-line instructions for commanding the R2's left arm to move to the designated chessboard rank and file, and also specifying the desired height above the chessboard.</span>
                </p>
                <h1 id="h1_000225" smilref="Programming_Robots_with_ROS00011.smil#h1_000225">Example 11-4. r2_chessboard_cli.py</h1>
                <div id="ch11-r2_chessboard_cli" data-type="example" class="pagebreak-before">
                  <p id="p_000743">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001087" smilref="Programming_Robots_with_ROS00011.smil#code_001087">#!/usr/bin/env python
import sys, rospy, tf, moveit_commander, random
from geometry_msgs.msg import Pose, Point, Quaternion

class R2ChessboardWrapper:
  def __init__(self):
    self.left_arm = moveit_commander.MoveGroupCommander("left_arm")

  def setPose(self, x, y, z, phi, theta, psi):
    orient = \
      Quaternion(*tf.transformations.quaternion_from_euler(phi, theta, psi))
    pose = Pose(Point(x, y, z), orient)
    self.left_arm.set_pose_target(pose)
    self.left_arm.go(True)

  def setSquare(self, square, height_above_board):
    if len(square) != 2 or not square[1].isdigit():
      raise ValueError(
        "expected a chess rank and file like 'b3' but found %s instead" %
        square)
    rank_y = -0.3 - 0.05 * (ord(square[0]) - ord('a'))
    file_x =  0.5 - 0.05 * int(square[1])
    z = float(height_above_board) + 1.0
    self.setPose(file_x, rank_y, z, 3.14, 0.3, -1.57)

if __name__ == '__main__':
  moveit_commander.roscpp_initialize(sys.argv)
  rospy.init_node('r2_chessboard_cli')
  argv = rospy.myargv(argv=sys.argv) # filter out any arguments used by ROS
  if len(argv) != 3:
    print "usage: r2_chessboard.py square height"
    sys.exit(1)
  r2w = R2ChessboardWrapper()
  r2w.setSquare(*argv[1:])
  moveit_commander.roscpp_shutdown()</code>
                  </p>
                </div>
                <p id="p_000744" smilref="Programming_Robots_with_ROS00011.smil#p_000744">With this program, we can now command the R2 to move its arm around in chess coordinates, like this:</p>
                <p id="p_000745">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001088"><span class="text" id="span_003164" smilref="Programming_Robots_with_ROS00011.smil#span_003164">
user@hostname$ </span><strong id="strong_000134" smilref="Programming_Robots_with_ROS00011.smil#strong_000134">./r2_chessboard_cli.py a2 0.04</strong>
</code>
                </p>
                <p id="p_000746" smilref="Programming_Robots_with_ROS00011.smil#p_000746">This commands the arm to a pose that is 4 cm above square a2. Progress!</p>
                <p class="pagebreak-before" id="p_000747" smilref="Programming_Robots_with_ROS00011.smil#p_000747">We must now stop and come to terms with something: this approach of hardcoding a bunch of constants into the control code is exceedingly brittle. How did we know that the chessboard is 1 meter above the floor and 30 cm in front of the R2? What if our robot were in a boisterous chess club where the chessboard could be bumped and moved a few centimeters? The robot would have no idea. When it tried to move a piece, it would miss, which would be embarrassing. It would lose the chess match.</p>
                <p id="p_000748" smilref="Programming_Robots_with_ROS00011.smil#p_000748">And yet, many successful robots are programmed precisely like this. Most "classical" industrial robots, for example, operate conceptually in the same manner as the previous script: various important poses are "taught" to the robot by skilled operators using a "teach pendant" that allows them to fly the robot arm to various key positions and record them. So long as the environment and task never change, as is the case in many industrial applications, this works perfectly well. Just don't try it in a rowdy chess club!</p>
                <p id="p_000749" smilref="Programming_Robots_with_ROS00011.smil#p_000749">In later chapters in this book, we will introduce various perception algorithms and libraries that allow robots to respond to changes in their environment or task. But for the remainder of this chapter, we will assume that the world is perfectly known ahead of time.</p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Operating the Hand" id="section_000123">
              <h1 id="h1_000226" smilref="Programming_Robots_with_ROS00011.smil#h1_000226">Operating the Hand</h1>
              <div class="sect1" id="ch11-idp26230768">
                <p id="ch11-ix_11-chessbot-asciidoc12" data-type="indexterm" data-primary="Chess-bot" data-secondary="hand operation">
                  <span class="text" id="span_003165" smilref="Programming_Robots_with_ROS00011.smil#span_003165">Now that we can move the R2's palm above the chess squares, we need to be able to open and close the fingers. We will use MoveIt again, but this time we will just be sending the target joint vectors to MoveIt. For our Chess-bot, we will only need two states for the hand: a "pinch" grasp of some sort, and a pose that we will use just before pinching, which we'll call "pre-pinch." We can hardcode those postures and send them to MoveIt, which will then ensure that acceleration/deceleration limits are observed and that self-collisions do not occur--since we don't want to have the fingers crash into each other. Although there are more sophisticated approaches, this strategy of hardcoding a few useful postures is common in robotics, especially in domains where the environment is perfectly known ahead of time. We will take this approach in</span>
                  <a data-type="xref" href="#ch11-r2_hand" external="false" id="a_000150" smilref="Programming_Robots_with_ROS00011.smil#a_000150">Example 11-5</a>
                  <span class="text" id="span_003166" smilref="Programming_Robots_with_ROS00011.smil#span_003166">, where two predefined joint vectors will be used to create "open" and "closed" hand positions to grasp the chess pieces.</span>
                </p>
                <h1 id="h1_000227" smilref="Programming_Robots_with_ROS00011.smil#h1_000227">Example 11-5. r2_hand.py</h1>
                <div id="ch11-r2_hand" data-type="example" class="pagebreak-before">
                  <p id="p_000750">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001089" smilref="Programming_Robots_with_ROS00011.smil#code_001089">#!/usr/bin/env python
import sys, rospy, tf, moveit_commander, random
from geometry_msgs.msg import Pose, Point, Quaternion

class R2Hand:
  def __init__(self):
    self.left_hand = moveit_commander.MoveGroupCommander("left_hand")

  def setGrasp(self, state):
    if state == "pre-pinch":
      vec = [ 0.3, 0, 1.57, 0,  # index
              -0.1, 0, 1.57, 0, # middle
              0, 0, 0,          # ring
              0, 0, 0,          # pinkie
              0, 1.1, 0, 0]     # thumb
    elif state == "pinch":
      vec = [ -0.1, 0, 1.57, 0,
              0, 0, 1.57, 0,
              0, 0, 0,
              0, 0, 0,
              0, 1.1, 0, 0]
    elif state == "open":
      vec = [0] * 18
    else:
      raise ValueError("unknown hand state: %s" % state)
    self.left_hand.set_joint_value_target(vec)
    self.left_hand.go(True)

if __name__ == '__main__':
  moveit_commander.roscpp_initialize(sys.argv)
  rospy.init_node('r2_hand')
  argv = rospy.myargv(argv=sys.argv) # filter out any arguments used by ROS
  if len(argv) != 2:
    print "usage: r2_hand.py STATE"
    sys.exit(1)
  r2w = R2Hand()
  r2w.setGrasp(argv[1])</code>
                  </p>
                </div>
                <p id="p_000751">
                  <span class="text" id="span_003167" smilref="Programming_Robots_with_ROS00011.smil#span_003167">The program in</span>
                  <a data-type="xref" href="#ch11-r2_hand" external="false" id="a_000151" smilref="Programming_Robots_with_ROS00011.smil#a_000151">Example 11-5</a>
                  <span class="text" id="span_003168" smilref="Programming_Robots_with_ROS00011.smil#span_003168">will let us type on the command line to command three hand postures to R2: open, pre-pinch, and pinch. Because of a joint limit on the thumb travel, we will be doing a pinch grasp between the sides of the index and middle fingers. It looks a little unusual, but it works! Using</span>
                  <code xml:space="preserve" id="code_001090" smilref="Programming_Robots_with_ROS00011.smil#code_001090">r2_hand.py</code>
                  <span class="text" id="span_003169" smilref="Programming_Robots_with_ROS00011.smil#span_003169">, we can produce the two postures shown in</span>
                  <a data-type="xref" href="#ch11-prepinch_hand_posture" external="false" id="a_000152" smilref="Programming_Robots_with_ROS00011.smil#a_000152">Figure 11-6</a>
                  <span class="text" id="span_003170" smilref="Programming_Robots_with_ROS00011.smil#span_003170">and</span>
                  <a data-type="xref" href="#ch11-chess_board" external="false" id="a_000153" smilref="Programming_Robots_with_ROS00011.smil#a_000153">Example 11-7</a>
                  <span class="text" id="span_003171" smilref="Programming_Robots_with_ROS00011.smil#span_003171">:</span>
                </p>
                <p id="p_000752">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001091"><span class="text" id="span_003172" smilref="Programming_Robots_with_ROS00011.smil#span_003172">
user@hostname$ </span><strong id="strong_000135" smilref="Programming_Robots_with_ROS00011.smil#strong_000135">./r2_hand.py pre-pinch</strong><span class="text" id="span_003173" smilref="Programming_Robots_with_ROS00011.smil#span_003173">
user@hostname$ </span><strong id="strong_000136" smilref="Programming_Robots_with_ROS00011.smil#strong_000136">./r2_hand.py pinch</strong>
</code>
                </p>
                <figure id="figure_000051">
                  <h1 id="h1_000228" smilref="Programming_Robots_with_ROS00011.smil#h1_000228">Figure 11-6. The pre-pinch hand posture</h1>
                  <div id="ch11-prepinch_hand_posture" class="figure">
                    <img src="images/prwr_11in02.jpg" alt="Pre-pinch grasp" id="img_000097" />
                  </div>
                </figure>
                <figure id="figure_000052">
                  <h1 id="h1_000229" smilref="Programming_Robots_with_ROS00011.smil#h1_000229">Figure 11-7. The pinch hand posture</h1>
                  <div id="ch11-pinch_hand_posture" class="figure">
                    <img src="images/prwr_11in03.jpg" alt="Pinch grasp" id="img_000098" />
                  </div>
                </figure>
                <p id="ch11-idp27623264" data-type="indexterm" data-startref="ix_11-chessbot-asciidoc12" smilref="Programming_Robots_with_ROS00011.smil#ch11-idp27623264">Now, it's time to make a chessboard!</p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Modeling a Chessboard" id="section_000124">
              <h1 id="h1_000230" smilref="Programming_Robots_with_ROS00011.smil#h1_000230">Modeling a Chessboard</h1>
              <div class="sect1" id="ch11-idp27624080">
                <p data-type="indexterm" data-primary="Chess-bot" data-secondary="chessboard modeling for" id="ch11-ix_11-chessbot-asciidoc14">
                  <span class="text" id="span_003174" smilref="Programming_Robots_with_ROS00011.smil#span_003174">A large part of the effort in robot simulation is spent in modeling the environment of interest. At first, this can seem like time not particularly well spent. After all, we're trying to control a robot, not stare at a computer! But developing the model quickly pays huge dividends: unlike in the real world, you can click a button and instantly reset the world to the</span>
                  <em id="em_000337" smilref="Programming_Robots_with_ROS00011.smil#em_000337">exact</em>
                  <span class="text" id="span_003175" smilref="Programming_Robots_with_ROS00011.smil#span_003175">same configuration. This is incredibly useful. But, back to chess!</span>
                </p>
                <p id="p_000753" smilref="Programming_Robots_with_ROS00011.smil#p_000753">There are many ways to create simulation models and worlds in ROS, but in this case, we are using the Robonaut 2 world released by NASA. Although we could copy their world and launch files and modify them, it is easier to instantiate the chessboard and pieces from Python by spawning the models inside an existing running simulation. This approach also allows us to reset the game board as necessary, without having to restart the simulation. This will be convenient as we are tuning the motion sequences.</p>
                <p data-type="indexterm" data-primary="SDF (Simulation Description Format)" id="ch11-ix_11-chessbot-asciidoc17" data-secondary="and Gazebo">
                  <span class="text" id="span_003176" smilref="Programming_Robots_with_ROS00011.smil#span_003176">The first step is to model a chess piece. This can be an arbitrarily complex process, depending on the desired level of fidelity. Right now, we want to keep it as simple as possible, so we are modeling chess pieces just as identical blocks. Models in Gazebo can be represented in several XML formats, but the currently recommended format for new models is the Simulation Description Format (SDF). Our rectangular</span>
                  <span class="keep-together" id="span_003177" smilref="Programming_Robots_with_ROS00011.smil#span_003177">chess-piece</span>
                  <span class="text" id="span_003178" smilref="Programming_Robots_with_ROS00011.smil#span_003178">model is represented in the SDF XML shown in</span>
                  <a data-type="xref" href="#ch11-chess_piece" external="false" id="a_000154" smilref="Programming_Robots_with_ROS00011.smil#a_000154">Example 11-6</a>
                  <span class="text" id="span_003179" smilref="Programming_Robots_with_ROS00011.smil#span_003179">. This listing is rather long and can appear tedious, but we wanted to provide a full example that shows how to model a simple object in Gazebo because when important SDF tags are omitted (for example,</span>
                  <code xml:space="preserve" id="code_001092" smilref="Programming_Robots_with_ROS00011.smil#code_001092">inertia</code>
                  <span class="text" id="span_003180" smilref="Programming_Robots_with_ROS00011.smil#span_003180">, or</span>
                  <code xml:space="preserve" id="code_001093" smilref="Programming_Robots_with_ROS00011.smil#code_001093">collision</code>
                  <span class="text" id="span_003181" smilref="Programming_Robots_with_ROS00011.smil#span_003181">, or</span>
                  <code xml:space="preserve" id="code_001094" smilref="Programming_Robots_with_ROS00011.smil#code_001094">contact</code>
                  <span class="text" id="span_003182" smilref="Programming_Robots_with_ROS00011.smil#span_003182">), the simulation can behave in confusing or counterintuitive ways.</span>
                </p>
                <h1 id="h1_000231" smilref="Programming_Robots_with_ROS00011.smil#h1_000231">Example 11-6. chess_piece.sdf</h1>
                <div id="ch11-chess_piece" data-type="example">
                  <p id="p_000754">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001095" smilref="Programming_Robots_with_ROS00011.smil#code_001095">&lt;?xml version='1.0'?&gt;
&lt;sdf version ='1.4'&gt;
  &lt;model name ='piece'&gt;
    &lt;link name ='link'&gt;
      &lt;inertial&gt;
        &lt;mass&gt;0.001&lt;/mass&gt;
        &lt;inertia&gt;
          &lt;ixx&gt;0.0000001667&lt;/ixx&gt;
          &lt;ixy&gt;0&lt;/ixy&gt;
          &lt;ixz&gt;0&lt;/ixz&gt;
          &lt;iyy&gt;0.0000000667&lt;/iyy&gt;
          &lt;iyz&gt;0&lt;/iyz&gt;
          &lt;izz&gt;0.0000001667&lt;/izz&gt;
        &lt;/inertia&gt;
      &lt;/inertial&gt;
      &lt;collision name="collision"&gt;
        &lt;geometry&gt;
          &lt;box&gt;&lt;size&gt;0.02 0.02 0.04&lt;/size&gt;&lt;/box&gt;
        &lt;/geometry&gt;
        &lt;surface&gt;
          &lt;friction&gt;
            &lt;ode&gt;
              &lt;mu&gt;0.4&lt;/mu&gt;
              &lt;mu2&gt;0.4&lt;/mu2&gt;
            &lt;/ode&gt;
          &lt;/friction&gt;
          &lt;contact&gt;
            &lt;ode&gt;
              &lt;max_vel&gt;0.1&lt;/max_vel&gt;
              &lt;min_depth&gt;0.0001&lt;/min_depth&gt;
            &lt;/ode&gt;
          &lt;/contact&gt;
        &lt;/surface&gt;
      &lt;/collision&gt;
      &lt;visual name="visual"&gt;
        &lt;geometry&gt;
          &lt;box&gt;&lt;size&gt;0.02 0.02 0.04&lt;/size&gt;&lt;/box&gt;
        &lt;/geometry&gt;
      &lt;/visual&gt;
    &lt;/link&gt;
  &lt;/model&gt;
&lt;/sdf&gt;</code>
                  </p>
                </div>
                <p id="ch11-idp28055088" data-type="indexterm" data-startref="ix_11-chessbot-asciidoc17">
                  <span class="text" id="span_003183" smilref="Programming_Robots_with_ROS00011.smil#span_003183">We will also represent the chessboard as a very wide, flat box in SDF, as shown in</span>
                  <a data-type="xref" href="#ch11-chess_board" external="false" id="a_000155" smilref="Programming_Robots_with_ROS00011.smil#a_000155">Example 11-7</a>
                  <span class="text" id="span_003184" smilref="Programming_Robots_with_ROS00011.smil#span_003184">. This SDF listing is simpler, because the chessboard will be treated as an immovable object in the simulation and thus does not need its inertial properties to be defined.</span>
                </p>
                <h1 id="h1_000232" smilref="Programming_Robots_with_ROS00011.smil#h1_000232">Example 11-7. chess_board.sdf</h1>
                <div id="ch11-chess_board" data-type="example">
                  <p id="p_000755">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001096" smilref="Programming_Robots_with_ROS00011.smil#code_001096">&lt;?xml version='1.0'?&gt;
&lt;sdf version ='1.4'&gt;
  &lt;model name ='box'&gt;
    &lt;static&gt;true&lt;/static&gt;
    &lt;link name ='link'&gt;
      &lt;collision name="collision"&gt;
        &lt;geometry&gt;
          &lt;box&gt;&lt;size&gt;0.5 0.5 0.02&lt;/size&gt;&lt;/box&gt;
        &lt;/geometry&gt;
        &lt;surface&gt;
          &lt;friction&gt;
            &lt;ode&gt;
              &lt;mu&gt;0.1&lt;/mu&gt;
              &lt;mu2&gt;0.1&lt;/mu2&gt;
            &lt;/ode&gt;
          &lt;/friction&gt;
          &lt;contact&gt;
            &lt;ode&gt;
              &lt;max_vel&gt;0.1&lt;/max_vel&gt;
              &lt;min_depth&gt;0.001&lt;/min_depth&gt;
            &lt;/ode&gt;
          &lt;/contact&gt;
        &lt;/surface&gt;
      &lt;/collision&gt;
      &lt;visual name="visual"&gt;
        &lt;geometry&gt;
          &lt;box&gt;&lt;size&gt;0.5 0.5 0.02&lt;/size&gt;&lt;/box&gt;
        &lt;/geometry&gt;
      &lt;/visual&gt;
    &lt;/link&gt;
  &lt;/model&gt;
&lt;/sdf&gt;</code>
                  </p>
                </div>
                <p id="p_000756">
                  <span class="text" id="span_003185" smilref="Programming_Robots_with_ROS00011.smil#span_003185">Now, we need a script that can spawn and place these models in a running simulation, since we will be knocking over a lot of chess pieces. As before, there are many ways to do this. In this case, we'll demonstrate how to spawn models in Python. Gazebo provides ROS services for deleting and spawning models (among other tasks), which we will use to set up the board. Because the board may already exist in the simulation,</span>
                  <a data-type="xref" href="#ch11-spawn_chessboard" external="false" id="a_000156" smilref="Programming_Robots_with_ROS00011.smil#a_000156">Example 11-8</a>
                  <span class="text" id="span_003186" smilref="Programming_Robots_with_ROS00011.smil#span_003186">first tries to delete the pieces before spawning new ones.</span>
                </p>
                <h1 id="h1_000233" smilref="Programming_Robots_with_ROS00011.smil#h1_000233">Example 11-8. spawn_chessboard.py</h1>
                <div id="ch11-spawn_chessboard" data-type="example">
                  <p id="p_000757">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001097" smilref="Programming_Robots_with_ROS00011.smil#code_001097">#!/usr/bin/env python
import sys, rospy, tf
from gazebo_msgs.srv import *
from geometry_msgs.msg import *
from copy import deepcopy

if __name__ == '__main__':
  rospy.init_node("spawn_chessboard")
  rospy.wait_for_service("gazebo/delete_model")
  rospy.wait_for_service("gazebo/spawn_sdf_model")
  delete_model = rospy.ServiceProxy("gazebo/delete_model", DeleteModel)
  delete_model("chessboard")
  s = rospy.ServiceProxy("gazebo/spawn_sdf_model", SpawnModel)
  orient = Quaternion(*tf.transformations.quaternion_from_euler(0, 0, 0))
  board_pose = Pose(Point(0.25,1.39,0.90), orient)
  unit = 0.05
  with open("chessboard.sdf", "r") as f:
    board_xml = f.read()
  with open("chess_piece.sdf", "r") as f:
    piece_xml = f.read()

  print s("chessboard", board_xml, "", board_pose, "world")

  for row in [0,1,6,7]:
    for col in xrange(0,8):
      piece_name = "piece_%d_%d" % (row, col)
      delete_model(piece_name)
      pose = deepcopy(board_pose)
      pose.position.x = board_pose.position.x - 3.5 * unit + col * unit
      pose.position.y = board_pose.position.y - 3.5 * unit + row * unit
      pose.position.z += 0.02
      s(piece_name, piece_xml, "", pose, "world")</code>
                  </p>
                </div>
                <p id="ch11-idp28108496" data-type="indexterm" data-startref="ix_11-chessbot-asciidoc14">
                  <span class="text" id="span_003187" smilref="Programming_Robots_with_ROS00011.smil#span_003187">That's it! Now, whenever we want to reset the chessboard in our running R2 simulation, we can just run the</span>
                  <em id="em_000338" smilref="Programming_Robots_with_ROS00011.smil#em_000338">spawn_chessboard.py</em>
                  <span class="text" id="span_003188" smilref="Programming_Robots_with_ROS00011.smil#span_003188">script. The resulting setup looks like</span>
                  <a data-type="xref" href="#ch11-gazebo_screenshot_of_r2" external="false" id="a_000157" smilref="Programming_Robots_with_ROS00011.smil#a_000157">Figure 11-8</a>
                  <span class="text" id="span_003189" smilref="Programming_Robots_with_ROS00011.smil#span_003189">.</span>
                </p>
                <figure id="figure_000053">
                  <h1 id="h1_000234" smilref="Programming_Robots_with_ROS00011.smil#h1_000234">Figure 11-8. A Gazebo screenshot of the R2 chess simulation</h1>
                  <div id="ch11-gazebo_screenshot_of_r2" class="figure">
                    <img src="images/prwr_11in04.jpg" alt="Pinch grasp" id="img_000099" />
                  </div>
                </figure>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Playing Back a Famous Chess Game" id="section_000125">
              <h1 id="h1_000235" smilref="Programming_Robots_with_ROS00011.smil#h1_000235">Playing Back a Famous Chess Game</h1>
              <div class="sect1" id="ch11-idp27624672">
                <p id="ch11-ix_11-chessbot-asciidoc19" data-type="indexterm" data-primary="Chess-bot" data-secondary="playing back chess games with" smilref="Programming_Robots_with_ROS00011.smil#ch11-ix_11-chessbot-asciidoc19">Now we will put all the elements of this chapter together. We have written scripts that can smoothly navigate the arm to the (predefined) locations of chess squares, open and close the fingers, and set up the chessboard. Now, we can put all of this together to "play back" chess game descriptions. But where do we find the game logs? Fortunately, that is not a problem with chess. It is one of the most well-documented games in existence. There are several textfile formats for chess games, including one called Portable Game Notation (PGN). Fortunately, there is already an open source Python parser for PGN files. We can install it like so:</p>
                <p id="p_000758">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001098" smilref="Programming_Robots_with_ROS00011.smil#code_001098">sudo apt-get install python-pip
sudo pip install pgnparser</code>
                </p>
                <p id="p_000759">
                  <span class="text" id="span_003190" smilref="Programming_Robots_with_ROS00011.smil#span_003190">Your authors are not great chess players. In fact, we are quite terrible. We played a quick game against the computer and were soundly defeated. For the benefit of science, we recorded our inglorious defeat to PGN format and used</span>
                  <code xml:space="preserve" id="code_001099" smilref="Programming_Robots_with_ROS00011.smil#code_001099">pgn-extract</code>
                  <span class="text" id="span_003191" smilref="Programming_Robots_with_ROS00011.smil#span_003191">to convert it to standard chess long algebraic notation. Our defeat is thus completely described in the following descriptions of chess moves, each one taking us closer to checkmate:</span>
                </p>
                <p id="p_000760">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001100" smilref="Programming_Robots_with_ROS00011.smil#code_001100">1. e2e4 c7c5 2. d2d4 c5d4 3. d1d4 b8c6 4. c2c4 c6d4 5. b1c3 d4c2+ 6. e1d1
c2a1 7. a2a4 e7e5 8. c1g5 d8g5 9. c3d5 g5d8 10. f2f4 e5f4 11. g1f3 g8f6 12.
d5f6+ d8f6 13. f1d3 f6b2 14. h1e1 b2g2 15. e1e2 g2f3 16. d1c1 f3d3 17. e2e1
d3c2# 0-1</code>
                </p>
                <p id="p_000761">
                  <span class="text" id="span_003192" smilref="Programming_Robots_with_ROS00011.smil#span_003192">We can use the</span>
                  <code xml:space="preserve" id="code_001101" smilref="Programming_Robots_with_ROS00011.smil#code_001101">pgnparser</code>
                  <span class="text" id="span_003193" smilref="Programming_Robots_with_ROS00011.smil#span_003193">library to parse that block of text into something easier to feed to our command-line parser, written in the previous section. The</span>
                  <code xml:space="preserve" id="code_001102" smilref="Programming_Robots_with_ROS00011.smil#code_001102">pgn.loads()</code>
                  <span class="text" id="span_003194" smilref="Programming_Robots_with_ROS00011.smil#span_003194">function will read the game description into a Python list of well-defined move strings. We then parse these strings in</span>
                  <code xml:space="preserve" id="code_001103" smilref="Programming_Robots_with_ROS00011.smil#code_001103">playGame()</code>
                  <span class="text" id="span_003195" smilref="Programming_Robots_with_ROS00011.smil#span_003195">to create simple scripted motions to pick up pieces and move them to their landing places, as shown in</span>
                  <a data-type="xref" href="#ch11-r2_chess_pgn" external="false" id="a_000158" smilref="Programming_Robots_with_ROS00011.smil#a_000158">Example 11-9</a>
                  <span class="text" id="span_003196" smilref="Programming_Robots_with_ROS00011.smil#span_003196">.</span>
                </p>
                <h1 id="h1_000236" smilref="Programming_Robots_with_ROS00011.smil#h1_000236">Example 11-9. r2_chess_pgn.py</h1>
                <div id="ch11-r2_chess_pgn" data-type="example">
                  <p id="p_000762">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001104" smilref="Programming_Robots_with_ROS00011.smil#code_001104">#!/usr/bin/env python
import sys, rospy, tf, moveit_commander, random
from geometry_msgs.msg import Pose, Point, Quaternion
import pgn

class R2ChessboardPGN:
  def __init__(self):
    self.left_arm = moveit_commander.MoveGroupCommander("left_arm")
    self.left_hand = moveit_commander.MoveGroupCommander("left_hand")

  def setGrasp(self, state):
    if state == "pre-pinch":
      vec = [ 0.3, 0, 1.57, 0,  # index
              -0.1, 0, 1.57, 0, # middle
              0, 0, 0,          # ring
              0, 0, 0,          # pinkie
              0, 1.1, 0, 0]       # thumb
    elif state == "pinch":
      vec = [ 0, 0, 1.57, 0,
              0, 0, 1.57, 0,
              0, 0, 0,
              0, 0, 0,
              0, 1.1, 0, 0]
    elif state == "open":
      vec = [0] * 18
    else:
      raise ValueError("unknown hand state: %s" % state)
    self.left_hand.set_joint_value_target(vec)
    self.left_hand.go(True)

  def setPose(self, x, y, z, phi, theta, psi):
    orient = \
      Quaternion(*tf.transformations.quaternion_from_euler(phi, theta, psi))
    pose = Pose(Point(x, y, z), orient)
    self.left_arm.set_pose_target(pose)
    self.left_arm.go(True)

  def setSquare(self, square, height_above_board):
    if len(square) != 2 or not square[1].isdigit():
      raise ValueError(
        "expected a chess rank and file like 'b3' but found %s instead" %
        square)
    print "going to %s" % square
    rank_y = -0.24 - 0.05 * int(square[1])
    file_x =  0.5 - 0.05 * (ord(square[0]) - ord('a'))
    z = float(height_above_board) + 1.0
    self.setPose(file_x, rank_y, z, 3.14, 0.3, -1.57)

  def playGame(self, pgn_filename):
    game = pgn.loads(open(pgn_filename).read())[0]
    self.setGrasp("pre-pinch")
    self.setSquare("a1", 0.15)
    for move in game.moves:
      self.setSquare(move[0:2], 0.10)
      self.setSquare(move[0:2], 0.015)
      self.setGrasp("pinch")
      self.setSquare(move[0:2], 0.10)
      self.setSquare(move[2:4], 0.10)
      self.setSquare(move[2:4], 0.015)
      self.setGrasp("pre-pinch")
      self.setSquare(move[2:4], 0.10)

if __name__ == '__main__':
  moveit_commander.roscpp_initialize(sys.argv)
  rospy.init_node('r2_chess_pgn',anonymous=True)
  argv = rospy.myargv(argv=sys.argv) # filter out any arguments used by ROS
  if len(argv) != 2:
    print "usage: r2_chess_pgn.py PGNFILE"
    sys.exit(1)
  print "playing %s" % argv[1]
  r2pgn = R2ChessboardPGN()
  r2pgn.playGame(argv[1])
  moveit_commander.roscpp_shutdown()</code>
                  </p>
                </div>
                <p class="keep-together" id="ch11-idp28234288" data-type="indexterm" data-startref="ix_11-chessbot-asciidoc19">
                  <span class="text" id="span_003197" smilref="Programming_Robots_with_ROS00011.smil#span_003197">That's it! We can now play back any famous (or not so famous) chess game stored in PGN format on our simulated R2, as seen in</span>
                  <a data-type="xref" href="#ch11-r2_chessmaster" external="false" id="a_000159" smilref="Programming_Robots_with_ROS00011.smil#a_000159">Figure 11-9</a>
                  <span class="text" id="span_003198" smilref="Programming_Robots_with_ROS00011.smil#span_003198">. However, you will soon notice that eventually some pieces get knocked over (</span>
                  <a data-type="xref" href="#ch11-r2_chessmaster_pieces_knocked_over" external="false" id="a_000160" smilref="Programming_Robots_with_ROS00011.smil#a_000160">Figure 11-10</a>
                  <span class="text" id="span_003199" smilref="Programming_Robots_with_ROS00011.smil#span_003199">) and that we have intentionally left out some crucial components of a world-class Chess-bot. For example, we have not coded up what should happen when R2 captures a piece. The script will try to smash the captured piece with the capturing piece, so one of them will go flying across the simulator. We leave these details as an exercise to the motivated reader!</span>
                </p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Summary" id="section_000126">
              <h1 id="h1_000237" smilref="Programming_Robots_with_ROS00011.smil#h1_000237">Summary</h1>
              <div class="sect1" id="ch11-idp28235104">
                <p id="ch11-idp28237440" data-type="indexterm" data-startref="ix_11-chessbot-asciidoc10" smilref="Programming_Robots_with_ROS00011.smil#ch11-idp28237440">Of course, this chapter was not just about building Chess-bots, awesome though they are. It was intended to demonstrate how we can use MoveIt to quickly build applications where we pick and place items between predefined locations. Pick-and-place tasks have enormous economic impact in the world of industrial robotics. At their core, these tasks are not that different from those performed by a Chess-bot!</p>
                <p id="p_000763" smilref="Programming_Robots_with_ROS00011.smil#p_000763">Thus far, we have primarily been building robotic systems without sensory input. Although a surprisingly large (and valuable) number of tasks can be done without sensor processing, many exciting new robotics applications rely on extensive perceptual systems. In the next chapter, we will start adding sensors to our simulated robots.</p>
                <figure id="figure_000054">
                  <h1 id="h1_000238" smilref="Programming_Robots_with_ROS00011.smil#h1_000238">Figure 11-9. R2 playing back a chess game</h1>
                  <div id="ch11-r2_chessmaster" class="figure">
                    <img src="images/prwr_1105.jpg" alt="R2 playing back a chess game" id="img_000100" />
                  </div>
                </figure>
                <figure id="figure_000055">
                  <h1 id="h1_000239" smilref="Programming_Robots_with_ROS00011.smil#h1_000239">Figure 11-10. Eventually, some pieces get knocked over--it happens to all of us!</h1>
                  <div id="ch11-r2_chessmaster_pieces_knocked_over" class="figure">
                    <img src="images/prwr_1106.jpg" alt="Eventually, some pieces get knocked over. It happens to all of us." id="img_000101" />
                  </div>
                </figure>
              </div>
            </section>
          </div>
        </section>
      </level1>
      <level1 xmlns:epub="http://www.idpf.org/2007/ops" data-type="part" epub:type="part" data-pdf-bookmark="Part III. Perception and Behavior" id="part03">
        <h1 id="h1_000240" smilref="Programming_Robots_with_ROS00011.smil#h1_000240">Part III. Perception and Behavior</h1>
        <p id="p_000764" />
      </level1>
      <level1 id="ch12">
        <section xmlns:epub="http://www.idpf.org/2007/ops" data-type="chapter" epub:type="chapter" data-pdf-bookmark="Chapter 12. Follow-bot" id="section_000127">
          <h1 id="h1_000241" smilref="Programming_Robots_with_ROS00011.smil#h1_000241">Chapter 12. Follow-bot</h1>
          <div class="chapter" id="ch12-follow_bot">
            <p data-type="indexterm" data-primary="closed-loop systems" data-seealso="follow-bot" id="ch12-idp28888704">
              <span class="text" id="span_003200" smilref="Programming_Robots_with_ROS00011.smil#span_003200">The previous several chapters were mostly concerned with getting robots to move around: either moving the robot base for locomotion or moving a robot arm for manipulation. Most of the systems we've built thus far would be considered</span>
              <em id="ch12-ix_12-followbot-asciidoc0" smilref="Programming_Robots_with_ROS00011.smil#ch12-ix_12-followbot-asciidoc0">open-loop</em>
              <span class="text" id="span_003201" smilref="Programming_Robots_with_ROS00011.smil#span_003201">systems, meaning that they have no feedback loop. That is, these systems do not use sensor data to correct for errors that accumulate over time. In this chapter, we will start working with sensors to create</span>
              <em id="em_000339" smilref="Programming_Robots_with_ROS00011.smil#em_000339">closed-loop</em>
              <span class="text" id="span_003202" smilref="Programming_Robots_with_ROS00011.smil#span_003202">systems that compute errors and feed them back into the control system, with the goal of reducing errors of various sorts.</span>
            </p>
            <p id="ch12-idp28890880" data-type="indexterm" data-primary="OpenCV" smilref="Programming_Robots_with_ROS00011.smil#ch12-idp28890880">Let's start by creating a robot that can follow lines on the ground using a camera. We will do this using OpenCV, a popular open source computer vision library. To build this system, we will need to do the following steps:</p>
            <list type="ul" id="list_000011">
              <li id="li_000035">
                <p id="p_000765" smilref="Programming_Robots_with_ROS00011.smil#p_000765">Acquire images from a camera and pass them to OpenCV.</p>
              </li>
              <li id="li_000036">
                <p id="p_000766" smilref="Programming_Robots_with_ROS00011.smil#p_000766">Filter the images to identify the center of the line we are to follow.</p>
              </li>
              <li id="li_000037">
                <p id="p_000767" smilref="Programming_Robots_with_ROS00011.smil#p_000767">Steer the robot so that the center of the robot stays on the center of the line.</p>
              </li>
            </list>
            <p id="p_000768" smilref="Programming_Robots_with_ROS00011.smil#p_000768">This will be a closed-loop system: the robot will sense the steering error as it drifts off the line and then steer back toward the center of the line. As we have always been doing in this book, we will develop this entire application in simulation. First, we will show how to subscribe to images in ROS.</p>
            <section data-type="sect1" data-pdf-bookmark="Acquiring Images" id="section_000128">
              <h1 id="h1_000242" smilref="Programming_Robots_with_ROS00011.smil#h1_000242">Acquiring Images</h1>
              <div class="sect1" id="ch12-idp28895712">
                <p class="keep-together" data-type="indexterm" data-primary="follow-bot" data-secondary="acquiring images for" id="ch12-ix_12-followbot-asciidoc1">
                  <span class="text" id="span_003203" smilref="Programming_Robots_with_ROS00011.smil#span_003203">Images in ROS are sent around the system using the</span>
                  <code xml:space="preserve" id="code_001105" smilref="Programming_Robots_with_ROS00011.smil#code_001105">sensor_msgs/Image</code>
                  <span class="text" id="span_003204" smilref="Programming_Robots_with_ROS00011.smil#span_003204">message type. To have images stream into our nodes, we need to subscribe to a topic where they are being published. Each robot will have its own method for doing this, and names may vary. We will explore how to find the topic names using a Turtlebot simulation. To get started, start three terminals: one for</span>
                  <code id="ch12-ix_12-followbot-asciidoc2" xml:space="preserve" smilref="Programming_Robots_with_ROS00011.smil#ch12-ix_12-followbot-asciidoc2">roscore</code>
                  <span class="text" id="span_003205" smilref="Programming_Robots_with_ROS00011.smil#span_003205">, one for the TurtleBot simulation in Gazebo, and one for interactive commands.</span>
                </p>
                <p id="p_000769">
                  <span class="text" id="span_003206" smilref="Programming_Robots_with_ROS00011.smil#span_003206">Start</span>
                  <code xml:space="preserve" id="code_001106" smilref="Programming_Robots_with_ROS00011.smil#code_001106">roscore</code>
                  <span class="text" id="span_003207" smilref="Programming_Robots_with_ROS00011.smil#span_003207">in the first terminal:</span>
                </p>
                <p id="p_000770">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001107"><span class="text" id="span_003208" smilref="Programming_Robots_with_ROS00011.smil#span_003208">
user@hostname$ </span><strong id="strong_000137" smilref="Programming_Robots_with_ROS00011.smil#strong_000137">roscore</strong>
</code>
                </p>
                <p id="p_000771" smilref="Programming_Robots_with_ROS00011.smil#p_000771">In the second terminal, start a Turtlebot simulation:</p>
                <p id="p_000772">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001108"><span class="text" id="span_003209" smilref="Programming_Robots_with_ROS00011.smil#span_003209">
user@hostname$ </span><strong id="strong_000138" smilref="Programming_Robots_with_ROS00011.smil#strong_000138">roslaunch turtlebot_gazebo turtlebot_world.launch</strong>
</code>
                </p>
                <p id="p_000773" smilref="Programming_Robots_with_ROS00011.smil#p_000773">Now, in the third terminal, we'll run some interactive shell commands. If this is our first time using this particular robot, we may not know what topics will contain the robot's camera data. So, let's sniff around a bit:</p>
                <p id="p_000774">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001109"><span class="text" id="span_003210" smilref="Programming_Robots_with_ROS00011.smil#span_003210">
user@hostname$ </span><strong id="strong_000139" smilref="Programming_Robots_with_ROS00011.smil#strong_000139">rostopic list</strong>
</code>
                </p>
                <p id="p_000775" smilref="Programming_Robots_with_ROS00011.smil#p_000775">This prints out a few dozen topics, some of which sound image-related:</p>
                <p id="p_000776">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001110" smilref="Programming_Robots_with_ROS00011.smil#code_001110">/camera/depth/camera_info
/camera/depth/image_raw
/camera/depth/points
/camera/parameter_descriptions
/camera/parameter_updates
/camera/rgb/camera_info
/camera/rgb/image_raw
/camera/rgb/image_raw/compressed
/camera/rgb/image_raw/compressed/parameter_descriptions
/camera/rgb/image_raw/compressed/parameter_updates
/camera/rgb/image_raw/compressedDepth
/camera/rgb/image_raw/compressedDepth/parameter_descriptions
/camera/rgb/image_raw/compressedDepth/parameter_updates
/camera/rgb/image_raw/theora
/camera/rgb/image_raw/theora/parameter_descriptions
/camera/rgb/image_raw/theora/parameter_updates</code>
                </p>
                <p id="p_000777">
                  <span class="text" id="span_003211" smilref="Programming_Robots_with_ROS00011.smil#span_003211">This is a standard ROS interface for a modern depth camera like the Microsoft Kinect or Asus Xtion Pro. The first three topics start with</span>
                  <code xml:space="preserve" id="code_001111" smilref="Programming_Robots_with_ROS00011.smil#code_001111">camera/depth</code>
                  <span class="text" id="span_003212" smilref="Programming_Robots_with_ROS00011.smil#span_003212">and, indeed, they deal with the calibration data and depth-sensor data. We'll get to the depth data later in this chapter, but first, let's deal with the visual images. The visual images streaming from the Turtlebot's camera appear on the</span>
                  <code xml:space="preserve" id="code_001112" smilref="Programming_Robots_with_ROS00011.smil#code_001112">camera/rgb/image_raw</code>
                  <span class="text" id="span_003213" smilref="Programming_Robots_with_ROS00011.smil#span_003213">topic. The controller we will write is intended to run directly on the Turtlebot, so we should subscribe directly to the</span>
                  <code xml:space="preserve" id="code_001113" smilref="Programming_Robots_with_ROS00011.smil#code_001113">image_raw</code>
                  <span class="text" id="span_003214" smilref="Programming_Robots_with_ROS00012.smil#span_003214">topic. If we were operating over a bandwidth-limited connection, such as a WiFi link, we might want to subscribe to the</span>
                  <code xml:space="preserve" id="code_001114" smilref="Programming_Robots_with_ROS00012.smil#code_001114">image_raw/compressed</code>
                  <span class="text" id="span_003215" smilref="Programming_Robots_with_ROS00012.smil#span_003215">topic, which will run each frame through an image-compression library before sending it over the wire. The</span>
                  <code xml:space="preserve" id="code_001115" smilref="Programming_Robots_with_ROS00012.smil#code_001115">theora</code>
                  <span class="text" id="span_003216" smilref="Programming_Robots_with_ROS00012.smil#span_003216">topic applies even more compression by creating a compressed video stream, rather than compressing the images one at a time. In typical camera streams, this results in considerable network bandwidth savings, at the expense of compression artifacts, potentially increased processor usage, and latency. In general, compressed video streams make sense when the goal is to support human teleoperators; however, whenever possible, uncompressed images work best for computer vision algorithms.</span>
                </p>
                <p id="p_000778">
                  <span class="text" id="span_003217" smilref="Programming_Robots_with_ROS00012.smil#span_003217">Now that we know that the image data is available on the</span>
                  <code xml:space="preserve" id="code_001116" smilref="Programming_Robots_with_ROS00012.smil#code_001116">camera/rgb/image_raw</code>
                  <span class="text" id="span_003218" smilref="Programming_Robots_with_ROS00012.smil#span_003218">topic, we can write a minimal</span>
                  <code xml:space="preserve" id="code_001117" smilref="Programming_Robots_with_ROS00012.smil#code_001117">rospy</code>
                  <span class="text" id="span_003219" smilref="Programming_Robots_with_ROS00012.smil#span_003219">node that will subscribe to this data, as shown in</span>
                  <a data-type="xref" href="#ch12-follower" external="false" id="a_000161" smilref="Programming_Robots_with_ROS00012.smil#a_000161">Example 12-1</a>
                  <span class="text" id="span_003220" smilref="Programming_Robots_with_ROS00012.smil#span_003220">.</span>
                </p>
                <h1 id="h1_000243" smilref="Programming_Robots_with_ROS00012.smil#h1_000243">Example 12-1. follower.py</h1>
                <div id="ch12-follower" data-type="example">
                  <p id="p_000779">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001118" smilref="Programming_Robots_with_ROS00012.smil#code_001118">#!/usr/bin/env python
import rospy
from sensor_msgs.msg import Image

def image_callback(msg):
  pass

rospy.init_node('follower')
image_sub = rospy.Subscriber('camera/rgb/image_raw', Image, image_callback)
rospy.spin()</code>
                  </p>
                </div>
                <p id="p_000780" smilref="Programming_Robots_with_ROS00012.smil#p_000780">This program is the minimal code required to subscribe to image messages. But it doesn't really do anything. The image callback doesn't do anything at all:</p>
                <p id="p_000781">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001119" smilref="Programming_Robots_with_ROS00012.smil#code_001119">def image_callback(msg):
  pass</code>
                </p>
                <p id="p_000782">
                  <span class="text" id="span_003221" smilref="Programming_Robots_with_ROS00012.smil#span_003221">on the</span>
                  <code xml:space="preserve" id="code_001120" smilref="Programming_Robots_with_ROS00012.smil#code_001120">camera/rgb/image_raw</code>
                  <span class="text" id="span_003222" smilref="Programming_Robots_with_ROS00012.smil#span_003222">topic--however--the program does at least subscribe to messages. To verify this, first let's make</span>
                  <em id="em_000340" smilref="Programming_Robots_with_ROS00012.smil#em_000340">follower.py</em>
                  <span class="text" id="span_003223" smilref="Programming_Robots_with_ROS00012.smil#span_003223">an executable:</span>
                </p>
                <p id="p_000783">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001121"><span class="text" id="span_003224" smilref="Programming_Robots_with_ROS00012.smil#span_003224">
user@hostname$ </span><strong id="strong_000140" smilref="Programming_Robots_with_ROS00012.smil#strong_000140">chmod +x follower.py</strong>
</code>
                </p>
                <p id="p_000784" smilref="Programming_Robots_with_ROS00012.smil#p_000784">And run it:</p>
                <p id="p_000785">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001122"><span class="text" id="span_003225" smilref="Programming_Robots_with_ROS00012.smil#span_003225">
user@hostname$ </span><strong id="strong_000141" smilref="Programming_Robots_with_ROS00012.smil#strong_000141">./follower.py</strong>
</code>
                </p>
                <h1 id="h1_000244" smilref="Programming_Robots_with_ROS00012.smil#h1_000244">Note</h1>
                <div data-type="note" epub:type="note" id="div_000027">
                  <p id="p_000786" smilref="Programming_Robots_with_ROS00012.smil#p_000786">Many of the examples in the book change the permissions of a Python source file and then run it as an executable on the command line. This is simply a matter of personal preference. It is equally valid to explicitly invoke the Python interpreter and pass the Python script as an argument:</p>
                  <p id="p_000787">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001123"><span class="text" id="span_003226" smilref="Programming_Robots_with_ROS00012.smil#span_003226">
user@hostname$ </span><strong id="strong_000142" smilref="Programming_Robots_with_ROS00012.smil#strong_000142">python follower.py</strong>
</code>
                  </p>
                </div>
                <p id="p_000788">
                  <span class="text" id="span_003227" smilref="Programming_Robots_with_ROS00012.smil#span_003227">The program will not produce any output. So, how can we know if it really subscribed to the image stream? Let's leave</span>
                  <code xml:space="preserve" id="code_001124" smilref="Programming_Robots_with_ROS00012.smil#code_001124">follower.py</code>
                  <span class="text" id="span_003228" smilref="Programming_Robots_with_ROS00012.smil#span_003228">running, start another terminal, and interrogate the system:</span>
                </p>
                <p id="p_000789">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001125"><span class="text" id="span_003229" smilref="Programming_Robots_with_ROS00012.smil#span_003229">
user@hostname$ </span><strong id="strong_000143" smilref="Programming_Robots_with_ROS00012.smil#strong_000143">rosnode list</strong>
</code>
                </p>
                <p id="p_000790" smilref="Programming_Robots_with_ROS00012.smil#p_000790">This will print a list of all currently running nodes. All but one of them are started by the Turtlebot simulation launch file:</p>
                <p id="p_000791">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001126" smilref="Programming_Robots_with_ROS00012.smil#code_001126">/bumper2pointcloud
/cmd_vel_mux
/depthimage_to_laserscan
/follower
/gazebo
/laserscan_nodelet_manager
/mobile_base_nodelet_manager
/robot_state_publisher
/rosout</code>
                </p>
                <p id="p_000792">
                  <span class="text" id="span_003230" smilref="Programming_Robots_with_ROS00012.smil#span_003230">We can see that our</span>
                  <code xml:space="preserve" id="code_001127" smilref="Programming_Robots_with_ROS00012.smil#code_001127">follower</code>
                  <span class="text" id="span_003231" smilref="Programming_Robots_with_ROS00012.smil#span_003231">node is indeed on the list of running nodes. Now, we can ask</span>
                  <code xml:space="preserve" id="code_001128" smilref="Programming_Robots_with_ROS00012.smil#code_001128">roscore</code>
                  <span class="text" id="span_003232" smilref="Programming_Robots_with_ROS00012.smil#span_003232">to give us some details about its connections by typing the following:</span>
                </p>
                <p id="p_000793">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001129"><span class="text" id="span_003233" smilref="Programming_Robots_with_ROS00012.smil#span_003233">
user@hostname$ </span><strong id="strong_000144" smilref="Programming_Robots_with_ROS00012.smil#strong_000144">rosnode info follower</strong>
</code>
                </p>
                <p id="p_000794" smilref="Programming_Robots_with_ROS00012.smil#p_000794">This prints lots of interesting output:</p>
                <p id="p_000795">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001130" smilref="Programming_Robots_with_ROS00012.smil#code_001130">Node [/follower]
Publications:
 * /rosout [rosgraph_msgs/Log]

Subscriptions:
 * /camera/rgb/image_raw [sensor_msgs/Image]
 * /clock [rosgraph_msgs/Clock]

Services:
 * /follower/set_logger_level
 * /follower/get_loggers


contacting node http://qbox-home:59300/ ...
Pid: 5896
Connections:
 * topic: /rosout
    * to: /rosout
    * direction: outbound
    * transport: TCPROS
 * topic: /clock
    * to: /gazebo (http://qbox-home:37981/)
    * direction: inbound
    * transport: TCPROS
 * topic: /camera/rgb/image_raw
    * to: /gazebo (http://qbox-home:37981/)
    * direction: inbound
    * transport: TCPROS</code>
                </p>
                <p id="p_000796">
                  <span class="text" id="span_003234" smilref="Programming_Robots_with_ROS00012.smil#span_003234">The first block of that output lists the publications, subscriptions, and services that the node instantiated. Most were autogenerated by</span>
                  <code xml:space="preserve" id="code_001131" smilref="Programming_Robots_with_ROS00012.smil#code_001131">rospy</code>
                  <span class="text" id="span_003235" smilref="Programming_Robots_with_ROS00012.smil#span_003235">, but we can see the</span>
                  <code xml:space="preserve" id="code_001132" smilref="Programming_Robots_with_ROS00012.smil#code_001132">camera/rgb/image_raw</code>
                  <span class="text" id="span_003236" smilref="Programming_Robots_with_ROS00012.smil#span_003236">subscription that was part of the minimal program of</span>
                  <a data-type="xref" href="#ch12-follower" external="false" id="a_000162" smilref="Programming_Robots_with_ROS00012.smil#a_000162">Example 12-1</a>
                  <span class="text" id="span_003237" smilref="Programming_Robots_with_ROS00012.smil#span_003237">. The second section is often more interesting. To produce that section, the</span>
                  <code xml:space="preserve" id="code_001133" smilref="Programming_Robots_with_ROS00012.smil#code_001133">rosnode</code>
                  <span class="text" id="span_003238" smilref="Programming_Robots_with_ROS00012.smil#span_003238">command-line program contacted the</span>
                  <code xml:space="preserve" id="code_001134" smilref="Programming_Robots_with_ROS00012.smil#code_001134">follower.py</code>
                  <span class="text" id="span_003239" smilref="Programming_Robots_with_ROS00012.smil#span_003239">node and received a list of its current connections. The last element in that list shows that the</span>
                  <code xml:space="preserve" id="code_001135" smilref="Programming_Robots_with_ROS00012.smil#code_001135">/camera/rgb/image_raw</code>
                  <span class="text" id="span_003240" smilref="Programming_Robots_with_ROS00012.smil#span_003240">subscription is indeed receiving inbound messages from the</span>
                  <code xml:space="preserve" id="code_001136" smilref="Programming_Robots_with_ROS00012.smil#code_001136">/gazebo</code>
                  <span class="text" id="span_003241" smilref="Programming_Robots_with_ROS00012.smil#span_003241">node. Often, it is useful to understand how quickly messages are arriving. Fortunately, a simple shell command can estimate this for us:</span>
                </p>
                <p id="p_000797">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001137"><span class="text" id="span_003242" smilref="Programming_Robots_with_ROS00012.smil#span_003242">
user@hostname$ </span><strong id="strong_000145" smilref="Programming_Robots_with_ROS00012.smil#strong_000145">rostopic hz /camera/rgb/image_raw</strong>
</code>
                </p>
                <p id="p_000798">
                  <span class="text" id="span_003243" smilref="Programming_Robots_with_ROS00012.smil#span_003243">The</span>
                  <code xml:space="preserve" id="code_001138" smilref="Programming_Robots_with_ROS00012.smil#code_001138">rostopic hz</code>
                  <span class="text" id="span_003244" smilref="Programming_Robots_with_ROS00012.smil#span_003244">command will run forever; press Ctrl-C to make it stop. A few seconds of that command will print the output similar to the following:</span>
                </p>
                <p id="p_000799">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001139" smilref="Programming_Robots_with_ROS00012.smil#code_001139">subscribed to [/camera/rgb/image_raw]
average rate: 19.780
    min: 0.040s max: 0.060s std dev: 0.00524s window: 19
average rate: 19.895
    min: 0.040s max: 0.060s std dev: 0.00428s window: 39
average rate: 20.000
    min: 0.040s max: 0.060s std dev: 0.00487s window: 60
average rate: 20.000
    min: 0.040s max: 0.060s std dev: 0.00531s window: 79
average rate: 19.959
    min: 0.040s max: 0.060s std dev: 0.00544s window: 99
average rate: 20.000
    min: 0.040s max: 0.060s std dev: 0.00557s window: 104</code>
                </p>
                <p id="p_000800">
                  <span class="text" id="span_003245" smilref="Programming_Robots_with_ROS00012.smil#span_003245">From this output, we can gather that the</span>
                  <code xml:space="preserve" id="code_001140" smilref="Programming_Robots_with_ROS00012.smil#code_001140">camera/rgb/image_raw</code>
                  <span class="text" id="span_003246" smilref="Programming_Robots_with_ROS00012.smil#span_003246">messages are arriving at 20 frames per second. Good!</span>
                </p>
                <p data-type="indexterm" data-primary="OpenCV" id="ch12-idp28979728">
                  <span class="text" id="span_003247" smilref="Programming_Robots_with_ROS00012.smil#span_003247">Now that we know that the program in</span>
                  <a data-type="xref" href="#ch12-follower" external="false" id="a_000163" smilref="Programming_Robots_with_ROS00012.smil#a_000163">Example 12-1</a>
                  <span class="text" id="span_003248" smilref="Programming_Robots_with_ROS00012.smil#span_003248">is indeed receiving images, we need to do something with them! There are many different ways to proceed, but one of the most popular is to pass the images to the OpenCV library. OpenCV contains efficient, well-tested implementations of many popular computer vision algorithms. To pass data between the ROS and OpenCV image formats, we can use the</span>
                  <code xml:space="preserve" id="code_001141" smilref="Programming_Robots_with_ROS00012.smil#code_001141">cv_bridge</code>
                  <span class="text" id="span_003249" smilref="Programming_Robots_with_ROS00012.smil#span_003249">package, which contains functions to convert between ROS</span>
                  <code xml:space="preserve" id="code_001142" smilref="Programming_Robots_with_ROS00012.smil#code_001142">sensor_msgs/Image</code>
                  <span class="text" id="span_003250" smilref="Programming_Robots_with_ROS00012.smil#span_003250">messages and the objects used by OpenCV.</span>
                </p>
                <p id="p_000801">
                  <a data-type="xref" href="#ch12-follower_opencv" external="false" id="a_000164" smilref="Programming_Robots_with_ROS00012.smil#a_000164">Example 12-2</a>
                  <span class="text" id="span_003251" smilref="Programming_Robots_with_ROS00012.smil#span_003251">instantiates a</span>
                  <code xml:space="preserve" id="code_001143" smilref="Programming_Robots_with_ROS00012.smil#code_001143">CvBridge</code>
                  <span class="text" id="span_003252" smilref="Programming_Robots_with_ROS00012.smil#span_003252">object and uses it to convert the incoming</span>
                  <code xml:space="preserve" id="code_001144" smilref="Programming_Robots_with_ROS00012.smil#code_001144">sensor_msgs/Image</code>
                  <span class="text" id="span_003253" smilref="Programming_Robots_with_ROS00012.smil#span_003253">stream to OpenCV messages and display them on the screen using the OpenCV</span>
                  <code xml:space="preserve" id="code_001145" smilref="Programming_Robots_with_ROS00012.smil#code_001145">imshow()</code>
                  <span class="text" id="span_003254" smilref="Programming_Robots_with_ROS00012.smil#span_003254">function.</span>
                </p>
                <h1 id="h1_000245" smilref="Programming_Robots_with_ROS00012.smil#h1_000245">Example 12-2. follower_opencv.py</h1>
                <div id="ch12-follower_opencv" data-type="example">
                  <p id="p_000802">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001146" smilref="Programming_Robots_with_ROS00012.smil#code_001146">#!/usr/bin/env python
import rospy
from sensor_msgs.msg import Image
import cv2, cv_bridge

class Follower:
  def __init__(self):
    self.bridge = cv_bridge.CvBridge()
    cv2.namedWindow("window", 1)
    self.image_sub = rospy.Subscriber('camera/rgb/image_raw',
                                      Image, self.image_callback)
  def image_callback(self, msg):
    image = self.bridge.imgmsg_to_cv2(msg,desired_encoding='bgr8')
    cv2.imshow("window", image)
    cv2.waitKey(3)

rospy.init_node('follower')
follower = Follower()
rospy.spin()</code>
                  </p>
                </div>
                <p id="p_000803">
                  <span class="text" id="span_003255" smilref="Programming_Robots_with_ROS00012.smil#span_003255">As an example, the Turtlebot was moved and rotated within the default simulation world so that it was oriented facing a dumpster, as shown in</span>
                  <a data-type="xref" href="#ch12-follower_facing_dumpster" external="false" id="a_000165" smilref="Programming_Robots_with_ROS00012.smil#a_000165">Figure 12-1</a>
                  <span class="text" id="span_003256" smilref="Programming_Robots_with_ROS00012.smil#span_003256">.</span>
                </p>
                <figure id="figure_000056">
                  <h1 id="h1_000246" smilref="Programming_Robots_with_ROS00012.smil#h1_000246">Figure 12-1. A Gazebo perspective of a Turtlebot facing a dumpster</h1>
                  <div id="ch12-follower_facing_dumpster" class="figure">
                    <img src="images/prwr_1201.jpg" alt="Gazebo perspective of Turtlebot facing a dumpster" id="img_000102" />
                  </div>
                </figure>
                <p id="p_000804">
                  <span class="text" id="span_003257" smilref="Programming_Robots_with_ROS00012.smil#span_003257">Meanwhile, Gazebo is dutifully generating simulated camera images and streaming them to our program, which is using the OpenCV</span>
                  <code xml:space="preserve" id="code_001147" smilref="Programming_Robots_with_ROS00012.smil#code_001147">imshow()</code>
                  <span class="text" id="span_003258" smilref="Programming_Robots_with_ROS00012.smil#span_003258">and</span>
                  <code xml:space="preserve" id="code_001148" smilref="Programming_Robots_with_ROS00012.smil#code_001148">waitKey()</code>
                  <span class="text" id="span_003259" smilref="Programming_Robots_with_ROS00012.smil#span_003259">functions to render them to a GUI window (see</span>
                  <a data-type="xref" href="#ch12-follower_dumpster_imshow" external="false" id="a_000166" smilref="Programming_Robots_with_ROS00012.smil#a_000166">Figure 12-2</a>
                  <span class="text" id="span_003260" smilref="Programming_Robots_with_ROS00012.smil#span_003260">).</span>
                </p>
                <figure id="figure_000057">
                  <h1 id="h1_000247" smilref="Programming_Robots_with_ROS00012.smil#h1_000247">Figure 12-2. A dumpster, from the TurtleBot's perspective</h1>
                  <div id="ch12-follower_dumpster_imshow" class="figure">
                    <img src="images/prwr_1202.jpg" alt="Turtlebot facing a dumpster" id="img_000103" />
                  </div>
                </figure>
                <p id="p_000805" smilref="Programming_Robots_with_ROS00012.smil#p_000805">That's it! We are now streaming simulated camera images through Gazebo, ROS, and OpenCV!</p>
                <p id="p_000806" smilref="Programming_Robots_with_ROS00012.smil#p_000806">Although it's fun to look at dumpsters, let's look at something else. Let's load a Gazebo world with a nice bright line in it:</p>
                <p id="p_000807">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001149"><span class="text" id="span_003261" smilref="Programming_Robots_with_ROS00012.smil#span_003261">
user@hostname$ </span><strong id="strong_000146" smilref="Programming_Robots_with_ROS00012.smil#strong_000146">roslaunch followbot course.launch</strong>
</code>
                </p>
                <p id="p_000808">
                  <span class="text" id="span_003262" smilref="Programming_Robots_with_ROS00012.smil#span_003262">That Gazebo world file will start a Turtlebot on a yellow line that we want to follow, as shown in</span>
                  <a data-type="xref" href="#ch12-turtlebot_on_course" external="false" id="a_000167" smilref="Programming_Robots_with_ROS00012.smil#a_000167">Figure 12-3</a>
                  <span class="text" id="span_003263" smilref="Programming_Robots_with_ROS00012.smil#span_003263">. Why would we want to follow a line? Because lines are often used to mark routes, whether inside a controlled environment like a warehouse or a factory, or on roadways. Although each country has a particular scheme of colors and stripe patterns, broadly speaking, being able to detect and follow lines is one of the (many) skills required for autonomous driving.</span>
                </p>
                <p id="ch12-idp29373904" data-type="indexterm" data-startref="ix_12-followbot-asciidoc1" smilref="Programming_Robots_with_ROS00012.smil#ch12-idp29373904">In the next section, we will manipulate the images coming from the Turtlebot's camera to detect the center of the line in the camera frames.</p>
                <figure id="figure_000058">
                  <h1 id="h1_000248" smilref="Programming_Robots_with_ROS00012.smil#h1_000248">Figure 12-3. A Gazebo screenshot showing a Turtlebot on the course we want to follow</h1>
                  <div id="ch12-turtlebot_on_course" class="figure">
                    <img src="images/prwr_1203.jpg" alt="Turtlebot on our course" id="img_000104" />
                  </div>
                </figure>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Detecting the Line" id="section_000129">
              <h1 id="h1_000249" smilref="Programming_Robots_with_ROS00012.smil#h1_000249">Detecting the Line</h1>
              <div class="sect1" id="ch12-idp28897296">
                <p id="ch12-ix_12-followbot-asciidoc3" data-type="indexterm" data-primary="follow-bot" data-secondary="detecting target line">
                  <span class="text" id="span_003264" smilref="Programming_Robots_with_ROS00012.smil#span_003264">In this section, we will use OpenCV in Python to process the images coming through ROS from a simulated Turtlebot in the world shown in</span>
                  <a data-type="xref" href="#ch12-turtlebot_on_course" external="false" id="a_000168" smilref="Programming_Robots_with_ROS00012.smil#a_000168">Figure 12-3</a>
                  <span class="text" id="span_003265" smilref="Programming_Robots_with_ROS00012.smil#span_003265">. The goal is to detect the location of the target line in the Turtlebot's camera and follow it around the course. A typical image from the Turtlebot's camera is shown in</span>
                  <a data-type="xref" href="#ch12-turtlebot_camera_line" external="false" id="a_000169" smilref="Programming_Robots_with_ROS00012.smil#a_000169">Figure 12-4</a>
                  <span class="text" id="span_003266" smilref="Programming_Robots_with_ROS00012.smil#span_003266">.</span>
                </p>
                <p id="p_000809" smilref="Programming_Robots_with_ROS00012.smil#p_000809">There are many strategies that can be used to detect and follow lines in various situations. Many PhD dissertations have been granted for this topic, which becomes arbitrarily complex when considering the variability and noise associated with, for example, roadway striping. Fortunately, in our case we are just going to consider an optimally painted, optimally illuminated bright yellow line. Our strategy will be to filter a block of rows of the image by color and drive the robot toward the center of the pixels that pass the color filter. The first step, then, is to filter the image by color. The purpose of this exercise is not just to show how to follow lines, but to demonstrate how to subscribe to an image stream in ROS and push it though the OpenCV library in Python. This general pipeline could then be used in other application problems by tapping into the wide variety of excellent computer vision algorithms implemented in OpenCV.</p>
                <figure id="figure_000059">
                  <h1 id="h1_000250" smilref="Programming_Robots_with_ROS00012.smil#h1_000250">Figure 12-4. A typical view from the Turtlebot's camera when following a line</h1>
                  <div id="ch12-turtlebot_camera_line" class="figure">
                    <img src="images/prwr_1204.jpg" alt="Following a line in the Turtlebot's camera" id="img_000105" />
                  </div>
                </figure>
                <p data-type="indexterm" data-primary="binary image" id="ch12-ix_12-followbot-asciidoc8" data-secondary="by follow-bot">
                  <span class="text" id="span_003267" smilref="Programming_Robots_with_ROS00012.smil#span_003267">The task at hand is to find the yellow line in the Turtlebot's image stream. The most obvious approach is to find the red, green, blue (RGB) value of a yellow image pixel and filter for nearby RGB values. Unfortunately, filtering on RGB values turns out to be a surprisingly poor way to find a particular color in an image, since the raw RGB values are a function of the overall brightness as well as the color of the object. Slightly different lighting conditions would result in the filter failing to perform as intended. Instead, a better technique for filtering by color is to transform RGB images into hue, saturation, value (HSV) images. The HSV image separates the RGB components into hue (color), saturation (color intensity), and value (brightness). Once the image is in this form, we can then apply a threshold for hues near yellow to obtain a</span>
                  <em id="em_000341" smilref="Programming_Robots_with_ROS00012.smil#em_000341">binary image</em>
                  <span class="text" id="span_003268" smilref="Programming_Robots_with_ROS00012.smil#span_003268">in which pixels are either true (meaning they pass the filter) or false (they do not pass the filter). The following code snippets and examples images will illustrate this process.</span>
                </p>
                <p id="p_000810">
                  <span class="text" id="span_003269" smilref="Programming_Robots_with_ROS00012.smil#span_003269">In</span>
                  <a data-type="xref" href="#ch12-follower_color_filter" external="false" id="a_000170" smilref="Programming_Robots_with_ROS00012.smil#a_000170">Example 12-3</a>
                  <span class="text" id="span_003270" smilref="Programming_Robots_with_ROS00012.smil#span_003270">, we implement this using OpenCV, which makes this task quite easy in Python.</span>
                </p>
                <h1 id="h1_000251" smilref="Programming_Robots_with_ROS00012.smil#h1_000251">Example 12-3. follower_color_filter.py</h1>
                <div id="ch12-follower_color_filter" data-type="example" class="pagebreak-before">
                  <p id="p_000811">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001150" smilref="Programming_Robots_with_ROS00012.smil#code_001150">#!/usr/bin/env python
import rospy, cv2, cv_bridge, numpy
from sensor_msgs.msg import Image

class Follower:
  def __init__(self):
    self.bridge = cv_bridge.CvBridge()
    cv2.namedWindow("window", 1)
    self.image_sub = rospy.Subscriber('camera/rgb/image_raw',
                                      Image, self.image_callback)
  def image_callback(self, msg):
    image = self.bridge.imgmsg_to_cv2(msg)
    hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
    lower_yellow = numpy.array([ 50,  50, 170])
    upper_yellow = numpy.array([255, 255, 190])
    mask = cv2.inRange(hsv, lower_yellow, upper_yellow)
    masked = cv2.bitwise_and(image, image, mask=mask)
    cv2.imshow("window", mask )
    cv2.waitKey(3)

rospy.init_node('follower')
follower = Follower()
rospy.spin()</code>
                  </p>
                </div>
                <p id="p_000812">
                  <span class="text" id="span_003271" smilref="Programming_Robots_with_ROS00012.smil#span_003271">As before, the</span>
                  <code xml:space="preserve" id="code_001151" smilref="Programming_Robots_with_ROS00012.smil#code_001151">CvBridge</code>
                  <span class="text" id="span_003272" smilref="Programming_Robots_with_ROS00012.smil#span_003272">module converts ROS</span>
                  <code xml:space="preserve" id="code_001152" smilref="Programming_Robots_with_ROS00012.smil#code_001152">sensor_msgs/Image</code>
                  <span class="text" id="span_003273" smilref="Programming_Robots_with_ROS00012.smil#span_003273">messages into the OpenCV image format:</span>
                </p>
                <p id="p_000813">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001153" smilref="Programming_Robots_with_ROS00012.smil#code_001153">    image = self.bridge.imgmsg_to_cv2(msg)</code>
                </p>
                <p id="p_000814">
                  <span class="text" id="span_003274" smilref="Programming_Robots_with_ROS00012.smil#span_003274">We can then pass the OpenCV image to the</span>
                  <code xml:space="preserve" id="code_001154" smilref="Programming_Robots_with_ROS00012.smil#code_001154">cvtColor()</code>
                  <span class="text" id="span_003275" smilref="Programming_Robots_with_ROS00012.smil#span_003275">function to convert between the RGB representation and its equivalent representation in the HSV space:</span>
                </p>
                <p id="p_000815">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001155" smilref="Programming_Robots_with_ROS00012.smil#code_001155">    hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)</code>
                </p>
                <p id="p_000816">
                  <span class="text" id="span_003276" smilref="Programming_Robots_with_ROS00012.smil#span_003276">The</span>
                  <code xml:space="preserve" id="code_001156" smilref="Programming_Robots_with_ROS00012.smil#code_001156">cvtColor()</code>
                  <span class="text" id="span_003277" smilref="Programming_Robots_with_ROS00012.smil#span_003277">function will produce the HSV image shown in</span>
                  <a data-type="xref" href="#ch12-line_hsv" external="false" id="a_000171" smilref="Programming_Robots_with_ROS00012.smil#a_000171">Figure 12-5</a>
                  <span class="text" id="span_003278" smilref="Programming_Robots_with_ROS00012.smil#span_003278">when presented with the RGB image shown previously in</span>
                  <a data-type="xref" href="#ch12-turtlebot_camera_line" external="false" id="a_000172" smilref="Programming_Robots_with_ROS00012.smil#a_000172">Figure 12-4</a>
                  <span class="text" id="span_003279" smilref="Programming_Robots_with_ROS00012.smil#span_003279">.</span>
                </p>
                <p id="p_000817">
                  <span class="text" id="span_003280" smilref="Programming_Robots_with_ROS00012.smil#span_003280">Then, in the HSV space, we can create lower and upper bounds for the desired hues using</span>
                  <code xml:space="preserve" id="code_001157" smilref="Programming_Robots_with_ROS00012.smil#code_001157">numpy</code>
                  <span class="text" id="span_003281" smilref="Programming_Robots_with_ROS00012.smil#span_003281">and then pass those bounds to OpenCV's</span>
                  <code xml:space="preserve" id="code_001158" smilref="Programming_Robots_with_ROS00012.smil#code_001158">inRange()</code>
                  <span class="text" id="span_003282" smilref="Programming_Robots_with_ROS00012.smil#span_003282">function to produce a binary image:</span>
                </p>
                <p id="p_000818">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001159" smilref="Programming_Robots_with_ROS00012.smil#code_001159">    lower_yellow = numpy.array([ 50,  50, 170])
    upper_yellow = numpy.array([255, 255, 190])
    mask = cv2.inRange(hsv, lower_yellow, upper_yellow)</code>
                </p>
                <p id="p_000819">
                  <span class="text" id="span_003283" smilref="Programming_Robots_with_ROS00012.smil#span_003283">The resulting binary image is shown in</span>
                  <a data-type="xref" href="#ch12-line_masked" external="false" id="a_000173" smilref="Programming_Robots_with_ROS00012.smil#a_000173">Figure 12-6</a>
                  <span class="text" id="span_003284" smilref="Programming_Robots_with_ROS00012.smil#span_003284">.</span>
                </p>
                <figure id="figure_000060">
                  <h1 id="h1_000252" smilref="Programming_Robots_with_ROS00012.smil#h1_000252">Figure 12-5. The HSV representation of a Turtlebot camera image when following a line</h1>
                  <div id="ch12-line_hsv" class="figure">
                    <img src="images/prwr_1205.jpg" alt="HSV image of a line" id="img_000106" />
                  </div>
                </figure>
                <figure id="figure_000061">
                  <h1 id="h1_000253" smilref="Programming_Robots_with_ROS00012.smil#h1_000253">Figure 12-6. The binary image obtained by a hue filter on the HSV image</h1>
                  <div id="ch12-line_masked" class="figure">
                    <img src="images/prwr_1206.jpg" alt="Binary image of a line" id="img_000107" />
                  </div>
                </figure>
                <p id="ch12-idp29795408" data-type="indexterm" data-startref="ix_12-followbot-asciidoc8">
                  <span class="text" id="span_003285" smilref="Programming_Robots_with_ROS00012.smil#span_003285">Obtaining a binary image of the line is a key first step in the image-processing pipeline. However, our goal is to follow the line, not just to take interesting pictures of it! To follow the line, we will use a simple strategy: we will only look at a 20-row portion of the image, starting three-quarters of the way down the image. The rationale behind this approach is that, from a controls perspective, we are really only concerned with the portion of the line that is immediately in front of the robot. With this strategy, what happens to the line five meters in front of the robot is irrelevant; our controller will only be concerned with what is in the field of view of the camera approximately one meter in front of the robot. To debug our implementation, we will first write a program, shown in</span>
                  <a data-type="xref" href="#ch12-follower_line_finder" external="false" id="a_000174" smilref="Programming_Robots_with_ROS00012.smil#a_000174">Example 12-4</a>
                  <span class="text" id="span_003286" smilref="Programming_Robots_with_ROS00012.smil#span_003286">, that implements this image processing strategy and draws a dot where it thinks the center of the line is within the portion of the image corresponding to roughly one meter in front of the robot.</span>
                </p>
                <h1 id="h1_000254" smilref="Programming_Robots_with_ROS00012.smil#h1_000254">Example 12-4. follower_line_finder.py</h1>
                <div id="ch12-follower_line_finder" data-type="example">
                  <p id="p_000820">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001160" smilref="Programming_Robots_with_ROS00012.smil#code_001160">#!/usr/bin/env python
import rospy, cv2, cv_bridge, numpy
from sensor_msgs.msg import Image

class Follower:
  def __init__(self):
    self.bridge = cv_bridge.CvBridge()
    cv2.namedWindow("window", 1)
    self.image_sub = rospy.Subscriber('camera/rgb/image_raw',
                                      Image, self.image_callback)
    self.twist = Twist()
  def image_callback(self, msg):
    image = self.bridge.imgmsg_to_cv2(msg,desired_encoding='bgr8')
    hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
    lower_yellow = numpy.array([ 10,  10,  10])
    upper_yellow = numpy.array([255, 255, 250])
    mask = cv2.inRange(hsv, lower_yellow, upper_yellow)

    h, w, d = image.shape
    search_top = 3*h/4
    search_bot = search_top + 20
    mask[0:search_top, 0:w] = 0
    mask[search_bot:h, 0:w] = 0
    M = cv2.moments(mask)
    if M['m00'] &gt; 0:
      cx = int(M['m10']/M['m00'])
      cy = int(M['m01']/M['m00'])
      cv2.circle(image, (cx, cy), 20, (0,0,255), -1)

    cv2.imshow("window", image)
    cv2.waitKey(3)

rospy.init_node('follower')
follower = Follower()
rospy.spin()</code>
                  </p>
                </div>
                <p data-type="indexterm" data-primary="Python" data-secondary="slice notation" id="ch12-idp29901680">
                  <span class="text" id="span_003287" smilref="Programming_Robots_with_ROS00012.smil#span_003287">To restrict our search to the 20-row portion of the image corresponding to the one-meter distance in front of the Turtlebot, we will use the OpenCV and</span>
                  <code xml:space="preserve" id="code_001161" smilref="Programming_Robots_with_ROS00012.smil#code_001161">numpy</code>
                  <span class="text" id="span_003288" smilref="Programming_Robots_with_ROS00012.smil#span_003288">libraries to zero out (i.e., erase any filter hits of) pixels outside the desired region. This code snippet uses the Python</span>
                  <em id="em_000342" smilref="Programming_Robots_with_ROS00012.smil#em_000342">slice notation</em>
                  <span class="text" id="span_003289" smilref="Programming_Robots_with_ROS00012.smil#span_003289">to express pixel regions in a compact syntax:</span>
                </p>
                <p id="p_000821">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001162" smilref="Programming_Robots_with_ROS00012.smil#code_001162">    h, w, d = image.shape
    search_top = 3*h/4
    search_bot = search_top + 20
    mask[0:search_top, 0:w] = 0
    mask[search_bot:h, 0:w] = 0</code>
                </p>
                <p id="ch12-idp30223632" data-type="indexterm" data-startref="ix_12-followbot-asciidoc6">
                  <span class="text" id="span_003290" smilref="Programming_Robots_with_ROS00012.smil#span_003290">Then, we will use the OpenCV</span>
                  <code xml:space="preserve" id="code_001163" smilref="Programming_Robots_with_ROS00012.smil#code_001163">moments()</code>
                  <span class="text" id="span_003291" smilref="Programming_Robots_with_ROS00012.smil#span_003291">function to calculate the</span>
                  <em id="em_000343" smilref="Programming_Robots_with_ROS00012.smil#em_000343">centroid</em>
                  <span class="text" id="span_003292" smilref="Programming_Robots_with_ROS00012.smil#span_003292">, or arithmetic center, of the blob of the binary image that passes our filter:</span>
                </p>
                <p id="p_000822">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001164" smilref="Programming_Robots_with_ROS00012.smil#code_001164">    M = cv2.moments(mask)
    if M['m00'] &gt; 0:
      cx = int(M['m10']/M['m00'])
      cy = int(M['m01']/M['m00'])</code>
                </p>
                <p id="p_000823">
                  <span class="text" id="span_003293" smilref="Programming_Robots_with_ROS00012.smil#span_003293">Finally, to help in debugging, it is often useful to draw calculations and estimates on top of the original camera image. In</span>
                  <a data-type="xref" href="#ch12-follower_line_finder" external="false" id="a_000175" smilref="Programming_Robots_with_ROS00012.smil#a_000175">Example 12-4</a>
                  <span class="text" id="span_003294" smilref="Programming_Robots_with_ROS00012.smil#span_003294">we draw a solid red circle on the original RGB image to indicate the algorithm's estimate of the center of the line in the target image portion:</span>
                </p>
                <p id="p_000824">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001165" smilref="Programming_Robots_with_ROS00012.smil#code_001165">      cv2.circle(image, (cx, cy), 20, (0,0,255), -1)</code>
                </p>
                <p id="p_000825">
                  <span class="text" id="span_003295" smilref="Programming_Robots_with_ROS00012.smil#span_003295">This will produce output similar to</span>
                  <a data-type="xref" href="#ch12-line_finder" external="false" id="a_000176" smilref="Programming_Robots_with_ROS00012.smil#a_000176">Figure 12-7</a>
                  <span class="text" id="span_003296" smilref="Programming_Robots_with_ROS00012.smil#span_003296">.</span>
                </p>
                <p id="ch12-idp30167936" data-type="indexterm" data-startref="ix_12-followbot-asciidoc3">
                  <span class="text" id="span_003297" smilref="Programming_Robots_with_ROS00012.smil#span_003297">It is important to note that</span>
                  <a data-type="xref" href="#ch12-follower_line_finder" external="false" id="a_000177" smilref="Programming_Robots_with_ROS00012.smil#a_000177">Example 12-4</a>
                  <span class="text" id="span_003298" smilref="Programming_Robots_with_ROS00012.smil#span_003298">is written to handle not just still images, but continual image streams. To better understand the strengths and weaknesses, leave</span>
                  <code xml:space="preserve" id="code_001166" smilref="Programming_Robots_with_ROS00012.smil#code_001166">follower_line_finder.py</code>
                  <span class="text" id="span_003299" smilref="Programming_Robots_with_ROS00012.smil#span_003299">up and running, and use the Move and Rotate tools in Gazebo to observe the behavior of</span>
                  <code xml:space="preserve" id="code_001167" smilref="Programming_Robots_with_ROS00012.smil#code_001167">follower_line_finder.py</code>
                  <span class="text" id="span_003300" smilref="Programming_Robots_with_ROS00012.smil#span_003300">as the position and bearing change in simulation. Next, we will use the line-centroid estimation as our control input.</span>
                </p>
                <figure id="figure_000062">
                  <h1 id="h1_000255" smilref="Programming_Robots_with_ROS00012.smil#h1_000255">Figure 12-7. The original image with the red circle overlay, which shows the algorithm's estimate of the center of the line</h1>
                  <div id="ch12-line_finder" class="figure">
                    <img src="images/prwr_1207.jpg" alt="The line-finder estimate" id="img_000108" />
                  </div>
                </figure>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Following the Line" id="section_000130">
              <h1 id="h1_000256" smilref="Programming_Robots_with_ROS00012.smil#h1_000256">Following the Line</h1>
              <div class="sect1" id="ch12-idp29376784">
                <p id="ch12-ix_12-followbot-asciidoc9" data-type="indexterm" data-primary="follow-bot" data-secondary="following the target line">
                  <span class="text" id="span_003301" smilref="Programming_Robots_with_ROS00012.smil#span_003301">In the previous section, we worked up to a line detection algorithm. Now that we have a line detection scheme up and running, we can move on to the task of driving the robot such that the line stays near the center of the camera frame. In</span>
                  <a data-type="xref" href="#ch12-follower_p" external="false" id="a_000178" smilref="Programming_Robots_with_ROS00012.smil#a_000178">Example 12-5</a>
                  <span class="text" id="span_003302" smilref="Programming_Robots_with_ROS00012.smil#span_003302">, we demonstrate one approach to this problem: a P-controller. The P in this controller's name stands for</span>
                  <em id="em_000344" smilref="Programming_Robots_with_ROS00012.smil#em_000344">proportional</em>
                  <span class="text" id="span_003303" smilref="Programming_Robots_with_ROS00012.smil#span_003303">and simply means that a linear scaling of an error drives the control output. In our case, the error signal is the distance between the centerline of the image and the center of the line we are trying to follow.</span>
                </p>
                <h1 id="h1_000257" smilref="Programming_Robots_with_ROS00012.smil#h1_000257">Example 12-5. follower_p.py</h1>
                <div id="ch12-follower_p" data-type="example">
                  <p id="p_000826">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001168" smilref="Programming_Robots_with_ROS00012.smil#code_001168">#!/usr/bin/env python
import rospy, cv2, cv_bridge, numpy
from sensor_msgs.msg import Image
from geometry_msgs.msg import Twist

class Follower:
  def __init__(self):
    self.bridge = cv_bridge.CvBridge()
    cv2.namedWindow("window", 1)
    self.image_sub = rospy.Subscriber('camera/rgb/image_raw',
                                      Image, self.image_callback)
    self.cmd_vel_pub = rospy.Publisher('cmd_vel_mux/input/teleop',
                                       Twist, queue_size=1)
    self.twist = Twist()
  def image_callback(self, msg):
    image = self.bridge.imgmsg_to_cv2(msg,desired_encoding='bgr8')
    hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
    lower_yellow = numpy.array([ 10,  10,  10])
    upper_yellow = numpy.array([255, 255, 250])
    mask = cv2.inRange(hsv, lower_yellow, upper_yellow)

    h, w, d = image.shape
    search_top = 3*h/4
    search_bot = 3*h/4 + 20
    mask[0:search_top, 0:w] = 0
    mask[search_bot:h, 0:w] = 0
    M = cv2.moments(mask)
    if M['m00'] &gt; 0:
      cx = int(M['m10']/M['m00'])
      cy = int(M['m01']/M['m00'])
      cv2.circle(image, (cx, cy), 20, (0,0,255), -1)
      err = cx - w/2
      self.twist.linear.x = 0.2
      self.twist.angular.z = -float(err) / 100
      self.cmd_vel_pub.publish(self.twist)
    cv2.imshow("window", image)
    cv2.waitKey(3)

rospy.init_node('follower')
follower = Follower()
rospy.spin()</code>
                  </p>
                </div>
                <p id="p_000827" smilref="Programming_Robots_with_ROS00012.smil#p_000827">The P-controller is implemented in the following four lines:</p>
                <p id="p_000828">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001169" smilref="Programming_Robots_with_ROS00012.smil#code_001169">      err = cx - w/2
      self.twist.linear.x = 0.2
      self.twist.angular.z = -float(err) / 100
      self.cmd_vel_pub.publish(self.twist)</code>
                </p>
                <p id="p_000829">
                  <span class="text" id="span_003304" smilref="Programming_Robots_with_ROS00012.smil#span_003304">The first line calculates the error signal: the distance between the center column of the image and the estimated center of the line. The following two lines calculate the values to be used for the Turtlebot's</span>
                  <code xml:space="preserve" id="code_001170" smilref="Programming_Robots_with_ROS00012.smil#code_001170">cmd_vel</code>
                  <span class="text" id="span_003305" smilref="Programming_Robots_with_ROS00012.smil#span_003305">stream and scale it to something physically achievable by a Turtlebot. Finally, the last line publishes the</span>
                  <code xml:space="preserve" id="code_001171" smilref="Programming_Robots_with_ROS00012.smil#code_001171">sensor_msgs/Twist</code>
                  <span class="text" id="span_003306" smilref="Programming_Robots_with_ROS00012.smil#span_003306">message to its peer nodes (in this case, is simply the Turtlebot base).</span>
                </p>
                <p id="p_000830" smilref="Programming_Robots_with_ROS00012.smil#p_000830">Although the code is surprisingly short, this system is actually doing some reasonable behavior and is able to follow lines in Gazebo.</p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Summary" id="section_000131">
              <h1 id="h1_000258" smilref="Programming_Robots_with_ROS00012.smil#h1_000258">Summary</h1>
              <div class="sect1" id="ch12-idp30770896">
                <p id="ch12-idp30775248" data-type="indexterm" data-startref="ix_12-followbot-asciidoc0" smilref="Programming_Robots_with_ROS00012.smil#ch12-idp30775248">In this chapter, we showed how to use OpenCV with ROS in Python. Specifically, we showed how to filter and threshold a ROS image stream by hue, and how to generate an error signal and drive a minimalist feedback controller. The result is a program that will drive a simulated Turtlebot to follow lines around a Gazebo simulation.</p>
                <p id="p_000831" smilref="Programming_Robots_with_ROS00012.smil#p_000831">Even though line following has many useful applications, such as following road signage or factory floor markings, it is often not quite enough by itself. A common requirement for higher-level robot navigation is to travel between specific points on a map. In the next chapter, we will describe an approach to this problem using the ROS navigation stack and tools for creating and managing state machines.</p>
              </div>
            </section>
          </div>
        </section>
      </level1>
      <level1 id="ch13">
        <section xmlns:epub="http://www.idpf.org/2007/ops" data-type="chapter" epub:type="chapter" data-pdf-bookmark="Chapter 13. On Patrol" id="section_000132">
          <h1 id="h1_000259" smilref="Programming_Robots_with_ROS00012.smil#h1_000259">Chapter 13. On Patrol</h1>
          <div class="chapter" id="ch13-patrol">
            <p id="ch13-ix_13-patrol-asciidoc0" data-type="indexterm" data-primary="patrolling">
              <span class="text" id="span_003307" smilref="Programming_Robots_with_ROS00012.smil#span_003307">In</span>
              <a data-type="xref" href="#ch10-navigating" external="false" id="a_000179" smilref="Programming_Robots_with_ROS00012.smil#a_000179">Chapter 10</a>
              <span class="text" id="span_003308" smilref="Programming_Robots_with_ROS00012.smil#span_003308">, you saw how to use the ROS nav stack to get your robot to a specific place in the world. In this chapter, we'll build on these basic navigation capabilities and look at how to get your robot to patrol around the world, collecting interesting information as it goes. We'll also use this application as an excuse to learn about task-level control of robots, where we sequence entire behaviors rather than single actions.</span>
            </p>
            <section data-type="sect1" data-pdf-bookmark="Simple Patrolling" id="section_000133">
              <h1 id="h1_000260" smilref="Programming_Robots_with_ROS00012.smil#h1_000260">Simple Patrolling</h1>
              <div class="sect1" id="ch13-idp30781040">
                <p id="ch13-idp30782208" data-type="indexterm" data-primary="patrolling" data-secondary="simple system for">
                  <span class="text" id="span_003309" smilref="Programming_Robots_with_ROS00012.smil#span_003309">As with most things in ROS, there are several ways to implement a patrol system. In fact, the code we saw in</span>
                  <a data-type="xref" href="#ch10-patrol_node" external="false" id="a_000180" smilref="Programming_Robots_with_ROS00012.smil#a_000180">Example 10-1</a>
                  <span class="text" id="span_003310" smilref="Programming_Robots_with_ROS00012.smil#span_003310">is all we need. This code, shown again in</span>
                  <a data-type="xref" href="#ch13-simple_patrol_node" external="false" id="a_000181" smilref="Programming_Robots_with_ROS00012.smil#a_000181">Example 13-1</a>
                  <span class="text" id="span_003311" smilref="Programming_Robots_with_ROS00012.smil#span_003311">, moves the robot from one pose in the world to another. All we need to do is to put the places in the world that we want the patrol to cover in the list of waypoints, and we're all set.</span>
                </p>
                <h1 id="h1_000261" smilref="Programming_Robots_with_ROS00012.smil#h1_000261">Example 13-1. patrol.py</h1>
                <div id="ch13-simple_patrol_node" data-type="example">
                  <p id="p_000832">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001172"><span class="text" id="span_003312" smilref="Programming_Robots_with_ROS00012.smil#span_003312">#!/usr/bin/env python</span>

<span class="text" id="span_003313" smilref="Programming_Robots_with_ROS00012.smil#span_003313">import</span> <span class="text" id="span_003314" smilref="Programming_Robots_with_ROS00012.smil#span_003314">rospy</span>
<span class="text" id="span_003315" smilref="Programming_Robots_with_ROS00012.smil#span_003315">import</span> <span class="text" id="span_003316" smilref="Programming_Robots_with_ROS00012.smil#span_003316">actionlib</span>

<span class="text" id="span_003317" smilref="Programming_Robots_with_ROS00012.smil#span_003317">from</span> <span class="text" id="span_003318" smilref="Programming_Robots_with_ROS00012.smil#span_003318">move_base_msgs.msg</span> <span class="text" id="span_003319" smilref="Programming_Robots_with_ROS00012.smil#span_003319">import</span> <span class="text" id="span_003320" smilref="Programming_Robots_with_ROS00012.smil#span_003320">MoveBaseAction</span><span class="text" id="span_003321" smilref="Programming_Robots_with_ROS00012.smil#span_003321">,</span> <span class="text" id="span_003322" smilref="Programming_Robots_with_ROS00012.smil#span_003322">MoveBaseGoal</span>


<span class="text" id="span_003323" smilref="Programming_Robots_with_ROS00012.smil#span_003323">waypoints</span> <span class="text" id="span_003324" smilref="Programming_Robots_with_ROS00012.smil#span_003324">=</span> <span class="text" id="span_003325" smilref="Programming_Robots_with_ROS00012.smil#span_003325">[</span>  <a class="co" id="ch13-co_on_patrol_CO1-1" href="#ch13-callout_on_patrol_CO1-1" external="false"><img src="images/1.jpg" alt="1" id="img_000109" /></a>
    <span class="text" id="span_003326" smilref="Programming_Robots_with_ROS00012.smil#span_003326">[</span><span class="text" id="span_003327" smilref="Programming_Robots_with_ROS00012.smil#span_003327">(</span><span class="text" id="span_003328" smilref="Programming_Robots_with_ROS00012.smil#span_003328">2.1</span><span class="text" id="span_003329" smilref="Programming_Robots_with_ROS00012.smil#span_003329">,</span> <span class="text" id="span_003330" smilref="Programming_Robots_with_ROS00012.smil#span_003330">2.2</span><span class="text" id="span_003331" smilref="Programming_Robots_with_ROS00012.smil#span_003331">,</span> <span class="text" id="span_003332" smilref="Programming_Robots_with_ROS00012.smil#span_003332">0.0</span><span class="text" id="span_003333" smilref="Programming_Robots_with_ROS00012.smil#span_003333">)</span><span class="text" id="span_003334" smilref="Programming_Robots_with_ROS00012.smil#span_003334">,</span> <span class="text" id="span_003335" smilref="Programming_Robots_with_ROS00012.smil#span_003335">(</span><span class="text" id="span_003336" smilref="Programming_Robots_with_ROS00012.smil#span_003336">0.0</span><span class="text" id="span_003337" smilref="Programming_Robots_with_ROS00012.smil#span_003337">,</span> <span class="text" id="span_003338" smilref="Programming_Robots_with_ROS00012.smil#span_003338">0.0</span><span class="text" id="span_003339" smilref="Programming_Robots_with_ROS00012.smil#span_003339">,</span> <span class="text" id="span_003340" smilref="Programming_Robots_with_ROS00012.smil#span_003340">0.0</span><span class="text" id="span_003341" smilref="Programming_Robots_with_ROS00012.smil#span_003341">,</span> <span class="text" id="span_003342" smilref="Programming_Robots_with_ROS00012.smil#span_003342">1.0</span><span class="text" id="span_003343" smilref="Programming_Robots_with_ROS00012.smil#span_003343">)</span><span class="text" id="span_003344" smilref="Programming_Robots_with_ROS00012.smil#span_003344">]</span><span class="text" id="span_003345" smilref="Programming_Robots_with_ROS00012.smil#span_003345">,</span>
    <span class="text" id="span_003346" smilref="Programming_Robots_with_ROS00012.smil#span_003346">[</span><span class="text" id="span_003347" smilref="Programming_Robots_with_ROS00012.smil#span_003347">(</span><span class="text" id="span_003348" smilref="Programming_Robots_with_ROS00012.smil#span_003348">6.5</span><span class="text" id="span_003349" smilref="Programming_Robots_with_ROS00012.smil#span_003349">,</span> <span class="text" id="span_003350" smilref="Programming_Robots_with_ROS00012.smil#span_003350">4.43</span><span class="text" id="span_003351" smilref="Programming_Robots_with_ROS00012.smil#span_003351">,</span> <span class="text" id="span_003352" smilref="Programming_Robots_with_ROS00012.smil#span_003352">0.0</span><span class="text" id="span_003353" smilref="Programming_Robots_with_ROS00012.smil#span_003353">)</span><span class="text" id="span_003354" smilref="Programming_Robots_with_ROS00012.smil#span_003354">,</span> <span class="text" id="span_003355" smilref="Programming_Robots_with_ROS00012.smil#span_003355">(</span><span class="text" id="span_003356" smilref="Programming_Robots_with_ROS00012.smil#span_003356">0.0</span><span class="text" id="span_003357" smilref="Programming_Robots_with_ROS00012.smil#span_003357">,</span> <span class="text" id="span_003358" smilref="Programming_Robots_with_ROS00012.smil#span_003358">0.0</span><span class="text" id="span_003359" smilref="Programming_Robots_with_ROS00012.smil#span_003359">,</span> <span class="text" id="span_003360" smilref="Programming_Robots_with_ROS00012.smil#span_003360">-</span><span class="text" id="span_003361" smilref="Programming_Robots_with_ROS00012.smil#span_003361">0.984047240305</span><span class="text" id="span_003362" smilref="Programming_Robots_with_ROS00012.smil#span_003362">,</span> <span class="text" id="span_003363" smilref="Programming_Robots_with_ROS00012.smil#span_003363">0.177907360295</span><span class="text" id="span_003364" smilref="Programming_Robots_with_ROS00012.smil#span_003364">)</span><span class="text" id="span_003365" smilref="Programming_Robots_with_ROS00012.smil#span_003365">]</span>
<span class="text" id="span_003366" smilref="Programming_Robots_with_ROS00012.smil#span_003366">]</span>


<span class="text" id="span_003367" smilref="Programming_Robots_with_ROS00012.smil#span_003367">def</span> <span class="text" id="span_003368" smilref="Programming_Robots_with_ROS00012.smil#span_003368">goal_pose</span><span class="text" id="span_003369" smilref="Programming_Robots_with_ROS00012.smil#span_003369">(</span><span class="text" id="span_003370" smilref="Programming_Robots_with_ROS00012.smil#span_003370">pose</span><span class="text" id="span_003371" smilref="Programming_Robots_with_ROS00012.smil#span_003371">)</span><span class="text" id="span_003372" smilref="Programming_Robots_with_ROS00012.smil#span_003372">:</span>  <a class="co" id="ch13-co_on_patrol_CO1-2" href="#ch13-callout_on_patrol_CO1-2" external="false"><img src="images/2.jpg" alt="2" id="img_000110" /></a>
    <span class="text" id="span_003373" smilref="Programming_Robots_with_ROS00012.smil#span_003373">goal_pose</span> <span class="text" id="span_003374" smilref="Programming_Robots_with_ROS00012.smil#span_003374">=</span> <span class="text" id="span_003375" smilref="Programming_Robots_with_ROS00012.smil#span_003375">MoveBaseGoal</span><span class="text" id="span_003376" smilref="Programming_Robots_with_ROS00012.smil#span_003376">(</span><span class="text" id="span_003377" smilref="Programming_Robots_with_ROS00012.smil#span_003377">)</span>
    <span class="text" id="span_003378" smilref="Programming_Robots_with_ROS00012.smil#span_003378">goal_pose</span><span class="text" id="span_003379" smilref="Programming_Robots_with_ROS00012.smil#span_003379">.</span><span class="text" id="span_003380" smilref="Programming_Robots_with_ROS00012.smil#span_003380">target_pose</span><span class="text" id="span_003381" smilref="Programming_Robots_with_ROS00012.smil#span_003381">.</span><span class="text" id="span_003382" smilref="Programming_Robots_with_ROS00012.smil#span_003382">header</span><span class="text" id="span_003383" smilref="Programming_Robots_with_ROS00012.smil#span_003383">.</span><span class="text" id="span_003384" smilref="Programming_Robots_with_ROS00012.smil#span_003384">frame_id</span> <span class="text" id="span_003385" smilref="Programming_Robots_with_ROS00012.smil#span_003385">=</span> <span class="text" id="span_003386" smilref="Programming_Robots_with_ROS00012.smil#span_003386">'</span><span class="text" id="span_003387" smilref="Programming_Robots_with_ROS00012.smil#span_003387">map</span><span class="text" id="span_003388" smilref="Programming_Robots_with_ROS00012.smil#span_003388">'</span>
    <span class="text" id="span_003389" smilref="Programming_Robots_with_ROS00012.smil#span_003389">goal_pose</span><span class="text" id="span_003390" smilref="Programming_Robots_with_ROS00012.smil#span_003390">.</span><span class="text" id="span_003391" smilref="Programming_Robots_with_ROS00012.smil#span_003391">target_pose</span><span class="text" id="span_003392" smilref="Programming_Robots_with_ROS00012.smil#span_003392">.</span><span class="text" id="span_003393" smilref="Programming_Robots_with_ROS00012.smil#span_003393">pose</span><span class="text" id="span_003394" smilref="Programming_Robots_with_ROS00012.smil#span_003394">.</span><span class="text" id="span_003395" smilref="Programming_Robots_with_ROS00012.smil#span_003395">position</span><span class="text" id="span_003396" smilref="Programming_Robots_with_ROS00012.smil#span_003396">.</span><span class="text" id="span_003397" smilref="Programming_Robots_with_ROS00012.smil#span_003397">x</span> <span class="text" id="span_003398" smilref="Programming_Robots_with_ROS00012.smil#span_003398">=</span> <span class="text" id="span_003399" smilref="Programming_Robots_with_ROS00012.smil#span_003399">pose</span><span class="text" id="span_003400" smilref="Programming_Robots_with_ROS00012.smil#span_003400">[</span><span class="text" id="span_003401" smilref="Programming_Robots_with_ROS00012.smil#span_003401">0</span><span class="text" id="span_003402" smilref="Programming_Robots_with_ROS00012.smil#span_003402">]</span><span class="text" id="span_003403" smilref="Programming_Robots_with_ROS00012.smil#span_003403">[</span><span class="text" id="span_003404" smilref="Programming_Robots_with_ROS00012.smil#span_003404">0</span><span class="text" id="span_003405" smilref="Programming_Robots_with_ROS00012.smil#span_003405">]</span>
    <span class="text" id="span_003406" smilref="Programming_Robots_with_ROS00012.smil#span_003406">goal_pose</span><span class="text" id="span_003407" smilref="Programming_Robots_with_ROS00012.smil#span_003407">.</span><span class="text" id="span_003408" smilref="Programming_Robots_with_ROS00012.smil#span_003408">target_pose</span><span class="text" id="span_003409" smilref="Programming_Robots_with_ROS00012.smil#span_003409">.</span><span class="text" id="span_003410" smilref="Programming_Robots_with_ROS00012.smil#span_003410">pose</span><span class="text" id="span_003411" smilref="Programming_Robots_with_ROS00012.smil#span_003411">.</span><span class="text" id="span_003412" smilref="Programming_Robots_with_ROS00012.smil#span_003412">position</span><span class="text" id="span_003413" smilref="Programming_Robots_with_ROS00012.smil#span_003413">.</span><span class="text" id="span_003414" smilref="Programming_Robots_with_ROS00012.smil#span_003414">y</span> <span class="text" id="span_003415" smilref="Programming_Robots_with_ROS00012.smil#span_003415">=</span> <span class="text" id="span_003416" smilref="Programming_Robots_with_ROS00012.smil#span_003416">pose</span><span class="text" id="span_003417" smilref="Programming_Robots_with_ROS00012.smil#span_003417">[</span><span class="text" id="span_003418" smilref="Programming_Robots_with_ROS00012.smil#span_003418">0</span><span class="text" id="span_003419" smilref="Programming_Robots_with_ROS00012.smil#span_003419">]</span><span class="text" id="span_003420" smilref="Programming_Robots_with_ROS00012.smil#span_003420">[</span><span class="text" id="span_003421" smilref="Programming_Robots_with_ROS00012.smil#span_003421">1</span><span class="text" id="span_003422" smilref="Programming_Robots_with_ROS00012.smil#span_003422">]</span>
    <span class="text" id="span_003423" smilref="Programming_Robots_with_ROS00012.smil#span_003423">goal_pose</span><span class="text" id="span_003424" smilref="Programming_Robots_with_ROS00012.smil#span_003424">.</span><span class="text" id="span_003425" smilref="Programming_Robots_with_ROS00012.smil#span_003425">target_pose</span><span class="text" id="span_003426" smilref="Programming_Robots_with_ROS00012.smil#span_003426">.</span><span class="text" id="span_003427" smilref="Programming_Robots_with_ROS00012.smil#span_003427">pose</span><span class="text" id="span_003428" smilref="Programming_Robots_with_ROS00012.smil#span_003428">.</span><span class="text" id="span_003429" smilref="Programming_Robots_with_ROS00012.smil#span_003429">position</span><span class="text" id="span_003430" smilref="Programming_Robots_with_ROS00012.smil#span_003430">.</span><span class="text" id="span_003431" smilref="Programming_Robots_with_ROS00012.smil#span_003431">z</span> <span class="text" id="span_003432" smilref="Programming_Robots_with_ROS00012.smil#span_003432">=</span> <span class="text" id="span_003433" smilref="Programming_Robots_with_ROS00012.smil#span_003433">pose</span><span class="text" id="span_003434" smilref="Programming_Robots_with_ROS00012.smil#span_003434">[</span><span class="text" id="span_003435" smilref="Programming_Robots_with_ROS00012.smil#span_003435">0</span><span class="text" id="span_003436" smilref="Programming_Robots_with_ROS00012.smil#span_003436">]</span><span class="text" id="span_003437" smilref="Programming_Robots_with_ROS00012.smil#span_003437">[</span><span class="text" id="span_003438" smilref="Programming_Robots_with_ROS00012.smil#span_003438">2</span><span class="text" id="span_003439" smilref="Programming_Robots_with_ROS00012.smil#span_003439">]</span>
    <span class="text" id="span_003440" smilref="Programming_Robots_with_ROS00012.smil#span_003440">goal_pose</span><span class="text" id="span_003441" smilref="Programming_Robots_with_ROS00012.smil#span_003441">.</span><span class="text" id="span_003442" smilref="Programming_Robots_with_ROS00012.smil#span_003442">target_pose</span><span class="text" id="span_003443" smilref="Programming_Robots_with_ROS00012.smil#span_003443">.</span><span class="text" id="span_003444" smilref="Programming_Robots_with_ROS00012.smil#span_003444">pose</span><span class="text" id="span_003445" smilref="Programming_Robots_with_ROS00012.smil#span_003445">.</span><span class="text" id="span_003446" smilref="Programming_Robots_with_ROS00012.smil#span_003446">orientation</span><span class="text" id="span_003447" smilref="Programming_Robots_with_ROS00012.smil#span_003447">.</span><span class="text" id="span_003448" smilref="Programming_Robots_with_ROS00012.smil#span_003448">x</span> <span class="text" id="span_003449" smilref="Programming_Robots_with_ROS00012.smil#span_003449">=</span> <span class="text" id="span_003450" smilref="Programming_Robots_with_ROS00012.smil#span_003450">pose</span><span class="text" id="span_003451" smilref="Programming_Robots_with_ROS00012.smil#span_003451">[</span><span class="text" id="span_003452" smilref="Programming_Robots_with_ROS00012.smil#span_003452">1</span><span class="text" id="span_003453" smilref="Programming_Robots_with_ROS00012.smil#span_003453">]</span><span class="text" id="span_003454" smilref="Programming_Robots_with_ROS00012.smil#span_003454">[</span><span class="text" id="span_003455" smilref="Programming_Robots_with_ROS00012.smil#span_003455">0</span><span class="text" id="span_003456" smilref="Programming_Robots_with_ROS00012.smil#span_003456">]</span>
    <span class="text" id="span_003457" smilref="Programming_Robots_with_ROS00012.smil#span_003457">goal_pose</span><span class="text" id="span_003458" smilref="Programming_Robots_with_ROS00012.smil#span_003458">.</span><span class="text" id="span_003459" smilref="Programming_Robots_with_ROS00012.smil#span_003459">target_pose</span><span class="text" id="span_003460" smilref="Programming_Robots_with_ROS00012.smil#span_003460">.</span><span class="text" id="span_003461" smilref="Programming_Robots_with_ROS00012.smil#span_003461">pose</span><span class="text" id="span_003462" smilref="Programming_Robots_with_ROS00012.smil#span_003462">.</span><span class="text" id="span_003463" smilref="Programming_Robots_with_ROS00012.smil#span_003463">orientation</span><span class="text" id="span_003464" smilref="Programming_Robots_with_ROS00012.smil#span_003464">.</span><span class="text" id="span_003465" smilref="Programming_Robots_with_ROS00012.smil#span_003465">y</span> <span class="text" id="span_003466" smilref="Programming_Robots_with_ROS00012.smil#span_003466">=</span> <span class="text" id="span_003467" smilref="Programming_Robots_with_ROS00012.smil#span_003467">pose</span><span class="text" id="span_003468" smilref="Programming_Robots_with_ROS00012.smil#span_003468">[</span><span class="text" id="span_003469" smilref="Programming_Robots_with_ROS00012.smil#span_003469">1</span><span class="text" id="span_003470" smilref="Programming_Robots_with_ROS00012.smil#span_003470">]</span><span class="text" id="span_003471" smilref="Programming_Robots_with_ROS00012.smil#span_003471">[</span><span class="text" id="span_003472" smilref="Programming_Robots_with_ROS00012.smil#span_003472">1</span><span class="text" id="span_003473" smilref="Programming_Robots_with_ROS00012.smil#span_003473">]</span>
    <span class="text" id="span_003474" smilref="Programming_Robots_with_ROS00012.smil#span_003474">goal_pose</span><span class="text" id="span_003475" smilref="Programming_Robots_with_ROS00012.smil#span_003475">.</span><span class="text" id="span_003476" smilref="Programming_Robots_with_ROS00012.smil#span_003476">target_pose</span><span class="text" id="span_003477" smilref="Programming_Robots_with_ROS00012.smil#span_003477">.</span><span class="text" id="span_003478" smilref="Programming_Robots_with_ROS00012.smil#span_003478">pose</span><span class="text" id="span_003479" smilref="Programming_Robots_with_ROS00012.smil#span_003479">.</span><span class="text" id="span_003480" smilref="Programming_Robots_with_ROS00012.smil#span_003480">orientation</span><span class="text" id="span_003481" smilref="Programming_Robots_with_ROS00012.smil#span_003481">.</span><span class="text" id="span_003482" smilref="Programming_Robots_with_ROS00012.smil#span_003482">z</span> <span class="text" id="span_003483" smilref="Programming_Robots_with_ROS00012.smil#span_003483">=</span> <span class="text" id="span_003484" smilref="Programming_Robots_with_ROS00012.smil#span_003484">pose</span><span class="text" id="span_003485" smilref="Programming_Robots_with_ROS00012.smil#span_003485">[</span><span class="text" id="span_003486" smilref="Programming_Robots_with_ROS00012.smil#span_003486">1</span><span class="text" id="span_003487" smilref="Programming_Robots_with_ROS00012.smil#span_003487">]</span><span class="text" id="span_003488" smilref="Programming_Robots_with_ROS00012.smil#span_003488">[</span><span class="text" id="span_003489" smilref="Programming_Robots_with_ROS00012.smil#span_003489">2</span><span class="text" id="span_003490" smilref="Programming_Robots_with_ROS00012.smil#span_003490">]</span>
    <span class="text" id="span_003491" smilref="Programming_Robots_with_ROS00012.smil#span_003491">goal_pose</span><span class="text" id="span_003492" smilref="Programming_Robots_with_ROS00012.smil#span_003492">.</span><span class="text" id="span_003493" smilref="Programming_Robots_with_ROS00012.smil#span_003493">target_pose</span><span class="text" id="span_003494" smilref="Programming_Robots_with_ROS00012.smil#span_003494">.</span><span class="text" id="span_003495" smilref="Programming_Robots_with_ROS00012.smil#span_003495">pose</span><span class="text" id="span_003496" smilref="Programming_Robots_with_ROS00012.smil#span_003496">.</span><span class="text" id="span_003497" smilref="Programming_Robots_with_ROS00012.smil#span_003497">orientation</span><span class="text" id="span_003498" smilref="Programming_Robots_with_ROS00012.smil#span_003498">.</span><span class="text" id="span_003499" smilref="Programming_Robots_with_ROS00012.smil#span_003499">w</span> <span class="text" id="span_003500" smilref="Programming_Robots_with_ROS00012.smil#span_003500">=</span> <span class="text" id="span_003501" smilref="Programming_Robots_with_ROS00012.smil#span_003501">pose</span><span class="text" id="span_003502" smilref="Programming_Robots_with_ROS00012.smil#span_003502">[</span><span class="text" id="span_003503" smilref="Programming_Robots_with_ROS00012.smil#span_003503">1</span><span class="text" id="span_003504" smilref="Programming_Robots_with_ROS00012.smil#span_003504">]</span><span class="text" id="span_003505" smilref="Programming_Robots_with_ROS00012.smil#span_003505">[</span><span class="text" id="span_003506" smilref="Programming_Robots_with_ROS00012.smil#span_003506">3</span><span class="text" id="span_003507" smilref="Programming_Robots_with_ROS00012.smil#span_003507">]</span>

    <span class="text" id="span_003508" smilref="Programming_Robots_with_ROS00012.smil#span_003508">return</span> <span class="text" id="span_003509" smilref="Programming_Robots_with_ROS00012.smil#span_003509">goal_pose</span>


<span class="text" id="span_003510" smilref="Programming_Robots_with_ROS00012.smil#span_003510">if</span> <span class="text" id="span_003511" smilref="Programming_Robots_with_ROS00012.smil#span_003511">__name__</span> <span class="text" id="span_003512" smilref="Programming_Robots_with_ROS00012.smil#span_003512">==</span> <span class="text" id="span_003513" smilref="Programming_Robots_with_ROS00012.smil#span_003513">'</span><span class="text" id="span_003514" smilref="Programming_Robots_with_ROS00012.smil#span_003514">__main__</span><span class="text" id="span_003515" smilref="Programming_Robots_with_ROS00012.smil#span_003515">'</span><span class="text" id="span_003516" smilref="Programming_Robots_with_ROS00012.smil#span_003516">:</span>
    <span class="text" id="span_003517" smilref="Programming_Robots_with_ROS00012.smil#span_003517">rospy</span><span class="text" id="span_003518" smilref="Programming_Robots_with_ROS00012.smil#span_003518">.</span><span class="text" id="span_003519" smilref="Programming_Robots_with_ROS00012.smil#span_003519">init_node</span><span class="text" id="span_003520" smilref="Programming_Robots_with_ROS00012.smil#span_003520">(</span><span class="text" id="span_003521" smilref="Programming_Robots_with_ROS00012.smil#span_003521">'</span><span class="text" id="span_003522" smilref="Programming_Robots_with_ROS00012.smil#span_003522">patrol</span><span class="text" id="span_003523" smilref="Programming_Robots_with_ROS00012.smil#span_003523">'</span><span class="text" id="span_003524" smilref="Programming_Robots_with_ROS00012.smil#span_003524">)</span>

    <span class="text" id="span_003525" smilref="Programming_Robots_with_ROS00012.smil#span_003525">client</span> <span class="text" id="span_003526" smilref="Programming_Robots_with_ROS00012.smil#span_003526">=</span> <span class="text" id="span_003527" smilref="Programming_Robots_with_ROS00012.smil#span_003527">actionlib</span><span class="text" id="span_003528" smilref="Programming_Robots_with_ROS00012.smil#span_003528">.</span><span class="text" id="span_003529" smilref="Programming_Robots_with_ROS00012.smil#span_003529">SimpleActionClient</span><span class="text" id="span_003530" smilref="Programming_Robots_with_ROS00012.smil#span_003530">(</span><span class="text" id="span_003531" smilref="Programming_Robots_with_ROS00012.smil#span_003531">'</span><span class="text" id="span_003532" smilref="Programming_Robots_with_ROS00012.smil#span_003532">move_base</span><span class="text" id="span_003533" smilref="Programming_Robots_with_ROS00012.smil#span_003533">'</span><span class="text" id="span_003534" smilref="Programming_Robots_with_ROS00012.smil#span_003534">,</span> <span class="text" id="span_003535" smilref="Programming_Robots_with_ROS00012.smil#span_003535">MoveBaseAction</span><span class="text" id="span_003536" smilref="Programming_Robots_with_ROS00012.smil#span_003536">)</span>  <a class="co" id="ch13-co_on_patrol_CO1-3" href="#ch13-callout_on_patrol_CO1-3" external="false"><img src="images/3.jpg" alt="3" id="img_000111" /></a>
    <span class="text" id="span_003537" smilref="Programming_Robots_with_ROS00012.smil#span_003537">client</span><span class="text" id="span_003538" smilref="Programming_Robots_with_ROS00012.smil#span_003538">.</span><span class="text" id="span_003539" smilref="Programming_Robots_with_ROS00012.smil#span_003539">wait_for_server</span><span class="text" id="span_003540" smilref="Programming_Robots_with_ROS00012.smil#span_003540">(</span><span class="text" id="span_003541" smilref="Programming_Robots_with_ROS00012.smil#span_003541">)</span>

    <span class="text" id="span_003542" smilref="Programming_Robots_with_ROS00012.smil#span_003542">while</span> <span class="text" id="span_003543" smilref="Programming_Robots_with_ROS00012.smil#span_003543">True</span><span class="text" id="span_003544" smilref="Programming_Robots_with_ROS00012.smil#span_003544">:</span>
        <span class="text" id="span_003545" smilref="Programming_Robots_with_ROS00012.smil#span_003545">for</span> <span class="text" id="span_003546" smilref="Programming_Robots_with_ROS00012.smil#span_003546">pose</span> <span class="text" id="span_003547" smilref="Programming_Robots_with_ROS00012.smil#span_003547">in</span> <span class="text" id="span_003548" smilref="Programming_Robots_with_ROS00012.smil#span_003548">waypoints</span><span class="text" id="span_003549" smilref="Programming_Robots_with_ROS00012.smil#span_003549">:</span>   <a class="co" id="ch13-co_on_patrol_CO1-4" href="#ch13-callout_on_patrol_CO1-4" external="false"><img src="images/4.jpg" alt="4" id="img_000112" /></a>
            <span class="text" id="span_003550" smilref="Programming_Robots_with_ROS00012.smil#span_003550">goal</span> <span class="text" id="span_003551" smilref="Programming_Robots_with_ROS00012.smil#span_003551">=</span> <span class="text" id="span_003552" smilref="Programming_Robots_with_ROS00012.smil#span_003552">goal_pose</span><span class="text" id="span_003553" smilref="Programming_Robots_with_ROS00012.smil#span_003553">(</span><span class="text" id="span_003554" smilref="Programming_Robots_with_ROS00012.smil#span_003554">pose</span><span class="text" id="span_003555" smilref="Programming_Robots_with_ROS00012.smil#span_003555">)</span>
            <span class="text" id="span_003556" smilref="Programming_Robots_with_ROS00012.smil#span_003556">client</span><span class="text" id="span_003557" smilref="Programming_Robots_with_ROS00012.smil#span_003557">.</span><span class="text" id="span_003558" smilref="Programming_Robots_with_ROS00012.smil#span_003558">send_goal</span><span class="text" id="span_003559" smilref="Programming_Robots_with_ROS00012.smil#span_003559">(</span><span class="text" id="span_003560" smilref="Programming_Robots_with_ROS00012.smil#span_003560">goal</span><span class="text" id="span_003561" smilref="Programming_Robots_with_ROS00012.smil#span_003561">)</span>
            <span class="text" id="span_003562" smilref="Programming_Robots_with_ROS00012.smil#span_003562">client</span><span class="text" id="span_003563" smilref="Programming_Robots_with_ROS00012.smil#span_003563">.</span><span class="text" id="span_003564" smilref="Programming_Robots_with_ROS00012.smil#span_003564">wait_for_result</span><span class="text" id="span_003565" smilref="Programming_Robots_with_ROS00012.smil#span_003565">(</span><span class="text" id="span_003566" smilref="Programming_Robots_with_ROS00012.smil#span_003566">)</span></code>
                  </p>
                  <dl class="calloutlist" id="dl_000008">
                    <dt id="dt_000033">
                      <a class="co" id="ch13-callout_on_patrol_CO1-1" href="#ch13-co_on_patrol_CO1-1" external="false">
                        <img src="images/1.jpg" alt="1" id="img_000113" />
                      </a>
                    </dt>
                    <dd id="dd_000033">
                      <p id="p_000833" smilref="Programming_Robots_with_ROS00012.smil#p_000833">A list of the waypoints for the robot to patrol.</p>
                    </dd>
                    <dt id="dt_000034">
                      <a class="co" id="ch13-callout_on_patrol_CO1-2" href="#ch13-co_on_patrol_CO1-2" external="false">
                        <img src="images/2.jpg" alt="2" id="img_000114" />
                      </a>
                    </dt>
                    <dd id="dd_000034">
                      <p id="p_000834">
                        <span class="text" id="span_003567" smilref="Programming_Robots_with_ROS00012.smil#span_003567">A helper function to turn a waypoint into a</span>
                        <code xml:space="preserve" id="code_001173" smilref="Programming_Robots_with_ROS00012.smil#code_001173">MoveBaseGoal</code>
                        <span class="text" id="span_003568" smilref="Programming_Robots_with_ROS00012.smil#span_003568">.</span>
                      </p>
                    </dd>
                    <dt id="dt_000035">
                      <a class="co" id="ch13-callout_on_patrol_CO1-3" href="#ch13-co_on_patrol_CO1-3" external="false">
                        <img src="images/3.jpg" alt="3" id="img_000115" />
                      </a>
                    </dt>
                    <dd id="dd_000035">
                      <p id="p_000835" smilref="Programming_Robots_with_ROS00012.smil#p_000835">Create a simple action client, and wait for the server to be ready.</p>
                    </dd>
                    <dt id="dt_000036">
                      <a class="co" id="ch13-callout_on_patrol_CO1-4" href="#ch13-co_on_patrol_CO1-4" external="false">
                        <img src="images/4.jpg" alt="4" id="img_000116" />
                      </a>
                    </dt>
                    <dd id="dd_000036">
                      <p id="p_000836" smilref="Programming_Robots_with_ROS00012.smil#p_000836">Loop through the waypoints, sending each as an action goal.</p>
                    </dd>
                  </dl>
                </div>
                <p id="p_000837">
                  <span class="text" id="span_003569" smilref="Programming_Robots_with_ROS00012.smil#span_003569">If all we wanted to do was to implement a simple patrol system, then this code would probably be just fine. It does everything that we need to move the robot from one waypoint to the next by making repeated action calls to the nav stack. However, if we also want the robot to do something else while it's navigating or when it reaches a waypoint, we have to write code that synchronizes with the navigation behavior. To make this easier to implement and debug, it makes sense to encapsulate it in some way. In the next section, we're going to see one way of doing this encapsulating, using the idea of state machines and the</span>
                  <code xml:space="preserve" id="code_001174" smilref="Programming_Robots_with_ROS00012.smil#code_001174">smach</code>
                  <span class="text" id="span_003570" smilref="Programming_Robots_with_ROS00012.smil#span_003570">task-level coordination library.</span>
                </p>
              </div>
            </section>
            <section data-type="sect1" class="pagebreak-before" data-pdf-bookmark="State Machines" id="section_000134">
              <h1 id="h1_000262" smilref="Programming_Robots_with_ROS00012.smil#h1_000262">State Machines</h1>
              <div class="sect1" id="ch13-idp31055536">
                <p id="ch13-ix_13-patrol-asciidoc1" data-type="indexterm" data-primary="patrolling" data-secondary="state machines" smilref="Programming_Robots_with_ROS00012.smil#ch13-ix_13-patrol-asciidoc1">The idea of a state machine is a fundamental one in computer science. The basic idea is that your robot can be in one of a finite number of states, such as "waiting," "moving," and "recharging," each of which maps to a behavior. When one state ends, the system immediately moves into another state (for example, changing from "waiting" to "moving" as the robot starts to navigate around the world). The robot must always be in one and only one of these states, and there must be a finite number of them. Which state the robot transitions to can depend on the outcome of the just-finished state. For example, if the robot just moved to its charging station, it might transition from "moving" to "charging," rather than to "waiting." Once it is charged, then it might transition from "charging" to "waiting." The behaviors that correspond to the states "waiting," "moving," and "charging" can be encapsulated in the states, and the transitions between them are specified by the structure of the state machine.</p>
                <p id="ch13-ix_13-patrol-asciidoc4" data-type="indexterm" data-primary="PR2 robot" data-secondary="state machine for plugging-in behavior">
                  <span class="text" id="span_003571" smilref="Programming_Robots_with_ROS00012.smil#span_003571">While this sounds pretty simple, state machines can be used to control quite complex behaviors.</span>
                  <a data-type="xref" href="#ch13-plugs_state_machine" external="false" id="a_000182" smilref="Programming_Robots_with_ROS00012.smil#a_000182">Figure 13-1</a>
                  <span class="text" id="span_003572" smilref="Programming_Robots_with_ROS00012.smil#span_003572">shows the state machine for the plugging-in behavior of the PR2 robot. The robot can drive up to a socket, pick up its own charging cable, and plug it into the outlet autonomously. Obviously, there are many things that can go wrong; a state machine is a good tool to understand the task-level behavior of a system like this and to make sure that we have all of our bases covered.</span>
                </p>
                <p id="p_000838">
                  <span class="text" id="span_003573" smilref="Programming_Robots_with_ROS00012.smil#span_003573">Each ellipse or box in</span>
                  <a data-type="xref" href="#ch13-plugs_state_machine" external="false" id="a_000183" smilref="Programming_Robots_with_ROS00012.smil#a_000183">Figure 13-1</a>
                  <span class="text" id="span_003574" smilref="Programming_Robots_with_ROS00013.smil#span_003574">is a state, and the arrows are the transitions between them, labeled by the conditions under which they are followed. The boxes with a gray background are state machines in their own right (we'll discuss this shortly, but you can just think of them as states for now), while the boxes at the very bottom (</span>
                  <code xml:space="preserve" id="code_001175" smilref="Programming_Robots_with_ROS00013.smil#code_001175">preempted</code>
                  <span class="text" id="span_003575" smilref="Programming_Robots_with_ROS00013.smil#span_003575">,</span>
                  <code xml:space="preserve" id="code_001176" smilref="Programming_Robots_with_ROS00013.smil#code_001176">aborted</code>
                  <span class="text" id="span_003576" smilref="Programming_Robots_with_ROS00013.smil#span_003576">,</span>
                  <code xml:space="preserve" id="code_001177" smilref="Programming_Robots_with_ROS00013.smil#code_001177">plugged_in</code>
                  <span class="text" id="span_003577" smilref="Programming_Robots_with_ROS00013.smil#span_003577">, and</span>
                  <code xml:space="preserve" id="code_001178" smilref="Programming_Robots_with_ROS00013.smil#code_001178">unplugged</code>
                  <span class="text" id="span_003578" smilref="Programming_Robots_with_ROS00013.smil#span_003578">) are the outcomes of the whole state machine. When the</span>
                  <code xml:space="preserve" id="code_001179" smilref="Programming_Robots_with_ROS00013.smil#code_001179">DETECT_OUTLET</code>
                  <span class="text" id="span_003579" smilref="Programming_Robots_with_ROS00013.smil#span_003579">state ends, for example, it reports that it</span>
                  <code xml:space="preserve" id="code_001180" smilref="Programming_Robots_with_ROS00013.smil#code_001180">succeeded</code>
                  <span class="text" id="span_003580" smilref="Programming_Robots_with_ROS00013.smil#span_003580">,</span>
                  <code xml:space="preserve" id="code_001181" smilref="Programming_Robots_with_ROS00013.smil#code_001181">aborted</code>
                  <span class="text" id="span_003581" smilref="Programming_Robots_with_ROS00013.smil#span_003581">, or was</span>
                  <code xml:space="preserve" id="code_001182" smilref="Programming_Robots_with_ROS00013.smil#code_001182">preempted</code>
                  <span class="text" id="span_003582" smilref="Programming_Robots_with_ROS00013.smil#span_003582">. If it succeeded, then the system transitions to the</span>
                  <code xml:space="preserve" id="code_001183" smilref="Programming_Robots_with_ROS00013.smil#code_001183">FETCH_PLUG</code>
                  <span class="text" id="span_003583" smilref="Programming_Robots_with_ROS00013.smil#span_003583">state. If it aborted, the next state is</span>
                  <code xml:space="preserve" id="code_001184" smilref="Programming_Robots_with_ROS00013.smil#code_001184">FAIL_STILL_UNPLUGGED</code>
                  <span class="text" id="span_003584" smilref="Programming_Robots_with_ROS00013.smil#span_003584">. If it was preempted (i.e., something interrupted it unexpectedly), the whole system returns</span>
                  <code xml:space="preserve" id="code_001185" smilref="Programming_Robots_with_ROS00013.smil#code_001185">preempted</code>
                  <span class="text" id="span_003585" smilref="Programming_Robots_with_ROS00013.smil#span_003585">.</span>
                </p>
                <p id="p_000839">
                  <span class="text" id="span_003586" smilref="Programming_Robots_with_ROS00013.smil#span_003586">Notice that some states have a single transition condition (such as</span>
                  <code xml:space="preserve" id="code_001186" smilref="Programming_Robots_with_ROS00013.smil#code_001186">FAIL_ STILL_ UNPLUGGED</code>
                  <span class="text" id="span_003587" smilref="Programming_Robots_with_ROS00013.smil#span_003587">), while others have several. Typically, this will mean that the states with a single transition condition cannot fail and only do one thing.</span>
                </p>
                <figure id="figure_000063">
                  <h1 id="h1_000263" smilref="Programming_Robots_with_ROS00013.smil#h1_000263">Figure 13-1. State machine for the PR2 robot to plug into an electrical outlet, generated by the smach_viewer node</h1>
                  <div id="ch13-plugs_state_machine" class="figure">
                    <img src="images/prwr_1301.jpg" alt="plugs_state_machine" id="img_000117" />
                  </div>
                </figure>
                <p id="ch13-idp30825664" data-type="indexterm" data-startref="ix_13-patrol-asciidoc4">
                  <span class="text" id="span_003588" smilref="Programming_Robots_with_ROS00013.smil#span_003588">The states have meaningful names, such as</span>
                  <code xml:space="preserve" id="code_001187" smilref="Programming_Robots_with_ROS00013.smil#code_001187">DETECT_OUTLET</code>
                  <span class="text" id="span_003589" smilref="Programming_Robots_with_ROS00013.smil#span_003589">and</span>
                  <code xml:space="preserve" id="code_001188" smilref="Programming_Robots_with_ROS00013.smil#code_001188">PLUG_IN</code>
                  <span class="text" id="span_003590" smilref="Programming_Robots_with_ROS00013.smil#span_003590">, and so do the transition conditions (</span>
                  <code xml:space="preserve" id="code_001189" smilref="Programming_Robots_with_ROS00013.smil#code_001189">succeeded</code>
                  <span class="text" id="span_003591" smilref="Programming_Robots_with_ROS00013.smil#span_003591">,</span>
                  <code xml:space="preserve" id="code_001190" smilref="Programming_Robots_with_ROS00013.smil#code_001190">aborted</code>
                  <span class="text" id="span_003592" smilref="Programming_Robots_with_ROS00013.smil#span_003592">, etc.). The convention in ROS is to name states with</span>
                  <code xml:space="preserve" id="code_001191" smilref="Programming_Robots_with_ROS00013.smil#code_001191">ALL_CAPS</code>
                  <span class="text" id="span_003593" smilref="Programming_Robots_with_ROS00013.smil#span_003593">and transition conditions with all</span>
                  <code xml:space="preserve" id="code_001192" smilref="Programming_Robots_with_ROS00013.smil#code_001192">lowercase</code>
                  <span class="text" id="span_003594" smilref="Programming_Robots_with_ROS00013.smil#span_003594">. Let's look at how we can specify state machines like this in ROS.</span>
                </p>
                <section data-type="sect2" data-pdf-bookmark="State Machines in ROS" id="section_000135">
                  <h1 id="h1_000264" smilref="Programming_Robots_with_ROS00013.smil#h1_000264">State Machines in ROS</h1>
                  <div class="sect2" id="ch13-idp30827872">
                    <p data-type="indexterm" data-primary="state machines" data-secondary="in ROS" id="ch13-idp30829392">
                      <span class="text" id="span_003595" smilref="Programming_Robots_with_ROS00013.smil#span_003595">State machines in ROS are built using the</span>
                      <code xml:space="preserve" id="code_001193" smilref="Programming_Robots_with_ROS00013.smil#code_001193">smach</code>
                      <span class="text" id="span_003596" smilref="Programming_Robots_with_ROS00013.smil#span_003596">package and its ROS-specific extensions in</span>
                      <code xml:space="preserve" id="code_001194" smilref="Programming_Robots_with_ROS00013.smil#code_001194">smach_ros</code>
                      <span class="text" id="span_003597" smilref="Programming_Robots_with_ROS00013.smil#span_003597">.</span>
                      <code xml:space="preserve" id="code_001195" smilref="Programming_Robots_with_ROS00013.smil#code_001195">smach</code>
                      <span class="text" id="span_003598" smilref="Programming_Robots_with_ROS00013.smil#span_003598">contains a lot more than just state machines, but that's the part we're going to focus on for now. You should think about using</span>
                      <code xml:space="preserve" id="code_001196" smilref="Programming_Robots_with_ROS00013.smil#code_001196">smach</code>
                      <span class="text" id="span_003599" smilref="Programming_Robots_with_ROS00013.smil#span_003599">when you have a complex robot behavior that you can break up into a set of subbehaviors that happen in a fixed structure. Basically, if you can draw the behavior of your system using a diagram like</span>
                      <a data-type="xref" href="#ch13-plugs_state_machine" external="false" id="a_000184" smilref="Programming_Robots_with_ROS00013.smil#a_000184">Figure 13-1</a>
                      <span class="text" id="span_003600" smilref="Programming_Robots_with_ROS00013.smil#span_003600">, then it's probably a good candidate for</span>
                      <code xml:space="preserve" id="code_001197" smilref="Programming_Robots_with_ROS00013.smil#code_001197">smach</code>
                      <span class="text" id="span_003601" smilref="Programming_Robots_with_ROS00013.smil#span_003601">. However, if you need blazing-fast state transitions to control a low-level aspect of your robot, then</span>
                      <code xml:space="preserve" id="code_001198" smilref="Programming_Robots_with_ROS00013.smil#code_001198">smach</code>
                      <span class="text" id="span_003602" smilref="Programming_Robots_with_ROS00013.smil#span_003602">is not a good choice, mostly because it was written in Python. There is very little overhead in</span>
                      <code xml:space="preserve" id="code_001199" smilref="Programming_Robots_with_ROS00013.smil#code_001199">smach</code>
                      <span class="text" id="span_003603" smilref="Programming_Robots_with_ROS00013.smil#span_003603">, though and it's likely to be a good choice for most of the state machines you write.</span>
                    </p>
                    <p id="p_000840">
                      <span class="text" id="span_003604" smilref="Programming_Robots_with_ROS00013.smil#span_003604">So, now that we know what a state machine is, and what it's good for, let's look at how we define a simple state machine with</span>
                      <code xml:space="preserve" id="code_001200" smilref="Programming_Robots_with_ROS00013.smil#code_001200">smach</code>
                      <span class="text" id="span_003605" smilref="Programming_Robots_with_ROS00013.smil#span_003605">.</span>
                    </p>
                  </div>
                </section>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Defining State Machines with smach" id="section_000136">
              <h1 id="h1_000265" smilref="Programming_Robots_with_ROS00013.smil#h1_000265">Defining State Machines with smach</h1>
              <div class="sect1" id="ch13-idp30870592">
                <p data-type="indexterm" data-primary="smach" data-secondary="for defining state machines" id="ch13-ix_13-patrol-asciidoc5">
                  <span class="text" id="span_003606" smilref="Programming_Robots_with_ROS00013.smil#span_003606">State machines in</span>
                  <code xml:space="preserve" id="code_001201" smilref="Programming_Robots_with_ROS00013.smil#code_001201">smach</code>
                  <span class="text" id="span_003607" smilref="Programming_Robots_with_ROS00013.smil#span_003607">are defined procedurally, using Python code, rather than through some sort of definition file. This allows for a lot of flexibility in the way that state machines are put together, as we'll see later in this chapter. First, though, we're going to look at a toy example of a very simple state machine, to get you used to some of the basic concepts used by</span>
                  <code id="ch13-ix_13-patrol-asciidoc8" xml:space="preserve" smilref="Programming_Robots_with_ROS00013.smil#ch13-ix_13-patrol-asciidoc8">smach</code>
                  <span class="text" id="span_003608" smilref="Programming_Robots_with_ROS00013.smil#span_003608">.</span>
                </p>
                <p id="p_000841">
                  <a data-type="xref" href="#ch13-simple_fsm" external="false" id="a_000185" smilref="Programming_Robots_with_ROS00013.smil#a_000185">Example 13-2</a>
                  <span class="text" id="span_003609" smilref="Programming_Robots_with_ROS00013.smil#span_003609">shows the code to define and run a very simple two-state state machine in</span>
                  <code xml:space="preserve" id="code_001202" smilref="Programming_Robots_with_ROS00013.smil#code_001202">smach</code>
                  <span class="text" id="span_003610" smilref="Programming_Robots_with_ROS00013.smil#span_003610">. State</span>
                  <code xml:space="preserve" id="code_001203" smilref="Programming_Robots_with_ROS00013.smil#code_001203">ONE</code>
                  <span class="text" id="span_003611" smilref="Programming_Robots_with_ROS00013.smil#span_003611">prints the word "one" and then transitions to state</span>
                  <code xml:space="preserve" id="code_001204" smilref="Programming_Robots_with_ROS00013.smil#code_001204">TWO</code>
                  <span class="text" id="span_003612" smilref="Programming_Robots_with_ROS00013.smil#span_003612">. State</span>
                  <code xml:space="preserve" id="code_001205" smilref="Programming_Robots_with_ROS00013.smil#code_001205">TWO</code>
                  <span class="text" id="span_003613" smilref="Programming_Robots_with_ROS00013.smil#span_003613">prints "two" and transitions to state</span>
                  <code xml:space="preserve" id="code_001206" smilref="Programming_Robots_with_ROS00013.smil#code_001206">ONE</code>
                  <span class="text" id="span_003614" smilref="Programming_Robots_with_ROS00013.smil#span_003614">. Not very exciting, we admit, but it's got all of the pieces that we want to show you.</span>
                </p>
                <h1 id="h1_000266" smilref="Programming_Robots_with_ROS00013.smil#h1_000266">Example 13-2. simple_fsm.py</h1>
                <div id="ch13-simple_fsm" data-type="example">
                  <p id="p_000842">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001207" smilref="Programming_Robots_with_ROS00013.smil#code_001207">#!/usr/bin/env python

import rospy
from smach import State,StateMachine

from time import sleep


class One(State):
    def __init__(self):
        State.__init__(self, outcomes=['success'])

    def execute(self, userdata):
        print 'one'
        sleep(1)
        return 'success'

class Two(State):
    def __init__(self):
        State.__init__(self, outcomes=['success'])

    def execute(self, userdata):
        print 'two'
        sleep(1)
        return 'success'


if __name__ == '__main__':
    sm = StateMachine(outcomes=['success'])
    with sm:
        StateMachine.add('ONE', One(), transitions={'success':'TWO'})
        StateMachine.add('TWO', Two(), transitions={'success':'ONE'})

    sm.execute()</code>
                  </p>
                </div>
                <p id="p_000843">
                  <span class="text" id="span_003615" smilref="Programming_Robots_with_ROS00013.smil#span_003615">The first thing that we need to do is to import the stuff we'll need from</span>
                  <code xml:space="preserve" id="code_001208" smilref="Programming_Robots_with_ROS00013.smil#code_001208">smach</code>
                  <span class="text" id="span_003616" smilref="Programming_Robots_with_ROS00013.smil#span_003616">. In this simple example, we're going to use the classes</span>
                  <code xml:space="preserve" id="code_001209" smilref="Programming_Robots_with_ROS00013.smil#code_001209">State</code>
                  <span class="text" id="span_003617" smilref="Programming_Robots_with_ROS00013.smil#span_003617">and</span>
                  <code xml:space="preserve" id="code_001210" smilref="Programming_Robots_with_ROS00013.smil#code_001210">StateMachine</code>
                  <span class="text" id="span_003618" smilref="Programming_Robots_with_ROS00013.smil#span_003618">:</span>
                </p>
                <p id="p_000844">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001211" smilref="Programming_Robots_with_ROS00013.smil#code_001211">from smach import State,StateMachine</code>
                </p>
                <p id="p_000845">
                  <span class="text" id="span_003619" smilref="Programming_Robots_with_ROS00013.smil#span_003619">In addition to this, you're going to need to add</span>
                  <code xml:space="preserve" id="code_001212" smilref="Programming_Robots_with_ROS00013.smil#code_001212">smach</code>
                  <span class="text" id="span_003620" smilref="Programming_Robots_with_ROS00013.smil#span_003620">as a dependency in your</span>
                  <em id="em_000345" smilref="Programming_Robots_with_ROS00013.smil#em_000345">package.xml</em>
                  <span class="text" id="span_003621" smilref="Programming_Robots_with_ROS00013.smil#span_003621">file, to make sure ROS knows where to find things.</span>
                </p>
                <p data-type="indexterm" data-primary="State class" id="ch13-idp31473200">
                  <span class="text" id="span_003622" smilref="Programming_Robots_with_ROS00013.smil#span_003622">Next, we define some states for our state machine. States in</span>
                  <code xml:space="preserve" id="code_001213" smilref="Programming_Robots_with_ROS00013.smil#code_001213">smach</code>
                  <span class="text" id="span_003623" smilref="Programming_Robots_with_ROS00013.smil#span_003623">are instances of Python classes that inherit from the</span>
                  <code id="ch13-idp31473840" xml:space="preserve" smilref="Programming_Robots_with_ROS00013.smil#ch13-idp31473840">State</code>
                  <span class="text" id="span_003624" smilref="Programming_Robots_with_ROS00013.smil#span_003624">class:</span>
                </p>
                <p id="p_000846">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001214" smilref="Programming_Robots_with_ROS00013.smil#code_001214">class One(State):
    def __init__(self):
        State.__init__(self, outcomes=['success'])

    def execute(self, userdata):
        print 'one'
        sleep(1)
        return 'success'</code>
                </p>
                <p id="p_000847">
                  <span class="text" id="span_003625" smilref="Programming_Robots_with_ROS00013.smil#span_003625">This code defines a state class for our state machine. It inherits from the</span>
                  <code xml:space="preserve" id="code_001215" smilref="Programming_Robots_with_ROS00013.smil#code_001215">smach</code>
                  <code xml:space="preserve" id="code_001216" smilref="Programming_Robots_with_ROS00013.smil#code_001216">State</code>
                  <span class="text" id="span_003626" smilref="Programming_Robots_with_ROS00013.smil#span_003626">class. In our class constructor, we explicitly call the parent class constructor, passing in a list of all the possible outcomes from our state. Outcomes are the labels on the arrows in</span>
                  <a data-type="xref" href="#ch13-plugs_state_machine" external="false" id="a_000186" smilref="Programming_Robots_with_ROS00013.smil#a_000186">Figure 13-1</a>
                  <span class="text" id="span_003627" smilref="Programming_Robots_with_ROS00013.smil#span_003627">and are simple strings in our code. They should mean something in the context of the behavior that the state implements. In this case, there is only a single outcome,</span>
                  <code xml:space="preserve" id="code_001217" smilref="Programming_Robots_with_ROS00013.smil#code_001217">success</code>
                  <span class="text" id="span_003628" smilref="Programming_Robots_with_ROS00013.smil#span_003628">.</span>
                </p>
                <p id="p_000848">
                  <span class="text" id="span_003629" smilref="Programming_Robots_with_ROS00013.smil#span_003629">Each state also needs to implement an</span>
                  <code xml:space="preserve" id="code_001218" smilref="Programming_Robots_with_ROS00013.smil#code_001218">execute(self, userdata)</code>
                  <span class="text" id="span_003630" smilref="Programming_Robots_with_ROS00013.smil#span_003630">function, which is where all the work of the state happens. When the state machine transitions to a particular state, that state's</span>
                  <code xml:space="preserve" id="code_001219" smilref="Programming_Robots_with_ROS00013.smil#code_001219">execute()</code>
                  <span class="text" id="span_003631" smilref="Programming_Robots_with_ROS00013.smil#span_003631">function is called. The function takes a</span>
                  <code xml:space="preserve" id="code_001220" smilref="Programming_Robots_with_ROS00013.smil#code_001220">userdata</code>
                  <span class="text" id="span_003632" smilref="Programming_Robots_with_ROS00013.smil#span_003632">argument, which we're going to ignore for now, that allows data to be passed in on the fly from the previous state. The function</span>
                  <em id="em_000346" smilref="Programming_Robots_with_ROS00013.smil#em_000346">must</em>
                  <span class="text" id="span_003633" smilref="Programming_Robots_with_ROS00013.smil#span_003633">return one of the outcomes listed in the base class constructor call. Since we only have one outcome,</span>
                  <code xml:space="preserve" id="code_001221" smilref="Programming_Robots_with_ROS00013.smil#code_001221">success</code>
                  <span class="text" id="span_003634" smilref="Programming_Robots_with_ROS00013.smil#span_003634">, that's what we return.</span>
                </p>
                <p id="p_000849" smilref="Programming_Robots_with_ROS00013.smil#p_000849">After defining another (very similar) state class, it's time to actually construct the state machine itself:</p>
                <p id="p_000850">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001222" smilref="Programming_Robots_with_ROS00013.smil#code_001222">    sm = StateMachine(outcomes=['success'])
    with sm:
        StateMachine.add('ONE', One(), transitions={'success':'TWO'})
        StateMachine.add('TWO', Two(), transitions={'success':'ONE'})

    sm.execute()</code>
                </p>
                <p id="p_000851">
                  <span class="text" id="span_003635" smilref="Programming_Robots_with_ROS00013.smil#span_003635">We start by creating an instance of a</span>
                  <code xml:space="preserve" id="code_001223" smilref="Programming_Robots_with_ROS00013.smil#code_001223">StateMachine</code>
                  <span class="text" id="span_003636" smilref="Programming_Robots_with_ROS00013.smil#span_003636">called</span>
                  <code xml:space="preserve" id="code_001224" smilref="Programming_Robots_with_ROS00013.smil#code_001224">sm</code>
                  <span class="text" id="span_003637" smilref="Programming_Robots_with_ROS00013.smil#span_003637">, passing it a list of possible outcomes. These are different from the lists of outcomes of the states we're going to build our state machine out of, although they could have the same names. Since</span>
                  <code xml:space="preserve" id="code_001225" smilref="Programming_Robots_with_ROS00013.smil#code_001225">smach</code>
                  <span class="text" id="span_003638" smilref="Programming_Robots_with_ROS00013.smil#span_003638">allows for hierarchical state machines, we can use</span>
                  <code xml:space="preserve" id="code_001226" smilref="Programming_Robots_with_ROS00013.smil#code_001226">sm</code>
                  <span class="text" id="span_003639" smilref="Programming_Robots_with_ROS00013.smil#span_003639">as the state in</span>
                  <em id="em_000347" smilref="Programming_Robots_with_ROS00013.smil#em_000347">another</em>
                  <span class="text" id="span_003640" smilref="Programming_Robots_with_ROS00013.smil#span_003640">state machine. This is what happened in the gray boxes in</span>
                  <a data-type="xref" href="#ch13-plugs_state_machine" external="false" id="a_000187" smilref="Programming_Robots_with_ROS00013.smil#a_000187">Figure 13-1</a>
                  <span class="text" id="span_003641" smilref="Programming_Robots_with_ROS00013.smil#span_003641">.</span>
                </p>
                <p id="p_000852">
                  <span class="text" id="span_003642" smilref="Programming_Robots_with_ROS00013.smil#span_003642">Once we have our (empty) state machine, we can open it with a</span>
                  <code xml:space="preserve" id="code_001227" smilref="Programming_Robots_with_ROS00013.smil#code_001227">with</code>
                  <span class="text" id="span_003643" smilref="Programming_Robots_with_ROS00013.smil#span_003643">statement, and start to populate it with states. Each state is added with the</span>
                  <code xml:space="preserve" id="code_001228" smilref="Programming_Robots_with_ROS00013.smil#code_001228">add()</code>
                  <span class="text" id="span_003644" smilref="Programming_Robots_with_ROS00013.smil#span_003644">function and has a name, an instance of the state, and a dictionary of transitions. The first call to</span>
                  <code xml:space="preserve" id="code_001229" smilref="Programming_Robots_with_ROS00013.smil#code_001229">add()</code>
                  <span class="text" id="span_003645" smilref="Programming_Robots_with_ROS00013.smil#span_003645">adds a state called</span>
                  <code xml:space="preserve" id="code_001230" smilref="Programming_Robots_with_ROS00013.smil#code_001230">ONE</code>
                  <span class="text" id="span_003646" smilref="Programming_Robots_with_ROS00013.smil#span_003646">, with an instance of the class</span>
                  <code xml:space="preserve" id="code_001231" smilref="Programming_Robots_with_ROS00013.smil#code_001231">One</code>
                  <span class="text" id="span_003647" smilref="Programming_Robots_with_ROS00013.smil#span_003647">. On an outcome of</span>
                  <code xml:space="preserve" id="code_001232" smilref="Programming_Robots_with_ROS00013.smil#code_001232">success</code>
                  <span class="text" id="span_003648" smilref="Programming_Robots_with_ROS00013.smil#span_003648">, it transitions to a state called</span>
                  <code xml:space="preserve" id="code_001233" smilref="Programming_Robots_with_ROS00013.smil#code_001233">TWO</code>
                  <span class="text" id="span_003649" smilref="Programming_Robots_with_ROS00013.smil#span_003649">. Similarly,</span>
                  <code xml:space="preserve" id="code_001234" smilref="Programming_Robots_with_ROS00013.smil#code_001234">TWO</code>
                  <span class="text" id="span_003650" smilref="Programming_Robots_with_ROS00013.smil#span_003650">is implemented with an instance of</span>
                  <code xml:space="preserve" id="code_001235" smilref="Programming_Robots_with_ROS00013.smil#code_001235">Two</code>
                  <span class="text" id="span_003651" smilref="Programming_Robots_with_ROS00013.smil#span_003651">and transitions back to</span>
                  <code xml:space="preserve" id="code_001236" smilref="Programming_Robots_with_ROS00013.smil#code_001236">ONE</code>
                  <span class="text" id="span_003652" smilref="Programming_Robots_with_ROS00013.smil#span_003652">on an outcome of</span>
                  <code xml:space="preserve" id="code_001237" smilref="Programming_Robots_with_ROS00013.smil#code_001237">success</code>
                  <span class="text" id="span_003653" smilref="Programming_Robots_with_ROS00013.smil#span_003653">.</span>
                </p>
                <p id="p_000853">
                  <span class="text" id="span_003654" smilref="Programming_Robots_with_ROS00013.smil#span_003654">What this simple state machine does, then, is just repeatedly print "one" and "two" to the screen. Let's test it to make sure that it's doing the right thing. When we run the code, the</span>
                  <code xml:space="preserve" id="code_001238" smilref="Programming_Robots_with_ROS00013.smil#code_001238">sm.execute()</code>
                  <span class="text" id="span_003655" smilref="Programming_Robots_with_ROS00013.smil#span_003655">call is what starts things rolling:</span>
                </p>
                <p id="p_000854">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001239"><span class="text" id="span_003656" smilref="Programming_Robots_with_ROS00013.smil#span_003656">
user@hostname$ </span><strong id="strong_000147" smilref="Programming_Robots_with_ROS00013.smil#strong_000147">rosrun patrol simple_fsm.py</strong><span class="text" id="span_003657" smilref="Programming_Robots_with_ROS00013.smil#span_003657">
[ DEBUG ] : Adding state (ONE, &lt;__main__.One object at 0x7fa64a818190&gt;, \
  {'success': 'TWO'})
[ DEBUG ] : Adding state 'ONE' to the state machine.
[ DEBUG ] : State 'ONE' is missing transitions: {}
[ DEBUG ] : TRANSITIONS FOR ONE: {'success': 'TWO'}
[ DEBUG ] : Adding state (TWO, &lt;__main__.Two object at 0x7fa64a818210&gt;, \
  {'success': 'ONE'})
[ DEBUG ] : Adding state 'TWO' to the state machine.
[ DEBUG ] : State 'TWO' is missing transitions: {}
[ DEBUG ] : TRANSITIONS FOR TWO: {'success': 'ONE'}
[  INFO ] : State machine starting in initial state 'ONE' with userdata:
	[]
one
[  INFO ] : State machine transitioning 'ONE':'success'--&gt;'TWO'
two
[  INFO ] : State machine transitioning 'TWO':'success'--&gt;'ONE'
one
[  INFO ] : State machine transitioning 'ONE':'success'--&gt;'TWO'
two
[  INFO ] : State machine transitioning 'TWO':'success'--&gt;'ONE'
one
[  INFO ] : State machine transitioning 'ONE':'success'--&gt;'TWO'
two
[  INFO ] : State machine transitioning 'TWO':'success'--&gt;'ONE'
one
[  INFO ] : State machine transitioning 'ONE':'success'--&gt;'TWO'
two
[  INFO ] : State machine transitioning 'TWO':'success'--&gt;'ONE'
one
</span></code>
                </p>
                <p class="keep-together" data-type="indexterm" data-primary="debugging" data-secondary="smach and" id="ch13-idp31626224">
                  <code xml:space="preserve" id="code_001240" smilref="Programming_Robots_with_ROS00013.smil#code_001240">smach</code>
                  <span class="text" id="span_003658" smilref="Programming_Robots_with_ROS00013.smil#span_003658">provides a lot of debugging information using the logging system. If you look at the</span>
                  <code xml:space="preserve" id="code_001241" smilref="Programming_Robots_with_ROS00013.smil#code_001241">DEBUG</code>
                  <span class="text" id="span_003659" smilref="Programming_Robots_with_ROS00013.smil#span_003659">-level messages, you can see that we've successfully added two states and the correct transitions.</span>
                  <code xml:space="preserve" id="code_001242" smilref="Programming_Robots_with_ROS00013.smil#code_001242">smach</code>
                  <span class="text" id="span_003660" smilref="Programming_Robots_with_ROS00013.smil#span_003660">does a static check on the state machine once it</span>
                  <span class="keep-together" id="span_003661" smilref="Programming_Robots_with_ROS00013.smil#span_003661">is assembled, to make</span>
                  <span class="text" id="span_003662" smilref="Programming_Robots_with_ROS00013.smil#span_003662">sure that everything is wired up legally and that all outcomes</span>
                  <span class="keep-together" id="span_003663" smilref="Programming_Robots_with_ROS00013.smil#span_003663">are connected to</span>
                  <span class="text" id="span_003664" smilref="Programming_Robots_with_ROS00013.smil#span_003664">states. The state machine then starts to run, and we can see the output ("one" and "two") interspersed with informational messages about the state transitions.</span>
                </p>
                <p id="ch13-idp31631856" data-type="indexterm" data-startref="ix_13-patrol-asciidoc8">
                  <span class="text" id="span_003665" smilref="Programming_Robots_with_ROS00013.smil#span_003665">Congratulations! You've run your first</span>
                  <code xml:space="preserve" id="code_001243" smilref="Programming_Robots_with_ROS00013.smil#code_001243">smach</code>
                  <span class="text" id="span_003666" smilref="Programming_Robots_with_ROS00013.smil#span_003666">state machine. Now, let's look at something slightly more relevant to moving a robot around the world.</span>
                </p>
                <section data-type="sect2" data-pdf-bookmark="A Slightly More Relevant Example" id="section_000137">
                  <h1 id="h1_000267" smilref="Programming_Robots_with_ROS00013.smil#h1_000267">A Slightly More Relevant Example</h1>
                  <div class="sect2" id="ch13-idp31632688">
                    <p id="ch13-ix_13-patrol-asciidoc9" data-type="indexterm" data-primary="smach" data-secondary="for advanced state machine">
                      <a data-type="xref" href="#ch13-shapes_fsm" external="false" id="a_000188" smilref="Programming_Robots_with_ROS00013.smil#a_000188">Example 13-3</a>
                      <span class="text" id="span_003667" smilref="Programming_Robots_with_ROS00013.smil#span_003667">shows a more advanced use of</span>
                      <code xml:space="preserve" id="code_001244" smilref="Programming_Robots_with_ROS00013.smil#code_001244">smach</code>
                      <span class="text" id="span_003668" smilref="Programming_Robots_with_ROS00013.smil#span_003668">. The idea here is that we have two things that our robot can do: drive in a straight line and turn in place. We're going to implement each of these behaviors in a separate</span>
                      <code xml:space="preserve" id="code_001245" smilref="Programming_Robots_with_ROS00013.smil#code_001245">smach</code>
                      <span class="text" id="span_003669" smilref="Programming_Robots_with_ROS00013.smil#span_003669">state and then connect them together to get the robot to drive along polygonal paths.</span>
                    </p>
                    <h1 id="h1_000268" smilref="Programming_Robots_with_ROS00013.smil#h1_000268">Example 13-3. shapes.py</h1>
                    <div id="ch13-shapes_fsm" data-type="example">
                      <p id="p_000855">
                        <code class="preserve-whitespace" xml:space="preserve" id="code_001246" smilref="Programming_Robots_with_ROS00013.smil#code_001246">#!/usr/bin/env python

import rospy
from smach import State,StateMachine

from time import sleep


class Drive(State):
    def __init__(self, distance):
        State.__init__(self, outcomes=['success'])
        self.distance = distance

    def execute(self, userdata):
        print 'Driving', self.distance
        sleep(1)
        return 'success'

class Turn(State):
    def __init__(self, angle):
        State.__init__(self, outcomes=['success'])
        self.angle = angle

    def execute(self, userdata):
        print 'Turning', self.angle
        sleep(1)
        return 'success'


if __name__ == '__main__':
    triangle = StateMachine(outcomes=['success'])
    with triangle:
        StateMachine.add('SIDE1', Drive(1), transitions={'success':'TURN1'})
        StateMachine.add('TURN1', Turn(120), transitions={'success':'SIDE2'})
        StateMachine.add('SIDE2', Drive(1), transitions={'success':'TURN2'})
        StateMachine.add('TURN2', Turn(120), transitions={'success':'SIDE3'})
        StateMachine.add('SIDE3', Drive(1), transitions={'success':'success'})

    square = StateMachine(outcomes=['success'])
    with square:
        StateMachine.add('SIDE1', Drive(1), transitions={'success':'TURN1'})
        StateMachine.add('TURN1', Turn(90), transitions={'success':'SIDE2'})
        StateMachine.add('SIDE2', Drive(1), transitions={'success':'TURN2'})
        StateMachine.add('TURN2', Turn(90), transitions={'success':'SIDE3'})
        StateMachine.add('SIDE3', Drive(1), transitions={'success':'TURN3'})
        StateMachine.add('TURN3', Turn(90), transitions={'success':'SIDE4'})
        StateMachine.add('SIDE4', Drive(1), transitions={'success':'success'})

    shapes = StateMachine(outcomes=['success'])
    with shapes:
        StateMachine.add('TRIANGLE', triangle, transitions={'success':'SQUARE'})
        StateMachine.add('SQUARE', square, transitions={'success':'success'})

    shapes.execute()</code>
                      </p>
                    </div>
                    <p id="p_000856">
                      <span class="text" id="span_003670" smilref="Programming_Robots_with_ROS00013.smil#span_003670">We start as before, by including the bits of</span>
                      <code xml:space="preserve" id="code_001247" smilref="Programming_Robots_with_ROS00013.smil#code_001247">smach</code>
                      <span class="text" id="span_003671" smilref="Programming_Robots_with_ROS00013.smil#span_003671">we need and defining our states. For this example, we have two classes corresponding to states,</span>
                      <code xml:space="preserve" id="code_001248" smilref="Programming_Robots_with_ROS00013.smil#code_001248">Drive</code>
                      <span class="text" id="span_003672" smilref="Programming_Robots_with_ROS00013.smil#span_003672">and</span>
                      <code xml:space="preserve" id="code_001249" smilref="Programming_Robots_with_ROS00013.smil#code_001249">Turn</code>
                      <span class="text" id="span_003673" smilref="Programming_Robots_with_ROS00013.smil#span_003673">. The constructors for these classes each take a single argument corresponding to the distance to drive (in meters) and the angle to turn through (in degrees), respectively. Both only have a single outcome,</span>
                      <code xml:space="preserve" id="code_001250" smilref="Programming_Robots_with_ROS00013.smil#code_001250">success</code>
                      <span class="text" id="span_003674" smilref="Programming_Robots_with_ROS00013.smil#span_003674">. If this code actually controlled a real robot, the</span>
                      <code xml:space="preserve" id="code_001251" smilref="Programming_Robots_with_ROS00013.smil#code_001251">execute()</code>
                      <span class="text" id="span_003675" smilref="Programming_Robots_with_ROS00013.smil#span_003675">function would have code in it to move the robot (and probably to verify that things had gone as expected).</span>
                    </p>
                    <p id="p_000857" smilref="Programming_Robots_with_ROS00013.smil#p_000857">Things get a bit more interesting when we start to define the state machines. We can define a triangular path by driving, turning, driving, turning, and driving again. This is similar to the original example:</p>
                    <p id="p_000858">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_001252" smilref="Programming_Robots_with_ROS00013.smil#code_001252">    triangle = StateMachine(outcomes=['success'])
    with triangle:
        StateMachine.add('SIDE1', Drive(1), transitions={'success':'TURN1'})
        StateMachine.add('TURN1', Turn(120), transitions={'success':'SIDE2'})
        StateMachine.add('SIDE2', Drive(1), transitions={'success':'TURN2'})
        StateMachine.add('TURN2', Turn(120), transitions={'success':'SIDE3'})
        StateMachine.add('SIDE3', Drive(1), transitions={'success':'success'})</code>
                    </p>
                    <p id="p_000859" smilref="Programming_Robots_with_ROS00013.smil#p_000859">In the code, we also define a state machine that drives the robot in a square. Then, we can chain these two state machines together.</p>
                    <p id="p_000860">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_001253" smilref="Programming_Robots_with_ROS00013.smil#code_001253">    shapes = StateMachine(outcomes=['success'])
    with shapes:
        StateMachine.add('TRIANGLE', triangle, transitions={'success':'SQUARE'})
        StateMachine.add('SQUARE', square, transitions={'success':'success'})

    shapes.execute()</code>
                    </p>
                    <p class="keep-together" id="p_000861">
                      <span class="text" id="span_003676" smilref="Programming_Robots_with_ROS00013.smil#span_003676">The third state machine,</span>
                      <code xml:space="preserve" id="code_001254" smilref="Programming_Robots_with_ROS00013.smil#code_001254">shapes</code>
                      <span class="text" id="span_003677" smilref="Programming_Robots_with_ROS00013.smil#span_003677">, will first run the</span>
                      <code xml:space="preserve" id="code_001255" smilref="Programming_Robots_with_ROS00013.smil#code_001255">triangle</code>
                      <span class="text" id="span_003678" smilref="Programming_Robots_with_ROS00013.smil#span_003678">state machine, and then the</span>
                      <code xml:space="preserve" id="code_001256" smilref="Programming_Robots_with_ROS00013.smil#code_001256">square</code>
                      <span class="text" id="span_003679" smilref="Programming_Robots_with_ROS00013.smil#span_003679">one. This is an example of how we can build hierarchical state machines with</span>
                      <code xml:space="preserve" id="code_001257" smilref="Programming_Robots_with_ROS00013.smil#code_001257">smach</code>
                      <span class="text" id="span_003680" smilref="Programming_Robots_with_ROS00013.smil#span_003680">. Notice that the states have the same names in both</span>
                      <code xml:space="preserve" id="code_001258" smilref="Programming_Robots_with_ROS00013.smil#code_001258">triangle</code>
                      <span class="text" id="span_003681" smilref="Programming_Robots_with_ROS00013.smil#span_003681">and</span>
                      <span class="keep-together" id="span_003682">
                        <code xml:space="preserve" id="code_001259" smilref="Programming_Robots_with_ROS00013.smil#code_001259">square</code>
                        <span class="text" id="span_003683" smilref="Programming_Robots_with_ROS00013.smil#span_003683">. This is</span>
                      </span>
                      <span class="text" id="span_003684" smilref="Programming_Robots_with_ROS00013.smil#span_003684">fine, since the states are owned by different machines, and there's no ambiguity.</span>
                    </p>
                    <p id="p_000862" smilref="Programming_Robots_with_ROS00013.smil#p_000862">We can run this code to verify that it works as expected:</p>
                    <p id="p_000863">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_001260"><span class="text" id="span_003685" smilref="Programming_Robots_with_ROS00013.smil#span_003685">
user@hostname$ </span><strong id="strong_000148" smilref="Programming_Robots_with_ROS00013.smil#strong_000148">rosrun patrol shapes.py</strong><span class="text" id="span_003686" smilref="Programming_Robots_with_ROS00013.smil#span_003686">

...

[  INFO ] : State machine starting in initial state 'TRIANGLE' with userdata:
	[]
[  INFO ] : State machine starting in initial state 'SIDE1' with userdata:
	[]
Driving 1
[  INFO ] : State machine transitioning 'SIDE1':'success'--&gt;'TURN1'
Turning 120
[  INFO ] : State machine transitioning 'TURN1':'success'--&gt;'SIDE2'
Driving 1
[  INFO ] : State machine transitioning 'SIDE2':'success'--&gt;'TURN2'
Turning 120
[  INFO ] : State machine transitioning 'TURN2':'success'--&gt;'SIDE3'
Driving 1
[  INFO ] : State machine terminating 'SIDE3':'success':'success'
[  INFO ] : State machine transitioning 'TRIANGLE':'success'--&gt;'SQUARE'
[  INFO ] : State machine starting in initial state 'SIDE1' with userdata:
	[]
Driving 1
[  INFO ] : State machine transitioning 'SIDE1':'success'--&gt;'TURN1'
Turning 90
[  INFO ] : State machine transitioning 'TURN1':'success'--&gt;'SIDE2'
Driving 1
[  INFO ] : State machine transitioning 'SIDE2':'success'--&gt;'TURN2'
Turning 90
[  INFO ] : State machine transitioning 'TURN2':'success'--&gt;'SIDE3'
Driving 1
[  INFO ] : State machine transitioning 'SIDE3':'success'--&gt;'TURN3'
Turning 90
[  INFO ] : State machine transitioning 'TURN3':'success'--&gt;'SIDE4'
Driving 1
[  INFO ] : State machine terminating 'SIDE4':'success':'success'
[  INFO ] : State machine terminating 'SQUARE':'success':'success'
</span></code>
                    </p>
                    <p id="ch13-idp32513008" data-type="indexterm" data-startref="ix_13-patrol-asciidoc9" smilref="Programming_Robots_with_ROS00013.smil#ch13-idp32513008">Note that the state machine construction messages have been removed to save space.</p>
                  </div>
                </section>
                <section data-type="sect2" data-pdf-bookmark="Defining State Machines Procedurally" id="section_000138">
                  <h1 id="h1_000269" smilref="Programming_Robots_with_ROS00013.smil#h1_000269">Defining State Machines Procedurally</h1>
                  <div class="sect2" id="ch13-idp31633280">
                    <p id="ch13-ix_13-patrol-asciidoc11" data-type="indexterm" data-primary="state machines" data-secondary="defining procedurally">
                      <span class="text" id="span_003687" smilref="Programming_Robots_with_ROS00013.smil#span_003687">While the previous example worked as expected, the way in which we constructed the state machines was a bit clunky, listing each move in the polygon explicitly. Since we're defining the state machines procedurally, we can do better, as you can see in</span>
                      <a data-type="xref" href="#ch13-shapes2_fsm" external="false" id="a_000189" smilref="Programming_Robots_with_ROS00013.smil#a_000189">Example 13-4</a>
                      <span class="text" id="span_003688" smilref="Programming_Robots_with_ROS00013.smil#span_003688">.</span>
                    </p>
                    <h1 id="h1_000270" smilref="Programming_Robots_with_ROS00013.smil#h1_000270">Example 13-4. shapes2.py</h1>
                    <div id="ch13-shapes2_fsm" data-type="example">
                      <p id="p_000864">
                        <code class="preserve-whitespace" xml:space="preserve" id="code_001261" smilref="Programming_Robots_with_ROS00013.smil#code_001261">#!/usr/bin/env python

import rospy
from smach import State,StateMachine

from time import sleep


class Drive(State):
    def __init__(self, distance):
        State.__init__(self, outcomes=['success'])
        self.distance = distance

    def execute(self, userdata):
        print 'Driving', self.distance
        sleep(1)
        return 'success'

class Turn(State):
    def __init__(self, angle):
        State.__init__(self, outcomes=['success'])
        self.angle = angle

    def execute(self, userdata):
        print 'Turning', self.angle
        sleep(1)
        return 'success'

def polygon(sides):
    polygon = StateMachine(outcomes=['success'])
    with polygon:
        # Add all but the final side
        for i in xrange(sides - 1):
            StateMachine.add('SIDE_{0}'.format(i + 1),
                             Drive(1),
                             transitions={'success':'TURN_{0}'.format(i + 1)})

        # Add all the turns
        for i in xrange(sides - 1):
            StateMachine.add('TURN_{0}'.format(i + 1),
                             Turn(360.0 / sides),
                             transitions={'success':'SIDE_{0}'.format(i + 2)})

        # Add the final side
        StateMachine.add('SIDE_{0}'.format(sides),
                         Drive(1),
                         transitions={'success':'success'})

    return polygon


if __name__ == '__main__':
    triangle = polygon(3)
    square = polygon(4)

    shapes = StateMachine(outcomes=['success'])
    with shapes:
        StateMachine.add('TRIANGLE', triangle, transitions={'success':'SQUARE'})
        StateMachine.add('SQUARE', square, transitions={'success':'success'})

    shapes.execute()</code>
                      </p>
                    </div>
                    <p id="p_000865" smilref="Programming_Robots_with_ROS00013.smil#p_000865">The main improvement here is that we define a function that, given the number of sides in a polygon, will define a state machine to draw it:</p>
                    <p id="p_000866">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_001262" smilref="Programming_Robots_with_ROS00013.smil#code_001262">def polygon(sides):
    polygon = StateMachine(outcomes=['success'])
    with polygon:
        # Add all but the final side
        for i in xrange(sides - 1):
            StateMachine.add('SIDE_{0}'.format(i + 1),
                             Drive(1),
                             transitions={'success':'TURN_{0}'.format(i + 1)})

        # Add all the turns
        for i in xrange(sides - 1):
            StateMachine.add('TURN_{0}'.format(i + 1),
                             Turn(360.0 / sides),
                             transitions={'success':'SIDE_{0}'.format(i + 2)})

        # Add the final side
        StateMachine.add('SIDE_{0}'.format(sides),
                         Drive(1),
                         transitions={'success':'success'})

    return polygon</code>
                    </p>
                    <p id="p_000867">
                      <span class="text" id="span_003689" smilref="Programming_Robots_with_ROS00013.smil#span_003689">This function creates a</span>
                      <code xml:space="preserve" id="code_001263" smilref="Programming_Robots_with_ROS00013.smil#code_001263">StateMachine</code>
                      <span class="text" id="span_003690" smilref="Programming_Robots_with_ROS00013.smil#span_003690">instance, then adds the states. First it adds all but the last movement, then all of the turns, and finally it adds the last movement. This last movement is special, since it's the last one in the state machine. The state names are generated procedurally, as are the transition targets. We added all of the driving states first and then all the turning states to emphasize that we don't need to add states in any particular order, as long as they are all wired up correctly.</span>
                    </p>
                    <p id="p_000868">
                      <span class="text" id="span_003691" smilref="Programming_Robots_with_ROS00013.smil#span_003691">The addition of the</span>
                      <code xml:space="preserve" id="code_001264" smilref="Programming_Robots_with_ROS00013.smil#code_001264">polygon()</code>
                      <span class="text" id="span_003692" smilref="Programming_Robots_with_ROS00013.smil#span_003692">function simplifies the creation of the</span>
                      <code xml:space="preserve" id="code_001265" smilref="Programming_Robots_with_ROS00013.smil#code_001265">triangle</code>
                      <span class="text" id="span_003693" smilref="Programming_Robots_with_ROS00013.smil#span_003693">and</span>
                      <code xml:space="preserve" id="code_001266" smilref="Programming_Robots_with_ROS00013.smil#code_001266">square</code>
                      <span class="text" id="span_003694" smilref="Programming_Robots_with_ROS00013.smil#span_003694">state machines:</span>
                    </p>
                    <p id="p_000869">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_001267" smilref="Programming_Robots_with_ROS00013.smil#code_001267">    triangle = polygon(3)
    square = polygon(4)</code>
                    </p>
                    <p id="ch13-idp32850304" data-type="indexterm" data-startref="ix_13-patrol-asciidoc5">
                      <span class="text" id="span_003695" smilref="Programming_Robots_with_ROS00013.smil#span_003695">Running this example gives the same output as</span>
                      <a data-type="xref" href="#ch13-shapes_fsm" external="false" id="a_000190" smilref="Programming_Robots_with_ROS00013.smil#a_000190">Example 13-3</a>
                      <span class="text" id="span_003696" smilref="Programming_Robots_with_ROS00013.smil#span_003696">, as we would expect.</span>
                    </p>
                  </div>
                </section>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Patrolling with State Machines" id="section_000139">
              <h1 id="h1_000271" smilref="Programming_Robots_with_ROS00013.smil#h1_000271">Patrolling with State Machines</h1>
              <div class="sect1" id="ch13-idp30871568">
                <p data-type="indexterm" data-primary="state machines" data-secondary="patrolling with" id="ch13-ix_13-patrol-asciidoc13">
                  <span class="text" id="span_003697" smilref="Programming_Robots_with_ROS00013.smil#span_003697">Now that we've seen how to construct state machines with</span>
                  <code xml:space="preserve" id="code_001268" smilref="Programming_Robots_with_ROS00013.smil#code_001268">smach</code>
                  <span class="text" id="span_003698" smilref="Programming_Robots_with_ROS00013.smil#span_003698">, it's time to get back to our robot and see how we can set up our patrol with a simple state machine. It actually turns out to be remarkably straightforward: we only need to implement a single state, corresponding to driving to a particular waypoint, and then chain these states together to get the patrol.</span>
                  <a data-type="xref" href="#ch13-patrol_fsm" external="false" id="a_000191" smilref="Programming_Robots_with_ROS00013.smil#a_000191">Example 13-5</a>
                  <span class="text" id="span_003699" smilref="Programming_Robots_with_ROS00013.smil#span_003699">shows the code.</span>
                </p>
                <h1 id="h1_000272" smilref="Programming_Robots_with_ROS00013.smil#h1_000272">Example 13-5. patrol_fsm.py</h1>
                <div id="ch13-patrol_fsm" data-type="example">
                  <p id="p_000870">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001269" smilref="Programming_Robots_with_ROS00013.smil#code_001269">#!/usr/bin/env python

import rospy
import actionlib
from smach import State,StateMachine
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal

waypoints = [
    ['one', (2.1, 2.2), (0.0, 0.0, 0.0, 1.0)],
    ['two', (6.5, 4.43), (0.0, 0.0, -0.984047240305, 0.177907360295)]
]

class Waypoint(State):
    def __init__(self, position, orientation):
        State.__init__(self, outcomes=['success'])

        # Get an action client
        self.client = actionlib.SimpleActionClient('move_base', MoveBaseAction)
        self.client.wait_for_server()

        # Define the goal
        self.goal = MoveBaseGoal()
        self.goal.target_pose.header.frame_id = 'map'
        self.goal.target_pose.pose.position.x = position[0]
        self.goal.target_pose.pose.position.y = position[1]
        self.goal.target_pose.pose.position.z = 0.0
        self.goal.target_pose.pose.orientation.x = orientation[0]
        self.goal.target_pose.pose.orientation.y = orientation[1]
        self.goal.target_pose.pose.orientation.z = orientation[2]
        self.goal.target_pose.pose.orientation.w = orientation[3]

    def execute(self, userdata):
        self.client.send_goal(self.goal)
        self.client.wait_for_result()
        return 'success'


if __name__ == '__main__':
    rospy.init_node('patrol')

    patrol = StateMachine('success')
    with patrol:
        for i,w in enumerate(waypoints):
            StateMachine.add(w[0],
                             Waypoint(w[1], w[2]),
                             transitions={'success':waypoints[(i + 1) % \
                             len(waypoints)][0]})

    patrol.execute()</code>
                  </p>
                </div>
                <p id="p_000871">
                  <span class="text" id="span_003700" smilref="Programming_Robots_with_ROS00013.smil#span_003700">Each instance of the</span>
                  <code xml:space="preserve" id="code_001270" smilref="Programming_Robots_with_ROS00013.smil#code_001270">Waypoint</code>
                  <span class="text" id="span_003701" smilref="Programming_Robots_with_ROS00013.smil#span_003701">state has its own action client and a single goal point. When the</span>
                  <code xml:space="preserve" id="code_001271" smilref="Programming_Robots_with_ROS00013.smil#code_001271">execute()</code>
                  <span class="text" id="span_003702" smilref="Programming_Robots_with_ROS00013.smil#span_003702">function is called, it sends this goal to the nav stack and waits for it to terminate. Notice that the action client is created and waited for when the instance is created, which means that by the time the state machine is executed all states have a running action client, and none of them have to wait. We also pre-compute</span>
                  <code xml:space="preserve" id="code_001272" smilref="Programming_Robots_with_ROS00013.smil#code_001272">MoveBaseGoal</code>
                  <span class="text" id="span_003703" smilref="Programming_Robots_with_ROS00013.smil#span_003703">in the constructor, since it's not going to ever change.</span>
                </p>
                <p id="p_000872">
                  <span class="text" id="span_003704" smilref="Programming_Robots_with_ROS00013.smil#span_003704">Creating the state machine is just a case of getting one</span>
                  <code xml:space="preserve" id="code_001273" smilref="Programming_Robots_with_ROS00013.smil#code_001273">Waypoint</code>
                  <span class="text" id="span_003705" smilref="Programming_Robots_with_ROS00013.smil#span_003705">instance for each element in the</span>
                  <code xml:space="preserve" id="code_001274" smilref="Programming_Robots_with_ROS00013.smil#code_001274">waypoints</code>
                  <span class="text" id="span_003706" smilref="Programming_Robots_with_ROS00013.smil#span_003706">list and setting up the transitions correctly. The last waypoint transitions back to the first one.</span>
                </p>
                <p id="p_000873">
                  <span class="text" id="span_003707" smilref="Programming_Robots_with_ROS00013.smil#span_003707">Running this code will give exactly the same behavior as running</span>
                  <a data-type="xref" href="#ch10-patrol_node" external="false" id="a_000192" smilref="Programming_Robots_with_ROS00013.smil#a_000192">Example 10-1</a>
                  <span class="text" id="span_003708" smilref="Programming_Robots_with_ROS00013.smil#span_003708">from the chapter about navigating around the world. However, the new version of the code is better encapsulated and more extensible (as we will see later on in the book).</span>
                </p>
                <section data-type="sect2" data-pdf-bookmark="A Better Way to Patrol" id="section_000140">
                  <h1 id="h1_000273" smilref="Programming_Robots_with_ROS00013.smil#h1_000273">A Better Way to Patrol</h1>
                  <div class="sect2" id="ch13-idp32975824">
                    <p data-type="indexterm" data-primary="patrolling" data-secondary="and smach_ros package" id="ch13-idp33353408">
                      <span class="text" id="span_003709" smilref="Programming_Robots_with_ROS00013.smil#span_003709">Using states to issue action requests is a common design pattern in ROS. So much so, in fact, that there's a special-purpose mechanism that helps us to do it more efficiently than in</span>
                      <a data-type="xref" href="#ch13-patrol_fsm" external="false" id="a_000193" smilref="Programming_Robots_with_ROS00013.smil#a_000193">Example 13-5</a>
                      <span class="text" id="span_003710" smilref="Programming_Robots_with_ROS00013.smil#span_003710">. The</span>
                      <code xml:space="preserve" id="code_001275" smilref="Programming_Robots_with_ROS00013.smil#code_001275">smach_ros</code>
                      <span class="text" id="span_003711" smilref="Programming_Robots_with_ROS00013.smil#span_003711">package contains a number of ROS-specific states that can simplify state machine construction, as we can see in</span>
                      <a data-type="xref" href="#ch13-better_patrol_fsm" external="false" id="a_000194" smilref="Programming_Robots_with_ROS00013.smil#a_000194">Example 13-6</a>
                      <span class="text" id="span_003712" smilref="Programming_Robots_with_ROS00013.smil#span_003712">.</span>
                    </p>
                    <h1 id="h1_000274" smilref="Programming_Robots_with_ROS00013.smil#h1_000274">Example 13-6. better_patrol_fsm.py</h1>
                    <div id="ch13-better_patrol_fsm" data-type="example" class="pagebreak-before">
                      <p id="p_000874">
                        <code class="preserve-whitespace" xml:space="preserve" id="code_001276"><span class="text" id="span_003713" smilref="Programming_Robots_with_ROS00013.smil#span_003713">#!/usr/bin/env python</span>

<span class="text" id="span_003714" smilref="Programming_Robots_with_ROS00013.smil#span_003714">import</span> <span class="text" id="span_003715" smilref="Programming_Robots_with_ROS00013.smil#span_003715">rospy</span>
<span class="text" id="span_003716" smilref="Programming_Robots_with_ROS00013.smil#span_003716">from</span> <span class="text" id="span_003717" smilref="Programming_Robots_with_ROS00013.smil#span_003717">smach</span> <span class="text" id="span_003718" smilref="Programming_Robots_with_ROS00013.smil#span_003718">import</span> <span class="text" id="span_003719" smilref="Programming_Robots_with_ROS00013.smil#span_003719">StateMachine</span>  <a class="co" id="ch13-co_on_patrol_CO2-1" href="#ch13-callout_on_patrol_CO2-1" external="false"><img src="images/1.jpg" alt="1" id="img_000118" /></a>
<span class="text" id="span_003720" smilref="Programming_Robots_with_ROS00013.smil#span_003720">from</span> <span class="text" id="span_003721" smilref="Programming_Robots_with_ROS00013.smil#span_003721">smach_ros</span> <span class="text" id="span_003722" smilref="Programming_Robots_with_ROS00013.smil#span_003722">import</span> <span class="text" id="span_003723" smilref="Programming_Robots_with_ROS00013.smil#span_003723">SimpleActionState</span>  <a class="co" id="ch13-co_on_patrol_CO2-2" href="#ch13-callout_on_patrol_CO2-2" external="false"><img src="images/2.jpg" alt="2" id="img_000119" /></a>
<span class="text" id="span_003724" smilref="Programming_Robots_with_ROS00013.smil#span_003724">from</span> <span class="text" id="span_003725" smilref="Programming_Robots_with_ROS00013.smil#span_003725">move_base_msgs.msg</span> <span class="text" id="span_003726" smilref="Programming_Robots_with_ROS00013.smil#span_003726">import</span> <span class="text" id="span_003727" smilref="Programming_Robots_with_ROS00013.smil#span_003727">MoveBaseAction</span><span class="text" id="span_003728" smilref="Programming_Robots_with_ROS00013.smil#span_003728">,</span> <span class="text" id="span_003729" smilref="Programming_Robots_with_ROS00013.smil#span_003729">MoveBaseGoal</span>

<span class="text" id="span_003730" smilref="Programming_Robots_with_ROS00013.smil#span_003730">waypoints</span> <span class="text" id="span_003731" smilref="Programming_Robots_with_ROS00013.smil#span_003731">=</span> <span class="text" id="span_003732" smilref="Programming_Robots_with_ROS00013.smil#span_003732">[</span>
    <span class="text" id="span_003733" smilref="Programming_Robots_with_ROS00013.smil#span_003733">[</span><span class="text" id="span_003734" smilref="Programming_Robots_with_ROS00013.smil#span_003734">'</span><span class="text" id="span_003735" smilref="Programming_Robots_with_ROS00013.smil#span_003735">one</span><span class="text" id="span_003736" smilref="Programming_Robots_with_ROS00013.smil#span_003736">'</span><span class="text" id="span_003737" smilref="Programming_Robots_with_ROS00013.smil#span_003737">,</span> <span class="text" id="span_003738" smilref="Programming_Robots_with_ROS00013.smil#span_003738">(</span><span class="text" id="span_003739" smilref="Programming_Robots_with_ROS00013.smil#span_003739">2.1</span><span class="text" id="span_003740" smilref="Programming_Robots_with_ROS00013.smil#span_003740">,</span> <span class="text" id="span_003741" smilref="Programming_Robots_with_ROS00013.smil#span_003741">2.2</span><span class="text" id="span_003742" smilref="Programming_Robots_with_ROS00013.smil#span_003742">)</span><span class="text" id="span_003743" smilref="Programming_Robots_with_ROS00013.smil#span_003743">,</span> <span class="text" id="span_003744" smilref="Programming_Robots_with_ROS00013.smil#span_003744">(</span><span class="text" id="span_003745" smilref="Programming_Robots_with_ROS00013.smil#span_003745">0.0</span><span class="text" id="span_003746" smilref="Programming_Robots_with_ROS00013.smil#span_003746">,</span> <span class="text" id="span_003747" smilref="Programming_Robots_with_ROS00013.smil#span_003747">0.0</span><span class="text" id="span_003748" smilref="Programming_Robots_with_ROS00013.smil#span_003748">,</span> <span class="text" id="span_003749" smilref="Programming_Robots_with_ROS00013.smil#span_003749">0.0</span><span class="text" id="span_003750" smilref="Programming_Robots_with_ROS00013.smil#span_003750">,</span> <span class="text" id="span_003751" smilref="Programming_Robots_with_ROS00013.smil#span_003751">1.0</span><span class="text" id="span_003752" smilref="Programming_Robots_with_ROS00013.smil#span_003752">)</span><span class="text" id="span_003753" smilref="Programming_Robots_with_ROS00013.smil#span_003753">]</span><span class="text" id="span_003754" smilref="Programming_Robots_with_ROS00013.smil#span_003754">,</span>
    <span class="text" id="span_003755" smilref="Programming_Robots_with_ROS00013.smil#span_003755">[</span><span class="text" id="span_003756" smilref="Programming_Robots_with_ROS00013.smil#span_003756">'</span><span class="text" id="span_003757" smilref="Programming_Robots_with_ROS00013.smil#span_003757">two</span><span class="text" id="span_003758" smilref="Programming_Robots_with_ROS00013.smil#span_003758">'</span><span class="text" id="span_003759" smilref="Programming_Robots_with_ROS00013.smil#span_003759">,</span> <span class="text" id="span_003760" smilref="Programming_Robots_with_ROS00013.smil#span_003760">(</span><span class="text" id="span_003761" smilref="Programming_Robots_with_ROS00013.smil#span_003761">6.5</span><span class="text" id="span_003762" smilref="Programming_Robots_with_ROS00013.smil#span_003762">,</span> <span class="text" id="span_003763" smilref="Programming_Robots_with_ROS00013.smil#span_003763">4.43</span><span class="text" id="span_003764" smilref="Programming_Robots_with_ROS00013.smil#span_003764">)</span><span class="text" id="span_003765" smilref="Programming_Robots_with_ROS00013.smil#span_003765">,</span> <span class="text" id="span_003766" smilref="Programming_Robots_with_ROS00013.smil#span_003766">(</span><span class="text" id="span_003767" smilref="Programming_Robots_with_ROS00013.smil#span_003767">0.0</span><span class="text" id="span_003768" smilref="Programming_Robots_with_ROS00013.smil#span_003768">,</span> <span class="text" id="span_003769" smilref="Programming_Robots_with_ROS00013.smil#span_003769">0.0</span><span class="text" id="span_003770" smilref="Programming_Robots_with_ROS00013.smil#span_003770">,</span> <span class="text" id="span_003771" smilref="Programming_Robots_with_ROS00013.smil#span_003771">-</span><span class="text" id="span_003772" smilref="Programming_Robots_with_ROS00013.smil#span_003772">0.984047240305</span><span class="text" id="span_003773" smilref="Programming_Robots_with_ROS00013.smil#span_003773">,</span> <span class="text" id="span_003774" smilref="Programming_Robots_with_ROS00013.smil#span_003774">0.177907360295</span><span class="text" id="span_003775" smilref="Programming_Robots_with_ROS00013.smil#span_003775">)</span><span class="text" id="span_003776" smilref="Programming_Robots_with_ROS00013.smil#span_003776">]</span>
<span class="text" id="span_003777" smilref="Programming_Robots_with_ROS00013.smil#span_003777">]</span>

<span class="text" id="span_003778" smilref="Programming_Robots_with_ROS00013.smil#span_003778">if</span> <span class="text" id="span_003779" smilref="Programming_Robots_with_ROS00013.smil#span_003779">__name__</span> <span class="text" id="span_003780" smilref="Programming_Robots_with_ROS00013.smil#span_003780">==</span> <span class="text" id="span_003781" smilref="Programming_Robots_with_ROS00013.smil#span_003781">'</span><span class="text" id="span_003782" smilref="Programming_Robots_with_ROS00013.smil#span_003782">__main__</span><span class="text" id="span_003783" smilref="Programming_Robots_with_ROS00013.smil#span_003783">'</span><span class="text" id="span_003784" smilref="Programming_Robots_with_ROS00013.smil#span_003784">:</span>
    <span class="text" id="span_003785" smilref="Programming_Robots_with_ROS00013.smil#span_003785">rospy</span><span class="text" id="span_003786" smilref="Programming_Robots_with_ROS00013.smil#span_003786">.</span><span class="text" id="span_003787" smilref="Programming_Robots_with_ROS00013.smil#span_003787">init_node</span><span class="text" id="span_003788" smilref="Programming_Robots_with_ROS00013.smil#span_003788">(</span><span class="text" id="span_003789" smilref="Programming_Robots_with_ROS00013.smil#span_003789">'</span><span class="text" id="span_003790" smilref="Programming_Robots_with_ROS00013.smil#span_003790">patrol</span><span class="text" id="span_003791" smilref="Programming_Robots_with_ROS00013.smil#span_003791">'</span><span class="text" id="span_003792" smilref="Programming_Robots_with_ROS00013.smil#span_003792">)</span>

    <span class="text" id="span_003793" smilref="Programming_Robots_with_ROS00013.smil#span_003793">patrol</span> <span class="text" id="span_003794" smilref="Programming_Robots_with_ROS00013.smil#span_003794">=</span> <span class="text" id="span_003795" smilref="Programming_Robots_with_ROS00013.smil#span_003795">StateMachine</span><span class="text" id="span_003796" smilref="Programming_Robots_with_ROS00013.smil#span_003796">(</span><span class="text" id="span_003797" smilref="Programming_Robots_with_ROS00013.smil#span_003797">[</span><span class="text" id="span_003798" smilref="Programming_Robots_with_ROS00013.smil#span_003798">'</span><span class="text" id="span_003799" smilref="Programming_Robots_with_ROS00013.smil#span_003799">succeeded</span><span class="text" id="span_003800" smilref="Programming_Robots_with_ROS00013.smil#span_003800">'</span><span class="text" id="span_003801" smilref="Programming_Robots_with_ROS00013.smil#span_003801">,</span><span class="text" id="span_003802" smilref="Programming_Robots_with_ROS00013.smil#span_003802">'</span><span class="text" id="span_003803" smilref="Programming_Robots_with_ROS00013.smil#span_003803">aborted</span><span class="text" id="span_003804" smilref="Programming_Robots_with_ROS00013.smil#span_003804">'</span><span class="text" id="span_003805" smilref="Programming_Robots_with_ROS00013.smil#span_003805">,</span><span class="text" id="span_003806" smilref="Programming_Robots_with_ROS00013.smil#span_003806">'</span><span class="text" id="span_003807" smilref="Programming_Robots_with_ROS00013.smil#span_003807">preempted</span><span class="text" id="span_003808" smilref="Programming_Robots_with_ROS00013.smil#span_003808">'</span><span class="text" id="span_003809" smilref="Programming_Robots_with_ROS00013.smil#span_003809">]</span><span class="text" id="span_003810" smilref="Programming_Robots_with_ROS00013.smil#span_003810">)</span>
    <span class="text" id="span_003811" smilref="Programming_Robots_with_ROS00013.smil#span_003811">with</span> <span class="text" id="span_003812" smilref="Programming_Robots_with_ROS00013.smil#span_003812">patrol</span><span class="text" id="span_003813" smilref="Programming_Robots_with_ROS00013.smil#span_003813">:</span>
        <span class="text" id="span_003814" smilref="Programming_Robots_with_ROS00013.smil#span_003814">for</span> <span class="text" id="span_003815" smilref="Programming_Robots_with_ROS00013.smil#span_003815">i</span><span class="text" id="span_003816" smilref="Programming_Robots_with_ROS00013.smil#span_003816">,</span><span class="text" id="span_003817" smilref="Programming_Robots_with_ROS00013.smil#span_003817">w</span> <span class="text" id="span_003818" smilref="Programming_Robots_with_ROS00013.smil#span_003818">in</span> <span class="text" id="span_003819" smilref="Programming_Robots_with_ROS00013.smil#span_003819">enumerate</span><span class="text" id="span_003820" smilref="Programming_Robots_with_ROS00013.smil#span_003820">(</span><span class="text" id="span_003821" smilref="Programming_Robots_with_ROS00013.smil#span_003821">waypoints</span><span class="text" id="span_003822" smilref="Programming_Robots_with_ROS00013.smil#span_003822">)</span><span class="text" id="span_003823" smilref="Programming_Robots_with_ROS00013.smil#span_003823">:</span>
            <span class="text" id="span_003824" smilref="Programming_Robots_with_ROS00013.smil#span_003824">goal_pose</span> <span class="text" id="span_003825" smilref="Programming_Robots_with_ROS00013.smil#span_003825">=</span> <span class="text" id="span_003826" smilref="Programming_Robots_with_ROS00013.smil#span_003826">MoveBaseGoal</span><span class="text" id="span_003827" smilref="Programming_Robots_with_ROS00013.smil#span_003827">(</span><span class="text" id="span_003828" smilref="Programming_Robots_with_ROS00013.smil#span_003828">)</span>
            <span class="text" id="span_003829" smilref="Programming_Robots_with_ROS00013.smil#span_003829">goal_pose</span><span class="text" id="span_003830" smilref="Programming_Robots_with_ROS00013.smil#span_003830">.</span><span class="text" id="span_003831" smilref="Programming_Robots_with_ROS00013.smil#span_003831">target_pose</span><span class="text" id="span_003832" smilref="Programming_Robots_with_ROS00013.smil#span_003832">.</span><span class="text" id="span_003833" smilref="Programming_Robots_with_ROS00013.smil#span_003833">header</span><span class="text" id="span_003834" smilref="Programming_Robots_with_ROS00013.smil#span_003834">.</span><span class="text" id="span_003835" smilref="Programming_Robots_with_ROS00013.smil#span_003835">frame_id</span> <span class="text" id="span_003836" smilref="Programming_Robots_with_ROS00013.smil#span_003836">=</span> <span class="text" id="span_003837" smilref="Programming_Robots_with_ROS00013.smil#span_003837">'</span><span class="text" id="span_003838" smilref="Programming_Robots_with_ROS00013.smil#span_003838">map</span><span class="text" id="span_003839" smilref="Programming_Robots_with_ROS00013.smil#span_003839">'</span>

            <span class="text" id="span_003840" smilref="Programming_Robots_with_ROS00013.smil#span_003840">goal_pose</span><span class="text" id="span_003841" smilref="Programming_Robots_with_ROS00013.smil#span_003841">.</span><span class="text" id="span_003842" smilref="Programming_Robots_with_ROS00013.smil#span_003842">target_pose</span><span class="text" id="span_003843" smilref="Programming_Robots_with_ROS00013.smil#span_003843">.</span><span class="text" id="span_003844" smilref="Programming_Robots_with_ROS00013.smil#span_003844">pose</span><span class="text" id="span_003845" smilref="Programming_Robots_with_ROS00013.smil#span_003845">.</span><span class="text" id="span_003846" smilref="Programming_Robots_with_ROS00013.smil#span_003846">position</span><span class="text" id="span_003847" smilref="Programming_Robots_with_ROS00013.smil#span_003847">.</span><span class="text" id="span_003848" smilref="Programming_Robots_with_ROS00013.smil#span_003848">x</span> <span class="text" id="span_003849" smilref="Programming_Robots_with_ROS00013.smil#span_003849">=</span> <span class="text" id="span_003850" smilref="Programming_Robots_with_ROS00013.smil#span_003850">w</span><span class="text" id="span_003851" smilref="Programming_Robots_with_ROS00013.smil#span_003851">[</span><span class="text" id="span_003852" smilref="Programming_Robots_with_ROS00013.smil#span_003852">1</span><span class="text" id="span_003853" smilref="Programming_Robots_with_ROS00013.smil#span_003853">]</span><span class="text" id="span_003854" smilref="Programming_Robots_with_ROS00013.smil#span_003854">[</span><span class="text" id="span_003855" smilref="Programming_Robots_with_ROS00013.smil#span_003855">0</span><span class="text" id="span_003856" smilref="Programming_Robots_with_ROS00013.smil#span_003856">]</span>
            <span class="text" id="span_003857" smilref="Programming_Robots_with_ROS00013.smil#span_003857">goal_pose</span><span class="text" id="span_003858" smilref="Programming_Robots_with_ROS00013.smil#span_003858">.</span><span class="text" id="span_003859" smilref="Programming_Robots_with_ROS00013.smil#span_003859">target_pose</span><span class="text" id="span_003860" smilref="Programming_Robots_with_ROS00013.smil#span_003860">.</span><span class="text" id="span_003861" smilref="Programming_Robots_with_ROS00013.smil#span_003861">pose</span><span class="text" id="span_003862" smilref="Programming_Robots_with_ROS00013.smil#span_003862">.</span><span class="text" id="span_003863" smilref="Programming_Robots_with_ROS00013.smil#span_003863">position</span><span class="text" id="span_003864" smilref="Programming_Robots_with_ROS00013.smil#span_003864">.</span><span class="text" id="span_003865" smilref="Programming_Robots_with_ROS00013.smil#span_003865">y</span> <span class="text" id="span_003866" smilref="Programming_Robots_with_ROS00013.smil#span_003866">=</span> <span class="text" id="span_003867" smilref="Programming_Robots_with_ROS00013.smil#span_003867">w</span><span class="text" id="span_003868" smilref="Programming_Robots_with_ROS00013.smil#span_003868">[</span><span class="text" id="span_003869" smilref="Programming_Robots_with_ROS00013.smil#span_003869">1</span><span class="text" id="span_003870" smilref="Programming_Robots_with_ROS00013.smil#span_003870">]</span><span class="text" id="span_003871" smilref="Programming_Robots_with_ROS00013.smil#span_003871">[</span><span class="text" id="span_003872" smilref="Programming_Robots_with_ROS00013.smil#span_003872">1</span><span class="text" id="span_003873" smilref="Programming_Robots_with_ROS00013.smil#span_003873">]</span>
            <span class="text" id="span_003874" smilref="Programming_Robots_with_ROS00013.smil#span_003874">goal_pose</span><span class="text" id="span_003875" smilref="Programming_Robots_with_ROS00013.smil#span_003875">.</span><span class="text" id="span_003876" smilref="Programming_Robots_with_ROS00013.smil#span_003876">target_pose</span><span class="text" id="span_003877" smilref="Programming_Robots_with_ROS00013.smil#span_003877">.</span><span class="text" id="span_003878" smilref="Programming_Robots_with_ROS00013.smil#span_003878">pose</span><span class="text" id="span_003879" smilref="Programming_Robots_with_ROS00013.smil#span_003879">.</span><span class="text" id="span_003880" smilref="Programming_Robots_with_ROS00013.smil#span_003880">position</span><span class="text" id="span_003881" smilref="Programming_Robots_with_ROS00013.smil#span_003881">.</span><span class="text" id="span_003882" smilref="Programming_Robots_with_ROS00013.smil#span_003882">z</span> <span class="text" id="span_003883" smilref="Programming_Robots_with_ROS00013.smil#span_003883">=</span> <span class="text" id="span_003884" smilref="Programming_Robots_with_ROS00013.smil#span_003884">0.0</span>

            <span class="text" id="span_003885" smilref="Programming_Robots_with_ROS00013.smil#span_003885">goal_pose</span><span class="text" id="span_003886" smilref="Programming_Robots_with_ROS00013.smil#span_003886">.</span><span class="text" id="span_003887" smilref="Programming_Robots_with_ROS00013.smil#span_003887">target_pose</span><span class="text" id="span_003888" smilref="Programming_Robots_with_ROS00013.smil#span_003888">.</span><span class="text" id="span_003889" smilref="Programming_Robots_with_ROS00013.smil#span_003889">pose</span><span class="text" id="span_003890" smilref="Programming_Robots_with_ROS00013.smil#span_003890">.</span><span class="text" id="span_003891" smilref="Programming_Robots_with_ROS00013.smil#span_003891">orientation</span><span class="text" id="span_003892" smilref="Programming_Robots_with_ROS00013.smil#span_003892">.</span><span class="text" id="span_003893" smilref="Programming_Robots_with_ROS00013.smil#span_003893">x</span> <span class="text" id="span_003894" smilref="Programming_Robots_with_ROS00013.smil#span_003894">=</span> <span class="text" id="span_003895" smilref="Programming_Robots_with_ROS00013.smil#span_003895">w</span><span class="text" id="span_003896" smilref="Programming_Robots_with_ROS00013.smil#span_003896">[</span><span class="text" id="span_003897" smilref="Programming_Robots_with_ROS00013.smil#span_003897">2</span><span class="text" id="span_003898" smilref="Programming_Robots_with_ROS00013.smil#span_003898">]</span><span class="text" id="span_003899" smilref="Programming_Robots_with_ROS00013.smil#span_003899">[</span><span class="text" id="span_003900" smilref="Programming_Robots_with_ROS00013.smil#span_003900">0</span><span class="text" id="span_003901" smilref="Programming_Robots_with_ROS00013.smil#span_003901">]</span>
            <span class="text" id="span_003902" smilref="Programming_Robots_with_ROS00013.smil#span_003902">goal_pose</span><span class="text" id="span_003903" smilref="Programming_Robots_with_ROS00013.smil#span_003903">.</span><span class="text" id="span_003904" smilref="Programming_Robots_with_ROS00013.smil#span_003904">target_pose</span><span class="text" id="span_003905" smilref="Programming_Robots_with_ROS00013.smil#span_003905">.</span><span class="text" id="span_003906" smilref="Programming_Robots_with_ROS00013.smil#span_003906">pose</span><span class="text" id="span_003907" smilref="Programming_Robots_with_ROS00013.smil#span_003907">.</span><span class="text" id="span_003908" smilref="Programming_Robots_with_ROS00013.smil#span_003908">orientation</span><span class="text" id="span_003909" smilref="Programming_Robots_with_ROS00013.smil#span_003909">.</span><span class="text" id="span_003910" smilref="Programming_Robots_with_ROS00013.smil#span_003910">y</span> <span class="text" id="span_003911" smilref="Programming_Robots_with_ROS00013.smil#span_003911">=</span> <span class="text" id="span_003912" smilref="Programming_Robots_with_ROS00013.smil#span_003912">w</span><span class="text" id="span_003913" smilref="Programming_Robots_with_ROS00013.smil#span_003913">[</span><span class="text" id="span_003914" smilref="Programming_Robots_with_ROS00013.smil#span_003914">2</span><span class="text" id="span_003915" smilref="Programming_Robots_with_ROS00013.smil#span_003915">]</span><span class="text" id="span_003916" smilref="Programming_Robots_with_ROS00013.smil#span_003916">[</span><span class="text" id="span_003917" smilref="Programming_Robots_with_ROS00013.smil#span_003917">1</span><span class="text" id="span_003918" smilref="Programming_Robots_with_ROS00013.smil#span_003918">]</span>
            <span class="text" id="span_003919" smilref="Programming_Robots_with_ROS00013.smil#span_003919">goal_pose</span><span class="text" id="span_003920" smilref="Programming_Robots_with_ROS00013.smil#span_003920">.</span><span class="text" id="span_003921" smilref="Programming_Robots_with_ROS00013.smil#span_003921">target_pose</span><span class="text" id="span_003922" smilref="Programming_Robots_with_ROS00013.smil#span_003922">.</span><span class="text" id="span_003923" smilref="Programming_Robots_with_ROS00013.smil#span_003923">pose</span><span class="text" id="span_003924" smilref="Programming_Robots_with_ROS00013.smil#span_003924">.</span><span class="text" id="span_003925" smilref="Programming_Robots_with_ROS00013.smil#span_003925">orientation</span><span class="text" id="span_003926" smilref="Programming_Robots_with_ROS00013.smil#span_003926">.</span><span class="text" id="span_003927" smilref="Programming_Robots_with_ROS00013.smil#span_003927">z</span> <span class="text" id="span_003928" smilref="Programming_Robots_with_ROS00013.smil#span_003928">=</span> <span class="text" id="span_003929" smilref="Programming_Robots_with_ROS00013.smil#span_003929">w</span><span class="text" id="span_003930" smilref="Programming_Robots_with_ROS00013.smil#span_003930">[</span><span class="text" id="span_003931" smilref="Programming_Robots_with_ROS00013.smil#span_003931">2</span><span class="text" id="span_003932" smilref="Programming_Robots_with_ROS00013.smil#span_003932">]</span><span class="text" id="span_003933" smilref="Programming_Robots_with_ROS00013.smil#span_003933">[</span><span class="text" id="span_003934" smilref="Programming_Robots_with_ROS00013.smil#span_003934">2</span><span class="text" id="span_003935" smilref="Programming_Robots_with_ROS00013.smil#span_003935">]</span>
            <span class="text" id="span_003936" smilref="Programming_Robots_with_ROS00013.smil#span_003936">goal_pose</span><span class="text" id="span_003937" smilref="Programming_Robots_with_ROS00014.smil#span_003937">.</span><span class="text" id="span_003938" smilref="Programming_Robots_with_ROS00014.smil#span_003938">target_pose</span><span class="text" id="span_003939" smilref="Programming_Robots_with_ROS00014.smil#span_003939">.</span><span class="text" id="span_003940" smilref="Programming_Robots_with_ROS00014.smil#span_003940">pose</span><span class="text" id="span_003941" smilref="Programming_Robots_with_ROS00014.smil#span_003941">.</span><span class="text" id="span_003942" smilref="Programming_Robots_with_ROS00014.smil#span_003942">orientation</span><span class="text" id="span_003943" smilref="Programming_Robots_with_ROS00014.smil#span_003943">.</span><span class="text" id="span_003944" smilref="Programming_Robots_with_ROS00014.smil#span_003944">w</span> <span class="text" id="span_003945" smilref="Programming_Robots_with_ROS00014.smil#span_003945">=</span> <span class="text" id="span_003946" smilref="Programming_Robots_with_ROS00014.smil#span_003946">w</span><span class="text" id="span_003947" smilref="Programming_Robots_with_ROS00014.smil#span_003947">[</span><span class="text" id="span_003948" smilref="Programming_Robots_with_ROS00014.smil#span_003948">2</span><span class="text" id="span_003949" smilref="Programming_Robots_with_ROS00014.smil#span_003949">]</span><span class="text" id="span_003950" smilref="Programming_Robots_with_ROS00014.smil#span_003950">[</span><span class="text" id="span_003951" smilref="Programming_Robots_with_ROS00014.smil#span_003951">3</span><span class="text" id="span_003952" smilref="Programming_Robots_with_ROS00014.smil#span_003952">]</span>

            <span class="text" id="span_003953" smilref="Programming_Robots_with_ROS00014.smil#span_003953">StateMachine</span><span class="text" id="span_003954" smilref="Programming_Robots_with_ROS00014.smil#span_003954">.</span><span class="text" id="span_003955" smilref="Programming_Robots_with_ROS00014.smil#span_003955">add</span><span class="text" id="span_003956" smilref="Programming_Robots_with_ROS00014.smil#span_003956">(</span><span class="text" id="span_003957" smilref="Programming_Robots_with_ROS00014.smil#span_003957">w</span><span class="text" id="span_003958" smilref="Programming_Robots_with_ROS00014.smil#span_003958">[</span><span class="text" id="span_003959" smilref="Programming_Robots_with_ROS00014.smil#span_003959">0</span><span class="text" id="span_003960" smilref="Programming_Robots_with_ROS00014.smil#span_003960">]</span><span class="text" id="span_003961" smilref="Programming_Robots_with_ROS00014.smil#span_003961">,</span>
                             <span class="text" id="span_003962" smilref="Programming_Robots_with_ROS00014.smil#span_003962">SimpleActionState</span><span class="text" id="span_003963" smilref="Programming_Robots_with_ROS00014.smil#span_003963">(</span><span class="text" id="span_003964" smilref="Programming_Robots_with_ROS00014.smil#span_003964">'</span><span class="text" id="span_003965" smilref="Programming_Robots_with_ROS00014.smil#span_003965">move_base</span><span class="text" id="span_003966" smilref="Programming_Robots_with_ROS00014.smil#span_003966">'</span><span class="text" id="span_003967" smilref="Programming_Robots_with_ROS00014.smil#span_003967">,</span>
                                               <span class="text" id="span_003968" smilref="Programming_Robots_with_ROS00014.smil#span_003968">MoveBaseAction</span><span class="text" id="span_003969" smilref="Programming_Robots_with_ROS00014.smil#span_003969">,</span>
                                               <span class="text" id="span_003970" smilref="Programming_Robots_with_ROS00014.smil#span_003970">goal</span><span class="text" id="span_003971" smilref="Programming_Robots_with_ROS00014.smil#span_003971">=</span><span class="text" id="span_003972" smilref="Programming_Robots_with_ROS00014.smil#span_003972">goal_pose</span><span class="text" id="span_003973" smilref="Programming_Robots_with_ROS00014.smil#span_003973">)</span><span class="text" id="span_003974" smilref="Programming_Robots_with_ROS00014.smil#span_003974">,</span>
                             <span class="text" id="span_003975" smilref="Programming_Robots_with_ROS00014.smil#span_003975">transitions</span><span class="text" id="span_003976" smilref="Programming_Robots_with_ROS00014.smil#span_003976">=</span><span class="text" id="span_003977" smilref="Programming_Robots_with_ROS00014.smil#span_003977">{</span><span class="text" id="span_003978" smilref="Programming_Robots_with_ROS00014.smil#span_003978">'</span><span class="text" id="span_003979" smilref="Programming_Robots_with_ROS00014.smil#span_003979">succeeded</span><span class="text" id="span_003980" smilref="Programming_Robots_with_ROS00014.smil#span_003980">'</span><span class="text" id="span_003981" smilref="Programming_Robots_with_ROS00014.smil#span_003981">:</span><span class="text" id="span_003982" smilref="Programming_Robots_with_ROS00014.smil#span_003982">waypoints</span><span class="text" id="span_003983" smilref="Programming_Robots_with_ROS00014.smil#span_003983">[</span><span class="text" id="span_003984" smilref="Programming_Robots_with_ROS00014.smil#span_003984">(</span><span class="text" id="span_003985" smilref="Programming_Robots_with_ROS00014.smil#span_003985">i</span> <span class="text" id="span_003986" smilref="Programming_Robots_with_ROS00014.smil#span_003986">+</span> <span class="text" id="span_003987" smilref="Programming_Robots_with_ROS00014.smil#span_003987">1</span><span class="text" id="span_003988" smilref="Programming_Robots_with_ROS00014.smil#span_003988">)</span> <span class="text" id="span_003989" smilref="Programming_Robots_with_ROS00014.smil#span_003989">%</span> <span class="text" id="span_003990" smilref="Programming_Robots_with_ROS00014.smil#span_003990">\
</span>                                   <span class="text" id="span_003991" smilref="Programming_Robots_with_ROS00014.smil#span_003991">len</span><span class="text" id="span_003992" smilref="Programming_Robots_with_ROS00014.smil#span_003992">(</span><span class="text" id="span_003993" smilref="Programming_Robots_with_ROS00014.smil#span_003993">waypoints</span><span class="text" id="span_003994" smilref="Programming_Robots_with_ROS00014.smil#span_003994">)</span><span class="text" id="span_003995" smilref="Programming_Robots_with_ROS00014.smil#span_003995">]</span><span class="text" id="span_003996" smilref="Programming_Robots_with_ROS00014.smil#span_003996">[</span><span class="text" id="span_003997" smilref="Programming_Robots_with_ROS00014.smil#span_003997">0</span><span class="text" id="span_003998" smilref="Programming_Robots_with_ROS00014.smil#span_003998">]</span><span class="text" id="span_003999" smilref="Programming_Robots_with_ROS00014.smil#span_003999">}</span><span class="text" id="span_004000" smilref="Programming_Robots_with_ROS00014.smil#span_004000">)</span>
    <span class="text" id="span_004001" smilref="Programming_Robots_with_ROS00014.smil#span_004001">patrol</span><span class="text" id="span_004002" smilref="Programming_Robots_with_ROS00014.smil#span_004002">.</span><span class="text" id="span_004003" smilref="Programming_Robots_with_ROS00014.smil#span_004003">execute</span><span class="text" id="span_004004" smilref="Programming_Robots_with_ROS00014.smil#span_004004">(</span><span class="text" id="span_004005" smilref="Programming_Robots_with_ROS00014.smil#span_004005">)</span></code>
                      </p>
                      <dl class="calloutlist" id="dl_000009">
                        <dt id="dt_000037">
                          <a class="co" id="ch13-callout_on_patrol_CO2-1" href="#ch13-co_on_patrol_CO2-1" external="false">
                            <img src="images/1.jpg" alt="1" id="img_000120" />
                          </a>
                        </dt>
                        <dd id="dd_000037">
                          <p id="p_000875">
                            <span class="text" id="span_004006" smilref="Programming_Robots_with_ROS00014.smil#span_004006">We don't need to import</span>
                            <code xml:space="preserve" id="code_001277" smilref="Programming_Robots_with_ROS00014.smil#code_001277">State</code>
                            <span class="text" id="span_004007" smilref="Programming_Robots_with_ROS00014.smil#span_004007">any more, since we're not using it now.</span>
                          </p>
                        </dd>
                        <dt id="dt_000038">
                          <a class="co" id="ch13-callout_on_patrol_CO2-2" href="#ch13-co_on_patrol_CO2-2" external="false">
                            <img src="images/2.jpg" alt="2" id="img_000121" />
                          </a>
                        </dt>
                        <dd id="dd_000038">
                          <p id="p_000876">
                            <span class="text" id="span_004008" smilref="Programming_Robots_with_ROS00014.smil#span_004008">We do need to import</span>
                            <code xml:space="preserve" id="code_001278" smilref="Programming_Robots_with_ROS00014.smil#code_001278">SimpleActionState</code>
                            <span class="text" id="span_004009" smilref="Programming_Robots_with_ROS00014.smil#span_004009">from</span>
                            <code xml:space="preserve" id="code_001279" smilref="Programming_Robots_with_ROS00014.smil#code_001279">smach_ros</code>
                            <span class="text" id="span_004010" smilref="Programming_Robots_with_ROS00014.smil#span_004010">, though.</span>
                          </p>
                        </dd>
                      </dl>
                    </div>
                    <p id="ch13-idp35466096" data-type="indexterm" data-startref="ix_13-patrol-asciidoc1">
                      <span class="text" id="span_004011" smilref="Programming_Robots_with_ROS00014.smil#span_004011">In this code, we've replaced our</span>
                      <code xml:space="preserve" id="code_001280" smilref="Programming_Robots_with_ROS00014.smil#code_001280">Waypoint</code>
                      <span class="text" id="span_004012" smilref="Programming_Robots_with_ROS00014.smil#span_004012">state class with a</span>
                      <code xml:space="preserve" id="code_001281" smilref="Programming_Robots_with_ROS00014.smil#code_001281">SimpleActionState</code>
                      <span class="text" id="span_004013" smilref="Programming_Robots_with_ROS00014.smil#span_004013">instance. This takes the name of the action (</span>
                      <code xml:space="preserve" id="code_001282" smilref="Programming_Robots_with_ROS00014.smil#code_001282">move_base</code>
                      <span class="text" id="span_004014" smilref="Programming_Robots_with_ROS00014.smil#span_004014">), the type of the action (</span>
                      <code xml:space="preserve" id="code_001283" smilref="Programming_Robots_with_ROS00014.smil#code_001283">MoveBaseAction</code>
                      <span class="text" id="span_004015" smilref="Programming_Robots_with_ROS00014.smil#span_004015">), and the action goal (constructed from the waypoint list). Notice how this greatly simplifies our code; the largest single part is now setting the fields in the goal state.</span>
                    </p>
                  </div>
                </section>
              </div>
            </section>
            <section data-type="sect1" class="pagebreak-before" data-pdf-bookmark="Summary" id="section_000141">
              <h1 id="h1_000275" smilref="Programming_Robots_with_ROS00014.smil#h1_000275">Summary</h1>
              <div class="sect1" id="ch13-idp35466928">
                <p id="ch13-idp35457248" data-type="indexterm" data-startref="ix_13-patrol-asciidoc0">
                  <span class="text" id="span_004016" smilref="Programming_Robots_with_ROS00014.smil#span_004016">In this chapter, we've seen how to build simple state machines in ROS using</span>
                  <code xml:space="preserve" id="code_001284" smilref="Programming_Robots_with_ROS00014.smil#code_001284">smach</code>
                  <span class="text" id="span_004017" smilref="Programming_Robots_with_ROS00014.smil#span_004017">and how these machines can be used to control a robot at the task level. In particular, we've seen how to rewrite the simple patrol code from</span>
                  <a data-type="xref" href="#ch10-navigating" external="false" id="a_000195" smilref="Programming_Robots_with_ROS00014.smil#a_000195">Chapter 10</a>
                  <span class="text" id="span_004018" smilref="Programming_Robots_with_ROS00014.smil#span_004018">to use a state machine under the hood. It turns out that a lot of robot control code has this sort of structure, where mostly independent behaviors are chained together. The Wander-bot example discussed in</span>
                  <a data-type="xref" href="#ch07-wanderbot" external="false" id="a_000196" smilref="Programming_Robots_with_ROS00014.smil#a_000196">Chapter 7</a>
                  <span class="text" id="span_004019" smilref="Programming_Robots_with_ROS00014.smil#span_004019">is a great example. Take a look at the code in</span>
                  <a data-type="xref" href="#ch07-wander" external="false" id="a_000197" smilref="Programming_Robots_with_ROS00014.smil#a_000197">Example 7-3</a>
                  <span class="text" id="span_004020" smilref="Programming_Robots_with_ROS00014.smil#span_004020">again; an alternative</span>
                  <code xml:space="preserve" id="code_001285" smilref="Programming_Robots_with_ROS00014.smil#code_001285">smach</code>
                  <span class="text" id="span_004021" smilref="Programming_Robots_with_ROS00014.smil#span_004021">implementation should jump out at you now.</span>
                </p>
                <h1 id="h1_000276" smilref="Programming_Robots_with_ROS00014.smil#h1_000276">Tip</h1>
                <div data-type="tip" id="div_000028">
                  <p id="p_000877">
                    <code xml:space="preserve" id="code_001286" smilref="Programming_Robots_with_ROS00014.smil#code_001286">smach</code>
                    <span class="text" id="span_004022" smilref="Programming_Robots_with_ROS00014.smil#span_004022">has a</span>
                    <em id="em_000348" smilref="Programming_Robots_with_ROS00014.smil#em_000348">lot</em>
                    <span class="text" id="span_004023" smilref="Programming_Robots_with_ROS00014.smil#span_004023">more functionality than we've covered in this chapter. As always, more details are available at</span>
                    <a href="http://wiki.ros.org/smach?distro=indigo" external="true" id="a_000198">
                      <span class="text" id="span_004024" smilref="Programming_Robots_with_ROS00014.smil#span_004024">the</span>
                      <code xml:space="preserve" id="code_001287" smilref="Programming_Robots_with_ROS00014.smil#code_001287">smach</code>
                      <span class="text" id="span_004025" smilref="Programming_Robots_with_ROS00014.smil#span_004025">wiki page</span>
                    </a>
                    <span class="text" id="span_004026" smilref="Programming_Robots_with_ROS00014.smil#span_004026">and</span>
                    <a href="http://wiki.ros.org/smach_ros?distro=indigo" external="true" id="a_000199">
                      <span class="text" id="span_004027" smilref="Programming_Robots_with_ROS00014.smil#span_004027">the</span>
                      <code xml:space="preserve" id="code_001288" smilref="Programming_Robots_with_ROS00014.smil#code_001288">smach_ros</code>
                      <span class="text" id="span_004028" smilref="Programming_Robots_with_ROS00014.smil#span_004028">wiki page</span>
                    </a>
                    <span class="text" id="span_004029" smilref="Programming_Robots_with_ROS00014.smil#span_004029">.</span>
                  </p>
                  <p id="p_000878" smilref="Programming_Robots_with_ROS00014.smil#p_000878">Up to this point, we've mostly looked as how to get your robot to do a set of fairly specific tasks wiht ROS. In the next chapter, we're going to combine these ideas (and more) to build a complete application: a robot that works in a stockroom.</p>
                </div>
              </div>
            </section>
          </div>
        </section>
      </level1>
      <level1 id="ch14">
        <section xmlns:epub="http://www.idpf.org/2007/ops" data-type="chapter" epub:type="chapter" data-pdf-bookmark="Chapter 14. Stockroom-bot" id="section_000142">
          <h1 id="h1_000277" smilref="Programming_Robots_with_ROS00014.smil#h1_000277">Chapter 14. Stockroom-bot</h1>
          <div class="chapter" id="ch14-stockroom_bot">
            <p id="ch14-ix_14-stockroom_bot-asciidoc0" data-type="indexterm" data-primary="Stockroom-bot" smilref="Programming_Robots_with_ROS00014.smil#ch14-ix_14-stockroom_bot-asciidoc0">In this chapter, we will combine some of the techniques introduced in previous chapters to program a robot to move items around in a stockroom. This type of task is common in many industries where goods are stored with controlled access, from the relatively small "cage" rooms in retail stores where high-value items are stored, to the chemical and medical supply rooms in hospitals, and all the way up through the massive, highly controlled warehouses used to fulfill ecommerce orders and handle the supply chains of large manufacturing corporations. Despite the varied applications, many tasks in these stockrooms are quite similar: items are precisely organized in a restricted-access area, and they need to be gathered in response to incoming requests.</p>
            <p id="p_000879" smilref="Programming_Robots_with_ROS00014.smil#p_000879">As we have emphasized throughout this book, it is all but impossible to write robust, complex robot software without a simulation environment. Accordingly, we will spend the first portion of this chapter creating a simulated stockroom. As always, the time spent creating a good simulation model pays huge dividends in robot software development!</p>
            <section data-type="sect1" data-pdf-bookmark="Stockroom Simulation" id="section_000143">
              <h1 id="h1_000278" smilref="Programming_Robots_with_ROS00014.smil#h1_000278">Stockroom Simulation</h1>
              <div class="sect1" id="ch14-idp35448736">
                <p data-type="indexterm" data-primary="stockroom" data-secondary="simulation for Stockroom-bot" id="ch14-ix_14-stockroom_bot-asciidoc1">
                  <span class="text" id="span_004030" smilref="Programming_Robots_with_ROS00014.smil#span_004030">Let's get started by creating a workspace called</span>
                  <code xml:space="preserve" id="code_001289" smilref="Programming_Robots_with_ROS00014.smil#code_001289">ws</code>
                  <span class="text" id="span_004031" smilref="Programming_Robots_with_ROS00014.smil#span_004031">for our</span>
                  <code id="ch14-ix_14-stockroom_bot-asciidoc2" xml:space="preserve" smilref="Programming_Robots_with_ROS00014.smil#ch14-ix_14-stockroom_bot-asciidoc2">stockroom_bot</code>
                  <span class="text" id="span_004032" smilref="Programming_Robots_with_ROS00014.smil#span_004032">package:</span>
                </p>
                <p id="p_000880">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001290"><span class="text" id="span_004033" smilref="Programming_Robots_with_ROS00014.smil#span_004033">
user@hostname$ </span><strong id="strong_000149" smilref="Programming_Robots_with_ROS00014.smil#strong_000149">mkdir -p ~/ws/src/stockroom_bot</strong><span class="text" id="span_004034" smilref="Programming_Robots_with_ROS00014.smil#span_004034">
user@hostname$ </span><strong id="strong_000150" smilref="Programming_Robots_with_ROS00014.smil#strong_000150">cd ~/ws/src/stockroom_bot</strong>
</code>
                </p>
                <p data-type="indexterm" data-primary="package.xml" id="ch14-idp35419744">
                  <span class="text" id="span_004035" smilref="Programming_Robots_with_ROS00014.smil#span_004035">Next, we'll create a minimal</span>
                  <em id="em_000349" smilref="Programming_Robots_with_ROS00014.smil#em_000349">package.xml</em>
                  <span class="text" id="span_004036" smilref="Programming_Robots_with_ROS00014.smil#span_004036">file in this directory, shown in</span>
                  <a data-type="xref" href="#ch14-stockroom_package" external="false" id="a_000200" smilref="Programming_Robots_with_ROS00014.smil#a_000200">Example 14-1</a>
                  <span class="text" id="span_004037" smilref="Programming_Robots_with_ROS00014.smil#span_004037">, that will allow the ROS package management system to find the files we'll create during this chapter.</span>
                </p>
                <h1 id="h1_000279" smilref="Programming_Robots_with_ROS00014.smil#h1_000279">Example 14-1. package.xml for stockroom_bot</h1>
                <div id="ch14-stockroom_package" data-type="example">
                  <p id="p_000881">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001291" smilref="Programming_Robots_with_ROS00014.smil#code_001291">&lt;?xml version="1.0"?&gt;
&lt;package&gt;
  &lt;name&gt;stockroom_bot&lt;/name&gt;
  &lt;version&gt;0.0.0&lt;/version&gt;
  &lt;description&gt;The stockroom_bot package&lt;/description&gt;
  &lt;maintainer email="maintainer@example.com"&gt;Name of Maintainer&lt;/maintainer&gt;
  &lt;license&gt;BSD&lt;/license&gt;
  &lt;author email="author@example.com"&gt;Name of Author&lt;/author&gt;
  &lt;buildtool_depend&gt;catkin&lt;/buildtool_depend&gt;
  &lt;build_depend&gt;rospy&lt;/build_depend&gt;
  &lt;run_depend&gt;rospy&lt;/run_depend&gt;
&lt;/package&gt;</code>
                  </p>
                </div>
                <p id="p_000882">
                  <span class="text" id="span_004038" smilref="Programming_Robots_with_ROS00014.smil#span_004038">Then,</span>
                  <code xml:space="preserve" id="code_001292" smilref="Programming_Robots_with_ROS00014.smil#code_001292">catkin</code>
                  <span class="text" id="span_004039" smilref="Programming_Robots_with_ROS00014.smil#span_004039">will create our terminal initialization scripts in</span>
                  <em id="em_000350" smilref="Programming_Robots_with_ROS00014.smil#em_000350">~/ws/devel</em>
                  <span class="text" id="span_004040" smilref="Programming_Robots_with_ROS00014.smil#span_004040">on the initial invocation of</span>
                  <code xml:space="preserve" id="code_001293" smilref="Programming_Robots_with_ROS00014.smil#code_001293">catkin_make</code>
                  <span class="text" id="span_004041" smilref="Programming_Robots_with_ROS00014.smil#span_004041">:</span>
                </p>
                <p id="p_000883">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001294"><span class="text" id="span_004042" smilref="Programming_Robots_with_ROS00014.smil#span_004042">
user@hostname$ </span><strong id="strong_000151" smilref="Programming_Robots_with_ROS00014.smil#strong_000151">cd ~/ws</strong><span class="text" id="span_004043" smilref="Programming_Robots_with_ROS00014.smil#span_004043">
user@hostname$ </span><strong id="strong_000152" smilref="Programming_Robots_with_ROS00014.smil#strong_000152">catkin_make</strong>
</code>
                </p>
                <p data-type="indexterm" data-primary="bash alias" id="ch14-idp35296320" data-secondary="for stockroom simulation">
                  <span class="text" id="span_004044" smilref="Programming_Robots_with_ROS00014.smil#span_004044">As usual in ROS- and Gazebo-based software development, we'll be using many terminal windows. It will save us a lot of typing if we set up a</span>
                  <code xml:space="preserve" id="code_001295" smilref="Programming_Robots_with_ROS00014.smil#code_001295">bash</code>
                  <span class="text" id="span_004045" smilref="Programming_Robots_with_ROS00014.smil#span_004045">alias so that we can quickly set up our terminal environments. We can create an alias called</span>
                  <code id="ch14-ix_14-stockroom_bot-asciidoc3" xml:space="preserve" smilref="Programming_Robots_with_ROS00014.smil#ch14-ix_14-stockroom_bot-asciidoc3">sb</code>
                  <span class="text" id="span_004046" smilref="Programming_Robots_with_ROS00014.smil#span_004046">, as an abbreviation for</span>
                  <code xml:space="preserve" id="code_001296" smilref="Programming_Robots_with_ROS00014.smil#code_001296">stockroom_bot</code>
                  <span class="text" id="span_004047" smilref="Programming_Robots_with_ROS00014.smil#span_004047">, by placing this line at the end of</span>
                  <em id="em_000351" smilref="Programming_Robots_with_ROS00014.smil#em_000351">~/.bashrc</em>
                  <span class="text" id="span_004048" smilref="Programming_Robots_with_ROS00014.smil#span_004048">:</span>
                </p>
                <p id="p_000884">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001297"><span class="text" id="span_004049" smilref="Programming_Robots_with_ROS00014.smil#span_004049">
user@hostname$ </span><strong id="strong_000153" smilref="Programming_Robots_with_ROS00014.smil#strong_000153">alias sb='source ~/ws/devel/setup.bash; \
  export GAZEBO_MODEL_PATH=${HOME}/ws/src/stockroom_bot'</strong>
</code>
                </p>
                <p id="p_000885">
                  <span class="text" id="span_004050" smilref="Programming_Robots_with_ROS00014.smil#span_004050">Once we have reloaded the</span>
                  <em id="em_000352" smilref="Programming_Robots_with_ROS00014.smil#em_000352">~/.bashrc</em>
                  <span class="text" id="span_004051" smilref="Programming_Robots_with_ROS00014.smil#span_004051">file or started a new terminal, whenever we start to configure a terminal for</span>
                  <code xml:space="preserve" id="code_001298" smilref="Programming_Robots_with_ROS00014.smil#code_001298">stockroom_bot</code>
                  <span class="text" id="span_004052" smilref="Programming_Robots_with_ROS00014.smil#span_004052">development or testing, we can just type</span>
                  <code xml:space="preserve" id="code_001299" smilref="Programming_Robots_with_ROS00014.smil#code_001299">sb</code>
                  <span class="text" id="span_004053" smilref="Programming_Robots_with_ROS00014.smil#span_004053">at the command line. This will make your life much easier and helps you to manage environment configurations when you have multiple development projects on your machine at the same time.</span>
                </p>
                <h1 id="h1_000280" smilref="Programming_Robots_with_ROS00014.smil#h1_000280">Tip</h1>
                <div data-type="tip" id="div_000029">
                  <p id="p_000886">
                    <span class="text" id="span_004054" smilref="Programming_Robots_with_ROS00014.smil#span_004054">Whenever you find yourself typing something more than once or twice in a terminal window, setting up a quick</span>
                    <code xml:space="preserve" id="code_001300" smilref="Programming_Robots_with_ROS00014.smil#code_001300">bash</code>
                    <span class="text" id="span_004055" smilref="Programming_Robots_with_ROS00014.smil#span_004055">alias will often make your life at the terminal more pleasant.</span>
                  </p>
                </div>
                <p id="ch14-ix_14-stockroom_bot-asciidoc4" data-type="indexterm" data-primary="bins" data-secondary="creating" smilref="Programming_Robots_with_ROS00014.smil#ch14-ix_14-stockroom_bot-asciidoc4">Now, let's get started on simulating a stockroom with our newly configured workspace. Many stockrooms are organized by placing smaller items into a uniform set of bins, which are then labeled with the names of the items they contain. To get started with our stockroom simulation, we will first model a bin. Of course, bins come in all shapes and sizes, depending on the application. In our case, we want to model bins that can hold items that a hand-sized robot gripper can easily pick up, so we'll make our bins 40 cm square and 20 cm tall.</p>
                <p id="p_000887" smilref="Programming_Robots_with_ROS00014.smil#p_000887">As usual in ROS and Gazebo, there are many ways that one could accomplish this task. It is possible, for example, to make an intricate model in a 3D modeling or CAD program and export the geometry into a format that Gazebo can understand. However, since we may want to have a large number of bins in our simulated stockroom, we will opt to manually create the bin out of the minimum number of primitive shapes in Gazebo, to make the simulation as fast as possible.</p>
                <p id="p_000888" smilref="Programming_Robots_with_ROS00014.smil#p_000888">First, let's make directories in our package for the local Gazebo storage and for our bin model:</p>
                <p id="p_000889">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001301"><span class="text" id="span_004056" smilref="Programming_Robots_with_ROS00014.smil#span_004056">
user@hostname$ </span><strong id="strong_000154" smilref="Programming_Robots_with_ROS00014.smil#strong_000154">mkdir -p ~/ws/src/stockroom_bot/models/bin</strong>
</code>
                </p>
                <p id="p_000890">
                  <span class="text" id="span_004057" smilref="Programming_Robots_with_ROS00014.smil#span_004057">Because the</span>
                  <em id="em_000353" smilref="Programming_Robots_with_ROS00014.smil#em_000353">models</em>
                  <span class="text" id="span_004058" smilref="Programming_Robots_with_ROS00014.smil#span_004058">directory is referenced by the</span>
                  <code xml:space="preserve" id="code_001302" smilref="Programming_Robots_with_ROS00014.smil#code_001302">GAZEBO_MODEL_PATH</code>
                  <span class="text" id="span_004059" smilref="Programming_Robots_with_ROS00014.smil#span_004059">environment variable that we configured earlier, it will be crawled by Gazebo at startup. As such, the</span>
                  <em id="em_000354" smilref="Programming_Robots_with_ROS00014.smil#em_000354">models</em>
                  <span class="text" id="span_004060" smilref="Programming_Robots_with_ROS00014.smil#span_004060">directory must adhere to a specific structure, where all subdirectories have a "magic" file called</span>
                  <em id="em_000355" smilref="Programming_Robots_with_ROS00014.smil#em_000355">model.config</em>
                  <span class="text" id="span_004061" smilref="Programming_Robots_with_ROS00014.smil#span_004061">that describes the version of the model format and links to the other files that contain the actual model. In our case, the minimal</span>
                  <em id="em_000356" smilref="Programming_Robots_with_ROS00014.smil#em_000356">model.config</em>
                  <span class="text" id="span_004062" smilref="Programming_Robots_with_ROS00014.smil#span_004062">file we can place in</span>
                  <em id="em_000357" smilref="Programming_Robots_with_ROS00014.smil#em_000357">models/bin</em>
                  <span class="text" id="span_004063" smilref="Programming_Robots_with_ROS00014.smil#span_004063">is shown in</span>
                  <a data-type="xref" href="#ch14-bin_modelconfig" external="false" id="a_000201" smilref="Programming_Robots_with_ROS00014.smil#a_000201">Example 14-2</a>
                  <span class="text" id="span_004064" smilref="Programming_Robots_with_ROS00014.smil#span_004064">, which simply provides a name and tells Gazebo that the actual bin model will be in a file called</span>
                  <em id="em_000358" smilref="Programming_Robots_with_ROS00014.smil#em_000358">model.sdf</em>
                  <span class="text" id="span_004065" smilref="Programming_Robots_with_ROS00014.smil#span_004065">.</span>
                </p>
                <h1 id="h1_000281" smilref="Programming_Robots_with_ROS00014.smil#h1_000281">Example 14-2. Bin model.config</h1>
                <div id="ch14-bin_modelconfig" data-type="example">
                  <p id="p_000891">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001303" smilref="Programming_Robots_with_ROS00014.smil#code_001303">&lt;?xml version="1.0"?&gt;
&lt;model&gt;
  &lt;name&gt;Bin&lt;/name&gt;
  &lt;sdf version="1.4"&gt;model.sdf&lt;/sdf&gt;
&lt;/model&gt;</code>
                  </p>
                </div>
                <p id="p_000892">
                  <span class="text" id="span_004066" smilref="Programming_Robots_with_ROS00014.smil#span_004066">The actual modeling happens in the</span>
                  <em id="em_000359" smilref="Programming_Robots_with_ROS00014.smil#em_000359">model.sdf</em>
                  <span class="text" id="span_004067" smilref="Programming_Robots_with_ROS00014.smil#span_004067">file. Here, we will model our bin as having five sides, each of which is a rectangular prism, or a</span>
                  <code xml:space="preserve" id="code_001304" smilref="Programming_Robots_with_ROS00014.smil#code_001304">box</code>
                  <span class="text" id="span_004068" smilref="Programming_Robots_with_ROS00014.smil#span_004068">, in the terminology of the Simulation Description File (SDF) format that can be parsed by Gazebo.</span>
                </p>
                <p id="p_000893">
                  <span class="text" id="span_004069" smilref="Programming_Robots_with_ROS00014.smil#span_004069">To make this easier to show on a printed page, we have only included the bottom and left sides of the bin in</span>
                  <a data-type="xref" href="#ch14-bin_modelsdf" external="false" id="a_000202" smilref="Programming_Robots_with_ROS00014.smil#a_000202">Example 14-3</a>
                  <span class="text" id="span_004070" smilref="Programming_Robots_with_ROS00014.smil#span_004070">. The remaining three sides are similar, and as for other the examples in the book, the full source code can be downloaded from the Web; it is only shown here for explanatory purposes.</span>
                </p>
                <h1 id="h1_000282" smilref="Programming_Robots_with_ROS00014.smil#h1_000282">Example 14-3. Bin model.sdf</h1>
                <div id="ch14-bin_modelsdf" data-type="example">
                  <p id="p_000894">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001305"><span class="text" id="span_004071" smilref="Programming_Robots_with_ROS00014.smil#span_004071">&lt;?xml version='1.0'?&gt;</span>
<span class="text" id="span_004072" smilref="Programming_Robots_with_ROS00014.smil#span_004072">&lt;sdf</span> <span class="text" id="span_004073" smilref="Programming_Robots_with_ROS00014.smil#span_004073">version =</span><span class="text" id="span_004074" smilref="Programming_Robots_with_ROS00014.smil#span_004074">'1.4'</span><span class="text" id="span_004075" smilref="Programming_Robots_with_ROS00014.smil#span_004075">&gt;</span>
  <span class="text" id="span_004076" smilref="Programming_Robots_with_ROS00014.smil#span_004076">&lt;model</span> <span class="text" id="span_004077" smilref="Programming_Robots_with_ROS00014.smil#span_004077">name =</span><span class="text" id="span_004078" smilref="Programming_Robots_with_ROS00014.smil#span_004078">'box'</span><span class="text" id="span_004079" smilref="Programming_Robots_with_ROS00014.smil#span_004079">&gt;</span> <a class="co" id="ch14-co_stockroom_bot_CO1-1" href="#ch14-callout_stockroom_bot_CO1-1" external="false"><img src="images/1.jpg" alt="1" id="img_000122" /></a>
    <span class="text" id="span_004080" smilref="Programming_Robots_with_ROS00014.smil#span_004080">&lt;static</span><span class="text" id="span_004081" smilref="Programming_Robots_with_ROS00014.smil#span_004081">&gt;</span><span class="text" id="span_004082" smilref="Programming_Robots_with_ROS00014.smil#span_004082">true</span><span class="text" id="span_004083" smilref="Programming_Robots_with_ROS00014.smil#span_004083">&lt;/static&gt;</span> <a class="co" id="ch14-co_stockroom_bot_CO1-2" href="#ch14-callout_stockroom_bot_CO1-2" external="false"><img src="images/2.jpg" alt="2" id="img_000123" /></a>
    <span class="text" id="span_004084" smilref="Programming_Robots_with_ROS00014.smil#span_004084">&lt;link</span> <span class="text" id="span_004085" smilref="Programming_Robots_with_ROS00014.smil#span_004085">name=</span><span class="text" id="span_004086" smilref="Programming_Robots_with_ROS00014.smil#span_004086">'bottom'</span><span class="text" id="span_004087" smilref="Programming_Robots_with_ROS00014.smil#span_004087">&gt;</span> <a class="co" id="ch14-co_stockroom_bot_CO1-3" href="#ch14-callout_stockroom_bot_CO1-3" external="false"><img src="images/3.jpg" alt="3" id="img_000124" /></a>
      <span class="text" id="span_004088" smilref="Programming_Robots_with_ROS00014.smil#span_004088">&lt;collision</span> <span class="text" id="span_004089" smilref="Programming_Robots_with_ROS00014.smil#span_004089">name=</span><span class="text" id="span_004090" smilref="Programming_Robots_with_ROS00014.smil#span_004090">"collision_bottom"</span><span class="text" id="span_004091" smilref="Programming_Robots_with_ROS00014.smil#span_004091">&gt;</span>
        <span class="text" id="span_004092" smilref="Programming_Robots_with_ROS00014.smil#span_004092">&lt;geometry</span><span class="text" id="span_004093" smilref="Programming_Robots_with_ROS00014.smil#span_004093">&gt;</span>
          <span class="text" id="span_004094" smilref="Programming_Robots_with_ROS00014.smil#span_004094">&lt;box</span><span class="text" id="span_004095" smilref="Programming_Robots_with_ROS00014.smil#span_004095">&gt;</span>
            <span class="text" id="span_004096" smilref="Programming_Robots_with_ROS00014.smil#span_004096">&lt;size</span><span class="text" id="span_004097" smilref="Programming_Robots_with_ROS00014.smil#span_004097">&gt;</span><span class="text" id="span_004098" smilref="Programming_Robots_with_ROS00014.smil#span_004098">0.4 0.4 0.02</span><span class="text" id="span_004099" smilref="Programming_Robots_with_ROS00014.smil#span_004099">&lt;/size&gt;</span> <a class="co" id="ch14-co_stockroom_bot_CO1-4" href="#ch14-callout_stockroom_bot_CO1-4" external="false"><img src="images/4.jpg" alt="4" id="img_000125" /></a>
          <span class="text" id="span_004100" smilref="Programming_Robots_with_ROS00014.smil#span_004100">&lt;/box&gt;</span>
        <span class="text" id="span_004101" smilref="Programming_Robots_with_ROS00014.smil#span_004101">&lt;/geometry&gt;</span>
      <span class="text" id="span_004102" smilref="Programming_Robots_with_ROS00014.smil#span_004102">&lt;/collision&gt;</span>
      <span class="text" id="span_004103" smilref="Programming_Robots_with_ROS00014.smil#span_004103">&lt;collision</span> <span class="text" id="span_004104" smilref="Programming_Robots_with_ROS00014.smil#span_004104">name=</span><span class="text" id="span_004105" smilref="Programming_Robots_with_ROS00014.smil#span_004105">"collision_left"</span><span class="text" id="span_004106" smilref="Programming_Robots_with_ROS00014.smil#span_004106">&gt;</span> <a class="co" id="ch14-co_stockroom_bot_CO1-5" href="#ch14-callout_stockroom_bot_CO1-5" external="false"><img src="images/5.jpg" alt="5" id="img_000126" /></a>
        <span class="text" id="span_004107" smilref="Programming_Robots_with_ROS00014.smil#span_004107">&lt;pose</span><span class="text" id="span_004108" smilref="Programming_Robots_with_ROS00014.smil#span_004108">&gt;</span><span class="text" id="span_004109" smilref="Programming_Robots_with_ROS00014.smil#span_004109">-0.2 0 0.1 0 0 0</span><span class="text" id="span_004110" smilref="Programming_Robots_with_ROS00014.smil#span_004110">&lt;/pose&gt;</span> <a class="co" id="ch14-co_stockroom_bot_CO1-6" href="#ch14-callout_stockroom_bot_CO1-6" external="false"><img src="images/6.jpg" alt="6" id="img_000127" /></a>
        <span class="text" id="span_004111" smilref="Programming_Robots_with_ROS00014.smil#span_004111">&lt;geometry</span><span class="text" id="span_004112" smilref="Programming_Robots_with_ROS00014.smil#span_004112">&gt;</span><span class="text" id="span_004113" smilref="Programming_Robots_with_ROS00014.smil#span_004113">&lt;box</span><span class="text" id="span_004114" smilref="Programming_Robots_with_ROS00014.smil#span_004114">&gt;</span><span class="text" id="span_004115" smilref="Programming_Robots_with_ROS00014.smil#span_004115">&lt;size</span><span class="text" id="span_004116" smilref="Programming_Robots_with_ROS00014.smil#span_004116">&gt;</span><span class="text" id="span_004117" smilref="Programming_Robots_with_ROS00014.smil#span_004117">0.02 0.4 0.2</span><span class="text" id="span_004118" smilref="Programming_Robots_with_ROS00014.smil#span_004118">&lt;/size&gt;</span><span class="text" id="span_004119" smilref="Programming_Robots_with_ROS00014.smil#span_004119">&lt;/box&gt;</span><span class="text" id="span_004120" smilref="Programming_Robots_with_ROS00014.smil#span_004120">&lt;/geometry&gt;</span>
      <span class="text" id="span_004121" smilref="Programming_Robots_with_ROS00014.smil#span_004121">&lt;/collision&gt;</span>
      <span class="text" id="span_004122" smilref="Programming_Robots_with_ROS00014.smil#span_004122">&lt;visual</span> <span class="text" id="span_004123" smilref="Programming_Robots_with_ROS00014.smil#span_004123">name=</span><span class="text" id="span_004124" smilref="Programming_Robots_with_ROS00014.smil#span_004124">"visual_bottom"</span><span class="text" id="span_004125" smilref="Programming_Robots_with_ROS00014.smil#span_004125">&gt;</span>
        <span class="text" id="span_004126" smilref="Programming_Robots_with_ROS00014.smil#span_004126">&lt;geometry</span><span class="text" id="span_004127" smilref="Programming_Robots_with_ROS00014.smil#span_004127">&gt;</span><span class="text" id="span_004128" smilref="Programming_Robots_with_ROS00014.smil#span_004128">&lt;box</span><span class="text" id="span_004129" smilref="Programming_Robots_with_ROS00014.smil#span_004129">&gt;</span><span class="text" id="span_004130" smilref="Programming_Robots_with_ROS00014.smil#span_004130">&lt;size</span><span class="text" id="span_004131" smilref="Programming_Robots_with_ROS00014.smil#span_004131">&gt;</span><span class="text" id="span_004132" smilref="Programming_Robots_with_ROS00014.smil#span_004132">0.4 0.4 0.02</span><span class="text" id="span_004133" smilref="Programming_Robots_with_ROS00014.smil#span_004133">&lt;/size&gt;</span><span class="text" id="span_004134" smilref="Programming_Robots_with_ROS00014.smil#span_004134">&lt;/box&gt;</span><span class="text" id="span_004135" smilref="Programming_Robots_with_ROS00014.smil#span_004135">&lt;/geometry&gt;</span>
        <span class="text" id="span_004136" smilref="Programming_Robots_with_ROS00014.smil#span_004136">&lt;material</span><span class="text" id="span_004137" smilref="Programming_Robots_with_ROS00014.smil#span_004137">&gt;</span><span class="text" id="span_004138" smilref="Programming_Robots_with_ROS00014.smil#span_004138">&lt;script</span><span class="text" id="span_004139" smilref="Programming_Robots_with_ROS00014.smil#span_004139">&gt;</span><span class="text" id="span_004140" smilref="Programming_Robots_with_ROS00014.smil#span_004140">&lt;name</span><span class="text" id="span_004141" smilref="Programming_Robots_with_ROS00014.smil#span_004141">&gt;</span><span class="text" id="span_004142" smilref="Programming_Robots_with_ROS00014.smil#span_004142">Gazebo/Blue</span><span class="text" id="span_004143" smilref="Programming_Robots_with_ROS00014.smil#span_004143">&lt;/name&gt;</span><span class="text" id="span_004144" smilref="Programming_Robots_with_ROS00014.smil#span_004144">&lt;/script&gt;</span><span class="text" id="span_004145" smilref="Programming_Robots_with_ROS00014.smil#span_004145">&lt;/material&gt;</span> <a class="co" id="ch14-co_stockroom_bot_CO1-7" href="#ch14-callout_stockroom_bot_CO1-7" external="false"><img src="images/7.jpg" alt="7" id="img_000128" /></a>
      <span class="text" id="span_004146" smilref="Programming_Robots_with_ROS00014.smil#span_004146">&lt;/visual&gt;</span>
      <span class="text" id="span_004147" smilref="Programming_Robots_with_ROS00014.smil#span_004147">&lt;visual</span> <span class="text" id="span_004148" smilref="Programming_Robots_with_ROS00014.smil#span_004148">name=</span><span class="text" id="span_004149" smilref="Programming_Robots_with_ROS00014.smil#span_004149">"visual_left"</span><span class="text" id="span_004150" smilref="Programming_Robots_with_ROS00014.smil#span_004150">&gt;</span>
        <span class="text" id="span_004151" smilref="Programming_Robots_with_ROS00014.smil#span_004151">&lt;pose</span><span class="text" id="span_004152" smilref="Programming_Robots_with_ROS00014.smil#span_004152">&gt;</span><span class="text" id="span_004153" smilref="Programming_Robots_with_ROS00014.smil#span_004153">-0.2 0 0.1 0 0 0</span><span class="text" id="span_004154" smilref="Programming_Robots_with_ROS00014.smil#span_004154">&lt;/pose&gt;</span>
        <span class="text" id="span_004155" smilref="Programming_Robots_with_ROS00014.smil#span_004155">&lt;geometry</span><span class="text" id="span_004156" smilref="Programming_Robots_with_ROS00014.smil#span_004156">&gt;</span><span class="text" id="span_004157" smilref="Programming_Robots_with_ROS00014.smil#span_004157">&lt;box</span><span class="text" id="span_004158" smilref="Programming_Robots_with_ROS00014.smil#span_004158">&gt;</span><span class="text" id="span_004159" smilref="Programming_Robots_with_ROS00014.smil#span_004159">&lt;size</span><span class="text" id="span_004160" smilref="Programming_Robots_with_ROS00014.smil#span_004160">&gt;</span><span class="text" id="span_004161" smilref="Programming_Robots_with_ROS00014.smil#span_004161">0.02 0.4 0.2</span><span class="text" id="span_004162" smilref="Programming_Robots_with_ROS00014.smil#span_004162">&lt;/size&gt;</span><span class="text" id="span_004163" smilref="Programming_Robots_with_ROS00014.smil#span_004163">&lt;/box&gt;</span><span class="text" id="span_004164" smilref="Programming_Robots_with_ROS00014.smil#span_004164">&lt;/geometry&gt;</span>
        <span class="text" id="span_004165" smilref="Programming_Robots_with_ROS00014.smil#span_004165">&lt;material</span><span class="text" id="span_004166" smilref="Programming_Robots_with_ROS00014.smil#span_004166">&gt;</span><span class="text" id="span_004167" smilref="Programming_Robots_with_ROS00014.smil#span_004167">&lt;script</span><span class="text" id="span_004168" smilref="Programming_Robots_with_ROS00014.smil#span_004168">&gt;</span><span class="text" id="span_004169" smilref="Programming_Robots_with_ROS00014.smil#span_004169">&lt;name</span><span class="text" id="span_004170" smilref="Programming_Robots_with_ROS00014.smil#span_004170">&gt;</span><span class="text" id="span_004171" smilref="Programming_Robots_with_ROS00014.smil#span_004171">Gazebo/Blue</span><span class="text" id="span_004172" smilref="Programming_Robots_with_ROS00014.smil#span_004172">&lt;/name&gt;</span><span class="text" id="span_004173" smilref="Programming_Robots_with_ROS00014.smil#span_004173">&lt;/script&gt;</span><span class="text" id="span_004174" smilref="Programming_Robots_with_ROS00014.smil#span_004174">&lt;/material&gt;</span>
      <span class="text" id="span_004175" smilref="Programming_Robots_with_ROS00014.smil#span_004175">&lt;/visual&gt;</span>
    <span class="text" id="span_004176" smilref="Programming_Robots_with_ROS00014.smil#span_004176">&lt;/link&gt;</span>
  <span class="text" id="span_004177" smilref="Programming_Robots_with_ROS00014.smil#span_004177">&lt;/model&gt;</span>
<span class="text" id="span_004178" smilref="Programming_Robots_with_ROS00014.smil#span_004178">&lt;/sdf&gt;</span></code>
                  </p>
                  <dl class="calloutlist" id="dl_000010">
                    <dt id="dt_000039">
                      <a class="co" id="ch14-callout_stockroom_bot_CO1-1" href="#ch14-co_stockroom_bot_CO1-1" external="false">
                        <img src="images/1.jpg" alt="1" id="img_000129" />
                      </a>
                    </dt>
                    <dd id="dd_000039">
                      <p id="p_000895">
                        <span class="text" id="span_004179" smilref="Programming_Robots_with_ROS00014.smil#span_004179">The</span>
                        <code xml:space="preserve" id="code_001306" smilref="Programming_Robots_with_ROS00014.smil#code_001306">&lt;model&gt;</code>
                        <span class="text" id="span_004180" smilref="Programming_Robots_with_ROS00014.smil#span_004180">tag's</span>
                        <code xml:space="preserve" id="code_001307" smilref="Programming_Robots_with_ROS00014.smil#code_001307">name</code>
                        <span class="text" id="span_004181" smilref="Programming_Robots_with_ROS00014.smil#span_004181">attribute must agree with the name in the</span>
                        <em id="em_000360" smilref="Programming_Robots_with_ROS00014.smil#em_000360">model.config</em>
                        <span class="text" id="span_004182" smilref="Programming_Robots_with_ROS00014.smil#span_004182">file.</span>
                      </p>
                    </dd>
                    <dt id="dt_000040">
                      <a class="co" id="ch14-callout_stockroom_bot_CO1-2" href="#ch14-co_stockroom_bot_CO1-2" external="false">
                        <img src="images/2.jpg" alt="2" id="img_000130" />
                      </a>
                    </dt>
                    <dd id="dd_000040">
                      <p id="p_000896">
                        <span class="text" id="span_004183" smilref="Programming_Robots_with_ROS00014.smil#span_004183">The</span>
                        <code xml:space="preserve" id="code_001308" smilref="Programming_Robots_with_ROS00014.smil#code_001308">&lt;static&gt;</code>
                        <span class="text" id="span_004184" smilref="Programming_Robots_with_ROS00014.smil#span_004184">tag means that Gazebo won't have to compute dynamics on this model. This saves considerable CPU time.</span>
                      </p>
                    </dd>
                    <dt id="dt_000041">
                      <a class="co" id="ch14-callout_stockroom_bot_CO1-3" href="#ch14-co_stockroom_bot_CO1-3" external="false">
                        <img src="images/3.jpg" alt="3" id="img_000131" />
                      </a>
                    </dt>
                    <dd id="dd_000041">
                      <p id="p_000897">
                        <span class="text" id="span_004185" smilref="Programming_Robots_with_ROS00014.smil#span_004185">The</span>
                        <code xml:space="preserve" id="code_001309" smilref="Programming_Robots_with_ROS00014.smil#code_001309">&lt;link&gt;</code>
                        <span class="text" id="span_004186" smilref="Programming_Robots_with_ROS00014.smil#span_004186">tag can include multiple</span>
                        <code xml:space="preserve" id="code_001310" smilref="Programming_Robots_with_ROS00014.smil#code_001310">&lt;collision&gt;</code>
                        <span class="text" id="span_004187" smilref="Programming_Robots_with_ROS00014.smil#span_004187">and</span>
                        <code xml:space="preserve" id="code_001311" smilref="Programming_Robots_with_ROS00014.smil#code_001311">&lt;visual&gt;</code>
                        <span class="text" id="span_004188" smilref="Programming_Robots_with_ROS00014.smil#span_004188">tags that describe the geometries used for physics and rendering, respectively. In this model, they are the same, but often the</span>
                        <code xml:space="preserve" id="code_001312" smilref="Programming_Robots_with_ROS00014.smil#code_001312">collision</code>
                        <span class="text" id="span_004189" smilref="Programming_Robots_with_ROS00014.smil#span_004189">shapes are much simpler than the</span>
                        <code xml:space="preserve" id="code_001313" smilref="Programming_Robots_with_ROS00014.smil#code_001313">visual</code>
                        <span class="text" id="span_004190" smilref="Programming_Robots_with_ROS00014.smil#span_004190">shapes.</span>
                      </p>
                    </dd>
                    <dt id="dt_000042">
                      <a class="co" id="ch14-callout_stockroom_bot_CO1-4" href="#ch14-co_stockroom_bot_CO1-4" external="false">
                        <img src="images/4.jpg" alt="4" id="img_000132" />
                      </a>
                    </dt>
                    <dd id="dd_000042">
                      <p class="keep-together" id="p_000898">
                        <span class="text" id="span_004191" smilref="Programming_Robots_with_ROS00014.smil#span_004191">This nesting of</span>
                        <code xml:space="preserve" id="code_001314" smilref="Programming_Robots_with_ROS00014.smil#code_001314">&lt;geometry&gt;&lt;box&gt;&lt;size&gt;</code>
                        <span class="text" id="span_004192" smilref="Programming_Robots_with_ROS00014.smil#span_004192">tags will create a 40 cm x 40 cm x 2 cm box. In the rest of the file, these tags are combined on the same line, for simplicity.</span>
                      </p>
                    </dd>
                    <dt id="dt_000043">
                      <a class="co" id="ch14-callout_stockroom_bot_CO1-5" href="#ch14-co_stockroom_bot_CO1-5" external="false">
                        <img src="images/5.jpg" alt="5" id="img_000133" />
                      </a>
                    </dt>
                    <dd id="dd_000043">
                      <p id="p_000899">
                        <span class="text" id="span_004193" smilref="Programming_Robots_with_ROS00014.smil#span_004193">Each</span>
                        <code xml:space="preserve" id="code_001315" smilref="Programming_Robots_with_ROS00014.smil#code_001315">collision</code>
                        <span class="text" id="span_004194" smilref="Programming_Robots_with_ROS00014.smil#span_004194">and</span>
                        <code xml:space="preserve" id="code_001316" smilref="Programming_Robots_with_ROS00014.smil#code_001316">visual</code>
                        <span class="text" id="span_004195" smilref="Programming_Robots_with_ROS00014.smil#span_004195">object must have a unique</span>
                        <code xml:space="preserve" id="code_001317" smilref="Programming_Robots_with_ROS00014.smil#code_001317">name</code>
                        <span class="text" id="span_004196" smilref="Programming_Robots_with_ROS00014.smil#span_004196">attribute!</span>
                      </p>
                    </dd>
                    <dt id="dt_000044">
                      <a class="co" id="ch14-callout_stockroom_bot_CO1-6" href="#ch14-co_stockroom_bot_CO1-6" external="false">
                        <img src="images/6.jpg" alt="6" id="img_000134" />
                      </a>
                    </dt>
                    <dd id="dd_000044">
                      <p id="p_000900">
                        <span class="text" id="span_004197" smilref="Programming_Robots_with_ROS00014.smil#span_004197">The</span>
                        <code xml:space="preserve" id="code_001318" smilref="Programming_Robots_with_ROS00014.smil#code_001318">&lt;pose&gt;</code>
                        <span class="text" id="span_004198" smilref="Programming_Robots_with_ROS00014.smil#span_004198">tag will move the</span>
                        <code xml:space="preserve" id="code_001319" smilref="Programming_Robots_with_ROS00014.smil#code_001319">geometry</code>
                        <span class="text" id="span_004199" smilref="Programming_Robots_with_ROS00014.smil#span_004199">objects in this tag away from the origin by the specified 6D (</span>
                        <em id="em_000361">
                          <code xml:space="preserve" id="code_001320" smilref="Programming_Robots_with_ROS00014.smil#code_001320">x y z roll pitch yaw</code>
                        </em>
                        <span class="text" id="span_004200" smilref="Programming_Robots_with_ROS00014.smil#span_004200">) transformation.</span>
                      </p>
                    </dd>
                    <dt id="dt_000045">
                      <a class="co" id="ch14-callout_stockroom_bot_CO1-7" href="#ch14-co_stockroom_bot_CO1-7" external="false">
                        <img src="images/7.jpg" alt="7" id="img_000135" />
                      </a>
                    </dt>
                    <dd id="dd_000045">
                      <p id="p_000901">
                        <span class="text" id="span_004201" smilref="Programming_Robots_with_ROS00014.smil#span_004201">This</span>
                        <code xml:space="preserve" id="code_001321" smilref="Programming_Robots_with_ROS00014.smil#code_001321">&lt;material&gt;</code>
                        <span class="text" id="span_004202" smilref="Programming_Robots_with_ROS00014.smil#span_004202">tag refers to a built-in Gazebo material to set the shape's color.</span>
                      </p>
                    </dd>
                  </dl>
                </div>
                <p id="p_000902">
                  <span class="text" id="span_004203" smilref="Programming_Robots_with_ROS00014.smil#span_004203">The bin model is shown rendered in Gazebo in</span>
                  <a data-type="xref" href="#ch14-bin_gazebojpg" external="false" id="a_000203" smilref="Programming_Robots_with_ROS00014.smil#a_000203">Figure 14-1</a>
                  <span class="text" id="span_004204" smilref="Programming_Robots_with_ROS00014.smil#span_004204">.</span>
                </p>
                <figure id="figure_000064">
                  <h1 id="h1_000283" smilref="Programming_Robots_with_ROS00014.smil#h1_000283">Figure 14-1. The bin described in Example 14-3 rendered Gazebo</h1>
                  <div id="ch14-bin_gazebojpg" class="figure">
                    <img src="images/prwr_1401.jpg" alt="Bin rendered in Gazebo" id="img_000136" />
                  </div>
                </figure>
                <p id="ch14-ix_14-stockroom_bot-asciidoc6" data-type="indexterm" data-primary="ALVAR marker system" data-secondary="bin labels">
                  <span class="text" id="span_004205" smilref="Programming_Robots_with_ROS00014.smil#span_004205">Our next task will be to create a label for each of the bins. In a human-operated stockroom, this is typically done by printing characters on labels that are attached to the bins. However, machine vision often works better with different forms of labels that are easier for algorithms to parse. The retail bar-code system is one well-known example of machine-friendly labeling. There are several newer forms of labeling that extend this concept into two dimensions, such as QR codes, which have impressive information density. However, in robotics, we are often interested not just in extracting text from a label, but also in calculating the orientation and distance of the label relative to the robot. Although there are several options available, in this chapter we will use the ALVAR marker system because it is already integrated with ROS and works quite well "out of the box." ALVAR marker tags are two-dimensional binary images, such as those in</span>
                  <a data-type="xref" href="#ch14-alvar_examples" external="false" id="a_000204" smilref="Programming_Robots_with_ROS00014.smil#a_000204">Figure 14-2</a>
                  <span class="text" id="span_004206" smilref="Programming_Robots_with_ROS00014.smil#span_004206">.</span>
                </p>
                <figure id="figure_000065">
                  <h1 id="h1_000284" smilref="Programming_Robots_with_ROS00014.smil#h1_000284">Figure 14-2. Example ALVAR marker tags that encode the numbers 0, 1, and 2</h1>
                  <div id="ch14-alvar_examples" class="figure">
                    <img src="images/prwr_1402.jpg" alt="ALVAR examples" id="img_000137" />
                  </div>
                </figure>
                <p id="p_000903">
                  <span class="text" id="span_004207" smilref="Programming_Robots_with_ROS00014.smil#span_004207">The encoding of these tags is carefully computed to reduce reading errors and to permit accurate calculation of the orientation and distance of the tag relative to a camera that images it. Some care is required to use them appropriately, such as solidly securing the tag's paper printout to a flat surface, and ensuring that the tag is printed at the correct scale; however by and large, ALVAR marker tags can work surprisingly well in a variety of application environments. Happily, there is a ready-made ROS package for recognizing ALVAR tags in ROS</span>
                  <code xml:space="preserve" id="code_001322" smilref="Programming_Robots_with_ROS00014.smil#code_001322">sensor_msgs/Image</code>
                  <span class="text" id="span_004208" smilref="Programming_Robots_with_ROS00014.smil#span_004208">messages. It can be installed the usual way on Ubuntu:</span>
                </p>
                <p id="p_000904">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001323"><span class="text" id="span_004209" smilref="Programming_Robots_with_ROS00014.smil#span_004209">
user@hostname$ </span><strong id="strong_000155" smilref="Programming_Robots_with_ROS00014.smil#strong_000155">sudo apt-get install ros-indigo-ar-track-alvar* imagemagick</strong>
</code>
                </p>
                <p id="p_000905" smilref="Programming_Robots_with_ROS00014.smil#p_000905">That package also provides a program that can create the ALVAR marker tags. Our simulated stockroom will have 12 bins, so we'll want to automatically create 12 ALVAR tag image, and 12 "material script" files, which are used by Gazebo and its underlying graphics engine (OGRE) to describe the visual properties of objects in the simulation, such as texture images that can be "plastered" on objects. Later on, we will reference these material scripts in a Gazebo world file.</p>
                <p id="p_000906">
                  <span class="text" id="span_004210" smilref="Programming_Robots_with_ROS00014.smil#span_004210">Like any repetitive task, we want to script the creation of the ALVAR tag images and the material script files, so that we can easily tweak the parameters and regenerate them as needed. Although any scripting language could be used, for consistency, we used Python to create a script for this purpose; it is listed in</span>
                  <a data-type="xref" href="#ch14-generate_tagspy" external="false" id="a_000205" smilref="Programming_Robots_with_ROS00014.smil#a_000205">Example 14-4</a>
                  <span class="text" id="span_004211" smilref="Programming_Robots_with_ROS00014.smil#span_004211">.</span>
                </p>
                <h1 id="h1_000285" smilref="Programming_Robots_with_ROS00014.smil#h1_000285">Example 14-4. generate_codes_and_materials.py</h1>
                <div id="ch14-generate_tagspy" data-type="example">
                  <p id="p_000907">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001324"><span class="text" id="span_004212" smilref="Programming_Robots_with_ROS00014.smil#span_004212">#!/usr/bin/env python</span>
<span class="text" id="span_004213" smilref="Programming_Robots_with_ROS00014.smil#span_004213">import</span> <span class="text" id="span_004214" smilref="Programming_Robots_with_ROS00014.smil#span_004214">os</span>
<span class="text" id="span_004215" smilref="Programming_Robots_with_ROS00014.smil#span_004215">for</span> <span class="text" id="span_004216" smilref="Programming_Robots_with_ROS00014.smil#span_004216">i</span> <span class="text" id="span_004217" smilref="Programming_Robots_with_ROS00014.smil#span_004217">in</span> <span class="text" id="span_004218" smilref="Programming_Robots_with_ROS00014.smil#span_004218">xrange</span><span class="text" id="span_004219" smilref="Programming_Robots_with_ROS00014.smil#span_004219">(</span><span class="text" id="span_004220" smilref="Programming_Robots_with_ROS00014.smil#span_004220">0</span><span class="text" id="span_004221" smilref="Programming_Robots_with_ROS00014.smil#span_004221">,</span><span class="text" id="span_004222" smilref="Programming_Robots_with_ROS00014.smil#span_004222">12</span><span class="text" id="span_004223" smilref="Programming_Robots_with_ROS00014.smil#span_004223">)</span><span class="text" id="span_004224" smilref="Programming_Robots_with_ROS00014.smil#span_004224">:</span>
    <span class="text" id="span_004225" smilref="Programming_Robots_with_ROS00014.smil#span_004225">os</span><span class="text" id="span_004226" smilref="Programming_Robots_with_ROS00014.smil#span_004226">.</span><span class="text" id="span_004227" smilref="Programming_Robots_with_ROS00014.smil#span_004227">system</span><span class="text" id="span_004228" smilref="Programming_Robots_with_ROS00014.smil#span_004228">(</span><span class="text" id="span_004229" smilref="Programming_Robots_with_ROS00014.smil#span_004229">"</span><span class="text" id="span_004230" smilref="Programming_Robots_with_ROS00014.smil#span_004230">rosrun ar_track_alvar createMarker {0}</span><span class="text" id="span_004231" smilref="Programming_Robots_with_ROS00014.smil#span_004231">"</span><span class="text" id="span_004232" smilref="Programming_Robots_with_ROS00014.smil#span_004232">.</span><span class="text" id="span_004233" smilref="Programming_Robots_with_ROS00014.smil#span_004233">format</span><span class="text" id="span_004234" smilref="Programming_Robots_with_ROS00014.smil#span_004234">(</span><span class="text" id="span_004235" smilref="Programming_Robots_with_ROS00014.smil#span_004235">i</span><span class="text" id="span_004236" smilref="Programming_Robots_with_ROS00014.smil#span_004236">)</span><span class="text" id="span_004237" smilref="Programming_Robots_with_ROS00014.smil#span_004237">)</span> <a class="co" id="ch14-co_stockroom_bot_CO2-1" href="#ch14-callout_stockroom_bot_CO2-1" external="false"><img src="images/1.jpg" alt="1" id="img_000138" /></a>
    <span class="text" id="span_004238" smilref="Programming_Robots_with_ROS00014.smil#span_004238">fn</span> <span class="text" id="span_004239" smilref="Programming_Robots_with_ROS00014.smil#span_004239">=</span> <span class="text" id="span_004240" smilref="Programming_Robots_with_ROS00014.smil#span_004240">"</span><span class="text" id="span_004241" smilref="Programming_Robots_with_ROS00014.smil#span_004241">MarkerData_{0}.png</span><span class="text" id="span_004242" smilref="Programming_Robots_with_ROS00014.smil#span_004242">"</span><span class="text" id="span_004243" smilref="Programming_Robots_with_ROS00014.smil#span_004243">.</span><span class="text" id="span_004244" smilref="Programming_Robots_with_ROS00014.smil#span_004244">format</span><span class="text" id="span_004245" smilref="Programming_Robots_with_ROS00014.smil#span_004245">(</span><span class="text" id="span_004246" smilref="Programming_Robots_with_ROS00014.smil#span_004246">i</span><span class="text" id="span_004247" smilref="Programming_Robots_with_ROS00014.smil#span_004247">)</span>
    <span class="text" id="span_004248" smilref="Programming_Robots_with_ROS00014.smil#span_004248">os</span><span class="text" id="span_004249" smilref="Programming_Robots_with_ROS00014.smil#span_004249">.</span><span class="text" id="span_004250" smilref="Programming_Robots_with_ROS00014.smil#span_004250">system</span><span class="text" id="span_004251" smilref="Programming_Robots_with_ROS00014.smil#span_004251">(</span><span class="text" id="span_004252" smilref="Programming_Robots_with_ROS00014.smil#span_004252">"</span><span class="text" id="span_004253" smilref="Programming_Robots_with_ROS00014.smil#span_004253">convert {0} -bordercolor white -border 100x100 {0}</span><span class="text" id="span_004254" smilref="Programming_Robots_with_ROS00014.smil#span_004254">"</span><span class="text" id="span_004255" smilref="Programming_Robots_with_ROS00014.smil#span_004255">.</span><span class="text" id="span_004256" smilref="Programming_Robots_with_ROS00014.smil#span_004256">format</span><span class="text" id="span_004257" smilref="Programming_Robots_with_ROS00014.smil#span_004257">(</span><span class="text" id="span_004258" smilref="Programming_Robots_with_ROS00014.smil#span_004258">fn</span><span class="text" id="span_004259" smilref="Programming_Robots_with_ROS00014.smil#span_004259">)</span><span class="text" id="span_004260" smilref="Programming_Robots_with_ROS00014.smil#span_004260">)</span> <a class="co" id="ch14-co_stockroom_bot_CO2-2" href="#ch14-callout_stockroom_bot_CO2-2" external="false"><img src="images/2.jpg" alt="2" id="img_000139" /></a>
    <span class="text" id="span_004261" smilref="Programming_Robots_with_ROS00014.smil#span_004261">with</span> <span class="text" id="span_004262" smilref="Programming_Robots_with_ROS00014.smil#span_004262">open</span><span class="text" id="span_004263" smilref="Programming_Robots_with_ROS00014.smil#span_004263">(</span><span class="text" id="span_004264" smilref="Programming_Robots_with_ROS00014.smil#span_004264">"</span><span class="text" id="span_004265" smilref="Programming_Robots_with_ROS00014.smil#span_004265">product_{0}.material</span><span class="text" id="span_004266" smilref="Programming_Robots_with_ROS00014.smil#span_004266">"</span><span class="text" id="span_004267" smilref="Programming_Robots_with_ROS00014.smil#span_004267">.</span><span class="text" id="span_004268" smilref="Programming_Robots_with_ROS00014.smil#span_004268">format</span><span class="text" id="span_004269" smilref="Programming_Robots_with_ROS00014.smil#span_004269">(</span><span class="text" id="span_004270" smilref="Programming_Robots_with_ROS00014.smil#span_004270">i</span><span class="text" id="span_004271" smilref="Programming_Robots_with_ROS00014.smil#span_004271">)</span><span class="text" id="span_004272" smilref="Programming_Robots_with_ROS00014.smil#span_004272">,</span> <span class="text" id="span_004273" smilref="Programming_Robots_with_ROS00014.smil#span_004273">'</span><span class="text" id="span_004274" smilref="Programming_Robots_with_ROS00014.smil#span_004274">w</span><span class="text" id="span_004275" smilref="Programming_Robots_with_ROS00014.smil#span_004275">'</span><span class="text" id="span_004276" smilref="Programming_Robots_with_ROS00014.smil#span_004276">)</span> <span class="text" id="span_004277" smilref="Programming_Robots_with_ROS00014.smil#span_004277">as</span> <span class="text" id="span_004278" smilref="Programming_Robots_with_ROS00014.smil#span_004278">f</span><span class="text" id="span_004279" smilref="Programming_Robots_with_ROS00014.smil#span_004279">:</span> <a class="co" id="ch14-co_stockroom_bot_CO2-3" href="#ch14-callout_stockroom_bot_CO2-3" external="false"><img src="images/3.jpg" alt="3" id="img_000140" /></a>
      <span class="text" id="span_004280" smilref="Programming_Robots_with_ROS00014.smil#span_004280">f</span><span class="text" id="span_004281" smilref="Programming_Robots_with_ROS00014.smil#span_004281">.</span><span class="text" id="span_004282" smilref="Programming_Robots_with_ROS00014.smil#span_004282">write</span><span class="text" id="span_004283" smilref="Programming_Robots_with_ROS00014.smil#span_004283">(</span><span class="text" id="span_004284" smilref="Programming_Robots_with_ROS00014.smil#span_004284">"""</span>
<span class="text" id="span_004285" smilref="Programming_Robots_with_ROS00014.smil#span_004285">material product_</span><span class="text" id="span_004286" smilref="Programming_Robots_with_ROS00014.smil#span_004286">%d</span><span class="text" id="span_004287" smilref="Programming_Robots_with_ROS00014.smil#span_004287"> {</span>
<span class="text" id="span_004288" smilref="Programming_Robots_with_ROS00014.smil#span_004288">  receive_shadows on</span>
<span class="text" id="span_004289" smilref="Programming_Robots_with_ROS00014.smil#span_004289">  technique {</span>
<span class="text" id="span_004290" smilref="Programming_Robots_with_ROS00014.smil#span_004290">    pass {</span>
<span class="text" id="span_004291" smilref="Programming_Robots_with_ROS00014.smil#span_004291">      ambient 1.0 1.0 1.0 1.0</span>
<span class="text" id="span_004292" smilref="Programming_Robots_with_ROS00014.smil#span_004292">      diffuse 1.0 1.0 1.0 1.0</span>
<span class="text" id="span_004293" smilref="Programming_Robots_with_ROS00014.smil#span_004293">      specular 0.5 0.5 0.5 1.0</span>
<span class="text" id="span_004294" smilref="Programming_Robots_with_ROS00014.smil#span_004294">      lighting on</span>
<span class="text" id="span_004295" smilref="Programming_Robots_with_ROS00014.smil#span_004295">      shading gouraud</span>
<span class="text" id="span_004296" smilref="Programming_Robots_with_ROS00014.smil#span_004296">      texture_unit { texture MarkerData_</span><span class="text" id="span_004297" smilref="Programming_Robots_with_ROS00014.smil#span_004297">%d</span><span class="text" id="span_004298" smilref="Programming_Robots_with_ROS00014.smil#span_004298">.png }</span>
<span class="text" id="span_004299" smilref="Programming_Robots_with_ROS00014.smil#span_004299">    }</span>
<span class="text" id="span_004300" smilref="Programming_Robots_with_ROS00014.smil#span_004300">  }</span>
<span class="text" id="span_004301" smilref="Programming_Robots_with_ROS00014.smil#span_004301">}</span>
<span class="text" id="span_004302" smilref="Programming_Robots_with_ROS00014.smil#span_004302">"""</span> <span class="text" id="span_004303" smilref="Programming_Robots_with_ROS00014.smil#span_004303">%</span> <span class="text" id="span_004304" smilref="Programming_Robots_with_ROS00014.smil#span_004304">(</span><span class="text" id="span_004305" smilref="Programming_Robots_with_ROS00014.smil#span_004305">i</span><span class="text" id="span_004306" smilref="Programming_Robots_with_ROS00014.smil#span_004306">,</span> <span class="text" id="span_004307" smilref="Programming_Robots_with_ROS00014.smil#span_004307">i</span><span class="text" id="span_004308" smilref="Programming_Robots_with_ROS00014.smil#span_004308">)</span><span class="text" id="span_004309" smilref="Programming_Robots_with_ROS00014.smil#span_004309">)</span></code>
                  </p>
                  <dl class="calloutlist" id="dl_000011">
                    <dt id="dt_000046">
                      <a class="co" id="ch14-callout_stockroom_bot_CO2-1" href="#ch14-co_stockroom_bot_CO2-1" external="false">
                        <img src="images/1.jpg" alt="1" id="img_000141" />
                      </a>
                    </dt>
                    <dd id="dd_000046">
                      <p id="p_000908">
                        <span class="text" id="span_004310" smilref="Programming_Robots_with_ROS00014.smil#span_004310">Runs the</span>
                        <code xml:space="preserve" id="code_001325" smilref="Programming_Robots_with_ROS00014.smil#code_001325">createMarker</code>
                        <span class="text" id="span_004311" smilref="Programming_Robots_with_ROS00014.smil#span_004311">program in the</span>
                        <code xml:space="preserve" id="code_001326" smilref="Programming_Robots_with_ROS00014.smil#code_001326">ar_track_alvar</code>
                        <span class="text" id="span_004312" smilref="Programming_Robots_with_ROS00014.smil#span_004312">package, which creates a PNG image that encodes the specified number. Although a more sophisticated program could use</span>
                        <code xml:space="preserve" id="code_001327" smilref="Programming_Robots_with_ROS00014.smil#code_001327">subprocess.call()</code>
                        <span class="text" id="span_004313" smilref="Programming_Robots_with_ROS00014.smil#span_004313">and check error codes, etc., this example is just trying to be as concise as possible.</span>
                      </p>
                    </dd>
                    <dt id="dt_000047">
                      <a class="co" id="ch14-callout_stockroom_bot_CO2-2" href="#ch14-co_stockroom_bot_CO2-2" external="false">
                        <img src="images/2.jpg" alt="2" id="img_000142" />
                      </a>
                    </dt>
                    <dd id="dd_000047">
                      <p id="p_000909" smilref="Programming_Robots_with_ROS00014.smil#p_000909">Runs the ImageMagick utility to add a thick white border around the ALVAR marker tag, to help improve recognition.</p>
                    </dd>
                    <dt id="dt_000048">
                      <a class="co" id="ch14-callout_stockroom_bot_CO2-3" href="#ch14-co_stockroom_bot_CO2-3" external="false">
                        <img src="images/3.jpg" alt="3" id="img_000143" />
                      </a>
                    </dt>
                    <dd id="dd_000048">
                      <p id="p_000910" smilref="Programming_Robots_with_ROS00014.smil#p_000910">Generates material scripts that include a reference (toward the end) to the ALVAR texture image.</p>
                    </dd>
                  </dl>
                </div>
                <h1 id="h1_000286" smilref="Programming_Robots_with_ROS00014.smil#h1_000286">Tip</h1>
                <div data-type="tip" id="div_000030">
                  <p id="ch14-idp33378672" data-type="indexterm" data-startref="ix_14-stockroom_bot-asciidoc6">
                    <span class="text" id="span_004314" smilref="Programming_Robots_with_ROS00014.smil#span_004314">The Eye-of-GNOME program, invoked using</span>
                    <code xml:space="preserve" id="code_001328" smilref="Programming_Robots_with_ROS00014.smil#code_001328">eog</code>
                    <span class="text" id="span_004315" smilref="Programming_Robots_with_ROS00014.smil#span_004315">, is a handy way to quickly view images on the command line, such as the ALVAR marker images produced by the</span>
                    <code xml:space="preserve" id="code_001329" smilref="Programming_Robots_with_ROS00015.smil#code_001329">ar_track_alvar createMarker</code>
                    <span class="text" id="span_004316" smilref="Programming_Robots_with_ROS00015.smil#span_004316">command.</span>
                  </p>
                </div>
                <p data-type="indexterm" data-startref="ix_14-stockroom_bot-asciidoc5" id="ch14-idp33992736" data-primary="XML" data-secondary="and Python template engine">
                  <span class="text" id="span_004317" smilref="Programming_Robots_with_ROS00015.smil#span_004317">Now that we have the ALVAR marker tag images and material scripts to label each bin, we're ready to make an entire stockroom full of them. Yet again, we are faced with a choice among an innumerable number of ways that we can do this. We could write a single massive XML file by hand that instantiates the bin model as many times as needed. That would work, but it would be painful if we decided we wanted a slightly different bin spacing in our simulated stockroom, which would require hand-editing many constants in the XML. We could also spawn the bin models programmatically, like we did for the chessboard. That would incur a bit of startup time, but it could work. Or we could use the xacro (XML Macros) language, but unfortunately that system doesn't allow</span>
                  <code xml:space="preserve" id="code_001330" smilref="Programming_Robots_with_ROS00015.smil#code_001330">for</code>
                  <span class="text" id="span_004318" smilref="Programming_Robots_with_ROS00015.smil#span_004318">loops, which means we'd still have quite a few constants repeated throughout the file. In this chapter, we'll show another way to create Gazebo worlds full of repetitive models: using a Python template engine.</span>
                </p>
                <p id="p_000911">
                  <span class="text" id="span_004319" smilref="Programming_Robots_with_ROS00015.smil#span_004319">A Python template engine will let us mix Python with our XML in the Gazebo world file. This will allow us, for example, to quickly create</span>
                  <code xml:space="preserve" id="code_001331" smilref="Programming_Robots_with_ROS00015.smil#code_001331">for</code>
                  <span class="text" id="span_004320" smilref="Programming_Robots_with_ROS00015.smil#span_004320">loops in the XML, which the Python template engine will process and expand into repeated blocks of XML code. We can also use "normal" programming constructs like functions and variables, which we'll use to shorten the code wherever possible.</span>
                </p>
                <p id="ch14-ix_14-stockroom_bot-asciidoc8" data-type="indexterm" data-primary="EmPy template engine" smilref="Programming_Robots_with_ROS00015.smil#ch14-ix_14-stockroom_bot-asciidoc8">There are many Python template engines available, but we'll use the EmPy engine in this example. Modeling a world with various types of repeating features is a complex task, and we will go through the templated world file in several sections.</p>
                <p id="p_000912" smilref="Programming_Robots_with_ROS00015.smil#p_000912">First, we need to install EmPy, if it isn't already installed on the system:</p>
                <p id="p_000913">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001332"><span class="text" id="span_004321" smilref="Programming_Robots_with_ROS00015.smil#span_004321">
user@hostname$ </span><strong id="strong_000156" smilref="Programming_Robots_with_ROS00015.smil#strong_000156">sudo apt-get install python-empy</strong>
</code>
                </p>
                <p id="p_000914">
                  <span class="text" id="span_004322" smilref="Programming_Robots_with_ROS00015.smil#span_004322">The start of the file to generate the XML Gazebo would for the stockroom simulationis shown in</span>
                  <a data-type="xref" href="#ch14-aisleworldem" external="false" id="a_000206" smilref="Programming_Robots_with_ROS00015.smil#a_000206">Example 14-5</a>
                  <span class="text" id="span_004323" smilref="Programming_Robots_with_ROS00015.smil#span_004323">.</span>
                </p>
                <h1 id="h1_000287" smilref="Programming_Robots_with_ROS00015.smil#h1_000287">Example 14-5. Header of the EmPy template to generate the Gazebo world</h1>
                <div id="ch14-aisleworldem" data-type="example">
                  <p id="p_000915">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001333"><span class="text" id="span_004324" smilref="Programming_Robots_with_ROS00015.smil#span_004324">&lt;?xml version="1.0" ?&gt;</span>
<span class="text" id="span_004325" smilref="Programming_Robots_with_ROS00015.smil#span_004325">&lt;sdf</span> <span class="text" id="span_004326" smilref="Programming_Robots_with_ROS00015.smil#span_004326">version=</span><span class="text" id="span_004327" smilref="Programming_Robots_with_ROS00015.smil#span_004327">"1.4"</span><span class="text" id="span_004328" smilref="Programming_Robots_with_ROS00015.smil#span_004328">&gt;</span>
<span class="text" id="span_004329" smilref="Programming_Robots_with_ROS00015.smil#span_004329">&lt;world</span> <span class="text" id="span_004330" smilref="Programming_Robots_with_ROS00015.smil#span_004330">name=</span><span class="text" id="span_004331" smilref="Programming_Robots_with_ROS00015.smil#span_004331">"stockroom"</span><span class="text" id="span_004332" smilref="Programming_Robots_with_ROS00015.smil#span_004332">&gt;</span>
<span class="text" id="span_004333" smilref="Programming_Robots_with_ROS00015.smil#span_004333">&lt;gui</span><span class="text" id="span_004334" smilref="Programming_Robots_with_ROS00015.smil#span_004334">&gt;</span>
  <span class="text" id="span_004335" smilref="Programming_Robots_with_ROS00015.smil#span_004335">&lt;camera</span> <span class="text" id="span_004336" smilref="Programming_Robots_with_ROS00015.smil#span_004336">name=</span><span class="text" id="span_004337" smilref="Programming_Robots_with_ROS00015.smil#span_004337">"camera"</span><span class="text" id="span_004338" smilref="Programming_Robots_with_ROS00015.smil#span_004338">&gt;</span> <a class="co" id="ch14-co_stockroom_bot_CO3-1" href="#ch14-callout_stockroom_bot_CO3-1" external="false"><img src="images/1.jpg" alt="1" id="img_000144" /></a>
    <span class="text" id="span_004339" smilref="Programming_Robots_with_ROS00015.smil#span_004339">&lt;pose</span><span class="text" id="span_004340" smilref="Programming_Robots_with_ROS00015.smil#span_004340">&gt;</span><span class="text" id="span_004341" smilref="Programming_Robots_with_ROS00015.smil#span_004341">3 -2 3.5 0.0 .85 2.4</span><span class="text" id="span_004342" smilref="Programming_Robots_with_ROS00015.smil#span_004342">&lt;/pose&gt;</span>
    <span class="text" id="span_004343" smilref="Programming_Robots_with_ROS00015.smil#span_004343">&lt;view_controller</span><span class="text" id="span_004344" smilref="Programming_Robots_with_ROS00015.smil#span_004344">&gt;</span><span class="text" id="span_004345" smilref="Programming_Robots_with_ROS00015.smil#span_004345">orbit</span><span class="text" id="span_004346" smilref="Programming_Robots_with_ROS00015.smil#span_004346">&lt;/view_controller&gt;</span>
  <span class="text" id="span_004347" smilref="Programming_Robots_with_ROS00015.smil#span_004347">&lt;/camera&gt;</span>
<span class="text" id="span_004348" smilref="Programming_Robots_with_ROS00015.smil#span_004348">&lt;/gui&gt;</span>
<span class="text" id="span_004349" smilref="Programming_Robots_with_ROS00015.smil#span_004349">&lt;include</span><span class="text" id="span_004350" smilref="Programming_Robots_with_ROS00015.smil#span_004350">&gt;</span><span class="text" id="span_004351" smilref="Programming_Robots_with_ROS00015.smil#span_004351">&lt;uri</span><span class="text" id="span_004352" smilref="Programming_Robots_with_ROS00015.smil#span_004352">&gt;</span><span class="text" id="span_004353" smilref="Programming_Robots_with_ROS00015.smil#span_004353">model://sun</span><span class="text" id="span_004354" smilref="Programming_Robots_with_ROS00015.smil#span_004354">&lt;/uri&gt;</span><span class="text" id="span_004355" smilref="Programming_Robots_with_ROS00015.smil#span_004355">&lt;/include&gt;</span>
<span class="text" id="span_004356" smilref="Programming_Robots_with_ROS00015.smil#span_004356">&lt;include</span><span class="text" id="span_004357" smilref="Programming_Robots_with_ROS00015.smil#span_004357">&gt;</span><span class="text" id="span_004358" smilref="Programming_Robots_with_ROS00015.smil#span_004358">&lt;uri</span><span class="text" id="span_004359" smilref="Programming_Robots_with_ROS00015.smil#span_004359">&gt;</span><span class="text" id="span_004360" smilref="Programming_Robots_with_ROS00015.smil#span_004360">model://ground_plane</span><span class="text" id="span_004361" smilref="Programming_Robots_with_ROS00015.smil#span_004361">&lt;/uri&gt;</span><span class="text" id="span_004362" smilref="Programming_Robots_with_ROS00015.smil#span_004362">&lt;/include&gt;</span></code>
                  </p>
                  <dl class="calloutlist" id="dl_000012">
                    <dt id="dt_000049">
                      <a class="co" id="ch14-callout_stockroom_bot_CO3-1" href="#ch14-co_stockroom_bot_CO3-1" external="false">
                        <img src="images/1.jpg" alt="1" id="img_000145" />
                      </a>
                    </dt>
                    <dd id="dd_000049">
                      <p id="p_000916">
                        <span class="text" id="span_004363" smilref="Programming_Robots_with_ROS00015.smil#span_004363">The</span>
                        <code xml:space="preserve" id="code_001334" smilref="Programming_Robots_with_ROS00015.smil#code_001334">&lt;camera&gt;</code>
                        <span class="text" id="span_004364" smilref="Programming_Robots_with_ROS00015.smil#span_004364">tag specifies a camera location, so that you don't have to manually move the camera to a useful vantage point every time you start the simulation.</span>
                      </p>
                    </dd>
                  </dl>
                </div>
                <p id="p_000917">
                  <span class="text" id="span_004365" smilref="Programming_Robots_with_ROS00015.smil#span_004365">So far, so good. But now things get a bit unusual: the EmPy templating engine can "interleave" Python with XML, using the at sign (</span>
                  <code xml:space="preserve" id="code_001335" smilref="Programming_Robots_with_ROS00015.smil#code_001335">@</code>
                  <span class="text" id="span_004366" smilref="Programming_Robots_with_ROS00015.smil#span_004366">) symbol as a delimiter. Anything within curly braces following an at sight (</span>
                  <code xml:space="preserve" id="code_001336" smilref="Programming_Robots_with_ROS00015.smil#code_001336">@{}</code>
                  <span class="text" id="span_004367" smilref="Programming_Robots_with_ROS00015.smil#span_004367">)will execute as "normal" Python code. Anything within parentheses (</span>
                  <code xml:space="preserve" id="code_001337" smilref="Programming_Robots_with_ROS00015.smil#code_001337">@()</code>
                  <span class="text" id="span_004368" smilref="Programming_Robots_with_ROS00015.smil#span_004368">) will be evaluated as a Python expression, and the evaluation of the expression will be pasted into the XML document in the place of the</span>
                  <code xml:space="preserve" id="code_001338" smilref="Programming_Robots_with_ROS00015.smil#code_001338">@()</code>
                  <span class="text" id="span_004369" smilref="Programming_Robots_with_ROS00015.smil#span_004369">expression. Finally, anything within square brackets (</span>
                  <code xml:space="preserve" id="code_001339" smilref="Programming_Robots_with_ROS00015.smil#code_001339">@[]</code>
                  <span class="text" id="span_004370" smilref="Programming_Robots_with_ROS00015.smil#span_004370">) is considered a Python control structure to be used by EmPy:</span>
                  <code xml:space="preserve" id="code_001340" smilref="Programming_Robots_with_ROS00015.smil#code_001340">for</code>
                  <span class="text" id="span_004371" smilref="Programming_Robots_with_ROS00015.smil#span_004371">loops,</span>
                  <code xml:space="preserve" id="code_001341" smilref="Programming_Robots_with_ROS00015.smil#code_001341">if/else</code>
                  <span class="text" id="span_004372" smilref="Programming_Robots_with_ROS00015.smil#span_004372">blocks, and so on. EmPy, of course, is a large system with its own manual, but those three rules are enough to be able to understand the code. Keeping that EmPy syntax in mind, the EmPy XML template used to generate an aisle of bins is shown in</span>
                  <a data-type="xref" href="#ch14-aislebinsem" external="false" id="a_000207" smilref="Programming_Robots_with_ROS00015.smil#a_000207">Example 14-6</a>
                  <span class="text" id="span_004373" smilref="Programming_Robots_with_ROS00015.smil#span_004373">.</span>
                </p>
                <h1 id="h1_000288" smilref="Programming_Robots_with_ROS00015.smil#h1_000288">Example 14-6. Section of EmPy XML template used to generate two rows of bins</h1>
                <div id="ch14-aislebinsem" data-type="example" class="pagebreak-before">
                  <p id="p_000918">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001342"><span class="text" id="span_004374" smilref="Programming_Robots_with_ROS00015.smil#span_004374">@{from numpy import arange} </span><a class="co" id="ch14-co_stockroom_bot_CO4-1" href="#ch14-callout_stockroom_bot_CO4-1" external="false"><img src="images/1.jpg" alt="1" id="img_000146" /></a><span class="text" id="span_004375" smilref="Programming_Robots_with_ROS00015.smil#span_004375">
@{bin_count = 0}
@[for side in ['left','right']] </span><a class="co" id="ch14-co_stockroom_bot_CO4-2" href="#ch14-callout_stockroom_bot_CO4-2" external="false"><img src="images/2.jpg" alt="2" id="img_000147" /></a><span class="text" id="span_004376" smilref="Programming_Robots_with_ROS00015.smil#span_004376">
  @[if side == 'left']
    @{y = -1.5} </span><a class="co" id="ch14-co_stockroom_bot_CO4-3" href="#ch14-callout_stockroom_bot_CO4-3" external="false"><img src="images/3.jpg" alt="3" id="img_000148" /></a><span class="text" id="span_004377" smilref="Programming_Robots_with_ROS00015.smil#span_004377">
    @{yaw = 3.1415}
  @[else]
    @{y = 1.5}
    @{yaw = 0}
  @[end if]
  @[for x in arange(-1.5, 1.5, 0.5)] </span><a class="co" id="ch14-co_stockroom_bot_CO4-4" href="#ch14-callout_stockroom_bot_CO4-4" external="false"><img src="images/4.jpg" alt="4" id="img_000149" /></a>
    <span class="text" id="span_004378" smilref="Programming_Robots_with_ROS00015.smil#span_004378">&lt;include</span><span class="text" id="span_004379" smilref="Programming_Robots_with_ROS00015.smil#span_004379">&gt;</span>
      <span class="text" id="span_004380" smilref="Programming_Robots_with_ROS00015.smil#span_004380">&lt;name</span><span class="text" id="span_004381" smilref="Programming_Robots_with_ROS00015.smil#span_004381">&gt;</span><span class="text" id="span_004382" smilref="Programming_Robots_with_ROS00015.smil#span_004382">bin_@(bin_count)</span><span class="text" id="span_004383" smilref="Programming_Robots_with_ROS00015.smil#span_004383">&lt;/name&gt;</span> <a class="co" id="ch14-co_stockroom_bot_CO4-5" href="#ch14-callout_stockroom_bot_CO4-5" external="false"><img src="images/5.jpg" alt="5" id="img_000150" /></a>
      <span class="text" id="span_004384" smilref="Programming_Robots_with_ROS00015.smil#span_004384">&lt;pose</span><span class="text" id="span_004385" smilref="Programming_Robots_with_ROS00015.smil#span_004385">&gt;</span><span class="text" id="span_004386" smilref="Programming_Robots_with_ROS00015.smil#span_004386">@(x) @(y) 0.5 0 0 @(yaw)</span><span class="text" id="span_004387" smilref="Programming_Robots_with_ROS00015.smil#span_004387">&lt;/pose&gt;</span> <a class="co" id="ch14-co_stockroom_bot_CO4-6" href="#ch14-callout_stockroom_bot_CO4-6" external="false"><img src="images/6.jpg" alt="6" id="img_000151" /></a>
      <span class="text" id="span_004388" smilref="Programming_Robots_with_ROS00015.smil#span_004388">&lt;uri</span><span class="text" id="span_004389" smilref="Programming_Robots_with_ROS00015.smil#span_004389">&gt;</span><span class="text" id="span_004390" smilref="Programming_Robots_with_ROS00015.smil#span_004390">model://bin</span><span class="text" id="span_004391" smilref="Programming_Robots_with_ROS00015.smil#span_004391">&lt;/uri&gt;</span> <a class="co" id="ch14-co_stockroom_bot_CO4-7" href="#ch14-callout_stockroom_bot_CO4-7" external="false"><img src="images/7.jpg" alt="7" id="img_000152" /></a>
    <span class="text" id="span_004392" smilref="Programming_Robots_with_ROS00015.smil#span_004392">&lt;/include&gt;</span>
    <span class="text" id="span_004393" smilref="Programming_Robots_with_ROS00015.smil#span_004393">&lt;model</span> <span class="text" id="span_004394" smilref="Programming_Robots_with_ROS00015.smil#span_004394">name=</span><span class="text" id="span_004395" smilref="Programming_Robots_with_ROS00015.smil#span_004395">"bin_@(bin_count)_tag"</span><span class="text" id="span_004396" smilref="Programming_Robots_with_ROS00015.smil#span_004396">&gt;</span> <a class="co" id="ch14-co_stockroom_bot_CO4-8" href="#ch14-callout_stockroom_bot_CO4-8" external="false"><img src="images/8.jpg" alt="8" id="img_000153" /></a>
      <span class="text" id="span_004397" smilref="Programming_Robots_with_ROS00015.smil#span_004397">&lt;static</span><span class="text" id="span_004398" smilref="Programming_Robots_with_ROS00015.smil#span_004398">&gt;</span><span class="text" id="span_004399" smilref="Programming_Robots_with_ROS00015.smil#span_004399">true</span><span class="text" id="span_004400" smilref="Programming_Robots_with_ROS00015.smil#span_004400">&lt;/static&gt;</span>
      <span class="text" id="span_004401" smilref="Programming_Robots_with_ROS00015.smil#span_004401">&lt;pose</span><span class="text" id="span_004402" smilref="Programming_Robots_with_ROS00015.smil#span_004402">&gt;</span><span class="text" id="span_004403" smilref="Programming_Robots_with_ROS00015.smil#span_004403">@(x) @(y*1.125) 0.63 0 0 @(yaw)</span><span class="text" id="span_004404" smilref="Programming_Robots_with_ROS00015.smil#span_004404">&lt;/pose&gt;</span> <a class="co" id="ch14-co_stockroom_bot_CO4-9" href="#ch14-callout_stockroom_bot_CO4-9" external="false"><img src="images/9.jpg" alt="9" id="img_000154" /></a>
      <span class="text" id="span_004405" smilref="Programming_Robots_with_ROS00015.smil#span_004405">&lt;link</span> <span class="text" id="span_004406" smilref="Programming_Robots_with_ROS00015.smil#span_004406">name=</span><span class="text" id="span_004407" smilref="Programming_Robots_with_ROS00015.smil#span_004407">"link"</span><span class="text" id="span_004408" smilref="Programming_Robots_with_ROS00015.smil#span_004408">&gt;</span>
        <span class="text" id="span_004409" smilref="Programming_Robots_with_ROS00015.smil#span_004409">&lt;visual</span> <span class="text" id="span_004410" smilref="Programming_Robots_with_ROS00015.smil#span_004410">name=</span><span class="text" id="span_004411" smilref="Programming_Robots_with_ROS00015.smil#span_004411">"visual"</span><span class="text" id="span_004412" smilref="Programming_Robots_with_ROS00015.smil#span_004412">&gt;</span>
          <span class="text" id="span_004413" smilref="Programming_Robots_with_ROS00015.smil#span_004413">&lt;geometry</span><span class="text" id="span_004414" smilref="Programming_Robots_with_ROS00015.smil#span_004414">&gt;</span><span class="text" id="span_004415" smilref="Programming_Robots_with_ROS00015.smil#span_004415">&lt;box</span><span class="text" id="span_004416" smilref="Programming_Robots_with_ROS00015.smil#span_004416">&gt;</span><span class="text" id="span_004417" smilref="Programming_Robots_with_ROS00015.smil#span_004417">&lt;size</span><span class="text" id="span_004418" smilref="Programming_Robots_with_ROS00015.smil#span_004418">&gt;</span><span class="text" id="span_004419" smilref="Programming_Robots_with_ROS00015.smil#span_004419">0.2 0.01 0.2</span><span class="text" id="span_004420" smilref="Programming_Robots_with_ROS00015.smil#span_004420">&lt;/size&gt;</span><span class="text" id="span_004421" smilref="Programming_Robots_with_ROS00015.smil#span_004421">&lt;/box&gt;</span><span class="text" id="span_004422" smilref="Programming_Robots_with_ROS00015.smil#span_004422">&lt;/geometry&gt;</span>
          <span class="text" id="span_004423" smilref="Programming_Robots_with_ROS00015.smil#span_004423">&lt;material</span><span class="text" id="span_004424" smilref="Programming_Robots_with_ROS00015.smil#span_004424">&gt;</span>
            <span class="text" id="span_004425" smilref="Programming_Robots_with_ROS00015.smil#span_004425">&lt;script</span><span class="text" id="span_004426" smilref="Programming_Robots_with_ROS00015.smil#span_004426">&gt;</span>
              <span class="text" id="span_004427" smilref="Programming_Robots_with_ROS00015.smil#span_004427">&lt;uri</span><span class="text" id="span_004428" smilref="Programming_Robots_with_ROS00015.smil#span_004428">&gt;</span><span class="text" id="span_004429" smilref="Programming_Robots_with_ROS00015.smil#span_004429">model://bin/tags</span><span class="text" id="span_004430" smilref="Programming_Robots_with_ROS00015.smil#span_004430">&lt;/uri&gt;</span> <a class="co" id="ch14-co_stockroom_bot_CO4-10" href="#ch14-callout_stockroom_bot_CO4-10" external="false"><img src="images/10.jpg" alt="10" id="img_000155" /></a>
              <span class="text" id="span_004431" smilref="Programming_Robots_with_ROS00015.smil#span_004431">&lt;name</span><span class="text" id="span_004432" smilref="Programming_Robots_with_ROS00015.smil#span_004432">&gt;</span><span class="text" id="span_004433" smilref="Programming_Robots_with_ROS00015.smil#span_004433">product_@(bin_count)</span><span class="text" id="span_004434" smilref="Programming_Robots_with_ROS00015.smil#span_004434">&lt;/name&gt;</span> <a class="co" id="ch14-co_stockroom_bot_CO4-11" href="#ch14-callout_stockroom_bot_CO4-11" external="false"><img src="images/11.jpg" alt="11" id="img_000156" /></a>
            <span class="text" id="span_004435" smilref="Programming_Robots_with_ROS00015.smil#span_004435">&lt;/script&gt;</span>
          <span class="text" id="span_004436" smilref="Programming_Robots_with_ROS00015.smil#span_004436">&lt;/material&gt;</span>
        <span class="text" id="span_004437" smilref="Programming_Robots_with_ROS00015.smil#span_004437">&lt;/visual&gt;</span>
      <span class="text" id="span_004438" smilref="Programming_Robots_with_ROS00015.smil#span_004438">&lt;/link&gt;</span>
    <span class="text" id="span_004439" smilref="Programming_Robots_with_ROS00015.smil#span_004439">&lt;/model&gt;</span><span class="text" id="span_004440" smilref="Programming_Robots_with_ROS00015.smil#span_004440">
    @{bin_count += 1}
  @[end for]
@[end for]</span></code>
                  </p>
                  <dl class="calloutlist" id="dl_000013">
                    <dt id="dt_000050">
                      <a class="co" id="ch14-callout_stockroom_bot_CO4-1" href="#ch14-co_stockroom_bot_CO4-1" external="false">
                        <img src="images/1.jpg" alt="1" id="img_000157" />
                      </a>
                    </dt>
                    <dd id="dd_000050">
                      <p id="p_000919" smilref="Programming_Robots_with_ROS00015.smil#p_000919">This is "normal" Python: we can import packages as usual.</p>
                    </dd>
                    <dt id="dt_000051">
                      <a class="co" id="ch14-callout_stockroom_bot_CO4-2" href="#ch14-co_stockroom_bot_CO4-2" external="false">
                        <img src="images/2.jpg" alt="2" id="img_000158" />
                      </a>
                    </dt>
                    <dd id="dd_000051">
                      <p id="p_000920" smilref="Programming_Robots_with_ROS00015.smil#p_000920">Despite the funny escape brackets, this is again just "normal" Python.</p>
                    </dd>
                    <dt id="dt_000052">
                      <a class="co" id="ch14-callout_stockroom_bot_CO4-3" href="#ch14-co_stockroom_bot_CO4-3" external="false">
                        <img src="images/3.jpg" alt="3" id="img_000159" />
                      </a>
                    </dt>
                    <dd id="dd_000052">
                      <p id="p_000921">
                        <span class="text" id="span_004441" smilref="Programming_Robots_with_ROS00015.smil#span_004441">The</span>
                        <em id="em_000362">
                          <code xml:space="preserve" id="code_001343" smilref="Programming_Robots_with_ROS00015.smil#code_001343">y</code>
                        </em>
                        <span class="text" id="span_004442" smilref="Programming_Robots_with_ROS00015.smil#span_004442">and</span>
                        <em id="em_000363">
                          <code xml:space="preserve" id="code_001344" smilref="Programming_Robots_with_ROS00015.smil#code_001344">yaw</code>
                        </em>
                        <span class="text" id="span_004443" smilref="Programming_Robots_with_ROS00015.smil#span_004443">variables differ depending on whether we're on the left or right side of the aisle of bins.</span>
                      </p>
                    </dd>
                    <dt id="dt_000053">
                      <a class="co" id="ch14-callout_stockroom_bot_CO4-4" href="#ch14-co_stockroom_bot_CO4-4" external="false">
                        <img src="images/4.jpg" alt="4" id="img_000160" />
                      </a>
                    </dt>
                    <dd id="dd_000053">
                      <p id="p_000922">
                        <span class="text" id="span_004444" smilref="Programming_Robots_with_ROS00015.smil#span_004444">The</span>
                        <code xml:space="preserve" id="code_001345" smilref="Programming_Robots_with_ROS00015.smil#code_001345">numpy</code>
                        <code xml:space="preserve" id="code_001346" smilref="Programming_Robots_with_ROS00015.smil#code_001346">arange()</code>
                        <span class="text" id="span_004445" smilref="Programming_Robots_with_ROS00015.smil#span_004445">function lets us increment a</span>
                        <code xml:space="preserve" id="code_001347" smilref="Programming_Robots_with_ROS00015.smil#code_001347">for</code>
                        <span class="text" id="span_004446" smilref="Programming_Robots_with_ROS00015.smil#span_004446">loop using a floating-point step, which, in this case, we will use to position the bins.</span>
                      </p>
                    </dd>
                    <dt id="dt_000054">
                      <a class="co" id="ch14-callout_stockroom_bot_CO4-5" href="#ch14-co_stockroom_bot_CO4-5" external="false">
                        <img src="images/5.jpg" alt="5" id="img_000161" />
                      </a>
                    </dt>
                    <dd id="dd_000054">
                      <p id="p_000923">
                        <span class="text" id="span_004447" smilref="Programming_Robots_with_ROS00015.smil#span_004447">The</span>
                        <code xml:space="preserve" id="code_001348" smilref="Programming_Robots_with_ROS00015.smil#code_001348">@(bin_count)</code>
                        <span class="text" id="span_004448" smilref="Programming_Robots_with_ROS00015.smil#span_004448">expression is used to generate unique model names for the bins in Gazebo.</span>
                      </p>
                    </dd>
                    <dt id="dt_000055">
                      <a class="co" id="ch14-callout_stockroom_bot_CO4-6" href="#ch14-co_stockroom_bot_CO4-6" external="false">
                        <img src="images/6.jpg" alt="6" id="img_000162" />
                      </a>
                    </dt>
                    <dd id="dd_000055">
                      <p id="p_000924">
                        <span class="text" id="span_004449" smilref="Programming_Robots_with_ROS00015.smil#span_004449">The position variables are used to space the bins appropriately. Note that by varying the</span>
                        <em id="em_000364">
                          <code xml:space="preserve" id="code_001349" smilref="Programming_Robots_with_ROS00015.smil#code_001349">y</code>
                        </em>
                        <span class="text" id="span_004450" smilref="Programming_Robots_with_ROS00015.smil#span_004450">and the step of the</span>
                        <em id="em_000365">
                          <code xml:space="preserve" id="code_001350" smilref="Programming_Robots_with_ROS00015.smil#code_001350">x</code>
                        </em>
                        <span class="text" id="span_004451" smilref="Programming_Robots_with_ROS00015.smil#span_004451">variable, we can easily change the layout of the bin spacing.</span>
                      </p>
                    </dd>
                    <dt id="dt_000056">
                      <a class="co" id="ch14-callout_stockroom_bot_CO4-7" href="#ch14-co_stockroom_bot_CO4-7" external="false">
                        <img src="images/7.jpg" alt="7" id="img_000163" />
                      </a>
                    </dt>
                    <dd id="dd_000056">
                      <p id="p_000925">
                        <span class="text" id="span_004452" smilref="Programming_Robots_with_ROS00015.smil#span_004452">This refers to the bin model that we made earlier in this chapter, thanks to the</span>
                        <code xml:space="preserve" id="code_001351" smilref="Programming_Robots_with_ROS00015.smil#code_001351">GAZEBO_MODEL_PATH</code>
                        <span class="text" id="span_004453" smilref="Programming_Robots_with_ROS00015.smil#span_004453">variable we have set in our environment.</span>
                      </p>
                    </dd>
                    <dt id="dt_000057">
                      <a class="co" id="ch14-callout_stockroom_bot_CO4-8" href="#ch14-co_stockroom_bot_CO4-8" external="false">
                        <img src="images/8.jpg" alt="8" id="img_000164" />
                      </a>
                    </dt>
                    <dd id="dd_000057">
                      <p id="p_000926" smilref="Programming_Robots_with_ROS00015.smil#p_000926">Next, we will create thin boxes that will be "painted" with the ALVAR markers, to label the bins.</p>
                    </dd>
                    <dt id="dt_000058">
                      <a class="co" id="ch14-callout_stockroom_bot_CO4-9" href="#ch14-co_stockroom_bot_CO4-9" external="false">
                        <img src="images/9.jpg" alt="9" id="img_000165" />
                      </a>
                    </dt>
                    <dd id="dd_000058">
                      <p id="p_000927" smilref="Programming_Robots_with_ROS00015.smil#p_000927">The tags will be positioned on the back walls of the bins.</p>
                    </dd>
                    <dt id="dt_000059">
                      <a class="co" id="ch14-callout_stockroom_bot_CO4-10" href="#ch14-co_stockroom_bot_CO4-10" external="false">
                        <img src="images/10.jpg" alt="10" id="img_000166" />
                      </a>
                    </dt>
                    <dd id="dd_000059">
                      <p id="p_000928">
                        <span class="text" id="span_004454" smilref="Programming_Robots_with_ROS00015.smil#span_004454">The</span>
                        <code xml:space="preserve" id="code_001352" smilref="Programming_Robots_with_ROS00015.smil#code_001352">uri&gt;</code>
                        <span class="text" id="span_004455" smilref="Programming_Robots_with_ROS00015.smil#span_004455">tag tells Gazebo where we have placed the material scripts.</span>
                      </p>
                    </dd>
                    <dt id="dt_000060">
                      <a class="co" id="ch14-callout_stockroom_bot_CO4-11" href="#ch14-co_stockroom_bot_CO4-11" external="false">
                        <img src="images/11.jpg" alt="11" id="img_000167" />
                      </a>
                    </dt>
                    <dd id="dd_000060">
                      <p id="ch14-idp34260272" data-type="indexterm" data-startref="ix_14-stockroom_bot-asciidoc8" smilref="Programming_Robots_with_ROS00015.smil#ch14-idp34260272">This expression references the material scripts that we made previously, which, in turn, reference the actual ALVAR marker images.</p>
                    </dd>
                  </dl>
                </div>
                <p id="p_000929">
                  <span class="text" id="span_004456" smilref="Programming_Robots_with_ROS00015.smil#span_004456">The EmPy XML in</span>
                  <a data-type="xref" href="#ch14-aislebinsem" external="false" id="a_000208" smilref="Programming_Robots_with_ROS00015.smil#a_000208">Example 14-6</a>
                  <span class="text" id="span_004457" smilref="Programming_Robots_with_ROS00015.smil#span_004457">is enough to create the bins, but we also need some walls in our stockroom so that the robot's laser scanner can have something to localize against. Again, there are many ways to model walls, but since we were already evaluating the Gazebo world file with the EmPy template engine, we opted to define the walls using Python functions in EmPy, as shown in</span>
                  <a data-type="xref" href="#ch14-aislewalls" external="false" id="a_000209" smilref="Programming_Robots_with_ROS00015.smil#a_000209">Example 14-7</a>
                  <span class="text" id="span_004458" smilref="Programming_Robots_with_ROS00015.smil#span_004458">.</span>
                </p>
                <h1 id="h1_000289" smilref="Programming_Robots_with_ROS00015.smil#h1_000289">Example 14-7. Section of EmPy XML template used to generate the stockroom walls</h1>
                <div id="ch14-aislewalls" data-type="example">
                  <p id="p_000930">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001353"><span class="text" id="span_004459" smilref="Programming_Robots_with_ROS00015.smil#span_004459">@[def wall(p1, p2, height)] </span><a class="co" id="ch14-co_stockroom_bot_CO5-1" href="#ch14-callout_stockroom_bot_CO5-1" external="false"><img src="images/1.jpg" alt="1" id="img_000168" /></a><span class="text" id="span_004460" smilref="Programming_Robots_with_ROS00015.smil#span_004460">
  @{wall.count += 1}
  @[if abs(p1[0]-p2[0]) </span><span class="text" id="span_004461" smilref="Programming_Robots_with_ROS00015.smil#span_004461">&lt; 0.01</span><span class="text" id="span_004462" smilref="Programming_Robots_with_ROS00015.smil#span_004462">]</span> <a class="co" id="ch14-co_stockroom_bot_CO5-2" href="#ch14-callout_stockroom_bot_CO5-2" external="false"><img src="images/2.jpg" alt="2" id="img_000169" /></a>
    <span class="text" id="span_004463" smilref="Programming_Robots_with_ROS00015.smil#span_004463">@</span><span class="text" id="span_004464" smilref="Programming_Robots_with_ROS00015.smil#span_004464">{</span><span class="text" id="span_004465" smilref="Programming_Robots_with_ROS00015.smil#span_004465">thickness_x =</span> <span class="text" id="span_004466" smilref="Programming_Robots_with_ROS00015.smil#span_004466">0.1}</span>
    <span class="text" id="span_004467" smilref="Programming_Robots_with_ROS00015.smil#span_004467">@</span><span class="text" id="span_004468" smilref="Programming_Robots_with_ROS00015.smil#span_004468">{</span><span class="text" id="span_004469" smilref="Programming_Robots_with_ROS00015.smil#span_004469">thickness_y =</span> <span class="text" id="span_004470" smilref="Programming_Robots_with_ROS00015.smil#span_004470">abs(p1[1]-p2[1])}</span>
  <span class="text" id="span_004471" smilref="Programming_Robots_with_ROS00015.smil#span_004471">@</span><span class="text" id="span_004472" smilref="Programming_Robots_with_ROS00015.smil#span_004472">[</span><span class="text" id="span_004473" smilref="Programming_Robots_with_ROS00015.smil#span_004473">e</span><span class="text" id="span_004474" smilref="Programming_Robots_with_ROS00015.smil#span_004474">l</span><span class="text" id="span_004475" smilref="Programming_Robots_with_ROS00015.smil#span_004475">s</span><span class="text" id="span_004476" smilref="Programming_Robots_with_ROS00015.smil#span_004476">e</span><span class="text" id="span_004477" smilref="Programming_Robots_with_ROS00015.smil#span_004477">]</span>
    <span class="text" id="span_004478" smilref="Programming_Robots_with_ROS00015.smil#span_004478">@</span><span class="text" id="span_004479" smilref="Programming_Robots_with_ROS00015.smil#span_004479">{</span><span class="text" id="span_004480" smilref="Programming_Robots_with_ROS00015.smil#span_004480">thickness_x =</span> <span class="text" id="span_004481" smilref="Programming_Robots_with_ROS00015.smil#span_004481">abs(p1[0]-p2[0])}</span>
    <span class="text" id="span_004482" smilref="Programming_Robots_with_ROS00015.smil#span_004482">@</span><span class="text" id="span_004483" smilref="Programming_Robots_with_ROS00015.smil#span_004483">{</span><span class="text" id="span_004484" smilref="Programming_Robots_with_ROS00015.smil#span_004484">thickness_y =</span> <span class="text" id="span_004485" smilref="Programming_Robots_with_ROS00015.smil#span_004485">0.1}</span>
  <span class="text" id="span_004486" smilref="Programming_Robots_with_ROS00015.smil#span_004486">@</span><span class="text" id="span_004487" smilref="Programming_Robots_with_ROS00015.smil#span_004487">[</span><span class="text" id="span_004488" smilref="Programming_Robots_with_ROS00015.smil#span_004488">e</span><span class="text" id="span_004489" smilref="Programming_Robots_with_ROS00015.smil#span_004489">n</span><span class="text" id="span_004490" smilref="Programming_Robots_with_ROS00015.smil#span_004490">d</span> <span class="text" id="span_004491" smilref="Programming_Robots_with_ROS00015.smil#span_004491">i</span><span class="text" id="span_004492" smilref="Programming_Robots_with_ROS00015.smil#span_004492">f</span><span class="text" id="span_004493" smilref="Programming_Robots_with_ROS00015.smil#span_004493">]</span>
  <span class="text" id="span_004494" smilref="Programming_Robots_with_ROS00015.smil#span_004494">&lt;</span><span class="text" id="span_004495" smilref="Programming_Robots_with_ROS00015.smil#span_004495">m</span><span class="text" id="span_004496" smilref="Programming_Robots_with_ROS00015.smil#span_004496">o</span><span class="text" id="span_004497" smilref="Programming_Robots_with_ROS00015.smil#span_004497">d</span><span class="text" id="span_004498" smilref="Programming_Robots_with_ROS00015.smil#span_004498">e</span><span class="text" id="span_004499" smilref="Programming_Robots_with_ROS00015.smil#span_004499">l</span> <span class="text" id="span_004500" smilref="Programming_Robots_with_ROS00015.smil#span_004500">name=</span><span class="text" id="span_004501" smilref="Programming_Robots_with_ROS00015.smil#span_004501">"wall_@(wall.count)"</span><span class="text" id="span_004502" smilref="Programming_Robots_with_ROS00015.smil#span_004502">&gt;</span> <a class="co" id="ch14-co_stockroom_bot_CO5-3" href="#ch14-callout_stockroom_bot_CO5-3" external="false"><img src="images/3.jpg" alt="3" id="img_000170" /></a>
    <span class="text" id="span_004503" smilref="Programming_Robots_with_ROS00015.smil#span_004503">&lt;static</span><span class="text" id="span_004504" smilref="Programming_Robots_with_ROS00015.smil#span_004504">&gt;</span><span class="text" id="span_004505" smilref="Programming_Robots_with_ROS00015.smil#span_004505">true</span><span class="text" id="span_004506" smilref="Programming_Robots_with_ROS00015.smil#span_004506">&lt;/static&gt;</span>
    <span class="text" id="span_004507" smilref="Programming_Robots_with_ROS00015.smil#span_004507">&lt;pose</span><span class="text" id="span_004508" smilref="Programming_Robots_with_ROS00015.smil#span_004508">&gt;</span><span class="text" id="span_004509" smilref="Programming_Robots_with_ROS00015.smil#span_004509">@((p1[0]+p2[0])/2.) @((p1[1]+p2[1])/2.) @(height/2.) 0 0 0</span><span class="text" id="span_004510" smilref="Programming_Robots_with_ROS00015.smil#span_004510">&lt;/pose&gt;</span>
    <span class="text" id="span_004511" smilref="Programming_Robots_with_ROS00015.smil#span_004511">&lt;link</span> <span class="text" id="span_004512" smilref="Programming_Robots_with_ROS00015.smil#span_004512">name=</span><span class="text" id="span_004513" smilref="Programming_Robots_with_ROS00015.smil#span_004513">"link"</span><span class="text" id="span_004514" smilref="Programming_Robots_with_ROS00015.smil#span_004514">&gt;</span>
      <span class="text" id="span_004515" smilref="Programming_Robots_with_ROS00015.smil#span_004515">&lt;collision</span> <span class="text" id="span_004516" smilref="Programming_Robots_with_ROS00015.smil#span_004516">name=</span><span class="text" id="span_004517" smilref="Programming_Robots_with_ROS00015.smil#span_004517">'visual'</span><span class="text" id="span_004518" smilref="Programming_Robots_with_ROS00015.smil#span_004518">&gt;</span> <a class="co" id="ch14-co_stockroom_bot_CO5-4" href="#ch14-callout_stockroom_bot_CO5-4" external="false"><img src="images/4.jpg" alt="4" id="img_000171" /></a>
        <span class="text" id="span_004519" smilref="Programming_Robots_with_ROS00015.smil#span_004519">&lt;geometry</span><span class="text" id="span_004520" smilref="Programming_Robots_with_ROS00015.smil#span_004520">&gt;</span>
          <span class="text" id="span_004521" smilref="Programming_Robots_with_ROS00015.smil#span_004521">&lt;box</span><span class="text" id="span_004522" smilref="Programming_Robots_with_ROS00015.smil#span_004522">&gt;</span>
            <span class="text" id="span_004523" smilref="Programming_Robots_with_ROS00015.smil#span_004523">&lt;size</span><span class="text" id="span_004524" smilref="Programming_Robots_with_ROS00015.smil#span_004524">&gt;</span><span class="text" id="span_004525" smilref="Programming_Robots_with_ROS00015.smil#span_004525">@(thickness_x) @(thickness_y) @(height)</span><span class="text" id="span_004526" smilref="Programming_Robots_with_ROS00015.smil#span_004526">&lt;/size&gt;</span>
          <span class="text" id="span_004527" smilref="Programming_Robots_with_ROS00015.smil#span_004527">&lt;/box&gt;</span>
        <span class="text" id="span_004528" smilref="Programming_Robots_with_ROS00015.smil#span_004528">&lt;/geometry&gt;</span>
      <span class="text" id="span_004529" smilref="Programming_Robots_with_ROS00015.smil#span_004529">&lt;/collision&gt;</span>
      <span class="text" id="span_004530" smilref="Programming_Robots_with_ROS00015.smil#span_004530">&lt;visual</span> <span class="text" id="span_004531" smilref="Programming_Robots_with_ROS00015.smil#span_004531">name=</span><span class="text" id="span_004532" smilref="Programming_Robots_with_ROS00015.smil#span_004532">'visual'</span><span class="text" id="span_004533" smilref="Programming_Robots_with_ROS00015.smil#span_004533">&gt;</span>
        <span class="text" id="span_004534" smilref="Programming_Robots_with_ROS00015.smil#span_004534">&lt;geometry</span><span class="text" id="span_004535" smilref="Programming_Robots_with_ROS00015.smil#span_004535">&gt;</span>
          <span class="text" id="span_004536" smilref="Programming_Robots_with_ROS00015.smil#span_004536">&lt;box</span><span class="text" id="span_004537" smilref="Programming_Robots_with_ROS00015.smil#span_004537">&gt;</span>
            <span class="text" id="span_004538" smilref="Programming_Robots_with_ROS00015.smil#span_004538">&lt;size</span><span class="text" id="span_004539" smilref="Programming_Robots_with_ROS00015.smil#span_004539">&gt;</span><span class="text" id="span_004540" smilref="Programming_Robots_with_ROS00015.smil#span_004540">@(thickness_x) @(thickness_y) @(height)</span><span class="text" id="span_004541" smilref="Programming_Robots_with_ROS00015.smil#span_004541">&lt;/size&gt;</span>
          <span class="text" id="span_004542" smilref="Programming_Robots_with_ROS00015.smil#span_004542">&lt;/box&gt;</span>
        <span class="text" id="span_004543" smilref="Programming_Robots_with_ROS00015.smil#span_004543">&lt;/geometry&gt;</span>
      <span class="text" id="span_004544" smilref="Programming_Robots_with_ROS00015.smil#span_004544">&lt;/visual&gt;</span>
    <span class="text" id="span_004545" smilref="Programming_Robots_with_ROS00015.smil#span_004545">&lt;/link&gt;</span>
  <span class="text" id="span_004546" smilref="Programming_Robots_with_ROS00015.smil#span_004546">&lt;/model&gt;</span><span class="text" id="span_004547" smilref="Programming_Robots_with_ROS00015.smil#span_004547">
@[end def]
@{wall.count = 0}
@( wall((-1.75, -1.75), ( 6.00, -1.75), 1) ) </span><a class="co" id="ch14-co_stockroom_bot_CO5-5" href="#ch14-callout_stockroom_bot_CO5-5" external="false"><img src="images/5.jpg" alt="5" id="img_000172" /></a><span class="text" id="span_004548" smilref="Programming_Robots_with_ROS00015.smil#span_004548">
@( wall((-1.75, -1.75), (-1.75,   1.75), 1) )
@( wall((-1.75,  1.75), ( 6.00,   1.75), 1) )
@( wall(( 3.00,  0.75), ( 3.00,   1.75), 1) )
@( wall(( 3.00, -0.75), ( 3.00,  -1.75), 1) )
@( wall(( 6.00, -1.75), ( 6.00,  -1.00), 1) )
@( wall(( 6.00,  0.00), ( 6.00,   1.75), 1) )
@( wall(( 5.00, -1.75), ( 5.00,   1.75), 0.7) )
  </span><span class="text" id="span_004549" smilref="Programming_Robots_with_ROS00015.smil#span_004549">&lt;model</span> <span class="text" id="span_004550" smilref="Programming_Robots_with_ROS00015.smil#span_004550">name=</span><span class="text" id="span_004551" smilref="Programming_Robots_with_ROS00015.smil#span_004551">"counter_top"</span><span class="text" id="span_004552" smilref="Programming_Robots_with_ROS00015.smil#span_004552">&gt;</span>
    <span class="text" id="span_004553" smilref="Programming_Robots_with_ROS00015.smil#span_004553">&lt;static</span><span class="text" id="span_004554" smilref="Programming_Robots_with_ROS00015.smil#span_004554">&gt;</span><span class="text" id="span_004555" smilref="Programming_Robots_with_ROS00015.smil#span_004555">true</span><span class="text" id="span_004556" smilref="Programming_Robots_with_ROS00015.smil#span_004556">&lt;/static&gt;</span>
    <span class="text" id="span_004557" smilref="Programming_Robots_with_ROS00015.smil#span_004557">&lt;pose</span><span class="text" id="span_004558" smilref="Programming_Robots_with_ROS00015.smil#span_004558">&gt;</span><span class="text" id="span_004559" smilref="Programming_Robots_with_ROS00015.smil#span_004559">4.9 0 0.7 0 0 0</span><span class="text" id="span_004560" smilref="Programming_Robots_with_ROS00015.smil#span_004560">&lt;/pose&gt;</span>
    <span class="text" id="span_004561" smilref="Programming_Robots_with_ROS00015.smil#span_004561">&lt;link</span> <span class="text" id="span_004562" smilref="Programming_Robots_with_ROS00015.smil#span_004562">name=</span><span class="text" id="span_004563" smilref="Programming_Robots_with_ROS00015.smil#span_004563">"link"</span><span class="text" id="span_004564" smilref="Programming_Robots_with_ROS00015.smil#span_004564">&gt;</span>
      <span class="text" id="span_004565" smilref="Programming_Robots_with_ROS00015.smil#span_004565">&lt;visual</span> <span class="text" id="span_004566" smilref="Programming_Robots_with_ROS00015.smil#span_004566">name=</span><span class="text" id="span_004567" smilref="Programming_Robots_with_ROS00015.smil#span_004567">"collision"</span><span class="text" id="span_004568" smilref="Programming_Robots_with_ROS00015.smil#span_004568">&gt;</span>
        <span class="text" id="span_004569" smilref="Programming_Robots_with_ROS00015.smil#span_004569">&lt;geometry</span><span class="text" id="span_004570" smilref="Programming_Robots_with_ROS00015.smil#span_004570">&gt;</span><span class="text" id="span_004571" smilref="Programming_Robots_with_ROS00015.smil#span_004571">&lt;box</span><span class="text" id="span_004572" smilref="Programming_Robots_with_ROS00015.smil#span_004572">&gt;</span><span class="text" id="span_004573" smilref="Programming_Robots_with_ROS00015.smil#span_004573">&lt;size</span><span class="text" id="span_004574" smilref="Programming_Robots_with_ROS00015.smil#span_004574">&gt;</span><span class="text" id="span_004575" smilref="Programming_Robots_with_ROS00015.smil#span_004575">0.4 3.5 0.05</span><span class="text" id="span_004576" smilref="Programming_Robots_with_ROS00015.smil#span_004576">&lt;/size&gt;</span><span class="text" id="span_004577" smilref="Programming_Robots_with_ROS00015.smil#span_004577">&lt;/box&gt;</span><span class="text" id="span_004578" smilref="Programming_Robots_with_ROS00015.smil#span_004578">&lt;/geometry&gt;</span>
      <span class="text" id="span_004579" smilref="Programming_Robots_with_ROS00015.smil#span_004579">&lt;/visual&gt;</span>
      <span class="text" id="span_004580" smilref="Programming_Robots_with_ROS00015.smil#span_004580">&lt;visual</span> <span class="text" id="span_004581" smilref="Programming_Robots_with_ROS00015.smil#span_004581">name=</span><span class="text" id="span_004582" smilref="Programming_Robots_with_ROS00015.smil#span_004582">"visual"</span><span class="text" id="span_004583" smilref="Programming_Robots_with_ROS00015.smil#span_004583">&gt;</span>
        <span class="text" id="span_004584" smilref="Programming_Robots_with_ROS00015.smil#span_004584">&lt;geometry</span><span class="text" id="span_004585" smilref="Programming_Robots_with_ROS00015.smil#span_004585">&gt;</span><span class="text" id="span_004586" smilref="Programming_Robots_with_ROS00015.smil#span_004586">&lt;box</span><span class="text" id="span_004587" smilref="Programming_Robots_with_ROS00015.smil#span_004587">&gt;</span><span class="text" id="span_004588" smilref="Programming_Robots_with_ROS00015.smil#span_004588">&lt;size</span><span class="text" id="span_004589" smilref="Programming_Robots_with_ROS00015.smil#span_004589">&gt;</span><span class="text" id="span_004590" smilref="Programming_Robots_with_ROS00015.smil#span_004590">0.4 3.5 0.05</span><span class="text" id="span_004591" smilref="Programming_Robots_with_ROS00015.smil#span_004591">&lt;/size&gt;</span><span class="text" id="span_004592" smilref="Programming_Robots_with_ROS00015.smil#span_004592">&lt;/box&gt;</span><span class="text" id="span_004593" smilref="Programming_Robots_with_ROS00015.smil#span_004593">&lt;/geometry&gt;</span>
      <span class="text" id="span_004594" smilref="Programming_Robots_with_ROS00015.smil#span_004594">&lt;/visual&gt;</span>
    <span class="text" id="span_004595" smilref="Programming_Robots_with_ROS00015.smil#span_004595">&lt;/link&gt;</span>
  <span class="text" id="span_004596" smilref="Programming_Robots_with_ROS00015.smil#span_004596">&lt;/model&gt;</span>
<span class="text" id="span_004597" smilref="Programming_Robots_with_ROS00015.smil#span_004597">&lt;/world&gt;</span>
<span class="text" id="span_004598" smilref="Programming_Robots_with_ROS00015.smil#span_004598">&lt;/sdf&gt;</span></code>
                  </p>
                  <dl class="calloutlist" id="dl_000014">
                    <dt id="dt_000061">
                      <a class="co" id="ch14-callout_stockroom_bot_CO5-1" href="#ch14-co_stockroom_bot_CO5-1" external="false">
                        <img src="images/1.jpg" alt="1" id="img_000173" />
                      </a>
                    </dt>
                    <dd id="dd_000061">
                      <p id="p_000931" smilref="Programming_Robots_with_ROS00015.smil#p_000931">Even though it looks a bit strange with the brackets, this is a normal Python function declaration using EmPy escaping syntax.</p>
                    </dd>
                    <dt id="dt_000062">
                      <a class="co" id="ch14-callout_stockroom_bot_CO5-2" href="#ch14-co_stockroom_bot_CO5-2" external="false">
                        <img src="images/2.jpg" alt="2" id="img_000174" />
                      </a>
                    </dt>
                    <dd id="dd_000062">
                      <p id="p_000932" smilref="Programming_Robots_with_ROS00015.smil#p_000932">This simplistic code assumes that walls are aligned along the x-axis or the y-axis, which is often the case in traditional commercial buildings.</p>
                    </dd>
                    <dt id="dt_000063">
                      <a class="co" id="ch14-callout_stockroom_bot_CO5-3" href="#ch14-co_stockroom_bot_CO5-3" external="false">
                        <img src="images/3.jpg" alt="3" id="img_000175" />
                      </a>
                    </dt>
                    <dd id="dd_000063">
                      <p id="p_000933">
                        <span class="text" id="span_004599" smilref="Programming_Robots_with_ROS00015.smil#span_004599">As before, we are using a Python counter variable to generate unique model names as the template engine cycles through the</span>
                        <code xml:space="preserve" id="code_001354" smilref="Programming_Robots_with_ROS00015.smil#code_001354">for</code>
                        <span class="text" id="span_004600" smilref="Programming_Robots_with_ROS00015.smil#span_004600">loop.</span>
                      </p>
                    </dd>
                    <dt id="dt_000064">
                      <a class="co" id="ch14-callout_stockroom_bot_CO5-4" href="#ch14-co_stockroom_bot_CO5-4" external="false">
                        <img src="images/4.jpg" alt="4" id="img_000176" />
                      </a>
                    </dt>
                    <dd id="dd_000064">
                      <p id="p_000934">
                        <span class="text" id="span_004601" smilref="Programming_Robots_with_ROS00015.smil#span_004601">The</span>
                        <code xml:space="preserve" id="code_001355" smilref="Programming_Robots_with_ROS00015.smil#code_001355">collision</code>
                        <span class="text" id="span_004602" smilref="Programming_Robots_with_ROS00015.smil#span_004602">and</span>
                        <code xml:space="preserve" id="code_001356" smilref="Programming_Robots_with_ROS00015.smil#code_001356">visual</code>
                        <span class="text" id="span_004603" smilref="Programming_Robots_with_ROS00015.smil#span_004603">objects are identical in this case, since they are both as simple as possible.</span>
                      </p>
                    </dd>
                    <dt id="dt_000065">
                      <a class="co" id="ch14-callout_stockroom_bot_CO5-5" href="#ch14-co_stockroom_bot_CO5-5" external="false">
                        <img src="images/5.jpg" alt="5" id="img_000177" />
                      </a>
                    </dt>
                    <dd id="dd_000065">
                      <p id="p_000935">
                        <span class="text" id="span_004604" smilref="Programming_Robots_with_ROS00015.smil#span_004604">These EmPy evaluation expressions use the</span>
                        <code xml:space="preserve" id="code_001357" smilref="Programming_Robots_with_ROS00015.smil#code_001357">wall()</code>
                        <span class="text" id="span_004605" smilref="Programming_Robots_with_ROS00015.smil#span_004605">function defined earlier to create the stockroom walls in a way that makes it relatively quick to modify the dimensions later.</span>
                      </p>
                    </dd>
                  </dl>
                </div>
                <p id="ch14-idp34355408" data-type="indexterm" data-startref="ix_14-stockroom_bot-asciidoc7">
                  <span class="text" id="span_004606" smilref="Programming_Robots_with_ROS00015.smil#span_004606">Whew! That was a lot of XML. Using EmPy helped to simplify the task: the template expansion of the EmPy input shown in</span>
                  <a data-type="xref" href="#ch14-aisleworldem" external="false" id="a_000210" smilref="Programming_Robots_with_ROS00015.smil#a_000210">Example 14-5</a>
                  <span class="text" id="span_004607" smilref="Programming_Robots_with_ROS00015.smil#span_004607">,</span>
                  <a data-type="xref" href="#ch14-aislebinsem" external="false" id="a_000211" smilref="Programming_Robots_with_ROS00015.smil#a_000211">Example 14-6</a>
                  <span class="text" id="span_004608" smilref="Programming_Robots_with_ROS00015.smil#span_004608">, and</span>
                  <a data-type="xref" href="#ch14-aislewalls" external="false" id="a_000212" smilref="Programming_Robots_with_ROS00015.smil#a_000212">Example 14-7</a>
                  <span class="text" id="span_004609" smilref="Programming_Robots_with_ROS00015.smil#span_004609">comes out to well over 500 lines of XML. To generate the output of the EmPy expansion, we use shell redirection:</span>
                </p>
                <p id="p_000936">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001358"><span class="text" id="span_004610" smilref="Programming_Robots_with_ROS00015.smil#span_004610">
user@hostname$ </span><strong id="strong_000157" smilref="Programming_Robots_with_ROS00015.smil#strong_000157">empy aisle.world.em &gt; aisle.world</strong>
</code>
                </p>
                <p id="p_000937">
                  <span class="text" id="span_004611" smilref="Programming_Robots_with_ROS00015.smil#span_004611">The resulting</span>
                  <em id="em_000366" smilref="Programming_Robots_with_ROS00015.smil#em_000366">aisle.world</em>
                  <span class="text" id="span_004612" smilref="Programming_Robots_with_ROS00015.smil#span_004612">file can be loaded directly by Gazebo:</span>
                </p>
                <p id="p_000938">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001359"><span class="text" id="span_004613" smilref="Programming_Robots_with_ROS00015.smil#span_004613">
user@hostname$ </span><strong id="strong_000158" smilref="Programming_Robots_with_ROS00015.smil#strong_000158">gazebo aisle.world</strong>
</code>
                </p>
                <p id="ch14-idp33388896" data-type="indexterm" data-startref="ix_14-stockroom_bot-asciidoc4">
                  <span class="text" id="span_004614" smilref="Programming_Robots_with_ROS00015.smil#span_004614">All this work has paid off: we now have a stockroom simulation that we can use for software development and testing, with all of the numerous strategic benefits this provides (enumerated in prior chapters). An overview screenshot of the world is shown in</span>
                  <a data-type="xref" href="#ch14-stockroomjpg" external="false" id="a_000213" smilref="Programming_Robots_with_ROS00015.smil#a_000213">Figure 14-3</a>
                  <span class="text" id="span_004615" smilref="Programming_Robots_with_ROS00015.smil#span_004615">, and a close-up showing a row of storage bins with ALVAR markers is shown in</span>
                  <a data-type="xref" href="#ch14-stockroom_binsjpg" external="false" id="a_000214" smilref="Programming_Robots_with_ROS00015.smil#a_000214">Figure 14-4</a>
                  <span class="text" id="span_004616" smilref="Programming_Robots_with_ROS00015.smil#span_004616">.</span>
                </p>
                <figure id="figure_000066">
                  <h1 id="h1_000290" smilref="Programming_Robots_with_ROS00015.smil#h1_000290">Figure 14-3. The stockroom simulation</h1>
                  <div id="ch14-stockroomjpg" class="figure">
                    <img src="images/prwr_1403.jpg" alt="Stockroom" id="img_000178" />
                  </div>
                </figure>
                <p class="pagebreak-before" id="ch14-idp34349232" data-type="indexterm" data-primary="stockroom" data-secondary="adding items to">
                  <span class="text" id="span_004617" smilref="Programming_Robots_with_ROS00015.smil#span_004617">Finally, let's put some items in our stockroom. For now, we'll just drop an identical small box into each bin. Since we may want to randomize the box position and orientation in the future, we'll place these models programmatically, just like we did in Chapter 11.</span>
                  <a data-type="xref" href="#ch14-stock_productspy" external="false" id="a_000215" smilref="Programming_Robots_with_ROS00015.smil#a_000215">Example 14-8</a>
                  <span class="text" id="span_004618" smilref="Programming_Robots_with_ROS00015.smil#span_004618">shows a Python script that will spawn models for the items in our stockroom and place them in their storage bins.</span>
                </p>
                <figure id="figure_000067">
                  <h1 id="h1_000291" smilref="Programming_Robots_with_ROS00015.smil#h1_000291">Figure 14-4. A close-up rendering of the simulated storage bin arrangement, showing their ALVAR markers</h1>
                  <div id="ch14-stockroom_binsjpg" class="figure">
                    <img src="images/prwr_1404.jpg" alt="Labeled bins in Gazebo" id="img_000179" />
                  </div>
                </figure>
                <h1 id="h1_000292" smilref="Programming_Robots_with_ROS00015.smil#h1_000292">Example 14-8. stock_products.py</h1>
                <div id="ch14-stock_productspy" data-type="example">
                  <p id="p_000939">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001360"><span class="text" id="span_004619" smilref="Programming_Robots_with_ROS00015.smil#span_004619">#!/usr/bin/env python</span>
<span class="text" id="span_004620" smilref="Programming_Robots_with_ROS00015.smil#span_004620">import</span> <span class="text" id="span_004621" smilref="Programming_Robots_with_ROS00015.smil#span_004621">rospy</span><span class="text" id="span_004622" smilref="Programming_Robots_with_ROS00015.smil#span_004622">,</span> <span class="text" id="span_004623" smilref="Programming_Robots_with_ROS00015.smil#span_004623">tf</span>
<span class="text" id="span_004624" smilref="Programming_Robots_with_ROS00015.smil#span_004624">from</span> <span class="text" id="span_004625" smilref="Programming_Robots_with_ROS00015.smil#span_004625">gazebo_msgs.srv</span> <span class="text" id="span_004626" smilref="Programming_Robots_with_ROS00015.smil#span_004626">import</span> <span class="text" id="span_004627" smilref="Programming_Robots_with_ROS00015.smil#span_004627">*</span>
<span class="text" id="span_004628" smilref="Programming_Robots_with_ROS00015.smil#span_004628">from</span> <span class="text" id="span_004629" smilref="Programming_Robots_with_ROS00015.smil#span_004629">geometry_msgs.msg</span> <span class="text" id="span_004630" smilref="Programming_Robots_with_ROS00015.smil#span_004630">import</span> <span class="text" id="span_004631" smilref="Programming_Robots_with_ROS00015.smil#span_004631">*</span>

<span class="text" id="span_004632" smilref="Programming_Robots_with_ROS00015.smil#span_004632">if</span> <span class="text" id="span_004633" smilref="Programming_Robots_with_ROS00015.smil#span_004633">__name__</span> <span class="text" id="span_004634" smilref="Programming_Robots_with_ROS00015.smil#span_004634">==</span> <span class="text" id="span_004635" smilref="Programming_Robots_with_ROS00015.smil#span_004635">'</span><span class="text" id="span_004636" smilref="Programming_Robots_with_ROS00015.smil#span_004636">__main__</span><span class="text" id="span_004637" smilref="Programming_Robots_with_ROS00015.smil#span_004637">'</span><span class="text" id="span_004638" smilref="Programming_Robots_with_ROS00015.smil#span_004638">:</span>
  <span class="text" id="span_004639" smilref="Programming_Robots_with_ROS00015.smil#span_004639">rospy</span><span class="text" id="span_004640" smilref="Programming_Robots_with_ROS00015.smil#span_004640">.</span><span class="text" id="span_004641" smilref="Programming_Robots_with_ROS00015.smil#span_004641">init_node</span><span class="text" id="span_004642" smilref="Programming_Robots_with_ROS00015.smil#span_004642">(</span><span class="text" id="span_004643" smilref="Programming_Robots_with_ROS00015.smil#span_004643">"</span><span class="text" id="span_004644" smilref="Programming_Robots_with_ROS00015.smil#span_004644">stock_products</span><span class="text" id="span_004645" smilref="Programming_Robots_with_ROS00015.smil#span_004645">"</span><span class="text" id="span_004646" smilref="Programming_Robots_with_ROS00015.smil#span_004646">)</span>
  <span class="text" id="span_004647" smilref="Programming_Robots_with_ROS00015.smil#span_004647">rospy</span><span class="text" id="span_004648" smilref="Programming_Robots_with_ROS00015.smil#span_004648">.</span><span class="text" id="span_004649" smilref="Programming_Robots_with_ROS00015.smil#span_004649">wait_for_service</span><span class="text" id="span_004650" smilref="Programming_Robots_with_ROS00015.smil#span_004650">(</span><span class="text" id="span_004651" smilref="Programming_Robots_with_ROS00015.smil#span_004651">"</span><span class="text" id="span_004652" smilref="Programming_Robots_with_ROS00015.smil#span_004652">gazebo/delete_model</span><span class="text" id="span_004653" smilref="Programming_Robots_with_ROS00015.smil#span_004653">"</span><span class="text" id="span_004654" smilref="Programming_Robots_with_ROS00015.smil#span_004654">)</span> <a class="co" id="ch14-co_stockroom_bot_CO6-1" href="#ch14-callout_stockroom_bot_CO6-1" external="false"><img src="images/1.jpg" alt="1" id="img_000180" /></a>
  <span class="text" id="span_004655" smilref="Programming_Robots_with_ROS00015.smil#span_004655">rospy</span><span class="text" id="span_004656" smilref="Programming_Robots_with_ROS00015.smil#span_004656">.</span><span class="text" id="span_004657" smilref="Programming_Robots_with_ROS00015.smil#span_004657">wait_for_service</span><span class="text" id="span_004658" smilref="Programming_Robots_with_ROS00015.smil#span_004658">(</span><span class="text" id="span_004659" smilref="Programming_Robots_with_ROS00015.smil#span_004659">"</span><span class="text" id="span_004660" smilref="Programming_Robots_with_ROS00015.smil#span_004660">gazebo/spawn_sdf_model</span><span class="text" id="span_004661" smilref="Programming_Robots_with_ROS00015.smil#span_004661">"</span><span class="text" id="span_004662" smilref="Programming_Robots_with_ROS00015.smil#span_004662">)</span>
  <span class="text" id="span_004663" smilref="Programming_Robots_with_ROS00015.smil#span_004663">delete_model</span> <span class="text" id="span_004664" smilref="Programming_Robots_with_ROS00015.smil#span_004664">=</span> <span class="text" id="span_004665" smilref="Programming_Robots_with_ROS00015.smil#span_004665">rospy</span><span class="text" id="span_004666" smilref="Programming_Robots_with_ROS00015.smil#span_004666">.</span><span class="text" id="span_004667" smilref="Programming_Robots_with_ROS00015.smil#span_004667">ServiceProxy</span><span class="text" id="span_004668" smilref="Programming_Robots_with_ROS00015.smil#span_004668">(</span><span class="text" id="span_004669" smilref="Programming_Robots_with_ROS00015.smil#span_004669">"</span><span class="text" id="span_004670" smilref="Programming_Robots_with_ROS00015.smil#span_004670">gazebo/delete_model</span><span class="text" id="span_004671" smilref="Programming_Robots_with_ROS00015.smil#span_004671">"</span><span class="text" id="span_004672" smilref="Programming_Robots_with_ROS00015.smil#span_004672">,</span> <span class="text" id="span_004673" smilref="Programming_Robots_with_ROS00015.smil#span_004673">DeleteModel</span><span class="text" id="span_004674" smilref="Programming_Robots_with_ROS00015.smil#span_004674">)</span>
  <span class="text" id="span_004675" smilref="Programming_Robots_with_ROS00015.smil#span_004675">s</span> <span class="text" id="span_004676" smilref="Programming_Robots_with_ROS00015.smil#span_004676">=</span> <span class="text" id="span_004677" smilref="Programming_Robots_with_ROS00015.smil#span_004677">rospy</span><span class="text" id="span_004678" smilref="Programming_Robots_with_ROS00015.smil#span_004678">.</span><span class="text" id="span_004679" smilref="Programming_Robots_with_ROS00015.smil#span_004679">ServiceProxy</span><span class="text" id="span_004680" smilref="Programming_Robots_with_ROS00015.smil#span_004680">(</span><span class="text" id="span_004681" smilref="Programming_Robots_with_ROS00015.smil#span_004681">"</span><span class="text" id="span_004682" smilref="Programming_Robots_with_ROS00015.smil#span_004682">gazebo/spawn_sdf_model</span><span class="text" id="span_004683" smilref="Programming_Robots_with_ROS00015.smil#span_004683">"</span><span class="text" id="span_004684" smilref="Programming_Robots_with_ROS00015.smil#span_004684">,</span> <span class="text" id="span_004685" smilref="Programming_Robots_with_ROS00015.smil#span_004685">SpawnModel</span><span class="text" id="span_004686" smilref="Programming_Robots_with_ROS00015.smil#span_004686">)</span>
  <span class="text" id="span_004687" smilref="Programming_Robots_with_ROS00015.smil#span_004687">orient</span> <span class="text" id="span_004688" smilref="Programming_Robots_with_ROS00015.smil#span_004688">=</span> <span class="text" id="span_004689" smilref="Programming_Robots_with_ROS00015.smil#span_004689">Quaternion</span><span class="text" id="span_004690" smilref="Programming_Robots_with_ROS00015.smil#span_004690">(</span><span class="text" id="span_004691" smilref="Programming_Robots_with_ROS00015.smil#span_004691">*</span><span class="text" id="span_004692" smilref="Programming_Robots_with_ROS00015.smil#span_004692">tf</span><span class="text" id="span_004693" smilref="Programming_Robots_with_ROS00015.smil#span_004693">.</span><span class="text" id="span_004694" smilref="Programming_Robots_with_ROS00015.smil#span_004694">transformations</span><span class="text" id="span_004695" smilref="Programming_Robots_with_ROS00015.smil#span_004695">.</span><span class="text" id="span_004696" smilref="Programming_Robots_with_ROS00015.smil#span_004696">quaternion_from_euler</span><span class="text" id="span_004697" smilref="Programming_Robots_with_ROS00015.smil#span_004697">(</span><span class="text" id="span_004698" smilref="Programming_Robots_with_ROS00015.smil#span_004698">0</span><span class="text" id="span_004699" smilref="Programming_Robots_with_ROS00015.smil#span_004699">,</span> <span class="text" id="span_004700" smilref="Programming_Robots_with_ROS00015.smil#span_004700">0</span><span class="text" id="span_004701" smilref="Programming_Robots_with_ROS00015.smil#span_004701">,</span> <span class="text" id="span_004702" smilref="Programming_Robots_with_ROS00015.smil#span_004702">0</span><span class="text" id="span_004703" smilref="Programming_Robots_with_ROS00015.smil#span_004703">)</span><span class="text" id="span_004704" smilref="Programming_Robots_with_ROS00015.smil#span_004704">)</span>
  <span class="text" id="span_004705" smilref="Programming_Robots_with_ROS00015.smil#span_004705">with</span> <span class="text" id="span_004706" smilref="Programming_Robots_with_ROS00015.smil#span_004706">open</span><span class="text" id="span_004707" smilref="Programming_Robots_with_ROS00015.smil#span_004707">(</span><span class="text" id="span_004708" smilref="Programming_Robots_with_ROS00015.smil#span_004708">"</span><span class="text" id="span_004709" smilref="Programming_Robots_with_ROS00015.smil#span_004709">models/product_0/model.sdf</span><span class="text" id="span_004710" smilref="Programming_Robots_with_ROS00015.smil#span_004710">"</span><span class="text" id="span_004711" smilref="Programming_Robots_with_ROS00015.smil#span_004711">,</span> <span class="text" id="span_004712" smilref="Programming_Robots_with_ROS00015.smil#span_004712">"</span><span class="text" id="span_004713" smilref="Programming_Robots_with_ROS00015.smil#span_004713">r</span><span class="text" id="span_004714" smilref="Programming_Robots_with_ROS00015.smil#span_004714">"</span><span class="text" id="span_004715" smilref="Programming_Robots_with_ROS00015.smil#span_004715">)</span> <span class="text" id="span_004716" smilref="Programming_Robots_with_ROS00015.smil#span_004716">as</span> <span class="text" id="span_004717" smilref="Programming_Robots_with_ROS00015.smil#span_004717">f</span><span class="text" id="span_004718" smilref="Programming_Robots_with_ROS00015.smil#span_004718">:</span>
    <span class="text" id="span_004719" smilref="Programming_Robots_with_ROS00015.smil#span_004719">product_xml</span> <span class="text" id="span_004720" smilref="Programming_Robots_with_ROS00015.smil#span_004720">=</span> <span class="text" id="span_004721" smilref="Programming_Robots_with_ROS00015.smil#span_004721">f</span><span class="text" id="span_004722" smilref="Programming_Robots_with_ROS00015.smil#span_004722">.</span><span class="text" id="span_004723" smilref="Programming_Robots_with_ROS00015.smil#span_004723">read</span><span class="text" id="span_004724" smilref="Programming_Robots_with_ROS00015.smil#span_004724">(</span><span class="text" id="span_004725" smilref="Programming_Robots_with_ROS00016.smil#span_004725">)</span> <a class="co" id="ch14-co_stockroom_bot_CO6-2" href="#ch14-callout_stockroom_bot_CO6-2" external="false"><img src="images/2.jpg" alt="2" id="img_000181" /></a>
  <span class="text" id="span_004726" smilref="Programming_Robots_with_ROS00016.smil#span_004726">for</span> <span class="text" id="span_004727" smilref="Programming_Robots_with_ROS00016.smil#span_004727">product_num</span> <span class="text" id="span_004728" smilref="Programming_Robots_with_ROS00016.smil#span_004728">in</span> <span class="text" id="span_004729" smilref="Programming_Robots_with_ROS00016.smil#span_004729">xrange</span><span class="text" id="span_004730" smilref="Programming_Robots_with_ROS00016.smil#span_004730">(</span><span class="text" id="span_004731" smilref="Programming_Robots_with_ROS00016.smil#span_004731">0</span><span class="text" id="span_004732" smilref="Programming_Robots_with_ROS00016.smil#span_004732">,</span> <span class="text" id="span_004733" smilref="Programming_Robots_with_ROS00016.smil#span_004733">12</span><span class="text" id="span_004734" smilref="Programming_Robots_with_ROS00016.smil#span_004734">)</span><span class="text" id="span_004735" smilref="Programming_Robots_with_ROS00016.smil#span_004735">:</span>
    <span class="text" id="span_004736" smilref="Programming_Robots_with_ROS00016.smil#span_004736">item_name</span> <span class="text" id="span_004737" smilref="Programming_Robots_with_ROS00016.smil#span_004737">=</span> <span class="text" id="span_004738" smilref="Programming_Robots_with_ROS00016.smil#span_004738">"</span><span class="text" id="span_004739" smilref="Programming_Robots_with_ROS00016.smil#span_004739">product_{0}_0</span><span class="text" id="span_004740" smilref="Programming_Robots_with_ROS00016.smil#span_004740">"</span><span class="text" id="span_004741" smilref="Programming_Robots_with_ROS00016.smil#span_004741">.</span><span class="text" id="span_004742" smilref="Programming_Robots_with_ROS00016.smil#span_004742">format</span><span class="text" id="span_004743" smilref="Programming_Robots_with_ROS00016.smil#span_004743">(</span><span class="text" id="span_004744" smilref="Programming_Robots_with_ROS00016.smil#span_004744">product_num</span><span class="text" id="span_004745" smilref="Programming_Robots_with_ROS00016.smil#span_004745">)</span>
    <span class="text" id="span_004746" smilref="Programming_Robots_with_ROS00016.smil#span_004746">delete_model</span><span class="text" id="span_004747" smilref="Programming_Robots_with_ROS00016.smil#span_004747">(</span><span class="text" id="span_004748" smilref="Programming_Robots_with_ROS00016.smil#span_004748">item_name</span><span class="text" id="span_004749" smilref="Programming_Robots_with_ROS00016.smil#span_004749">)</span> <a class="co" id="ch14-co_stockroom_bot_CO6-3" href="#ch14-callout_stockroom_bot_CO6-3" external="false"><img src="images/3.jpg" alt="3" id="img_000182" /></a>
  <span class="text" id="span_004750" smilref="Programming_Robots_with_ROS00016.smil#span_004750">for</span> <span class="text" id="span_004751" smilref="Programming_Robots_with_ROS00016.smil#span_004751">product_num</span> <span class="text" id="span_004752" smilref="Programming_Robots_with_ROS00016.smil#span_004752">in</span> <span class="text" id="span_004753" smilref="Programming_Robots_with_ROS00016.smil#span_004753">xrange</span><span class="text" id="span_004754" smilref="Programming_Robots_with_ROS00016.smil#span_004754">(</span><span class="text" id="span_004755" smilref="Programming_Robots_with_ROS00016.smil#span_004755">0</span><span class="text" id="span_004756" smilref="Programming_Robots_with_ROS00016.smil#span_004756">,</span> <span class="text" id="span_004757" smilref="Programming_Robots_with_ROS00016.smil#span_004757">12</span><span class="text" id="span_004758" smilref="Programming_Robots_with_ROS00016.smil#span_004758">)</span><span class="text" id="span_004759" smilref="Programming_Robots_with_ROS00016.smil#span_004759">:</span>
    <span class="text" id="span_004760" smilref="Programming_Robots_with_ROS00016.smil#span_004760">bin_y</span> <span class="text" id="span_004761" smilref="Programming_Robots_with_ROS00016.smil#span_004761">=</span> <span class="text" id="span_004762" smilref="Programming_Robots_with_ROS00016.smil#span_004762">2.8</span> <span class="text" id="span_004763" smilref="Programming_Robots_with_ROS00016.smil#span_004763">*</span> <span class="text" id="span_004764" smilref="Programming_Robots_with_ROS00016.smil#span_004764">(</span><span class="text" id="span_004765" smilref="Programming_Robots_with_ROS00016.smil#span_004765">product_num</span> <span class="text" id="span_004766" smilref="Programming_Robots_with_ROS00016.smil#span_004766">/</span> <span class="text" id="span_004767" smilref="Programming_Robots_with_ROS00016.smil#span_004767">6</span><span class="text" id="span_004768" smilref="Programming_Robots_with_ROS00016.smil#span_004768">)</span> <span class="text" id="span_004769" smilref="Programming_Robots_with_ROS00016.smil#span_004769">-</span> <span class="text" id="span_004770" smilref="Programming_Robots_with_ROS00016.smil#span_004770">1.4</span> <a class="co" id="ch14-co_stockroom_bot_CO6-4" href="#ch14-callout_stockroom_bot_CO6-4" external="false"><img src="images/4.jpg" alt="4" id="img_000183" /></a>
    <span class="text" id="span_004771" smilref="Programming_Robots_with_ROS00016.smil#span_004771">bin_x</span> <span class="text" id="span_004772" smilref="Programming_Robots_with_ROS00016.smil#span_004772">=</span> <span class="text" id="span_004773" smilref="Programming_Robots_with_ROS00016.smil#span_004773">0.5</span> <span class="text" id="span_004774" smilref="Programming_Robots_with_ROS00016.smil#span_004774">*</span> <span class="text" id="span_004775" smilref="Programming_Robots_with_ROS00016.smil#span_004775">(</span><span class="text" id="span_004776" smilref="Programming_Robots_with_ROS00016.smil#span_004776">product_num</span> <span class="text" id="span_004777" smilref="Programming_Robots_with_ROS00016.smil#span_004777">%</span> <span class="text" id="span_004778" smilref="Programming_Robots_with_ROS00016.smil#span_004778">6</span><span class="text" id="span_004779" smilref="Programming_Robots_with_ROS00016.smil#span_004779">)</span> <span class="text" id="span_004780" smilref="Programming_Robots_with_ROS00016.smil#span_004780">-</span> <span class="text" id="span_004781" smilref="Programming_Robots_with_ROS00016.smil#span_004781">1.5</span>
    <span class="text" id="span_004782" smilref="Programming_Robots_with_ROS00016.smil#span_004782">item_name</span> <span class="text" id="span_004783" smilref="Programming_Robots_with_ROS00016.smil#span_004783">=</span> <span class="text" id="span_004784" smilref="Programming_Robots_with_ROS00016.smil#span_004784">"</span><span class="text" id="span_004785" smilref="Programming_Robots_with_ROS00016.smil#span_004785">product_{0}_0</span><span class="text" id="span_004786" smilref="Programming_Robots_with_ROS00016.smil#span_004786">"</span><span class="text" id="span_004787" smilref="Programming_Robots_with_ROS00016.smil#span_004787">.</span><span class="text" id="span_004788" smilref="Programming_Robots_with_ROS00016.smil#span_004788">format</span><span class="text" id="span_004789" smilref="Programming_Robots_with_ROS00016.smil#span_004789">(</span><span class="text" id="span_004790" smilref="Programming_Robots_with_ROS00016.smil#span_004790">product_num</span><span class="text" id="span_004791" smilref="Programming_Robots_with_ROS00016.smil#span_004791">)</span>
    <span class="text" id="span_004792" smilref="Programming_Robots_with_ROS00016.smil#span_004792">item_pose</span> <span class="text" id="span_004793" smilref="Programming_Robots_with_ROS00016.smil#span_004793">=</span> <span class="text" id="span_004794" smilref="Programming_Robots_with_ROS00016.smil#span_004794">Pose</span><span class="text" id="span_004795" smilref="Programming_Robots_with_ROS00016.smil#span_004795">(</span><span class="text" id="span_004796" smilref="Programming_Robots_with_ROS00016.smil#span_004796">Point</span><span class="text" id="span_004797" smilref="Programming_Robots_with_ROS00016.smil#span_004797">(</span><span class="text" id="span_004798" smilref="Programming_Robots_with_ROS00016.smil#span_004798">x</span><span class="text" id="span_004799" smilref="Programming_Robots_with_ROS00016.smil#span_004799">=</span><span class="text" id="span_004800" smilref="Programming_Robots_with_ROS00016.smil#span_004800">bin_x</span><span class="text" id="span_004801" smilref="Programming_Robots_with_ROS00016.smil#span_004801">,</span> <span class="text" id="span_004802" smilref="Programming_Robots_with_ROS00016.smil#span_004802">y</span><span class="text" id="span_004803" smilref="Programming_Robots_with_ROS00016.smil#span_004803">=</span><span class="text" id="span_004804" smilref="Programming_Robots_with_ROS00016.smil#span_004804">bin_y</span><span class="text" id="span_004805" smilref="Programming_Robots_with_ROS00016.smil#span_004805">,</span> <span class="text" id="span_004806" smilref="Programming_Robots_with_ROS00016.smil#span_004806">z</span><span class="text" id="span_004807" smilref="Programming_Robots_with_ROS00016.smil#span_004807">=</span><span class="text" id="span_004808" smilref="Programming_Robots_with_ROS00016.smil#span_004808">2</span><span class="text" id="span_004809" smilref="Programming_Robots_with_ROS00016.smil#span_004809">)</span><span class="text" id="span_004810" smilref="Programming_Robots_with_ROS00016.smil#span_004810">,</span> <span class="text" id="span_004811" smilref="Programming_Robots_with_ROS00016.smil#span_004811">orient</span><span class="text" id="span_004812" smilref="Programming_Robots_with_ROS00016.smil#span_004812">)</span> <a class="co" id="ch14-co_stockroom_bot_CO6-5" href="#ch14-callout_stockroom_bot_CO6-5" external="false"><img src="images/5.jpg" alt="5" id="img_000184" /></a>
    <span class="text" id="span_004813" smilref="Programming_Robots_with_ROS00016.smil#span_004813">s</span><span class="text" id="span_004814" smilref="Programming_Robots_with_ROS00016.smil#span_004814">(</span><span class="text" id="span_004815" smilref="Programming_Robots_with_ROS00016.smil#span_004815">item_name</span><span class="text" id="span_004816" smilref="Programming_Robots_with_ROS00016.smil#span_004816">,</span> <span class="text" id="span_004817" smilref="Programming_Robots_with_ROS00016.smil#span_004817">product_xml</span><span class="text" id="span_004818" smilref="Programming_Robots_with_ROS00016.smil#span_004818">,</span> <span class="text" id="span_004819" smilref="Programming_Robots_with_ROS00016.smil#span_004819">"</span><span class="text" id="span_004820" smilref="Programming_Robots_with_ROS00016.smil#span_004820">"</span><span class="text" id="span_004821" smilref="Programming_Robots_with_ROS00016.smil#span_004821">,</span> <span class="text" id="span_004822" smilref="Programming_Robots_with_ROS00016.smil#span_004822">item_pose</span><span class="text" id="span_004823" smilref="Programming_Robots_with_ROS00016.smil#span_004823">,</span> <span class="text" id="span_004824" smilref="Programming_Robots_with_ROS00016.smil#span_004824">"</span><span class="text" id="span_004825" smilref="Programming_Robots_with_ROS00016.smil#span_004825">world</span><span class="text" id="span_004826" smilref="Programming_Robots_with_ROS00016.smil#span_004826">"</span><span class="text" id="span_004827" smilref="Programming_Robots_with_ROS00016.smil#span_004827">)</span> <a class="co" id="ch14-co_stockroom_bot_CO6-6" href="#ch14-callout_stockroom_bot_CO6-6" external="false"><img src="images/6.jpg" alt="6" id="img_000185" /></a></code>
                  </p>
                  <dl class="calloutlist" id="dl_000015">
                    <dt id="dt_000066">
                      <a class="co" id="ch14-callout_stockroom_bot_CO6-1" href="#ch14-co_stockroom_bot_CO6-1" external="false">
                        <img src="images/1.jpg" alt="1" id="img_000186" />
                      </a>
                    </dt>
                    <dd id="dd_000066">
                      <p id="p_000940">
                        <code xml:space="preserve" id="code_001361" smilref="Programming_Robots_with_ROS00016.smil#code_001361">wait_for_service()</code>
                        <span class="text" id="span_004828" smilref="Programming_Robots_with_ROS00016.smil#span_004828">is used to ensure Gazebo is ready for our script.</span>
                      </p>
                    </dd>
                    <dt id="dt_000067">
                      <a class="co" id="ch14-callout_stockroom_bot_CO6-2" href="#ch14-co_stockroom_bot_CO6-2" external="false">
                        <img src="images/2.jpg" alt="2" id="img_000187" />
                      </a>
                    </dt>
                    <dd id="dd_000067">
                      <p id="p_000941" smilref="Programming_Robots_with_ROS00016.smil#p_000941">We'll be sending the item's model file over the ROS service, so first we need to load it into a string.</p>
                    </dd>
                    <dt id="dt_000068">
                      <a class="co" id="ch14-callout_stockroom_bot_CO6-3" href="#ch14-co_stockroom_bot_CO6-3" external="false">
                        <img src="images/3.jpg" alt="3" id="img_000188" />
                      </a>
                    </dt>
                    <dd id="dd_000068">
                      <p id="p_000942" smilref="Programming_Robots_with_ROS00016.smil#p_000942">First, we will try to delete any prior model of this name in the simulation, in case this script has already been run before on the same instance of Gazebo.</p>
                    </dd>
                    <dt id="dt_000069">
                      <a class="co" id="ch14-callout_stockroom_bot_CO6-4" href="#ch14-co_stockroom_bot_CO6-4" external="false">
                        <img src="images/4.jpg" alt="4" id="img_000189" />
                      </a>
                    </dt>
                    <dd id="dd_000069">
                      <p id="p_000943" smilref="Programming_Robots_with_ROS00016.smil#p_000943">This version of the script will always place the items in the same location, but we could later add some randomization to evaluate system robustness.</p>
                    </dd>
                    <dt id="dt_000070">
                      <a class="co" id="ch14-callout_stockroom_bot_CO6-5" href="#ch14-co_stockroom_bot_CO6-5" external="false">
                        <img src="images/5.jpg" alt="5" id="img_000190" />
                      </a>
                    </dt>
                    <dd id="dd_000070">
                      <p id="p_000944">
                        <span class="text" id="span_004829" smilref="Programming_Robots_with_ROS00016.smil#span_004829">The</span>
                        <em id="em_000367" smilref="Programming_Robots_with_ROS00016.smil#em_000367">z</em>
                        <span class="text" id="span_004830" smilref="Programming_Robots_with_ROS00016.smil#span_004830">coordinate is intentionally quite a bit higher than the bins. This lets us modify the bin height in the other files without worrying about matching it here, since the items will just fall in the simulator until they come to rest in the bin.</span>
                      </p>
                    </dd>
                    <dt id="dt_000071">
                      <a class="co" id="ch14-callout_stockroom_bot_CO6-6" href="#ch14-co_stockroom_bot_CO6-6" external="false">
                        <img src="images/6.jpg" alt="6" id="img_000191" />
                      </a>
                    </dt>
                    <dd id="dd_000071">
                      <p id="ch14-idp34510240" data-type="indexterm" data-startref="ix_14-stockroom_bot-asciidoc3" smilref="Programming_Robots_with_ROS00016.smil#ch14-idp34510240">This is the actual call to the Gazebo spawner service proxy, which will instantiate our item models one at a time.</p>
                    </dd>
                  </dl>
                </div>
                <p id="p_000945" smilref="Programming_Robots_with_ROS00016.smil#p_000945">Now that we have our stockroom ready, we can start using it to develop our robot software! Although creating the simulation environment may have seemed tedious, its utility will quickly become apparent as we use it extensively throughout the remainder of the chapter.</p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Driving to Bins" id="section_000144">
              <h1 id="h1_000293" smilref="Programming_Robots_with_ROS00016.smil#h1_000293">Driving to Bins</h1>
              <div class="sect1" id="ch14-idp35450192">
                <p id="ch14-ix_14-stockroom_bot-asciidoc9" data-type="indexterm" data-primary="bins" data-secondary="driving Stockroom-bot to">
                  <span class="text" id="span_004831" smilref="Programming_Robots_with_ROS00016.smil#span_004831">The simulated stockroom allows us to try out a number of different ideas relatively quickly and easily. We can even try to drop various robot models into the stockroom to see how they fit. For example,</span>
                  <a data-type="xref" href="#ch14-stockroom_pr2" external="false" id="a_000216" smilref="Programming_Robots_with_ROS00016.smil#a_000216">Figure 14-5</a>
                  <span class="text" id="span_004832" smilref="Programming_Robots_with_ROS00016.smil#span_004832">shows a PR2 robot dropped into the stockroom.</span>
                </p>
                <p id="ch14-ix_14-stockroom_bot-asciidoc11" data-type="indexterm" data-primary="Fetch robot" smilref="Programming_Robots_with_ROS00016.smil#ch14-ix_14-stockroom_bot-asciidoc11">Although the PR2 could definitely accomplish this task, for the remainder of this chapter, we will use the Fetch robot, manufactured by Fetch Robotics. A model of Fetch is freely available and can be easily installed on Ubuntu:</p>
                <p id="p_000946">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001362"><span class="text" id="span_004833" smilref="Programming_Robots_with_ROS00016.smil#span_004833">
user@hostname$ </span><strong id="strong_000159" smilref="Programming_Robots_with_ROS00016.smil#strong_000159">sudo apt-get install ros-indigo-fetch*</strong>
</code>
                </p>
                <figure id="figure_000068">
                  <h1 id="h1_000294" smilref="Programming_Robots_with_ROS00016.smil#h1_000294">Figure 14-5. A PR2 robot dropped into the simulated stockroom</h1>
                  <div id="ch14-stockroom_pr2" class="figure">
                    <img src="images/prwr_1405.jpg" alt="PR2 in the simulated stockroom" id="img_000192" />
                  </div>
                </figure>
                <p id="p_000947">
                  <span class="text" id="span_004834" smilref="Programming_Robots_with_ROS00016.smil#span_004834">The Fetch robot is designed specifically for the domain of warehouse automation, and its one-arm design and relatively compact footprint are a good match to the stockroom system that we are developing in this chapter. We can start Gazebo with our stockroom world and spawn a Fetch robot in the middle of it using</span>
                  <em id="em_000368" smilref="Programming_Robots_with_ROS00016.smil#em_000368">stockroom.launch</em>
                  <span class="text" id="span_004835" smilref="Programming_Robots_with_ROS00016.smil#span_004835">, shown in</span>
                  <a data-type="xref" href="#ch14-stockroomlaunch" external="false" id="a_000217" smilref="Programming_Robots_with_ROS00016.smil#a_000217">Example 14-9</a>
                  <span class="text" id="span_004836" smilref="Programming_Robots_with_ROS00016.smil#span_004836">. This will produce the scene shown in</span>
                  <a data-type="xref" href="#ch14-stockroom_fetch" external="false" id="a_000218" smilref="Programming_Robots_with_ROS00016.smil#a_000218">Figure 14-6</a>
                  <span class="text" id="span_004837" smilref="Programming_Robots_with_ROS00016.smil#span_004837">.</span>
                </p>
                <h1 id="h1_000295" smilref="Programming_Robots_with_ROS00016.smil#h1_000295">Example 14-9. stockroom.launch</h1>
                <div id="ch14-stockroomlaunch" data-type="example">
                  <p id="p_000948">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001363" smilref="Programming_Robots_with_ROS00016.smil#code_001363">&lt;launch&gt;
  &lt;include file="$(find gazebo_ros)/launch/empty_world.launch"&gt;
    &lt;arg name="world_name" value="$(find stockroom_bot)/worlds/aisle.world"/&gt;
  &lt;/include&gt;
  &lt;include file="$(find fetch_gazebo)/launch/include/fetch.launch.xml"/&gt;
&lt;/launch&gt;</code>
                  </p>
                </div>
                <p data-type="indexterm" data-primary="maps" data-secondary="for navigating a stockroom" id="ch14-idp34454048">
                  <span class="text" id="span_004838" smilref="Programming_Robots_with_ROS00016.smil#span_004838">As described in Chapters</span>
                  <a href="#ch09-mapping" external="false" id="a_000219" smilref="Programming_Robots_with_ROS00016.smil#a_000219">9</a>
                  <span class="text" id="span_004839" smilref="Programming_Robots_with_ROS00016.smil#span_004839">and</span>
                  <a href="#ch13-patrol" external="false" id="a_000220" smilref="Programming_Robots_with_ROS00016.smil#a_000220">13</a>
                  <span class="text" id="span_004840" smilref="Programming_Robots_with_ROS00016.smil#span_004840">, the first thing we need to do for autonomous navigation is to create a map. To do this, just like in the previous chapters, we teleoperate the robot while recording its laser scanner readings and odometry, which are broadcast on the</span>
                  <code xml:space="preserve" id="code_001364" smilref="Programming_Robots_with_ROS00016.smil#code_001364">/base_scan</code>
                  <span class="text" id="span_004841" smilref="Programming_Robots_with_ROS00016.smil#span_004841">and</span>
                  <code xml:space="preserve" id="code_001365" smilref="Programming_Robots_with_ROS00016.smil#code_001365">/tf</code>
                  <span class="text" id="span_004842" smilref="Programming_Robots_with_ROS00016.smil#span_004842">topics, respectively:</span>
                </p>
                <p id="p_000949">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001366"><span class="text" id="span_004843" smilref="Programming_Robots_with_ROS00016.smil#span_004843">
user@hostname$ </span><strong id="strong_000160" smilref="Programming_Robots_with_ROS00016.smil#strong_000160">rosbag record -O stockroom_bot.bag /base_scan /tf</strong>
</code>
                </p>
                <figure id="figure_000069">
                  <h1 id="h1_000296" smilref="Programming_Robots_with_ROS00016.smil#h1_000296">Figure 14-6. A Fetch robot dropped into the simulated stockroom</h1>
                  <div id="ch14-stockroom_fetch" class="figure">
                    <img src="images/prwr_1406.jpg" alt="A Fetch robot in the simulated stockroom" id="img_000193" />
                  </div>
                </figure>
                <p id="p_000950" smilref="Programming_Robots_with_ROS00016.smil#p_000950">After driving around the world so that the laser scanner has seen all of the corners to build its map, just Ctrl-C the logger, teleoperation, and simulation. This is necessary because, when playing back the bag file, the ROS clock will skip backward in time, which would confuse unsuspecting programs.</p>
                <p id="p_000951" smilref="Programming_Robots_with_ROS00016.smil#p_000951">First, in a fresh terminal, we'll explicitly tell ROS to source its clock from the logged simulation time:</p>
                <p id="p_000952">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001367"><span class="text" id="span_004844" smilref="Programming_Robots_with_ROS00016.smil#span_004844">
user@hostname$ </span><strong id="strong_000161" smilref="Programming_Robots_with_ROS00016.smil#strong_000161">rosparam set use_time_time true</strong>
</code>
                </p>
                <p id="p_000953" smilref="Programming_Robots_with_ROS00016.smil#p_000953">Next, we'll start the SLAM system:</p>
                <p id="p_000954">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001368"><span class="text" id="span_004845" smilref="Programming_Robots_with_ROS00016.smil#span_004845">
user@hostname$ </span><strong id="strong_000162" smilref="Programming_Robots_with_ROS00016.smil#strong_000162">rosrun gmapping slam_gmapping scan:=base_scan \
  _odom_frame:=odom_combined</strong>
</code>
                </p>
                <p id="p_000955" smilref="Programming_Robots_with_ROS00016.smil#p_000955">and then start playing back the log file:</p>
                <p id="p_000956">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001369"><span class="text" id="span_004846" smilref="Programming_Robots_with_ROS00016.smil#span_004846">
user@hostname$ </span><strong id="strong_000163" smilref="Programming_Robots_with_ROS00016.smil#strong_000163">rosbag play --clock stockroom_bot.bag</strong>
</code>
                </p>
                <p id="p_000957">
                  <span class="text" id="span_004847" smilref="Programming_Robots_with_ROS00016.smil#span_004847">The</span>
                  <code xml:space="preserve" id="code_001370" smilref="Programming_Robots_with_ROS00016.smil#code_001370">slam_gmapping</code>
                  <span class="text" id="span_004848" smilref="Programming_Robots_with_ROS00016.smil#span_004848">terminal will print status messages as it processes the laser scans and robot odometry data. After the log has finished playing, just as in</span>
                  <a data-type="xref" href="#ch09-mapping" external="false" id="a_000221" smilref="Programming_Robots_with_ROS00016.smil#a_000221">Chapter 9</a>
                  <span class="text" id="span_004849" smilref="Programming_Robots_with_ROS00016.smil#span_004849">, we'll need to save the map to an image file. Start up a new terminal and run the</span>
                  <code xml:space="preserve" id="code_001371" smilref="Programming_Robots_with_ROS00016.smil#code_001371">map_saver</code>
                  <span class="text" id="span_004850" smilref="Programming_Robots_with_ROS00016.smil#span_004850">command:</span>
                </p>
                <p id="p_000958">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001372"><span class="text" id="span_004851" smilref="Programming_Robots_with_ROS00016.smil#span_004851">
user@hostname$ </span><strong id="strong_000164" smilref="Programming_Robots_with_ROS00016.smil#strong_000164">rosrun map_server map_saver</strong>
</code>
                </p>
                <p id="p_000959">
                  <span class="text" id="span_004852" smilref="Programming_Robots_with_ROS00016.smil#span_004852">This will create</span>
                  <em id="em_000369" smilref="Programming_Robots_with_ROS00016.smil#em_000369">map.pgm</em>
                  <span class="text" id="span_004853" smilref="Programming_Robots_with_ROS00016.smil#span_004853">in your current working directory. Since the robot has a laser scanner and reasonable odometry, the map will look very nice, as shown in</span>
                  <a data-type="xref" href="#ch14-stockroom_map" external="false" id="a_000222" smilref="Programming_Robots_with_ROS00016.smil#a_000222">Figure 14-7</a>
                  <span class="text" id="span_004854" smilref="Programming_Robots_with_ROS00016.smil#span_004854">.</span>
                </p>
                <figure id="figure_000070">
                  <h1 id="h1_000297" smilref="Programming_Robots_with_ROS00016.smil#h1_000297">Figure 14-7. A map of the simulation stockroom, which will be used for robot navigation.</h1>
                  <div id="ch14-stockroom_map" class="figure">
                    <img src="images/prwr_1407.jpg" alt="Stockroom map" id="img_000194" />
                  </div>
                </figure>
                <p id="p_000960">
                  <span class="text" id="span_004855" smilref="Programming_Robots_with_ROS00016.smil#span_004855">Because the stockroom is so much smaller than the maps shown in the preceding chapters, the</span>
                  <em id="em_000370" smilref="Programming_Robots_with_ROS00016.smil#em_000370">map.yaml</em>
                  <span class="text" id="span_004856" smilref="Programming_Robots_with_ROS00016.smil#span_004856">file will be different, since we only need a 20 Ã 20 meter map, as shown in</span>
                  <a data-type="xref" href="#ch14-mapyaml" external="false" id="a_000223" smilref="Programming_Robots_with_ROS00016.smil#a_000223">Example 14-10</a>
                  <span class="text" id="span_004857" smilref="Programming_Robots_with_ROS00016.smil#span_004857">.</span>
                </p>
                <h1 id="h1_000298" smilref="Programming_Robots_with_ROS00016.smil#h1_000298">Example 14-10. map.yaml</h1>
                <div id="ch14-mapyaml" data-type="example">
                  <p id="p_000961">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001373" smilref="Programming_Robots_with_ROS00016.smil#code_001373">image: map.pgm
resolution: 0.050000
origin: [-10.000000, -10.000000, 0.000000]
negate: 0
occupied_thresh: 0.65
free_thresh: 0.196</code>
                  </p>
                </div>
                <p id="p_000962">
                  <span class="text" id="span_004858" smilref="Programming_Robots_with_ROS00016.smil#span_004858">Now that we have built a map of the stockroom, we can feed it to the Fetch navigation subsystem, which, like in the PR2 and many other robots, is built on the ROS</span>
                  <code xml:space="preserve" id="code_001374" smilref="Programming_Robots_with_ROS00016.smil#code_001374">move_base</code>
                  <span class="text" id="span_004859" smilref="Programming_Robots_with_ROS00016.smil#span_004859">navigation stack. The launch file listed in</span>
                  <a data-type="xref" href="#ch14-stockroom_navlaunch" external="false" id="a_000224" smilref="Programming_Robots_with_ROS00016.smil#a_000224">Example 14-11</a>
                  <span class="text" id="span_004860" smilref="Programming_Robots_with_ROS00016.smil#span_004860">shows how to feed the map into the navigation stack.</span>
                </p>
                <h1 id="h1_000299" smilref="Programming_Robots_with_ROS00016.smil#h1_000299">Example 14-11. nav.launch</h1>
                <div id="ch14-stockroom_navlaunch" data-type="example">
                  <p id="p_000963">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001375" smilref="Programming_Robots_with_ROS00016.smil#code_001375">&lt;launch&gt;
  &lt;include file="$(find fetch_navigation)/launch/fetch_nav.launch"&gt;
    &lt;arg name="map_file" value="$(find stockroom_bot)/map.yaml"/&gt;
  &lt;/include&gt;
  &lt;node pkg="stockroom_bot" name="initial_localization"
        type="initial_localization.py"/&gt;
&lt;/launch&gt;</code>
                  </p>
                </div>
                <p id="ch14-idp34979696" data-type="indexterm" data-startref="ix_14-stockroom_bot-asciidoc11">
                  <span class="text" id="span_004861" smilref="Programming_Robots_with_ROS00016.smil#span_004861">Now that the Fetch navigation system is up, we can feed navigation goals to it using the same</span>
                  <code xml:space="preserve" id="code_001376" smilref="Programming_Robots_with_ROS00016.smil#code_001376">move_base</code>
                  <span class="text" id="span_004862" smilref="Programming_Robots_with_ROS00016.smil#span_004862">action interface described in the previous chapter. Because we know the structure of our stockroom, we can incorporate the bin spacing in a Python script and refer to the bins by their numeric indices on the command line, rather than their 2D spatial coordinates.</span>
                  <a data-type="xref" href="#ch14-go_to_binpy" external="false" id="a_000225" smilref="Programming_Robots_with_ROS00016.smil#a_000225">Example 14-12</a>
                  <span class="text" id="span_004863" smilref="Programming_Robots_with_ROS00016.smil#span_004863">shows how we can take a bin-number command, calculate the 2D coordinate of the bin, and feed that as a target to the robot's navigation stack.</span>
                </p>
                <h1 id="h1_000300" smilref="Programming_Robots_with_ROS00016.smil#h1_000300">Example 14-12. go_to_bin.py</h1>
                <div id="ch14-go_to_binpy" data-type="example">
                  <p id="p_000964">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001377" smilref="Programming_Robots_with_ROS00016.smil#code_001377">#!/usr/bin/env python
import sys, rospy, tf, actionlib
from geometry_msgs.msg import *
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
from tf.transformations import quaternion_from_euler
from std_srvs.srv import Empty
from look_at_bin import look_at_bin

if __name__ == '__main__':
  rospy.init_node('go_to_bin')
  rospy.wait_for_service("/move_base/clear_costmaps")
  rospy.ServiceProxy("/move_base/clear_costmaps", Empty)()
  args = rospy.myargv(argv=sys.argv)
  if len(args) != 2:
    print "usage: go_to_bin.py BIN_NUMBER"
    sys.exit(1)
  bin_number = int(args[1])
  move_base = actionlib.SimpleActionClient('move_base', MoveBaseAction)
  move_base.wait_for_server()
  goal = MoveBaseGoal()
  goal.target_pose.header.frame_id = 'map'
  goal.target_pose.pose.position.x = 0.5 * (bin_number % 6) - 1.5;
  goal.target_pose.pose.position.y = 1.1 * (bin_number / 6) - 0.55;
  if bin_number &gt;= 6:
    yaw = 1.57
  else:
    yaw = -1.57
  orient = Quaternion(*quaternion_from_euler(0, 0, yaw))
  goal.target_pose.pose.orientation = orient
  move_base.send_goal(goal)
  move_base.wait_for_result()
  look_at_bin()</code>
                  </p>
                </div>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Picking Up the Item" id="section_000145">
              <h1 id="h1_000301" smilref="Programming_Robots_with_ROS00016.smil#h1_000301">Picking Up the Item</h1>
              <div class="sect1" id="ch14-idp34513472">
                <p data-type="indexterm" data-primary="bins" data-secondary="picking up items from" id="ch14-ix_14-stockroom_bot-asciidoc12">
                  <span class="text" id="span_004864" smilref="Programming_Robots_with_ROS00016.smil#span_004864">Once the robot has arrived in front of a bin, the next step is to point the robot's head so that it is aiming at the bin. There are many ways to do this, and the best choice will be somewhat dependent on the ROS API of the robot in question. The Fetch robot provides an action server called</span>
                  <code xml:space="preserve" id="code_001378" smilref="Programming_Robots_with_ROS00016.smil#code_001378">head_controller/point_head</code>
                  <span class="text" id="span_004865" smilref="Programming_Robots_with_ROS00016.smil#span_004865">, which we can call from Python to aim the head in the correct direction.</span>
                  <a data-type="xref" href="#ch14-look_at_binpy" external="false" id="a_000226" smilref="Programming_Robots_with_ROS00016.smil#a_000226">Example 14-13</a>
                  <span class="text" id="span_004866" smilref="Programming_Robots_with_ROS00016.smil#span_004866">shows a minimalist program that uses this action interface to command the Fetch robot's head to point down, toward the bin in front of it.</span>
                </p>
                <h1 id="h1_000302" smilref="Programming_Robots_with_ROS00016.smil#h1_000302">Example 14-13. look_at_bin.py</h1>
                <div id="ch14-look_at_binpy" data-type="example">
                  <p id="p_000965">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001379" smilref="Programming_Robots_with_ROS00016.smil#code_001379">#!/usr/bin/env python
import sys, rospy, actionlib
from control_msgs.msg import PointHeadAction, PointHeadGoal

def look_at_bin():
  head_client = actionlib.SimpleActionClient("head_controller/point_head",
    PointHeadAction)
  head_client.wait_for_server()
  goal = PointHeadGoal()
  goal.target.header.stamp = rospy.Time.now()
  goal.target.header.frame_id = "base_link"
  goal.target.point.x = 0.7
  goal.target.point.y = 0
  goal.target.point.z = 0.4
  goal.min_duration = rospy.Duration(1.0)
  head_client.send_goal(goal)
  head_client.wait_for_result()

if __name__ == '__main__':
  rospy.init_node('look_at_bin')
  look_at_bin()</code>
                  </p>
                </div>
                <p id="p_000966">
                  <span class="text" id="span_004867" smilref="Programming_Robots_with_ROS00016.smil#span_004867">Even though</span>
                  <a data-type="xref" href="#ch14-go_to_binpy" external="false" id="a_000227" smilref="Programming_Robots_with_ROS00016.smil#a_000227">Example 14-12</a>
                  <span class="text" id="span_004868" smilref="Programming_Robots_with_ROS00016.smil#span_004868">will send the perfectly correct position of where we want the robot to park so that it can reach an item in the bin, often the robot won't end up exactly where we asked. This is due to many factors, including localization noise and the navigation system's goal tolerance, since, especially on differential-drive robots like the Fetch, the navigation system doesn't want the robot to have to do many "parallel-park" maneuvers to budge sideways a few centimeters. All navigation systems have a nonzero goal tolerance, within which the navigation system just declares victory and stops trying to reposition the robot. All of these parameters will vary depending on the robot and environment, but in our simulated Fetch system, we can expect position errors of plus or minus 10 centimeters. This produces the situation shown in</span>
                  <a data-type="xref" href="#ch14-in_front_of_binspng" external="false" id="a_000228" smilref="Programming_Robots_with_ROS00016.smil#a_000228">Figure 14-8</a>
                  <span class="text" id="span_004869" smilref="Programming_Robots_with_ROS00016.smil#span_004869">, where the robot is in approximately the right position but is certainly not exactly aligned with the target bin.</span>
                </p>
                <figure id="figure_000071">
                  <h1 id="h1_000303" smilref="Programming_Robots_with_ROS00016.smil#h1_000303">Figure 14-8. Laser-only navigation can result in not-quite perfect alignment</h1>
                  <div id="ch14-in_front_of_binspng" class="figure">
                    <img src="images/prwr_1408.jpg" alt="Laser navigation in the stockroom" id="img_000195" />
                  </div>
                </figure>
                <p id="ch14-ix_14-stockroom_bot-asciidoc15" data-type="indexterm" data-primary="ALVAR marker system" smilref="Programming_Robots_with_ROS00016.smil#ch14-ix_14-stockroom_bot-asciidoc15">Fortunately, our bins are labeled with ALVAR markers! We can program the robot to use the estimated ALVAR marker range and relative orientation so that it can derive manipulation targets from the visual marker, rather than relying on extraordinary precision from the navigation system. This will typically be considerably more accurate than what the laser-based navigation system can achieve.</p>
                <p id="p_000967">
                  <span class="text" id="span_004870" smilref="Programming_Robots_with_ROS00016.smil#span_004870">First, we need to fire up the ALVAR detector node.</span>
                  <a data-type="xref" href="#ch14-markerslaunch" external="false" id="a_000229" smilref="Programming_Robots_with_ROS00016.smil#a_000229">Example 14-14</a>
                  <span class="text" id="span_004871" smilref="Programming_Robots_with_ROS00016.smil#span_004871">shows a launch file that will start an ALVAR tracker node from the</span>
                  <code xml:space="preserve" id="code_001380" smilref="Programming_Robots_with_ROS00016.smil#code_001380">ar_track_alvar</code>
                  <span class="text" id="span_004872" smilref="Programming_Robots_with_ROS00016.smil#span_004872">package. This launch file also creates a static transform broadcaster for each of the ALVAR frames, to rotate the frames returned by the ALVAR detector node such that the z-axes point up, which is necessary in order to feed those transforms to the navigation stack. Although it would be much more elegant and scalable to create these relative transformations on the fly as ALVAR markers were detected, for the sake of brevity and simplicity, and because our environment only has 12 bins with ALVAR markers, we will opt for the minimalist solution of repeatedly instantiating</span>
                  <code xml:space="preserve" id="code_001381" smilref="Programming_Robots_with_ROS00016.smil#code_001381">static_transformation_publisher</code>
                  <span class="text" id="span_004873" smilref="Programming_Robots_with_ROS00016.smil#span_004873">nodes to create the transformations we need.</span>
                </p>
                <h1 id="h1_000304" smilref="Programming_Robots_with_ROS00016.smil#h1_000304">Example 14-14. markers.launch</h1>
                <div id="ch14-markerslaunch" data-type="example">
                  <p id="p_000968">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001382"><span class="text" id="span_004874" smilref="Programming_Robots_with_ROS00016.smil#span_004874">&lt;launch</span><span class="text" id="span_004875" smilref="Programming_Robots_with_ROS00016.smil#span_004875">&gt;</span>
  <span class="text" id="span_004876" smilref="Programming_Robots_with_ROS00016.smil#span_004876">&lt;arg</span> <span class="text" id="span_004877" smilref="Programming_Robots_with_ROS00016.smil#span_004877">name=</span><span class="text" id="span_004878" smilref="Programming_Robots_with_ROS00016.smil#span_004878">"marker_size"</span> <span class="text" id="span_004879" smilref="Programming_Robots_with_ROS00016.smil#span_004879">default=</span><span class="text" id="span_004880" smilref="Programming_Robots_with_ROS00016.smil#span_004880">"12.3"</span><span class="text" id="span_004881" smilref="Programming_Robots_with_ROS00016.smil#span_004881">/&gt;</span> <a class="co" id="ch14-aco_stockroom_bot_CO7-1" href="#ch14-acallout_stockroom_bot_CO7-1" external="false"><img src="images/1.jpg" alt="1" id="img_000196" /></a>
  <span class="text" id="span_004882" smilref="Programming_Robots_with_ROS00016.smil#span_004882">&lt;arg</span> <span class="text" id="span_004883" smilref="Programming_Robots_with_ROS00016.smil#span_004883">name=</span><span class="text" id="span_004884" smilref="Programming_Robots_with_ROS00016.smil#span_004884">"max_new_marker_error"</span> <span class="text" id="span_004885" smilref="Programming_Robots_with_ROS00016.smil#span_004885">default=</span><span class="text" id="span_004886" smilref="Programming_Robots_with_ROS00016.smil#span_004886">"0.2"</span><span class="text" id="span_004887" smilref="Programming_Robots_with_ROS00016.smil#span_004887">/&gt;</span>
  <span class="text" id="span_004888" smilref="Programming_Robots_with_ROS00016.smil#span_004888">&lt;arg</span> <span class="text" id="span_004889" smilref="Programming_Robots_with_ROS00016.smil#span_004889">name=</span><span class="text" id="span_004890" smilref="Programming_Robots_with_ROS00016.smil#span_004890">"max_track_error"</span> <span class="text" id="span_004891" smilref="Programming_Robots_with_ROS00016.smil#span_004891">default=</span><span class="text" id="span_004892" smilref="Programming_Robots_with_ROS00016.smil#span_004892">"0.8"</span><span class="text" id="span_004893" smilref="Programming_Robots_with_ROS00016.smil#span_004893">/&gt;</span>
  <span class="text" id="span_004894" smilref="Programming_Robots_with_ROS00016.smil#span_004894">&lt;arg</span> <span class="text" id="span_004895" smilref="Programming_Robots_with_ROS00016.smil#span_004895">name=</span><span class="text" id="span_004896" smilref="Programming_Robots_with_ROS00016.smil#span_004896">"cam_image_topic"</span> <span class="text" id="span_004897" smilref="Programming_Robots_with_ROS00016.smil#span_004897">default=</span><span class="text" id="span_004898" smilref="Programming_Robots_with_ROS00016.smil#span_004898">"/head_camera/rgb/image_raw"</span><span class="text" id="span_004899" smilref="Programming_Robots_with_ROS00016.smil#span_004899">/&gt;</span>
  <span class="text" id="span_004900" smilref="Programming_Robots_with_ROS00016.smil#span_004900">&lt;arg</span> <span class="text" id="span_004901" smilref="Programming_Robots_with_ROS00016.smil#span_004901">name=</span><span class="text" id="span_004902" smilref="Programming_Robots_with_ROS00016.smil#span_004902">"cam_info_topic"</span> <span class="text" id="span_004903" smilref="Programming_Robots_with_ROS00016.smil#span_004903">default=</span><span class="text" id="span_004904" smilref="Programming_Robots_with_ROS00016.smil#span_004904">"/head_camera/rgb/camera_info"</span><span class="text" id="span_004905" smilref="Programming_Robots_with_ROS00016.smil#span_004905">/&gt;</span>
  <span class="text" id="span_004906" smilref="Programming_Robots_with_ROS00016.smil#span_004906">&lt;arg</span> <span class="text" id="span_004907" smilref="Programming_Robots_with_ROS00016.smil#span_004907">name=</span><span class="text" id="span_004908" smilref="Programming_Robots_with_ROS00016.smil#span_004908">"output_frame"</span> <span class="text" id="span_004909" smilref="Programming_Robots_with_ROS00016.smil#span_004909">default=</span><span class="text" id="span_004910" smilref="Programming_Robots_with_ROS00016.smil#span_004910">"/base_link"</span><span class="text" id="span_004911" smilref="Programming_Robots_with_ROS00016.smil#span_004911">/&gt;</span>
  <span class="text" id="span_004912" smilref="Programming_Robots_with_ROS00016.smil#span_004912">&lt;node</span> <span class="text" id="span_004913" smilref="Programming_Robots_with_ROS00016.smil#span_004913">name=</span><span class="text" id="span_004914" smilref="Programming_Robots_with_ROS00016.smil#span_004914">"ar_track_alvar"</span> <span class="text" id="span_004915" smilref="Programming_Robots_with_ROS00016.smil#span_004915">pkg=</span><span class="text" id="span_004916" smilref="Programming_Robots_with_ROS00016.smil#span_004916">"ar_track_alvar"</span>
        <span class="text" id="span_004917" smilref="Programming_Robots_with_ROS00016.smil#span_004917">type=</span><span class="text" id="span_004918" smilref="Programming_Robots_with_ROS00016.smil#span_004918">"individualMarkersNoKinect"</span> <span class="text" id="span_004919" smilref="Programming_Robots_with_ROS00016.smil#span_004919">respawn=</span><span class="text" id="span_004920" smilref="Programming_Robots_with_ROS00016.smil#span_004920">"false"</span> <span class="text" id="span_004921" smilref="Programming_Robots_with_ROS00016.smil#span_004921">output=</span><span class="text" id="span_004922" smilref="Programming_Robots_with_ROS00016.smil#span_004922">"screen"</span>
        <span class="text" id="span_004923" smilref="Programming_Robots_with_ROS00016.smil#span_004923">args=</span><span class="text" id="span_004924" smilref="Programming_Robots_with_ROS00016.smil#span_004924">"$(arg marker_size) $(arg max_new_marker_error) \
              $(arg max_track_error) $(arg cam_image_topic)  \
              $(arg cam_info_topic) $(arg output_frame)"</span> <span class="text" id="span_004925" smilref="Programming_Robots_with_ROS00016.smil#span_004925">/&gt;</span> <a class="co" id="ch14-aco_stockroom_bot_CO7-2" href="#ch14-acallout_stockroom_bot_CO7-2" external="false"><img src="images/2.jpg" alt="2" id="img_000197" /></a>
  <span class="text" id="span_004926" smilref="Programming_Robots_with_ROS00016.smil#span_004926">&lt;arg</span> <span class="text" id="span_004927" smilref="Programming_Robots_with_ROS00016.smil#span_004927">name=</span><span class="text" id="span_004928" smilref="Programming_Robots_with_ROS00016.smil#span_004928">"tag_rot"</span> <span class="text" id="span_004929" smilref="Programming_Robots_with_ROS00016.smil#span_004929">default=</span><span class="text" id="span_004930" smilref="Programming_Robots_with_ROS00016.smil#span_004930">"0 0 0 0 0 -1.57"</span><span class="text" id="span_004931" smilref="Programming_Robots_with_ROS00016.smil#span_004931">&gt;</span> <a class="co" id="ch14-aco_stockroom_bot_CO7-3" href="#ch14-acallout_stockroom_bot_CO7-3" external="false"><img src="images/3.jpg" alt="3" id="img_000198" /></a>
  <span class="text" id="span_004932" smilref="Programming_Robots_with_ROS00016.smil#span_004932">&lt;arg</span> <span class="text" id="span_004933" smilref="Programming_Robots_with_ROS00016.smil#span_004933">name=</span><span class="text" id="span_004934" smilref="Programming_Robots_with_ROS00016.smil#span_004934">"tag_trans"</span> <span class="text" id="span_004935" smilref="Programming_Robots_with_ROS00016.smil#span_004935">default=</span><span class="text" id="span_004936" smilref="Programming_Robots_with_ROS00016.smil#span_004936">"0 -0.28 -0.1 0 0 0"</span><span class="text" id="span_004937" smilref="Programming_Robots_with_ROS00016.smil#span_004937">&gt;</span>

  <a class="co" id="ch14-aco_stockroom_bot_CO7-4" href="#ch14-acallout_stockroom_bot_CO7-4" external="false"><img src="images/4.jpg" alt="4" id="img_000199" /></a>
  <span class="text" id="span_004938" smilref="Programming_Robots_with_ROS00016.smil#span_004938">&lt;node</span> <span class="text" id="span_004939" smilref="Programming_Robots_with_ROS00016.smil#span_004939">pkg=</span><span class="text" id="span_004940" smilref="Programming_Robots_with_ROS00016.smil#span_004940">"tf"</span> <span class="text" id="span_004941" smilref="Programming_Robots_with_ROS00016.smil#span_004941">type=</span><span class="text" id="span_004942" smilref="Programming_Robots_with_ROS00016.smil#span_004942">"static_transform_publisher"</span> <span class="text" id="span_004943" smilref="Programming_Robots_with_ROS00016.smil#span_004943">name=</span><span class="text" id="span_004944" smilref="Programming_Robots_with_ROS00016.smil#span_004944">"ar_0_up"</span>
        <span class="text" id="span_004945" smilref="Programming_Robots_with_ROS00016.smil#span_004945">args=</span><span class="text" id="span_004946" smilref="Programming_Robots_with_ROS00016.smil#span_004946">"$(arg tag_rot) ar_marker_0 ar_0_up 100"</span><span class="text" id="span_004947" smilref="Programming_Robots_with_ROS00016.smil#span_004947">/&gt;</span>
  <span class="text" id="span_004948" smilref="Programming_Robots_with_ROS00016.smil#span_004948">&lt;node</span> <span class="text" id="span_004949" smilref="Programming_Robots_with_ROS00016.smil#span_004949">pkg=</span><span class="text" id="span_004950" smilref="Programming_Robots_with_ROS00016.smil#span_004950">"tf"</span> <span class="text" id="span_004951" smilref="Programming_Robots_with_ROS00016.smil#span_004951">type=</span><span class="text" id="span_004952" smilref="Programming_Robots_with_ROS00016.smil#span_004952">"static_transform_publisher"</span> <span class="text" id="span_004953" smilref="Programming_Robots_with_ROS00016.smil#span_004953">name=</span><span class="text" id="span_004954" smilref="Programming_Robots_with_ROS00016.smil#span_004954">"ar_1_up"</span>
        <span class="text" id="span_004955" smilref="Programming_Robots_with_ROS00016.smil#span_004955">args=</span><span class="text" id="span_004956" smilref="Programming_Robots_with_ROS00016.smil#span_004956">"$(arg tag_rot)  ar_marker_1 ar_1_up 100"</span><span class="text" id="span_004957" smilref="Programming_Robots_with_ROS00016.smil#span_004957">/&gt;</span>
  <span class="text" id="span_004958" smilref="Programming_Robots_with_ROS00016.smil#span_004958">&lt;node</span> <span class="text" id="span_004959" smilref="Programming_Robots_with_ROS00016.smil#span_004959">pkg=</span><span class="text" id="span_004960" smilref="Programming_Robots_with_ROS00016.smil#span_004960">"tf"</span> <span class="text" id="span_004961" smilref="Programming_Robots_with_ROS00016.smil#span_004961">type=</span><span class="text" id="span_004962" smilref="Programming_Robots_with_ROS00016.smil#span_004962">"static_transform_publisher"</span> <span class="text" id="span_004963" smilref="Programming_Robots_with_ROS00016.smil#span_004963">name=</span><span class="text" id="span_004964" smilref="Programming_Robots_with_ROS00016.smil#span_004964">"ar_2_up"</span>
        <span class="text" id="span_004965" smilref="Programming_Robots_with_ROS00016.smil#span_004965">args=</span><span class="text" id="span_004966" smilref="Programming_Robots_with_ROS00016.smil#span_004966">"$(arg tag_rot) ar_marker_2 ar_2_up 100"</span><span class="text" id="span_004967" smilref="Programming_Robots_with_ROS00016.smil#span_004967">/&gt;</span>
  <span class="text" id="span_004968" smilref="Programming_Robots_with_ROS00016.smil#span_004968">&lt;node</span> <span class="text" id="span_004969" smilref="Programming_Robots_with_ROS00016.smil#span_004969">pkg=</span><span class="text" id="span_004970" smilref="Programming_Robots_with_ROS00016.smil#span_004970">"tf"</span> <span class="text" id="span_004971" smilref="Programming_Robots_with_ROS00016.smil#span_004971">type=</span><span class="text" id="span_004972" smilref="Programming_Robots_with_ROS00016.smil#span_004972">"static_transform_publisher"</span> <span class="text" id="span_004973" smilref="Programming_Robots_with_ROS00016.smil#span_004973">name=</span><span class="text" id="span_004974" smilref="Programming_Robots_with_ROS00016.smil#span_004974">"ar_3_up"</span>
        <span class="text" id="span_004975" smilref="Programming_Robots_with_ROS00016.smil#span_004975">args=</span><span class="text" id="span_004976" smilref="Programming_Robots_with_ROS00016.smil#span_004976">"$(arg tag_rot) ar_marker_3 ar_3_up 100"</span><span class="text" id="span_004977" smilref="Programming_Robots_with_ROS00016.smil#span_004977">/&gt;</span>
  <span class="text" id="span_004978" smilref="Programming_Robots_with_ROS00016.smil#span_004978">&lt;node</span> <span class="text" id="span_004979" smilref="Programming_Robots_with_ROS00016.smil#span_004979">pkg=</span><span class="text" id="span_004980" smilref="Programming_Robots_with_ROS00016.smil#span_004980">"tf"</span> <span class="text" id="span_004981" smilref="Programming_Robots_with_ROS00016.smil#span_004981">type=</span><span class="text" id="span_004982" smilref="Programming_Robots_with_ROS00016.smil#span_004982">"static_transform_publisher"</span> <span class="text" id="span_004983" smilref="Programming_Robots_with_ROS00016.smil#span_004983">name=</span><span class="text" id="span_004984" smilref="Programming_Robots_with_ROS00016.smil#span_004984">"ar_4_up"</span>
        <span class="text" id="span_004985" smilref="Programming_Robots_with_ROS00016.smil#span_004985">args=</span><span class="text" id="span_004986" smilref="Programming_Robots_with_ROS00016.smil#span_004986">"$(arg tag_rot) ar_marker_4 ar_4_up 100"</span><span class="text" id="span_004987" smilref="Programming_Robots_with_ROS00016.smil#span_004987">/&gt;</span>
  <span class="text" id="span_004988" smilref="Programming_Robots_with_ROS00016.smil#span_004988">&lt;node</span> <span class="text" id="span_004989" smilref="Programming_Robots_with_ROS00016.smil#span_004989">pkg=</span><span class="text" id="span_004990" smilref="Programming_Robots_with_ROS00016.smil#span_004990">"tf"</span> <span class="text" id="span_004991" smilref="Programming_Robots_with_ROS00016.smil#span_004991">type=</span><span class="text" id="span_004992" smilref="Programming_Robots_with_ROS00016.smil#span_004992">"static_transform_publisher"</span> <span class="text" id="span_004993" smilref="Programming_Robots_with_ROS00016.smil#span_004993">name=</span><span class="text" id="span_004994" smilref="Programming_Robots_with_ROS00016.smil#span_004994">"ar_5_up"</span>
        <span class="text" id="span_004995" smilref="Programming_Robots_with_ROS00016.smil#span_004995">args=</span><span class="text" id="span_004996" smilref="Programming_Robots_with_ROS00016.smil#span_004996">"$(arg tag_rot) ar_marker_5 ar_5_up 100"</span><span class="text" id="span_004997" smilref="Programming_Robots_with_ROS00016.smil#span_004997">/&gt;</span>
  <span class="text" id="span_004998" smilref="Programming_Robots_with_ROS00016.smil#span_004998">&lt;node</span> <span class="text" id="span_004999" smilref="Programming_Robots_with_ROS00016.smil#span_004999">pkg=</span><span class="text" id="span_005000" smilref="Programming_Robots_with_ROS00016.smil#span_005000">"tf"</span> <span class="text" id="span_005001" smilref="Programming_Robots_with_ROS00016.smil#span_005001">type=</span><span class="text" id="span_005002" smilref="Programming_Robots_with_ROS00016.smil#span_005002">"static_transform_publisher"</span> <span class="text" id="span_005003" smilref="Programming_Robots_with_ROS00016.smil#span_005003">name=</span><span class="text" id="span_005004" smilref="Programming_Robots_with_ROS00016.smil#span_005004">"ar_6_up"</span>
        <span class="text" id="span_005005" smilref="Programming_Robots_with_ROS00016.smil#span_005005">args=</span><span class="text" id="span_005006" smilref="Programming_Robots_with_ROS00016.smil#span_005006">"$(arg tag_rot) ar_marker_6 ar_6_up 100"</span><span class="text" id="span_005007" smilref="Programming_Robots_with_ROS00016.smil#span_005007">/&gt;</span>
  <span class="text" id="span_005008" smilref="Programming_Robots_with_ROS00016.smil#span_005008">&lt;node</span> <span class="text" id="span_005009" smilref="Programming_Robots_with_ROS00016.smil#span_005009">pkg=</span><span class="text" id="span_005010" smilref="Programming_Robots_with_ROS00016.smil#span_005010">"tf"</span> <span class="text" id="span_005011" smilref="Programming_Robots_with_ROS00016.smil#span_005011">type=</span><span class="text" id="span_005012" smilref="Programming_Robots_with_ROS00016.smil#span_005012">"static_transform_publisher"</span> <span class="text" id="span_005013" smilref="Programming_Robots_with_ROS00016.smil#span_005013">name=</span><span class="text" id="span_005014" smilref="Programming_Robots_with_ROS00016.smil#span_005014">"ar_7_up"</span>
        <span class="text" id="span_005015" smilref="Programming_Robots_with_ROS00016.smil#span_005015">args=</span><span class="text" id="span_005016" smilref="Programming_Robots_with_ROS00016.smil#span_005016">"$(arg tag_rot) ar_marker_7 ar_7_up 100"</span><span class="text" id="span_005017" smilref="Programming_Robots_with_ROS00016.smil#span_005017">/&gt;</span>
  <span class="text" id="span_005018" smilref="Programming_Robots_with_ROS00016.smil#span_005018">&lt;node</span> <span class="text" id="span_005019" smilref="Programming_Robots_with_ROS00016.smil#span_005019">pkg=</span><span class="text" id="span_005020" smilref="Programming_Robots_with_ROS00016.smil#span_005020">"tf"</span> <span class="text" id="span_005021" smilref="Programming_Robots_with_ROS00016.smil#span_005021">type=</span><span class="text" id="span_005022" smilref="Programming_Robots_with_ROS00016.smil#span_005022">"static_transform_publisher"</span> <span class="text" id="span_005023" smilref="Programming_Robots_with_ROS00016.smil#span_005023">name=</span><span class="text" id="span_005024" smilref="Programming_Robots_with_ROS00016.smil#span_005024">"ar_8_up"</span>
        <span class="text" id="span_005025" smilref="Programming_Robots_with_ROS00016.smil#span_005025">args=</span><span class="text" id="span_005026" smilref="Programming_Robots_with_ROS00016.smil#span_005026">"$(arg tag_rot) ar_marker_8 ar_8_up 100"</span><span class="text" id="span_005027" smilref="Programming_Robots_with_ROS00016.smil#span_005027">/&gt;</span>
  <span class="text" id="span_005028" smilref="Programming_Robots_with_ROS00016.smil#span_005028">&lt;node</span> <span class="text" id="span_005029" smilref="Programming_Robots_with_ROS00016.smil#span_005029">pkg=</span><span class="text" id="span_005030" smilref="Programming_Robots_with_ROS00016.smil#span_005030">"tf"</span> <span class="text" id="span_005031" smilref="Programming_Robots_with_ROS00016.smil#span_005031">type=</span><span class="text" id="span_005032" smilref="Programming_Robots_with_ROS00016.smil#span_005032">"static_transform_publisher"</span> <span class="text" id="span_005033" smilref="Programming_Robots_with_ROS00016.smil#span_005033">name=</span><span class="text" id="span_005034" smilref="Programming_Robots_with_ROS00016.smil#span_005034">"ar_9_up"</span>
        <span class="text" id="span_005035" smilref="Programming_Robots_with_ROS00016.smil#span_005035">args=</span><span class="text" id="span_005036" smilref="Programming_Robots_with_ROS00016.smil#span_005036">"$(arg tag_rot) ar_marker_9 ar_9_up 100"</span><span class="text" id="span_005037" smilref="Programming_Robots_with_ROS00016.smil#span_005037">/&gt;</span>
  <span class="text" id="span_005038" smilref="Programming_Robots_with_ROS00016.smil#span_005038">&lt;node</span> <span class="text" id="span_005039" smilref="Programming_Robots_with_ROS00016.smil#span_005039">pkg=</span><span class="text" id="span_005040" smilref="Programming_Robots_with_ROS00016.smil#span_005040">"tf"</span> <span class="text" id="span_005041" smilref="Programming_Robots_with_ROS00016.smil#span_005041">type=</span><span class="text" id="span_005042" smilref="Programming_Robots_with_ROS00016.smil#span_005042">"static_transform_publisher"</span> <span class="text" id="span_005043" smilref="Programming_Robots_with_ROS00016.smil#span_005043">name=</span><span class="text" id="span_005044" smilref="Programming_Robots_with_ROS00016.smil#span_005044">"ar_10_up"</span>
        <span class="text" id="span_005045" smilref="Programming_Robots_with_ROS00016.smil#span_005045">args=</span><span class="text" id="span_005046" smilref="Programming_Robots_with_ROS00016.smil#span_005046">"$(arg tag_rot) ar_marker_10 ar_10_up 100"</span><span class="text" id="span_005047" smilref="Programming_Robots_with_ROS00016.smil#span_005047">/&gt;</span>
  <span class="text" id="span_005048" smilref="Programming_Robots_with_ROS00016.smil#span_005048">&lt;node</span> <span class="text" id="span_005049" smilref="Programming_Robots_with_ROS00016.smil#span_005049">pkg=</span><span class="text" id="span_005050" smilref="Programming_Robots_with_ROS00016.smil#span_005050">"tf"</span> <span class="text" id="span_005051" smilref="Programming_Robots_with_ROS00016.smil#span_005051">type=</span><span class="text" id="span_005052" smilref="Programming_Robots_with_ROS00016.smil#span_005052">"static_transform_publisher"</span> <span class="text" id="span_005053" smilref="Programming_Robots_with_ROS00016.smil#span_005053">name=</span><span class="text" id="span_005054" smilref="Programming_Robots_with_ROS00016.smil#span_005054">"ar_11_up"</span>
        <span class="text" id="span_005055" smilref="Programming_Robots_with_ROS00016.smil#span_005055">args=</span><span class="text" id="span_005056" smilref="Programming_Robots_with_ROS00016.smil#span_005056">"$(arg tag_rot) ar_marker_11 ar_11_up 100"</span><span class="text" id="span_005057" smilref="Programming_Robots_with_ROS00016.smil#span_005057">/&gt;</span>

  <a class="co" id="ch14-aco_stockroom_bot_CO7-5" href="#ch14-acallout_stockroom_bot_CO7-5" external="false"><img src="images/5.jpg" alt="5" id="img_000200" /></a>
  <span class="text" id="span_005058" smilref="Programming_Robots_with_ROS00016.smil#span_005058">&lt;node</span> <span class="text" id="span_005059" smilref="Programming_Robots_with_ROS00016.smil#span_005059">pkg=</span><span class="text" id="span_005060" smilref="Programming_Robots_with_ROS00016.smil#span_005060">"tf"</span> <span class="text" id="span_005061" smilref="Programming_Robots_with_ROS00016.smil#span_005061">type=</span><span class="text" id="span_005062" smilref="Programming_Robots_with_ROS00016.smil#span_005062">"static_transform_publisher"</span> <span class="text" id="span_005063" smilref="Programming_Robots_with_ROS00016.smil#span_005063">name=</span><span class="text" id="span_005064" smilref="Programming_Robots_with_ROS00016.smil#span_005064">"item_0"</span>
        <span class="text" id="span_005065" smilref="Programming_Robots_with_ROS00016.smil#span_005065">args=</span><span class="text" id="span_005066" smilref="Programming_Robots_with_ROS00016.smil#span_005066">"$(arg tag_trans) ar_0_up item_0 100"</span><span class="text" id="span_005067" smilref="Programming_Robots_with_ROS00016.smil#span_005067">/&gt;</span>
  <span class="text" id="span_005068" smilref="Programming_Robots_with_ROS00016.smil#span_005068">&lt;node</span> <span class="text" id="span_005069" smilref="Programming_Robots_with_ROS00016.smil#span_005069">pkg=</span><span class="text" id="span_005070" smilref="Programming_Robots_with_ROS00016.smil#span_005070">"tf"</span> <span class="text" id="span_005071" smilref="Programming_Robots_with_ROS00016.smil#span_005071">type=</span><span class="text" id="span_005072" smilref="Programming_Robots_with_ROS00016.smil#span_005072">"static_transform_publisher"</span> <span class="text" id="span_005073" smilref="Programming_Robots_with_ROS00016.smil#span_005073">name=</span><span class="text" id="span_005074" smilref="Programming_Robots_with_ROS00016.smil#span_005074">"item_1"</span>
        <span class="text" id="span_005075" smilref="Programming_Robots_with_ROS00016.smil#span_005075">args=</span><span class="text" id="span_005076" smilref="Programming_Robots_with_ROS00016.smil#span_005076">"$(arg tag_trans) ar_1_up item_1 100"</span><span class="text" id="span_005077" smilref="Programming_Robots_with_ROS00016.smil#span_005077">/&gt;</span>
  <span class="text" id="span_005078" smilref="Programming_Robots_with_ROS00016.smil#span_005078">&lt;node</span> <span class="text" id="span_005079" smilref="Programming_Robots_with_ROS00016.smil#span_005079">pkg=</span><span class="text" id="span_005080" smilref="Programming_Robots_with_ROS00016.smil#span_005080">"tf"</span> <span class="text" id="span_005081" smilref="Programming_Robots_with_ROS00016.smil#span_005081">type=</span><span class="text" id="span_005082" smilref="Programming_Robots_with_ROS00016.smil#span_005082">"static_transform_publisher"</span> <span class="text" id="span_005083" smilref="Programming_Robots_with_ROS00016.smil#span_005083">name=</span><span class="text" id="span_005084" smilref="Programming_Robots_with_ROS00016.smil#span_005084">"item_2"</span>
        <span class="text" id="span_005085" smilref="Programming_Robots_with_ROS00016.smil#span_005085">args=</span><span class="text" id="span_005086" smilref="Programming_Robots_with_ROS00016.smil#span_005086">"$(arg tag_trans) ar_2_up item_2 100"</span><span class="text" id="span_005087" smilref="Programming_Robots_with_ROS00016.smil#span_005087">/&gt;</span>
  <span class="text" id="span_005088" smilref="Programming_Robots_with_ROS00016.smil#span_005088">&lt;node</span> <span class="text" id="span_005089" smilref="Programming_Robots_with_ROS00016.smil#span_005089">pkg=</span><span class="text" id="span_005090" smilref="Programming_Robots_with_ROS00016.smil#span_005090">"tf"</span> <span class="text" id="span_005091" smilref="Programming_Robots_with_ROS00016.smil#span_005091">type=</span><span class="text" id="span_005092" smilref="Programming_Robots_with_ROS00016.smil#span_005092">"static_transform_publisher"</span> <span class="text" id="span_005093" smilref="Programming_Robots_with_ROS00016.smil#span_005093">name=</span><span class="text" id="span_005094" smilref="Programming_Robots_with_ROS00016.smil#span_005094">"item_3"</span>
        <span class="text" id="span_005095" smilref="Programming_Robots_with_ROS00016.smil#span_005095">args=</span><span class="text" id="span_005096" smilref="Programming_Robots_with_ROS00016.smil#span_005096">"$(arg tag_trans) ar_3_up item_3 100"</span><span class="text" id="span_005097" smilref="Programming_Robots_with_ROS00016.smil#span_005097">/&gt;</span>
  <span class="text" id="span_005098" smilref="Programming_Robots_with_ROS00016.smil#span_005098">&lt;node</span> <span class="text" id="span_005099" smilref="Programming_Robots_with_ROS00016.smil#span_005099">pkg=</span><span class="text" id="span_005100" smilref="Programming_Robots_with_ROS00016.smil#span_005100">"tf"</span> <span class="text" id="span_005101" smilref="Programming_Robots_with_ROS00016.smil#span_005101">type=</span><span class="text" id="span_005102" smilref="Programming_Robots_with_ROS00016.smil#span_005102">"static_transform_publisher"</span> <span class="text" id="span_005103" smilref="Programming_Robots_with_ROS00016.smil#span_005103">name=</span><span class="text" id="span_005104" smilref="Programming_Robots_with_ROS00016.smil#span_005104">"item_4"</span>
        <span class="text" id="span_005105" smilref="Programming_Robots_with_ROS00016.smil#span_005105">args=</span><span class="text" id="span_005106" smilref="Programming_Robots_with_ROS00016.smil#span_005106">"$(arg tag_trans) ar_4_up item_4 100"</span><span class="text" id="span_005107" smilref="Programming_Robots_with_ROS00016.smil#span_005107">/&gt;</span>
  <span class="text" id="span_005108" smilref="Programming_Robots_with_ROS00016.smil#span_005108">&lt;node</span> <span class="text" id="span_005109" smilref="Programming_Robots_with_ROS00016.smil#span_005109">pkg=</span><span class="text" id="span_005110" smilref="Programming_Robots_with_ROS00016.smil#span_005110">"tf"</span> <span class="text" id="span_005111" smilref="Programming_Robots_with_ROS00016.smil#span_005111">type=</span><span class="text" id="span_005112" smilref="Programming_Robots_with_ROS00016.smil#span_005112">"static_transform_publisher"</span> <span class="text" id="span_005113" smilref="Programming_Robots_with_ROS00016.smil#span_005113">name=</span><span class="text" id="span_005114" smilref="Programming_Robots_with_ROS00016.smil#span_005114">"item_5"</span>
        <span class="text" id="span_005115" smilref="Programming_Robots_with_ROS00016.smil#span_005115">args=</span><span class="text" id="span_005116" smilref="Programming_Robots_with_ROS00016.smil#span_005116">"$(arg tag_trans) ar_5_up item_5 100"</span><span class="text" id="span_005117" smilref="Programming_Robots_with_ROS00016.smil#span_005117">/&gt;</span>
  <span class="text" id="span_005118" smilref="Programming_Robots_with_ROS00016.smil#span_005118">&lt;node</span> <span class="text" id="span_005119" smilref="Programming_Robots_with_ROS00016.smil#span_005119">pkg=</span><span class="text" id="span_005120" smilref="Programming_Robots_with_ROS00016.smil#span_005120">"tf"</span> <span class="text" id="span_005121" smilref="Programming_Robots_with_ROS00016.smil#span_005121">type=</span><span class="text" id="span_005122" smilref="Programming_Robots_with_ROS00016.smil#span_005122">"static_transform_publisher"</span> <span class="text" id="span_005123" smilref="Programming_Robots_with_ROS00016.smil#span_005123">name=</span><span class="text" id="span_005124" smilref="Programming_Robots_with_ROS00016.smil#span_005124">"item_6"</span>
        <span class="text" id="span_005125" smilref="Programming_Robots_with_ROS00016.smil#span_005125">args=</span><span class="text" id="span_005126" smilref="Programming_Robots_with_ROS00016.smil#span_005126">"$(arg tag_trans) ar_6_up item_6 100"</span><span class="text" id="span_005127" smilref="Programming_Robots_with_ROS00016.smil#span_005127">/&gt;</span>
  <span class="text" id="span_005128" smilref="Programming_Robots_with_ROS00016.smil#span_005128">&lt;node</span> <span class="text" id="span_005129" smilref="Programming_Robots_with_ROS00016.smil#span_005129">pkg=</span><span class="text" id="span_005130" smilref="Programming_Robots_with_ROS00016.smil#span_005130">"tf"</span> <span class="text" id="span_005131" smilref="Programming_Robots_with_ROS00016.smil#span_005131">type=</span><span class="text" id="span_005132" smilref="Programming_Robots_with_ROS00016.smil#span_005132">"static_transform_publisher"</span> <span class="text" id="span_005133" smilref="Programming_Robots_with_ROS00016.smil#span_005133">name=</span><span class="text" id="span_005134" smilref="Programming_Robots_with_ROS00016.smil#span_005134">"item_7"</span>
        <span class="text" id="span_005135" smilref="Programming_Robots_with_ROS00016.smil#span_005135">args=</span><span class="text" id="span_005136" smilref="Programming_Robots_with_ROS00016.smil#span_005136">"$(arg tag_trans) ar_7_up item_7 100"</span><span class="text" id="span_005137" smilref="Programming_Robots_with_ROS00016.smil#span_005137">/&gt;</span>
  <span class="text" id="span_005138" smilref="Programming_Robots_with_ROS00016.smil#span_005138">&lt;node</span> <span class="text" id="span_005139" smilref="Programming_Robots_with_ROS00016.smil#span_005139">pkg=</span><span class="text" id="span_005140" smilref="Programming_Robots_with_ROS00016.smil#span_005140">"tf"</span> <span class="text" id="span_005141" smilref="Programming_Robots_with_ROS00016.smil#span_005141">type=</span><span class="text" id="span_005142" smilref="Programming_Robots_with_ROS00016.smil#span_005142">"static_transform_publisher"</span> <span class="text" id="span_005143" smilref="Programming_Robots_with_ROS00017.smil#span_005143">name=</span><span class="text" id="span_005144" smilref="Programming_Robots_with_ROS00017.smil#span_005144">"item_8"</span>
        <span class="text" id="span_005145" smilref="Programming_Robots_with_ROS00017.smil#span_005145">args=</span><span class="text" id="span_005146" smilref="Programming_Robots_with_ROS00017.smil#span_005146">"$(arg tag_trans) ar_8_up item_8 100"</span><span class="text" id="span_005147" smilref="Programming_Robots_with_ROS00017.smil#span_005147">/&gt;</span>
  <span class="text" id="span_005148" smilref="Programming_Robots_with_ROS00017.smil#span_005148">&lt;node</span> <span class="text" id="span_005149" smilref="Programming_Robots_with_ROS00017.smil#span_005149">pkg=</span><span class="text" id="span_005150" smilref="Programming_Robots_with_ROS00017.smil#span_005150">"tf"</span> <span class="text" id="span_005151" smilref="Programming_Robots_with_ROS00017.smil#span_005151">type=</span><span class="text" id="span_005152" smilref="Programming_Robots_with_ROS00017.smil#span_005152">"static_transform_publisher"</span> <span class="text" id="span_005153" smilref="Programming_Robots_with_ROS00017.smil#span_005153">name=</span><span class="text" id="span_005154" smilref="Programming_Robots_with_ROS00017.smil#span_005154">"item_9"</span>
        <span class="text" id="span_005155" smilref="Programming_Robots_with_ROS00017.smil#span_005155">args=</span><span class="text" id="span_005156" smilref="Programming_Robots_with_ROS00017.smil#span_005156">"$(arg tag_trans) ar_9_up item_9 100"</span><span class="text" id="span_005157" smilref="Programming_Robots_with_ROS00017.smil#span_005157">/&gt;</span>
  <span class="text" id="span_005158" smilref="Programming_Robots_with_ROS00017.smil#span_005158">&lt;node</span> <span class="text" id="span_005159" smilref="Programming_Robots_with_ROS00017.smil#span_005159">pkg=</span><span class="text" id="span_005160" smilref="Programming_Robots_with_ROS00017.smil#span_005160">"tf"</span> <span class="text" id="span_005161" smilref="Programming_Robots_with_ROS00017.smil#span_005161">type=</span><span class="text" id="span_005162" smilref="Programming_Robots_with_ROS00017.smil#span_005162">"static_transform_publisher"</span> <span class="text" id="span_005163" smilref="Programming_Robots_with_ROS00017.smil#span_005163">name=</span><span class="text" id="span_005164" smilref="Programming_Robots_with_ROS00017.smil#span_005164">"item_10"</span>
        <span class="text" id="span_005165" smilref="Programming_Robots_with_ROS00017.smil#span_005165">args=</span><span class="text" id="span_005166" smilref="Programming_Robots_with_ROS00017.smil#span_005166">"$(arg tag_trans) ar_10_up item_10 100"</span><span class="text" id="span_005167" smilref="Programming_Robots_with_ROS00017.smil#span_005167">/&gt;</span>
  <span class="text" id="span_005168" smilref="Programming_Robots_with_ROS00017.smil#span_005168">&lt;node</span> <span class="text" id="span_005169" smilref="Programming_Robots_with_ROS00017.smil#span_005169">pkg=</span><span class="text" id="span_005170" smilref="Programming_Robots_with_ROS00017.smil#span_005170">"tf"</span> <span class="text" id="span_005171" smilref="Programming_Robots_with_ROS00017.smil#span_005171">type=</span><span class="text" id="span_005172" smilref="Programming_Robots_with_ROS00017.smil#span_005172">"static_transform_publisher"</span> <span class="text" id="span_005173" smilref="Programming_Robots_with_ROS00017.smil#span_005173">name=</span><span class="text" id="span_005174" smilref="Programming_Robots_with_ROS00017.smil#span_005174">"item_11"</span>
        <span class="text" id="span_005175" smilref="Programming_Robots_with_ROS00017.smil#span_005175">args=</span><span class="text" id="span_005176" smilref="Programming_Robots_with_ROS00017.smil#span_005176">"$(arg tag_trans) ar_11_up item_11 100"</span><span class="text" id="span_005177" smilref="Programming_Robots_with_ROS00017.smil#span_005177">/&gt;</span>
<span class="text" id="span_005178" smilref="Programming_Robots_with_ROS00017.smil#span_005178">&lt;/launch&gt;</span></code>
                  </p>
                  <dl class="calloutlist" id="dl_000016">
                    <dt id="dt_000072">
                      <a class="co" id="ch14-acallout_stockroom_bot_CO7-1" href="#ch14-aco_stockroom_bot_CO7-1" external="false">
                        <img src="images/1.jpg" alt="1" id="img_000201" />
                      </a>
                    </dt>
                    <dd id="dd_000072">
                      <p id="p_000969">
                        <span class="text" id="span_005179" smilref="Programming_Robots_with_ROS00017.smil#span_005179">The</span>
                        <code xml:space="preserve" id="code_001383" smilref="Programming_Robots_with_ROS00017.smil#code_001383">&lt;arg&gt;</code>
                        <span class="text" id="span_005180" smilref="Programming_Robots_with_ROS00017.smil#span_005180">tags define configurable parameters for this launch file that will be passed to</span>
                        <code xml:space="preserve" id="code_001384" smilref="Programming_Robots_with_ROS00017.smil#code_001384">ar_track_alvar</code>
                        <span class="text" id="span_005181" smilref="Programming_Robots_with_ROS00017.smil#span_005181">. Spelling out the parameters as top-level</span>
                        <code xml:space="preserve" id="code_001385" smilref="Programming_Robots_with_ROS00017.smil#code_001385">&lt;arg&gt;</code>
                        <span class="text" id="span_005182" smilref="Programming_Robots_with_ROS00017.smil#span_005182">tags allows them to be overridden if other</span>
                        <code xml:space="preserve" id="code_001386" smilref="Programming_Robots_with_ROS00017.smil#code_001386">roslaunch</code>
                        <span class="text" id="span_005183" smilref="Programming_Robots_with_ROS00017.smil#span_005183">files include this file, as well as making the file a bit easier to read.</span>
                      </p>
                    </dd>
                    <dt id="dt_000073">
                      <a class="co" id="ch14-acallout_stockroom_bot_CO7-2" href="#ch14-aco_stockroom_bot_CO7-2" external="false">
                        <img src="images/2.jpg" alt="2" id="img_000202" />
                      </a>
                    </dt>
                    <dd id="dd_000073">
                      <p class="keep-together" id="p_000970">
                        <span class="text" id="span_005184" smilref="Programming_Robots_with_ROS00017.smil#span_005184">The</span>
                        <code xml:space="preserve" id="code_001387" smilref="Programming_Robots_with_ROS00017.smil#code_001387">&lt;node&gt;</code>
                        <span class="text" id="span_005185" smilref="Programming_Robots_with_ROS00017.smil#span_005185">tag will actually spawn</span>
                        <code xml:space="preserve" id="code_001388" smilref="Programming_Robots_with_ROS00017.smil#code_001388">ar_track_alvar</code>
                        <span class="text" id="span_005186" smilref="Programming_Robots_with_ROS00017.smil#span_005186">with the forwarded parameters.</span>
                      </p>
                    </dd>
                    <dt id="dt_000074">
                      <a class="co" id="ch14-acallout_stockroom_bot_CO7-3" href="#ch14-aco_stockroom_bot_CO7-3" external="false">
                        <img src="images/3.jpg" alt="3" id="img_000203" />
                      </a>
                    </dt>
                    <dd id="dd_000074">
                      <p id="p_000971">
                        <span class="text" id="span_005187" smilref="Programming_Robots_with_ROS00017.smil#span_005187">The</span>
                        <code xml:space="preserve" id="code_001389" smilref="Programming_Robots_with_ROS00017.smil#code_001389">tag_rot</code>
                        <span class="text" id="span_005188" smilref="Programming_Robots_with_ROS00017.smil#span_005188">and</span>
                        <code xml:space="preserve" id="code_001390" smilref="Programming_Robots_with_ROS00017.smil#code_001390">tag_trans</code>
                        <span class="text" id="span_005189" smilref="Programming_Robots_with_ROS00017.smil#span_005189">strings will be passed to the</span>
                        <code xml:space="preserve" id="code_001391" smilref="Programming_Robots_with_ROS00017.smil#code_001391">static_transform_ pub lisher</code>
                        <span class="text" id="span_005190" smilref="Programming_Robots_with_ROS00017.smil#span_005190">nodes; they are consolidated here to eliminate redundant typing and simplify tweaking the values as needed.</span>
                      </p>
                    </dd>
                    <dt id="dt_000075">
                      <a class="co" id="ch14-acallout_stockroom_bot_CO7-4" href="#ch14-aco_stockroom_bot_CO7-4" external="false">
                        <img src="images/4.jpg" alt="4" id="img_000204" />
                      </a>
                    </dt>
                    <dd id="dd_000075">
                      <p id="p_000972">
                        <span class="text" id="span_005191" smilref="Programming_Robots_with_ROS00017.smil#span_005191">The following sequence of 12</span>
                        <code xml:space="preserve" id="code_001392" smilref="Programming_Robots_with_ROS00017.smil#code_001392">static_transform_publisher</code>
                        <span class="text" id="span_005192" smilref="Programming_Robots_with_ROS00017.smil#span_005192">nodes creates relative rotation poses for the detected ALVAR tag pose(s).</span>
                      </p>
                    </dd>
                    <dt id="dt_000076">
                      <a class="co" id="ch14-acallout_stockroom_bot_CO7-5" href="#ch14-aco_stockroom_bot_CO7-5" external="false">
                        <img src="images/5.jpg" alt="5" id="img_000205" />
                      </a>
                    </dt>
                    <dd id="dd_000076">
                      <p id="p_000973">
                        <span class="text" id="span_005193" smilref="Programming_Robots_with_ROS00017.smil#span_005193">Similarly, the following sequence of</span>
                        <code xml:space="preserve" id="code_001393" smilref="Programming_Robots_with_ROS00017.smil#code_001393">static_transform_publisher</code>
                        <span class="text" id="span_005194" smilref="Programming_Robots_with_ROS00017.smil#span_005194">nodes creates relative translation poses for the rotated ALVAR tag pose(s).</span>
                      </p>
                    </dd>
                  </dl>
                </div>
                <p id="p_000974" smilref="Programming_Robots_with_ROS00017.smil#p_000974">The ROS transform system is quite helpful in cases like this: we can express our manipulation goal as a static transformation from the frame of the detected ALVAR marker. The transformation chain is actually quite complex in this case: working backward, we know we want the robot to grasp (for example) 28 cm directly in front and 10 cm below the ALVAR marker of the bin we are interested in. Since we have seen the ALVAR marker in the camera frame, we can estimate the distance and orientation of the ALVAR marker relative to the camera. From there, we can use the joint encoders of the head and torso joints of the Fetch robot to derive the transformation between the camera and the base of the robot, which we can then feed as a goal state to the arm's motion planner.</p>
                <p id="ch14-idp36332976" data-type="indexterm" data-startref="ix_14-stockroom_bot-asciidoc15">
                  <span class="text" id="span_005195" smilref="Programming_Robots_with_ROS00017.smil#span_005195">When debugging these complex transformation chains, it is often helpful to see the transformation dependency chain in graphical form. Fortunately, the</span>
                  <code xml:space="preserve" id="code_001394" smilref="Programming_Robots_with_ROS00017.smil#code_001394">tf</code>
                  <span class="text" id="span_005196" smilref="Programming_Robots_with_ROS00017.smil#span_005196">package provides a utility for this, called</span>
                  <code xml:space="preserve" id="code_001395" smilref="Programming_Robots_with_ROS00017.smil#code_001395">view_frames</code>
                  <span class="text" id="span_005197" smilref="Programming_Robots_with_ROS00017.smil#span_005197">. At any time when a ROS system is running, the following command will produce a PDF rendering of the transformation tree:</span>
                </p>
                <p id="p_000975">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001396"><span class="text" id="span_005198" smilref="Programming_Robots_with_ROS00017.smil#span_005198">
user@hostname$ </span><strong id="strong_000165" smilref="Programming_Robots_with_ROS00017.smil#strong_000165">rosrun tf view_frames.py</strong>
</code>
                </p>
                <p id="p_000976">
                  <a data-type="xref" href="#ch14-alvar_frames" external="false" id="a_000230" smilref="Programming_Robots_with_ROS00017.smil#a_000230">Figure 14-9</a>
                  <span class="text" id="span_005199" smilref="Programming_Robots_with_ROS00017.smil#span_005199">shows the result of running this program when ALVAR markers were being detected by the Fetch robot. It is far too complex to read without being able to zoom in and out, but suffice it to say that the fixed (map) frame is at the top of the tree, and the ALVAR marker frames are at the lower-left of the tree!</span>
                </p>
                <h1 id="h1_000305" smilref="Programming_Robots_with_ROS00017.smil#h1_000305">Tip</h1>
                <div data-type="tip" id="div_000031">
                  <p data-type="indexterm" data-primary="rviz (ROS visualization)" data-secondary="and transform tree" id="ch14-idp37040192">
                    <span class="text" id="span_005200" smilref="Programming_Robots_with_ROS00017.smil#span_005200">The</span>
                    <em id="em_000371" smilref="Programming_Robots_with_ROS00017.smil#em_000371">view_frames.py</em>
                    <span class="text" id="span_005201" smilref="Programming_Robots_with_ROS00017.smil#span_005201">program provided by</span>
                    <code id="ch14-idp37041072" xml:space="preserve" smilref="Programming_Robots_with_ROS00017.smil#ch14-idp37041072">tf</code>
                    <span class="text" id="span_005202" smilref="Programming_Robots_with_ROS00017.smil#span_005202">is a way to get a schematic view of the transform tree of a ROS system. Zooming and rotating the transform tree in</span>
                    <code id="ch14-idp36104784" xml:space="preserve" smilref="Programming_Robots_with_ROS00017.smil#ch14-idp36104784">rviz</code>
                    <span class="text" id="span_005203" smilref="Programming_Robots_with_ROS00017.smil#span_005203">can also be illuminating and helpful for rendering transforms coherently with spatial sensor data and other intermediate data sets. However, for just making sure that the various branches of the transform tree are properly connected to each other, it's hard to beat the topological view of</span>
                    <em id="ch14-idp36105456" smilref="Programming_Robots_with_ROS00017.smil#ch14-idp36105456">view_frames.py</em>
                    <span class="text" id="span_005204" smilref="Programming_Robots_with_ROS00017.smil#span_005204">.</span>
                  </p>
                </div>
                <figure id="figure_000072">
                  <h1 id="h1_000306" smilref="Programming_Robots_with_ROS00017.smil#h1_000306">Figure 14-9. The transformation graph of the scene shown in Figure 14-10</h1>
                  <div id="ch14-alvar_frames" class="figure">
                    <img src="images/prwr_1409.jpg" alt="ALVAR marker tag transformation graph" id="img_000206" />
                  </div>
                </figure>
                <p id="p_000977">
                  <span class="text" id="span_005205" smilref="Programming_Robots_with_ROS00017.smil#span_005205">In many situations, however, a live, interactive, spatially accurate 3D view of the transformation graph can be extremely helpful during software development and debugging. As we have shown in prior chapters,</span>
                  <code xml:space="preserve" id="code_001397" smilref="Programming_Robots_with_ROS00017.smil#code_001397">rviz</code>
                  <span class="text" id="span_005206" smilref="Programming_Robots_with_ROS00017.smil#span_005206">is a highly configurable visualization system for ROS. Among the many other data types that it can handle,</span>
                  <code xml:space="preserve" id="code_001398" smilref="Programming_Robots_with_ROS00017.smil#code_001398">rviz</code>
                  <span class="text" id="span_005207" smilref="Programming_Robots_with_ROS00017.smil#span_005207">can be configured to render the ROS transformation graph in real time.</span>
                  <a data-type="xref" href="#ch14-ar_transformspng" external="false" id="a_000231" smilref="Programming_Robots_with_ROS00017.smil#a_000231">Figure 14-10</a>
                  <span class="text" id="span_005208" smilref="Programming_Robots_with_ROS00017.smil#span_005208">shows a screenshot in which both Gazebo and</span>
                  <code xml:space="preserve" id="code_001399" smilref="Programming_Robots_with_ROS00017.smil#code_001399">rviz</code>
                  <span class="text" id="span_005209" smilref="Programming_Robots_with_ROS00017.smil#span_005209">windows are visible, showing both the state of the simulation and the generated camera images, the laser localization cloud, and the transformation graph showing some ALVAR marker detections.</span>
                </p>
                <figure id="figure_000073">
                  <h1 id="h1_000307" smilref="Programming_Robots_with_ROS00017.smil#h1_000307">Figure 14-10. Viewing the Gazebo (left) and rviz (right) windows simultaneously--the rendering perspectives are approximately equal</h1>
                  <div id="ch14-ar_transformspng" class="figure">
                    <img src="images/prwr_1410.jpg" alt="gazebo and rviz showing ALVAR detections" id="img_000207" />
                  </div>
                </figure>
                <p id="p_000978">
                  <span class="text" id="span_005210" smilref="Programming_Robots_with_ROS00017.smil#span_005210">Using the transforms generated by the ALVAR marker detection system, we can command the robot to reach out and grasp an item that is in a known position relative to the ALVAR marker at the back of the bin.</span>
                  <a data-type="xref" href="#ch14-pick_up_itempy" external="false" id="a_000232" smilref="Programming_Robots_with_ROS00017.smil#a_000232">Example 14-15</a>
                  <span class="text" id="span_005211" smilref="Programming_Robots_with_ROS00017.smil#span_005211">is intended to run once the robot is close enough to a bin to detect its ALVAR marker, after which it will generate an arm motion planner goal that is relative to the bin, not the robot. Of course, actually achieving that goal is up to the navigation system, but at least one source of error (localization noise) has been greatly reduced.</span>
                </p>
                <p id="ch14-idp37129312" data-type="indexterm" data-primary="MoveIt" data-secondary="and stockroom-bot">
                  <span class="text" id="span_005212" smilref="Programming_Robots_with_ROS00017.smil#span_005212">In</span>
                  <a data-type="xref" href="#ch11-chess_bot" external="false" id="a_000233" smilref="Programming_Robots_with_ROS00017.smil#a_000233">Chapter 11</a>
                  <span class="text" id="span_005213" smilref="Programming_Robots_with_ROS00017.smil#span_005213">, we introduced MoveIt, a popular motion planning framework for ROS-based robots. Fortunately, the Fetch robot also has a MoveIt configuration available, and we can call it in exactly the same way as we did with the Robonaut 2 in</span>
                  <a data-type="xref" href="#ch11-chess_bot" external="false" id="a_000234" smilref="Programming_Robots_with_ROS00017.smil#a_000234">Chapter 11</a>
                  <span class="text" id="span_005214" smilref="Programming_Robots_with_ROS00017.smil#span_005214">.</span>
                  <a data-type="xref" href="#ch14-pick_up_itempy" external="false" id="a_000235" smilref="Programming_Robots_with_ROS00017.smil#a_000235">Example 14-15</a>
                  <span class="text" id="span_005215" smilref="Programming_Robots_with_ROS00017.smil#span_005215">will command the arm to grasp the item in front of the robot and lift it up. The script uses ALVAR marker detections to generate precise motion planner targets for MoveIt.</span>
                </p>
                <h1 id="h1_000308" smilref="Programming_Robots_with_ROS00017.smil#h1_000308">Example 14-15. pick_up_item.py</h1>
                <div id="ch14-pick_up_itempy" data-type="example">
                  <p id="p_000979">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001400"><span class="text" id="span_005216" smilref="Programming_Robots_with_ROS00017.smil#span_005216">#!/usr/bin/env python</span>
<span class="text" id="span_005217" smilref="Programming_Robots_with_ROS00017.smil#span_005217">import</span> <span class="text" id="span_005218" smilref="Programming_Robots_with_ROS00017.smil#span_005218">sys</span><span class="text" id="span_005219" smilref="Programming_Robots_with_ROS00017.smil#span_005219">,</span> <span class="text" id="span_005220" smilref="Programming_Robots_with_ROS00017.smil#span_005220">rospy</span><span class="text" id="span_005221" smilref="Programming_Robots_with_ROS00017.smil#span_005221">,</span> <span class="text" id="span_005222" smilref="Programming_Robots_with_ROS00017.smil#span_005222">tf</span><span class="text" id="span_005223" smilref="Programming_Robots_with_ROS00017.smil#span_005223">,</span> <span class="text" id="span_005224" smilref="Programming_Robots_with_ROS00017.smil#span_005224">actionlib</span><span class="text" id="span_005225" smilref="Programming_Robots_with_ROS00017.smil#span_005225">,</span> <span class="text" id="span_005226" smilref="Programming_Robots_with_ROS00017.smil#span_005226">moveit_commander</span>
<span class="text" id="span_005227" smilref="Programming_Robots_with_ROS00017.smil#span_005227">from</span> <span class="text" id="span_005228" smilref="Programming_Robots_with_ROS00017.smil#span_005228">control_msgs.msg</span> <span class="text" id="span_005229" smilref="Programming_Robots_with_ROS00017.smil#span_005229">import</span> <span class="text" id="span_005230" smilref="Programming_Robots_with_ROS00017.smil#span_005230">(</span><span class="text" id="span_005231" smilref="Programming_Robots_with_ROS00017.smil#span_005231">GripperCommandAction</span><span class="text" id="span_005232" smilref="Programming_Robots_with_ROS00017.smil#span_005232">,</span> <span class="text" id="span_005233" smilref="Programming_Robots_with_ROS00017.smil#span_005233">GripperCommandGoal</span><span class="text" id="span_005234" smilref="Programming_Robots_with_ROS00017.smil#span_005234">)</span>
<span class="text" id="span_005235" smilref="Programming_Robots_with_ROS00017.smil#span_005235">from</span> <span class="text" id="span_005236" smilref="Programming_Robots_with_ROS00017.smil#span_005236">geometry_msgs.msg</span> <span class="text" id="span_005237" smilref="Programming_Robots_with_ROS00017.smil#span_005237">import</span> <span class="text" id="span_005238" smilref="Programming_Robots_with_ROS00017.smil#span_005238">*</span>
<span class="text" id="span_005239" smilref="Programming_Robots_with_ROS00017.smil#span_005239">from</span> <span class="text" id="span_005240" smilref="Programming_Robots_with_ROS00017.smil#span_005240">tf.transformations</span> <span class="text" id="span_005241" smilref="Programming_Robots_with_ROS00017.smil#span_005241">import</span> <span class="text" id="span_005242" smilref="Programming_Robots_with_ROS00017.smil#span_005242">quaternion_from_euler</span>
<span class="text" id="span_005243" smilref="Programming_Robots_with_ROS00017.smil#span_005243">from</span> <span class="text" id="span_005244" smilref="Programming_Robots_with_ROS00017.smil#span_005244">look_at_bin</span> <span class="text" id="span_005245" smilref="Programming_Robots_with_ROS00017.smil#span_005245">import</span> <span class="text" id="span_005246" smilref="Programming_Robots_with_ROS00017.smil#span_005246">look_at_bin</span>
<span class="text" id="span_005247" smilref="Programming_Robots_with_ROS00017.smil#span_005247">from</span> <span class="text" id="span_005248" smilref="Programming_Robots_with_ROS00017.smil#span_005248">std_srvs.srv</span> <span class="text" id="span_005249" smilref="Programming_Robots_with_ROS00017.smil#span_005249">import</span> <span class="text" id="span_005250" smilref="Programming_Robots_with_ROS00017.smil#span_005250">Empty</span>
<span class="text" id="span_005251" smilref="Programming_Robots_with_ROS00017.smil#span_005251">from</span> <span class="text" id="span_005252" smilref="Programming_Robots_with_ROS00017.smil#span_005252">moveit_msgs.msg</span> <span class="text" id="span_005253" smilref="Programming_Robots_with_ROS00017.smil#span_005253">import</span> <span class="text" id="span_005254" smilref="Programming_Robots_with_ROS00017.smil#span_005254">CollisionObject</span>
<span class="text" id="span_005255" smilref="Programming_Robots_with_ROS00017.smil#span_005255">from</span> <span class="text" id="span_005256" smilref="Programming_Robots_with_ROS00017.smil#span_005256">moveit_python</span> <span class="text" id="span_005257" smilref="Programming_Robots_with_ROS00017.smil#span_005257">import</span> <span class="text" id="span_005258" smilref="Programming_Robots_with_ROS00017.smil#span_005258">PlanningSceneInterface</span>

<span class="text" id="span_005259" smilref="Programming_Robots_with_ROS00017.smil#span_005259">if</span> <span class="text" id="span_005260" smilref="Programming_Robots_with_ROS00017.smil#span_005260">__name__</span> <span class="text" id="span_005261" smilref="Programming_Robots_with_ROS00017.smil#span_005261">==</span> <span class="text" id="span_005262" smilref="Programming_Robots_with_ROS00017.smil#span_005262">'</span><span class="text" id="span_005263" smilref="Programming_Robots_with_ROS00017.smil#span_005263">__main__</span><span class="text" id="span_005264" smilref="Programming_Robots_with_ROS00017.smil#span_005264">'</span><span class="text" id="span_005265" smilref="Programming_Robots_with_ROS00017.smil#span_005265">:</span>
  <span class="text" id="span_005266" smilref="Programming_Robots_with_ROS00017.smil#span_005266">moveit_commander</span><span class="text" id="span_005267" smilref="Programming_Robots_with_ROS00017.smil#span_005267">.</span><span class="text" id="span_005268" smilref="Programming_Robots_with_ROS00017.smil#span_005268">roscpp_initialize</span><span class="text" id="span_005269" smilref="Programming_Robots_with_ROS00017.smil#span_005269">(</span><span class="text" id="span_005270" smilref="Programming_Robots_with_ROS00017.smil#span_005270">sys</span><span class="text" id="span_005271" smilref="Programming_Robots_with_ROS00017.smil#span_005271">.</span><span class="text" id="span_005272" smilref="Programming_Robots_with_ROS00017.smil#span_005272">argv</span><span class="text" id="span_005273" smilref="Programming_Robots_with_ROS00017.smil#span_005273">)</span>
  <span class="text" id="span_005274" smilref="Programming_Robots_with_ROS00017.smil#span_005274">rospy</span><span class="text" id="span_005275" smilref="Programming_Robots_with_ROS00017.smil#span_005275">.</span><span class="text" id="span_005276" smilref="Programming_Robots_with_ROS00017.smil#span_005276">init_node</span><span class="text" id="span_005277" smilref="Programming_Robots_with_ROS00017.smil#span_005277">(</span><span class="text" id="span_005278" smilref="Programming_Robots_with_ROS00017.smil#span_005278">'</span><span class="text" id="span_005279" smilref="Programming_Robots_with_ROS00017.smil#span_005279">pick_up_item</span><span class="text" id="span_005280" smilref="Programming_Robots_with_ROS00017.smil#span_005280">'</span><span class="text" id="span_005281" smilref="Programming_Robots_with_ROS00017.smil#span_005281">)</span>
  <span class="text" id="span_005282" smilref="Programming_Robots_with_ROS00017.smil#span_005282">args</span> <span class="text" id="span_005283" smilref="Programming_Robots_with_ROS00017.smil#span_005283">=</span> <span class="text" id="span_005284" smilref="Programming_Robots_with_ROS00017.smil#span_005284">rospy</span><span class="text" id="span_005285" smilref="Programming_Robots_with_ROS00017.smil#span_005285">.</span><span class="text" id="span_005286" smilref="Programming_Robots_with_ROS00017.smil#span_005286">myargv</span><span class="text" id="span_005287" smilref="Programming_Robots_with_ROS00017.smil#span_005287">(</span><span class="text" id="span_005288" smilref="Programming_Robots_with_ROS00017.smil#span_005288">argv</span> <span class="text" id="span_005289" smilref="Programming_Robots_with_ROS00017.smil#span_005289">=</span> <span class="text" id="span_005290" smilref="Programming_Robots_with_ROS00017.smil#span_005290">sys</span><span class="text" id="span_005291" smilref="Programming_Robots_with_ROS00017.smil#span_005291">.</span><span class="text" id="span_005292" smilref="Programming_Robots_with_ROS00017.smil#span_005292">argv</span><span class="text" id="span_005293" smilref="Programming_Robots_with_ROS00017.smil#span_005293">)</span>
  <span class="text" id="span_005294" smilref="Programming_Robots_with_ROS00017.smil#span_005294">if</span> <span class="text" id="span_005295" smilref="Programming_Robots_with_ROS00017.smil#span_005295">len</span><span class="text" id="span_005296" smilref="Programming_Robots_with_ROS00017.smil#span_005296">(</span><span class="text" id="span_005297" smilref="Programming_Robots_with_ROS00017.smil#span_005297">args</span><span class="text" id="span_005298" smilref="Programming_Robots_with_ROS00017.smil#span_005298">)</span> <span class="text" id="span_005299" smilref="Programming_Robots_with_ROS00017.smil#span_005299">!=</span> <span class="text" id="span_005300" smilref="Programming_Robots_with_ROS00017.smil#span_005300">2</span><span class="text" id="span_005301" smilref="Programming_Robots_with_ROS00017.smil#span_005301">:</span>
    <span class="text" id="span_005302" smilref="Programming_Robots_with_ROS00017.smil#span_005302">print</span><span class="text" id="span_005303" smilref="Programming_Robots_with_ROS00017.smil#span_005303">(</span><span class="text" id="span_005304" smilref="Programming_Robots_with_ROS00017.smil#span_005304">"</span><span class="text" id="span_005305" smilref="Programming_Robots_with_ROS00017.smil#span_005305">usage: pick_up_item.py BIN_NUMBER</span><span class="text" id="span_005306" smilref="Programming_Robots_with_ROS00017.smil#span_005306">"</span><span class="text" id="span_005307" smilref="Programming_Robots_with_ROS00017.smil#span_005307">)</span>
    <span class="text" id="span_005308" smilref="Programming_Robots_with_ROS00017.smil#span_005308">sys</span><span class="text" id="span_005309" smilref="Programming_Robots_with_ROS00017.smil#span_005309">.</span><span class="text" id="span_005310" smilref="Programming_Robots_with_ROS00017.smil#span_005310">exit</span><span class="text" id="span_005311" smilref="Programming_Robots_with_ROS00017.smil#span_005311">(</span><span class="text" id="span_005312" smilref="Programming_Robots_with_ROS00017.smil#span_005312">1</span><span class="text" id="span_005313" smilref="Programming_Robots_with_ROS00017.smil#span_005313">)</span>
  <span class="text" id="span_005314" smilref="Programming_Robots_with_ROS00017.smil#span_005314">item_frame</span> <span class="text" id="span_005315" smilref="Programming_Robots_with_ROS00017.smil#span_005315">=</span> <span class="text" id="span_005316" smilref="Programming_Robots_with_ROS00017.smil#span_005316">"</span><span class="text" id="span_005317" smilref="Programming_Robots_with_ROS00017.smil#span_005317">item_</span><span class="text" id="span_005318" smilref="Programming_Robots_with_ROS00017.smil#span_005318">%d</span><span class="text" id="span_005319" smilref="Programming_Robots_with_ROS00017.smil#span_005319">"</span> <span class="text" id="span_005320" smilref="Programming_Robots_with_ROS00017.smil#span_005320">%</span> <span class="text" id="span_005321" smilref="Programming_Robots_with_ROS00017.smil#span_005321">int</span><span class="text" id="span_005322" smilref="Programming_Robots_with_ROS00017.smil#span_005322">(</span><span class="text" id="span_005323" smilref="Programming_Robots_with_ROS00017.smil#span_005323">args</span><span class="text" id="span_005324" smilref="Programming_Robots_with_ROS00017.smil#span_005324">[</span><span class="text" id="span_005325" smilref="Programming_Robots_with_ROS00017.smil#span_005325">1</span><span class="text" id="span_005326" smilref="Programming_Robots_with_ROS00017.smil#span_005326">]</span><span class="text" id="span_005327" smilref="Programming_Robots_with_ROS00017.smil#span_005327">)</span>

  <span class="text" id="span_005328" smilref="Programming_Robots_with_ROS00017.smil#span_005328">rospy</span><span class="text" id="span_005329" smilref="Programming_Robots_with_ROS00017.smil#span_005329">.</span><span class="text" id="span_005330" smilref="Programming_Robots_with_ROS00017.smil#span_005330">wait_for_service</span><span class="text" id="span_005331" smilref="Programming_Robots_with_ROS00017.smil#span_005331">(</span><span class="text" id="span_005332" smilref="Programming_Robots_with_ROS00017.smil#span_005332">"</span><span class="text" id="span_005333" smilref="Programming_Robots_with_ROS00017.smil#span_005333">/clear_octomap</span><span class="text" id="span_005334" smilref="Programming_Robots_with_ROS00017.smil#span_005334">"</span><span class="text" id="span_005335" smilref="Programming_Robots_with_ROS00017.smil#span_005335">)</span>
  <span class="text" id="span_005336" smilref="Programming_Robots_with_ROS00017.smil#span_005336">clear_octomap</span> <span class="text" id="span_005337" smilref="Programming_Robots_with_ROS00017.smil#span_005337">=</span> <span class="text" id="span_005338" smilref="Programming_Robots_with_ROS00017.smil#span_005338">rospy</span><span class="text" id="span_005339" smilref="Programming_Robots_with_ROS00017.smil#span_005339">.</span><span class="text" id="span_005340" smilref="Programming_Robots_with_ROS00017.smil#span_005340">ServiceProxy</span><span class="text" id="span_005341" smilref="Programming_Robots_with_ROS00017.smil#span_005341">(</span><span class="text" id="span_005342" smilref="Programming_Robots_with_ROS00017.smil#span_005342">"</span><span class="text" id="span_005343" smilref="Programming_Robots_with_ROS00017.smil#span_005343">/clear_octomap</span><span class="text" id="span_005344" smilref="Programming_Robots_with_ROS00017.smil#span_005344">"</span><span class="text" id="span_005345" smilref="Programming_Robots_with_ROS00017.smil#span_005345">,</span> <span class="text" id="span_005346" smilref="Programming_Robots_with_ROS00017.smil#span_005346">Empty</span><span class="text" id="span_005347" smilref="Programming_Robots_with_ROS00017.smil#span_005347">)</span>

  <span class="text" id="span_005348" smilref="Programming_Robots_with_ROS00017.smil#span_005348">gripper</span> <span class="text" id="span_005349" smilref="Programming_Robots_with_ROS00017.smil#span_005349">=</span> <span class="text" id="span_005350" smilref="Programming_Robots_with_ROS00017.smil#span_005350">actionlib</span><span class="text" id="span_005351" smilref="Programming_Robots_with_ROS00017.smil#span_005351">.</span><span class="text" id="span_005352" smilref="Programming_Robots_with_ROS00017.smil#span_005352">SimpleActionClient</span><span class="text" id="span_005353" smilref="Programming_Robots_with_ROS00017.smil#span_005353">(</span><span class="text" id="span_005354" smilref="Programming_Robots_with_ROS00017.smil#span_005354">"</span><span class="text" id="span_005355" smilref="Programming_Robots_with_ROS00017.smil#span_005355">gripper_controller/gripper_action</span><span class="text" id="span_005356" smilref="Programming_Robots_with_ROS00017.smil#span_005356">"</span><span class="text" id="span_005357" smilref="Programming_Robots_with_ROS00017.smil#span_005357">,</span>
    <span class="text" id="span_005358" smilref="Programming_Robots_with_ROS00017.smil#span_005358">GripperCommandAction</span><span class="text" id="span_005359" smilref="Programming_Robots_with_ROS00017.smil#span_005359">)</span>
  <span class="text" id="span_005360" smilref="Programming_Robots_with_ROS00017.smil#span_005360">gripper</span><span class="text" id="span_005361" smilref="Programming_Robots_with_ROS00017.smil#span_005361">.</span><span class="text" id="span_005362" smilref="Programming_Robots_with_ROS00017.smil#span_005362">wait_for_server</span><span class="text" id="span_005363" smilref="Programming_Robots_with_ROS00017.smil#span_005363">(</span><span class="text" id="span_005364" smilref="Programming_Robots_with_ROS00017.smil#span_005364">)</span> <a class="co" id="ch14-co_stockroom_bot_CO7-1" href="#ch14-callout_stockroom_bot_CO7-1" external="false"><img src="images/1.jpg" alt="1" id="img_000208" /></a>

  <span class="text" id="span_005365" smilref="Programming_Robots_with_ROS00017.smil#span_005365">arm</span> <span class="text" id="span_005366" smilref="Programming_Robots_with_ROS00017.smil#span_005366">=</span> <span class="text" id="span_005367" smilref="Programming_Robots_with_ROS00017.smil#span_005367">moveit_commander</span><span class="text" id="span_005368" smilref="Programming_Robots_with_ROS00017.smil#span_005368">.</span><span class="text" id="span_005369" smilref="Programming_Robots_with_ROS00017.smil#span_005369">MoveGroupCommander</span><span class="text" id="span_005370" smilref="Programming_Robots_with_ROS00017.smil#span_005370">(</span><span class="text" id="span_005371" smilref="Programming_Robots_with_ROS00017.smil#span_005371">"</span><span class="text" id="span_005372" smilref="Programming_Robots_with_ROS00017.smil#span_005372">arm</span><span class="text" id="span_005373" smilref="Programming_Robots_with_ROS00017.smil#span_005373">"</span><span class="text" id="span_005374" smilref="Programming_Robots_with_ROS00017.smil#span_005374">)</span> <a class="co" id="ch14-co_stockroom_bot_CO7-2" href="#ch14-callout_stockroom_bot_CO7-2" external="false"><img src="images/2.jpg" alt="2" id="img_000209" /></a>
  <span class="text" id="span_005375" smilref="Programming_Robots_with_ROS00017.smil#span_005375">arm</span><span class="text" id="span_005376" smilref="Programming_Robots_with_ROS00017.smil#span_005376">.</span><span class="text" id="span_005377" smilref="Programming_Robots_with_ROS00017.smil#span_005377">allow_replanning</span><span class="text" id="span_005378" smilref="Programming_Robots_with_ROS00017.smil#span_005378">(</span><span class="text" id="span_005379" smilref="Programming_Robots_with_ROS00017.smil#span_005379">True</span><span class="text" id="span_005380" smilref="Programming_Robots_with_ROS00017.smil#span_005380">)</span>
  <span class="text" id="span_005381" smilref="Programming_Robots_with_ROS00017.smil#span_005381">tf_listener</span> <span class="text" id="span_005382" smilref="Programming_Robots_with_ROS00017.smil#span_005382">=</span> <span class="text" id="span_005383" smilref="Programming_Robots_with_ROS00017.smil#span_005383">tf</span><span class="text" id="span_005384" smilref="Programming_Robots_with_ROS00017.smil#span_005384">.</span><span class="text" id="span_005385" smilref="Programming_Robots_with_ROS00017.smil#span_005385">TransformListener</span><span class="text" id="span_005386" smilref="Programming_Robots_with_ROS00017.smil#span_005386">(</span><span class="text" id="span_005387" smilref="Programming_Robots_with_ROS00017.smil#span_005387">)</span> <a class="co" id="ch14-co_stockroom_bot_CO7-3" href="#ch14-callout_stockroom_bot_CO7-3" external="false"><img src="images/3.jpg" alt="3" id="img_000210" /></a>
  <span class="text" id="span_005388" smilref="Programming_Robots_with_ROS00017.smil#span_005388">rate</span> <span class="text" id="span_005389" smilref="Programming_Robots_with_ROS00017.smil#span_005389">=</span> <span class="text" id="span_005390" smilref="Programming_Robots_with_ROS00017.smil#span_005390">rospy</span><span class="text" id="span_005391" smilref="Programming_Robots_with_ROS00017.smil#span_005391">.</span><span class="text" id="span_005392" smilref="Programming_Robots_with_ROS00017.smil#span_005392">Rate</span><span class="text" id="span_005393" smilref="Programming_Robots_with_ROS00017.smil#span_005393">(</span><span class="text" id="span_005394" smilref="Programming_Robots_with_ROS00017.smil#span_005394">10</span><span class="text" id="span_005395" smilref="Programming_Robots_with_ROS00017.smil#span_005395">)</span>

  <span class="text" id="span_005396" smilref="Programming_Robots_with_ROS00017.smil#span_005396">gripper_goal</span> <span class="text" id="span_005397" smilref="Programming_Robots_with_ROS00017.smil#span_005397">=</span> <span class="text" id="span_005398" smilref="Programming_Robots_with_ROS00017.smil#span_005398">GripperCommandGoal</span><span class="text" id="span_005399" smilref="Programming_Robots_with_ROS00017.smil#span_005399">(</span><span class="text" id="span_005400" smilref="Programming_Robots_with_ROS00017.smil#span_005400">)</span> <a class="co" id="ch14-co_stockroom_bot_CO7-4" href="#ch14-callout_stockroom_bot_CO7-4" external="false"><img src="images/4.jpg" alt="4" id="img_000211" /></a>
  <span class="text" id="span_005401" smilref="Programming_Robots_with_ROS00017.smil#span_005401">gripper_goal</span><span class="text" id="span_005402" smilref="Programming_Robots_with_ROS00017.smil#span_005402">.</span><span class="text" id="span_005403" smilref="Programming_Robots_with_ROS00017.smil#span_005403">command</span><span class="text" id="span_005404" smilref="Programming_Robots_with_ROS00017.smil#span_005404">.</span><span class="text" id="span_005405" smilref="Programming_Robots_with_ROS00017.smil#span_005405">max_effort</span> <span class="text" id="span_005406" smilref="Programming_Robots_with_ROS00017.smil#span_005406">=</span> <span class="text" id="span_005407" smilref="Programming_Robots_with_ROS00017.smil#span_005407">10.0</span>

  <span class="text" id="span_005408" smilref="Programming_Robots_with_ROS00017.smil#span_005408">scene</span> <span class="text" id="span_005409" smilref="Programming_Robots_with_ROS00017.smil#span_005409">=</span> <span class="text" id="span_005410" smilref="Programming_Robots_with_ROS00017.smil#span_005410">PlanningSceneInterface</span><span class="text" id="span_005411" smilref="Programming_Robots_with_ROS00017.smil#span_005411">(</span><span class="text" id="span_005412" smilref="Programming_Robots_with_ROS00017.smil#span_005412">"</span><span class="text" id="span_005413" smilref="Programming_Robots_with_ROS00017.smil#span_005413">base_link</span><span class="text" id="span_005414" smilref="Programming_Robots_with_ROS00017.smil#span_005414">"</span><span class="text" id="span_005415" smilref="Programming_Robots_with_ROS00017.smil#span_005415">)</span>

  <span class="text" id="span_005416" smilref="Programming_Robots_with_ROS00017.smil#span_005416">p</span> <span class="text" id="span_005417" smilref="Programming_Robots_with_ROS00017.smil#span_005417">=</span> <span class="text" id="span_005418" smilref="Programming_Robots_with_ROS00017.smil#span_005418">Pose</span><span class="text" id="span_005419" smilref="Programming_Robots_with_ROS00017.smil#span_005419">(</span><span class="text" id="span_005420" smilref="Programming_Robots_with_ROS00017.smil#span_005420">)</span>
  <span class="text" id="span_005421" smilref="Programming_Robots_with_ROS00017.smil#span_005421">p</span><span class="text" id="span_005422" smilref="Programming_Robots_with_ROS00017.smil#span_005422">.</span><span class="text" id="span_005423" smilref="Programming_Robots_with_ROS00017.smil#span_005423">position</span><span class="text" id="span_005424" smilref="Programming_Robots_with_ROS00017.smil#span_005424">.</span><span class="text" id="span_005425" smilref="Programming_Robots_with_ROS00017.smil#span_005425">x</span> <span class="text" id="span_005426" smilref="Programming_Robots_with_ROS00017.smil#span_005426">=</span> <span class="text" id="span_005427" smilref="Programming_Robots_with_ROS00017.smil#span_005427">0.4</span> <span class="text" id="span_005428" smilref="Programming_Robots_with_ROS00017.smil#span_005428">+</span> <span class="text" id="span_005429" smilref="Programming_Robots_with_ROS00017.smil#span_005429">0.15</span>
  <span class="text" id="span_005430" smilref="Programming_Robots_with_ROS00017.smil#span_005430">p</span><span class="text" id="span_005431" smilref="Programming_Robots_with_ROS00017.smil#span_005431">.</span><span class="text" id="span_005432" smilref="Programming_Robots_with_ROS00017.smil#span_005432">position</span><span class="text" id="span_005433" smilref="Programming_Robots_with_ROS00017.smil#span_005433">.</span><span class="text" id="span_005434" smilref="Programming_Robots_with_ROS00017.smil#span_005434">y</span> <span class="text" id="span_005435" smilref="Programming_Robots_with_ROS00017.smil#span_005435">=</span> <span class="text" id="span_005436" smilref="Programming_Robots_with_ROS00017.smil#span_005436">-</span><span class="text" id="span_005437" smilref="Programming_Robots_with_ROS00017.smil#span_005437">0.4</span>
  <span class="text" id="span_005438" smilref="Programming_Robots_with_ROS00017.smil#span_005438">p</span><span class="text" id="span_005439" smilref="Programming_Robots_with_ROS00017.smil#span_005439">.</span><span class="text" id="span_005440" smilref="Programming_Robots_with_ROS00017.smil#span_005440">position</span><span class="text" id="span_005441" smilref="Programming_Robots_with_ROS00017.smil#span_005441">.</span><span class="text" id="span_005442" smilref="Programming_Robots_with_ROS00017.smil#span_005442">z</span> <span class="text" id="span_005443" smilref="Programming_Robots_with_ROS00017.smil#span_005443">=</span> <span class="text" id="span_005444" smilref="Programming_Robots_with_ROS00017.smil#span_005444">0.7</span> <span class="text" id="span_005445" smilref="Programming_Robots_with_ROS00017.smil#span_005445">+</span> <span class="text" id="span_005446" smilref="Programming_Robots_with_ROS00017.smil#span_005446">0.15</span>
  <span class="text" id="span_005447" smilref="Programming_Robots_with_ROS00017.smil#span_005447">p</span><span class="text" id="span_005448" smilref="Programming_Robots_with_ROS00017.smil#span_005448">.</span><span class="text" id="span_005449" smilref="Programming_Robots_with_ROS00017.smil#span_005449">orientation</span> <span class="text" id="span_005450" smilref="Programming_Robots_with_ROS00017.smil#span_005450">=</span> <span class="text" id="span_005451" smilref="Programming_Robots_with_ROS00017.smil#span_005451">Quaternion</span><span class="text" id="span_005452" smilref="Programming_Robots_with_ROS00017.smil#span_005452">(</span><span class="text" id="span_005453" smilref="Programming_Robots_with_ROS00017.smil#span_005453">*</span><span class="text" id="span_005454" smilref="Programming_Robots_with_ROS00017.smil#span_005454">quaternion_from_euler</span><span class="text" id="span_005455" smilref="Programming_Robots_with_ROS00017.smil#span_005455">(</span><span class="text" id="span_005456" smilref="Programming_Robots_with_ROS00017.smil#span_005456">0</span><span class="text" id="span_005457" smilref="Programming_Robots_with_ROS00017.smil#span_005457">,</span> <span class="text" id="span_005458" smilref="Programming_Robots_with_ROS00017.smil#span_005458">1</span><span class="text" id="span_005459" smilref="Programming_Robots_with_ROS00017.smil#span_005459">,</span> <span class="text" id="span_005460" smilref="Programming_Robots_with_ROS00017.smil#span_005460">1</span><span class="text" id="span_005461" smilref="Programming_Robots_with_ROS00017.smil#span_005461">)</span><span class="text" id="span_005462" smilref="Programming_Robots_with_ROS00017.smil#span_005462">)</span>
  <span class="text" id="span_005463" smilref="Programming_Robots_with_ROS00017.smil#span_005463">arm</span><span class="text" id="span_005464" smilref="Programming_Robots_with_ROS00017.smil#span_005464">.</span><span class="text" id="span_005465" smilref="Programming_Robots_with_ROS00017.smil#span_005465">set_pose_target</span><span class="text" id="span_005466" smilref="Programming_Robots_with_ROS00017.smil#span_005466">(</span><span class="text" id="span_005467" smilref="Programming_Robots_with_ROS00017.smil#span_005467">p</span><span class="text" id="span_005468" smilref="Programming_Robots_with_ROS00017.smil#span_005468">)</span> <a class="co" id="ch14-co_stockroom_bot_CO7-5" href="#ch14-callout_stockroom_bot_CO7-5" external="false"><img src="images/5.jpg" alt="5" id="img_000212" /></a>

  <span class="text" id="span_005469" smilref="Programming_Robots_with_ROS00017.smil#span_005469">while</span> <span class="text" id="span_005470" smilref="Programming_Robots_with_ROS00017.smil#span_005470">True</span><span class="text" id="span_005471" smilref="Programming_Robots_with_ROS00017.smil#span_005471">:</span>
    <span class="text" id="span_005472" smilref="Programming_Robots_with_ROS00017.smil#span_005472">if</span> <span class="text" id="span_005473" smilref="Programming_Robots_with_ROS00017.smil#span_005473">arm</span><span class="text" id="span_005474" smilref="Programming_Robots_with_ROS00017.smil#span_005474">.</span><span class="text" id="span_005475" smilref="Programming_Robots_with_ROS00017.smil#span_005475">go</span><span class="text" id="span_005476" smilref="Programming_Robots_with_ROS00017.smil#span_005476">(</span><span class="text" id="span_005477" smilref="Programming_Robots_with_ROS00017.smil#span_005477">True</span><span class="text" id="span_005478" smilref="Programming_Robots_with_ROS00017.smil#span_005478">)</span><span class="text" id="span_005479" smilref="Programming_Robots_with_ROS00017.smil#span_005479">:</span>
      <span class="text" id="span_005480" smilref="Programming_Robots_with_ROS00017.smil#span_005480">break</span>
    <span class="text" id="span_005481" smilref="Programming_Robots_with_ROS00017.smil#span_005481">clear_octomap</span><span class="text" id="span_005482" smilref="Programming_Robots_with_ROS00017.smil#span_005482">(</span><span class="text" id="span_005483" smilref="Programming_Robots_with_ROS00017.smil#span_005483">)</span>
    <span class="text" id="span_005484" smilref="Programming_Robots_with_ROS00017.smil#span_005484">scene</span><span class="text" id="span_005485" smilref="Programming_Robots_with_ROS00017.smil#span_005485">.</span><span class="text" id="span_005486" smilref="Programming_Robots_with_ROS00017.smil#span_005486">clear</span><span class="text" id="span_005487" smilref="Programming_Robots_with_ROS00017.smil#span_005487">(</span><span class="text" id="span_005488" smilref="Programming_Robots_with_ROS00017.smil#span_005488">)</span>

  <span class="text" id="span_005489" smilref="Programming_Robots_with_ROS00017.smil#span_005489">look_at_bin</span><span class="text" id="span_005490" smilref="Programming_Robots_with_ROS00017.smil#span_005490">(</span><span class="text" id="span_005491" smilref="Programming_Robots_with_ROS00017.smil#span_005491">)</span>
  <span class="text" id="span_005492" smilref="Programming_Robots_with_ROS00017.smil#span_005492">while</span> <span class="text" id="span_005493" smilref="Programming_Robots_with_ROS00017.smil#span_005493">not</span> <span class="text" id="span_005494" smilref="Programming_Robots_with_ROS00017.smil#span_005494">rospy</span><span class="text" id="span_005495" smilref="Programming_Robots_with_ROS00017.smil#span_005495">.</span><span class="text" id="span_005496" smilref="Programming_Robots_with_ROS00017.smil#span_005496">is_shutdown</span><span class="text" id="span_005497" smilref="Programming_Robots_with_ROS00017.smil#span_005497">(</span><span class="text" id="span_005498" smilref="Programming_Robots_with_ROS00017.smil#span_005498">)</span><span class="text" id="span_005499" smilref="Programming_Robots_with_ROS00017.smil#span_005499">:</span>
    <span class="text" id="span_005500" smilref="Programming_Robots_with_ROS00017.smil#span_005500">rate</span><span class="text" id="span_005501" smilref="Programming_Robots_with_ROS00017.smil#span_005501">.</span><span class="text" id="span_005502" smilref="Programming_Robots_with_ROS00017.smil#span_005502">sleep</span><span class="text" id="span_005503" smilref="Programming_Robots_with_ROS00017.smil#span_005503">(</span><span class="text" id="span_005504" smilref="Programming_Robots_with_ROS00017.smil#span_005504">)</span>
    <span class="text" id="span_005505" smilref="Programming_Robots_with_ROS00017.smil#span_005505">try</span><span class="text" id="span_005506" smilref="Programming_Robots_with_ROS00017.smil#span_005506">:</span>
      <span class="text" id="span_005507" smilref="Programming_Robots_with_ROS00017.smil#span_005507">t</span> <span class="text" id="span_005508" smilref="Programming_Robots_with_ROS00017.smil#span_005508">=</span> <span class="text" id="span_005509" smilref="Programming_Robots_with_ROS00017.smil#span_005509">tf_listener</span><span class="text" id="span_005510" smilref="Programming_Robots_with_ROS00017.smil#span_005510">.</span><span class="text" id="span_005511" smilref="Programming_Robots_with_ROS00017.smil#span_005511">getLatestCommonTime</span><span class="text" id="span_005512" smilref="Programming_Robots_with_ROS00017.smil#span_005512">(</span><span class="text" id="span_005513" smilref="Programming_Robots_with_ROS00017.smil#span_005513">'</span><span class="text" id="span_005514" smilref="Programming_Robots_with_ROS00017.smil#span_005514">/base_link</span><span class="text" id="span_005515" smilref="Programming_Robots_with_ROS00017.smil#span_005515">'</span><span class="text" id="span_005516" smilref="Programming_Robots_with_ROS00017.smil#span_005516">,</span> <span class="text" id="span_005517" smilref="Programming_Robots_with_ROS00017.smil#span_005517">item_frame</span><span class="text" id="span_005518" smilref="Programming_Robots_with_ROS00017.smil#span_005518">)</span> <a class="co" id="ch14-co_stockroom_bot_CO7-6" href="#ch14-callout_stockroom_bot_CO7-6" external="false"><img src="images/6.jpg" alt="6" id="img_000213" /></a>
      <span class="text" id="span_005519" smilref="Programming_Robots_with_ROS00017.smil#span_005519">if</span> <span class="text" id="span_005520" smilref="Programming_Robots_with_ROS00017.smil#span_005520">(</span><span class="text" id="span_005521" smilref="Programming_Robots_with_ROS00017.smil#span_005521">rospy</span><span class="text" id="span_005522" smilref="Programming_Robots_with_ROS00017.smil#span_005522">.</span><span class="text" id="span_005523" smilref="Programming_Robots_with_ROS00017.smil#span_005523">Time</span><span class="text" id="span_005524" smilref="Programming_Robots_with_ROS00017.smil#span_005524">.</span><span class="text" id="span_005525" smilref="Programming_Robots_with_ROS00017.smil#span_005525">now</span><span class="text" id="span_005526" smilref="Programming_Robots_with_ROS00017.smil#span_005526">(</span><span class="text" id="span_005527" smilref="Programming_Robots_with_ROS00017.smil#span_005527">)</span> <span class="text" id="span_005528" smilref="Programming_Robots_with_ROS00017.smil#span_005528">-</span> <span class="text" id="span_005529" smilref="Programming_Robots_with_ROS00017.smil#span_005529">t</span><span class="text" id="span_005530" smilref="Programming_Robots_with_ROS00017.smil#span_005530">)</span><span class="text" id="span_005531" smilref="Programming_Robots_with_ROS00017.smil#span_005531">.</span><span class="text" id="span_005532" smilref="Programming_Robots_with_ROS00017.smil#span_005532">to_sec</span><span class="text" id="span_005533" smilref="Programming_Robots_with_ROS00017.smil#span_005533">(</span><span class="text" id="span_005534" smilref="Programming_Robots_with_ROS00017.smil#span_005534">)</span> <span class="text" id="span_005535" smilref="Programming_Robots_with_ROS00017.smil#span_005535">&gt;</span> <span class="text" id="span_005536" smilref="Programming_Robots_with_ROS00017.smil#span_005536">0.2</span><span class="text" id="span_005537" smilref="Programming_Robots_with_ROS00017.smil#span_005537">:</span>
        <span class="text" id="span_005538" smilref="Programming_Robots_with_ROS00017.smil#span_005538">rospy</span><span class="text" id="span_005539" smilref="Programming_Robots_with_ROS00017.smil#span_005539">.</span><span class="text" id="span_005540" smilref="Programming_Robots_with_ROS00017.smil#span_005540">sleep</span><span class="text" id="span_005541" smilref="Programming_Robots_with_ROS00017.smil#span_005541">(</span><span class="text" id="span_005542" smilref="Programming_Robots_with_ROS00017.smil#span_005542">0.1</span><span class="text" id="span_005543" smilref="Programming_Robots_with_ROS00017.smil#span_005543">)</span>
        <span class="text" id="span_005544" smilref="Programming_Robots_with_ROS00017.smil#span_005544">continue</span>

      <span class="text" id="span_005545" smilref="Programming_Robots_with_ROS00017.smil#span_005545">(</span><span class="text" id="span_005546" smilref="Programming_Robots_with_ROS00017.smil#span_005546">item_translation</span><span class="text" id="span_005547" smilref="Programming_Robots_with_ROS00017.smil#span_005547">,</span> <span class="text" id="span_005548" smilref="Programming_Robots_with_ROS00017.smil#span_005548">item_orientation</span><span class="text" id="span_005549" smilref="Programming_Robots_with_ROS00017.smil#span_005549">)</span> <span class="text" id="span_005550" smilref="Programming_Robots_with_ROS00017.smil#span_005550">=</span> <span class="text" id="span_005551" smilref="Programming_Robots_with_ROS00017.smil#span_005551">\
</span>        <span class="text" id="span_005552" smilref="Programming_Robots_with_ROS00017.smil#span_005552">tf_listener</span><span class="text" id="span_005553" smilref="Programming_Robots_with_ROS00017.smil#span_005553">.</span><span class="text" id="span_005554" smilref="Programming_Robots_with_ROS00017.smil#span_005554">lookupTransform</span><span class="text" id="span_005555" smilref="Programming_Robots_with_ROS00017.smil#span_005555">(</span><span class="text" id="span_005556" smilref="Programming_Robots_with_ROS00017.smil#span_005556">'</span><span class="text" id="span_005557" smilref="Programming_Robots_with_ROS00017.smil#span_005557">/base_link</span><span class="text" id="span_005558" smilref="Programming_Robots_with_ROS00017.smil#span_005558">'</span><span class="text" id="span_005559" smilref="Programming_Robots_with_ROS00017.smil#span_005559">,</span> <span class="text" id="span_005560" smilref="Programming_Robots_with_ROS00017.smil#span_005560">item_frame</span><span class="text" id="span_005561" smilref="Programming_Robots_with_ROS00017.smil#span_005561">,</span> <span class="text" id="span_005562" smilref="Programming_Robots_with_ROS00017.smil#span_005562">t</span><span class="text" id="span_005563" smilref="Programming_Robots_with_ROS00017.smil#span_005563">)</span> <a class="co" id="ch14-co_stockroom_bot_CO7-7" href="#ch14-callout_stockroom_bot_CO7-7" external="false"><img src="images/7.jpg" alt="7" id="img_000214" /></a>
    <span class="text" id="span_005564" smilref="Programming_Robots_with_ROS00017.smil#span_005564">except</span><span class="text" id="span_005565" smilref="Programming_Robots_with_ROS00017.smil#span_005565">(</span><span class="text" id="span_005566" smilref="Programming_Robots_with_ROS00017.smil#span_005566">tf</span><span class="text" id="span_005567" smilref="Programming_Robots_with_ROS00017.smil#span_005567">.</span><span class="text" id="span_005568" smilref="Programming_Robots_with_ROS00017.smil#span_005568">Exception</span><span class="text" id="span_005569" smilref="Programming_Robots_with_ROS00017.smil#span_005569">,</span> <span class="text" id="span_005570" smilref="Programming_Robots_with_ROS00017.smil#span_005570">tf</span><span class="text" id="span_005571" smilref="Programming_Robots_with_ROS00017.smil#span_005571">.</span><span class="text" id="span_005572" smilref="Programming_Robots_with_ROS00017.smil#span_005572">LookupException</span><span class="text" id="span_005573" smilref="Programming_Robots_with_ROS00017.smil#span_005573">,</span>
           <span class="text" id="span_005574" smilref="Programming_Robots_with_ROS00017.smil#span_005574">tf</span><span class="text" id="span_005575" smilref="Programming_Robots_with_ROS00017.smil#span_005575">.</span><span class="text" id="span_005576" smilref="Programming_Robots_with_ROS00017.smil#span_005576">ConnectivityException</span><span class="text" id="span_005577" smilref="Programming_Robots_with_ROS00017.smil#span_005577">,</span> <span class="text" id="span_005578" smilref="Programming_Robots_with_ROS00017.smil#span_005578">tf</span><span class="text" id="span_005579" smilref="Programming_Robots_with_ROS00017.smil#span_005579">.</span><span class="text" id="span_005580" smilref="Programming_Robots_with_ROS00017.smil#span_005580">ExtrapolationException</span><span class="text" id="span_005581" smilref="Programming_Robots_with_ROS00017.smil#span_005581">)</span><span class="text" id="span_005582" smilref="Programming_Robots_with_ROS00017.smil#span_005582">:</span>
      <span class="text" id="span_005583" smilref="Programming_Robots_with_ROS00017.smil#span_005583">continue</span>

    <span class="text" id="span_005584" smilref="Programming_Robots_with_ROS00017.smil#span_005584">gripper_goal</span><span class="text" id="span_005585" smilref="Programming_Robots_with_ROS00017.smil#span_005585">.</span><span class="text" id="span_005586" smilref="Programming_Robots_with_ROS00017.smil#span_005586">command</span><span class="text" id="span_005587" smilref="Programming_Robots_with_ROS00017.smil#span_005587">.</span><span class="text" id="span_005588" smilref="Programming_Robots_with_ROS00017.smil#span_005588">position</span> <span class="text" id="span_005589" smilref="Programming_Robots_with_ROS00017.smil#span_005589">=</span> <span class="text" id="span_005590" smilref="Programming_Robots_with_ROS00017.smil#span_005590">0.15</span>
    <span class="text" id="span_005591" smilref="Programming_Robots_with_ROS00017.smil#span_005591">gripper</span><span class="text" id="span_005592" smilref="Programming_Robots_with_ROS00017.smil#span_005592">.</span><span class="text" id="span_005593" smilref="Programming_Robots_with_ROS00017.smil#span_005593">send_goal</span><span class="text" id="span_005594" smilref="Programming_Robots_with_ROS00017.smil#span_005594">(</span><span class="text" id="span_005595" smilref="Programming_Robots_with_ROS00017.smil#span_005595">gripper_goal</span><span class="text" id="span_005596" smilref="Programming_Robots_with_ROS00017.smil#span_005596">)</span> <a class="co" id="ch14-co_stockroom_bot_CO7-8" href="#ch14-callout_stockroom_bot_CO7-8" external="false"><img src="images/8.jpg" alt="8" id="img_000215" /></a>
    <span class="text" id="span_005597" smilref="Programming_Robots_with_ROS00018.smil#span_005597">gripper</span><span class="text" id="span_005598" smilref="Programming_Robots_with_ROS00018.smil#span_005598">.</span><span class="text" id="span_005599" smilref="Programming_Robots_with_ROS00018.smil#span_005599">wait_for_result</span><span class="text" id="span_005600" smilref="Programming_Robots_with_ROS00018.smil#span_005600">(</span><span class="text" id="span_005601" smilref="Programming_Robots_with_ROS00018.smil#span_005601">rospy</span><span class="text" id="span_005602" smilref="Programming_Robots_with_ROS00018.smil#span_005602">.</span><span class="text" id="span_005603" smilref="Programming_Robots_with_ROS00018.smil#span_005603">Duration</span><span class="text" id="span_005604" smilref="Programming_Robots_with_ROS00018.smil#span_005604">(</span><span class="text" id="span_005605" smilref="Programming_Robots_with_ROS00018.smil#span_005605">1.0</span><span class="text" id="span_005606" smilref="Programming_Robots_with_ROS00018.smil#span_005606">)</span><span class="text" id="span_005607" smilref="Programming_Robots_with_ROS00018.smil#span_005607">)</span>

    <span class="text" id="span_005608" smilref="Programming_Robots_with_ROS00018.smil#span_005608">print</span> <span class="text" id="span_005609" smilref="Programming_Robots_with_ROS00018.smil#span_005609">"</span><span class="text" id="span_005610" smilref="Programming_Robots_with_ROS00018.smil#span_005610">item: </span><span class="text" id="span_005611" smilref="Programming_Robots_with_ROS00018.smil#span_005611">"</span> <span class="text" id="span_005612" smilref="Programming_Robots_with_ROS00018.smil#span_005612">+</span> <span class="text" id="span_005613" smilref="Programming_Robots_with_ROS00018.smil#span_005613">str</span><span class="text" id="span_005614" smilref="Programming_Robots_with_ROS00018.smil#span_005614">(</span><span class="text" id="span_005615" smilref="Programming_Robots_with_ROS00018.smil#span_005615">item_translation</span><span class="text" id="span_005616" smilref="Programming_Robots_with_ROS00018.smil#span_005616">)</span>
    <span class="text" id="span_005617" smilref="Programming_Robots_with_ROS00018.smil#span_005617">scene</span><span class="text" id="span_005618" smilref="Programming_Robots_with_ROS00018.smil#span_005618">.</span><span class="text" id="span_005619" smilref="Programming_Robots_with_ROS00018.smil#span_005619">addCube</span><span class="text" id="span_005620" smilref="Programming_Robots_with_ROS00018.smil#span_005620">(</span>
        <span class="text" id="span_005621" smilref="Programming_Robots_with_ROS00018.smil#span_005621">"</span><span class="text" id="span_005622" smilref="Programming_Robots_with_ROS00018.smil#span_005622">item</span><span class="text" id="span_005623" smilref="Programming_Robots_with_ROS00018.smil#span_005623">"</span><span class="text" id="span_005624" smilref="Programming_Robots_with_ROS00018.smil#span_005624">,</span> <span class="text" id="span_005625" smilref="Programming_Robots_with_ROS00018.smil#span_005625">0.05</span><span class="text" id="span_005626" smilref="Programming_Robots_with_ROS00018.smil#span_005626">,</span>
        <span class="text" id="span_005627" smilref="Programming_Robots_with_ROS00018.smil#span_005627">item_translation</span><span class="text" id="span_005628" smilref="Programming_Robots_with_ROS00018.smil#span_005628">[</span><span class="text" id="span_005629" smilref="Programming_Robots_with_ROS00018.smil#span_005629">0</span><span class="text" id="span_005630" smilref="Programming_Robots_with_ROS00018.smil#span_005630">]</span><span class="text" id="span_005631" smilref="Programming_Robots_with_ROS00018.smil#span_005631">,</span> <span class="text" id="span_005632" smilref="Programming_Robots_with_ROS00018.smil#span_005632">item_translation</span><span class="text" id="span_005633" smilref="Programming_Robots_with_ROS00018.smil#span_005633">[</span><span class="text" id="span_005634" smilref="Programming_Robots_with_ROS00018.smil#span_005634">1</span><span class="text" id="span_005635" smilref="Programming_Robots_with_ROS00018.smil#span_005635">]</span><span class="text" id="span_005636" smilref="Programming_Robots_with_ROS00018.smil#span_005636">,</span> <span class="text" id="span_005637" smilref="Programming_Robots_with_ROS00018.smil#span_005637">item_translation</span><span class="text" id="span_005638" smilref="Programming_Robots_with_ROS00018.smil#span_005638">[</span><span class="text" id="span_005639" smilref="Programming_Robots_with_ROS00018.smil#span_005639">2</span><span class="text" id="span_005640" smilref="Programming_Robots_with_ROS00018.smil#span_005640">]</span><span class="text" id="span_005641" smilref="Programming_Robots_with_ROS00018.smil#span_005641">)</span>

    <span class="text" id="span_005642" smilref="Programming_Robots_with_ROS00018.smil#span_005642">p</span><span class="text" id="span_005643" smilref="Programming_Robots_with_ROS00018.smil#span_005643">.</span><span class="text" id="span_005644" smilref="Programming_Robots_with_ROS00018.smil#span_005644">position</span><span class="text" id="span_005645" smilref="Programming_Robots_with_ROS00018.smil#span_005645">.</span><span class="text" id="span_005646" smilref="Programming_Robots_with_ROS00018.smil#span_005646">x</span> <span class="text" id="span_005647" smilref="Programming_Robots_with_ROS00018.smil#span_005647">=</span> <span class="text" id="span_005648" smilref="Programming_Robots_with_ROS00018.smil#span_005648">item_translation</span><span class="text" id="span_005649" smilref="Programming_Robots_with_ROS00018.smil#span_005649">[</span><span class="text" id="span_005650" smilref="Programming_Robots_with_ROS00018.smil#span_005650">0</span><span class="text" id="span_005651" smilref="Programming_Robots_with_ROS00018.smil#span_005651">]</span> <span class="text" id="span_005652" smilref="Programming_Robots_with_ROS00018.smil#span_005652">-</span> <span class="text" id="span_005653" smilref="Programming_Robots_with_ROS00018.smil#span_005653">0.01</span> <span class="text" id="span_005654" smilref="Programming_Robots_with_ROS00018.smil#span_005654">-</span> <span class="text" id="span_005655" smilref="Programming_Robots_with_ROS00018.smil#span_005655">0.06</span>
    <span class="text" id="span_005656" smilref="Programming_Robots_with_ROS00018.smil#span_005656">p</span><span class="text" id="span_005657" smilref="Programming_Robots_with_ROS00018.smil#span_005657">.</span><span class="text" id="span_005658" smilref="Programming_Robots_with_ROS00018.smil#span_005658">position</span><span class="text" id="span_005659" smilref="Programming_Robots_with_ROS00018.smil#span_005659">.</span><span class="text" id="span_005660" smilref="Programming_Robots_with_ROS00018.smil#span_005660">y</span> <span class="text" id="span_005661" smilref="Programming_Robots_with_ROS00018.smil#span_005661">=</span> <span class="text" id="span_005662" smilref="Programming_Robots_with_ROS00018.smil#span_005662">item_translation</span><span class="text" id="span_005663" smilref="Programming_Robots_with_ROS00018.smil#span_005663">[</span><span class="text" id="span_005664" smilref="Programming_Robots_with_ROS00018.smil#span_005664">1</span><span class="text" id="span_005665" smilref="Programming_Robots_with_ROS00018.smil#span_005665">]</span>
    <span class="text" id="span_005666" smilref="Programming_Robots_with_ROS00018.smil#span_005666">p</span><span class="text" id="span_005667" smilref="Programming_Robots_with_ROS00018.smil#span_005667">.</span><span class="text" id="span_005668" smilref="Programming_Robots_with_ROS00018.smil#span_005668">position</span><span class="text" id="span_005669" smilref="Programming_Robots_with_ROS00018.smil#span_005669">.</span><span class="text" id="span_005670" smilref="Programming_Robots_with_ROS00018.smil#span_005670">z</span> <span class="text" id="span_005671" smilref="Programming_Robots_with_ROS00018.smil#span_005671">=</span> <span class="text" id="span_005672" smilref="Programming_Robots_with_ROS00018.smil#span_005672">item_translation</span><span class="text" id="span_005673" smilref="Programming_Robots_with_ROS00018.smil#span_005673">[</span><span class="text" id="span_005674" smilref="Programming_Robots_with_ROS00018.smil#span_005674">2</span><span class="text" id="span_005675" smilref="Programming_Robots_with_ROS00018.smil#span_005675">]</span> <span class="text" id="span_005676" smilref="Programming_Robots_with_ROS00018.smil#span_005676">+</span> <span class="text" id="span_005677" smilref="Programming_Robots_with_ROS00018.smil#span_005677">0.04</span> <span class="text" id="span_005678" smilref="Programming_Robots_with_ROS00018.smil#span_005678">+</span> <span class="text" id="span_005679" smilref="Programming_Robots_with_ROS00018.smil#span_005679">0.14</span>
    <span class="text" id="span_005680" smilref="Programming_Robots_with_ROS00018.smil#span_005680">p</span><span class="text" id="span_005681" smilref="Programming_Robots_with_ROS00018.smil#span_005681">.</span><span class="text" id="span_005682" smilref="Programming_Robots_with_ROS00018.smil#span_005682">orientation</span> <span class="text" id="span_005683" smilref="Programming_Robots_with_ROS00018.smil#span_005683">=</span> <span class="text" id="span_005684" smilref="Programming_Robots_with_ROS00018.smil#span_005684">Quaternion</span><span class="text" id="span_005685" smilref="Programming_Robots_with_ROS00018.smil#span_005685">(</span><span class="text" id="span_005686" smilref="Programming_Robots_with_ROS00018.smil#span_005686">*</span><span class="text" id="span_005687" smilref="Programming_Robots_with_ROS00018.smil#span_005687">quaternion_from_euler</span><span class="text" id="span_005688" smilref="Programming_Robots_with_ROS00018.smil#span_005688">(</span><span class="text" id="span_005689" smilref="Programming_Robots_with_ROS00018.smil#span_005689">0</span><span class="text" id="span_005690" smilref="Programming_Robots_with_ROS00018.smil#span_005690">,</span> <span class="text" id="span_005691" smilref="Programming_Robots_with_ROS00018.smil#span_005691">1.2</span><span class="text" id="span_005692" smilref="Programming_Robots_with_ROS00018.smil#span_005692">,</span> <span class="text" id="span_005693" smilref="Programming_Robots_with_ROS00018.smil#span_005693">0</span><span class="text" id="span_005694" smilref="Programming_Robots_with_ROS00018.smil#span_005694">)</span><span class="text" id="span_005695" smilref="Programming_Robots_with_ROS00018.smil#span_005695">)</span>
    <span class="text" id="span_005696" smilref="Programming_Robots_with_ROS00018.smil#span_005696">arm</span><span class="text" id="span_005697" smilref="Programming_Robots_with_ROS00018.smil#span_005697">.</span><span class="text" id="span_005698" smilref="Programming_Robots_with_ROS00018.smil#span_005698">set_pose_target</span><span class="text" id="span_005699" smilref="Programming_Robots_with_ROS00018.smil#span_005699">(</span><span class="text" id="span_005700" smilref="Programming_Robots_with_ROS00018.smil#span_005700">p</span><span class="text" id="span_005701" smilref="Programming_Robots_with_ROS00018.smil#span_005701">)</span>
    <span class="text" id="span_005702" smilref="Programming_Robots_with_ROS00018.smil#span_005702">arm</span><span class="text" id="span_005703" smilref="Programming_Robots_with_ROS00018.smil#span_005703">.</span><span class="text" id="span_005704" smilref="Programming_Robots_with_ROS00018.smil#span_005704">go</span><span class="text" id="span_005705" smilref="Programming_Robots_with_ROS00018.smil#span_005705">(</span><span class="text" id="span_005706" smilref="Programming_Robots_with_ROS00018.smil#span_005706">True</span><span class="text" id="span_005707" smilref="Programming_Robots_with_ROS00018.smil#span_005707">)</span> <a class="co" id="ch14-co_stockroom_bot_CO7-9" href="#ch14-callout_stockroom_bot_CO7-9" external="false"><img src="images/9.jpg" alt="9" id="img_000216" /></a>

    <span class="text" id="span_005708" smilref="Programming_Robots_with_ROS00018.smil#span_005708">#os.system("rosservice call clear_octomap")</span>

    <span class="text" id="span_005709" smilref="Programming_Robots_with_ROS00018.smil#span_005709">gripper_goal</span><span class="text" id="span_005710" smilref="Programming_Robots_with_ROS00018.smil#span_005710">.</span><span class="text" id="span_005711" smilref="Programming_Robots_with_ROS00018.smil#span_005711">command</span><span class="text" id="span_005712" smilref="Programming_Robots_with_ROS00018.smil#span_005712">.</span><span class="text" id="span_005713" smilref="Programming_Robots_with_ROS00018.smil#span_005713">position</span> <span class="text" id="span_005714" smilref="Programming_Robots_with_ROS00018.smil#span_005714">=</span> <span class="text" id="span_005715" smilref="Programming_Robots_with_ROS00018.smil#span_005715">0</span>
    <span class="text" id="span_005716" smilref="Programming_Robots_with_ROS00018.smil#span_005716">gripper</span><span class="text" id="span_005717" smilref="Programming_Robots_with_ROS00018.smil#span_005717">.</span><span class="text" id="span_005718" smilref="Programming_Robots_with_ROS00018.smil#span_005718">send_goal</span><span class="text" id="span_005719" smilref="Programming_Robots_with_ROS00018.smil#span_005719">(</span><span class="text" id="span_005720" smilref="Programming_Robots_with_ROS00018.smil#span_005720">gripper_goal</span><span class="text" id="span_005721" smilref="Programming_Robots_with_ROS00018.smil#span_005721">)</span>
    <span class="text" id="span_005722" smilref="Programming_Robots_with_ROS00018.smil#span_005722">gripper</span><span class="text" id="span_005723" smilref="Programming_Robots_with_ROS00018.smil#span_005723">.</span><span class="text" id="span_005724" smilref="Programming_Robots_with_ROS00018.smil#span_005724">wait_for_result</span><span class="text" id="span_005725" smilref="Programming_Robots_with_ROS00018.smil#span_005725">(</span><span class="text" id="span_005726" smilref="Programming_Robots_with_ROS00018.smil#span_005726">rospy</span><span class="text" id="span_005727" smilref="Programming_Robots_with_ROS00018.smil#span_005727">.</span><span class="text" id="span_005728" smilref="Programming_Robots_with_ROS00018.smil#span_005728">Duration</span><span class="text" id="span_005729" smilref="Programming_Robots_with_ROS00018.smil#span_005729">(</span><span class="text" id="span_005730" smilref="Programming_Robots_with_ROS00018.smil#span_005730">2.0</span><span class="text" id="span_005731" smilref="Programming_Robots_with_ROS00018.smil#span_005731">)</span><span class="text" id="span_005732" smilref="Programming_Robots_with_ROS00018.smil#span_005732">)</span>

    <span class="text" id="span_005733" smilref="Programming_Robots_with_ROS00018.smil#span_005733">scene</span><span class="text" id="span_005734" smilref="Programming_Robots_with_ROS00018.smil#span_005734">.</span><span class="text" id="span_005735" smilref="Programming_Robots_with_ROS00018.smil#span_005735">removeAttachedObject</span><span class="text" id="span_005736" smilref="Programming_Robots_with_ROS00018.smil#span_005736">(</span><span class="text" id="span_005737" smilref="Programming_Robots_with_ROS00018.smil#span_005737">"</span><span class="text" id="span_005738" smilref="Programming_Robots_with_ROS00018.smil#span_005738">item</span><span class="text" id="span_005739" smilref="Programming_Robots_with_ROS00018.smil#span_005739">"</span><span class="text" id="span_005740" smilref="Programming_Robots_with_ROS00018.smil#span_005740">)</span>

    <span class="text" id="span_005741" smilref="Programming_Robots_with_ROS00018.smil#span_005741">clear_octomap</span><span class="text" id="span_005742" smilref="Programming_Robots_with_ROS00018.smil#span_005742">(</span><span class="text" id="span_005743" smilref="Programming_Robots_with_ROS00018.smil#span_005743">)</span>

    <span class="text" id="span_005744" smilref="Programming_Robots_with_ROS00018.smil#span_005744">p</span><span class="text" id="span_005745" smilref="Programming_Robots_with_ROS00018.smil#span_005745">.</span><span class="text" id="span_005746" smilref="Programming_Robots_with_ROS00018.smil#span_005746">position</span><span class="text" id="span_005747" smilref="Programming_Robots_with_ROS00018.smil#span_005747">.</span><span class="text" id="span_005748" smilref="Programming_Robots_with_ROS00018.smil#span_005748">x</span> <span class="text" id="span_005749" smilref="Programming_Robots_with_ROS00018.smil#span_005749">=</span> <span class="text" id="span_005750" smilref="Programming_Robots_with_ROS00018.smil#span_005750">0.00</span>
    <span class="text" id="span_005751" smilref="Programming_Robots_with_ROS00018.smil#span_005751">p</span><span class="text" id="span_005752" smilref="Programming_Robots_with_ROS00018.smil#span_005752">.</span><span class="text" id="span_005753" smilref="Programming_Robots_with_ROS00018.smil#span_005753">position</span><span class="text" id="span_005754" smilref="Programming_Robots_with_ROS00018.smil#span_005754">.</span><span class="text" id="span_005755" smilref="Programming_Robots_with_ROS00018.smil#span_005755">y</span> <span class="text" id="span_005756" smilref="Programming_Robots_with_ROS00018.smil#span_005756">=</span> <span class="text" id="span_005757" smilref="Programming_Robots_with_ROS00018.smil#span_005757">-</span><span class="text" id="span_005758" smilref="Programming_Robots_with_ROS00018.smil#span_005758">0.25</span>
    <span class="text" id="span_005759" smilref="Programming_Robots_with_ROS00018.smil#span_005759">p</span><span class="text" id="span_005760" smilref="Programming_Robots_with_ROS00018.smil#span_005760">.</span><span class="text" id="span_005761" smilref="Programming_Robots_with_ROS00018.smil#span_005761">position</span><span class="text" id="span_005762" smilref="Programming_Robots_with_ROS00018.smil#span_005762">.</span><span class="text" id="span_005763" smilref="Programming_Robots_with_ROS00018.smil#span_005763">z</span> <span class="text" id="span_005764" smilref="Programming_Robots_with_ROS00018.smil#span_005764">=</span> <span class="text" id="span_005765" smilref="Programming_Robots_with_ROS00018.smil#span_005765">0.75</span> <span class="text" id="span_005766" smilref="Programming_Robots_with_ROS00018.smil#span_005766">-</span> <span class="text" id="span_005767" smilref="Programming_Robots_with_ROS00018.smil#span_005767">.</span><span class="text" id="span_005768" smilref="Programming_Robots_with_ROS00018.smil#span_005768">1</span>
    <span class="text" id="span_005769" smilref="Programming_Robots_with_ROS00018.smil#span_005769">p</span><span class="text" id="span_005770" smilref="Programming_Robots_with_ROS00018.smil#span_005770">.</span><span class="text" id="span_005771" smilref="Programming_Robots_with_ROS00018.smil#span_005771">orientation</span> <span class="text" id="span_005772" smilref="Programming_Robots_with_ROS00018.smil#span_005772">=</span> <span class="text" id="span_005773" smilref="Programming_Robots_with_ROS00018.smil#span_005773">Quaternion</span><span class="text" id="span_005774" smilref="Programming_Robots_with_ROS00018.smil#span_005774">(</span><span class="text" id="span_005775" smilref="Programming_Robots_with_ROS00018.smil#span_005775">*</span><span class="text" id="span_005776" smilref="Programming_Robots_with_ROS00018.smil#span_005776">quaternion_from_euler</span><span class="text" id="span_005777" smilref="Programming_Robots_with_ROS00018.smil#span_005777">(</span><span class="text" id="span_005778" smilref="Programming_Robots_with_ROS00018.smil#span_005778">0</span><span class="text" id="span_005779" smilref="Programming_Robots_with_ROS00018.smil#span_005779">,</span> <span class="text" id="span_005780" smilref="Programming_Robots_with_ROS00018.smil#span_005780">-</span><span class="text" id="span_005781" smilref="Programming_Robots_with_ROS00018.smil#span_005781">1.5</span><span class="text" id="span_005782" smilref="Programming_Robots_with_ROS00018.smil#span_005782">,</span> <span class="text" id="span_005783" smilref="Programming_Robots_with_ROS00018.smil#span_005783">-</span><span class="text" id="span_005784" smilref="Programming_Robots_with_ROS00018.smil#span_005784">1.5</span><span class="text" id="span_005785" smilref="Programming_Robots_with_ROS00018.smil#span_005785">)</span><span class="text" id="span_005786" smilref="Programming_Robots_with_ROS00018.smil#span_005786">)</span>
    <span class="text" id="span_005787" smilref="Programming_Robots_with_ROS00018.smil#span_005787">arm</span><span class="text" id="span_005788" smilref="Programming_Robots_with_ROS00018.smil#span_005788">.</span><span class="text" id="span_005789" smilref="Programming_Robots_with_ROS00018.smil#span_005789">set_pose_target</span><span class="text" id="span_005790" smilref="Programming_Robots_with_ROS00018.smil#span_005790">(</span><span class="text" id="span_005791" smilref="Programming_Robots_with_ROS00018.smil#span_005791">p</span><span class="text" id="span_005792" smilref="Programming_Robots_with_ROS00018.smil#span_005792">)</span>
    <span class="text" id="span_005793" smilref="Programming_Robots_with_ROS00018.smil#span_005793">arm</span><span class="text" id="span_005794" smilref="Programming_Robots_with_ROS00018.smil#span_005794">.</span><span class="text" id="span_005795" smilref="Programming_Robots_with_ROS00018.smil#span_005795">go</span><span class="text" id="span_005796" smilref="Programming_Robots_with_ROS00018.smil#span_005796">(</span><span class="text" id="span_005797" smilref="Programming_Robots_with_ROS00018.smil#span_005797">True</span><span class="text" id="span_005798" smilref="Programming_Robots_with_ROS00018.smil#span_005798">)</span> <a class="co" id="ch14-co_stockroom_bot_CO7-10" href="#ch14-callout_stockroom_bot_CO7-10" external="false"><img src="images/10.jpg" alt="10" id="img_000217" /></a>
    <span class="text" id="span_005799" smilref="Programming_Robots_with_ROS00018.smil#span_005799">break</span> <a class="co" id="ch14-co_stockroom_bot_CO7-11" href="#ch14-callout_stockroom_bot_CO7-11" external="false"><img src="images/11.jpg" alt="11" id="img_000218" /></a></code>
                  </p>
                  <dl class="calloutlist" id="dl_000017">
                    <dt id="dt_000077">
                      <a class="co" id="ch14-callout_stockroom_bot_CO7-1" href="#ch14-co_stockroom_bot_CO7-1" external="false">
                        <img src="images/1.jpg" alt="1" id="img_000219" />
                      </a>
                    </dt>
                    <dd id="dd_000077">
                      <p id="p_000980" smilref="Programming_Robots_with_ROS00018.smil#p_000980">Since we will need a connection to the gripper action server later to grab the target object, there's no sense proceeding further until it's up. We'll wait here for the gripper server (and, by implication, the rest of the Fetch robot controller) to start.</p>
                    </dd>
                    <dt id="dt_000078">
                      <a class="co" id="ch14-callout_stockroom_bot_CO7-2" href="#ch14-co_stockroom_bot_CO7-2" external="false">
                        <img src="images/2.jpg" alt="2" id="img_000220" />
                      </a>
                    </dt>
                    <dd id="dd_000078">
                      <p id="p_000981">
                        <span class="text" id="span_005800" smilref="Programming_Robots_with_ROS00018.smil#span_005800">As in previous chapters, we'll use</span>
                        <code xml:space="preserve" id="code_001401" smilref="Programming_Robots_with_ROS00018.smil#code_001401">MoveGroupCommander</code>
                        <span class="text" id="span_005801" smilref="Programming_Robots_with_ROS00018.smil#span_005801">as a Python interface to the MoveIt motion planning system.</span>
                      </p>
                    </dd>
                    <dt id="dt_000079">
                      <a class="co" id="ch14-callout_stockroom_bot_CO7-3" href="#ch14-co_stockroom_bot_CO7-3" external="false">
                        <img src="images/3.jpg" alt="3" id="img_000221" />
                      </a>
                    </dt>
                    <dd id="dd_000079">
                      <p id="p_000982">
                        <span class="text" id="span_005802" smilref="Programming_Robots_with_ROS00018.smil#span_005802">The</span>
                        <code xml:space="preserve" id="code_001402" smilref="Programming_Robots_with_ROS00018.smil#code_001402">TransformListener</code>
                        <span class="text" id="span_005803" smilref="Programming_Robots_with_ROS00018.smil#span_005803">instance is how we will subscribe to the transformations (both static and dynamic) being broadcasted by the rest of our system, including the robot joint states, the</span>
                        <code xml:space="preserve" id="code_001403" smilref="Programming_Robots_with_ROS00018.smil#code_001403">move_base</code>
                        <span class="text" id="span_005804" smilref="Programming_Robots_with_ROS00018.smil#span_005804">navigation subsystem, and the ALVAR marker subsystem.</span>
                      </p>
                    </dd>
                    <dt id="dt_000080">
                      <a class="co" id="ch14-callout_stockroom_bot_CO7-4" href="#ch14-co_stockroom_bot_CO7-4" external="false">
                        <img src="images/4.jpg" alt="4" id="img_000222" />
                      </a>
                    </dt>
                    <dd id="dd_000080">
                      <p id="p_000983" smilref="Programming_Robots_with_ROS00018.smil#p_000983">We'll need a gripper goal object later on to send to the gripper action server. We'll initialize it here to save space later, but this is just a stylistic choice.</p>
                    </dd>
                    <dt id="dt_000081">
                      <a class="co" id="ch14-callout_stockroom_bot_CO7-5" href="#ch14-co_stockroom_bot_CO7-5" external="false">
                        <img src="images/5.jpg" alt="5" id="img_000223" />
                      </a>
                    </dt>
                    <dd id="dd_000081">
                      <p id="p_000984" smilref="Programming_Robots_with_ROS00018.smil#p_000984">This pose of the arm is chosen so that the gripper is out of the way of the depth camera, yet still in a "high" posture to make life a bit easier on the motion planner. Many robots have postures such as this, sometimes called "ready," "pre-grasp," or something similar.</p>
                    </dd>
                    <dt id="dt_000082">
                      <a class="co" id="ch14-callout_stockroom_bot_CO7-6" href="#ch14-co_stockroom_bot_CO7-6" external="false">
                        <img src="images/6.jpg" alt="6" id="img_000224" />
                      </a>
                    </dt>
                    <dd id="dd_000082">
                      <p id="p_000985">
                        <span class="text" id="span_005805" smilref="Programming_Robots_with_ROS00018.smil#span_005805">By default, the</span>
                        <code xml:space="preserve" id="code_001404" smilref="Programming_Robots_with_ROS00018.smil#code_001404">tf</code>
                        <span class="text" id="span_005806" smilref="Programming_Robots_with_ROS00018.smil#span_005806">transform system will "remember" transforms for several seconds. However, since our robot is moving around, we want to ensure that we only use transform data that is quite recent. We're using 200 ms as a threshold for "recent enough," but that threshold will be application-dependent.</span>
                      </p>
                    </dd>
                    <dt id="dt_000083">
                      <a class="co" id="ch14-callout_stockroom_bot_CO7-7" href="#ch14-co_stockroom_bot_CO7-7" external="false">
                        <img src="images/7.jpg" alt="7" id="img_000225" />
                      </a>
                    </dt>
                    <dd id="dd_000083">
                      <p id="p_000986">
                        <span class="text" id="span_005807" smilref="Programming_Robots_with_ROS00018.smil#span_005807">This line will actually extract the requested transformation from the</span>
                        <code xml:space="preserve" id="code_001405" smilref="Programming_Robots_with_ROS00018.smil#code_001405">tf</code>
                        <span class="text" id="span_005808" smilref="Programming_Robots_with_ROS00018.smil#span_005808">library's local representation of the transform tree.</span>
                      </p>
                    </dd>
                    <dt id="dt_000084">
                      <a class="co" id="ch14-callout_stockroom_bot_CO7-8" href="#ch14-co_stockroom_bot_CO7-8" external="false">
                        <img src="images/8.jpg" alt="8" id="img_000226" />
                      </a>
                    </dt>
                    <dd id="dd_000084">
                      <p id="p_000987" smilref="Programming_Robots_with_ROS00018.smil#p_000987">This command will fully open the gripper of the Fetch robot.</p>
                    </dd>
                    <dt id="dt_000085">
                      <a class="co" id="ch14-callout_stockroom_bot_CO7-9" href="#ch14-co_stockroom_bot_CO7-9" external="false">
                        <img src="images/9.jpg" alt="9" id="img_000227" />
                      </a>
                    </dt>
                    <dd id="dd_000085">
                      <p id="p_000988" smilref="Programming_Robots_with_ROS00018.smil#p_000988">Here is where the magic happens! We are asking MoveIt to plan and execute a collision-free path to the item's location.</p>
                    </dd>
                    <dt id="dt_000086">
                      <a class="co" id="ch14-callout_stockroom_bot_CO7-10" href="#ch14-co_stockroom_bot_CO7-10" external="false">
                        <img src="images/10.jpg" alt="10" id="img_000228" />
                      </a>
                    </dt>
                    <dd id="dd_000086">
                      <p id="p_000989" smilref="Programming_Robots_with_ROS00018.smil#p_000989">This command instructs the arm to lift up the object and bring it back closer to the robot's torso.</p>
                    </dd>
                    <dt id="dt_000087">
                      <a class="co" id="ch14-callout_stockroom_bot_CO7-11" href="#ch14-co_stockroom_bot_CO7-11" external="false">
                        <img src="images/11.jpg" alt="11" id="img_000229" />
                      </a>
                    </dt>
                    <dd id="dd_000087">
                      <p id="p_000990">
                        <span class="text" id="span_005809" smilref="Programming_Robots_with_ROS00018.smil#span_005809">If we've made it this far, we have now picked up the object, and we can exit the outer</span>
                        <code xml:space="preserve" id="code_001406" smilref="Programming_Robots_with_ROS00018.smil#code_001406">while</code>
                        <span class="text" id="span_005810" smilref="Programming_Robots_with_ROS00018.smil#span_005810">loop that was originally searching for detections of the target object.</span>
                      </p>
                    </dd>
                  </dl>
                </div>
                <p class="keep-together" data-type="indexterm" data-primary="MoveIt" data-secondary="and stockroom-bot" id="ch14-ix_14-stockroom_bot-asciidoc16">
                  <span class="text" id="span_005811" smilref="Programming_Robots_with_ROS00018.smil#span_005811">This bin-filled stockroom scene is considerably more complex than the Chess-bot world. As a result, we will use the built-in MoveIt collision mapping system. This uses a package called</span>
                  <code xml:space="preserve" id="code_001407" smilref="Programming_Robots_with_ROS00018.smil#code_001407">octomap</code>
                  <span class="text" id="span_005812" smilref="Programming_Robots_with_ROS00018.smil#span_005812">to build and maintain a 3D volumetric pixel (</span>
                  <em id="ch14-idp35870208" smilref="Programming_Robots_with_ROS00018.smil#ch14-idp35870208">voxel</em>
                  <span class="text" id="span_005813" smilref="Programming_Robots_with_ROS00018.smil#span_005813">) map of occupied and free cells in the workspace. Voxel maps are complex structures, but fortunately, the behavior is transparent from the MoveIt user's perspective: the arm simply won't crash into things that the depth camera can see.</span>
                  <a data-type="xref" href="#ch14-octomap_screenshot" external="false" id="a_000236" smilref="Programming_Robots_with_ROS00018.smil#a_000236">Figure 14-11</a>
                  <span class="text" id="span_005814" smilref="Programming_Robots_with_ROS00018.smil#span_005814">shows a typical OctoMap rendering of the stockroom scene in</span>
                  <code xml:space="preserve" id="code_001408" smilref="Programming_Robots_with_ROS00018.smil#code_001408">rviz</code>
                  <span class="text" id="span_005815" smilref="Programming_Robots_with_ROS00018.smil#span_005815">. The "boxy" appearance is OctoMap's data structure: the world is represented as a series of small cubes. The task of MoveIt's planning subsystem is to generate arm paths that avoid the obstacles represented in the OctoMap rendering, while still arriving at the goal state. This task is processor-intensive, which is why motion planning often takes a few seconds to complete.</span>
                </p>
                <p id="p_000991" smilref="Programming_Robots_with_ROS00018.smil#p_000991">Note that activating OctoMap's collision-avoidance system was purely a configuration task. The high-level usage of MoveIt remains the same; it just takes a bit longer to run when MoveIt has to consider all of those obstacles.</p>
                <p id="p_000992" smilref="Programming_Robots_with_ROS00018.smil#p_000992">The amazing thing about a high-dimensional motion planning system like MoveIt is that it gracefully uses all the joints on the robot to achieve the commanded gripper positions and orientations. As discussed previously, the robot's navigation system will deliver the robot in front of the bin, but with a typical positioning error on the order of +/- 10 cm due to map discretization, sensor noise, and a host of other factors. The arm motion planner can use all of the joints of the arm (and on the Fetch robot, the torso-lift joint) to deliver the gripper to a precise location relative to the fiducial marker on the back of the bin. So long as the arm doesn't crash into anything, the motion planner is free to be "creative" in what arm postures and trajectories it uses.</p>
                <figure id="figure_000074">
                  <h1 id="h1_000309" smilref="Programming_Robots_with_ROS00018.smil#h1_000309">Figure 14-11. The OctoMap system generates 3D maps of the robot's workspace, for use by the arm path planner</h1>
                  <div id="ch14-octomap_screenshot" class="figure">
                    <img src="images/prwr_1411.jpg" alt="Octomap" id="img_000230" />
                  </div>
                </figure>
                <p class="keep-together" id="p_000993">
                  <span class="text" id="span_005816" smilref="Programming_Robots_with_ROS00018.smil#span_005816">In practice, the planning problem is so difficult that algorithms often make use of random "guesses" for trajectories and iteratively refine them during the planning process. This means that there will be considerable variation in the solutions the planner comes up with. We asked Stockroom-bot to pick up an object from the same bin several times and assembled the grasp configurations into several renderings in</span>
                  <a data-type="xref" href="#ch14-stockroom_grasps" external="false" id="a_000237" smilref="Programming_Robots_with_ROS00018.smil#a_000237">Figure 14-12</a>
                  <span class="text" id="span_005817" smilref="Programming_Robots_with_ROS00018.smil#span_005817">. Although the gripper was always in the same orientation relative to the green "target" item, the positioning of the rest of the arm and torso varied considerably.</span>
                </p>
                <figure id="figure_000075">
                  <h1 id="h1_000310" smilref="Programming_Robots_with_ROS00018.smil#h1_000310">Figure 14-12. Various grasps found by MoveIt for different alignments of the robot with respect to the bin</h1>
                  <div id="ch14-stockroom_grasps" class="figure">
                    <img src="images/prwr_1412.jpg" alt="Grasps" id="img_000231" />
                  </div>
                </figure>
                <p id="ch14-idp38732608" data-type="indexterm" data-startref="ix_14-stockroom_bot-asciidoc12">
                  <span class="text" id="span_005818" smilref="Programming_Robots_with_ROS00018.smil#span_005818">Now that we can pick up the item, the final process is to deliver it to the "customer counter" outside the stockroom. This process requires the robot to navigate to a position behind the counter, extend the arm, open the gripper to drop the object, and then retract the arm and return to the stockroom. These steps are accomplished by the script in</span>
                  <a data-type="xref" href="#ch14-deliver_to_counterpy" external="false" id="a_000238" smilref="Programming_Robots_with_ROS00018.smil#a_000238">Example 14-16</a>
                  <span class="text" id="span_005819" smilref="Programming_Robots_with_ROS00018.smil#span_005819">, which implements a minimalist approach to these problems, and illustrated in</span>
                  <a data-type="xref" href="#ch14-deliveryjpg" external="false" id="a_000239" smilref="Programming_Robots_with_ROS00018.smil#a_000239">Figure 14-13</a>
                  <span class="text" id="span_005820" smilref="Programming_Robots_with_ROS00018.smil#span_005820">and</span>
                  <a data-type="xref" href="#ch14-returningjpg" external="false" id="a_000240" smilref="Programming_Robots_with_ROS00018.smil#a_000240">Figure 14-14</a>
                  <span class="text" id="span_005821" smilref="Programming_Robots_with_ROS00018.smil#span_005821">.</span>
                </p>
                <h1 id="h1_000311" smilref="Programming_Robots_with_ROS00018.smil#h1_000311">Example 14-16. deliver_to_counter.py</h1>
                <div id="ch14-deliver_to_counterpy" data-type="example" class="pagebreak-before">
                  <p id="p_000994">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001409" smilref="Programming_Robots_with_ROS00018.smil#code_001409">#!/usr/bin/env python
import sys, rospy, tf, actionlib, moveit_commander
from geometry_msgs.msg import *
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
from tf.transformations import quaternion_from_euler
from control_msgs.msg import (GripperCommandAction, GripperCommandGoal)

if __name__ == '__main__':
  moveit_commander.roscpp_initialize(sys.argv)
  rospy.init_node('deliver_to_counter')
  args = rospy.myargv(argv=sys.argv)
  gripper = actionlib.SimpleActionClient("gripper_controller/gripper_action",
    GripperCommandAction)
  gripper.wait_for_server()
  move_base = actionlib.SimpleActionClient('move_base', MoveBaseAction)
  move_base.wait_for_server()
  goal = MoveBaseGoal()
  goal.target_pose.header.frame_id = 'map'
  goal.target_pose.pose.position.x = 4
  orient = Quaternion(*quaternion_from_euler(0, 0, 0))
  goal.target_pose.pose.orientation = orient
  move_base.send_goal(goal)
  move_base.wait_for_result()

  arm = moveit_commander.MoveGroupCommander("arm")
  arm.allow_replanning(True)
  p = Pose()
  p.position.x = 0.9
  p.position.z = 0.95
  p.orientation = Quaternion(*quaternion_from_euler(0, 0.5, 0))
  arm.set_pose_target(p)
  arm.go(True)
  gripper_goal = GripperCommandGoal()
  gripper_goal.command.max_effort = 10.0
  gripper_goal.command.position = 0.15
  gripper.send_goal(gripper_goal)
  gripper.wait_for_result(rospy.Duration(1.0))

  p.position.x = 0.05
  p.position.y = -0.15
  p.position.z = 0.75
  p.orientation = Quaternion(*quaternion_from_euler(0, -1.5, -1.5))
  arm.set_pose_target(p)
  arm.go(True)

  goal.target_pose.pose.position.x = 0
  move_base.send_goal(goal)
  move_base.wait_for_result()</code>
                  </p>
                </div>
                <figure id="figure_000076">
                  <h1 id="h1_000312" smilref="Programming_Robots_with_ROS00018.smil#h1_000312">Figure 14-13. The Fetch robot reaching out to deliver an item onto the "customer counter" in the front of the stockroom</h1>
                  <div id="ch14-deliveryjpg" class="figure">
                    <img src="images/prwr_1413.jpg" alt="Item Delivery" id="img_000232" />
                  </div>
                </figure>
                <figure id="figure_000077">
                  <h1 id="h1_000313" smilref="Programming_Robots_with_ROS00018.smil#h1_000313">Figure 14-14. After the item-delivery phase is complete, the Fetch robot returns to its "ready position" in the center of the bins</h1>
                  <div id="ch14-returningjpg" class="figure">
                    <img src="images/prwr_1414.jpg" alt="Returning" id="img_000233" />
                  </div>
                </figure>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Summary" id="section_000146">
              <h1 id="h1_000314" smilref="Programming_Robots_with_ROS00018.smil#h1_000314">Summary</h1>
              <div class="sect1" id="ch14-idp33514352">
                <p id="p_000995" smilref="Programming_Robots_with_ROS00018.smil#p_000995">This chapter described a useful robotic application: stockroom automation. Various tools in the ROS and Gazebo ecosystem were utilized to develop an approach to the problem. First, we developed a Gazebo model of the environment. Next, we mapped this simulated environment and created scripts to drive the robot to the various storage bins. Then, we developed a script for the robot to use visual fiducial markers to precisely determine locations within the storage bins and grasp objects from known locations relative to the bins. The final code example showed how to drive the robot to the customer counter, drop the item, and return the robot to the stockroom.</p>
                <p id="ch14-idp37984880" data-type="indexterm" data-startref="ix_14-stockroom_bot-asciidoc9" smilref="Programming_Robots_with_ROS00018.smil#ch14-idp37984880">These code examples provide building blocks that could be used to create a real-world robot application. Of course, in the interest of simplifying the examples, we did not provide robust error handling or a notification system so that the robot can "call a friend" when it gets stuck. We also did not describe a user interface. All of these additional aspects can be developed with existing or modified ROS tools: the Robot Web Tools system can be used to interface user-facing web interfaces to ROS systems, for example. The simulation environment and building-block scripts developed in this chapter could then be used to allow user experience (UX) designers to develop the user-facing interface purely in simulation, which would permit huge time savings and automated interface testing.</p>
                <p id="ch14-idp37807040" data-type="indexterm" data-startref="ix_14-stockroom_bot-asciidoc0" smilref="Programming_Robots_with_ROS00018.smil#ch14-idp37807040">Up until this point in the book, we have been using existing robot platforms, such as the Turtlebot, Robonaut 2, and Fetch robots. However, the field of robotics is full of custom hardware! Fortunately, ROS was designed with custom hardware in mind, since it had multiple evolving robots in its user base from day one. In the next few chapters, we will demonstrate how to add custom robots into various components of the ROS ecosystem.</p>
              </div>
            </section>
          </div>
        </section>
      </level1>
      <level1 xmlns:epub="http://www.idpf.org/2007/ops" data-type="part" epub:type="part" data-pdf-bookmark="Part IV. Bringing Your Own Stuff into ROS" id="part04">
        <h1 id="h1_000315" smilref="Programming_Robots_with_ROS00018.smil#h1_000315">Part IV. Bringing Your Own Stuff into ROS</h1>
        <p id="p_000996" />
      </level1>
      <level1 id="ch15">
        <section xmlns:epub="http://www.idpf.org/2007/ops" data-type="chapter" epub:type="chapter" data-pdf-bookmark="Chapter 15. Your Own Sensors and Actuators" id="section_000147">
          <h1 id="h1_000316" smilref="Programming_Robots_with_ROS00018.smil#h1_000316">Chapter 15. Your Own Sensors and Actuators</h1>
          <div class="chapter" id="ch15-sensors_actuators">
            <p id="p_000997" smilref="Programming_Robots_with_ROS00018.smil#p_000997">Up until now, we've looked at how you can use ROS to interact with existing sensor and actuator hardware. Although ROS covers a wide variety of popular sensors and actuators, it doesn't cover all of them. As new hardware becomes available, we'll have to bring it into ROS, so that it can be used by the community.</p>
            <p id="p_000998" smilref="Programming_Robots_with_ROS00018.smil#p_000998">In this chapter, we'll see how you can integrate new sensors and actuators into the ROS ecosystem. This process is, for the most part, relatively painless; it involves writing ROS wrappers around the APIs that you're already using to access these devices. We'll start off with adding your own sensors.</p>
            <section data-type="sect1" data-pdf-bookmark="Adding Your Own Sensors" id="section_000148">
              <h1 id="h1_000317" smilref="Programming_Robots_with_ROS00018.smil#h1_000317">Adding Your Own Sensors</h1>
              <div class="sect1" id="ch15-sensors">
                <p id="ch15-ix_15-sensors_actuators-asciidoc0" data-type="indexterm" data-primary="sensor" data-secondary="adding your own" smilref="Programming_Robots_with_ROS00018.smil#ch15-ix_15-sensors_actuators-asciidoc0">How do you add a new sensor to ROS? We're going to assume that the sensor already has a Python API that you can call to get measurements from it, and that you know how to use this API. We're also going to assume that everything is wired up correctly and that you've been able to use this API to successfully read the sensor. Although this seems like common sense, you should always verify that things are working as expected before you start to wrap up a sensor in ROS. If you know that the sensor is working, then anything that goes wrong will be a problem with the ROS wrapper, which will make things easier to debug.</p>
                <section data-type="sect2" data-pdf-bookmark="A (Fake) Sensor" id="section_000149">
                  <h1 id="h1_000318" smilref="Programming_Robots_with_ROS00018.smil#h1_000318">A (Fake) Sensor</h1>
                  <div class="sect2" id="ch15-idp37816768">
                    <p class="keep-together" data-type="indexterm" data-primary="sensor" data-secondary="FakeSensor for simulation" id="ch15-idp37818176">
                      <span class="text" id="span_005822" smilref="Programming_Robots_with_ROS00018.smil#span_005822">For this chapter, we're going to use a fake sensor (called</span>
                      <code xml:space="preserve" id="code_001410" smilref="Programming_Robots_with_ROS00018.smil#code_001410">FakeSensor</code>
                      <span class="text" id="span_005823" smilref="Programming_Robots_with_ROS00018.smil#span_005823">) with a simple API. This Python class is going to simulate a real sensor, allowing us to show you how to wrap up a sensor in ROS without you having to buy any additional hardware. Although it's not a real sensor, it has the types of API commonly found on real sensors.</span>
                    </p>
                    <p id="p_000999">
                      <span class="text" id="span_005824" smilref="Programming_Robots_with_ROS00018.smil#span_005824">Our fake sensor brings up a simple graphical interface using the</span>
                      <code xml:space="preserve" id="code_001411" smilref="Programming_Robots_with_ROS00018.smil#code_001411">PySide</code>
                      <span class="text" id="span_005825" smilref="Programming_Robots_with_ROS00018.smil#span_005825">graphical library (which you need to have installed on your computer), shown in</span>
                      <a data-type="xref" href="#ch15-fake_sensor_gui" external="false" id="a_000241" smilref="Programming_Robots_with_ROS00018.smil#a_000241">Figure 15-1</a>
                      <span class="text" id="span_005826" smilref="Programming_Robots_with_ROS00018.smil#span_005826">with a dial in it. Turning the dial causes the sensor to output different measurements (integers from 0 to 99).</span>
                    </p>
                    <figure id="figure_000078">
                      <h1 id="h1_000319" smilref="Programming_Robots_with_ROS00018.smil#h1_000319">Figure 15-1. The graphical interface for our fake sensor</h1>
                      <div id="ch15-fake_sensor_gui" class="figure">
                        <img src="images/prwr_1501.jpg" alt="fake_sensor" id="img_000234" />
                      </div>
                    </figure>
                    <p id="p_001000">
                      <span class="text" id="span_005827" smilref="Programming_Robots_with_ROS00018.smil#span_005827">The measurements from this sensor can be accessed in two ways: by explicitly calling the class's</span>
                      <code xml:space="preserve" id="code_001412" smilref="Programming_Robots_with_ROS00018.smil#code_001412">value()</code>
                      <span class="text" id="span_005828" smilref="Programming_Robots_with_ROS00018.smil#span_005828">function, or by registering a callback that gets called whenever the values change. We'll see some code for both of these shortly.</span>
                    </p>
                  </div>
                </section>
                <section data-type="sect2" data-pdf-bookmark="Designing the ROS Wrapper" id="section_000150">
                  <h1 id="h1_000320" smilref="Programming_Robots_with_ROS00018.smil#h1_000320">Designing the ROS Wrapper</h1>
                  <div class="sect2" id="ch15-idp37825632">
                    <p id="ch15-idp37826880" data-type="indexterm" data-primary="sensor" data-secondary="wrapper design considerations" smilref="Programming_Robots_with_ROS00018.smil#ch15-idp37826880">Before we look at how to implement a ROS wrapper for our sensor, we need to make a couple of design decisions. The first is whether the ROS wrapper should stream the values of the sensor over a topic or only give measurements when asked, using a service or action call. This really depends on how you're going to use the data from the sensor, so we're going to cover both approaches here.</p>
                    <p id="p_001001">
                      <span class="text" id="span_005829" smilref="Programming_Robots_with_ROS00018.smil#span_005829">The second decision to make is how you're going to access data from the sensor. Some sensors will have only one way to get data from them, but some (like our</span>
                      <code xml:space="preserve" id="code_001413" smilref="Programming_Robots_with_ROS00018.smil#code_001413">FakeSensor</code>
                      <span class="text" id="span_005830" smilref="Programming_Robots_with_ROS00018.smil#span_005830">) will have multiple ways. Again, you should make this decision based on how you're going to use the sensor and how costly it is to make measurements using your sensor's API. Sometimes it may only make sense to implement one option, but in other cases you may want to implement more than one.</span>
                    </p>
                    <p data-type="indexterm" data-primary="Quaternion" id="ch15-ix_15-sensors_actuators-asciidoc1">
                      <span class="text" id="span_005831" smilref="Programming_Robots_with_ROS00018.smil#span_005831">Finally, you need to decide what type of ROS messages your wrapper will produce. As a general rule, you should try to use message types that are already defined in ROS, so that your newly wrapped sensor is as broadly useful as possible. For our</span>
                      <span class="keep-together" id="span_005832">
                        <code xml:space="preserve" id="code_001414" smilref="Programming_Robots_with_ROS00018.smil#code_001414">FakeSensor</code>
                      </span>
                      <span class="text" id="span_005833" smilref="Programming_Robots_with_ROS00018.smil#span_005833">, we've decided to interpret the measurements as angles and to use a</span>
                      <span class="keep-together" id="span_005834">
                        <a href="http://docs.ros.org/api/geometry_msgs/html/msg/Quaternion.html" external="true" id="a_000242">
                          <code xml:space="preserve" id="code_001415" smilref="Programming_Robots_with_ROS00018.smil#code_001415">Quaternion</code>
                        </a>
                      </span>
                      <span class="text" id="span_005835" smilref="Programming_Robots_with_ROS00018.smil#span_005835">from the</span>
                      <a href="http://wiki.ros.org/geometry_msgs?distro=indigo" external="true" id="a_000243">
                        <code xml:space="preserve" id="code_001416" smilref="Programming_Robots_with_ROS00018.smil#code_001416">geometry_msgs</code>
                      </a>
                      <span class="text" id="span_005836" smilref="Programming_Robots_with_ROS00018.smil#span_005836">package.</span>
                    </p>
                    <p id="p_001002">
                      <span class="text" id="span_005837" smilref="Programming_Robots_with_ROS00018.smil#span_005837">Why not have the wrapper just provide angles in radians and use</span>
                      <a href="http://docs.ros.org/api/std_msgs/html/msg/Float32.html" external="true" id="a_000244">
                        <code xml:space="preserve" id="code_001417" smilref="Programming_Robots_with_ROS00018.smil#code_001417">Float32</code>
                      </a>
                      <span class="text" id="span_005838" smilref="Programming_Robots_with_ROS00018.smil#span_005838">messages from</span>
                      <a href="http://wiki.ros.org/std_msgs?distro=indigo" external="true" id="a_000245">
                        <code xml:space="preserve" id="code_001418" smilref="Programming_Robots_with_ROS00018.smil#code_001418">std_msgs</code>
                      </a>
                      <span class="text" id="span_005839" smilref="Programming_Robots_with_ROS00018.smil#span_005839">? This would be simpler, since we wouldn't have to convert the output of the sensor (an integer from 0 to 99) into a quaternion. We could certainly do that, but it would be less useful, in the long run, than using a quaternion. Angles can be represented in a variety of ways, and ROS has settled on quaternions as the standard. If we have a sensor that returns angles, we should follow the standard and stick to quaternions, even if it's (slightly) more work or we don't think it's necessarily the right decision. The more of the ROS ecosystem (including code that we write ourselves) that sticks to the accepted conventions, the more interoperable everything will be, and the more likely it is that other people will use our code.</span>
                    </p>
                  </div>
                </section>
                <section data-type="sect2" data-pdf-bookmark="Design 1: Periodic Measurements over a Topic" id="section_000151">
                  <h1 id="h1_000321" smilref="Programming_Robots_with_ROS00018.smil#h1_000321">Design 1: Periodic Measurements over a Topic</h1>
                  <div class="sect2" id="ch15-idp36147008">
                    <p id="ch15-ix_15-sensors_actuators-asciidoc2" data-type="indexterm" data-primary="sensor" data-secondary="wrapper design for periodic measurements over a topic">
                      <span class="text" id="span_005840" smilref="Programming_Robots_with_ROS00018.smil#span_005840">The first wrapper that we will look at will send out measurements periodically over a topic.</span>
                      <a data-type="xref" href="#ch15-sensor_topic" external="false" id="a_000246" smilref="Programming_Robots_with_ROS00018.smil#a_000246">Example 15-1</a>
                      <span class="text" id="span_005841" smilref="Programming_Robots_with_ROS00018.smil#span_005841">shows the code that does this.</span>
                    </p>
                    <h1 id="h1_000322" smilref="Programming_Robots_with_ROS00018.smil#h1_000322">Example 15-1. topic_sensor.py</h1>
                    <div id="ch15-sensor_topic" data-type="example">
                      <p id="p_001003">
                        <code class="preserve-whitespace" xml:space="preserve" id="code_001419"><span class="text" id="span_005842" smilref="Programming_Robots_with_ROS00018.smil#span_005842">#!/usr/bin/env python</span>

<span class="text" id="span_005843" smilref="Programming_Robots_with_ROS00018.smil#span_005843">from</span> <span class="text" id="span_005844" smilref="Programming_Robots_with_ROS00018.smil#span_005844">math</span> <span class="text" id="span_005845" smilref="Programming_Robots_with_ROS00018.smil#span_005845">import</span> <span class="text" id="span_005846" smilref="Programming_Robots_with_ROS00018.smil#span_005846">pi</span>

<span class="text" id="span_005847" smilref="Programming_Robots_with_ROS00018.smil#span_005847">from</span> <span class="text" id="span_005848" smilref="Programming_Robots_with_ROS00018.smil#span_005848">fake_sensor</span> <span class="text" id="span_005849" smilref="Programming_Robots_with_ROS00018.smil#span_005849">import</span> <span class="text" id="span_005850" smilref="Programming_Robots_with_ROS00018.smil#span_005850">FakeSensor</span>  <a class="co" id="ch15-co_your_own_sensors_and_actuators_CO1-1" href="#ch15-callout_your_own_sensors_and_actuators_CO1-1" external="false"><img src="images/1.jpg" alt="1" id="img_000235" /></a>

<span class="text" id="span_005851" smilref="Programming_Robots_with_ROS00018.smil#span_005851">import</span> <span class="text" id="span_005852" smilref="Programming_Robots_with_ROS00018.smil#span_005852">rospy</span>
<span class="text" id="span_005853" smilref="Programming_Robots_with_ROS00018.smil#span_005853">import</span> <span class="text" id="span_005854" smilref="Programming_Robots_with_ROS00018.smil#span_005854">tf</span>

<span class="text" id="span_005855" smilref="Programming_Robots_with_ROS00018.smil#span_005855">from</span> <span class="text" id="span_005856" smilref="Programming_Robots_with_ROS00018.smil#span_005856">geometry_msgs.msg</span> <span class="text" id="span_005857" smilref="Programming_Robots_with_ROS00018.smil#span_005857">import</span> <span class="text" id="span_005858" smilref="Programming_Robots_with_ROS00018.smil#span_005858">Quaternion</span>  <a class="co" id="ch15-co_your_own_sensors_and_actuators_CO1-2" href="#ch15-callout_your_own_sensors_and_actuators_CO1-2" external="false"><img src="images/2.jpg" alt="2" id="img_000236" /></a>


<span class="text" id="span_005859" smilref="Programming_Robots_with_ROS00018.smil#span_005859">def</span> <span class="text" id="span_005860" smilref="Programming_Robots_with_ROS00018.smil#span_005860">make_quaternion</span><span class="text" id="span_005861" smilref="Programming_Robots_with_ROS00018.smil#span_005861">(</span><span class="text" id="span_005862" smilref="Programming_Robots_with_ROS00018.smil#span_005862">angle</span><span class="text" id="span_005863" smilref="Programming_Robots_with_ROS00018.smil#span_005863">)</span><span class="text" id="span_005864" smilref="Programming_Robots_with_ROS00018.smil#span_005864">:</span>  <a class="co" id="ch15-co_your_own_sensors_and_actuators_CO1-3" href="#ch15-callout_your_own_sensors_and_actuators_CO1-3" external="false"><img src="images/3.jpg" alt="3" id="img_000237" /></a>
    <span class="text" id="span_005865" smilref="Programming_Robots_with_ROS00018.smil#span_005865">q</span> <span class="text" id="span_005866" smilref="Programming_Robots_with_ROS00018.smil#span_005866">=</span> <span class="text" id="span_005867" smilref="Programming_Robots_with_ROS00018.smil#span_005867">tf</span><span class="text" id="span_005868" smilref="Programming_Robots_with_ROS00018.smil#span_005868">.</span><span class="text" id="span_005869" smilref="Programming_Robots_with_ROS00018.smil#span_005869">transformations</span><span class="text" id="span_005870" smilref="Programming_Robots_with_ROS00018.smil#span_005870">.</span><span class="text" id="span_005871" smilref="Programming_Robots_with_ROS00018.smil#span_005871">quaternion_from_euler</span><span class="text" id="span_005872" smilref="Programming_Robots_with_ROS00018.smil#span_005872">(</span><span class="text" id="span_005873" smilref="Programming_Robots_with_ROS00018.smil#span_005873">0</span><span class="text" id="span_005874" smilref="Programming_Robots_with_ROS00018.smil#span_005874">,</span> <span class="text" id="span_005875" smilref="Programming_Robots_with_ROS00018.smil#span_005875">0</span><span class="text" id="span_005876" smilref="Programming_Robots_with_ROS00018.smil#span_005876">,</span> <span class="text" id="span_005877" smilref="Programming_Robots_with_ROS00018.smil#span_005877">angle</span><span class="text" id="span_005878" smilref="Programming_Robots_with_ROS00018.smil#span_005878">)</span>
    <span class="text" id="span_005879" smilref="Programming_Robots_with_ROS00018.smil#span_005879">return</span> <span class="text" id="span_005880" smilref="Programming_Robots_with_ROS00018.smil#span_005880">Quaternion</span><span class="text" id="span_005881" smilref="Programming_Robots_with_ROS00018.smil#span_005881">(</span><span class="text" id="span_005882" smilref="Programming_Robots_with_ROS00018.smil#span_005882">*</span><span class="text" id="span_005883" smilref="Programming_Robots_with_ROS00018.smil#span_005883">q</span><span class="text" id="span_005884" smilref="Programming_Robots_with_ROS00018.smil#span_005884">)</span>


<span class="text" id="span_005885" smilref="Programming_Robots_with_ROS00018.smil#span_005885">if</span> <span class="text" id="span_005886" smilref="Programming_Robots_with_ROS00018.smil#span_005886">__name__</span> <span class="text" id="span_005887" smilref="Programming_Robots_with_ROS00018.smil#span_005887">==</span> <span class="text" id="span_005888" smilref="Programming_Robots_with_ROS00018.smil#span_005888">'</span><span class="text" id="span_005889" smilref="Programming_Robots_with_ROS00018.smil#span_005889">__main__</span><span class="text" id="span_005890" smilref="Programming_Robots_with_ROS00018.smil#span_005890">'</span><span class="text" id="span_005891" smilref="Programming_Robots_with_ROS00018.smil#span_005891">:</span>
    <span class="text" id="span_005892" smilref="Programming_Robots_with_ROS00018.smil#span_005892">sensor</span> <span class="text" id="span_005893" smilref="Programming_Robots_with_ROS00018.smil#span_005893">=</span> <span class="text" id="span_005894" smilref="Programming_Robots_with_ROS00018.smil#span_005894">FakeSensor</span><span class="text" id="span_005895" smilref="Programming_Robots_with_ROS00018.smil#span_005895">(</span><span class="text" id="span_005896" smilref="Programming_Robots_with_ROS00018.smil#span_005896">)</span>  <a class="co" id="ch15-co_your_own_sensors_and_actuators_CO1-4" href="#ch15-callout_your_own_sensors_and_actuators_CO1-4" external="false"><img src="images/4.jpg" alt="4" id="img_000238" /></a>

    <span class="text" id="span_005897" smilref="Programming_Robots_with_ROS00018.smil#span_005897">rospy</span><span class="text" id="span_005898" smilref="Programming_Robots_with_ROS00018.smil#span_005898">.</span><span class="text" id="span_005899" smilref="Programming_Robots_with_ROS00018.smil#span_005899">init_node</span><span class="text" id="span_005900" smilref="Programming_Robots_with_ROS00018.smil#span_005900">(</span><span class="text" id="span_005901" smilref="Programming_Robots_with_ROS00018.smil#span_005901">'</span><span class="text" id="span_005902" smilref="Programming_Robots_with_ROS00018.smil#span_005902">fake_sensor</span><span class="text" id="span_005903" smilref="Programming_Robots_with_ROS00018.smil#span_005903">'</span><span class="text" id="span_005904" smilref="Programming_Robots_with_ROS00018.smil#span_005904">)</span>

    <span class="text" id="span_005905" smilref="Programming_Robots_with_ROS00018.smil#span_005905">pub</span> <span class="text" id="span_005906" smilref="Programming_Robots_with_ROS00018.smil#span_005906">=</span> <span class="text" id="span_005907" smilref="Programming_Robots_with_ROS00018.smil#span_005907">rospy</span><span class="text" id="span_005908" smilref="Programming_Robots_with_ROS00018.smil#span_005908">.</span><span class="text" id="span_005909" smilref="Programming_Robots_with_ROS00018.smil#span_005909">Publisher</span><span class="text" id="span_005910" smilref="Programming_Robots_with_ROS00018.smil#span_005910">(</span><span class="text" id="span_005911" smilref="Programming_Robots_with_ROS00018.smil#span_005911">'</span><span class="text" id="span_005912" smilref="Programming_Robots_with_ROS00018.smil#span_005912">angle</span><span class="text" id="span_005913" smilref="Programming_Robots_with_ROS00018.smil#span_005913">'</span><span class="text" id="span_005914" smilref="Programming_Robots_with_ROS00018.smil#span_005914">,</span> <span class="text" id="span_005915" smilref="Programming_Robots_with_ROS00018.smil#span_005915">Quaternion</span><span class="text" id="span_005916" smilref="Programming_Robots_with_ROS00018.smil#span_005916">,</span> <span class="text" id="span_005917" smilref="Programming_Robots_with_ROS00018.smil#span_005917">queue_size</span><span class="text" id="span_005918" smilref="Programming_Robots_with_ROS00018.smil#span_005918">=</span><span class="text" id="span_005919" smilref="Programming_Robots_with_ROS00018.smil#span_005919">10</span><span class="text" id="span_005920" smilref="Programming_Robots_with_ROS00018.smil#span_005920">)</span>

    <span class="text" id="span_005921" smilref="Programming_Robots_with_ROS00018.smil#span_005921">rate</span> <span class="text" id="span_005922" smilref="Programming_Robots_with_ROS00018.smil#span_005922">=</span> <span class="text" id="span_005923" smilref="Programming_Robots_with_ROS00018.smil#span_005923">rospy</span><span class="text" id="span_005924" smilref="Programming_Robots_with_ROS00018.smil#span_005924">.</span><span class="text" id="span_005925" smilref="Programming_Robots_with_ROS00018.smil#span_005925">Rate</span><span class="text" id="span_005926" smilref="Programming_Robots_with_ROS00018.smil#span_005926">(</span><span class="text" id="span_005927" smilref="Programming_Robots_with_ROS00018.smil#span_005927">10.0</span><span class="text" id="span_005928" smilref="Programming_Robots_with_ROS00018.smil#span_005928">)</span>  <a class="co" id="ch15-co_your_own_sensors_and_actuators_CO1-5" href="#ch15-callout_your_own_sensors_and_actuators_CO1-5" external="false"><img src="images/5.jpg" alt="5" id="img_000239" /></a>
    <span class="text" id="span_005929" smilref="Programming_Robots_with_ROS00018.smil#span_005929">while</span> <span class="text" id="span_005930" smilref="Programming_Robots_with_ROS00018.smil#span_005930">not</span> <span class="text" id="span_005931" smilref="Programming_Robots_with_ROS00018.smil#span_005931">rospy</span><span class="text" id="span_005932" smilref="Programming_Robots_with_ROS00018.smil#span_005932">.</span><span class="text" id="span_005933" smilref="Programming_Robots_with_ROS00018.smil#span_005933">is_shutdown</span><span class="text" id="span_005934" smilref="Programming_Robots_with_ROS00018.smil#span_005934">(</span><span class="text" id="span_005935" smilref="Programming_Robots_with_ROS00018.smil#span_005935">)</span><span class="text" id="span_005936" smilref="Programming_Robots_with_ROS00018.smil#span_005936">:</span>  <a class="co" id="ch15-co_your_own_sensors_and_actuators_CO1-6" href="#ch15-callout_your_own_sensors_and_actuators_CO1-6" external="false"><img src="images/6.jpg" alt="6" id="img_000240" /></a>
        <span class="text" id="span_005937" smilref="Programming_Robots_with_ROS00018.smil#span_005937">angle</span> <span class="text" id="span_005938" smilref="Programming_Robots_with_ROS00018.smil#span_005938">=</span> <span class="text" id="span_005939" smilref="Programming_Robots_with_ROS00018.smil#span_005939">sensor</span><span class="text" id="span_005940" smilref="Programming_Robots_with_ROS00018.smil#span_005940">.</span><span class="text" id="span_005941" smilref="Programming_Robots_with_ROS00018.smil#span_005941">value</span><span class="text" id="span_005942" smilref="Programming_Robots_with_ROS00018.smil#span_005942">(</span><span class="text" id="span_005943" smilref="Programming_Robots_with_ROS00018.smil#span_005943">)</span> <span class="text" id="span_005944" smilref="Programming_Robots_with_ROS00018.smil#span_005944">*</span> <span class="text" id="span_005945" smilref="Programming_Robots_with_ROS00018.smil#span_005945">2</span> <span class="text" id="span_005946" smilref="Programming_Robots_with_ROS00018.smil#span_005946">*</span> <span class="text" id="span_005947" smilref="Programming_Robots_with_ROS00018.smil#span_005947">pi</span> <span class="text" id="span_005948" smilref="Programming_Robots_with_ROS00018.smil#span_005948">/</span> <span class="text" id="span_005949" smilref="Programming_Robots_with_ROS00018.smil#span_005949">100.0</span>

        <span class="text" id="span_005950" smilref="Programming_Robots_with_ROS00018.smil#span_005950">q</span> <span class="text" id="span_005951" smilref="Programming_Robots_with_ROS00018.smil#span_005951">=</span> <span class="text" id="span_005952" smilref="Programming_Robots_with_ROS00018.smil#span_005952">make_quaternion</span><span class="text" id="span_005953" smilref="Programming_Robots_with_ROS00018.smil#span_005953">(</span><span class="text" id="span_005954" smilref="Programming_Robots_with_ROS00018.smil#span_005954">angle</span><span class="text" id="span_005955" smilref="Programming_Robots_with_ROS00018.smil#span_005955">)</span>

        <span class="text" id="span_005956" smilref="Programming_Robots_with_ROS00018.smil#span_005956">pub</span><span class="text" id="span_005957" smilref="Programming_Robots_with_ROS00018.smil#span_005957">.</span><span class="text" id="span_005958" smilref="Programming_Robots_with_ROS00018.smil#span_005958">publish</span><span class="text" id="span_005959" smilref="Programming_Robots_with_ROS00018.smil#span_005959">(</span><span class="text" id="span_005960" smilref="Programming_Robots_with_ROS00018.smil#span_005960">q</span><span class="text" id="span_005961" smilref="Programming_Robots_with_ROS00018.smil#span_005961">)</span>

        <span class="text" id="span_005962" smilref="Programming_Robots_with_ROS00018.smil#span_005962">rate</span><span class="text" id="span_005963" smilref="Programming_Robots_with_ROS00018.smil#span_005963">.</span><span class="text" id="span_005964" smilref="Programming_Robots_with_ROS00018.smil#span_005964">sleep</span><span class="text" id="span_005965" smilref="Programming_Robots_with_ROS00018.smil#span_005965">(</span><span class="text" id="span_005966" smilref="Programming_Robots_with_ROS00018.smil#span_005966">)</span></code>
                      </p>
                    </div>
                    <dl class="calloutlist" id="dl_000018">
                      <dt id="dt_000088">
                        <a class="co" id="ch15-callout_your_own_sensors_and_actuators_CO1-1" href="#ch15-co_your_own_sensors_and_actuators_CO1-1" external="false">
                          <img src="images/1.jpg" alt="1" id="img_000241" />
                        </a>
                      </dt>
                      <dd id="dd_000088">
                        <p id="p_001004" smilref="Programming_Robots_with_ROS00018.smil#p_001004">Import the code to access the sensor measurements.</p>
                      </dd>
                      <dt id="dt_000089">
                        <a class="co" id="ch15-callout_your_own_sensors_and_actuators_CO1-2" href="#ch15-co_your_own_sensors_and_actuators_CO1-2" external="false">
                          <img src="images/2.jpg" alt="2" id="img_000242" />
                        </a>
                      </dt>
                      <dd id="dd_000089">
                        <p id="p_001005">
                          <span class="text" id="span_005967" smilref="Programming_Robots_with_ROS00018.smil#span_005967">Since we're using a</span>
                          <code xml:space="preserve" id="code_001420" smilref="Programming_Robots_with_ROS00018.smil#code_001420">Quaternion</code>
                          <span class="text" id="span_005968" smilref="Programming_Robots_with_ROS00018.smil#span_005968">, we need to import that, too.</span>
                        </p>
                      </dd>
                      <dt id="dt_000090">
                        <a class="co" id="ch15-callout_your_own_sensors_and_actuators_CO1-3" href="#ch15-co_your_own_sensors_and_actuators_CO1-3" external="false">
                          <img src="images/3.jpg" alt="3" id="img_000243" />
                        </a>
                      </dt>
                      <dd id="dd_000090">
                        <p id="p_001006">
                          <span class="text" id="span_005969" smilref="Programming_Robots_with_ROS00018.smil#span_005969">A convenience function to convert from yaw (in radians) to a</span>
                          <code xml:space="preserve" id="code_001421" smilref="Programming_Robots_with_ROS00018.smil#code_001421">Quaternion</code>
                          <span class="text" id="span_005970" smilref="Programming_Robots_with_ROS00018.smil#span_005970">.</span>
                        </p>
                      </dd>
                      <dt id="dt_000091">
                        <a class="co" id="ch15-callout_your_own_sensors_and_actuators_CO1-4" href="#ch15-co_your_own_sensors_and_actuators_CO1-4" external="false">
                          <img src="images/4.jpg" alt="4" id="img_000244" />
                        </a>
                      </dt>
                      <dd id="dd_000091">
                        <p id="p_001007" smilref="Programming_Robots_with_ROS00018.smil#p_001007">Set up access to the sensor.</p>
                      </dd>
                      <dt id="dt_000092">
                        <a class="co" id="ch15-callout_your_own_sensors_and_actuators_CO1-5" href="#ch15-co_your_own_sensors_and_actuators_CO1-5" external="false">
                          <img src="images/5.jpg" alt="5" id="img_000245" />
                        </a>
                      </dt>
                      <dd id="dd_000092">
                        <p id="p_001008" smilref="Programming_Robots_with_ROS00018.smil#p_001008">Set a publishing rate.</p>
                      </dd>
                      <dt id="dt_000093">
                        <a class="co" id="ch15-callout_your_own_sensors_and_actuators_CO1-6" href="#ch15-co_your_own_sensors_and_actuators_CO1-6" external="false">
                          <img src="images/6.jpg" alt="6" id="img_000246" />
                        </a>
                      </dt>
                      <dd id="dd_000093">
                        <p id="p_001009" smilref="Programming_Robots_with_ROS00018.smil#p_001009">Loop until the node is shut down.</p>
                      </dd>
                    </dl>
                    <p id="p_001010">
                      <span class="text" id="span_005971" smilref="Programming_Robots_with_ROS00018.smil#span_005971">The interesting part of the core is the loop where we read the sensor, translate the returned measurement into something useful, and then publish it out on a topic. In this example, we take the measurement, an integer between 0 and 99, and turn that into an angle in radians. We then take that angle--which we're going to interpret as a rotation around the z-axis (a yaw)--and turn that into a</span>
                      <code xml:space="preserve" id="code_001422" smilref="Programming_Robots_with_ROS00018.smil#code_001422">Quaternion</code>
                      <span class="text" id="span_005972" smilref="Programming_Robots_with_ROS00018.smil#span_005972">. We've encapsulated this translation into a helper function to make things cleaner. Then, we publish the calculated</span>
                      <code xml:space="preserve" id="code_001423" smilref="Programming_Robots_with_ROS00018.smil#code_001423">Quaternion</code>
                      <span class="text" id="span_005973" smilref="Programming_Robots_with_ROS00018.smil#span_005973">on the topic and sleep for a while.</span>
                    </p>
                    <p id="ch15-idp37457184" data-type="indexterm" data-startref="ix_15-sensors_actuators-asciidoc4" smilref="Programming_Robots_with_ROS00018.smil#ch15-idp37457184">Something new here is the quaternion translation code. Quaternions are a representation of rotation that uses four real-valued numbers. Intuitively, these correspond to a vector (three values) and a rotation around that vector (fourth value). There are several ways to represent quaternions, and it's always best to use the built-in functions in ROS to do the translation. If you do it by hand, you might get the wrong representation by accident and create a bug that's hard to find.</p>
                    <p id="p_001011">
                      <span class="text" id="span_005974" smilref="Programming_Robots_with_ROS00018.smil#span_005974">We can verify that the node is publishing what we expect it to using</span>
                      <code xml:space="preserve" id="code_001424" smilref="Programming_Robots_with_ROS00018.smil#code_001424">rostopic</code>
                      <span class="text" id="span_005975" smilref="Programming_Robots_with_ROS00018.smil#span_005975">:</span>
                    </p>
                    <p id="p_001012">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_001425"><span class="text" id="span_005976" smilref="Programming_Robots_with_ROS00018.smil#span_005976">
user@hostname$ </span><strong id="strong_000166" smilref="Programming_Robots_with_ROS00018.smil#strong_000166">rostopic list</strong><span class="text" id="span_005977" smilref="Programming_Robots_with_ROS00018.smil#span_005977">
/angle
/rosout
/rosout_agg

user@hostname$ </span><strong id="strong_000167" smilref="Programming_Robots_with_ROS00018.smil#strong_000167">rostopic hz angle</strong><span class="text" id="span_005978" smilref="Programming_Robots_with_ROS00018.smil#span_005978">
average rate: 9.999
	min: 0.100s max: 0.100s std dev: 0.00006s window: 10
average rate: 10.000
	min: 0.100s max: 0.100s std dev: 0.00005s window: 20
average rate: 10.000
	min: 0.100s max: 0.100s std dev: 0.00007s window: 30
average rate: 10.000
	min: 0.100s max: 0.100s std dev: 0.00006s window: 40
average rate: 10.000
	min: 0.100s max: 0.100s std dev: 0.00007s window: 46

user@hostname$ </span><strong id="strong_000168" smilref="Programming_Robots_with_ROS00018.smil#strong_000168">rostopic echo -n 1 angle</strong><span class="text" id="span_005979" smilref="Programming_Robots_with_ROS00018.smil#span_005979">
x: 0.0
y: 0.0
z: 0.0
w: 1.0
---
</span></code>
                    </p>
                    <p id="p_001013">
                      <span class="text" id="span_005980" smilref="Programming_Robots_with_ROS00018.smil#span_005980">That looks about right. We see the</span>
                      <code xml:space="preserve" id="code_001426" smilref="Programming_Robots_with_ROS00018.smil#code_001426">angle</code>
                      <span class="text" id="span_005981" smilref="Programming_Robots_with_ROS00018.smil#span_005981">topic with</span>
                      <code xml:space="preserve" id="code_001427" smilref="Programming_Robots_with_ROS00018.smil#code_001427">rostopic
list</code>
                      <span class="text" id="span_005982" smilref="Programming_Robots_with_ROS00018.smil#span_005982">, and it seems to be publishing at the right rate, according to</span>
                      <code xml:space="preserve" id="code_001428" smilref="Programming_Robots_with_ROS00018.smil#code_001428">rostopic hz</code>
                      <span class="text" id="span_005983" smilref="Programming_Robots_with_ROS00018.smil#span_005983">. Finally,</span>
                      <code xml:space="preserve" id="code_001429" smilref="Programming_Robots_with_ROS00018.smil#code_001429">rostopic echo</code>
                      <span class="text" id="span_005984" smilref="Programming_Robots_with_ROS00018.smil#span_005984">shows that the data is reasonable. Note that we stopped</span>
                      <code xml:space="preserve" id="code_001430" smilref="Programming_Robots_with_ROS00018.smil#code_001430">rostopic hz</code>
                      <span class="text" id="span_005985" smilref="Programming_Robots_with_ROS00018.smil#span_005985">with a Ctrl-C; otherwise, it would run forever.</span>
                    </p>
                    <p id="p_001014" smilref="Programming_Robots_with_ROS00018.smil#p_001014">So, it's as simple as that: read the sensor, translate the readings into something useful, publish them out, wait a bit, and repeat. Now, we're going to look at what to do for sensors that stream their information to you.</p>
                    <h1 id="h1_000323" smilref="Programming_Robots_with_ROS00018.smil#h1_000323">Tip</h1>
                    <div data-type="tip" id="div_000032">
                      <p data-type="indexterm" data-primary="Header" id="ch15-idp37239472" data-startref="ix_15-sensors_actuators-asciidoc1">
                        <span class="text" id="span_005986" smilref="Programming_Robots_with_ROS00018.smil#span_005986">When publishing data from a sensor, it's often a good idea to use a ROS message type with a</span>
                        <code xml:space="preserve" id="code_001431" smilref="Programming_Robots_with_ROS00018.smil#code_001431">Header</code>
                        <span class="text" id="span_005987" smilref="Programming_Robots_with_ROS00018.smil#span_005987">, so that you can add a timestamp to the data that you send. While this isn't strictly necessary, it lets you coordinate data from multiple sensors in time (by correlating their timestamps using the</span>
                        <a href="http://wiki.ros.org/message_filters?distro=indigo" external="true" id="a_000247">
                          <code xml:space="preserve" id="code_001432" smilref="Programming_Robots_with_ROS00018.smil#code_001432">message_filters</code>
                          <span class="text" id="span_005988" smilref="Programming_Robots_with_ROS00018.smil#span_005988">package</span>
                        </a>
                        <span class="text" id="span_005989" smilref="Programming_Robots_with_ROS00018.smil#span_005989">).</span>
                      </p>
                    </div>
                  </div>
                </section>
                <section data-type="sect2" data-pdf-bookmark="Design 2: Streaming Measurements over a Topic" id="section_000152">
                  <h1 id="h1_000324" smilref="Programming_Robots_with_ROS00019.smil#h1_000324">Design 2: Streaming Measurements over a Topic</h1>
                  <div class="sect2" id="ch15-idp36147600">
                    <p id="ch15-idp37475904" data-type="indexterm" data-primary="sensor" data-secondary="wrapper design for streaming measurements over a topic">
                      <span class="text" id="span_005990" smilref="Programming_Robots_with_ROS00019.smil#span_005990">Now, let's assume that the sensor returns measurements automatically, in a stream, using a callback mechanism. The ROS wrapper code in this case is very similar to that shown in</span>
                      <a data-type="xref" href="#ch15-sensor_topic" external="false" id="a_000248" smilref="Programming_Robots_with_ROS00019.smil#a_000248">Example 15-1</a>
                      <span class="text" id="span_005991" smilref="Programming_Robots_with_ROS00019.smil#span_005991">, except that we put all of the translation and publishing code in the callback that we pass to the sensor.</span>
                      <a data-type="xref" href="#ch15-sensor_topic_2" external="false" id="a_000249" smilref="Programming_Robots_with_ROS00019.smil#a_000249">Example 15-2</a>
                      <span class="text" id="span_005992" smilref="Programming_Robots_with_ROS00019.smil#span_005992">shows the details.</span>
                    </p>
                    <h1 id="h1_000325" smilref="Programming_Robots_with_ROS00019.smil#h1_000325">Example 15-2. topic_sensor2.py</h1>
                    <div id="ch15-sensor_topic_2" data-type="example">
                      <p id="p_001015">
                        <code class="preserve-whitespace" xml:space="preserve" id="code_001433" smilref="Programming_Robots_with_ROS00019.smil#code_001433">#!/usr/bin/env python

from math import pi

from fake_sensor import FakeSensor

import rospy
import tf

from geometry_msgs.msg import Quaternion


def make_quaternion(angle):
    q = tf.transformations.quaternion_from_euler(0, 0, angle)
    return Quaternion(*q)

def publish_value(value):
    angle = value * 2 * pi / 100.0
    q = make_quaternion(angle)
    pub.publish(q)


if __name__ == '__main__':
    rospy.init_node('fake_sensor')

    pub = rospy.Publisher('angle', Quaternion, queue_size=10)

    sensor = FakeSensor()
    sensor.register_callback(publish_value)</code>
                      </p>
                    </div>
                    <p id="p_001016">
                      <span class="text" id="span_005993" smilref="Programming_Robots_with_ROS00019.smil#span_005993">The key difference in this code is that we register a callback function,</span>
                      <code xml:space="preserve" id="code_001434" smilref="Programming_Robots_with_ROS00019.smil#code_001434">publish_value()</code>
                      <span class="text" id="span_005994" smilref="Programming_Robots_with_ROS00019.smil#span_005994">with the sensor handler to deal with the measurements returned by the sensor. This is a common design pattern with sensors and one that is widely used in ROS. In the callback function, which is passed the measurement value, we again do the translation, build a</span>
                      <code xml:space="preserve" id="code_001435" smilref="Programming_Robots_with_ROS00019.smil#code_001435">Quaternion</code>
                      <span class="text" id="span_005995" smilref="Programming_Robots_with_ROS00019.smil#span_005995">, and publish it out to the topic. In this case, we will only publish at the rate the sensor produces measurements. If this only happens infrequently, and getting an old measurement is better than waiting (potentially a long time) for a new one, then you might consider making this a latched topic (see</span>
                      <a data-type="xref" href="#ch03-latched_topics" external="false" id="a_000250" smilref="Programming_Robots_with_ROS00019.smil#a_000250">"Latched Topics"</a>
                      <span class="text" id="span_005996" smilref="Programming_Robots_with_ROS00019.smil#span_005996">).</span>
                    </p>
                  </div>
                </section>
                <section data-type="sect2" data-pdf-bookmark="Design 3: Streaming Measurements Published at a Fixed Rate" id="section_000153">
                  <h1 id="h1_000326" smilref="Programming_Robots_with_ROS00019.smil#h1_000326">Design 3: Streaming Measurements Published at a Fixed Rate</h1>
                  <div class="sect2" id="ch15-design_3_streaming_measure">
                    <p id="p_001017">
                      <span class="text" id="span_005997" smilref="Programming_Robots_with_ROS00019.smil#span_005997">Suppose your sensor API uses callbacks and delivers measurements every now and then, but you want to publish these measurements at a fixed rate. This is a combination of the first two designs and is illustrated by</span>
                      <a data-type="xref" href="#ch15-sensor_topic_3" external="false" id="a_000251" smilref="Programming_Robots_with_ROS00019.smil#a_000251">Example 15-3</a>
                      <span class="text" id="span_005998" smilref="Programming_Robots_with_ROS00019.smil#span_005998">.</span>
                    </p>
                    <h1 id="h1_000327" smilref="Programming_Robots_with_ROS00019.smil#h1_000327">Example 15-3. topic_sensor3.py</h1>
                    <div id="ch15-sensor_topic_3" data-type="example">
                      <p id="p_001018">
                        <code class="preserve-whitespace" xml:space="preserve" id="code_001436"><span class="text" id="span_005999" smilref="Programming_Robots_with_ROS00019.smil#span_005999">#!/usr/bin/env python</span>

<span class="text" id="span_006000" smilref="Programming_Robots_with_ROS00019.smil#span_006000">from</span> <span class="text" id="span_006001" smilref="Programming_Robots_with_ROS00019.smil#span_006001">math</span> <span class="text" id="span_006002" smilref="Programming_Robots_with_ROS00019.smil#span_006002">import</span> <span class="text" id="span_006003" smilref="Programming_Robots_with_ROS00019.smil#span_006003">pi</span>
<span class="text" id="span_006004" smilref="Programming_Robots_with_ROS00019.smil#span_006004">from</span> <span class="text" id="span_006005" smilref="Programming_Robots_with_ROS00019.smil#span_006005">threading</span> <span class="text" id="span_006006" smilref="Programming_Robots_with_ROS00019.smil#span_006006">import</span> <span class="text" id="span_006007" smilref="Programming_Robots_with_ROS00019.smil#span_006007">Lock</span>

<span class="text" id="span_006008" smilref="Programming_Robots_with_ROS00019.smil#span_006008">from</span> <span class="text" id="span_006009" smilref="Programming_Robots_with_ROS00019.smil#span_006009">fake_sensor</span> <span class="text" id="span_006010" smilref="Programming_Robots_with_ROS00019.smil#span_006010">import</span> <span class="text" id="span_006011" smilref="Programming_Robots_with_ROS00019.smil#span_006011">FakeSensor</span>

<span class="text" id="span_006012" smilref="Programming_Robots_with_ROS00019.smil#span_006012">import</span> <span class="text" id="span_006013" smilref="Programming_Robots_with_ROS00019.smil#span_006013">rospy</span>
<span class="text" id="span_006014" smilref="Programming_Robots_with_ROS00019.smil#span_006014">import</span> <span class="text" id="span_006015" smilref="Programming_Robots_with_ROS00019.smil#span_006015">tf</span>

<span class="text" id="span_006016" smilref="Programming_Robots_with_ROS00019.smil#span_006016">from</span> <span class="text" id="span_006017" smilref="Programming_Robots_with_ROS00019.smil#span_006017">geometry_msgs.msg</span> <span class="text" id="span_006018" smilref="Programming_Robots_with_ROS00019.smil#span_006018">import</span> <span class="text" id="span_006019" smilref="Programming_Robots_with_ROS00019.smil#span_006019">Quaternion</span>


<span class="text" id="span_006020" smilref="Programming_Robots_with_ROS00019.smil#span_006020">def</span> <span class="text" id="span_006021" smilref="Programming_Robots_with_ROS00019.smil#span_006021">make_quaternion</span><span class="text" id="span_006022" smilref="Programming_Robots_with_ROS00019.smil#span_006022">(</span><span class="text" id="span_006023" smilref="Programming_Robots_with_ROS00019.smil#span_006023">angle</span><span class="text" id="span_006024" smilref="Programming_Robots_with_ROS00019.smil#span_006024">)</span><span class="text" id="span_006025" smilref="Programming_Robots_with_ROS00019.smil#span_006025">:</span>
    <span class="text" id="span_006026" smilref="Programming_Robots_with_ROS00019.smil#span_006026">q</span> <span class="text" id="span_006027" smilref="Programming_Robots_with_ROS00019.smil#span_006027">=</span> <span class="text" id="span_006028" smilref="Programming_Robots_with_ROS00019.smil#span_006028">tf</span><span class="text" id="span_006029" smilref="Programming_Robots_with_ROS00019.smil#span_006029">.</span><span class="text" id="span_006030" smilref="Programming_Robots_with_ROS00019.smil#span_006030">transformations</span><span class="text" id="span_006031" smilref="Programming_Robots_with_ROS00019.smil#span_006031">.</span><span class="text" id="span_006032" smilref="Programming_Robots_with_ROS00019.smil#span_006032">quaternion_from_euler</span><span class="text" id="span_006033" smilref="Programming_Robots_with_ROS00019.smil#span_006033">(</span><span class="text" id="span_006034" smilref="Programming_Robots_with_ROS00019.smil#span_006034">0</span><span class="text" id="span_006035" smilref="Programming_Robots_with_ROS00019.smil#span_006035">,</span> <span class="text" id="span_006036" smilref="Programming_Robots_with_ROS00019.smil#span_006036">0</span><span class="text" id="span_006037" smilref="Programming_Robots_with_ROS00019.smil#span_006037">,</span> <span class="text" id="span_006038" smilref="Programming_Robots_with_ROS00019.smil#span_006038">angle</span><span class="text" id="span_006039" smilref="Programming_Robots_with_ROS00019.smil#span_006039">)</span>
    <span class="text" id="span_006040" smilref="Programming_Robots_with_ROS00019.smil#span_006040">return</span> <span class="text" id="span_006041" smilref="Programming_Robots_with_ROS00019.smil#span_006041">Quaternion</span><span class="text" id="span_006042" smilref="Programming_Robots_with_ROS00019.smil#span_006042">(</span><span class="text" id="span_006043" smilref="Programming_Robots_with_ROS00019.smil#span_006043">*</span><span class="text" id="span_006044" smilref="Programming_Robots_with_ROS00019.smil#span_006044">q</span><span class="text" id="span_006045" smilref="Programming_Robots_with_ROS00019.smil#span_006045">)</span>

<span class="text" id="span_006046" smilref="Programming_Robots_with_ROS00019.smil#span_006046">def</span> <span class="text" id="span_006047" smilref="Programming_Robots_with_ROS00019.smil#span_006047">save_value</span><span class="text" id="span_006048" smilref="Programming_Robots_with_ROS00019.smil#span_006048">(</span><span class="text" id="span_006049" smilref="Programming_Robots_with_ROS00019.smil#span_006049">value</span><span class="text" id="span_006050" smilref="Programming_Robots_with_ROS00019.smil#span_006050">)</span><span class="text" id="span_006051" smilref="Programming_Robots_with_ROS00019.smil#span_006051">:</span>
    <span class="text" id="span_006052" smilref="Programming_Robots_with_ROS00019.smil#span_006052">with</span> <span class="text" id="span_006053" smilref="Programming_Robots_with_ROS00019.smil#span_006053">lock</span><span class="text" id="span_006054" smilref="Programming_Robots_with_ROS00019.smil#span_006054">:</span> <a class="co" id="ch15-co_your_own_sensors_and_actuators_CO2-1" href="#ch15-callout_your_own_sensors_and_actuators_CO2-1" external="false"><img src="images/1.jpg" alt="1" id="img_000247" /></a>
        <span class="text" id="span_006055" smilref="Programming_Robots_with_ROS00019.smil#span_006055">angle</span> <span class="text" id="span_006056" smilref="Programming_Robots_with_ROS00019.smil#span_006056">=</span> <span class="text" id="span_006057" smilref="Programming_Robots_with_ROS00019.smil#span_006057">value</span> <span class="text" id="span_006058" smilref="Programming_Robots_with_ROS00019.smil#span_006058">*</span> <span class="text" id="span_006059" smilref="Programming_Robots_with_ROS00019.smil#span_006059">2</span> <span class="text" id="span_006060" smilref="Programming_Robots_with_ROS00019.smil#span_006060">*</span> <span class="text" id="span_006061" smilref="Programming_Robots_with_ROS00019.smil#span_006061">pi</span> <span class="text" id="span_006062" smilref="Programming_Robots_with_ROS00019.smil#span_006062">/</span> <span class="text" id="span_006063" smilref="Programming_Robots_with_ROS00019.smil#span_006063">100.0</span> <a class="co" id="ch15-co_your_own_sensors_and_actuators_CO2-2" href="#ch15-callout_your_own_sensors_and_actuators_CO2-2" external="false"><img src="images/2.jpg" alt="2" id="img_000248" /></a>


<span class="text" id="span_006064" smilref="Programming_Robots_with_ROS00019.smil#span_006064">if</span> <span class="text" id="span_006065" smilref="Programming_Robots_with_ROS00019.smil#span_006065">__name__</span> <span class="text" id="span_006066" smilref="Programming_Robots_with_ROS00019.smil#span_006066">==</span> <span class="text" id="span_006067" smilref="Programming_Robots_with_ROS00019.smil#span_006067">'</span><span class="text" id="span_006068" smilref="Programming_Robots_with_ROS00019.smil#span_006068">__main__</span><span class="text" id="span_006069" smilref="Programming_Robots_with_ROS00019.smil#span_006069">'</span><span class="text" id="span_006070" smilref="Programming_Robots_with_ROS00019.smil#span_006070">:</span>
    <span class="text" id="span_006071" smilref="Programming_Robots_with_ROS00019.smil#span_006071">lock</span> <span class="text" id="span_006072" smilref="Programming_Robots_with_ROS00019.smil#span_006072">=</span> <span class="text" id="span_006073" smilref="Programming_Robots_with_ROS00019.smil#span_006073">Lock</span><span class="text" id="span_006074" smilref="Programming_Robots_with_ROS00019.smil#span_006074">(</span><span class="text" id="span_006075" smilref="Programming_Robots_with_ROS00019.smil#span_006075">)</span> <a class="co" id="ch15-co_your_own_sensors_and_actuators_CO2-3" href="#ch15-callout_your_own_sensors_and_actuators_CO2-3" external="false"><img src="images/3.jpg" alt="3" id="img_000249" /></a>

    <span class="text" id="span_006076" smilref="Programming_Robots_with_ROS00019.smil#span_006076">sensor</span> <span class="text" id="span_006077" smilref="Programming_Robots_with_ROS00019.smil#span_006077">=</span> <span class="text" id="span_006078" smilref="Programming_Robots_with_ROS00019.smil#span_006078">FakeSensor</span><span class="text" id="span_006079" smilref="Programming_Robots_with_ROS00019.smil#span_006079">(</span><span class="text" id="span_006080" smilref="Programming_Robots_with_ROS00019.smil#span_006080">)</span>
    <span class="text" id="span_006081" smilref="Programming_Robots_with_ROS00019.smil#span_006081">sensor</span><span class="text" id="span_006082" smilref="Programming_Robots_with_ROS00019.smil#span_006082">.</span><span class="text" id="span_006083" smilref="Programming_Robots_with_ROS00019.smil#span_006083">register_callback</span><span class="text" id="span_006084" smilref="Programming_Robots_with_ROS00019.smil#span_006084">(</span><span class="text" id="span_006085" smilref="Programming_Robots_with_ROS00019.smil#span_006085">save_value</span><span class="text" id="span_006086" smilref="Programming_Robots_with_ROS00019.smil#span_006086">)</span>

    <span class="text" id="span_006087" smilref="Programming_Robots_with_ROS00019.smil#span_006087">rospy</span><span class="text" id="span_006088" smilref="Programming_Robots_with_ROS00019.smil#span_006088">.</span><span class="text" id="span_006089" smilref="Programming_Robots_with_ROS00019.smil#span_006089">init_node</span><span class="text" id="span_006090" smilref="Programming_Robots_with_ROS00019.smil#span_006090">(</span><span class="text" id="span_006091" smilref="Programming_Robots_with_ROS00019.smil#span_006091">'</span><span class="text" id="span_006092" smilref="Programming_Robots_with_ROS00019.smil#span_006092">fake_sensor</span><span class="text" id="span_006093" smilref="Programming_Robots_with_ROS00019.smil#span_006093">'</span><span class="text" id="span_006094" smilref="Programming_Robots_with_ROS00019.smil#span_006094">)</span>

    <span class="text" id="span_006095" smilref="Programming_Robots_with_ROS00019.smil#span_006095">pub</span> <span class="text" id="span_006096" smilref="Programming_Robots_with_ROS00019.smil#span_006096">=</span> <span class="text" id="span_006097" smilref="Programming_Robots_with_ROS00019.smil#span_006097">rospy</span><span class="text" id="span_006098" smilref="Programming_Robots_with_ROS00019.smil#span_006098">.</span><span class="text" id="span_006099" smilref="Programming_Robots_with_ROS00019.smil#span_006099">Publisher</span><span class="text" id="span_006100" smilref="Programming_Robots_with_ROS00019.smil#span_006100">(</span><span class="text" id="span_006101" smilref="Programming_Robots_with_ROS00019.smil#span_006101">'</span><span class="text" id="span_006102" smilref="Programming_Robots_with_ROS00019.smil#span_006102">angle</span><span class="text" id="span_006103" smilref="Programming_Robots_with_ROS00019.smil#span_006103">'</span><span class="text" id="span_006104" smilref="Programming_Robots_with_ROS00019.smil#span_006104">,</span> <span class="text" id="span_006105" smilref="Programming_Robots_with_ROS00019.smil#span_006105">Quaternion</span><span class="text" id="span_006106" smilref="Programming_Robots_with_ROS00019.smil#span_006106">,</span> <span class="text" id="span_006107" smilref="Programming_Robots_with_ROS00019.smil#span_006107">queue_size</span><span class="text" id="span_006108" smilref="Programming_Robots_with_ROS00019.smil#span_006108">=</span><span class="text" id="span_006109" smilref="Programming_Robots_with_ROS00019.smil#span_006109">10</span><span class="text" id="span_006110" smilref="Programming_Robots_with_ROS00019.smil#span_006110">)</span>

    <span class="text" id="span_006111" smilref="Programming_Robots_with_ROS00019.smil#span_006111">angle</span> <span class="text" id="span_006112" smilref="Programming_Robots_with_ROS00019.smil#span_006112">=</span> <span class="text" id="span_006113" smilref="Programming_Robots_with_ROS00019.smil#span_006113">None</span> <a class="co" id="ch15-co_your_own_sensors_and_actuators_CO2-4" href="#ch15-callout_your_own_sensors_and_actuators_CO2-4" external="false"><img src="images/4.jpg" alt="4" id="img_000250" /></a>
    <span class="text" id="span_006114" smilref="Programming_Robots_with_ROS00019.smil#span_006114">rate</span> <span class="text" id="span_006115" smilref="Programming_Robots_with_ROS00019.smil#span_006115">=</span> <span class="text" id="span_006116" smilref="Programming_Robots_with_ROS00019.smil#span_006116">rospy</span><span class="text" id="span_006117" smilref="Programming_Robots_with_ROS00019.smil#span_006117">.</span><span class="text" id="span_006118" smilref="Programming_Robots_with_ROS00019.smil#span_006118">Rate</span><span class="text" id="span_006119" smilref="Programming_Robots_with_ROS00019.smil#span_006119">(</span><span class="text" id="span_006120" smilref="Programming_Robots_with_ROS00019.smil#span_006120">10.0</span><span class="text" id="span_006121" smilref="Programming_Robots_with_ROS00019.smil#span_006121">)</span>
    <span class="text" id="span_006122" smilref="Programming_Robots_with_ROS00019.smil#span_006122">while</span> <span class="text" id="span_006123" smilref="Programming_Robots_with_ROS00019.smil#span_006123">not</span> <span class="text" id="span_006124" smilref="Programming_Robots_with_ROS00019.smil#span_006124">rospy</span><span class="text" id="span_006125" smilref="Programming_Robots_with_ROS00019.smil#span_006125">.</span><span class="text" id="span_006126" smilref="Programming_Robots_with_ROS00019.smil#span_006126">is_shutdown</span><span class="text" id="span_006127" smilref="Programming_Robots_with_ROS00019.smil#span_006127">(</span><span class="text" id="span_006128" smilref="Programming_Robots_with_ROS00019.smil#span_006128">)</span><span class="text" id="span_006129" smilref="Programming_Robots_with_ROS00019.smil#span_006129">:</span>
        <span class="text" id="span_006130" smilref="Programming_Robots_with_ROS00019.smil#span_006130">with</span> <span class="text" id="span_006131" smilref="Programming_Robots_with_ROS00019.smil#span_006131">lock</span><span class="text" id="span_006132" smilref="Programming_Robots_with_ROS00019.smil#span_006132">:</span>
            <span class="text" id="span_006133" smilref="Programming_Robots_with_ROS00019.smil#span_006133">if</span> <span class="text" id="span_006134" smilref="Programming_Robots_with_ROS00019.smil#span_006134">angle</span><span class="text" id="span_006135" smilref="Programming_Robots_with_ROS00019.smil#span_006135">:</span> <a class="co" id="ch15-co_your_own_sensors_and_actuators_CO2-5" href="#ch15-callout_your_own_sensors_and_actuators_CO2-5" external="false"><img src="images/5.jpg" alt="5" id="img_000251" /></a>
                <span class="text" id="span_006136" smilref="Programming_Robots_with_ROS00019.smil#span_006136">q</span> <span class="text" id="span_006137" smilref="Programming_Robots_with_ROS00019.smil#span_006137">=</span> <span class="text" id="span_006138" smilref="Programming_Robots_with_ROS00019.smil#span_006138">make_quaternion</span><span class="text" id="span_006139" smilref="Programming_Robots_with_ROS00019.smil#span_006139">(</span><span class="text" id="span_006140" smilref="Programming_Robots_with_ROS00019.smil#span_006140">angle</span><span class="text" id="span_006141" smilref="Programming_Robots_with_ROS00019.smil#span_006141">)</span>
                <span class="text" id="span_006142" smilref="Programming_Robots_with_ROS00019.smil#span_006142">pub</span><span class="text" id="span_006143" smilref="Programming_Robots_with_ROS00019.smil#span_006143">.</span><span class="text" id="span_006144" smilref="Programming_Robots_with_ROS00019.smil#span_006144">publish</span><span class="text" id="span_006145" smilref="Programming_Robots_with_ROS00019.smil#span_006145">(</span><span class="text" id="span_006146" smilref="Programming_Robots_with_ROS00019.smil#span_006146">q</span><span class="text" id="span_006147" smilref="Programming_Robots_with_ROS00019.smil#span_006147">)</span>

        <span class="text" id="span_006148" smilref="Programming_Robots_with_ROS00019.smil#span_006148">rate</span><span class="text" id="span_006149" smilref="Programming_Robots_with_ROS00019.smil#span_006149">.</span><span class="text" id="span_006150" smilref="Programming_Robots_with_ROS00019.smil#span_006150">sleep</span><span class="text" id="span_006151" smilref="Programming_Robots_with_ROS00019.smil#span_006151">(</span><span class="text" id="span_006152" smilref="Programming_Robots_with_ROS00019.smil#span_006152">)</span></code>
                      </p>
                    </div>
                    <dl class="calloutlist" id="dl_000019">
                      <dt id="dt_000094">
                        <a class="co" id="ch15-callout_your_own_sensors_and_actuators_CO2-1" href="#ch15-co_your_own_sensors_and_actuators_CO2-1" external="false">
                          <img src="images/1.jpg" alt="1" id="img_000252" />
                        </a>
                      </dt>
                      <dd id="dd_000094">
                        <p id="p_001019">
                          <span class="text" id="span_006153" smilref="Programming_Robots_with_ROS00019.smil#span_006153">Get the lock on</span>
                          <code xml:space="preserve" id="code_001437" smilref="Programming_Robots_with_ROS00019.smil#code_001437">angle</code>
                          <span class="text" id="span_006154" smilref="Programming_Robots_with_ROS00019.smil#span_006154">.</span>
                        </p>
                      </dd>
                      <dt id="dt_000095">
                        <a class="co" id="ch15-callout_your_own_sensors_and_actuators_CO2-2" href="#ch15-co_your_own_sensors_and_actuators_CO2-2" external="false">
                          <img src="images/2.jpg" alt="2" id="img_000253" />
                        </a>
                      </dt>
                      <dd id="dd_000095">
                        <p id="p_001020">
                          <span class="text" id="span_006155" smilref="Programming_Robots_with_ROS00019.smil#span_006155">Update the value of</span>
                          <code xml:space="preserve" id="code_001438" smilref="Programming_Robots_with_ROS00019.smil#code_001438">angle</code>
                          <span class="text" id="span_006156" smilref="Programming_Robots_with_ROS00019.smil#span_006156">, based on the sensor measurement.</span>
                        </p>
                      </dd>
                      <dt id="dt_000096">
                        <a class="co" id="ch15-callout_your_own_sensors_and_actuators_CO2-3" href="#ch15-co_your_own_sensors_and_actuators_CO2-3" external="false">
                          <img src="images/3.jpg" alt="3" id="img_000254" />
                        </a>
                      </dt>
                      <dd id="dd_000096">
                        <p id="p_001021">
                          <span class="text" id="span_006157" smilref="Programming_Robots_with_ROS00019.smil#span_006157">Create a lock for</span>
                          <code xml:space="preserve" id="code_001439" smilref="Programming_Robots_with_ROS00019.smil#code_001439">angle</code>
                          <span class="text" id="span_006158" smilref="Programming_Robots_with_ROS00019.smil#span_006158">, to prevent simultaneous access.</span>
                        </p>
                      </dd>
                      <dt id="dt_000097">
                        <a class="co" id="ch15-callout_your_own_sensors_and_actuators_CO2-4" href="#ch15-co_your_own_sensors_and_actuators_CO2-4" external="false">
                          <img src="images/4.jpg" alt="4" id="img_000255" />
                        </a>
                      </dt>
                      <dd id="dd_000097">
                        <p id="p_001022">
                          <span class="text" id="span_006159" smilref="Programming_Robots_with_ROS00019.smil#span_006159">Initially set</span>
                          <code xml:space="preserve" id="code_001440" smilref="Programming_Robots_with_ROS00019.smil#code_001440">angle</code>
                          <span class="text" id="span_006160" smilref="Programming_Robots_with_ROS00019.smil#span_006160">to</span>
                          <code xml:space="preserve" id="code_001441" smilref="Programming_Robots_with_ROS00019.smil#code_001441">None</code>
                          <span class="text" id="span_006161" smilref="Programming_Robots_with_ROS00019.smil#span_006161">. This will be overwritten in the first execution of the callback function.</span>
                        </p>
                      </dd>
                      <dt id="dt_000098">
                        <a class="co" id="ch15-callout_your_own_sensors_and_actuators_CO2-5" href="#ch15-co_your_own_sensors_and_actuators_CO2-5" external="false">
                          <img src="images/5.jpg" alt="5" id="img_000256" />
                        </a>
                      </dt>
                      <dd id="dd_000098">
                        <p id="p_001023">
                          <span class="text" id="span_006162" smilref="Programming_Robots_with_ROS00019.smil#span_006162">If the callback has assigned a value to</span>
                          <code xml:space="preserve" id="code_001442" smilref="Programming_Robots_with_ROS00019.smil#code_001442">angle</code>
                          <span class="text" id="span_006163" smilref="Programming_Robots_with_ROS00019.smil#span_006163">, this will evaluate; then the</span>
                          <code xml:space="preserve" id="code_001443" smilref="Programming_Robots_with_ROS00019.smil#code_001443">if</code>
                          <span class="text" id="span_006164" smilref="Programming_Robots_with_ROS00019.smil#span_006164">clause will evaluate</span>
                          <code xml:space="preserve" id="code_001444" smilref="Programming_Robots_with_ROS00019.smil#code_001444">True</code>
                          <span class="text" id="span_006165" smilref="Programming_Robots_with_ROS00019.smil#span_006165">, and a new message will be published on the topic. If the callback hasn't run yet, no message will be published.</span>
                        </p>
                      </dd>
                    </dl>
                    <p id="p_001024">
                      <span class="text" id="span_006166" smilref="Programming_Robots_with_ROS00019.smil#span_006166">This code contains both a callback, to deal with the sensor measurements, and a publishing loop, to deal with publishing messages on the topic. We have also added a concurrency lock, to avoid the</span>
                      <code xml:space="preserve" id="code_001445" smilref="Programming_Robots_with_ROS00019.smil#code_001445">angle</code>
                      <span class="text" id="span_006167" smilref="Programming_Robots_with_ROS00019.smil#span_006167">variable being accessed in the callback and in the publishing loop at the same time. The callback function simply stores the current value of the angle, based on the sensor measurement. This value is published periodically by the publishing loop.</span>
                    </p>
                  </div>
                </section>
                <section data-type="sect2" class="pagebreak-before" data-pdf-bookmark="Design 4: Sensor Measurements on Demand" id="section_000154">
                  <h1 id="h1_000328" smilref="Programming_Robots_with_ROS00019.smil#h1_000328">Design 4: Sensor Measurements on Demand</h1>
                  <div class="sect2" id="ch15-idp37525792">
                    <p id="ch15-idp37263376" data-type="indexterm" data-primary="sensor" data-secondary="wrapper design for measurements on demand" smilref="Programming_Robots_with_ROS00019.smil#ch15-idp37263376">The final design we will look at deals with the case where you only want to report a sensor measurement on demand, when some node asks for it. If the process of getting a measurement from the sensor is quick, then you should use a service call for this. If it is slower, then you should probably use an action call. We will illustrate the basic approach with a service call; the action interface will be structured similarly.</p>
                    <p id="p_001025">
                      <span class="text" id="span_006168" smilref="Programming_Robots_with_ROS00019.smil#span_006168">Our service call will take no arguments, and return a</span>
                      <code xml:space="preserve" id="code_001446" smilref="Programming_Robots_with_ROS00019.smil#code_001446">Quaternion</code>
                      <span class="text" id="span_006169" smilref="Programming_Robots_with_ROS00019.smil#span_006169">.</span>
                      <a data-type="xref" href="#ch15-sensor_service_srv" external="false" id="a_000252" smilref="Programming_Robots_with_ROS00019.smil#a_000252">Example 15-4</a>
                      <span class="text" id="span_006170" smilref="Programming_Robots_with_ROS00019.smil#span_006170">shows the service-definition file.</span>
                    </p>
                    <h1 id="h1_000329" smilref="Programming_Robots_with_ROS00019.smil#h1_000329">Example 15-4. FakeSensor.srv</h1>
                    <div id="ch15-sensor_service_srv" data-type="example">
                      <p id="p_001026">
                        <code class="preserve-whitespace" xml:space="preserve" id="code_001447" smilref="Programming_Robots_with_ROS00019.smil#code_001447">std_msgs/Empty
---
geometry_msgs/Quaternion quaternion</code>
                      </p>
                    </div>
                    <p id="p_001027">
                      <span class="text" id="span_006171" smilref="Programming_Robots_with_ROS00019.smil#span_006171">We could omit the</span>
                      <code xml:space="preserve" id="code_001448" smilref="Programming_Robots_with_ROS00019.smil#code_001448">std_msgs/Empty</code>
                      <span class="text" id="span_006172" smilref="Programming_Robots_with_ROS00019.smil#span_006172">definition, and ROS would interpret this as defining a service call with no inputs. However, we've chosen to use the</span>
                      <code xml:space="preserve" id="code_001449" smilref="Programming_Robots_with_ROS00019.smil#code_001449">Empty</code>
                      <span class="text" id="span_006173" smilref="Programming_Robots_with_ROS00019.smil#span_006173">message type here, to explicitly show that we're not expecting any inputs.</span>
                    </p>
                    <p id="p_001028">
                      <a data-type="xref" href="#ch15-sensor_service" external="false" id="a_000253" smilref="Programming_Robots_with_ROS00019.smil#a_000253">Example 15-5</a>
                      <span class="text" id="span_006174" smilref="Programming_Robots_with_ROS00019.smil#span_006174">shows the code for a service-based ROS wrapper for our sensor. The structure of a service node should be familiar from the discussion in</span>
                      <a data-type="xref" href="#ch04-services" external="false" id="a_000254" smilref="Programming_Robots_with_ROS00019.smil#a_000254">Chapter 4</a>
                      <span class="text" id="span_006175" smilref="Programming_Robots_with_ROS00019.smil#span_006175">.</span>
                    </p>
                    <h1 id="h1_000330" smilref="Programming_Robots_with_ROS00019.smil#h1_000330">Example 15-5. service_sensor.py</h1>
                    <div id="ch15-sensor_service" data-type="example">
                      <p id="p_001029">
                        <code class="preserve-whitespace" xml:space="preserve" id="code_001450"><span class="text" id="span_006176" smilref="Programming_Robots_with_ROS00019.smil#span_006176">#!/usr/bin/env python</span>

<span class="text" id="span_006177" smilref="Programming_Robots_with_ROS00019.smil#span_006177">from</span> <span class="text" id="span_006178" smilref="Programming_Robots_with_ROS00019.smil#span_006178">math</span> <span class="text" id="span_006179" smilref="Programming_Robots_with_ROS00019.smil#span_006179">import</span> <span class="text" id="span_006180" smilref="Programming_Robots_with_ROS00019.smil#span_006180">pi</span>

<span class="text" id="span_006181" smilref="Programming_Robots_with_ROS00019.smil#span_006181">from</span> <span class="text" id="span_006182" smilref="Programming_Robots_with_ROS00019.smil#span_006182">fake_sensor</span> <span class="text" id="span_006183" smilref="Programming_Robots_with_ROS00019.smil#span_006183">import</span> <span class="text" id="span_006184" smilref="Programming_Robots_with_ROS00019.smil#span_006184">FakeSensor</span>

<span class="text" id="span_006185" smilref="Programming_Robots_with_ROS00019.smil#span_006185">import</span> <span class="text" id="span_006186" smilref="Programming_Robots_with_ROS00019.smil#span_006186">rospy</span>
<span class="text" id="span_006187" smilref="Programming_Robots_with_ROS00019.smil#span_006187">import</span> <span class="text" id="span_006188" smilref="Programming_Robots_with_ROS00019.smil#span_006188">tf</span>

<span class="text" id="span_006189" smilref="Programming_Robots_with_ROS00019.smil#span_006189">from</span> <span class="text" id="span_006190" smilref="Programming_Robots_with_ROS00019.smil#span_006190">geometry_msgs.msg</span> <span class="text" id="span_006191" smilref="Programming_Robots_with_ROS00019.smil#span_006191">import</span> <span class="text" id="span_006192" smilref="Programming_Robots_with_ROS00019.smil#span_006192">Quaternion</span>
<span class="text" id="span_006193" smilref="Programming_Robots_with_ROS00019.smil#span_006193">from</span> <span class="text" id="span_006194" smilref="Programming_Robots_with_ROS00019.smil#span_006194">stuff.srv</span> <span class="text" id="span_006195" smilref="Programming_Robots_with_ROS00019.smil#span_006195">import</span> <span class="text" id="span_006196" smilref="Programming_Robots_with_ROS00019.smil#span_006196">FakeSensor</span><span class="text" id="span_006197" smilref="Programming_Robots_with_ROS00019.smil#span_006197">,</span><span class="text" id="span_006198" smilref="Programming_Robots_with_ROS00019.smil#span_006198">FakeSensorResponse</span>


<span class="text" id="span_006199" smilref="Programming_Robots_with_ROS00019.smil#span_006199">def</span> <span class="text" id="span_006200" smilref="Programming_Robots_with_ROS00019.smil#span_006200">make_quaternion</span><span class="text" id="span_006201" smilref="Programming_Robots_with_ROS00019.smil#span_006201">(</span><span class="text" id="span_006202" smilref="Programming_Robots_with_ROS00019.smil#span_006202">angle</span><span class="text" id="span_006203" smilref="Programming_Robots_with_ROS00019.smil#span_006203">)</span><span class="text" id="span_006204" smilref="Programming_Robots_with_ROS00019.smil#span_006204">:</span>
    <span class="text" id="span_006205" smilref="Programming_Robots_with_ROS00019.smil#span_006205">q</span> <span class="text" id="span_006206" smilref="Programming_Robots_with_ROS00019.smil#span_006206">=</span> <span class="text" id="span_006207" smilref="Programming_Robots_with_ROS00019.smil#span_006207">tf</span><span class="text" id="span_006208" smilref="Programming_Robots_with_ROS00019.smil#span_006208">.</span><span class="text" id="span_006209" smilref="Programming_Robots_with_ROS00019.smil#span_006209">transformations</span><span class="text" id="span_006210" smilref="Programming_Robots_with_ROS00019.smil#span_006210">.</span><span class="text" id="span_006211" smilref="Programming_Robots_with_ROS00019.smil#span_006211">quaternion_from_euler</span><span class="text" id="span_006212" smilref="Programming_Robots_with_ROS00019.smil#span_006212">(</span><span class="text" id="span_006213" smilref="Programming_Robots_with_ROS00019.smil#span_006213">0</span><span class="text" id="span_006214" smilref="Programming_Robots_with_ROS00019.smil#span_006214">,</span> <span class="text" id="span_006215" smilref="Programming_Robots_with_ROS00019.smil#span_006215">0</span><span class="text" id="span_006216" smilref="Programming_Robots_with_ROS00019.smil#span_006216">,</span> <span class="text" id="span_006217" smilref="Programming_Robots_with_ROS00019.smil#span_006217">angle</span><span class="text" id="span_006218" smilref="Programming_Robots_with_ROS00019.smil#span_006218">)</span>
    <span class="text" id="span_006219" smilref="Programming_Robots_with_ROS00019.smil#span_006219">return</span> <span class="text" id="span_006220" smilref="Programming_Robots_with_ROS00019.smil#span_006220">Quaternion</span><span class="text" id="span_006221" smilref="Programming_Robots_with_ROS00019.smil#span_006221">(</span><span class="text" id="span_006222" smilref="Programming_Robots_with_ROS00019.smil#span_006222">*</span><span class="text" id="span_006223" smilref="Programming_Robots_with_ROS00019.smil#span_006223">q</span><span class="text" id="span_006224" smilref="Programming_Robots_with_ROS00019.smil#span_006224">)</span>

<span class="text" id="span_006225" smilref="Programming_Robots_with_ROS00019.smil#span_006225">def</span> <span class="text" id="span_006226" smilref="Programming_Robots_with_ROS00019.smil#span_006226">callback</span><span class="text" id="span_006227" smilref="Programming_Robots_with_ROS00019.smil#span_006227">(</span><span class="text" id="span_006228" smilref="Programming_Robots_with_ROS00019.smil#span_006228">request</span><span class="text" id="span_006229" smilref="Programming_Robots_with_ROS00019.smil#span_006229">)</span><span class="text" id="span_006230" smilref="Programming_Robots_with_ROS00019.smil#span_006230">:</span>  <a class="co" id="ch15-co_your_own_sensors_and_actuators_CO3-1" href="#ch15-callout_your_own_sensors_and_actuators_CO3-1" external="false"><img src="images/1.jpg" alt="1" id="img_000257" /></a>
    <span class="text" id="span_006231" smilref="Programming_Robots_with_ROS00019.smil#span_006231">angle</span> <span class="text" id="span_006232" smilref="Programming_Robots_with_ROS00019.smil#span_006232">=</span> <span class="text" id="span_006233" smilref="Programming_Robots_with_ROS00019.smil#span_006233">sensor</span><span class="text" id="span_006234" smilref="Programming_Robots_with_ROS00019.smil#span_006234">.</span><span class="text" id="span_006235" smilref="Programming_Robots_with_ROS00019.smil#span_006235">value</span><span class="text" id="span_006236" smilref="Programming_Robots_with_ROS00019.smil#span_006236">(</span><span class="text" id="span_006237" smilref="Programming_Robots_with_ROS00019.smil#span_006237">)</span> <span class="text" id="span_006238" smilref="Programming_Robots_with_ROS00019.smil#span_006238">*</span> <span class="text" id="span_006239" smilref="Programming_Robots_with_ROS00019.smil#span_006239">2</span> <span class="text" id="span_006240" smilref="Programming_Robots_with_ROS00019.smil#span_006240">*</span> <span class="text" id="span_006241" smilref="Programming_Robots_with_ROS00019.smil#span_006241">pi</span> <span class="text" id="span_006242" smilref="Programming_Robots_with_ROS00019.smil#span_006242">/</span> <span class="text" id="span_006243" smilref="Programming_Robots_with_ROS00019.smil#span_006243">100.0</span>
    <span class="text" id="span_006244" smilref="Programming_Robots_with_ROS00019.smil#span_006244">q</span> <span class="text" id="span_006245" smilref="Programming_Robots_with_ROS00019.smil#span_006245">=</span> <span class="text" id="span_006246" smilref="Programming_Robots_with_ROS00019.smil#span_006246">make_quaternion</span><span class="text" id="span_006247" smilref="Programming_Robots_with_ROS00019.smil#span_006247">(</span><span class="text" id="span_006248" smilref="Programming_Robots_with_ROS00019.smil#span_006248">angle</span><span class="text" id="span_006249" smilref="Programming_Robots_with_ROS00019.smil#span_006249">)</span>

    <span class="text" id="span_006250" smilref="Programming_Robots_with_ROS00019.smil#span_006250">return</span> <span class="text" id="span_006251" smilref="Programming_Robots_with_ROS00019.smil#span_006251">FakeSensorResponse</span><span class="text" id="span_006252" smilref="Programming_Robots_with_ROS00019.smil#span_006252">(</span><span class="text" id="span_006253" smilref="Programming_Robots_with_ROS00019.smil#span_006253">q</span><span class="text" id="span_006254" smilref="Programming_Robots_with_ROS00019.smil#span_006254">)</span>


<span class="text" id="span_006255" smilref="Programming_Robots_with_ROS00019.smil#span_006255">if</span> <span class="text" id="span_006256" smilref="Programming_Robots_with_ROS00019.smil#span_006256">__name__</span> <span class="text" id="span_006257" smilref="Programming_Robots_with_ROS00019.smil#span_006257">==</span> <span class="text" id="span_006258" smilref="Programming_Robots_with_ROS00019.smil#span_006258">'</span><span class="text" id="span_006259" smilref="Programming_Robots_with_ROS00019.smil#span_006259">__main__</span><span class="text" id="span_006260" smilref="Programming_Robots_with_ROS00019.smil#span_006260">'</span><span class="text" id="span_006261" smilref="Programming_Robots_with_ROS00019.smil#span_006261">:</span>
    <span class="text" id="span_006262" smilref="Programming_Robots_with_ROS00019.smil#span_006262">sensor</span> <span class="text" id="span_006263" smilref="Programming_Robots_with_ROS00019.smil#span_006263">=</span> <span class="text" id="span_006264" smilref="Programming_Robots_with_ROS00019.smil#span_006264">FakeSensor</span><span class="text" id="span_006265" smilref="Programming_Robots_with_ROS00019.smil#span_006265">(</span><span class="text" id="span_006266" smilref="Programming_Robots_with_ROS00019.smil#span_006266">)</span>

    <span class="text" id="span_006267" smilref="Programming_Robots_with_ROS00019.smil#span_006267">rospy</span><span class="text" id="span_006268" smilref="Programming_Robots_with_ROS00019.smil#span_006268">.</span><span class="text" id="span_006269" smilref="Programming_Robots_with_ROS00019.smil#span_006269">init_node</span><span class="text" id="span_006270" smilref="Programming_Robots_with_ROS00019.smil#span_006270">(</span><span class="text" id="span_006271" smilref="Programming_Robots_with_ROS00019.smil#span_006271">'</span><span class="text" id="span_006272" smilref="Programming_Robots_with_ROS00019.smil#span_006272">fake_sensor</span><span class="text" id="span_006273" smilref="Programming_Robots_with_ROS00019.smil#span_006273">'</span><span class="text" id="span_006274" smilref="Programming_Robots_with_ROS00019.smil#span_006274">)</span>

    <span class="text" id="span_006275" smilref="Programming_Robots_with_ROS00019.smil#span_006275">service</span> <span class="text" id="span_006276" smilref="Programming_Robots_with_ROS00019.smil#span_006276">=</span> <span class="text" id="span_006277" smilref="Programming_Robots_with_ROS00019.smil#span_006277">rospy</span><span class="text" id="span_006278" smilref="Programming_Robots_with_ROS00019.smil#span_006278">.</span><span class="text" id="span_006279" smilref="Programming_Robots_with_ROS00019.smil#span_006279">Service</span><span class="text" id="span_006280" smilref="Programming_Robots_with_ROS00019.smil#span_006280">(</span><span class="text" id="span_006281" smilref="Programming_Robots_with_ROS00019.smil#span_006281">'</span><span class="text" id="span_006282" smilref="Programming_Robots_with_ROS00019.smil#span_006282">angle</span><span class="text" id="span_006283" smilref="Programming_Robots_with_ROS00019.smil#span_006283">'</span><span class="text" id="span_006284" smilref="Programming_Robots_with_ROS00019.smil#span_006284">,</span> <span class="text" id="span_006285" smilref="Programming_Robots_with_ROS00019.smil#span_006285">FakeSensor</span><span class="text" id="span_006286" smilref="Programming_Robots_with_ROS00019.smil#span_006286">,</span> <span class="text" id="span_006287" smilref="Programming_Robots_with_ROS00019.smil#span_006287">callback</span><span class="text" id="span_006288" smilref="Programming_Robots_with_ROS00019.smil#span_006288">)</span> <a class="co" id="ch15-co_your_own_sensors_and_actuators_CO3-2" href="#ch15-callout_your_own_sensors_and_actuators_CO3-2" external="false"><img src="images/2.jpg" alt="2" id="img_000258" /></a></code>
                      </p>
                    </div>
                    <dl class="calloutlist" id="dl_000020">
                      <dt id="dt_000099">
                        <a class="co" id="ch15-callout_your_own_sensors_and_actuators_CO3-1" href="#ch15-co_your_own_sensors_and_actuators_CO3-1" external="false">
                          <img src="images/1.jpg" alt="1" id="img_000259" />
                        </a>
                      </dt>
                      <dd id="dd_000099">
                        <p id="p_001030" smilref="Programming_Robots_with_ROS00019.smil#p_001030">Callback function to deal with the service request.</p>
                      </dd>
                      <dt id="dt_000100">
                        <a class="co" id="ch15-callout_your_own_sensors_and_actuators_CO3-2" href="#ch15-co_your_own_sensors_and_actuators_CO3-2" external="false">
                          <img src="images/2.jpg" alt="2" id="img_000260" />
                        </a>
                      </dt>
                      <dd id="dd_000100">
                        <p id="p_001031" smilref="Programming_Robots_with_ROS00019.smil#p_001031">Set up the service handler.</p>
                      </dd>
                    </dl>
                    <p id="ch15-idp37683072" data-type="indexterm" data-startref="ix_15-sensors_actuators-asciidoc0">
                      <span class="text" id="span_006289" smilref="Programming_Robots_with_ROS00019.smil#span_006289">If your sensor returns measurements through a callback mechanism, then you'll have to store these values using a method similar to the one in</span>
                      <a data-type="xref" href="#ch15-design_3_streaming_measure" external="false" id="a_000255" smilref="Programming_Robots_with_ROS00019.smil#a_000255">"Design 3: Streaming Measurements Published at a Fixed Rate"</a>
                      <span class="text" id="span_006290" smilref="Programming_Robots_with_ROS00019.smil#span_006290">, and then return them in the service callback.</span>
                    </p>
                  </div>
                </section>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Adding Your Own Actuators" id="section_000155">
              <h1 id="h1_000331" smilref="Programming_Robots_with_ROS00019.smil#h1_000331">Adding Your Own Actuators</h1>
              <div class="sect1" id="ch15-actuators">
                <p id="ch15-ix_15-sensors_actuators-asciidoc5" data-type="indexterm" data-primary="actuators" data-secondary="adding your own to ROS" smilref="Programming_Robots_with_ROS00019.smil#ch15-ix_15-sensors_actuators-asciidoc5">Now that we've seen how to add your own sensors to ROS, let's take a look at how you can add in your own actuators. The general approach is going to be similar: decide how you're going to send commands to the actuator, decide on what data types to use, and then encapsulate the existing API in a ROS wrapper.</p>
                <section data-type="sect2" data-pdf-bookmark="A (Fake) Actuator" id="section_000156">
                  <h1 id="h1_000332" smilref="Programming_Robots_with_ROS00019.smil#h1_000332">A (Fake) Actuator</h1>
                  <div class="sect2" id="ch15-idp36803728">
                    <p data-type="indexterm" data-primary="actuators" data-secondary="FakeActuator for simulation" id="ch15-idp37498464">
                      <span class="text" id="span_006291" smilref="Programming_Robots_with_ROS00019.smil#span_006291">Just like in the sensor example, we're going to use a fake actuator (called</span>
                      <code xml:space="preserve" id="code_001451" smilref="Programming_Robots_with_ROS00019.smil#code_001451">FakeActuator</code>
                      <span class="text" id="span_006292" smilref="Programming_Robots_with_ROS00019.smil#span_006292">) to illustrate how you might write a ROS wrapper for a real actuator. As before, our fake actuator, shown in</span>
                      <a data-type="xref" href="#ch15-fake_actuator_gui" external="false" id="a_000256" smilref="Programming_Robots_with_ROS00019.smil#a_000256">Figure 15-2</a>
                      <span class="text" id="span_006293" smilref="Programming_Robots_with_ROS00019.smil#span_006293">, brings up a</span>
                      <code xml:space="preserve" id="code_001452" smilref="Programming_Robots_with_ROS00019.smil#code_001452">PySide</code>
                      <span class="text" id="span_006294" smilref="Programming_Robots_with_ROS00019.smil#span_006294">GUI. The elements of this GUI represent a light (top), a volume control (middle), and a rotational element (bottom). Think of it as representing a searchlight and speaker on a swiveling base. Although it's not a real actuator, it does have some of the properties that you might see in a real actuator API. You can toggle the light on and off with a call to the</span>
                      <code xml:space="preserve" id="code_001453" smilref="Programming_Robots_with_ROS00019.smil#code_001453">toggle_light()</code>
                      <span class="text" id="span_006295" smilref="Programming_Robots_with_ROS00019.smil#span_006295">function, you can set a volume with the</span>
                      <code xml:space="preserve" id="code_001454" smilref="Programming_Robots_with_ROS00019.smil#code_001454">set_volume()</code>
                      <span class="text" id="span_006296" smilref="Programming_Robots_with_ROS00019.smil#span_006296">function, and you can set a rotational position with the</span>
                      <code xml:space="preserve" id="code_001455" smilref="Programming_Robots_with_ROS00019.smil#code_001455">set_position()</code>
                      <span class="text" id="span_006297" smilref="Programming_Robots_with_ROS00019.smil#span_006297">function. Each of these three parts of the actuator also has a function that tells you what state it's currently in (</span>
                      <code xml:space="preserve" id="code_001456" smilref="Programming_Robots_with_ROS00019.smil#code_001456">light_on()</code>
                      <span class="text" id="span_006298" smilref="Programming_Robots_with_ROS00019.smil#span_006298">,</span>
                      <code xml:space="preserve" id="code_001457" smilref="Programming_Robots_with_ROS00019.smil#code_001457">volume()</code>
                      <span class="text" id="span_006299" smilref="Programming_Robots_with_ROS00019.smil#span_006299">, and</span>
                      <code xml:space="preserve" id="code_001458" smilref="Programming_Robots_with_ROS00019.smil#code_001458">position()</code>
                      <span class="text" id="span_006300" smilref="Programming_Robots_with_ROS00019.smil#span_006300">, respectively). More importantly for the rest of this section, these three parts of the actuator are representative of the types of interactions we have with real actuators.</span>
                    </p>
                    <figure id="figure_000079">
                      <h1 id="h1_000333" smilref="Programming_Robots_with_ROS00019.smil#h1_000333">Figure 15-2. The graphical interface for our fake actuator</h1>
                      <div id="ch15-fake_actuator_gui" class="figure">
                        <img src="images/prwr_1502.jpg" alt="fake_actuator" id="img_000261" />
                      </div>
                    </figure>
                  </div>
                </section>
                <section data-type="sect2" data-pdf-bookmark="Designing the ROS Wrapper" id="section_000157">
                  <h1 id="h1_000334" smilref="Programming_Robots_with_ROS00019.smil#h1_000334">Designing the ROS Wrapper</h1>
                  <div class="sect2" id="ch15-idp38748512">
                    <p id="ch15-ix_15-sensors_actuators-asciidoc6" data-type="indexterm" data-primary="actuators" data-secondary="wrapper design considerations" smilref="Programming_Robots_with_ROS00019.smil#ch15-ix_15-sensors_actuators-asciidoc6">When designing the ROS wrapper, there are two main things to consider: what type of interaction to have with the actuator hardware and what data types you should be using. For our fake sensor, there are three parts to the device: the volume control, the light, and the rotational position. We'll deal with each of these separately.</p>
                    <p id="p_001032">
                      <span class="text" id="span_006301" smilref="Programming_Robots_with_ROS00019.smil#span_006301">The type of interaction that you have with the actuator will determine the ROS mechanism that you use to control it. If you're going to be constantly sending commands to the hardware, then you should use a topic. If you are occasionally sending commands that get implemented quickly by the hardware, then you should use a service call. Finally, if you're occasionally sending commands that take a long time (or a highly variable amount of time) to complete, then you should use an action. We'll expand on this in the following sections. For now, though, the code for the ROS wrapper around our fake actuator is shown in</span>
                      <a data-type="xref" href="#ch15-fake_actuator_code" external="false" id="a_000257" smilref="Programming_Robots_with_ROS00019.smil#a_000257">Example 15-6</a>
                      <span class="text" id="span_006302" smilref="Programming_Robots_with_ROS00019.smil#span_006302">.</span>
                    </p>
                    <h1 id="h1_000335" smilref="Programming_Robots_with_ROS00019.smil#h1_000335">Example 15-6. actuator.py</h1>
                    <div id="ch15-fake_actuator_code" data-type="example">
                      <p id="p_001033">
                        <code class="preserve-whitespace" xml:space="preserve" id="code_001459"><span class="text" id="span_006303" smilref="Programming_Robots_with_ROS00019.smil#span_006303">#!/usr/bin/env python</span>

<span class="text" id="span_006304" smilref="Programming_Robots_with_ROS00019.smil#span_006304">from</span> <span class="text" id="span_006305" smilref="Programming_Robots_with_ROS00019.smil#span_006305">fake_actuator</span> <span class="text" id="span_006306" smilref="Programming_Robots_with_ROS00019.smil#span_006306">import</span> <span class="text" id="span_006307" smilref="Programming_Robots_with_ROS00019.smil#span_006307">FakeActuator</span>

<span class="text" id="span_006308" smilref="Programming_Robots_with_ROS00019.smil#span_006308">import</span> <span class="text" id="span_006309" smilref="Programming_Robots_with_ROS00019.smil#span_006309">rospy</span>
<span class="text" id="span_006310" smilref="Programming_Robots_with_ROS00019.smil#span_006310">import</span> <span class="text" id="span_006311" smilref="Programming_Robots_with_ROS00019.smil#span_006311">actionlib</span>
<span class="text" id="span_006312" smilref="Programming_Robots_with_ROS00019.smil#span_006312">from</span> <span class="text" id="span_006313" smilref="Programming_Robots_with_ROS00019.smil#span_006313">std_msgs.msg</span> <span class="text" id="span_006314" smilref="Programming_Robots_with_ROS00019.smil#span_006314">import</span> <span class="text" id="span_006315" smilref="Programming_Robots_with_ROS00019.smil#span_006315">Float32</span>

<span class="text" id="span_006316" smilref="Programming_Robots_with_ROS00019.smil#span_006316">from</span> <span class="text" id="span_006317" smilref="Programming_Robots_with_ROS00019.smil#span_006317">sensors.srv</span> <span class="text" id="span_006318" smilref="Programming_Robots_with_ROS00019.smil#span_006318">import</span> <span class="text" id="span_006319" smilref="Programming_Robots_with_ROS00019.smil#span_006319">Light</span><span class="text" id="span_006320" smilref="Programming_Robots_with_ROS00019.smil#span_006320">,</span><span class="text" id="span_006321" smilref="Programming_Robots_with_ROS00019.smil#span_006321">LightResponse</span>
<span class="text" id="span_006322" smilref="Programming_Robots_with_ROS00019.smil#span_006322">from</span> <span class="text" id="span_006323" smilref="Programming_Robots_with_ROS00019.smil#span_006323">sensors.msg</span> <span class="text" id="span_006324" smilref="Programming_Robots_with_ROS00019.smil#span_006324">import</span> <span class="text" id="span_006325" smilref="Programming_Robots_with_ROS00019.smil#span_006325">RotationAction</span><span class="text" id="span_006326" smilref="Programming_Robots_with_ROS00019.smil#span_006326">,</span><span class="text" id="span_006327" smilref="Programming_Robots_with_ROS00019.smil#span_006327">RotationFeedback</span><span class="text" id="span_006328" smilref="Programming_Robots_with_ROS00019.smil#span_006328">,</span><span class="text" id="span_006329" smilref="Programming_Robots_with_ROS00019.smil#span_006329">RotationResult</span>


<span class="text" id="span_006330" smilref="Programming_Robots_with_ROS00019.smil#span_006330">def</span> <span class="text" id="span_006331" smilref="Programming_Robots_with_ROS00019.smil#span_006331">volume_callback</span><span class="text" id="span_006332" smilref="Programming_Robots_with_ROS00019.smil#span_006332">(</span><span class="text" id="span_006333" smilref="Programming_Robots_with_ROS00019.smil#span_006333">msg</span><span class="text" id="span_006334" smilref="Programming_Robots_with_ROS00019.smil#span_006334">)</span><span class="text" id="span_006335" smilref="Programming_Robots_with_ROS00019.smil#span_006335">:</span>
    <span class="text" id="span_006336" smilref="Programming_Robots_with_ROS00019.smil#span_006336">actuator</span><span class="text" id="span_006337" smilref="Programming_Robots_with_ROS00019.smil#span_006337">.</span><span class="text" id="span_006338" smilref="Programming_Robots_with_ROS00019.smil#span_006338">set_volume</span><span class="text" id="span_006339" smilref="Programming_Robots_with_ROS00019.smil#span_006339">(</span><span class="text" id="span_006340" smilref="Programming_Robots_with_ROS00019.smil#span_006340">min</span><span class="text" id="span_006341" smilref="Programming_Robots_with_ROS00019.smil#span_006341">(</span><span class="text" id="span_006342" smilref="Programming_Robots_with_ROS00019.smil#span_006342">100</span><span class="text" id="span_006343" smilref="Programming_Robots_with_ROS00019.smil#span_006343">,</span> <span class="text" id="span_006344" smilref="Programming_Robots_with_ROS00019.smil#span_006344">max</span><span class="text" id="span_006345" smilref="Programming_Robots_with_ROS00019.smil#span_006345">(</span><span class="text" id="span_006346" smilref="Programming_Robots_with_ROS00019.smil#span_006346">0</span><span class="text" id="span_006347" smilref="Programming_Robots_with_ROS00019.smil#span_006347">,</span> <span class="text" id="span_006348" smilref="Programming_Robots_with_ROS00019.smil#span_006348">int</span><span class="text" id="span_006349" smilref="Programming_Robots_with_ROS00019.smil#span_006349">(</span><span class="text" id="span_006350" smilref="Programming_Robots_with_ROS00019.smil#span_006350">msg</span><span class="text" id="span_006351" smilref="Programming_Robots_with_ROS00019.smil#span_006351">.</span><span class="text" id="span_006352" smilref="Programming_Robots_with_ROS00019.smil#span_006352">data</span> <span class="text" id="span_006353" smilref="Programming_Robots_with_ROS00019.smil#span_006353">*</span> <span class="text" id="span_006354" smilref="Programming_Robots_with_ROS00019.smil#span_006354">100</span><span class="text" id="span_006355" smilref="Programming_Robots_with_ROS00019.smil#span_006355">)</span><span class="text" id="span_006356" smilref="Programming_Robots_with_ROS00019.smil#span_006356">)</span><span class="text" id="span_006357" smilref="Programming_Robots_with_ROS00019.smil#span_006357">)</span><span class="text" id="span_006358" smilref="Programming_Robots_with_ROS00019.smil#span_006358">)</span>


<span class="text" id="span_006359" smilref="Programming_Robots_with_ROS00019.smil#span_006359">def</span> <span class="text" id="span_006360" smilref="Programming_Robots_with_ROS00019.smil#span_006360">light_callback</span><span class="text" id="span_006361" smilref="Programming_Robots_with_ROS00019.smil#span_006361">(</span><span class="text" id="span_006362" smilref="Programming_Robots_with_ROS00019.smil#span_006362">request</span><span class="text" id="span_006363" smilref="Programming_Robots_with_ROS00019.smil#span_006363">)</span><span class="text" id="span_006364" smilref="Programming_Robots_with_ROS00019.smil#span_006364">:</span>
    <span class="text" id="span_006365" smilref="Programming_Robots_with_ROS00019.smil#span_006365">actuator</span><span class="text" id="span_006366" smilref="Programming_Robots_with_ROS00019.smil#span_006366">.</span><span class="text" id="span_006367" smilref="Programming_Robots_with_ROS00019.smil#span_006367">toggle_light</span><span class="text" id="span_006368" smilref="Programming_Robots_with_ROS00019.smil#span_006368">(</span><span class="text" id="span_006369" smilref="Programming_Robots_with_ROS00019.smil#span_006369">request</span><span class="text" id="span_006370" smilref="Programming_Robots_with_ROS00019.smil#span_006370">.</span><span class="text" id="span_006371" smilref="Programming_Robots_with_ROS00019.smil#span_006371">on</span><span class="text" id="span_006372" smilref="Programming_Robots_with_ROS00019.smil#span_006372">)</span>
    <span class="text" id="span_006373" smilref="Programming_Robots_with_ROS00019.smil#span_006373">return</span> <span class="text" id="span_006374" smilref="Programming_Robots_with_ROS00019.smil#span_006374">LightResponse</span><span class="text" id="span_006375" smilref="Programming_Robots_with_ROS00019.smil#span_006375">(</span><span class="text" id="span_006376" smilref="Programming_Robots_with_ROS00019.smil#span_006376">actuator</span><span class="text" id="span_006377" smilref="Programming_Robots_with_ROS00019.smil#span_006377">.</span><span class="text" id="span_006378" smilref="Programming_Robots_with_ROS00019.smil#span_006378">light_on</span><span class="text" id="span_006379" smilref="Programming_Robots_with_ROS00019.smil#span_006379">(</span><span class="text" id="span_006380" smilref="Programming_Robots_with_ROS00019.smil#span_006380">)</span><span class="text" id="span_006381" smilref="Programming_Robots_with_ROS00019.smil#span_006381">)</span>


<span class="text" id="span_006382" smilref="Programming_Robots_with_ROS00019.smil#span_006382">def</span> <span class="text" id="span_006383" smilref="Programming_Robots_with_ROS00019.smil#span_006383">rotation_callback</span><span class="text" id="span_006384" smilref="Programming_Robots_with_ROS00019.smil#span_006384">(</span><span class="text" id="span_006385" smilref="Programming_Robots_with_ROS00019.smil#span_006385">goal</span><span class="text" id="span_006386" smilref="Programming_Robots_with_ROS00019.smil#span_006386">)</span><span class="text" id="span_006387" smilref="Programming_Robots_with_ROS00019.smil#span_006387">:</span>
    <span class="text" id="span_006388" smilref="Programming_Robots_with_ROS00019.smil#span_006388">feedback</span> <span class="text" id="span_006389" smilref="Programming_Robots_with_ROS00019.smil#span_006389">=</span> <span class="text" id="span_006390" smilref="Programming_Robots_with_ROS00019.smil#span_006390">RotationFeedback</span><span class="text" id="span_006391" smilref="Programming_Robots_with_ROS00019.smil#span_006391">(</span><span class="text" id="span_006392" smilref="Programming_Robots_with_ROS00019.smil#span_006392">)</span>
    <span class="text" id="span_006393" smilref="Programming_Robots_with_ROS00019.smil#span_006393">result</span> <span class="text" id="span_006394" smilref="Programming_Robots_with_ROS00019.smil#span_006394">=</span> <span class="text" id="span_006395" smilref="Programming_Robots_with_ROS00019.smil#span_006395">RotationResult</span><span class="text" id="span_006396" smilref="Programming_Robots_with_ROS00019.smil#span_006396">(</span><span class="text" id="span_006397" smilref="Programming_Robots_with_ROS00019.smil#span_006397">)</span>

    <span class="text" id="span_006398" smilref="Programming_Robots_with_ROS00019.smil#span_006398">actuator</span><span class="text" id="span_006399" smilref="Programming_Robots_with_ROS00019.smil#span_006399">.</span><span class="text" id="span_006400" smilref="Programming_Robots_with_ROS00019.smil#span_006400">set_position</span><span class="text" id="span_006401" smilref="Programming_Robots_with_ROS00019.smil#span_006401">(</span><span class="text" id="span_006402" smilref="Programming_Robots_with_ROS00019.smil#span_006402">goal</span><span class="text" id="span_006403" smilref="Programming_Robots_with_ROS00019.smil#span_006403">.</span><span class="text" id="span_006404" smilref="Programming_Robots_with_ROS00019.smil#span_006404">orientation</span><span class="text" id="span_006405" smilref="Programming_Robots_with_ROS00019.smil#span_006405">)</span>
    <span class="text" id="span_006406" smilref="Programming_Robots_with_ROS00019.smil#span_006406">success</span> <span class="text" id="span_006407" smilref="Programming_Robots_with_ROS00019.smil#span_006407">=</span> <span class="text" id="span_006408" smilref="Programming_Robots_with_ROS00019.smil#span_006408">True</span>

    <span class="text" id="span_006409" smilref="Programming_Robots_with_ROS00019.smil#span_006409">rate</span> <span class="text" id="span_006410" smilref="Programming_Robots_with_ROS00019.smil#span_006410">=</span> <span class="text" id="span_006411" smilref="Programming_Robots_with_ROS00019.smil#span_006411">rospy</span><span class="text" id="span_006412" smilref="Programming_Robots_with_ROS00019.smil#span_006412">.</span><span class="text" id="span_006413" smilref="Programming_Robots_with_ROS00019.smil#span_006413">Rate</span><span class="text" id="span_006414" smilref="Programming_Robots_with_ROS00019.smil#span_006414">(</span><span class="text" id="span_006415" smilref="Programming_Robots_with_ROS00019.smil#span_006415">10</span><span class="text" id="span_006416" smilref="Programming_Robots_with_ROS00019.smil#span_006416">)</span>
    <span class="text" id="span_006417" smilref="Programming_Robots_with_ROS00019.smil#span_006417">while</span> <span class="text" id="span_006418" smilref="Programming_Robots_with_ROS00019.smil#span_006418">fabs</span><span class="text" id="span_006419" smilref="Programming_Robots_with_ROS00019.smil#span_006419">(</span><span class="text" id="span_006420" smilref="Programming_Robots_with_ROS00019.smil#span_006420">goal</span><span class="text" id="span_006421" smilref="Programming_Robots_with_ROS00019.smil#span_006421">.</span><span class="text" id="span_006422" smilref="Programming_Robots_with_ROS00019.smil#span_006422">orientation</span> <span class="text" id="span_006423" smilref="Programming_Robots_with_ROS00019.smil#span_006423">-</span> <span class="text" id="span_006424" smilref="Programming_Robots_with_ROS00020.smil#span_006424">actuator</span><span class="text" id="span_006425" smilref="Programming_Robots_with_ROS00020.smil#span_006425">.</span><span class="text" id="span_006426" smilref="Programming_Robots_with_ROS00020.smil#span_006426">position</span><span class="text" id="span_006427" smilref="Programming_Robots_with_ROS00020.smil#span_006427">(</span><span class="text" id="span_006428" smilref="Programming_Robots_with_ROS00020.smil#span_006428">)</span><span class="text" id="span_006429" smilref="Programming_Robots_with_ROS00020.smil#span_006429">)</span> <span class="text" id="span_006430" smilref="Programming_Robots_with_ROS00020.smil#span_006430">&gt;</span> <span class="text" id="span_006431" smilref="Programming_Robots_with_ROS00020.smil#span_006431">0.01</span><span class="text" id="span_006432" smilref="Programming_Robots_with_ROS00020.smil#span_006432">:</span>
        <span class="text" id="span_006433" smilref="Programming_Robots_with_ROS00020.smil#span_006433">if</span> <span class="text" id="span_006434" smilref="Programming_Robots_with_ROS00020.smil#span_006434">a</span><span class="text" id="span_006435" smilref="Programming_Robots_with_ROS00020.smil#span_006435">.</span><span class="text" id="span_006436" smilref="Programming_Robots_with_ROS00020.smil#span_006436">is_preempt_requested</span><span class="text" id="span_006437" smilref="Programming_Robots_with_ROS00020.smil#span_006437">(</span><span class="text" id="span_006438" smilref="Programming_Robots_with_ROS00020.smil#span_006438">)</span><span class="text" id="span_006439" smilref="Programming_Robots_with_ROS00020.smil#span_006439">:</span>
            <span class="text" id="span_006440" smilref="Programming_Robots_with_ROS00020.smil#span_006440">success</span> <span class="text" id="span_006441" smilref="Programming_Robots_with_ROS00020.smil#span_006441">=</span> <span class="text" id="span_006442" smilref="Programming_Robots_with_ROS00020.smil#span_006442">False</span>
            <span class="text" id="span_006443" smilref="Programming_Robots_with_ROS00020.smil#span_006443">break</span><span class="text" id="span_006444" smilref="Programming_Robots_with_ROS00020.smil#span_006444">;</span>

        <span class="text" id="span_006445" smilref="Programming_Robots_with_ROS00020.smil#span_006445">feedback</span><span class="text" id="span_006446" smilref="Programming_Robots_with_ROS00020.smil#span_006446">.</span><span class="text" id="span_006447" smilref="Programming_Robots_with_ROS00020.smil#span_006447">current_orientation</span> <span class="text" id="span_006448" smilref="Programming_Robots_with_ROS00020.smil#span_006448">=</span> <span class="text" id="span_006449" smilref="Programming_Robots_with_ROS00020.smil#span_006449">actuator</span><span class="text" id="span_006450" smilref="Programming_Robots_with_ROS00020.smil#span_006450">.</span><span class="text" id="span_006451" smilref="Programming_Robots_with_ROS00020.smil#span_006451">position</span><span class="text" id="span_006452" smilref="Programming_Robots_with_ROS00020.smil#span_006452">(</span><span class="text" id="span_006453" smilref="Programming_Robots_with_ROS00020.smil#span_006453">)</span>
        <span class="text" id="span_006454" smilref="Programming_Robots_with_ROS00020.smil#span_006454">a</span><span class="text" id="span_006455" smilref="Programming_Robots_with_ROS00020.smil#span_006455">.</span><span class="text" id="span_006456" smilref="Programming_Robots_with_ROS00020.smil#span_006456">publish_feedback</span><span class="text" id="span_006457" smilref="Programming_Robots_with_ROS00020.smil#span_006457">(</span><span class="text" id="span_006458" smilref="Programming_Robots_with_ROS00020.smil#span_006458">feedback</span><span class="text" id="span_006459" smilref="Programming_Robots_with_ROS00020.smil#span_006459">)</span>
        <span class="text" id="span_006460" smilref="Programming_Robots_with_ROS00020.smil#span_006460">rate</span><span class="text" id="span_006461" smilref="Programming_Robots_with_ROS00020.smil#span_006461">.</span><span class="text" id="span_006462" smilref="Programming_Robots_with_ROS00020.smil#span_006462">sleep</span><span class="text" id="span_006463" smilref="Programming_Robots_with_ROS00020.smil#span_006463">(</span><span class="text" id="span_006464" smilref="Programming_Robots_with_ROS00020.smil#span_006464">)</span>

    <span class="text" id="span_006465" smilref="Programming_Robots_with_ROS00020.smil#span_006465">result</span><span class="text" id="span_006466" smilref="Programming_Robots_with_ROS00020.smil#span_006466">.</span><span class="text" id="span_006467" smilref="Programming_Robots_with_ROS00020.smil#span_006467">final_orientation</span> <span class="text" id="span_006468" smilref="Programming_Robots_with_ROS00020.smil#span_006468">=</span> <span class="text" id="span_006469" smilref="Programming_Robots_with_ROS00020.smil#span_006469">actuator</span><span class="text" id="span_006470" smilref="Programming_Robots_with_ROS00020.smil#span_006470">.</span><span class="text" id="span_006471" smilref="Programming_Robots_with_ROS00020.smil#span_006471">position</span><span class="text" id="span_006472" smilref="Programming_Robots_with_ROS00020.smil#span_006472">(</span><span class="text" id="span_006473" smilref="Programming_Robots_with_ROS00020.smil#span_006473">)</span>
    <span class="text" id="span_006474" smilref="Programming_Robots_with_ROS00020.smil#span_006474">if</span> <span class="text" id="span_006475" smilref="Programming_Robots_with_ROS00020.smil#span_006475">success</span><span class="text" id="span_006476" smilref="Programming_Robots_with_ROS00020.smil#span_006476">:</span>
        <span class="text" id="span_006477" smilref="Programming_Robots_with_ROS00020.smil#span_006477">a</span><span class="text" id="span_006478" smilref="Programming_Robots_with_ROS00020.smil#span_006478">.</span><span class="text" id="span_006479" smilref="Programming_Robots_with_ROS00020.smil#span_006479">set_succeeded</span><span class="text" id="span_006480" smilref="Programming_Robots_with_ROS00020.smil#span_006480">(</span><span class="text" id="span_006481" smilref="Programming_Robots_with_ROS00020.smil#span_006481">result</span><span class="text" id="span_006482" smilref="Programming_Robots_with_ROS00020.smil#span_006482">)</span>
    <span class="text" id="span_006483" smilref="Programming_Robots_with_ROS00020.smil#span_006483">else</span><span class="text" id="span_006484" smilref="Programming_Robots_with_ROS00020.smil#span_006484">:</span>
        <span class="text" id="span_006485" smilref="Programming_Robots_with_ROS00020.smil#span_006485">a</span><span class="text" id="span_006486" smilref="Programming_Robots_with_ROS00020.smil#span_006486">.</span><span class="text" id="span_006487" smilref="Programming_Robots_with_ROS00020.smil#span_006487">set_preempted</span><span class="text" id="span_006488" smilref="Programming_Robots_with_ROS00020.smil#span_006488">(</span><span class="text" id="span_006489" smilref="Programming_Robots_with_ROS00020.smil#span_006489">result</span><span class="text" id="span_006490" smilref="Programming_Robots_with_ROS00020.smil#span_006490">)</span>


<span class="text" id="span_006491" smilref="Programming_Robots_with_ROS00020.smil#span_006491">if</span> <span class="text" id="span_006492" smilref="Programming_Robots_with_ROS00020.smil#span_006492">__name__</span> <span class="text" id="span_006493" smilref="Programming_Robots_with_ROS00020.smil#span_006493">==</span> <span class="text" id="span_006494" smilref="Programming_Robots_with_ROS00020.smil#span_006494">'</span><span class="text" id="span_006495" smilref="Programming_Robots_with_ROS00020.smil#span_006495">__main__</span><span class="text" id="span_006496" smilref="Programming_Robots_with_ROS00020.smil#span_006496">'</span><span class="text" id="span_006497" smilref="Programming_Robots_with_ROS00020.smil#span_006497">:</span>
    <span class="text" id="span_006498" smilref="Programming_Robots_with_ROS00020.smil#span_006498">actuator</span> <span class="text" id="span_006499" smilref="Programming_Robots_with_ROS00020.smil#span_006499">=</span> <span class="text" id="span_006500" smilref="Programming_Robots_with_ROS00020.smil#span_006500">FakeActuator</span><span class="text" id="span_006501" smilref="Programming_Robots_with_ROS00020.smil#span_006501">(</span><span class="text" id="span_006502" smilref="Programming_Robots_with_ROS00020.smil#span_006502">)</span> <a class="co" id="ch15-co_your_own_sensors_and_actuators_CO4-1" href="#ch15-callout_your_own_sensors_and_actuators_CO4-1" external="false"><img src="images/1.jpg" alt="1" id="img_000262" /></a>

    <span class="text" id="span_006503" smilref="Programming_Robots_with_ROS00020.smil#span_006503"># Initialize the node</span>
    <span class="text" id="span_006504" smilref="Programming_Robots_with_ROS00020.smil#span_006504">rospy</span><span class="text" id="span_006505" smilref="Programming_Robots_with_ROS00020.smil#span_006505">.</span><span class="text" id="span_006506" smilref="Programming_Robots_with_ROS00020.smil#span_006506">init_node</span><span class="text" id="span_006507" smilref="Programming_Robots_with_ROS00020.smil#span_006507">(</span><span class="text" id="span_006508" smilref="Programming_Robots_with_ROS00020.smil#span_006508">'</span><span class="text" id="span_006509" smilref="Programming_Robots_with_ROS00020.smil#span_006509">fake</span><span class="text" id="span_006510" smilref="Programming_Robots_with_ROS00020.smil#span_006510">'</span><span class="text" id="span_006511" smilref="Programming_Robots_with_ROS00020.smil#span_006511">)</span>

    <span class="text" id="span_006512" smilref="Programming_Robots_with_ROS00020.smil#span_006512"># Topic for the volume</span>
    <span class="text" id="span_006513" smilref="Programming_Robots_with_ROS00020.smil#span_006513">t</span> <span class="text" id="span_006514" smilref="Programming_Robots_with_ROS00020.smil#span_006514">=</span> <span class="text" id="span_006515" smilref="Programming_Robots_with_ROS00020.smil#span_006515">rospy</span><span class="text" id="span_006516" smilref="Programming_Robots_with_ROS00020.smil#span_006516">.</span><span class="text" id="span_006517" smilref="Programming_Robots_with_ROS00020.smil#span_006517">Subscriber</span><span class="text" id="span_006518" smilref="Programming_Robots_with_ROS00020.smil#span_006518">(</span><span class="text" id="span_006519" smilref="Programming_Robots_with_ROS00020.smil#span_006519">'</span><span class="text" id="span_006520" smilref="Programming_Robots_with_ROS00020.smil#span_006520">fake/volume</span><span class="text" id="span_006521" smilref="Programming_Robots_with_ROS00020.smil#span_006521">'</span><span class="text" id="span_006522" smilref="Programming_Robots_with_ROS00020.smil#span_006522">,</span> <span class="text" id="span_006523" smilref="Programming_Robots_with_ROS00020.smil#span_006523">Float32</span><span class="text" id="span_006524" smilref="Programming_Robots_with_ROS00020.smil#span_006524">,</span> <span class="text" id="span_006525" smilref="Programming_Robots_with_ROS00020.smil#span_006525">volume_callback</span><span class="text" id="span_006526" smilref="Programming_Robots_with_ROS00020.smil#span_006526">)</span> <a class="co" id="ch15-co_your_own_sensors_and_actuators_CO4-2" href="#ch15-callout_your_own_sensors_and_actuators_CO4-2" external="false"><img src="images/2.jpg" alt="2" id="img_000263" /></a>

    <span class="text" id="span_006527" smilref="Programming_Robots_with_ROS00020.smil#span_006527"># Service for the light</span>
    <span class="text" id="span_006528" smilref="Programming_Robots_with_ROS00020.smil#span_006528">s</span> <span class="text" id="span_006529" smilref="Programming_Robots_with_ROS00020.smil#span_006529">=</span> <span class="text" id="span_006530" smilref="Programming_Robots_with_ROS00020.smil#span_006530">rospy</span><span class="text" id="span_006531" smilref="Programming_Robots_with_ROS00020.smil#span_006531">.</span><span class="text" id="span_006532" smilref="Programming_Robots_with_ROS00020.smil#span_006532">Service</span><span class="text" id="span_006533" smilref="Programming_Robots_with_ROS00020.smil#span_006533">(</span><span class="text" id="span_006534" smilref="Programming_Robots_with_ROS00020.smil#span_006534">'</span><span class="text" id="span_006535" smilref="Programming_Robots_with_ROS00020.smil#span_006535">fake/light</span><span class="text" id="span_006536" smilref="Programming_Robots_with_ROS00020.smil#span_006536">'</span><span class="text" id="span_006537" smilref="Programming_Robots_with_ROS00020.smil#span_006537">,</span> <span class="text" id="span_006538" smilref="Programming_Robots_with_ROS00020.smil#span_006538">Light</span><span class="text" id="span_006539" smilref="Programming_Robots_with_ROS00020.smil#span_006539">,</span> <span class="text" id="span_006540" smilref="Programming_Robots_with_ROS00020.smil#span_006540">light_callback</span><span class="text" id="span_006541" smilref="Programming_Robots_with_ROS00020.smil#span_006541">)</span> <a class="co" id="ch15-co_your_own_sensors_and_actuators_CO4-3" href="#ch15-callout_your_own_sensors_and_actuators_CO4-3" external="false"><img src="images/3.jpg" alt="3" id="img_000264" /></a>

    <span class="text" id="span_006542" smilref="Programming_Robots_with_ROS00020.smil#span_006542"># Action for the position</span>
    <span class="text" id="span_006543" smilref="Programming_Robots_with_ROS00020.smil#span_006543">a</span> <span class="text" id="span_006544" smilref="Programming_Robots_with_ROS00020.smil#span_006544">=</span> <span class="text" id="span_006545" smilref="Programming_Robots_with_ROS00020.smil#span_006545">actionlib</span><span class="text" id="span_006546" smilref="Programming_Robots_with_ROS00020.smil#span_006546">.</span><span class="text" id="span_006547" smilref="Programming_Robots_with_ROS00020.smil#span_006547">SimpleActionServer</span><span class="text" id="span_006548" smilref="Programming_Robots_with_ROS00020.smil#span_006548">(</span><span class="text" id="span_006549" smilref="Programming_Robots_with_ROS00020.smil#span_006549">'</span><span class="text" id="span_006550" smilref="Programming_Robots_with_ROS00020.smil#span_006550">fake/position</span><span class="text" id="span_006551" smilref="Programming_Robots_with_ROS00020.smil#span_006551">'</span><span class="text" id="span_006552" smilref="Programming_Robots_with_ROS00020.smil#span_006552">,</span> <span class="text" id="span_006553" smilref="Programming_Robots_with_ROS00020.smil#span_006553">RotationAction</span><span class="text" id="span_006554" smilref="Programming_Robots_with_ROS00020.smil#span_006554">,</span> <a class="co" id="ch15-co_your_own_sensors_and_actuators_CO4-4" href="#ch15-callout_your_own_sensors_and_actuators_CO4-4" external="false"><img src="images/4.jpg" alt="4" id="img_000265" /></a>
                                     <span class="text" id="span_006555" smilref="Programming_Robots_with_ROS00020.smil#span_006555">execute_cb</span><span class="text" id="span_006556" smilref="Programming_Robots_with_ROS00020.smil#span_006556">=</span><span class="text" id="span_006557" smilref="Programming_Robots_with_ROS00020.smil#span_006557">rotation_callback</span><span class="text" id="span_006558" smilref="Programming_Robots_with_ROS00020.smil#span_006558">,</span>
                                     <span class="text" id="span_006559" smilref="Programming_Robots_with_ROS00020.smil#span_006559">auto_start</span><span class="text" id="span_006560" smilref="Programming_Robots_with_ROS00020.smil#span_006560">=</span><span class="text" id="span_006561" smilref="Programming_Robots_with_ROS00020.smil#span_006561">False</span><span class="text" id="span_006562" smilref="Programming_Robots_with_ROS00020.smil#span_006562">)</span>
    <span class="text" id="span_006563" smilref="Programming_Robots_with_ROS00020.smil#span_006563">a</span><span class="text" id="span_006564" smilref="Programming_Robots_with_ROS00020.smil#span_006564">.</span><span class="text" id="span_006565" smilref="Programming_Robots_with_ROS00020.smil#span_006565">start</span><span class="text" id="span_006566" smilref="Programming_Robots_with_ROS00020.smil#span_006566">(</span><span class="text" id="span_006567" smilref="Programming_Robots_with_ROS00020.smil#span_006567">)</span>

    <span class="text" id="span_006568" smilref="Programming_Robots_with_ROS00020.smil#span_006568"># Start everything</span>
    <span class="text" id="span_006569" smilref="Programming_Robots_with_ROS00020.smil#span_006569">rospy</span><span class="text" id="span_006570" smilref="Programming_Robots_with_ROS00020.smil#span_006570">.</span><span class="text" id="span_006571" smilref="Programming_Robots_with_ROS00020.smil#span_006571">spin</span><span class="text" id="span_006572" smilref="Programming_Robots_with_ROS00020.smil#span_006572">(</span><span class="text" id="span_006573" smilref="Programming_Robots_with_ROS00020.smil#span_006573">)</span></code>
                      </p>
                    </div>
                    <dl class="calloutlist" id="dl_000021">
                      <dt id="dt_000101">
                        <a class="co" id="ch15-callout_your_own_sensors_and_actuators_CO4-1" href="#ch15-co_your_own_sensors_and_actuators_CO4-1" external="false">
                          <img src="images/1.jpg" alt="1" id="img_000266" />
                        </a>
                      </dt>
                      <dd id="dd_000101">
                        <p id="p_001034" smilref="Programming_Robots_with_ROS00020.smil#p_001034">Initialize the actuator, and do any setup you need to make it work.</p>
                      </dd>
                      <dt id="dt_000102">
                        <a class="co" id="ch15-callout_your_own_sensors_and_actuators_CO4-2" href="#ch15-co_your_own_sensors_and_actuators_CO4-2" external="false">
                          <img src="images/2.jpg" alt="2" id="img_000267" />
                        </a>
                      </dt>
                      <dd id="dd_000102">
                        <p id="p_001035" smilref="Programming_Robots_with_ROS00020.smil#p_001035">Subscribe to a topic for volume commands.</p>
                      </dd>
                      <dt id="dt_000103">
                        <a class="co" id="ch15-callout_your_own_sensors_and_actuators_CO4-3" href="#ch15-co_your_own_sensors_and_actuators_CO4-3" external="false">
                          <img src="images/3.jpg" alt="3" id="img_000268" />
                        </a>
                      </dt>
                      <dd id="dd_000103">
                        <p id="p_001036" smilref="Programming_Robots_with_ROS00020.smil#p_001036">Announce a service to control the light.</p>
                      </dd>
                      <dt id="dt_000104">
                        <a class="co" id="ch15-callout_your_own_sensors_and_actuators_CO4-4" href="#ch15-co_your_own_sensors_and_actuators_CO4-4" external="false">
                          <img src="images/4.jpg" alt="4" id="img_000269" />
                        </a>
                      </dt>
                      <dd id="dd_000104">
                        <p id="p_001037" smilref="Programming_Robots_with_ROS00020.smil#p_001037">Announce an action to control the rotational position.</p>
                      </dd>
                    </dl>
                    <p id="p_001038">
                      <span class="text" id="span_006574" smilref="Programming_Robots_with_ROS00020.smil#span_006574">The</span>
                      <code xml:space="preserve" id="code_001460" smilref="Programming_Robots_with_ROS00020.smil#code_001460">import</code>
                      <span class="text" id="span_006575" smilref="Programming_Robots_with_ROS00020.smil#span_006575">statements deserve a little extra attention:</span>
                    </p>
                    <p id="p_001039">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_001461" smilref="Programming_Robots_with_ROS00020.smil#code_001461">#!/usr/bin/env python

from fake_actuator import FakeActuator

import rospy
import actionlib
from std_msgs.msg import Float32

from sensors.srv import Light,LightResponse
from sensors.msg import RotationAction,RotationFeedback,RotationResult</code>
                    </p>
                    <p id="ch15-idp38928560" data-type="indexterm" data-startref="ix_15-sensors_actuators-asciidoc6">
                      <span class="text" id="span_006576" smilref="Programming_Robots_with_ROS00020.smil#span_006576">The first statement imports the previously defined service definitions for the light,</span>
                      <code xml:space="preserve" id="code_001462" smilref="Programming_Robots_with_ROS00020.smil#code_001462">Light</code>
                      <span class="text" id="span_006577" smilref="Programming_Robots_with_ROS00020.smil#span_006577">and</span>
                      <code xml:space="preserve" id="code_001463" smilref="Programming_Robots_with_ROS00020.smil#code_001463">LightResponse</code>
                      <span class="text" id="span_006578" smilref="Programming_Robots_with_ROS00020.smil#span_006578">, which we discussed. The second statement pulls in the definitions for all of the messages related to the rotation action interface, also discussed previously. We need all three to make the action work.</span>
                    </p>
                  </div>
                </section>
                <section data-type="sect2" data-pdf-bookmark="Design 1: Continuous Actuation" id="section_000158">
                  <h1 id="h1_000336" smilref="Programming_Robots_with_ROS00020.smil#h1_000336">Design 1: Continuous Actuation</h1>
                  <div class="sect2" id="ch15-idp38929328">
                    <p id="ch15-idp40181920" data-type="indexterm" data-primary="actuators" data-secondary="wrapper for continuous actuation" smilref="Programming_Robots_with_ROS00020.smil#ch15-idp40181920">We can treat the volume control on our fake actuator as an example of continuous actuation; we're going to constantly send it volumes--floating-point numbers in the range 0 to 1--and it's going to set the volume appropriately. The commands are one-way: we're going to set the volume, but there's no feedback on what the current volume is. If we wanted to confirm that the volume actually did get set, then we would use a service call, similar to the example in the next section. However, for now, we're going to assume that the volume will always get set correctly. We're also implicitly assuming that setting the volume is something that happens quickly and is not buffered by the actuator; that is, that the device is capable of responding to a volume-setting request before the next request comes in. If this isn't the case, then one of the other designs might be more appropriate.</p>
                    <p id="p_001040">
                      <span class="text" id="span_006579" smilref="Programming_Robots_with_ROS00020.smil#span_006579">So, we're going to continually send volume commands to the device, and the volume is going to get set quickly. In this case, a topic is a good choice for the communication mechanism. Since we're going to be sending floating-point numbers corresponding to the fraction of total volume to set, we've chosen to use</span>
                      <code xml:space="preserve" id="code_001464" smilref="Programming_Robots_with_ROS00020.smil#code_001464">Float32</code>
                      <span class="text" id="span_006580" smilref="Programming_Robots_with_ROS00020.smil#span_006580">for the message type. We could have defined our own unique message type for this: say, one called</span>
                      <code xml:space="preserve" id="code_001465" smilref="Programming_Robots_with_ROS00020.smil#code_001465">Volume</code>
                      <span class="text" id="span_006581" smilref="Programming_Robots_with_ROS00020.smil#span_006581">and containing a single-floating point number. However, using a more generic type makes it easier to use the topic interface, since we don't have to convert from a</span>
                      <code xml:space="preserve" id="code_001466" smilref="Programming_Robots_with_ROS00020.smil#code_001466">Float32</code>
                      <span class="text" id="span_006582" smilref="Programming_Robots_with_ROS00020.smil#span_006582">published by other nodes into the new data type.</span>
                    </p>
                    <p id="p_001041">
                      <span class="text" id="span_006583" smilref="Programming_Robots_with_ROS00020.smil#span_006583">We've chosen to name the topic</span>
                      <code xml:space="preserve" id="code_001467" smilref="Programming_Robots_with_ROS00020.smil#code_001467">fake/volume</code>
                      <span class="text" id="span_006584" smilref="Programming_Robots_with_ROS00020.smil#span_006584">. It's a common practice, when a single device has a number of different interfaces, to use a namespace like this. All interfaces for the device start with</span>
                      <code xml:space="preserve" id="code_001468" smilref="Programming_Robots_with_ROS00020.smil#code_001468">fake/</code>
                      <span class="text" id="span_006585" smilref="Programming_Robots_with_ROS00020.smil#span_006585">and end with a descriptive name.</span>
                    </p>
                    <p id="p_001042">
                      <span class="text" id="span_006586" smilref="Programming_Robots_with_ROS00020.smil#span_006586">As you might imagine, the code for the callback connected with this topic, shown in</span>
                      <a data-type="xref" href="#ch15-fake_actuator_topic" external="false" id="a_000258" smilref="Programming_Robots_with_ROS00020.smil#a_000258">Example 15-7</a>
                      <span class="text" id="span_006587" smilref="Programming_Robots_with_ROS00020.smil#span_006587">, is quite simple. All we do is call the volume-setting function with the value from the message. In this case, we're multiplying the value by 100, since the device expects an integer from 0 to 100 and the topic delivers a floating-point number between 1 and 0. We're also capping the range of the value we pass on to be between 0 and 100, so that the volume stays within the bounds expected by the device. The callback is a natural place to do this sort of conversion and bounds checking. It's also a good place to enforce software limits on your hardware devices. For example, if you never wanted the volume on the device to go above 80% of maximum, this would be the place to make that happen.</span>
                    </p>
                    <h1 id="h1_000337" smilref="Programming_Robots_with_ROS00020.smil#h1_000337">Example 15-7. The topic callback for the volume control</h1>
                    <div id="ch15-fake_actuator_topic" data-type="example">
                      <p id="p_001043">
                        <code class="preserve-whitespace" xml:space="preserve" id="code_001469" smilref="Programming_Robots_with_ROS00020.smil#code_001469">def volume_callback(msg):
    actuator.set_volume(min(100, max(0, int(msg.data * 100))))</code>
                      </p>
                    </div>
                    <p id="p_001044">
                      <span class="text" id="span_006588" smilref="Programming_Robots_with_ROS00020.smil#span_006588">The</span>
                      <code xml:space="preserve" id="code_001470" smilref="Programming_Robots_with_ROS00020.smil#code_001470">set_volume()</code>
                      <span class="text" id="span_006589" smilref="Programming_Robots_with_ROS00020.smil#span_006589">call in</span>
                      <a data-type="xref" href="#ch15-fake_actuator_topic" external="false" id="a_000259" smilref="Programming_Robots_with_ROS00020.smil#a_000259">Example 15-7</a>
                      <span class="text" id="span_006590" smilref="Programming_Robots_with_ROS00020.smil#span_006590">deserves some extra explanation, because it's a bit gnarly. We're taking the value in the message (which is a</span>
                      <code xml:space="preserve" id="code_001471" smilref="Programming_Robots_with_ROS00020.smil#code_001471">float</code>
                      <span class="text" id="span_006591" smilref="Programming_Robots_with_ROS00020.smil#span_006591">between 0 and 1), scaling it up to a number between 0 and 100, then converting it to an integer with the</span>
                      <code xml:space="preserve" id="code_001472" smilref="Programming_Robots_with_ROS00020.smil#code_001472">int()</code>
                      <span class="text" id="span_006592" smilref="Programming_Robots_with_ROS00020.smil#span_006592">function. We're then clipping it to the range 0 to 100, just case we got bad data in the message. The</span>
                      <code xml:space="preserve" id="code_001473" smilref="Programming_Robots_with_ROS00020.smil#code_001473">max()</code>
                      <span class="text" id="span_006593" smilref="Programming_Robots_with_ROS00020.smil#span_006593">function returns</span>
                      <code xml:space="preserve" id="code_001474" smilref="Programming_Robots_with_ROS00020.smil#code_001474">0</code>
                      <span class="text" id="span_006594" smilref="Programming_Robots_with_ROS00020.smil#span_006594">if the scaled value is less than zero, and the value itself otherwise. This establishes a lower bound. This value then goes through the</span>
                      <code xml:space="preserve" id="code_001475" smilref="Programming_Robots_with_ROS00020.smil#code_001475">min()</code>
                      <span class="text" id="span_006595" smilref="Programming_Robots_with_ROS00020.smil#span_006595">function, which returns</span>
                      <code xml:space="preserve" id="code_001476" smilref="Programming_Robots_with_ROS00020.smil#code_001476">100</code>
                      <span class="text" id="span_006596" smilref="Programming_Robots_with_ROS00020.smil#span_006596">or the value, whichever is lower. These two steps ensure that the resulting value passed to</span>
                      <code xml:space="preserve" id="code_001477" smilref="Programming_Robots_with_ROS00020.smil#code_001477">set_volume()</code>
                      <span class="text" id="span_006597" smilref="Programming_Robots_with_ROS00020.smil#span_006597">is an integer between 0 and 100, inclusive.</span>
                    </p>
                  </div>
                </section>
                <section data-type="sect2" data-pdf-bookmark="Design 2: Infrequent, Instantaneous Actuation" id="section_000159">
                  <h1 id="h1_000338" smilref="Programming_Robots_with_ROS00020.smil#h1_000338">Design 2: Infrequent, Instantaneous Actuation</h1>
                  <div class="sect2" id="ch15-idp40156528">
                    <p data-type="indexterm" data-primary="actuators" data-secondary="wrapper for infrequent, instantaneous actuation" id="ch15-idp40157936">
                      <span class="text" id="span_006598" smilref="Programming_Robots_with_ROS00020.smil#span_006598">ROS networking is "best effort," and there's always a (small) chance that a message sent over a topic won't get received and acted upon. ROS topics are built on TCP sockets, which have guaranteed delivery, but a message can still be lost if the</span>
                      <span class="keep-together" id="span_006599" smilref="Programming_Robots_with_ROS00020.smil#span_006599">subscriber's</span>
                      <span class="text" id="span_006600" smilref="Programming_Robots_with_ROS00020.smil#span_006600">message buffer overflows. The chances of this are small, at least for well-designed code, but it can happen. If you're sending frequent commands, and one of them doesn't make it through, then the assumption is that it isn't the end of the world; as long as packets are only dropped occasionally, they're being sent often enough that it won't cause any serious problems.</span>
                    </p>
                    <p id="p_001045" smilref="Programming_Robots_with_ROS00020.smil#p_001045">However, if you're only sending commands occasionally, losing one of them is a bigger deal, and you'd like to be sure that they all get through. In this case, the right thing to do is to use a service call. This allows you to issue a command to the actuator and wait until you get an acknowledgment back, often containing information on whether or not the command was successful.</p>
                    <p id="p_001046">
                      <span class="text" id="span_006601" smilref="Programming_Robots_with_ROS00020.smil#span_006601">The light on our fake sensor is a good example of the sort of actuator that should use a service-call interface. Turning the light on or off is a discrete operation that, presumably, we won't be doing at a high frequency. The code for the service callback, shown in</span>
                      <a data-type="xref" href="#ch15-fake_actuator_service" external="false" id="a_000260" smilref="Programming_Robots_with_ROS00020.smil#a_000260">Example 15-8</a>
                      <span class="text" id="span_006602" smilref="Programming_Robots_with_ROS00020.smil#span_006602">, is almost as simple as the code for the topic callback in the previous section.</span>
                    </p>
                    <h1 id="h1_000339" smilref="Programming_Robots_with_ROS00020.smil#h1_000339">Example 15-8. The service callback for the volume control</h1>
                    <div id="ch15-fake_actuator_service" data-type="example">
                      <p id="p_001047">
                        <code class="preserve-whitespace" xml:space="preserve" id="code_001478" smilref="Programming_Robots_with_ROS00020.smil#code_001478">def light_callback(request):
    actuator.toggle_light(request.on)
    return LightResponse(actuator.light_on())</code>
                      </p>
                    </div>
                    <p id="p_001048">
                      <span class="text" id="span_006603" smilref="Programming_Robots_with_ROS00020.smil#span_006603">All that the code does is pass on the command (a Boolean representing the desired state of the light) to the device API. It then returns a Boolean with the current state of the light. The node calling the service can compare the command to the return value, and verify that everything worked as expected. The service definition is shown in</span>
                      <a data-type="xref" href="#ch15-fake_actuator_service_definition" external="false" id="a_000261" smilref="Programming_Robots_with_ROS00020.smil#a_000261">Example 15-9</a>
                      <span class="text" id="span_006604" smilref="Programming_Robots_with_ROS00020.smil#span_006604">; it's simply a single Boolean parameter to the service call, representing the desired state of the light, and another Boolean for the return value, representing the actual state of the light after the call.</span>
                    </p>
                    <h1 id="h1_000340" smilref="Programming_Robots_with_ROS00020.smil#h1_000340">Example 15-9. Light.srv</h1>
                    <div id="ch15-fake_actuator_service_definition" data-type="example">
                      <p id="p_001049">
                        <code class="preserve-whitespace" xml:space="preserve" id="code_001479" smilref="Programming_Robots_with_ROS00020.smil#code_001479">bool on
---
bool status</code>
                      </p>
                    </div>
                    <p id="p_001050" smilref="Programming_Robots_with_ROS00020.smil#p_001050">Service calls are synchronous; the calling node has to wait for a response from the server. This is fine if the command doesn't take long to perform or if the calling node can afford to wait. However, it can cause problems if the command takes a long time to execute and you don't want to wait for it to finish. In this case, you should use an action interface for your actuator.</p>
                  </div>
                </section>
                <section data-type="sect2" data-pdf-bookmark="Design 3: Infrequent, Extended Actuation" id="section_000160">
                  <h1 id="h1_000341" smilref="Programming_Robots_with_ROS00020.smil#h1_000341">Design 3: Infrequent, Extended Actuation</h1>
                  <div class="sect2" id="ch15-idp40032432">
                    <p id="ch15-ix_15-sensors_actuators-asciidoc8" data-type="indexterm" data-primary="actuators" data-secondary="wrapper for infrequent, extended actuation">
                      <span class="text" id="span_006605" smilref="Programming_Robots_with_ROS00020.smil#span_006605">As we learned in</span>
                      <a data-type="xref" href="#ch05-actions" external="false" id="a_000262" smilref="Programming_Robots_with_ROS00020.smil#a_000262">Chapter 5</a>
                      <span class="text" id="span_006606" smilref="Programming_Robots_with_ROS00020.smil#span_006606">, action interfaces are similar to service interfaces in that they allow the calling node to be sure that the command was received and acted upon. However, since actions are asynchronous, they don't require the calling node to wait for the command to finish. This is ideal for actions that can take a long time. A great example of this is the navigation stack: we don't want to have to wait until the robot navigates to a goal location, but we do want to know when it gets there.</span>
                    </p>
                    <p id="p_001051">
                      <span class="text" id="span_006607" smilref="Programming_Robots_with_ROS00020.smil#span_006607">In our fake actuator, the</span>
                      <code xml:space="preserve" id="code_001480" smilref="Programming_Robots_with_ROS00020.smil#code_001480">set_position()</code>
                      <span class="text" id="span_006608" smilref="Programming_Robots_with_ROS00020.smil#span_006608">function sets a desired rotational position. However, the actuator has a limited rotational speed and cannot instantaneously move from one position to another. This makes it a good candidate for an action interface. The code for the action callback is shown in</span>
                      <a data-type="xref" href="#ch15-fake_actuator_action" external="false" id="a_000263" smilref="Programming_Robots_with_ROS00020.smil#a_000263">Example 15-10</a>
                      <span class="text" id="span_006609" smilref="Programming_Robots_with_ROS00020.smil#span_006609">, and the action definition is shown in</span>
                      <a data-type="xref" href="#ch15-fake_actuator_action_definition" external="false" id="a_000264" smilref="Programming_Robots_with_ROS00020.smil#a_000264">Example 15-11</a>
                      <span class="text" id="span_006610" smilref="Programming_Robots_with_ROS00020.smil#span_006610">.</span>
                    </p>
                    <h1 id="h1_000342" smilref="Programming_Robots_with_ROS00020.smil#h1_000342">Example 15-10. The action callback for the volume control</h1>
                    <div id="ch15-fake_actuator_action" data-type="example">
                      <p id="p_001052">
                        <code class="preserve-whitespace" xml:space="preserve" id="code_001481" smilref="Programming_Robots_with_ROS00020.smil#code_001481">def rotation_callback(goal):
    feedback = RotationFeedback()
    result = RotationResult()

    actuator.set_position(goal.orientation)
    success = True

    rate = rospy.Rate(10)
    while fabs(goal.orientation - actuator.position()) &gt; 0.01:
        if a.is_preempt_requested():
            success = False
            break;

        feedback.current_orientation = actuator.position()
        a.publish_feedback(feedback)
        rate.sleep()

    result.final_orientation = actuator.position()
    if success:
        a.set_succeeded(result)
    else:
        a.set_preempted(result)</code>
                      </p>
                    </div>
                    <h1 id="h1_000343" smilref="Programming_Robots_with_ROS00020.smil#h1_000343">Example 15-11. Rotation.action</h1>
                    <div id="ch15-fake_actuator_action_definition" data-type="example">
                      <p id="p_001053">
                        <code class="preserve-whitespace" xml:space="preserve" id="code_001482" smilref="Programming_Robots_with_ROS00020.smil#code_001482">float32 orientation
---
float32 final_orientation
---
float32 current_orientation</code>
                      </p>
                    </div>
                    <p id="p_001054">
                      <span class="text" id="span_006611" smilref="Programming_Robots_with_ROS00020.smil#span_006611">We begin by allocating a</span>
                      <code xml:space="preserve" id="code_001483" smilref="Programming_Robots_with_ROS00020.smil#code_001483">RotationFeedback</code>
                      <span class="text" id="span_006612" smilref="Programming_Robots_with_ROS00020.smil#span_006612">and a</span>
                      <code xml:space="preserve" id="code_001484" smilref="Programming_Robots_with_ROS00020.smil#code_001484">RotationResult</code>
                      <span class="text" id="span_006613" smilref="Programming_Robots_with_ROS00020.smil#span_006613">to return incremental feedback on progress and the final position of the actuator, respectively. Both of these are floating-point numbers and correspond to positions of the actuator.</span>
                    </p>
                    <p id="p_001055">
                      <span class="text" id="span_006614" smilref="Programming_Robots_with_ROS00020.smil#span_006614">Next, we pass the requested position to the device API, which starts the actuator turning. Then, we loop until the actual position of the actuator is close to the requested position. On each pass through this loop, we check to see if the action has been preempted (and break the loop if it has) and send back the current position as periodic feedback to the calling node. We use a</span>
                      <code xml:space="preserve" id="code_001485" smilref="Programming_Robots_with_ROS00020.smil#code_001485">Rate</code>
                      <span class="text" id="span_006615" smilref="Programming_Robots_with_ROS00020.smil#span_006615">instance to loop at 10 Hz. Finally, if the action was not preempted, we set its status to</span>
                      <code xml:space="preserve" id="code_001486" smilref="Programming_Robots_with_ROS00020.smil#code_001486">succeeded</code>
                      <span class="text" id="span_006616" smilref="Programming_Robots_with_ROS00020.smil#span_006616">and return the final position of the actuator.</span>
                    </p>
                    <p id="p_001056" smilref="Programming_Robots_with_ROS00020.smil#p_001056">This allows the calling node to issue a rotation command and not have to wait until it completes. It still gets periodic updates and notification of success or failure through the use of callbacks.</p>
                  </div>
                </section>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Summary" id="section_000161">
              <h1 id="h1_000344" smilref="Programming_Robots_with_ROS00020.smil#h1_000344">Summary</h1>
              <div class="sect1" id="ch15-idp39363120">
                <p id="ch15-idp39366640" data-type="indexterm" data-startref="ix_15-sensors_actuators-asciidoc5" smilref="Programming_Robots_with_ROS00020.smil#ch15-idp39366640">In this chapter, we've seen how to take a new sensor or actuator and write a wrapper for it to bring it into the ROS ecosystem. For sensors, once you decide on the message type, the delivery mechanism (topic, service, or action), and how to access measurements from the sensor, writing a wrapper is quite straightforward. For actuators, the mechanism is (largely) determined by how you are going to interact with the device. Topics are often a good choice if you're going to be constantly sending commands and can afford to lose a message occasionally. If you are going to send commands less frequently, or really need to make sure the commands were acted on, you should use a service (for things that happen quickly) or actions (for things that happen more slowly).</p>
                <p id="p_001057">
                  <span class="text" id="span_006617" smilref="Programming_Robots_with_ROS00020.smil#span_006617">Once you bring something new into ROS, the next step is to tell people about it. As we'll see in</span>
                  <a data-type="xref" href="#ch22-community" external="false" id="a_000265" smilref="Programming_Robots_with_ROS00020.smil#a_000265">Chapter 22</a>
                  <span class="text" id="span_006618" smilref="Programming_Robots_with_ROS00020.smil#span_006618">, one of the strongest parts of ROS is the community of people contributing to it. If you bring some new hardware into the ecosystem, you should think about hosting the code in a public place, writing up some documentation and a wiki page, and telling the community about it (see</span>
                  <a data-type="xref" href="#ch22-community" external="false" id="a_000266" smilref="Programming_Robots_with_ROS00020.smil#a_000266">Chapter 22</a>
                  <span class="text" id="span_006619" smilref="Programming_Robots_with_ROS00020.smil#span_006619">for details on how and where to do this). This will let others benefit from your hard work and will make ROS even stronger and better than it already is.</span>
                </p>
                <p data-type="indexterm" data-primary="libraries" data-secondary="pyttsx speech library" data-see="pyttsx" id="ch15-idp39374464" smilref="Programming_Robots_with_ROS00020.smil#ch15-idp39374464">Now that we've seen how we can add individual new sensors and actuators into ROS, the next few chapters look at how you can bring whole new robot platforms into the ecosystem.</p>
              </div>
            </section>
          </div>
        </section>
      </level1>
      <level1 id="ch16">
        <section xmlns:epub="http://www.idpf.org/2007/ops" data-type="chapter" epub:type="chapter" data-pdf-bookmark="Chapter 16. Your Own Mobile Robot" id="section_000162">
          <h1 id="h1_000345" smilref="Programming_Robots_with_ROS00020.smil#h1_000345">Chapter 16. Your Own Mobile Robot</h1>
          <div class="chapter" id="ch16-rossify_robots">
            <p id="ch16-ix_16-rossify_robots-asciidoc1" data-type="indexterm" data-primary="mobile robot" data-secondary="designing your own" smilref="Programming_Robots_with_ROS00020.smil#ch16-ix_16-rossify_robots-asciidoc1">One of the most rewarding (if occasionally frustrating) robotics projects you can undertake is to build your own robot. There are lots of great robots out there, but sometimes there isn't one that suits your specific needs. Or perhaps you just want to have the experience of designing and building a robot yourself. Whatever the reason, once you've built your amazing custom robot, how do you go about controlling it with ROS?</p>
            <p class="keep-together" id="p_001058" smilref="Programming_Robots_with_ROS00020.smil#p_001058">In this chapter, we'll walk through the steps of connecting a new robot (albeit one inspired by a very old robot) to ROS, allowing us to then use the libraries and tools that we've discussed throughout this book. While we're framing this chapter as a guide to ROS-controlling your from-scratch custom robot, it applies equally well to any robot that isn't already "ROS-ready," whether a robot built from a kit of parts or an off-the-shelf robot that doesn't yet have ROS support (an increasingly rare occurrence).</p>
            <section data-type="sect1" data-pdf-bookmark="TortoiseBot" id="section_000163">
              <h1 id="h1_000346" smilref="Programming_Robots_with_ROS00020.smil#h1_000346">TortoiseBot</h1>
              <div class="sect1" id="ch16-idp39395808">
                <p id="ch16-ix_16-rossify_robots-asciidoc2" data-type="indexterm" data-primary="Elsie (early mobile robot)" data-secondary="Elsie as inspiration for">
                  <span class="text" id="span_006620" smilref="Programming_Robots_with_ROS00020.smil#span_006620">We're going to build a new indoor mobile robot. For inspiration, we look to one of the very earliest such robots, which was called Elsie (</span>
                  <a data-type="xref" href="#ch16-grey_walter_tortoise" external="false" id="a_000267" smilref="Programming_Robots_with_ROS00020.smil#a_000267">Figure 16-1</a>
                  <span class="text" id="span_006621" smilref="Programming_Robots_with_ROS00020.smil#span_006621">). Elsie was one of a series of robots built in the late 1940s by Grey Walter, a British neurophysiologist (or perhaps cybernetician). A pioneer in his field, Walter built robots as part of his study of animal behavior. He believed that by building machines that exhibit complex, lifelike behavior, we can learn about how natural organisms work. This area of study would eventually come to be called</span>
                  <em id="em_000372" smilref="Programming_Robots_with_ROS00020.smil#em_000372">artificial life</em>
                  <span class="text" id="span_006622" smilref="Programming_Robots_with_ROS00020.smil#span_006622">.</span>
                </p>
                <figure id="figure_000080">
                  <h1 id="h1_000347" smilref="Programming_Robots_with_ROS00020.smil#h1_000347">Figure 16-1. Grey Walter's Elsie, one of a series of "Tortoise" robots built in the 1940s</h1>
                  <div id="ch16-grey_walter_tortoise" class="figure">
                    <img src="images/prwr_1601.jpg" alt="GreyWalterTortoise" id="img_000270" />
                  </div>
                </figure>
                <p id="p_001059">
                  <span class="text" id="span_006623" smilref="Programming_Robots_with_ROS00020.smil#span_006623">Walter's robots were amazing technological and scientific feats: hand-built, analog machines capable of randomly wandering around a room, avoiding (or at least bouncing off) obstacles, and returning to a charging station when their batteries ran low.</span>
                  <note id="ch16-idp39404112-marker">
                    <noteref data-type="noteref" idref="#ch16-idp39404112" id="noteref_000016" smilref="Programming_Robots_with_ROS00020.smil#noteref_000016">1</noteref>
                  </note>
                  <span class="text" id="span_006624" smilref="Programming_Robots_with_ROS00020.smil#span_006624">Walter's tortoise was built on a tricycle chassis, with two passive rear wheels and one steered and driven front wheel. Coupled to the front wheel was a photo diode that caused the robot to steer toward light sources (but, through clever electrical integration, to prefer not to get too close).</span>
                </p>
                <p id="p_001060">
                  <span class="text" id="span_006625" smilref="Programming_Robots_with_ROS00020.smil#span_006625">Because of their dome-like protective shells and their plodding movements, Walter called his robots</span>
                  <em id="em_000373" smilref="Programming_Robots_with_ROS00020.smil#em_000373">tortoises</em>
                  <span class="text" id="span_006626" smilref="Programming_Robots_with_ROS00020.smil#span_006626">. In homage to Walter's work, in this chapter we're going to build a</span>
                  <em id="em_000374" smilref="Programming_Robots_with_ROS00020.smil#em_000374">TortoiseBot</em>
                  <span class="text" id="span_006627" smilref="Programming_Robots_with_ROS00020.smil#span_006627">. Well, we won't actually build it, but we will explain what you need to know to control it from ROS, were you to build it yourself--and we will build a simulation model of it.</span>
                </p>
                <p id="p_001061" smilref="Programming_Robots_with_ROS00020.smil#p_001061">The steps to using ROS to control a TortoiseBot, or pretty much any new robot, are:</p>
                <list type="ol" id="list_000012">
                  <li id="li_000038">
                    <p id="p_001062" smilref="Programming_Robots_with_ROS00020.smil#p_001062">Decide on the ROS message interface.</p>
                  </li>
                  <li id="li_000039">
                    <p id="p_001063" smilref="Programming_Robots_with_ROS00020.smil#p_001063">Write drivers for the robot's motors.</p>
                  </li>
                  <li id="li_000040">
                    <p id="p_001064" smilref="Programming_Robots_with_ROS00020.smil#p_001064">Write a model of the robot's physical structure.</p>
                  </li>
                  <li id="li_000041">
                    <p id="p_001065" smilref="Programming_Robots_with_ROS00020.smil#p_001065">Extend the model with physical properties for use in simulation with Gazebo.</p>
                  </li>
                  <li id="li_000042">
                    <p id="p_001066">
                      <span class="text" id="span_006628" smilref="Programming_Robots_with_ROS00020.smil#span_006628">Publish coordinate transform data via</span>
                      <code xml:space="preserve" id="code_001487" smilref="Programming_Robots_with_ROS00020.smil#code_001487">tf</code>
                      <span class="text" id="span_006629" smilref="Programming_Robots_with_ROS00020.smil#span_006629">and visualize it with</span>
                      <code xml:space="preserve" id="code_001488" smilref="Programming_Robots_with_ROS00020.smil#code_001488">rviz</code>
                      <span class="text" id="span_006630" smilref="Programming_Robots_with_ROS00020.smil#span_006630">.</span>
                    </p>
                  </li>
                  <li id="li_000043">
                    <p id="p_001067" smilref="Programming_Robots_with_ROS00020.smil#p_001067">Add sensors, with driver and simulation support.</p>
                  </li>
                  <li id="li_000044">
                    <p id="p_001068" smilref="Programming_Robots_with_ROS00020.smil#p_001068">Apply standard algorithms, such as navigation.</p>
                  </li>
                </list>
                <p id="ch16-idp39192176" data-type="indexterm" data-startref="ix_16-rossify_robots-asciidoc2" smilref="Programming_Robots_with_ROS00020.smil#ch16-idp39192176">In the following sections and into the next chapter, we'll go through each step, explaining the decisions that need to be made along the way. At the end, you'll be ready to get your own custom robot (regardless of whether it bears any resemblance to the TortoiseBot) running ROS.</p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="ROS Message Interface" id="section_000164">
              <h1 id="h1_000348" smilref="Programming_Robots_with_ROS00020.smil#h1_000348">ROS Message Interface</h1>
              <div class="sect1" id="ch16-idp39192992">
                <p data-type="indexterm" data-primary="abstraction" id="ch16-idp39198672" data-secondary="interface for TortoiseBot">
                  <span class="text" id="span_006631" smilref="Programming_Robots_with_ROS00020.smil#span_006631">The first thing that we need to do is to get control of the mobile base. We want to write a ROS node that will communicate with the mobile base hardware, in whatever manner is available, then present to the rest of the system a standard ROS interface. This is a common and core concept of ROS:</span>
                  <em id="em_000375" smilref="Programming_Robots_with_ROS00020.smil#em_000375">abstraction</em>
                  <span class="text" id="span_006632" smilref="Programming_Robots_with_ROS00020.smil#span_006632">. Whatever the particulars of a specific robot, in ROS we want to make it look and interact like other robots to which it is similar. Then we can reuse an entire ecosystem of tools and libraries that are designed to work with a standard interface.</span>
                </p>
                <p id="p_001069" smilref="Programming_Robots_with_ROS00020.smil#p_001069">The defining characteristics of the TortoiseBot are that it is mobile and that it is confined to driving on the ground (as opposed to climbing walls or flying). More specifically, because of its kinematic configuration, the TortoiseBot can move in the ways that a tricycle can: it can translate forward and backward (along its x-axis), it can yaw (rotate about its z-axis), and it can do combinations of the two. The TortoiseBot cannot translate side to side (y-axis) or up and down (z-axis). Neither can it roll or pitch its body (rotation about its x- or y-axes, respectively). So, fundamentally, it is sufficient to control the TortoiseBot by sending it a pair of desired velocities:</p>
                <dl id="dl_000022">
                  <dt id="dt_000105">
                    <code xml:space="preserve" id="code_001489" smilref="Programming_Robots_with_ROS00020.smil#code_001489">vx</code>
                  </dt>
                  <dd id="dd_000105">
                    <p id="p_001070" smilref="Programming_Robots_with_ROS00020.smil#p_001070">Linear velocity along the x-axis (by convention, positive is forward).</p>
                  </dd>
                  <dt id="dt_000106">
                    <code xml:space="preserve" id="code_001490" smilref="Programming_Robots_with_ROS00020.smil#code_001490">vyaw</code>
                  </dt>
                  <dd id="dd_000106">
                    <p id="p_001071" smilref="Programming_Robots_with_ROS00020.smil#p_001071">Rotational velocity about the z-axis (by convention, positive is counter-clockwise).</p>
                  </dd>
                </dl>
                <p id="p_001072">
                  <span class="text" id="span_006633" smilref="Programming_Robots_with_ROS00020.smil#span_006633">In return, we would expect the robot to report its position and orientation in the plane as (</span>
                  <em id="em_000376">
                    <code xml:space="preserve" id="code_001491" smilref="Programming_Robots_with_ROS00020.smil#code_001491">x</code>
                  </em>
                  <span class="text" id="span_006634" smilref="Programming_Robots_with_ROS00020.smil#span_006634">,</span>
                  <em id="em_000377">
                    <code xml:space="preserve" id="code_001492" smilref="Programming_Robots_with_ROS00020.smil#code_001492">y</code>
                  </em>
                  <span class="text" id="span_006635" smilref="Programming_Robots_with_ROS00020.smil#span_006635">,</span>
                  <em id="em_000378">
                    <code xml:space="preserve" id="code_001493" smilref="Programming_Robots_with_ROS00020.smil#code_001493">yaw</code>
                  </em>
                  <span class="text" id="span_006636" smilref="Programming_Robots_with_ROS00020.smil#span_006636">).</span>
                </p>
                <p class="keep-together" id="p_001073" smilref="Programming_Robots_with_ROS00020.smil#p_001073">To represent robots like the TortoiseBot, the ROS community has arrived at the following ROS message interface, which is supported by a huge variety of mobile platforms:</p>
                <dl id="dl_000023">
                  <dt id="dt_000107">
                    <code xml:space="preserve" id="code_001494" smilref="Programming_Robots_with_ROS00020.smil#code_001494">geometry_msgs/Twist</code>
                    <span class="text" id="span_006637" smilref="Programming_Robots_with_ROS00020.smil#span_006637">(</span>
                    <code xml:space="preserve" id="code_001495" smilref="Programming_Robots_with_ROS00020.smil#code_001495">cmd_vel</code>
                    <span class="text" id="span_006638" smilref="Programming_Robots_with_ROS00020.smil#span_006638">topic)</span>
                  </dt>
                  <dd id="dd_000107">
                    <p id="p_001074" smilref="Programming_Robots_with_ROS00020.smil#p_001074">The desired velocity of the robot, sent as a command to the robot.</p>
                  </dd>
                  <dt id="dt_000108">
                    <code xml:space="preserve" id="code_001496" smilref="Programming_Robots_with_ROS00020.smil#code_001496">nav_msgs/Odometry</code>
                    <span class="text" id="span_006639" smilref="Programming_Robots_with_ROS00020.smil#span_006639">(</span>
                    <code xml:space="preserve" id="code_001497" smilref="Programming_Robots_with_ROS00020.smil#code_001497">odom</code>
                    <span class="text" id="span_006640" smilref="Programming_Robots_with_ROS00020.smil#span_006640">topic)</span>
                  </dt>
                  <dd id="dd_000108">
                    <p id="p_001075" smilref="Programming_Robots_with_ROS00020.smil#p_001075">The position and orientation of the robot, sent as data by the robot.</p>
                  </dd>
                </dl>
                <p id="p_001076">
                  <span class="text" id="span_006641" smilref="Programming_Robots_with_ROS00020.smil#span_006641">Let's see what's in each of those message types, using the</span>
                  <code xml:space="preserve" id="code_001498" smilref="Programming_Robots_with_ROS00020.smil#code_001498">rosmsg show</code>
                  <span class="text" id="span_006642" smilref="Programming_Robots_with_ROS00020.smil#span_006642">command, starting with</span>
                  <code xml:space="preserve" id="code_001499" smilref="Programming_Robots_with_ROS00020.smil#code_001499">geometry_msgs/Twist</code>
                  <span class="text" id="span_006643" smilref="Programming_Robots_with_ROS00020.smil#span_006643">:</span>
                </p>
                <p id="p_001077">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001500"><span class="text" id="span_006644" smilref="Programming_Robots_with_ROS00020.smil#span_006644">
user@hostname$ </span><strong id="strong_000169" smilref="Programming_Robots_with_ROS00020.smil#strong_000169">rosmsg show geometry_msgs/Twist</strong><span class="text" id="span_006645" smilref="Programming_Robots_with_ROS00020.smil#span_006645">
geometry_msgs/Vector3 linear
  float64 x
  float64 y
  float64 z
geometry_msgs/Vector3 angular
  float64 x
  float64 y
  float64 z
</span></code>
                </p>
                <p id="p_001078">
                  <span class="text" id="span_006646" smilref="Programming_Robots_with_ROS00020.smil#span_006646">That's simple enough: three linear velocities for translations along each axis, and three angular velocities for rotations about each axis. We don't actually need some of the fields (specifically,</span>
                  <code xml:space="preserve" id="code_001501" smilref="Programming_Robots_with_ROS00020.smil#code_001501">linear/y</code>
                  <span class="text" id="span_006647" smilref="Programming_Robots_with_ROS00020.smil#span_006647">,</span>
                  <code xml:space="preserve" id="code_001502" smilref="Programming_Robots_with_ROS00020.smil#code_001502">linear/z</code>
                  <span class="text" id="span_006648" smilref="Programming_Robots_with_ROS00020.smil#span_006648">,</span>
                  <code xml:space="preserve" id="code_001503" smilref="Programming_Robots_with_ROS00020.smil#code_001503">angular/x</code>
                  <span class="text" id="span_006649" smilref="Programming_Robots_with_ROS00020.smil#span_006649">, or</span>
                  <code xml:space="preserve" id="code_001504" smilref="Programming_Robots_with_ROS00020.smil#code_001504">angular/y</code>
                  <span class="text" id="span_006650" smilref="Programming_Robots_with_ROS00020.smil#span_006650">), but it's easy enough to ignore them and just take the values that we can use.</span>
                </p>
                <p id="p_001079">
                  <span class="text" id="span_006651" smilref="Programming_Robots_with_ROS00020.smil#span_006651">Now for</span>
                  <code xml:space="preserve" id="code_001505" smilref="Programming_Robots_with_ROS00020.smil#code_001505">nav_msgs/Odometry</code>
                  <span class="text" id="span_006652" smilref="Programming_Robots_with_ROS00020.smil#span_006652">:</span>
                </p>
                <p id="p_001080">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001506"><span class="text" id="span_006653" smilref="Programming_Robots_with_ROS00020.smil#span_006653">
user@hostname$ </span><strong id="strong_000170" smilref="Programming_Robots_with_ROS00020.smil#strong_000170">rosmsg show nav_msgs/Odometry</strong><span class="text" id="span_006654" smilref="Programming_Robots_with_ROS00020.smil#span_006654">
std_msgs/Header header
  uint32 seq
  time stamp
  string frame_id
string child_frame_id
geometry_msgs/PoseWithCovariance pose
  geometry_msgs/Pose pose
    geometry_msgs/Point position
      float64 x
      float64 y
      float64 z
    geometry_msgs/Quaternion orientation
      float64 x
      float64 y
      float64 z
      float64 w
  float64[36] covariance
geometry_msgs/TwistWithCovariance twist
  geometry_msgs/Twist twist
    geometry_msgs/Vector3 linear
      float64 x
      float64 y
      float64 z
    geometry_msgs/Vector3 angular
      float64 x
      float64 y
      float64 z
  float64[36] covariance
</span></code>
                </p>
                <h1 id="h1_000349" smilref="Programming_Robots_with_ROS00020.smil#h1_000349">Note</h1>
                <div data-type="note" epub:type="note" id="div_000033">
                  <p data-type="indexterm" data-primary="Header" id="ch16-idp39221744" data-secondary="header field in">
                    <span class="text" id="span_006655" smilref="Programming_Robots_with_ROS00020.smil#span_006655">Many ROS messages contain a field called</span>
                    <code xml:space="preserve" id="code_001507" smilref="Programming_Robots_with_ROS00020.smil#code_001507">header</code>
                    <span class="text" id="span_006656" smilref="Programming_Robots_with_ROS00020.smil#span_006656">, which has the type</span>
                    <code id="ch16-idp39222640" xml:space="preserve" smilref="Programming_Robots_with_ROS00020.smil#ch16-idp39222640">std_msgs/Header</code>
                    <span class="text" id="span_006657" smilref="Programming_Robots_with_ROS00020.smil#span_006657">. The</span>
                    <code xml:space="preserve" id="code_001508" smilref="Programming_Robots_with_ROS00020.smil#code_001508">header</code>
                    <span class="text" id="span_006658" smilref="Programming_Robots_with_ROS00020.smil#span_006658">is used to communicate two pieces of information that are necessary for the correct interpretation of many types of data in a robot system: at what time the data was produced and in what coordinate frame it is represented. The</span>
                    <code xml:space="preserve" id="code_001509" smilref="Programming_Robots_with_ROS00020.smil#code_001509">header</code>
                    <span class="text" id="span_006659" smilref="Programming_Robots_with_ROS00020.smil#span_006659">is treated specially in a few ways in ROS, notably in the</span>
                    <code xml:space="preserve" id="code_001510" smilref="Programming_Robots_with_ROS00020.smil#code_001510">tf</code>
                    <span class="text" id="span_006660" smilref="Programming_Robots_with_ROS00020.smil#span_006660">library, which provides tools for converting many types of data between coordinate frames. As a result, you can easily perform what would otherwise be complex operations, like converting range scans acquired at different times from different lasers into a common coordinate frame for processing.</span>
                  </p>
                </div>
                <p id="p_001081">
                  <span class="text" id="span_006661" smilref="Programming_Robots_with_ROS00020.smil#span_006661">That's an imposing message format, with a lot of fields to fill out. Fortunately, as with the</span>
                  <code xml:space="preserve" id="code_001511" smilref="Programming_Robots_with_ROS00020.smil#code_001511">geometry_msgs/Twist</code>
                  <span class="text" id="span_006662" smilref="Programming_Robots_with_ROS00020.smil#span_006662">message, we can leave a lot of them empty. To report the robot's position and orientation, we only really need to fill out the</span>
                  <code xml:space="preserve" id="code_001512" smilref="Programming_Robots_with_ROS00020.smil#code_001512">pose/pose/ posi tion</code>
                  <span class="text" id="span_006663" smilref="Programming_Robots_with_ROS00020.smil#span_006663">and</span>
                  <code xml:space="preserve" id="code_001513" smilref="Programming_Robots_with_ROS00020.smil#code_001513">pose/pose/orientation</code>
                  <span class="text" id="span_006664" smilref="Programming_Robots_with_ROS00020.smil#span_006664">fields, ignoring the</span>
                  <code xml:space="preserve" id="code_001514" smilref="Programming_Robots_with_ROS00020.smil#code_001514">covariance</code>
                  <span class="text" id="span_006665" smilref="Programming_Robots_with_ROS00020.smil#span_006665">fields (which are only needed for downstream components that reason about uncertainty). Within</span>
                  <code xml:space="preserve" id="code_001515" smilref="Programming_Robots_with_ROS00020.smil#code_001515">pose/pose/position</code>
                  <span class="text" id="span_006666" smilref="Programming_Robots_with_ROS00020.smil#span_006666">, we only need to fill out</span>
                  <code xml:space="preserve" id="code_001516" smilref="Programming_Robots_with_ROS00020.smil#code_001516">x</code>
                  <span class="text" id="span_006667" smilref="Programming_Robots_with_ROS00020.smil#span_006667">and</span>
                  <code xml:space="preserve" id="code_001517" smilref="Programming_Robots_with_ROS00020.smil#code_001517">y</code>
                  <span class="text" id="span_006668" smilref="Programming_Robots_with_ROS00020.smil#span_006668">. Working with</span>
                  <code xml:space="preserve" id="code_001518" smilref="Programming_Robots_with_ROS00020.smil#code_001518">pose/pose/orientation</code>
                  <span class="text" id="span_006669" smilref="Programming_Robots_with_ROS00020.smil#span_006669">is little more complex: even though the robot can only rotate about one axis (z), we need to construct a valid quaternion that represents a 3D orientation. Constructing and working with quaternions is outside the scope of this book; luckily there are lots of great tutorials online, as well as various helper utilities within ROS (a good place to start is the</span>
                  <a href="http://wiki.ros.org/tf?distro=indigo" external="true" id="a_000268">
                    <span class="text" id="span_006670" smilref="Programming_Robots_with_ROS00020.smil#span_006670">documentation for</span>
                    <code xml:space="preserve" id="code_001519" smilref="Programming_Robots_with_ROS00020.smil#code_001519">tf</code>
                  </a>
                  <span class="text" id="span_006671" smilref="Programming_Robots_with_ROS00020.smil#span_006671">).</span>
                </p>
                <p class="keep-together" id="p_001082">
                  <span class="text" id="span_006672" smilref="Programming_Robots_with_ROS00020.smil#span_006672">While we can ignore unneeded fields, it certainly seems like the</span>
                  <code xml:space="preserve" id="code_001520" smilref="Programming_Robots_with_ROS00020.smil#code_001520">cmd_vel</code>
                  <span class="text" id="span_006673" smilref="Programming_Robots_with_ROS00020.smil#span_006673">/</span>
                  <code xml:space="preserve" id="code_001521" smilref="Programming_Robots_with_ROS00020.smil#code_001521">odom</code>
                  <span class="text" id="span_006674" smilref="Programming_Robots_with_ROS00020.smil#span_006674">interface is overkill for our simple TortoiseBot, which just roams around on the ground. We could easily define a much simpler message interface for the TortoiseBot that includes just the fields that make sense for our robot. But then we wouldn't be compatible with other robots, or the tools and libraries that are designed to work with them. This is a common point of tension: when deciding what ROS interface to present, we must weigh specificity against interoperability, looking for the best fit for our robot that will give us the greatest ability to reuse existing tools and libraries. In the case of a mobile robot, it's much more powerful and flexible to use the</span>
                  <code xml:space="preserve" id="code_001522" smilref="Programming_Robots_with_ROS00020.smil#code_001522">cmd_vel</code>
                  <span class="text" id="span_006675" smilref="Programming_Robots_with_ROS00020.smil#span_006675">/</span>
                  <code xml:space="preserve" id="code_001523" smilref="Programming_Robots_with_ROS00020.smil#code_001523">odom</code>
                  <span class="text" id="span_006676" smilref="Programming_Robots_with_ROS00020.smil#span_006676">interface, which can represent arbitrary poses in 3D, with uncertainty. A common set of tools can operate on just about any mobile robot that uses this interface, whether it drives on the ground or flies in the sky.</span>
                </p>
                <p id="ch16-idp39238128" data-type="indexterm" data-startref="ix_16-rossify_robots-asciidoc4" smilref="Programming_Robots_with_ROS00020.smil#ch16-idp39238128">As a result, the ROS community has settled on this interface for mobile robots, including simple ones like our TortoiseBot. We'll follow suit.</p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Hardware Driver" id="section_000165">
              <h1 id="h1_000350" smilref="Programming_Robots_with_ROS00020.smil#h1_000350">Hardware Driver</h1>
              <div class="sect1" id="ch16-idp39193584">
                <p id="ch16-idp39239984" data-type="indexterm" data-primary="hardware driver" data-secondary="for TortoiseBot" smilref="Programming_Robots_with_ROS00020.smil#ch16-idp39239984">Now that we know what ROS interface to support, we need to actually write the node that will control the robot's motors and read from its encoders (sensors on the motors that measure how much each motor has turned). The details of this step, which is to write a driver, are very much dependent on how the robot hardware is designed and how you can communicate with it. There will be some kind of physical interface, such as USB, along with some kind of communication protocol, which is often custom. If you're lucky, there will also be some code that implements the communication protocol, in which case you could be saved a lot of effort (or not, if the code isn't structured or licensed in a way that makes it easily reusable).</p>
                <p id="p_001083">
                  <span class="text" id="span_006677" smilref="Programming_Robots_with_ROS00020.smil#span_006677">Whatever the communication details, you'll likely need to do some math in your driver node to convert between the robot's native representation of commands and data and the</span>
                  <code xml:space="preserve" id="code_001524" smilref="Programming_Robots_with_ROS00020.smil#code_001524">cmd_vel</code>
                  <span class="text" id="span_006678" smilref="Programming_Robots_with_ROS00020.smil#span_006678">/</span>
                  <code xml:space="preserve" id="code_001525" smilref="Programming_Robots_with_ROS00020.smil#code_001525">odom</code>
                  <span class="text" id="span_006679" smilref="Programming_Robots_with_ROS00020.smil#span_006679">ROS interface that we're going to support. For a robot like the TortoiseBot, this interface is sometimes referred to as the "unicycle model" because it treats the robot as a one-wheeled vehicle that can control its forward and turning speeds independently. The robot is not actually a unicycle, of course, so some translation is needed. For example, the robot might natively operate on a per-wheel basis, accepting desired velocities for individual wheels and reporting back individual wheel rotation data. In that case, your node will need to perform the necessary trigonometric calculations, using knowledge of the kinematic configuration of the robot (wheel diameters, axle lengths, etc.) to convert between individual wheel states and overall robot states. This calculation is usually straightforward; for more complex cases, consult a textbook that covers robot kinematics.</span>
                </p>
                <p id="p_001084">
                  <span class="text" id="span_006680" smilref="Programming_Robots_with_ROS00020.smil#span_006680">We can't provide general-purpose driver code for controlling a mobile base, but there are many examples within the ROS ecosystem to look at. For the rest of this chapter, we'll proceed under the assumption that you have written a driver node that supports the</span>
                  <code xml:space="preserve" id="code_001526" smilref="Programming_Robots_with_ROS00020.smil#code_001526">cmd_vel</code>
                  <span class="text" id="span_006681" smilref="Programming_Robots_with_ROS00020.smil#span_006681">/</span>
                  <code xml:space="preserve" id="code_001527" smilref="Programming_Robots_with_ROS00020.smil#code_001527">odom</code>
                  <span class="text" id="span_006682" smilref="Programming_Robots_with_ROS00020.smil#span_006682">interface and will discuss the other steps that are needed for ROS integration. The following steps, starting with writing a model, can all be tried out in simulation, without any hardware or drivers.</span>
                </p>
              </div>
            </section>
            <section data-type="sect1" class="pagebreak-before" data-pdf-bookmark="Modeling the Robot: URDF" id="section_000166">
              <h1 id="h1_000351" smilref="Programming_Robots_with_ROS00020.smil#h1_000351">Modeling the Robot: URDF</h1>
              <div class="sect1" id="ch16-rossify_robots_modeling">
                <p data-type="indexterm" data-primary="mobile robot" data-secondary="modeling with URDF" id="ch16-ix_16-rossify_robots-asciidoc7">
                  <span class="text" id="span_006683" smilref="Programming_Robots_with_ROS00020.smil#span_006683">To use our TortoiseBot with many standard ROS tools, we need to write down a</span>
                  <em id="em_000379" smilref="Programming_Robots_with_ROS00020.smil#em_000379">model</em>
                  <span class="text" id="span_006684" smilref="Programming_Robots_with_ROS00020.smil#span_006684">of the robot's kinematics. That is, we need to describe the physical configuration of the robot, such as how many wheels it has, where they are placed, and which directions they turn in. This information will be used by</span>
                  <code id="ch16-ix_16-rossify_robots-asciidoc8" xml:space="preserve" smilref="Programming_Robots_with_ROS00020.smil#ch16-ix_16-rossify_robots-asciidoc8">rviz</code>
                  <span class="text" id="span_006685" smilref="Programming_Robots_with_ROS00020.smil#span_006685">to visualize the state of the robot, by</span>
                  <code xml:space="preserve" id="code_001528" smilref="Programming_Robots_with_ROS00020.smil#code_001528">gazebo</code>
                  <span class="text" id="span_006686" smilref="Programming_Robots_with_ROS00020.smil#span_006686">to simulate it, and by systems like the navigation stack to make it drive around the world in a purposeful manner.</span>
                </p>
                <p id="p_001085">
                  <span class="text" id="span_006687" smilref="Programming_Robots_with_ROS00020.smil#span_006687">In ROS, we represent robot models in an XML format called Unified Robot Description Format (URDF). This format is designed to represent a wide variety of robots, from a two-wheeled toy to a walking humanoid. URDF is similar to the Simulation Description Format (SDF), which we used to build Gazebo environments around existing robots in</span>
                  <a data-type="xref" href="#ch11-chess_bot" external="false" id="a_000269" smilref="Programming_Robots_with_ROS00020.smil#a_000269">Chapter 11</a>
                  <span class="text" id="span_006688" smilref="Programming_Robots_with_ROS00020.smil#span_006688">and</span>
                  <a data-type="xref" href="#ch14-stockroom_bot" external="false" id="a_000270" smilref="Programming_Robots_with_ROS00020.smil#a_000270">Chapter 14</a>
                  <span class="text" id="span_006689" smilref="Programming_Robots_with_ROS00020.smil#span_006689">. While SDF includes extra features that are useful in simulation, URDF is required by most ROS tools, and Gazebo can understand it in addition to SDF. So, it's best to model a new robot using URDF.</span>
                </p>
                <p id="p_001086">
                  <span class="text" id="span_006690" smilref="Programming_Robots_with_ROS00020.smil#span_006690">In this section, we'll walk through constructing a URDF model for the TortoiseBot. For complete coverage of URDF syntax and features, consult the</span>
                  <a href="http://wiki.ros.org/urdf?distro=indigo" class="keep-together" external="true" id="a_000271" smilref="Programming_Robots_with_ROS00020.smil#a_000271">URDF documentation</a>
                  <span class="text" id="span_006691" smilref="Programming_Robots_with_ROS00020.smil#span_006691">.</span>
                </p>
                <p id="p_001087" smilref="Programming_Robots_with_ROS00020.smil#p_001087">To model the TortoiseBot, let's consider its essential components:</p>
                <list type="ul" id="list_000013">
                  <li id="li_000045">
                    <p id="p_001088" smilref="Programming_Robots_with_ROS00020.smil#p_001088">One chassis</p>
                  </li>
                  <li id="li_000046">
                    <p id="p_001089" smilref="Programming_Robots_with_ROS00020.smil#p_001089">Two rear wheels, attached to the chassis</p>
                  </li>
                  <li id="li_000047">
                    <p id="p_001090" smilref="Programming_Robots_with_ROS00020.smil#p_001090">One front caster, attached to the chassis</p>
                  </li>
                  <li id="li_000048">
                    <p id="p_001091" smilref="Programming_Robots_with_ROS00020.smil#p_001091">One front wheel, attached to the front caster</p>
                  </li>
                </list>
                <p id="p_001092" smilref="Programming_Robots_with_ROS00020.smil#p_001092">You can imagine these components forming a tree: the chassis is the root, with connections to each of the rear wheels and the front caster, which in turn is connected to the front wheel. In fact, URDF is only capable of representing robots whose kinematics can be described by a tree; looping structures are not allowed (fortunately, with the exception of a certain class of manufacturing robot, looping structures are fairly uncommon in robots).</p>
                <p id="p_001093" smilref="Programming_Robots_with_ROS00020.smil#p_001093">We will translate this tree-like narrative description of the TortoiseBot into the language of URDF, which is focused primarily on links and joints:</p>
                <list type="ul" id="list_000014">
                  <li id="li_000049">
                    <p data-type="indexterm" data-primary="links" data-secondary="in URDF" id="ch16-idp40079936">
                      <span class="text" id="span_006692" smilref="Programming_Robots_with_ROS00020.smil#span_006692">A</span>
                      <em id="em_000380" smilref="Programming_Robots_with_ROS00020.smil#em_000380">link</em>
                      <span class="text" id="span_006693" smilref="Programming_Robots_with_ROS00020.smil#span_006693">is a rigid body, such as a chassis or a wheel.</span>
                    </p>
                  </li>
                  <li id="li_000050">
                    <p data-type="indexterm" data-primary="joints" data-secondary="in URDF" id="ch16-idp40082256">
                      <span class="text" id="span_006694" smilref="Programming_Robots_with_ROS00020.smil#span_006694">A</span>
                      <em id="em_000381" smilref="Programming_Robots_with_ROS00020.smil#em_000381">joint</em>
                      <span class="text" id="span_006695" smilref="Programming_Robots_with_ROS00020.smil#span_006695">connects two links, defining how they can move with respect to each other.</span>
                    </p>
                  </li>
                </list>
                <p id="p_001094">
                  <span class="text" id="span_006696" smilref="Programming_Robots_with_ROS00020.smil#span_006696">Let's start our TortoiseBot model with one link for the chassis, shown in</span>
                  <a data-type="xref" href="#ch16-tortoisebot_urdf_1" external="false" id="a_000272" smilref="Programming_Robots_with_ROS00020.smil#a_000272">Example 16-1</a>
                  <span class="text" id="span_006697" smilref="Programming_Robots_with_ROS00020.smil#span_006697">.</span>
                </p>
                <h1 id="h1_000352" smilref="Programming_Robots_with_ROS00020.smil#h1_000352">Example 16-1. Model of the TortoiseBot chassis</h1>
                <div id="ch16-tortoisebot_urdf_1" data-type="example">
                  <p id="p_001095">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001529" smilref="Programming_Robots_with_ROS00020.smil#code_001529">&lt;?xml version="1.0"?&gt;
&lt;robot name="tortoisebot"&gt;
  &lt;link name="base_link"&gt;
    &lt;visual&gt;
      &lt;geometry&gt;
        &lt;box size="0.6 0.3 0.3"/&gt;
      &lt;/geometry&gt;
      &lt;material name="silver"&gt;
        &lt;color rgba="0.75 0.75 0.75 1"/&gt;
      &lt;/material&gt;
    &lt;/visual&gt;
  &lt;/link&gt;
&lt;/robot&gt;</code>
                  </p>
                </div>
                <p id="p_001096">
                  <span class="text" id="span_006698" smilref="Programming_Robots_with_ROS00020.smil#span_006698">This short model declares one link, called</span>
                  <code xml:space="preserve" id="code_001530" smilref="Programming_Robots_with_ROS00020.smil#code_001530">base_link</code>
                  <span class="text" id="span_006699" smilref="Programming_Robots_with_ROS00020.smil#span_006699">(this name is more common than</span>
                  <code xml:space="preserve" id="code_001531" smilref="Programming_Robots_with_ROS00020.smil#code_001531">chassis</code>
                  <span class="text" id="span_006700" smilref="Programming_Robots_with_ROS00020.smil#span_006700">in ROS systems), which is visually represented by a</span>
                  <code xml:space="preserve" id="code_001532" smilref="Programming_Robots_with_ROS00020.smil#code_001532">box</code>
                  <span class="text" id="span_006701" smilref="Programming_Robots_with_ROS00020.smil#span_006701">(a rectangular solid) that measures 0.6 m Ã 0.3 m Ã 0.3 m. As with all URDF links, by default, the origin of this box is its center; this fact will be important later, when we start attaching joints at offsets from links. We give the box a color that we call "silver," defined in the commonly used RGBA space, which combines levels of red, green, and blue to form a color (the A is for</span>
                  <em id="em_000382" smilref="Programming_Robots_with_ROS00020.smil#em_000382">alpha</em>
                  <span class="text" id="span_006702" smilref="Programming_Robots_with_ROS00020.smil#span_006702">, which represents transparency, where 0 is transparent and 1 is opaque). To see what this model looks like, save that code to a file called</span>
                  <em id="em_000383" smilref="Programming_Robots_with_ROS00020.smil#em_000383">tortoisebot.urdf</em>
                  <span class="text" id="span_006703" smilref="Programming_Robots_with_ROS00020.smil#span_006703">, and use</span>
                  <code xml:space="preserve" id="code_001533" smilref="Programming_Robots_with_ROS00020.smil#code_001533">roslauch urdf_tutorial/display.launch</code>
                  <span class="text" id="span_006704" smilref="Programming_Robots_with_ROS00020.smil#span_006704">to visualize it:</span>
                </p>
                <p id="p_001097">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001534"><span class="text" id="span_006705" smilref="Programming_Robots_with_ROS00020.smil#span_006705">
user@hostname$ </span><strong id="strong_000171" smilref="Programming_Robots_with_ROS00020.smil#strong_000171">roslaunch urdf_tutorial display.launch model:=tortoisebot.urdf</strong>
</code>
                </p>
                <p id="p_001098">
                  <span class="text" id="span_006706" smilref="Programming_Robots_with_ROS00020.smil#span_006706">You should see</span>
                  <code xml:space="preserve" id="code_001535" smilref="Programming_Robots_with_ROS00020.smil#code_001535">rviz</code>
                  <span class="text" id="span_006707" smilref="Programming_Robots_with_ROS00020.smil#span_006707">pop up, showing you a single oblong silver box, similar to</span>
                  <a data-type="xref" href="#ch16-tortoisebot_urdf_1_rviz" external="false" id="a_000273" smilref="Programming_Robots_with_ROS00020.smil#a_000273">Figure 16-2</a>
                  <span class="text" id="span_006708" smilref="Programming_Robots_with_ROS00020.smil#span_006708">.</span>
                </p>
                <h1 id="h1_000353" smilref="Programming_Robots_with_ROS00020.smil#h1_000353">Tip</h1>
                <div data-type="tip" id="div_000034">
                  <p data-type="indexterm" data-primary="urdf_to_graphiz" id="ch16-idp39459616">
                    <span class="text" id="span_006709" smilref="Programming_Robots_with_ROS00020.smil#span_006709">Another handy tool for visualizing URDF model structures is</span>
                    <code xml:space="preserve" id="code_001536" smilref="Programming_Robots_with_ROS00020.smil#code_001536">urdf_to_graphiz</code>
                    <span class="text" id="span_006710" smilref="Programming_Robots_with_ROS00020.smil#span_006710">. It parses a URDF file to produce a topological graph representation of the model, showing how links and joints are connected. Try it on your TortoiseBot model by running</span>
                    <code xml:space="preserve" id="code_001537" smilref="Programming_Robots_with_ROS00020.smil#code_001537">urdf_to_graphiz tortoisebot.urdf</code>
                    <span class="text" id="span_006711" smilref="Programming_Robots_with_ROS00020.smil#span_006711">, then opening the resulting</span>
                    <em id="em_000384" smilref="Programming_Robots_with_ROS00020.smil#em_000384">tortoisebot.pdf</em>
                    <span class="text" id="span_006712" smilref="Programming_Robots_with_ROS00020.smil#span_006712">file with a PDF viewer.</span>
                  </p>
                </div>
                <p id="p_001099">
                  <span class="text" id="span_006713" smilref="Programming_Robots_with_ROS00020.smil#span_006713">Next let's add the front caster. We can represent it as another oblong box, oriented vertically and attached to the front of the chassis, as shown in</span>
                  <a data-type="xref" href="#ch16-tortoisebot_urdf_2" external="false" id="a_000274" smilref="Programming_Robots_with_ROS00020.smil#a_000274">Example 16-2</a>
                  <span class="text" id="span_006714" smilref="Programming_Robots_with_ROS00020.smil#span_006714">.</span>
                </p>
                <figure id="figure_000081">
                  <h1 id="h1_000354" smilref="Programming_Robots_with_ROS00020.smil#h1_000354">Figure 16-2. Visualization of the TortoiseBot chassis</h1>
                  <div id="ch16-tortoisebot_urdf_1_rviz" class="figure">
                    <img src="images/prwr_1602.jpg" alt="TortoiseBot model" id="img_000271" />
                  </div>
                </figure>
                <h1 id="h1_000355" smilref="Programming_Robots_with_ROS00020.smil#h1_000355">Example 16-2. Code for the TortoiseBot front caster and joint</h1>
                <div id="ch16-tortoisebot_urdf_2" data-type="example">
                  <p id="p_001100">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001538" smilref="Programming_Robots_with_ROS00020.smil#code_001538">  &lt;link name="front_caster"&gt;
    &lt;visual&gt;
      &lt;geometry&gt;
        &lt;box size="0.1 0.1 0.3"/&gt;
      &lt;/geometry&gt;
      &lt;material name="silver"/&gt;
    &lt;/visual&gt;
  &lt;/link&gt;

  &lt;joint name="front_caster_joint" type="continuous"&gt;
    &lt;axis xyz="0 0 1"/&gt;
    &lt;parent link="base_link"/&gt;
    &lt;child link="front_caster"/&gt;
    &lt;origin rpy="0 0 0" xyz="0.3 0 0"/&gt;
  &lt;/joint&gt;</code>
                  </p>
                </div>
                <p id="ch16-idp39499040" data-type="indexterm" data-primary="joints" data-secondary="types supported by URDF">
                  <span class="text" id="span_006715" smilref="Programming_Robots_with_ROS00020.smil#span_006715">This snippet of URDF declares a second link,</span>
                  <code xml:space="preserve" id="code_001539" smilref="Programming_Robots_with_ROS00020.smil#code_001539">front_caster</code>
                  <span class="text" id="span_006716" smilref="Programming_Robots_with_ROS00020.smil#span_006716">, along with a joint,</span>
                  <code xml:space="preserve" id="code_001540" smilref="Programming_Robots_with_ROS00020.smil#code_001540">front_caster_joint</code>
                  <span class="text" id="span_006717" smilref="Programming_Robots_with_ROS00020.smil#span_006717">, which connects the</span>
                  <code xml:space="preserve" id="code_001541" smilref="Programming_Robots_with_ROS00020.smil#code_001541">front_caster</code>
                  <span class="text" id="span_006718" smilref="Programming_Robots_with_ROS00020.smil#span_006718">to the</span>
                  <code xml:space="preserve" id="code_001542" smilref="Programming_Robots_with_ROS00020.smil#code_001542">base_link</code>
                  <span class="text" id="span_006719" smilref="Programming_Robots_with_ROS00020.smil#span_006719">. The joint is</span>
                  <code xml:space="preserve" id="code_001543" smilref="Programming_Robots_with_ROS00020.smil#code_001543">continuous</code>
                  <span class="text" id="span_006720" smilref="Programming_Robots_with_ROS00020.smil#span_006720">, which means that it can rotate indefinitely in either direction about a given axis, which in this case is z-axis (determined by the</span>
                  <code xml:space="preserve" id="code_001544" smilref="Programming_Robots_with_ROS00020.smil#code_001544">axis</code>
                  <span class="text" id="span_006721" smilref="Programming_Robots_with_ROS00020.smil#span_006721">tag). The joint types supported by URDF are listed in</span>
                  <a data-type="xref" href="#ch16-urdf_joint_types" external="false" id="a_000275" smilref="Programming_Robots_with_ROS00020.smil#a_000275">Table 16-1</a>
                  <span class="text" id="span_006722" smilref="Programming_Robots_with_ROS00020.smil#span_006722">. The</span>
                  <code xml:space="preserve" id="code_001545" smilref="Programming_Robots_with_ROS00020.smil#code_001545">origin</code>
                  <span class="text" id="span_006723" smilref="Programming_Robots_with_ROS00020.smil#span_006723">of the joint is offset in</span>
                  <em id="em_000385" smilref="Programming_Robots_with_ROS00020.smil#em_000385">x</em>
                  <span class="text" id="span_006724" smilref="Programming_Robots_with_ROS00020.smil#span_006724">to place it at the front of its parent,</span>
                  <code xml:space="preserve" id="code_001546" smilref="Programming_Robots_with_ROS00020.smil#code_001546">base_link</code>
                  <span class="text" id="span_006725" smilref="Programming_Robots_with_ROS00020.smil#span_006725">.</span>
                </p>
                <table id="ch16-urdf_joint_types">
                  <caption id="caption_000003">
                    <span class="label" id="span_006726" smilref="Programming_Robots_with_ROS00020.smil#span_006726">Table 16-1.</span>
                    <span class="text" id="span_006727" smilref="Programming_Robots_with_ROS00020.smil#span_006727">Joint types supported by URDF</span>
                  </caption>
                  <thead id="thead_000003">
                    <tr id="tr_000019">
                      <th rowspan="1" colspan="1" id="th_000008" smilref="Programming_Robots_with_ROS00020.smil#th_000008">Name</th>
                      <th rowspan="1" colspan="1" id="th_000009" smilref="Programming_Robots_with_ROS00020.smil#th_000009">Description</th>
                    </tr>
                  </thead>
                  <tbody id="tbody_000003">
                    <tr id="tr_000020">
                      <td rowspan="1" colspan="1" id="td_000072">
                        <p id="p_001101">
                          <code xml:space="preserve" id="code_001547" smilref="Programming_Robots_with_ROS00020.smil#code_001547">continuous</code>
                        </p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000073">
                        <p id="p_001102" smilref="Programming_Robots_with_ROS00020.smil#p_001102">A joint that can rotate indefinitely about a single axis</p>
                      </td>
                    </tr>
                    <tr id="tr_000021">
                      <td rowspan="1" colspan="1" id="td_000074">
                        <p id="p_001103">
                          <code xml:space="preserve" id="code_001548" smilref="Programming_Robots_with_ROS00020.smil#code_001548">revolute</code>
                        </p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000075">
                        <p id="p_001104" smilref="Programming_Robots_with_ROS00020.smil#p_001104">Like a continuous joint, but with upper and lower angle limits</p>
                      </td>
                    </tr>
                    <tr id="tr_000022">
                      <td rowspan="1" colspan="1" id="td_000076">
                        <p id="p_001105">
                          <code xml:space="preserve" id="code_001549" smilref="Programming_Robots_with_ROS00020.smil#code_001549">prismatic</code>
                        </p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000077">
                        <p id="p_001106" smilref="Programming_Robots_with_ROS00020.smil#p_001106">A joint that slides linearly along a single axis, with upper and lower position limits</p>
                      </td>
                    </tr>
                    <tr id="tr_000023">
                      <td rowspan="1" colspan="1" id="td_000078">
                        <p id="p_001107">
                          <code xml:space="preserve" id="code_001550" smilref="Programming_Robots_with_ROS00020.smil#code_001550">planar</code>
                        </p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000079">
                        <p id="p_001108" smilref="Programming_Robots_with_ROS00020.smil#p_001108">A joint that allows translation and rotation perpendicular to a plane</p>
                      </td>
                    </tr>
                    <tr id="tr_000024">
                      <td rowspan="1" colspan="1" id="td_000080">
                        <p id="p_001109">
                          <code xml:space="preserve" id="code_001551" smilref="Programming_Robots_with_ROS00020.smil#code_001551">floating</code>
                        </p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000081">
                        <p id="p_001110" smilref="Programming_Robots_with_ROS00020.smil#p_001110">A joint that allows full six-dimensional translation and rotation</p>
                      </td>
                    </tr>
                    <tr id="tr_000025">
                      <td rowspan="1" colspan="1" id="td_000082">
                        <p id="p_001111">
                          <code xml:space="preserve" id="code_001552" smilref="Programming_Robots_with_ROS00020.smil#code_001552">fixed</code>
                        </p>
                      </td>
                      <td rowspan="1" colspan="1" id="td_000083">
                        <p id="p_001112" smilref="Programming_Robots_with_ROS00021.smil#p_001112">A special joint type that allows no motion</p>
                      </td>
                    </tr>
                  </tbody>
                </table>
                <p id="p_001113">
                  <span class="text" id="span_006728" smilref="Programming_Robots_with_ROS00021.smil#span_006728">Add the new code to</span>
                  <em id="em_000386" smilref="Programming_Robots_with_ROS00021.smil#em_000386">tortoisebot.urdf</em>
                  <span class="text" id="span_006729" smilref="Programming_Robots_with_ROS00021.smil#span_006729">, before the closing</span>
                  <code xml:space="preserve" id="code_001553" smilref="Programming_Robots_with_ROS00021.smil#code_001553">&lt;/robot&gt;</code>
                  <span class="text" id="span_006730" smilref="Programming_Robots_with_ROS00021.smil#span_006730">tag, and save it. Then launch the display tool again:</span>
                </p>
                <p id="p_001114">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001554"><span class="text" id="span_006731" smilref="Programming_Robots_with_ROS00021.smil#span_006731">
user@hostname$ </span><strong id="strong_000172" smilref="Programming_Robots_with_ROS00021.smil#strong_000172">roslaunch urdf_tutorial display.launch model:=tortoisebot.urdf</strong>
</code>
                </p>
                <p id="p_001115">
                  <span class="text" id="span_006732" smilref="Programming_Robots_with_ROS00021.smil#span_006732">Now</span>
                  <code xml:space="preserve" id="code_001555" smilref="Programming_Robots_with_ROS00021.smil#code_001555">rviz</code>
                  <span class="text" id="span_006733" smilref="Programming_Robots_with_ROS00021.smil#span_006733">will show you both links, with red, blue, and green markers designating the origin of the caster link, similar to</span>
                  <a data-type="xref" href="#ch16-tortoisebot_urdf_2_rviz" external="false" id="a_000276" smilref="Programming_Robots_with_ROS00021.smil#a_000276">Figure 16-3</a>
                  <span class="text" id="span_006734" smilref="Programming_Robots_with_ROS00021.smil#span_006734">.</span>
                </p>
                <p id="p_001116">
                  <span class="text" id="span_006735" smilref="Programming_Robots_with_ROS00021.smil#span_006735">The caster looks like it's in the right place, but how can we check whether the joint is working correctly? Fortunately, the URDF display tool can help. Launch it again, this time with the extra argument</span>
                  <code xml:space="preserve" id="code_001556" smilref="Programming_Robots_with_ROS00021.smil#code_001556">gui:=True</code>
                  <span class="text" id="span_006736" smilref="Programming_Robots_with_ROS00021.smil#span_006736">:</span>
                </p>
                <p id="p_001117">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001557"><span class="text" id="span_006737" smilref="Programming_Robots_with_ROS00021.smil#span_006737">
user@hostname$ </span><strong id="strong_000173" smilref="Programming_Robots_with_ROS00021.smil#strong_000173">roslaunch urdf_tutorial display.launch model:=tortoisebot.urdf \
  gui:=True</strong>
</code>
                </p>
                <p data-type="indexterm" data-primary="joint_state_publisher" id="ch16-ix_16-rossify_robots-asciidoc9">
                  <span class="text" id="span_006738" smilref="Programming_Robots_with_ROS00021.smil#span_006738">Now, in addition to</span>
                  <code xml:space="preserve" id="code_001558" smilref="Programming_Robots_with_ROS00021.smil#code_001558">rviz</code>
                  <span class="text" id="span_006739" smilref="Programming_Robots_with_ROS00021.smil#span_006739">, you'll get a small control GUI called the</span>
                  <code xml:space="preserve" id="code_001559" smilref="Programming_Robots_with_ROS00021.smil#code_001559">joint_state_ pub lisher</code>
                  <span class="text" id="span_006740" smilref="Programming_Robots_with_ROS00021.smil#span_006740">, similar to</span>
                  <a data-type="xref" href="#ch16-tortoisebot_urdf_2_jsp" external="false" id="a_000277" smilref="Programming_Robots_with_ROS00021.smil#a_000277">Figure 16-4</a>
                  <span class="text" id="span_006741" smilref="Programming_Robots_with_ROS00021.smil#span_006741">.</span>
                </p>
                <p id="p_001118">
                  <span class="text" id="span_006742" smilref="Programming_Robots_with_ROS00021.smil#span_006742">The</span>
                  <code xml:space="preserve" id="code_001560" smilref="Programming_Robots_with_ROS00021.smil#code_001560">joint_state_publisher</code>
                  <span class="text" id="span_006743" smilref="Programming_Robots_with_ROS00021.smil#span_006743">can be used to control our newly defined joint. Slide it back and forth, and in</span>
                  <code xml:space="preserve" id="code_001561" smilref="Programming_Robots_with_ROS00021.smil#code_001561">rviz</code>
                  <span class="text" id="span_006744" smilref="Programming_Robots_with_ROS00021.smil#span_006744">you should see the front caster rotate back and forth with respect to the chassis. As you can already, the URDF display tool, along with the control GUI, provides an invaluable way of checking, debugging, and fixing a URDF model.</span>
                </p>
                <figure id="figure_000082">
                  <h1 id="h1_000356" smilref="Programming_Robots_with_ROS00021.smil#h1_000356">Figure 16-3. Visualization of the TortoiseBot chassis, with front caster</h1>
                  <div id="ch16-tortoisebot_urdf_2_rviz" class="figure">
                    <img src="images/prwr_1603.jpg" alt="TortoiseBot model" id="img_000272" />
                  </div>
                </figure>
                <figure id="figure_000083">
                  <h1 id="h1_000357" smilref="Programming_Robots_with_ROS00021.smil#h1_000357">Figure 16-4. joint_state_publisher GUI for one joint</h1>
                  <div id="ch16-tortoisebot_urdf_2_jsp" class="figure">
                    <img src="images/prwr_1604.jpg" alt="TortoiseBot joint_state_publisher" id="img_000273" />
                  </div>
                </figure>
                <figure id="figure_000084">
                  <h1 id="h1_000358" smilref="Programming_Robots_with_ROS00021.smil#h1_000358">Figure 16-5. rqt_graph view of the nodes involved in visualizing and actuating the TortoiseBot model</h1>
                  <div id="ch16-tortoisebot_rqtgraph_1" class="figure">
                    <img src="images/prwr_1605.jpg" alt="TortoiseBot joint_state_publisher rqt_graph" id="img_000274" />
                  </div>
                </figure>
                <p id="p_001119">
                  <span class="text" id="span_006745" smilref="Programming_Robots_with_ROS00021.smil#span_006745">Let's stop to consider what's happening under the hood: we don't have a real robot, or even a simulation of a robot, so what is the</span>
                  <code xml:space="preserve" id="code_001562" smilref="Programming_Robots_with_ROS00021.smil#code_001562">joint_state_publisher</code>
                  <span class="text" id="span_006746" smilref="Programming_Robots_with_ROS00021.smil#span_006746">doing? There are actually several things going on, as shown in</span>
                  <a data-type="xref" href="#ch16-tortoisebot_rqtgraph_1" external="false" id="a_000278" smilref="Programming_Robots_with_ROS00021.smil#a_000278">Figure 16-5</a>
                  <span class="text" id="span_006747" smilref="Programming_Robots_with_ROS00021.smil#span_006747">:</span>
                </p>
                <list type="ul" id="list_000015">
                  <li id="li_000051">
                    <p id="p_001120">
                      <span class="text" id="span_006748" smilref="Programming_Robots_with_ROS00021.smil#span_006748">On startup, the URDF model of the robot was loaded into the parameter server, under the standard name</span>
                      <code xml:space="preserve" id="code_001563" smilref="Programming_Robots_with_ROS00021.smil#code_001563">robot_description</code>
                      <span class="text" id="span_006749" smilref="Programming_Robots_with_ROS00021.smil#span_006749">. To see the version that's in the parameter server, try</span>
                      <code xml:space="preserve" id="code_001564" smilref="Programming_Robots_with_ROS00021.smil#code_001564">rosparam get /robot_description</code>
                      <span class="text" id="span_006750" smilref="Programming_Robots_with_ROS00021.smil#span_006750">.</span>
                    </p>
                  </li>
                  <li id="li_000052">
                    <p id="p_001121">
                      <span class="text" id="span_006751" smilref="Programming_Robots_with_ROS00021.smil#span_006751">The</span>
                      <code xml:space="preserve" id="code_001565" smilref="Programming_Robots_with_ROS00021.smil#code_001565">joint_state_publisher</code>
                      <span class="text" id="span_006752" smilref="Programming_Robots_with_ROS00021.smil#span_006752">, in response to the slider state in the GUI, is publishing</span>
                      <code xml:space="preserve" id="code_001566" smilref="Programming_Robots_with_ROS00021.smil#code_001566">sensor_msgs/JointState</code>
                      <span class="text" id="span_006753" smilref="Programming_Robots_with_ROS00021.smil#span_006753">messages on the</span>
                      <code xml:space="preserve" id="code_001567" smilref="Programming_Robots_with_ROS00021.smil#code_001567">/joint_states</code>
                      <span class="text" id="span_006754" smilref="Programming_Robots_with_ROS00021.smil#span_006754">topic. Each message declares the position of each joint in the system. Try</span>
                      <code xml:space="preserve" id="code_001568" smilref="Programming_Robots_with_ROS00021.smil#code_001568">rostopic
echo / joint_ states</code>
                      <span class="text" id="span_006755" smilref="Programming_Robots_with_ROS00021.smil#span_006755">to see the data for yourself.</span>
                    </p>
                  </li>
                  <li id="li_000053">
                    <p id="p_001122">
                      <span class="text" id="span_006756" smilref="Programming_Robots_with_ROS00021.smil#span_006756">Another node, the</span>
                      <code xml:space="preserve" id="code_001569" smilref="Programming_Robots_with_ROS00021.smil#code_001569">robot_state_publisher</code>
                      <span class="text" id="span_006757" smilref="Programming_Robots_with_ROS00021.smil#span_006757">, read the URDF model from the parameter server and is subscribed to</span>
                      <code xml:space="preserve" id="code_001570" smilref="Programming_Robots_with_ROS00021.smil#code_001570">/joint_states</code>
                      <span class="text" id="span_006758" smilref="Programming_Robots_with_ROS00021.smil#span_006758">. This node combines the 1D position of each joint with the kinematic model to calculate a tree of 6D (position and orientation) coordinate transforms that describe where in space the robot's links are with respect to each other (in other words, it performs</span>
                      <em id="em_000387" smilref="Programming_Robots_with_ROS00021.smil#em_000387">forward kinematics</em>
                      <span class="text" id="span_006759" smilref="Programming_Robots_with_ROS00021.smil#span_006759">). This tree of transforms is published as</span>
                      <code xml:space="preserve" id="code_001571" smilref="Programming_Robots_with_ROS00021.smil#code_001571">tf2_msgs/TFMessage</code>
                      <span class="text" id="span_006760" smilref="Programming_Robots_with_ROS00021.smil#span_006760">messages on the</span>
                      <code xml:space="preserve" id="code_001572" smilref="Programming_Robots_with_ROS00021.smil#code_001572">/tf</code>
                      <span class="text" id="span_006761" smilref="Programming_Robots_with_ROS00021.smil#span_006761">topic.</span>
                    </p>
                  </li>
                  <li id="li_000054">
                    <p id="p_001123">
                      <span class="text" id="span_006762" smilref="Programming_Robots_with_ROS00021.smil#span_006762">Finally,</span>
                      <code xml:space="preserve" id="code_001573" smilref="Programming_Robots_with_ROS00021.smil#code_001573">rviz</code>
                      <span class="text" id="span_006763" smilref="Programming_Robots_with_ROS00021.smil#span_006763">also read the URDF model from the parameter server and is subscribed to</span>
                      <code xml:space="preserve" id="code_001574" smilref="Programming_Robots_with_ROS00021.smil#code_001574">/tf</code>
                      <span class="text" id="span_006764" smilref="Programming_Robots_with_ROS00021.smil#span_006764">, allowing it to visualize the positions and orientations of the robot's links.</span>
                    </p>
                  </li>
                </list>
                <p class="pagebreak-before" id="p_001124">
                  <span class="text" id="span_006765" smilref="Programming_Robots_with_ROS00021.smil#span_006765">This arrangement may seem overly complex, but its modularity allows for significant reuse of the pieces. For example, the</span>
                  <code xml:space="preserve" id="code_001575" smilref="Programming_Robots_with_ROS00021.smil#code_001575">robot_state_publisher</code>
                  <span class="text" id="span_006766" smilref="Programming_Robots_with_ROS00021.smil#span_006766">is commonly used with robots (both real and simulated) to handle the common task of forward kinematics, allowing the authors of robot drivers to publish just the individual joint state information and not the full coordinate transform tree. And, as you've already seen,</span>
                  <code xml:space="preserve" id="code_001576" smilref="Programming_Robots_with_ROS00021.smil#code_001576">rviz</code>
                  <span class="text" id="span_006767" smilref="Programming_Robots_with_ROS00021.smil#span_006767">is used extensively in ROS development, especially for visualization of data related to coordinate transforms. So, the URDF display tool is really just a combination of commonly used ROS tools with a simple frontend GUI that allows you to supply fake joint position information. This kind of reuse is a hallmark of the ROS philosophy (originally the Unix philosophy): build small reusable tools, then configure and combine them to do what you need.</span>
                </p>
                <p id="p_001125">
                  <span class="text" id="span_006768" smilref="Programming_Robots_with_ROS00021.smil#span_006768">Getting back to our TortoiseBot model, let's add the wheels, starting with the front wheel, shown in</span>
                  <a data-type="xref" href="#ch16-tortoisebot_urdf_3" external="false" id="a_000279" smilref="Programming_Robots_with_ROS00021.smil#a_000279">Example 16-3</a>
                  <span class="text" id="span_006769" smilref="Programming_Robots_with_ROS00021.smil#span_006769">.</span>
                </p>
                <h1 id="h1_000359" smilref="Programming_Robots_with_ROS00021.smil#h1_000359">Example 16-3. Code for the TortoiseBot front wheel and joint</h1>
                <div id="ch16-tortoisebot_urdf_3" data-type="example">
                  <p id="p_001126">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001577" smilref="Programming_Robots_with_ROS00021.smil#code_001577">  &lt;link name="front_wheel"&gt;
    &lt;visual&gt;
      &lt;geometry&gt;
        &lt;cylinder length="0.05" radius="0.035"/&gt;
      &lt;/geometry&gt;
      &lt;material name="black"/&gt;
    &lt;/visual&gt;
  &lt;/link&gt;

  &lt;joint name="front_wheel_joint" type="continuous"&gt;
    &lt;axis xyz="0 0 1"/&gt;
    &lt;parent link="front_caster"/&gt;
    &lt;child link="front_wheel"/&gt;
    &lt;origin rpy="-1.5708 0 0" xyz="0.05 0 -.15"/&gt;
  &lt;/joint&gt;</code>
                  </p>
                </div>
                <p id="p_001127">
                  <span class="text" id="span_006770" smilref="Programming_Robots_with_ROS00021.smil#span_006770">This URDF snippet declares a new link for the wheel itself, represented as a cylinder, and a new continuous joint to connect the wheel to the caster. Note that the</span>
                  <code xml:space="preserve" id="code_001578" smilref="Programming_Robots_with_ROS00021.smil#code_001578">origin</code>
                  <span class="text" id="span_006771" smilref="Programming_Robots_with_ROS00021.smil#span_006771">of the joint is offset in</span>
                  <em id="em_000388" smilref="Programming_Robots_with_ROS00021.smil#em_000388">y</em>
                  <span class="text" id="span_006772" smilref="Programming_Robots_with_ROS00021.smil#span_006772">and</span>
                  <em id="em_000389" smilref="Programming_Robots_with_ROS00021.smil#em_000389">z</em>
                  <span class="text" id="span_006773" smilref="Programming_Robots_with_ROS00021.smil#span_006773">to move it to the front bottom of the caster, and also rotated about</span>
                  <em id="em_000390" smilref="Programming_Robots_with_ROS00021.smil#em_000390">x</em>
                  <span class="text" id="span_006774" smilref="Programming_Robots_with_ROS00021.smil#span_006774">to put the round part of the wheel on the ground. Run the display tool again to check the result. Now you'll have two sliders in the</span>
                  <code xml:space="preserve" id="code_001579" smilref="Programming_Robots_with_ROS00021.smil#code_001579">joint_state_publisher</code>
                  <span class="text" id="span_006775" smilref="Programming_Robots_with_ROS00021.smil#span_006775">GUI, one for the caster joint and one for the front wheel joint. Try them both to check the rotation axes and directions.</span>
                </p>
                <p class="pagebreak-before" id="p_001128">
                  <span class="text" id="span_006776" smilref="Programming_Robots_with_ROS00021.smil#span_006776">Finally, similar to the front wheel, let's add the rear wheels, shown in</span>
                  <a data-type="xref" href="#ch16-tortoisebot_urdf_4" external="false" id="a_000280" smilref="Programming_Robots_with_ROS00021.smil#a_000280">Example 16-4</a>
                  <span class="text" id="span_006777" smilref="Programming_Robots_with_ROS00021.smil#span_006777">.</span>
                </p>
                <h1 id="h1_000360" smilref="Programming_Robots_with_ROS00021.smil#h1_000360">Example 16-4. Code for the TortoiseBot rear wheels and joints</h1>
                <div id="ch16-tortoisebot_urdf_4" data-type="example">
                  <p id="p_001129">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001580" smilref="Programming_Robots_with_ROS00021.smil#code_001580">  &lt;link name="right_wheel"&gt;
    &lt;visual&gt;
      &lt;geometry&gt;
        &lt;cylinder length="0.05" radius="0.035"/&gt;
      &lt;/geometry&gt;
      &lt;material name="black"&gt;
        &lt;color rgba="0 0 0 1"/&gt;
      &lt;/material&gt;
    &lt;/visual&gt;
  &lt;/link&gt;

  &lt;joint name="right_wheel_joint" type="continuous"&gt;
    &lt;axis xyz="0 0 1"/&gt;
    &lt;parent link="base_link"/&gt;
    &lt;child link="right_wheel"/&gt;
    &lt;origin rpy="-1.5708 0 0" xyz="-0.2825 -0.125 -.15"/&gt;
  &lt;/joint&gt;

  &lt;link name="left_wheel"&gt;
    &lt;visual&gt;
      &lt;geometry&gt;
        &lt;cylinder length="0.05" radius="0.035"/&gt;
      &lt;/geometry&gt;
      &lt;material name="black"/&gt;
    &lt;/visual&gt;
  &lt;/link&gt;

  &lt;joint name="left_wheel_joint" type="continuous"&gt;
    &lt;axis xyz="0 0 1"/&gt;
    &lt;parent link="base_link"/&gt;
    &lt;child link="left_wheel"/&gt;
    &lt;origin rpy="-1.5708 0 0" xyz="-0.2825 0.125 -.15"/&gt;
  &lt;/joint&gt;</code>
                  </p>
                </div>
                <p id="ch16-idp39975248" data-type="indexterm" data-startref="ix_16-rossify_robots-asciidoc9">
                  <span class="text" id="span_006778" smilref="Programming_Robots_with_ROS00021.smil#span_006778">This URDF snippet adds two more wheels with continuous joints offset so as to be attached to the back end of the chassis, one on either side. Launch the display tool to see the result, which should look similar to</span>
                  <a data-type="xref" href="#ch16-tortoisebot_urdf_4_rviz" external="false" id="a_000281" smilref="Programming_Robots_with_ROS00021.smil#a_000281">Figure 16-6</a>
                  <span class="text" id="span_006779" smilref="Programming_Robots_with_ROS00021.smil#span_006779">. Play with the sliders in the</span>
                  <code xml:space="preserve" id="code_001581" smilref="Programming_Robots_with_ROS00021.smil#code_001581">joint_state_publisher</code>
                  <span class="text" id="span_006780" smilref="Programming_Robots_with_ROS00021.smil#span_006780">to check all four joints.</span>
                </p>
                <figure id="figure_000085">
                  <h1 id="h1_000361" smilref="Programming_Robots_with_ROS00021.smil#h1_000361">Figure 16-6. Visualization of the complete TortoiseBot model</h1>
                  <div id="ch16-tortoisebot_urdf_4_rviz" class="figure">
                    <img src="images/prwr_1606.jpg" alt="TortoiseBot URDF" id="img_000275" />
                  </div>
                </figure>
                <p id="ch16-idp39979568" data-type="indexterm" data-startref="ix_16-rossify_robots-asciidoc7">
                  <span class="text" id="span_006781" smilref="Programming_Robots_with_ROS00021.smil#span_006781">We now have a good kinematic model of the TortoiseBot. You may have noticed that it's not very pretty, and indeed, the visual appearance of robot models can be greatly improved through the use of high-quality</span>
                  <em id="em_000391" smilref="Programming_Robots_with_ROS00021.smil#em_000391">meshes</em>
                  <span class="text" id="span_006782" smilref="Programming_Robots_with_ROS00021.smil#span_006782">, but we won't cover that topic here. Instead, we'll proceed with how to simulate a TortoiseBot.</span>
                </p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Simulation in Gazebo" id="section_000167">
              <h1 id="h1_000362" smilref="Programming_Robots_with_ROS00021.smil#h1_000362">Simulation in Gazebo</h1>
              <div class="sect1" id="ch16-rossify_robots_gazebo">
                <p id="ch16-ix_16-rossify_robots-asciidoc10" data-type="indexterm" data-primary="Gazebo" data-secondary="for TortoiseBot simulation" smilref="Programming_Robots_with_ROS00021.smil#ch16-ix_16-rossify_robots-asciidoc10">Our URDF model of the TortoiseBot captures the kinematics and visual appearance of the robot, but it doesn't say anything about the physical characteristics that are needed to simulate it. To simulate a TortoiseBot in Gazebo, we need to add two new tags to every link in the model:</p>
                <dl id="dl_000024">
                  <dt id="dt_000109">
                    <code xml:space="preserve" id="code_001582" smilref="Programming_Robots_with_ROS00021.smil#code_001582">&lt;collision&gt;</code>
                  </dt>
                  <dd id="dd_000109">
                    <p data-type="indexterm" data-primary="collision data" id="ch16-idp39602864">
                      <span class="text" id="span_006783" smilref="Programming_Robots_with_ROS00021.smil#span_006783">Similar to</span>
                      <code xml:space="preserve" id="code_001583" smilref="Programming_Robots_with_ROS00021.smil#code_001583">visual</code>
                      <span class="text" id="span_006784" smilref="Programming_Robots_with_ROS00021.smil#span_006784">, this tag defines the size and shape of the robot's body, for the purpose of determining how it will interact with other objects. The collision geometry can be identical to the</span>
                      <code xml:space="preserve" id="code_001584" smilref="Programming_Robots_with_ROS00021.smil#code_001584">visual</code>
                      <span class="text" id="span_006785" smilref="Programming_Robots_with_ROS00021.smil#span_006785">geometry, but it's often different; e.g., you may use a complex mesh for a good visual appearance, but a set of simple shapes (boxes, cylinders, etc.) for efficient collision detection.</span>
                    </p>
                  </dd>
                  <dt id="dt_000110">
                    <code xml:space="preserve" id="code_001585" smilref="Programming_Robots_with_ROS00021.smil#code_001585">&lt;inertial&gt;</code>
                  </dt>
                  <dd id="dd_000110">
                    <p id="ch16-idp39606400" data-type="indexterm" data-primary="inertial data" data-secondary="for TortoiseBot simulation" smilref="Programming_Robots_with_ROS00021.smil#ch16-idp39606400">This tag defines the mass and moment of inertia of the link, which are needed to move it according to Newton's laws.</p>
                  </dd>
                </dl>
                <p id="p_001130">
                  <span class="text" id="span_006786" smilref="Programming_Robots_with_ROS00021.smil#span_006786">To add collision geometry, given the simplicity of our visual model, we just duplicate the visual geometry. Go through your</span>
                  <em id="em_000392" smilref="Programming_Robots_with_ROS00021.smil#em_000392">tortoisebot.urdf</em>
                  <span class="text" id="span_006787" smilref="Programming_Robots_with_ROS00021.smil#span_006787">, adding for each</span>
                  <code xml:space="preserve" id="code_001586" smilref="Programming_Robots_with_ROS00021.smil#code_001586">&lt;visual&gt;</code>
                  <span class="text" id="span_006788" smilref="Programming_Robots_with_ROS00021.smil#span_006788">/</span>
                  <code xml:space="preserve" id="code_001587" smilref="Programming_Robots_with_ROS00021.smil#code_001587">&lt;geometry&gt;</code>
                  <span class="text" id="span_006789" smilref="Programming_Robots_with_ROS00021.smil#span_006789">tag a sibling</span>
                  <code xml:space="preserve" id="code_001588" smilref="Programming_Robots_with_ROS00021.smil#code_001588">&lt;collision&gt;</code>
                  <span class="text" id="span_006790" smilref="Programming_Robots_with_ROS00021.smil#span_006790">/</span>
                  <code xml:space="preserve" id="code_001589" smilref="Programming_Robots_with_ROS00021.smil#code_001589">&lt;geometry&gt;</code>
                  <span class="text" id="span_006791" smilref="Programming_Robots_with_ROS00021.smil#span_006791">tag, with the same shape and size. For example, the</span>
                  <code xml:space="preserve" id="code_001590" smilref="Programming_Robots_with_ROS00021.smil#code_001590">base_link</code>
                  <span class="text" id="span_006792" smilref="Programming_Robots_with_ROS00021.smil#span_006792">with collision information would look like</span>
                  <a data-type="xref" href="#ch16-tortoisebot_urdf_5" external="false" id="a_000282" smilref="Programming_Robots_with_ROS00021.smil#a_000282">Example 16-5</a>
                  <span class="text" id="span_006793" smilref="Programming_Robots_with_ROS00021.smil#span_006793">. Note that you don't need to add a</span>
                  <code xml:space="preserve" id="code_001591" smilref="Programming_Robots_with_ROS00021.smil#code_001591">&lt;material&gt;</code>
                  <span class="text" id="span_006794" smilref="Programming_Robots_with_ROS00021.smil#span_006794">tag for the collision body.</span>
                </p>
                <h1 id="h1_000363" smilref="Programming_Robots_with_ROS00021.smil#h1_000363">Example 16-5. Code for the TortoiseBot chassis, with collision information</h1>
                <div id="ch16-tortoisebot_urdf_5" data-type="example">
                  <p id="p_001131">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001592" smilref="Programming_Robots_with_ROS00021.smil#code_001592">  &lt;link name="base_link"&gt;
    &lt;visual&gt;
      &lt;geometry&gt;
        &lt;box size="0.6 0.3 0.3"/&gt;
      &lt;/geometry&gt;
      &lt;material name="silver"&gt;
        &lt;color rgba="0.75 0.75 0.75 1"/&gt;
      &lt;/material&gt;
    &lt;/visual&gt;
    &lt;collision&gt;
      &lt;geometry&gt;
        &lt;box size="0.6 0.3 0.3"/&gt;
      &lt;/geometry&gt;
    &lt;/collision&gt;
  &lt;/link&gt;</code>
                  </p>
                </div>
                <p id="p_001132" smilref="Programming_Robots_with_ROS00021.smil#p_001132">To add inertial data, we need to determine the mass properties of each link. Doing this for a real robot can be surprisingly difficult. While resources like detailed CAD information can be a good guide, it's often necessary to measure the system physically, either through disassembly and analysis of each component, or through carefully designed experiments with the complete system. In lieu of such experiments, it's common to use informed estimates of mass properties and to refine them over time.</p>
                <p id="p_001133">
                  <span class="text" id="span_006795" smilref="Programming_Robots_with_ROS00021.smil#span_006795">For our purposes with TortoiseBot, we'll get reasonable simulation behavior if the masses are in the right order of magnitude. To keep things simple, we'll give the chassis a mass of 1.0 kg, the caster 0.1 kg, and each wheel 0.1 kg. For help with computing inertia matrices, we can consult</span>
                  <a href="http://bit.ly/moments_of_inertia" external="true" id="a_000283" smilref="Programming_Robots_with_ROS00021.smil#a_000283">some well-known formulas</a>
                  <span class="text" id="span_006796" smilref="Programming_Robots_with_ROS00021.smil#span_006796">for computing moments of inertia for objects of various shapes, including boxes and cylinders. Using those formulas, we computed the inertia values shown in</span>
                  <a data-type="xref" href="#ch16-tortoisebot_urdf_6" external="false" id="a_000284" smilref="Programming_Robots_with_ROS00021.smil#a_000284">Example 16-6</a>
                  <span class="text" id="span_006797" smilref="Programming_Robots_with_ROS00021.smil#span_006797">for the chassis box, in</span>
                  <a data-type="xref" href="#ch16-tortoisebot_urdf_7" external="false" id="a_000285" smilref="Programming_Robots_with_ROS00021.smil#a_000285">Example 16-7</a>
                  <span class="text" id="span_006798" smilref="Programming_Robots_with_ROS00021.smil#span_006798">for the caster box, and in</span>
                  <a data-type="xref" href="#ch16-tortoisebot_urdf_8" external="false" id="a_000286" smilref="Programming_Robots_with_ROS00021.smil#a_000286">Example 16-8</a>
                  <span class="text" id="span_006799" smilref="Programming_Robots_with_ROS00021.smil#span_006799">for each wheel cylinder. Add each block of XML inside the corresponding link(s) in your</span>
                  <em id="em_000393" smilref="Programming_Robots_with_ROS00021.smil#em_000393">tortoisebot.urdf</em>
                  <span class="text" id="span_006800" smilref="Programming_Robots_with_ROS00021.smil#span_006800">.</span>
                </p>
                <h1 id="h1_000364" smilref="Programming_Robots_with_ROS00021.smil#h1_000364">Example 16-6. TortoiseBot inertial data for the chassis</h1>
                <div id="ch16-tortoisebot_urdf_6" data-type="example">
                  <p id="p_001134">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001593" smilref="Programming_Robots_with_ROS00021.smil#code_001593">    &lt;inertial&gt;
      &lt;mass value="1.0"/&gt;
      &lt;inertia ixx="0.015" iyy="0.0375" izz="0.0375"
               ixy="0" ixz="0" iyz="0"/&gt;
    &lt;/inertial&gt;</code>
                  </p>
                </div>
                <h1 id="h1_000365" smilref="Programming_Robots_with_ROS00021.smil#h1_000365">Example 16-7. TortoiseBot inertial data for the caster</h1>
                <div id="ch16-tortoisebot_urdf_7" data-type="example">
                  <p id="p_001135">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001594" smilref="Programming_Robots_with_ROS00021.smil#code_001594">    &lt;inertial&gt;
      &lt;mass value="0.1"/&gt;
      &lt;inertia ixx="0.00083" iyy="0.00083" izz="0.000167"
               ixy="0" ixz="0" iyz="0"/&gt;
    &lt;/inertial&gt;</code>
                  </p>
                </div>
                <h1 id="h1_000366" smilref="Programming_Robots_with_ROS00021.smil#h1_000366">Example 16-8. TortoiseBot inertial data for each wheel</h1>
                <div id="ch16-tortoisebot_urdf_8" data-type="example">
                  <p id="p_001136">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001595" smilref="Programming_Robots_with_ROS00021.smil#code_001595">    &lt;inertial&gt;
      &lt;mass value="0.1"/&gt;
      &lt;inertia ixx="5.1458e-5" iyy="5.1458e-5" izz="6.125e-5"
               ixy="0" ixz="0" iyz="0"/&gt;
    &lt;/inertial&gt;</code>
                  </p>
                </div>
                <p id="p_001137" smilref="Programming_Robots_with_ROS00021.smil#p_001137">Don't worry if you don't find these values to be intuitive or meaningful. Your authors don't, either; nor do many people who work professionally on simulation of rigid body dynamics. What's important is to have a general idea of how to approximate them.</p>
                <h1 id="h1_000367" smilref="Programming_Robots_with_ROS00021.smil#h1_000367">Tip</h1>
                <div data-type="tip" id="div_000035">
                  <p id="ch16-idp39013296" data-type="indexterm" data-primary="Gazebo" data-secondary="debugging inertial data" smilref="Programming_Robots_with_ROS00021.smil#ch16-idp39013296">When working with inertial values, here's a great way to visually debug things is in Gazebo: click on View "Center of Mass/Inertia" to see a visual representation of the inertia matrix and mass for each link in your robot. If the inertial data is very different from (e.g., much smaller or larger than) the visual or collision geometry, then you have a problem.</p>
                </div>
                <p id="p_001138">
                  <span class="text" id="span_006801" smilref="Programming_Robots_with_ROS00021.smil#span_006801">Now we're ready to load our TortoiseBot model in Gazebo. There are a few different ways to do this. Because we want to use some ROS tools with our simulated robot (as opposed to working solely within Gazebo), we'll follow this pattern, using</span>
                  <code xml:space="preserve" id="code_001596" smilref="Programming_Robots_with_ROS00021.smil#code_001596">roslaunch</code>
                  <span class="text" id="span_006802" smilref="Programming_Robots_with_ROS00021.smil#span_006802">to automate things:</span>
                </p>
                <list type="ol" id="list_000016">
                  <li id="li_000055">
                    <p id="p_001139" smilref="Programming_Robots_with_ROS00021.smil#p_001139">Load the robot's URDF model into the parameter server.</p>
                  </li>
                  <li id="li_000056">
                    <p id="p_001140" smilref="Programming_Robots_with_ROS00021.smil#p_001140">Launch Gazebo (e.g., with an empty world).</p>
                  </li>
                  <li id="li_000057">
                    <p id="p_001141" smilref="Programming_Robots_with_ROS00021.smil#p_001141">Use a ROS service call to spawn an instance of the robot in Gazebo, reading the URDF data from the parameter server.</p>
                  </li>
                </list>
                <p id="p_001142">
                  <span class="text" id="span_006803" smilref="Programming_Robots_with_ROS00021.smil#span_006803">This process might seem a little roundabout, but it's actually a very flexible way of doing things. For a start, it gets the URDF model onto the parameter server, where it can be accessed by other nodes. By convention, the URDF model is stored in the parameter server under the name</span>
                  <code xml:space="preserve" id="code_001597" smilref="Programming_Robots_with_ROS00021.smil#code_001597">/robot_description</code>
                  <span class="text" id="span_006804" smilref="Programming_Robots_with_ROS00021.smil#span_006804">(you can use another name for this parameter, but then you'd have to change the default settings for many tools). Once it's on the parameter server, the URDF model can be used by tools like</span>
                  <code xml:space="preserve" id="code_001598" smilref="Programming_Robots_with_ROS00021.smil#code_001598">rviz</code>
                  <span class="text" id="span_006805" smilref="Programming_Robots_with_ROS00021.smil#span_006805">, which needs the model to visualize the robot, or a path planner, which needs the model to know the robot's shape and size. A well-written ROS tool will never make assumptions about the physical structure of a robot, but rather will read the URDF model from the parameter server and configure its behavior based on the model.</span>
                </p>
                <p id="p_001143">
                  <span class="text" id="span_006806" smilref="Programming_Robots_with_ROS00021.smil#span_006806">At this point, we need to organize our code into a ROS package, which we'll call</span>
                  <code xml:space="preserve" id="code_001599" smilref="Programming_Robots_with_ROS00021.smil#code_001599">tortoisebot</code>
                  <span class="text" id="span_006807" smilref="Programming_Robots_with_ROS00021.smil#span_006807">. So, create a directory in your workspace called</span>
                  <em id="em_000394" smilref="Programming_Robots_with_ROS00021.smil#em_000394">tortoisebot</em>
                  <span class="text" id="span_006808" smilref="Programming_Robots_with_ROS00021.smil#span_006808">, add an appropriate</span>
                  <em id="em_000395" smilref="Programming_Robots_with_ROS00021.smil#em_000395">package.xml</em>
                  <span class="text" id="span_006809" smilref="Programming_Robots_with_ROS00021.smil#span_006809">file, then move your</span>
                  <em id="em_000396" smilref="Programming_Robots_with_ROS00021.smil#em_000396">tortoisebot.urdf</em>
                  <span class="text" id="span_006810" smilref="Programming_Robots_with_ROS00021.smil#span_006810">file in there. Now we're going to add a</span>
                  <code xml:space="preserve" id="code_001600" smilref="Programming_Robots_with_ROS00021.smil#code_001600">roslaunch</code>
                  <span class="text" id="span_006811" smilref="Programming_Robots_with_ROS00021.smil#span_006811">file that will execute the preceding steps to launch Gazebo with a TortoiseBot in it. The</span>
                  <code xml:space="preserve" id="code_001601" smilref="Programming_Robots_with_ROS00021.smil#code_001601">roslaunch</code>
                  <span class="text" id="span_006812" smilref="Programming_Robots_with_ROS00021.smil#span_006812">code is shown in</span>
                  <a data-type="xref" href="#ch16-tortoisebot_launch" external="false" id="a_000287" smilref="Programming_Robots_with_ROS00021.smil#a_000287">Example 16-9</a>
                  <span class="text" id="span_006813" smilref="Programming_Robots_with_ROS00021.smil#span_006813">.</span>
                </p>
                <h1 id="h1_000368" smilref="Programming_Robots_with_ROS00021.smil#h1_000368">Example 16-9. tortoisebot.launch file to bring up Gazebo with a TortoiseBot model</h1>
                <div id="ch16-tortoisebot_launch" data-type="example">
                  <p id="p_001144">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001602" smilref="Programming_Robots_with_ROS00021.smil#code_001602">&lt;launch&gt;
  &lt;!-- Load the TortoiseBot URDF model into the parameter server --&gt;
  &lt;param name="robot_description" textfile="$(find tortoisebot)/tortoisebot.urdf" /&gt;
  &lt;!-- Start Gazebo with an empty world --&gt;
  &lt;include file="$(find gazebo_ros)/launch/empty_world.launch"/&gt;
  &lt;!-- Spawn a TortoiseBot in Gazebo, taking the description from the
       parameter server --&gt;
  &lt;node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model"
        args="-param robot_description -urdf -model tortoisebot" /&gt;
&lt;/launch&gt;</code>
                  </p>
                </div>
                <p id="p_001145">
                  <span class="text" id="span_006814" smilref="Programming_Robots_with_ROS00021.smil#span_006814">In this launch file, we load the URDF file into the parameter server as</span>
                  <span class="keep-together" id="span_006815">
                    <code xml:space="preserve" id="code_001603" smilref="Programming_Robots_with_ROS00021.smil#code_001603">/robot_description</code>
                  </span>
                  <span class="text" id="span_006816" smilref="Programming_Robots_with_ROS00021.smil#span_006816">, then use a helper launch file from the</span>
                  <code xml:space="preserve" id="code_001604" smilref="Programming_Robots_with_ROS00021.smil#code_001604">gazebo_ros</code>
                  <span class="text" id="span_006817" smilref="Programming_Robots_with_ROS00021.smil#span_006817">package to run Gazebo with an empty world. With the model data loaded into the parameter server and Gazebo running, we use the helper tool</span>
                  <code xml:space="preserve" id="code_001605" smilref="Programming_Robots_with_ROS00021.smil#code_001605">spawn_model</code>
                  <span class="text" id="span_006818" smilref="Programming_Robots_with_ROS00021.smil#span_006818">, also from the</span>
                  <code xml:space="preserve" id="code_001606" smilref="Programming_Robots_with_ROS00021.smil#code_001606">gazebo_ros</code>
                  <span class="text" id="span_006819" smilref="Programming_Robots_with_ROS00021.smil#span_006819">package, to ask Gazebo to spawn an instance of the TortoiseBot, reading URDF data from the</span>
                  <code xml:space="preserve" id="code_001607" smilref="Programming_Robots_with_ROS00021.smil#code_001607">/robot_description</code>
                  <span class="text" id="span_006820" smilref="Programming_Robots_with_ROS00021.smil#span_006820">parameter.</span>
                </p>
                <p class="pagebreak-before" id="p_001146">
                  <span class="text" id="span_006821" smilref="Programming_Robots_with_ROS00021.smil#span_006821">Save that file as</span>
                  <em id="em_000397" smilref="Programming_Robots_with_ROS00021.smil#em_000397">tortoisebot/tortoisebot.launch</em>
                  <span class="text" id="span_006822" smilref="Programming_Robots_with_ROS00021.smil#span_006822">and give it a try:</span>
                </p>
                <p id="p_001147">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001608"><span class="text" id="span_006823" smilref="Programming_Robots_with_ROS00021.smil#span_006823">
user@hostname$ </span><strong id="strong_000174" smilref="Programming_Robots_with_ROS00021.smil#strong_000174">roslaunch tortoisebot tortoisebot.launch</strong>
</code>
                </p>
                <p id="p_001148">
                  <span class="text" id="span_006824" smilref="Programming_Robots_with_ROS00021.smil#span_006824">You should see Gazebo pop up, with a TortoiseBot, similar to</span>
                  <a data-type="xref" href="#ch16-tortoisebot_gazebo_1" external="false" id="a_000288" smilref="Programming_Robots_with_ROS00021.smil#a_000288">Figure 16-7</a>
                  <span class="text" id="span_006825" smilref="Programming_Robots_with_ROS00021.smil#span_006825">. Hooray!</span>
                </p>
                <figure id="figure_000086">
                  <h1 id="h1_000369" smilref="Programming_Robots_with_ROS00021.smil#h1_000369">Figure 16-7. Gazebo simulating the TortoiseBot</h1>
                  <div id="ch16-tortoisebot_gazebo_1" class="figure">
                    <img src="images/prwr_1607.jpg" alt="TortoiseBot in Gazebo" id="img_000276" />
                  </div>
                </figure>
                <p id="p_001149">
                  <span class="text" id="span_006826" smilref="Programming_Robots_with_ROS00021.smil#span_006826">Use the Gazebo GUI to explore your robot. For example, if you select View Wireframe and View Joints, you can see the structure of the robot, similar to</span>
                  <a data-type="xref" href="#ch16-tortoisebot_gazebo_2" external="false" id="a_000289" smilref="Programming_Robots_with_ROS00021.smil#a_000289">Figure 16-8</a>
                  <span class="text" id="span_006827" smilref="Programming_Robots_with_ROS00021.smil#span_006827">. You might wonder how, in a physics-based simulation, the caster link and the chassis link can interpenetrate each other. The reason is that by default Gazebo disables collision checking between links that are part of the same model.</span>
                </p>
                <figure id="figure_000087">
                  <h1 id="h1_000370" smilref="Programming_Robots_with_ROS00021.smil#h1_000370">Figure 16-8. Wireframe and joint view of TortoiseBot in Gazebo</h1>
                  <div id="ch16-tortoisebot_gazebo_2" class="figure">
                    <img src="images/prwr_1608.jpg" alt="TortoiseBot in Gazebo" id="img_000277" />
                  </div>
                </figure>
                <p id="p_001150">
                  <span class="text" id="span_006828" smilref="Programming_Robots_with_ROS00021.smil#span_006828">Now that we have a simulated robot, let's control it. But how? Recall from earlier in this chapter that we expect robots like the TortoiseBot to support the</span>
                  <code xml:space="preserve" id="code_001609" smilref="Programming_Robots_with_ROS00021.smil#code_001609">cmd_vel</code>
                  <span class="text" id="span_006829" smilref="Programming_Robots_with_ROS00021.smil#span_006829">/</span>
                  <code xml:space="preserve" id="code_001610" smilref="Programming_Robots_with_ROS00021.smil#code_001610">odom</code>
                  <span class="text" id="span_006830" smilref="Programming_Robots_with_ROS00021.smil#span_006830">interface to take commands and report position. On the real robot, that interface would be implemented by a hardware driver. In simulation, we need to do something similar, but fortunately easier: we'll load a Gazebo plugin. In particular, we'll load a differential drive plugin that will allow us to control the TortoiseBot via</span>
                  <code xml:space="preserve" id="code_001611" smilref="Programming_Robots_with_ROS00021.smil#code_001611">cmd_vel</code>
                  <span class="text" id="span_006831" smilref="Programming_Robots_with_ROS00021.smil#span_006831">messages, which the plugin will convert into appropriate velocities for the left and right wheels. (At this point, we're diverging from the mechanical design of Grey Walter's Elsie, which was driven with motors on the front caster and wheel, not the back wheels. We don't have an off-the-shelf plugin to implement</span>
                  <code xml:space="preserve" id="code_001612" smilref="Programming_Robots_with_ROS00021.smil#code_001612">cmd_vel</code>
                  <span class="text" id="span_006832" smilref="Programming_Robots_with_ROS00021.smil#span_006832">on top of that arrangement of motors, so we'll cheat a bit and drive the robot with motors on the back wheels.)</span>
                </p>
                <p id="p_001151">
                  <span class="text" id="span_006833" smilref="Programming_Robots_with_ROS00021.smil#span_006833">To load the differential drive plugin, we need to add another block to the TortoiseBot URDF model, shown in</span>
                  <a data-type="xref" href="#ch16-tortoisebot_urdf_9" external="false" id="a_000290" smilref="Programming_Robots_with_ROS00021.smil#a_000290">Example 16-10</a>
                  <span class="text" id="span_006834" smilref="Programming_Robots_with_ROS00021.smil#span_006834">.</span>
                </p>
                <h1 id="h1_000371" smilref="Programming_Robots_with_ROS00021.smil#h1_000371">Example 16-10. Extra URDF code to load the differential drive plugin for TortoiseBot</h1>
                <div id="ch16-tortoisebot_urdf_9" data-type="example">
                  <p id="p_001152">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001613" smilref="Programming_Robots_with_ROS00021.smil#code_001613">  &lt;gazebo&gt;
    &lt;plugin name="differential_drive_controller"
            filename="libgazebo_ros_diff_drive.so"&gt;
      &lt;leftJoint&gt;left_wheel_joint&lt;/leftJoint&gt;
      &lt;rightJoint&gt;right_wheel_joint&lt;/rightJoint&gt;
      &lt;robotBaseFrame&gt;base_link&lt;/robotBaseFrame&gt;
      &lt;wheelSeparation&gt;0.25&lt;/wheelSeparation&gt;
      &lt;wheelDiameter&gt;0.07&lt;/wheelDiameter&gt;
      &lt;publishWheelJointState&gt;true&lt;/publishWheelJointState&gt;
    &lt;/plugin&gt;
  &lt;/gazebo&gt;</code>
                  </p>
                </div>
                <p id="p_001153">
                  <span class="text" id="span_006835" smilref="Programming_Robots_with_ROS00021.smil#span_006835">In the configuration of the differential drive plugin, we're telling it to control the</span>
                  <code xml:space="preserve" id="code_001614" smilref="Programming_Robots_with_ROS00021.smil#code_001614">left_wheel_joint</code>
                  <span class="text" id="span_006836" smilref="Programming_Robots_with_ROS00021.smil#span_006836">and</span>
                  <code xml:space="preserve" id="code_001615" smilref="Programming_Robots_with_ROS00021.smil#code_001615">right_wheel_joint</code>
                  <span class="text" id="span_006837" smilref="Programming_Robots_with_ROS00021.smil#span_006837">. We're also telling it how large the wheels are and what the distance is between them, and that the base of the robot is called</span>
                  <code xml:space="preserve" id="code_001616" smilref="Programming_Robots_with_ROS00021.smil#code_001616">base_link</code>
                  <span class="text" id="span_006838" smilref="Programming_Robots_with_ROS00021.smil#span_006838">(an improved version of the plugin could in many cases infer this data from the model). Finally, we tell the plugin to publish</span>
                  <code xml:space="preserve" id="code_001617" smilref="Programming_Robots_with_ROS00021.smil#code_001617">/joint_states</code>
                  <span class="text" id="span_006839" smilref="Programming_Robots_with_ROS00021.smil#span_006839">messages for positions of the wheels.</span>
                </p>
                <p id="p_001154">
                  <span class="text" id="span_006840" smilref="Programming_Robots_with_ROS00021.smil#span_006840">Insert that XML snippet into</span>
                  <em id="em_000398" smilref="Programming_Robots_with_ROS00021.smil#em_000398">tortoisebot.urdf</em>
                  <span class="text" id="span_006841" smilref="Programming_Robots_with_ROS00021.smil#span_006841">, anywhere inside the</span>
                  <code xml:space="preserve" id="code_001618" smilref="Programming_Robots_with_ROS00021.smil#code_001618">&lt;robot&gt;</code>
                  <span class="text" id="span_006842" smilref="Programming_Robots_with_ROS00021.smil#span_006842">tag, then relaunch with</span>
                  <code xml:space="preserve" id="code_001619" smilref="Programming_Robots_with_ROS00021.smil#code_001619">roslaunch tortoisebot tortoisebot.launch</code>
                  <span class="text" id="span_006843" smilref="Programming_Robots_with_ROS00021.smil#span_006843">. Gazebo will look the same, but now there's a plugin ready to help us drive the robot with messages sent to</span>
                  <code xml:space="preserve" id="code_001620" smilref="Programming_Robots_with_ROS00021.smil#code_001620">cmd_vel</code>
                  <span class="text" id="span_006844" smilref="Programming_Robots_with_ROS00021.smil#span_006844">. Check that it's there with</span>
                  <code xml:space="preserve" id="code_001621" smilref="Programming_Robots_with_ROS00021.smil#code_001621">rostopic</code>
                  <span class="text" id="span_006845" smilref="Programming_Robots_with_ROS00021.smil#span_006845">:</span>
                </p>
                <p id="p_001155">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001622"><span class="text" id="span_006846" smilref="Programming_Robots_with_ROS00021.smil#span_006846">
user@hostname$ </span><strong id="strong_000175" smilref="Programming_Robots_with_ROS00021.smil#strong_000175">rostopic info cmd_vel</strong><span class="text" id="span_006847" smilref="Programming_Robots_with_ROS00021.smil#span_006847">
Type: geometry_msgs/Twist

Publishers: None

Subscribers:
 * /gazebo (http://rossum:57336/)
</span></code>
                </p>
                <p id="p_001156">
                  <span class="text" id="span_006848" smilref="Programming_Robots_with_ROS00021.smil#span_006848">That looks good, so let's try sending a command. We can do it manually via</span>
                  <code xml:space="preserve" id="code_001623" smilref="Programming_Robots_with_ROS00021.smil#code_001623">rostopic</code>
                  <span class="text" id="span_006849" smilref="Programming_Robots_with_ROS00021.smil#span_006849">, sending velocities of 0 m/s for translation along the x-axis and 0.5 rad/s for rotation about the z-axis:</span>
                </p>
                <p id="p_001157">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001624"><span class="text" id="span_006850" smilref="Programming_Robots_with_ROS00021.smil#span_006850">
user@hostname$ </span><strong id="strong_000176" smilref="Programming_Robots_with_ROS00021.smil#strong_000176">rostopic pub -1 cmd_vel geometry_msgs/Twist \
  '{linear: {x: 0.0}, angular: {z: 0.5}}'</strong>
</code>
                </p>
                <p id="p_001158">
                  <span class="text" id="span_006851" smilref="Programming_Robots_with_ROS00021.smil#span_006851">You should see the robot rotate in place, counter-clockwise (which is the direction of positive rotation about the robot's z-axis). It's nice that we can dig down and send commands directly like this with</span>
                  <code xml:space="preserve" id="code_001625" smilref="Programming_Robots_with_ROS00021.smil#code_001625">rostopic</code>
                  <span class="text" id="span_006852" smilref="Programming_Robots_with_ROS00021.smil#span_006852">, but it's not a great way to drive a robot. Instead, let's use the</span>
                  <code xml:space="preserve" id="code_001626" smilref="Programming_Robots_with_ROS00021.smil#code_001626">teleop_twist_keyboard</code>
                  <span class="text" id="span_006853" smilref="Programming_Robots_with_ROS00021.smil#span_006853">tool, which reads keypresses and publishes corresponding</span>
                  <code xml:space="preserve" id="code_001627" smilref="Programming_Robots_with_ROS00021.smil#code_001627">cmd_vel</code>
                  <span class="text" id="span_006854" smilref="Programming_Robots_with_ROS00021.smil#span_006854">messages (we could also use the custom teleop program that was covered in</span>
                  <a data-type="xref" href="#ch08-teleop_bot_keyboard_driver" external="false" id="a_000291" smilref="Programming_Robots_with_ROS00021.smil#a_000291">"Keyboard Driver"</a>
                  <span class="text" id="span_006855" smilref="Programming_Robots_with_ROS00021.smil#span_006855">):</span>
                </p>
                <p id="p_001159">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001628"><span class="text" id="span_006856" smilref="Programming_Robots_with_ROS00021.smil#span_006856">
user@hostname$ </span><strong id="strong_000177" smilref="Programming_Robots_with_ROS00021.smil#strong_000177">rosrun teleop_twist_keyboard teleop_twist_keyboard.py</strong><span class="text" id="span_006857" smilref="Programming_Robots_with_ROS00021.smil#span_006857">
Reading from the keyboard  and Publishing to Twist!

Moving around:
   u    i    o
   j    k    l
   m,    .

q/z: increase/decrease max speeds by 10%
w/x: increase/decrease only linear speed by 10%
e/c: increase/decrease only angular speed by 10%
anything else: stop

CTRL-C to quit
</span></code>
                </p>
                <p id="p_001160" smilref="Programming_Robots_with_ROS00021.smil#p_001160">Use the keys displayed on the screen to move the robot. Drive it forward and backward, and turn it in place. Note how, especially when you change directions, the motion of the caster and its effect on the behavior of the robot are captured by Gazebo. We didn't program in anything about the caster swiveling around; it just follows from first principles of physics, given the model that we built.</p>
                <h1 id="h1_000372" smilref="Programming_Robots_with_ROS00021.smil#h1_000372">Tip</h1>
                <div data-type="tip" id="div_000036">
                  <p id="p_001161" smilref="Programming_Robots_with_ROS00021.smil#p_001161">When you're working with a mobile robot that's roaming around in Gazebo, you can keep it automatically in the center of the camera view: in the model tree on the left side of the Gazebo GUI, right-click on the name of the robot and select "Follow".</p>
                </div>
                <p id="p_001162">
                  <span class="text" id="span_006858" smilref="Programming_Robots_with_ROS00021.smil#span_006858">We know that the</span>
                  <code xml:space="preserve" id="code_001629" smilref="Programming_Robots_with_ROS00021.smil#code_001629">cmd_vel</code>
                  <span class="text" id="span_006859" smilref="Programming_Robots_with_ROS00021.smil#span_006859">interface is working to command the robot; let's check that the</span>
                  <code xml:space="preserve" id="code_001630" smilref="Programming_Robots_with_ROS00021.smil#code_001630">odom</code>
                  <span class="text" id="span_006860" smilref="Programming_Robots_with_ROS00021.smil#span_006860">interface is working to provide position data from the robot. We can do that with</span>
                  <code xml:space="preserve" id="code_001631" smilref="Programming_Robots_with_ROS00021.smil#code_001631">rostopic</code>
                  <span class="text" id="span_006861" smilref="Programming_Robots_with_ROS00021.smil#span_006861">, checking specifically for the</span>
                  <code xml:space="preserve" id="code_001632" smilref="Programming_Robots_with_ROS00021.smil#code_001632">pose/pose</code>
                  <span class="text" id="span_006862" smilref="Programming_Robots_with_ROS00021.smil#span_006862">field of the message:</span>
                </p>
                <p id="p_001163">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001633"><span class="text" id="span_006863" smilref="Programming_Robots_with_ROS00021.smil#span_006863">
user@hostname$ </span><strong id="strong_000178" smilref="Programming_Robots_with_ROS00021.smil#strong_000178">rostopic echo /odom/pose/pose</strong><span class="text" id="span_006864" smilref="Programming_Robots_with_ROS00021.smil#span_006864">
position:
  x: 3.03941689732
  y: -2.43708910971
  z: 0.185001156647
orientation:
  x: 4.91206137527e-06
  y: 2.22857873842e-06
  z: -0.913856008315
  w: -0.406038416947
</span></code>
                </p>
                <p id="ch16-idp40547168" data-type="indexterm" data-startref="ix_16-rossify_robots-asciidoc10">
                  <span class="text" id="span_006865" smilref="Programming_Robots_with_ROS00021.smil#span_006865">You should see a stream of such position and orientation values that change over time as the robot moves. Those messages are being published by the differential drive controller, which is converting the observed motion of the robot's individual wheels into motion of the robot's body, in the same coordinate frame as the velocities that we commanded via</span>
                  <code xml:space="preserve" id="code_001634" smilref="Programming_Robots_with_ROS00021.smil#code_001634">cmd_vel</code>
                  <span class="text" id="span_006866" smilref="Programming_Robots_with_ROS00021.smil#span_006866">.</span>
                </p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Summary" id="section_000168">
              <h1 id="h1_000373" smilref="Programming_Robots_with_ROS00021.smil#h1_000373">Summary</h1>
              <div class="sect1" id="ch16-idp39980464">
                <p data-type="indexterm" data-startref="ix_16-rossify_robots-asciidoc1" id="ch16-idp40548432">
                  <span class="text" id="span_006867" smilref="Programming_Robots_with_ROS00021.smil#span_006867">In this chapter, we began the process of integrating a brand new robot into ROS. We discussed standard ROS interfaces for mobile robots, considered the issues of writing hardware drivers, then built a functional model of the TortoiseBot, including the physical properties necessary to simulate it. In the next chapter, we will build further on the TortoiseBot, visualizing it with</span>
                  <code xml:space="preserve" id="code_001635" smilref="Programming_Robots_with_ROS00021.smil#code_001635">rviz</code>
                  <span class="text" id="span_006868" smilref="Programming_Robots_with_ROS00021.smil#span_006868">, adding sensors, and running standard algorithms such as navigation.</span>
                </p>
              </div>
            </section>
            <div data-type="footnotes" id="div_000037">
              <note id="ch16-idp39404112">
                <p data-type="footnote" id="p_001164">
                  <noteref idref="#ch16-idp39404112-marker" id="noteref_000017" smilref="Programming_Robots_with_ROS00021.smil#noteref_000017">1</noteref>
                  <span class="text" id="span_006869" smilref="Programming_Robots_with_ROS00021.smil#span_006869">Except for being hand-built and analog, they might remind you of a certain robot vacuum cleaner that came along 50 years later.</span>
                </p>
              </note>
            </div>
          </div>
        </section>
      </level1>
      <level1 id="ch17">
        <section xmlns:epub="http://www.idpf.org/2007/ops" data-type="chapter" epub:type="chapter" data-pdf-bookmark="Chapter 17. Your Own Mobile Robot: Part 2" id="section_000169">
          <h1 id="h1_000374" smilref="Programming_Robots_with_ROS00021.smil#h1_000374">Chapter 17. Your Own Mobile Robot: Part 2</h1>
          <div class="chapter" id="ch17-rossify_robots2">
            <p id="ch17-ix_17-rossify_robots2-asciidoc0" data-type="indexterm" data-primary="autonomous navigation" data-secondary="for TortoiseBot">
              <span class="text" id="span_006870" smilref="Programming_Robots_with_ROS00021.smil#span_006870">In</span>
              <a data-type="xref" href="#ch16-rossify_robots" external="false" id="a_000292" smilref="Programming_Robots_with_ROS00021.smil#a_000292">Chapter 16</a>
              <span class="text" id="span_006871" smilref="Programming_Robots_with_ROS00021.smil#span_006871">, we learned how to add a new mobile robot, the TortoiseBot, to ROS. We decided on topic APIs, built a complete Gazebo model, and used low-level velocity commands to drive it around in simulation. In this chapter, we'll take the next big step by getting the TortoiseBot to navigate autonomously (in simulation). To get there, we'll take a series of smaller steps:</span>
            </p>
            <list type="ul" id="list_000017">
              <li id="li_000058">
                <p id="p_001165" smilref="Programming_Robots_with_ROS00021.smil#p_001165">Visualize and verify transform data.</p>
              </li>
              <li id="li_000059">
                <p id="p_001166" smilref="Programming_Robots_with_ROS00021.smil#p_001166">Add a laser sensor.</p>
              </li>
              <li id="li_000060">
                <p id="p_001167" smilref="Programming_Robots_with_ROS00021.smil#p_001167">Configure and incorporate the navigation stack.</p>
              </li>
              <li id="li_000061">
                <p id="p_001168">
                  <span class="text" id="span_006872" smilref="Programming_Robots_with_ROS00021.smil#span_006872">Use</span>
                  <code xml:space="preserve" id="code_001636" smilref="Programming_Robots_with_ROS00021.smil#code_001636">rviz</code>
                  <span class="text" id="span_006873" smilref="Programming_Robots_with_ROS00021.smil#span_006873">to localize the robot and send navigation goals.</span>
                </p>
              </li>
            </list>
            <section data-type="sect1" data-pdf-bookmark="Verifying Transforms" id="section_000170">
              <h1 id="h1_000375" smilref="Programming_Robots_with_ROS00021.smil#h1_000375">Verifying Transforms</h1>
              <div class="sect1" id="ch17-rossify_robots2_transforms">
                <p id="ch17-ix_17-rossify_robots2-asciidoc3" data-type="indexterm" data-primary="autonomous navigation" data-secondary="verifying transforms for" smilref="Programming_Robots_with_ROS00021.smil#ch17-ix_17-rossify_robots2-asciidoc3">Recalling the setup with which we ended the previous chapter, we can launch a simulation of the TortoiseBot like so:</p>
                <p id="p_001169">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001637"><span class="text" id="span_006874" smilref="Programming_Robots_with_ROS00021.smil#span_006874">
user@hostname$ </span><strong id="strong_000179" smilref="Programming_Robots_with_ROS00021.smil#strong_000179">roslaunch tortoisebot tortoisebot.launch</strong>
</code>
                </p>
                <p id="p_001170">
                  <span class="text" id="span_006875" smilref="Programming_Robots_with_ROS00021.smil#span_006875">That launch file will start a Gazebo simulation of the TortoiseBot in an empty world. Now it's time to use</span>
                  <code xml:space="preserve" id="code_001638" smilref="Programming_Robots_with_ROS00021.smil#code_001638">rviz</code>
                  <span class="text" id="span_006876" smilref="Programming_Robots_with_ROS00021.smil#span_006876">to visualize the state of the (simulated) robot. Leaving Gazebo running, start</span>
                  <code xml:space="preserve" id="code_001639" smilref="Programming_Robots_with_ROS00021.smil#code_001639">rviz</code>
                  <span class="text" id="span_006877" smilref="Programming_Robots_with_ROS00021.smil#span_006877">in the usual way:</span>
                </p>
                <p id="p_001171">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001640"><span class="text" id="span_006878" smilref="Programming_Robots_with_ROS00021.smil#span_006878">
user@hostname$ </span><strong id="strong_000180" smilref="Programming_Robots_with_ROS00021.smil#strong_000180">rviz</strong>
</code>
                </p>
                <h1 id="h1_000376" smilref="Programming_Robots_with_ROS00021.smil#h1_000376">Note</h1>
                <div data-type="note" epub:type="note" id="div_000038">
                  <p class="keep-together" data-type="indexterm" data-primary="Gazebo" data-secondary="rviz vs." id="ch17-idp39116544">
                    <span class="text" id="span_006879" smilref="Programming_Robots_with_ROS00021.smil#span_006879">You might wonder why Gazebo and</span>
                    <code xml:space="preserve" id="code_001641" smilref="Programming_Robots_with_ROS00021.smil#code_001641">rviz</code>
                    <span class="text" id="span_006880" smilref="Programming_Robots_with_ROS00021.smil#span_006880">are separate programs. They look pretty similar: both give you a 3D view of a robot and allow you to visualize various aspects of the robot and its environment. They are separate programs because they play very different roles: Gazebo</span>
                    <em id="ch17-idp39117920" smilref="Programming_Robots_with_ROS00021.smil#ch17-idp39117920">simulates</em>
                    <span class="text" id="span_006881" smilref="Programming_Robots_with_ROS00021.smil#span_006881">a robot, while</span>
                    <code id="ch17-idp39118880" xml:space="preserve" smilref="Programming_Robots_with_ROS00021.smil#ch17-idp39118880">rviz</code>
                    <em id="ch17-idp39119824" smilref="Programming_Robots_with_ROS00021.smil#ch17-idp39119824">visualizes</em>
                    <span class="text" id="span_006882" smilref="Programming_Robots_with_ROS00021.smil#span_006882">a robot. Gazebo is a substitute for a real robot in a physical environment, computing the effects of forces and generating synthetic sensor data. While the 3D GUI is a key feature of Gazebo, it is also optional; for applications like continuous integration testing, Gazebo is often run without a GUI. The job of</span>
                    <code xml:space="preserve" id="code_001642" smilref="Programming_Robots_with_ROS00021.smil#code_001642">rviz</code>
                    <span class="text" id="span_006883" smilref="Programming_Robots_with_ROS00021.smil#span_006883">, on the other hand, is to visualize the state of a robot, whether physical or simulated in Gazebo, by talking to its sensors and presenting the results. In other words,</span>
                    <code xml:space="preserve" id="code_001643" smilref="Programming_Robots_with_ROS00021.smil#code_001643">rviz</code>
                    <span class="text" id="span_006884" smilref="Programming_Robots_with_ROS00021.smil#span_006884">shows you what the robot</span>
                    <em id="em_000399" smilref="Programming_Robots_with_ROS00021.smil#em_000399">thinks</em>
                    <span class="text" id="span_006885" smilref="Programming_Robots_with_ROS00021.smil#span_006885">is happening, while Gazebo (or looking at your physical robot) shows you what is</span>
                    <em id="em_000400" smilref="Programming_Robots_with_ROS00021.smil#em_000400">really</em>
                    <span class="text" id="span_006886" smilref="Programming_Robots_with_ROS00021.smil#span_006886">happening.</span>
                  </p>
                </div>
                <p id="p_001172">
                  <span class="text" id="span_006887" smilref="Programming_Robots_with_ROS00021.smil#span_006887">To visualize our robot, we need to configure some aspects of the</span>
                  <code xml:space="preserve" id="code_001644" smilref="Programming_Robots_with_ROS00021.smil#code_001644">rviz</code>
                  <span class="text" id="span_006888" smilref="Programming_Robots_with_ROS00021.smil#span_006888">display (after making these changes, when exiting</span>
                  <code xml:space="preserve" id="code_001645" smilref="Programming_Robots_with_ROS00021.smil#code_001645">rviz</code>
                  <span class="text" id="span_006889" smilref="Programming_Robots_with_ROS00021.smil#span_006889">, you should click Save when prompted so that you start with the same configuration next time):</span>
                </p>
                <list type="ul" id="list_000018">
                  <li id="li_000062">
                    <p id="p_001173" smilref="Programming_Robots_with_ROS00021.smil#p_001173">In Displays Global Options, set "fixed frame" to "odom." That way, we'll be able to see the robot move around with respect to its odometric origin.</p>
                  </li>
                  <li id="li_000063">
                    <p id="p_001174">
                      <span class="text" id="span_006890" smilref="Programming_Robots_with_ROS00021.smil#span_006890">In Displays, click the "Add" button, then select "RobotModel" and click "OK". That will cause</span>
                      <code xml:space="preserve" id="code_001646" smilref="Programming_Robots_with_ROS00021.smil#code_001646">rviz</code>
                      <span class="text" id="span_006891" smilref="Programming_Robots_with_ROS00021.smil#span_006891">to read the TortoiseBot's URDF model from the parameter server and display it.</span>
                    </p>
                  </li>
                </list>
                <p id="p_001175">
                  <span class="text" id="span_006892" smilref="Programming_Robots_with_ROS00021.smil#span_006892">The result will be similar to</span>
                  <a data-type="xref" href="#ch17-tortoisebot_nav_rviz1" external="false" id="a_000293" smilref="Programming_Robots_with_ROS00021.smil#a_000293">Figure 17-1</a>
                  <span class="text" id="span_006893" smilref="Programming_Robots_with_ROS00021.smil#span_006893">, which doesn't look great. The robot's chassis and caster links seem to be there, but not in the right positions with respect to each other, and the wheels are nowhere to be seen. In addition,</span>
                  <code xml:space="preserve" id="code_001647" smilref="Programming_Robots_with_ROS00021.smil#code_001647">rviz</code>
                  <span class="text" id="span_006894" smilref="Programming_Robots_with_ROS00021.smil#span_006894">is unhappy: in Displays RobotModel, the status is Error, and there are messages complaining about a lack of transforms between various links.</span>
                </p>
                <p id="p_001176">
                  <span class="text" id="span_006895" smilref="Programming_Robots_with_ROS00021.smil#span_006895">The problem is that we are not publishing coordinate transform data. Like many ROS tools,</span>
                  <code xml:space="preserve" id="code_001648" smilref="Programming_Robots_with_ROS00021.smil#code_001648">rviz</code>
                  <span class="text" id="span_006896" smilref="Programming_Robots_with_ROS00021.smil#span_006896">requires that information about the relationships between different coordinate frames be provided via</span>
                  <code xml:space="preserve" id="code_001649" smilref="Programming_Robots_with_ROS00021.smil#code_001649">tf2_msgs/TFMessage</code>
                  <span class="text" id="span_006897" smilref="Programming_Robots_with_ROS00021.smil#span_006897">messages on the</span>
                  <code xml:space="preserve" id="code_001650" smilref="Programming_Robots_with_ROS00021.smil#code_001650">/tf</code>
                  <span class="text" id="span_006898" smilref="Programming_Robots_with_ROS00021.smil#span_006898">topic. We need to provide the necessary messages, which is easy to do, in two steps:</span>
                </p>
                <list type="ol" id="list_000019">
                  <li id="li_000064">
                    <p id="p_001177">
                      <span class="text" id="span_006899" smilref="Programming_Robots_with_ROS00021.smil#span_006899">Publish</span>
                      <code xml:space="preserve" id="code_001651" smilref="Programming_Robots_with_ROS00021.smil#code_001651">sensor_msgs/JointState</code>
                      <span class="text" id="span_006900" smilref="Programming_Robots_with_ROS00021.smil#span_006900">messages for all of the robot's joints on the</span>
                      <span class="keep-together" id="span_006901">
                        <code xml:space="preserve" id="code_001652" smilref="Programming_Robots_with_ROS00021.smil#code_001652">/joint_states</code>
                      </span>
                      <span class="text" id="span_006902" smilref="Programming_Robots_with_ROS00021.smil#span_006902">topic</span>
                    </p>
                  </li>
                  <li id="li_000065">
                    <p id="p_001178">
                      <span class="text" id="span_006903" smilref="Programming_Robots_with_ROS00021.smil#span_006903">Use the</span>
                      <code xml:space="preserve" id="code_001653" smilref="Programming_Robots_with_ROS00021.smil#code_001653">robot_state_publisher</code>
                      <span class="text" id="span_006904" smilref="Programming_Robots_with_ROS00021.smil#span_006904">(which we encountered when building and debugging our TortoiseBot model in</span>
                      <a data-type="xref" href="#ch16-rossify_robots_modeling" external="false" id="a_000294" smilref="Programming_Robots_with_ROS00021.smil#a_000294">"Modeling the Robot: URDF"</a>
                      <span class="text" id="span_006905" smilref="Programming_Robots_with_ROS00021.smil#span_006905">) to convert the</span>
                      <code xml:space="preserve" id="code_001654" smilref="Programming_Robots_with_ROS00021.smil#code_001654">/joint_states</code>
                      <span class="text" id="span_006906" smilref="Programming_Robots_with_ROS00021.smil#span_006906">messages to corresponding</span>
                      <code xml:space="preserve" id="code_001655" smilref="Programming_Robots_with_ROS00021.smil#code_001655">/tf</code>
                      <span class="text" id="span_006907" smilref="Programming_Robots_with_ROS00021.smil#span_006907">messages.</span>
                    </p>
                  </li>
                </list>
                <figure id="figure_000088">
                  <h1 id="h1_000377" smilref="Programming_Robots_with_ROS00021.smil#h1_000377">Figure 17-1. Visualization of the TortoiseBot with missing transforms</h1>
                  <div id="ch17-tortoisebot_nav_rviz1" class="figure">
                    <img src="images/prwr_1701.jpg" alt="TortoiseBot model" id="img_000278" />
                  </div>
                </figure>
                <p id="p_001179">
                  <span class="text" id="span_006908" smilref="Programming_Robots_with_ROS00021.smil#span_006908">Let's check what is already being published on</span>
                  <code xml:space="preserve" id="code_001656" smilref="Programming_Robots_with_ROS00021.smil#code_001656">/joint_states</code>
                  <span class="text" id="span_006909" smilref="Programming_Robots_with_ROS00021.smil#span_006909">:</span>
                </p>
                <p id="p_001180">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001657"><span class="text" id="span_006910" smilref="Programming_Robots_with_ROS00021.smil#span_006910">
user@hostname$ </span><strong id="strong_000181" smilref="Programming_Robots_with_ROS00021.smil#strong_000181">rostopic echo /joint_states</strong><span class="text" id="span_006911" smilref="Programming_Robots_with_ROS00021.smil#span_006911">
header:
  seq: 110218
  stamp:
    secs: 1102
    nsecs: 357000000
  frame_id: ''
name: ['right_wheel_joint', 'left_wheel_joint']
position: [0.5652265431822379, 3.7257917095603696]
velocity: []
effort: []
</span></code>
                </p>
                <p id="p_001181">
                  <span class="text" id="span_006912" smilref="Programming_Robots_with_ROS00021.smil#span_006912">We see the positions of the right and left wheel joints being published repeatedly, but nothing about the caster joint or front wheel joint. Why is that? Looking back at</span>
                  <em id="em_000401" smilref="Programming_Robots_with_ROS00021.smil#em_000401">tortoisebot.urdf</em>
                  <span class="text" id="span_006913" smilref="Programming_Robots_with_ROS00021.smil#span_006913">, notice this line, within the configuration of the differential drive plugin:</span>
                </p>
                <p id="p_001182">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001658" smilref="Programming_Robots_with_ROS00021.smil#code_001658">      &lt;publishWheelJointState&gt;true&lt;/publishWheelJointState&gt;</code>
                </p>
                <p id="p_001183">
                  <span class="text" id="span_006914" smilref="Programming_Robots_with_ROS00021.smil#span_006914">That line tells the differential drive plugin to publish</span>
                  <code xml:space="preserve" id="code_001659" smilref="Programming_Robots_with_ROS00021.smil#code_001659">/joint_states</code>
                  <span class="text" id="span_006915" smilref="Programming_Robots_with_ROS00021.smil#span_006915">messages for the two joints that it is controlling. Fair enough, but we also want</span>
                  <code xml:space="preserve" id="code_001660" smilref="Programming_Robots_with_ROS00021.smil#code_001660">/joint_states</code>
                  <span class="text" id="span_006916" smilref="Programming_Robots_with_ROS00021.smil#span_006916">messages for the other two joints, which are passive. Fortunately, there's another Gazebo plugin that we can use here: the joint state publisher. In</span>
                  <em id="em_000402" smilref="Programming_Robots_with_ROS00021.smil#em_000402">tortoisebot.urdf</em>
                  <span class="text" id="span_006917" smilref="Programming_Robots_with_ROS00021.smil#span_006917">, add the URDF code from</span>
                  <a data-type="xref" href="#ch17-tortoisebot_nav_urdf_1" external="false" id="a_000295" smilref="Programming_Robots_with_ROS00021.smil#a_000295">Example 17-1</a>
                  <span class="text" id="span_006918" smilref="Programming_Robots_with_ROS00021.smil#span_006918">, which loads the new plugin and configures it to publish data for the caster and front wheel joints.</span>
                </p>
                <h1 id="h1_000378" smilref="Programming_Robots_with_ROS00021.smil#h1_000378">Example 17-1. Extra URDF code to load the joint state publisher plugin for TortoiseBot</h1>
                <div id="ch17-tortoisebot_nav_urdf_1" data-type="example">
                  <p id="p_001184">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001661" smilref="Programming_Robots_with_ROS00021.smil#code_001661">  &lt;gazebo&gt;
    &lt;plugin name="joint_state_publisher"
            filename="libgazebo_ros_joint_state_publisher.so"&gt;
      &lt;jointName&gt;front_caster_joint, front_wheel_joint&lt;/jointName&gt;
    &lt;/plugin&gt;
  &lt;/gazebo&gt;</code>
                  </p>
                </div>
                <p id="p_001185">
                  <span class="text" id="span_006919" smilref="Programming_Robots_with_ROS00021.smil#span_006919">Relaunch</span>
                  <em id="em_000403" smilref="Programming_Robots_with_ROS00021.smil#em_000403">tortoisebot.launch</em>
                  <span class="text" id="span_006920" smilref="Programming_Robots_with_ROS00021.smil#span_006920">, and try listening in on</span>
                  <code xml:space="preserve" id="code_001662" smilref="Programming_Robots_with_ROS00021.smil#code_001662">/joint_states</code>
                  <span class="text" id="span_006921" smilref="Programming_Robots_with_ROS00021.smil#span_006921">again:</span>
                </p>
                <p id="p_001186">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001663"><span class="text" id="span_006922" smilref="Programming_Robots_with_ROS00021.smil#span_006922">
user@hostname$ </span><strong id="strong_000182" smilref="Programming_Robots_with_ROS00021.smil#strong_000182">rostopic echo /joint_states</strong><span class="text" id="span_006923" smilref="Programming_Robots_with_ROS00021.smil#span_006923">
header:
  seq: 10698
  stamp:
    secs: 53
    nsecs: 502000000
  frame_id: ''
name: ['left_wheel_joint', 'right_wheel_joint']
position: [0.17974448092710826, 0.09370471036487604]
velocity: []
effort: []
---
header:
  seq: 10699
  stamp:
    secs: 53
    nsecs: 502000000
  frame_id: ''
name: ['front_caster_joint', 'front_wheel_joint']
position: [0.2139682253512678, 0.6647502699540064]
velocity: []
effort: []
</span></code>
                </p>
                <p id="p_001187">
                  <span class="text" id="span_006924" smilref="Programming_Robots_with_ROS00021.smil#span_006924">Now we can see position data for all four joints. It's arriving interleaved in different messages, but that's not a problem. With the</span>
                  <code xml:space="preserve" id="code_001664" smilref="Programming_Robots_with_ROS00021.smil#code_001664">/joint_states</code>
                  <span class="text" id="span_006925" smilref="Programming_Robots_with_ROS00021.smil#span_006925">data verified, it's time to add</span>
                  <code xml:space="preserve" id="code_001665" smilref="Programming_Robots_with_ROS00021.smil#code_001665">robot_state_publisher</code>
                  <span class="text" id="span_006926" smilref="Programming_Robots_with_ROS00021.smil#span_006926">. In</span>
                  <em id="em_000404" smilref="Programming_Robots_with_ROS00021.smil#em_000404">tortoisebot.launch</em>
                  <span class="text" id="span_006927" smilref="Programming_Robots_with_ROS00021.smil#span_006927">, add the following XML code:</span>
                </p>
                <p id="p_001188">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001666" smilref="Programming_Robots_with_ROS00021.smil#code_001666">  &lt;node name="robot_state_publisher" pkg="robot_state_publisher"
        type="robot_state_publisher"/&gt;</code>
                </p>
                <p class="pagebreak-before" id="p_001189">
                  <span class="text" id="span_006928" smilref="Programming_Robots_with_ROS00021.smil#span_006928">Relaunch again, then start</span>
                  <code xml:space="preserve" id="code_001667" smilref="Programming_Robots_with_ROS00021.smil#code_001667">rviz</code>
                  <span class="text" id="span_006929" smilref="Programming_Robots_with_ROS00021.smil#span_006929">. The result will be similar to</span>
                  <a data-type="xref" href="#ch17-tortoisebot_nav_rviz2" external="false" id="a_000296" smilref="Programming_Robots_with_ROS00021.smil#a_000296">Figure 17-2</a>
                  <span class="text" id="span_006930" smilref="Programming_Robots_with_ROS00021.smil#span_006930">, which looks much better. The wheels and caster are in the right location, because now</span>
                  <code xml:space="preserve" id="code_001668" smilref="Programming_Robots_with_ROS00021.smil#code_001668">rviz</code>
                  <span class="text" id="span_006931" smilref="Programming_Robots_with_ROS00021.smil#span_006931">is receiving the required transform data via</span>
                  <code xml:space="preserve" id="code_001669" smilref="Programming_Robots_with_ROS00021.smil#code_001669">/tf</code>
                  <span class="text" id="span_006932" smilref="Programming_Robots_with_ROS00021.smil#span_006932">messages.</span>
                </p>
                <figure id="figure_000089">
                  <h1 id="h1_000379" smilref="Programming_Robots_with_ROS00021.smil#h1_000379">Figure 17-2. Visualization of the TortoiseBot with transforms</h1>
                  <div id="ch17-tortoisebot_nav_rviz2" class="figure">
                    <img src="images/prwr_1702.jpg" alt="TortoiseBot model" id="img_000279" />
                  </div>
                </figure>
                <p id="p_001190">
                  <span class="text" id="span_006933" smilref="Programming_Robots_with_ROS00021.smil#span_006933">If you'd like, you can inspect the messages that are published by</span>
                  <code xml:space="preserve" id="code_001670" smilref="Programming_Robots_with_ROS00021.smil#code_001670">robot_state_publisher</code>
                  <span class="text" id="span_006934" smilref="Programming_Robots_with_ROS00021.smil#span_006934">in the usual way:</span>
                  <code xml:space="preserve" id="code_001671" smilref="Programming_Robots_with_ROS00021.smil#code_001671">rostopic echo /tf</code>
                  <span class="text" id="span_006935" smilref="Programming_Robots_with_ROS00021.smil#span_006935">. But we can do better than that, by asking</span>
                  <code xml:space="preserve" id="code_001672" smilref="Programming_Robots_with_ROS00021.smil#code_001672">rviz</code>
                  <span class="text" id="span_006936" smilref="Programming_Robots_with_ROS00021.smil#span_006936">to show us the data. In Displays, click "Add", select "TF", then click "OK". You will see the familiar red/green/blue axis origins pop up, with labels telling you their names. To see things a little more clearly, let's make the robot semitransparent: in Displays RobotModel, set Alpha to 0.5. The result will be similar to</span>
                  <a data-type="xref" href="#ch17-tortoisebot_nav_rviz3" external="false" id="a_000297" smilref="Programming_Robots_with_ROS00021.smil#a_000297">Figure 17-3</a>
                  <span class="text" id="span_006937" smilref="Programming_Robots_with_ROS00021.smil#span_006937">.</span>
                </p>
                <p id="ch17-idp39169952" data-type="indexterm" data-startref="ix_17-rossify_robots2-asciidoc3" smilref="Programming_Robots_with_ROS00021.smil#ch17-idp39169952">Now that we've confirmed that transforms are being handled properly , it's time to add a sensor to our robot.</p>
                <figure id="figure_000090">
                  <h1 id="h1_000380" smilref="Programming_Robots_with_ROS00021.smil#h1_000380">Figure 17-3. Visualization of the TortoiseBot with transforms visualized</h1>
                  <div id="ch17-tortoisebot_nav_rviz3" class="figure">
                    <img src="images/prwr_1703.jpg" alt="TortoiseBot model" id="img_000280" />
                  </div>
                </figure>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Adding a Laser Sensor" id="section_000171">
              <h1 id="h1_000381" smilref="Programming_Robots_with_ROS00021.smil#h1_000381">Adding a Laser Sensor</h1>
              <div class="sect1" id="ch17-idp40562416">
                <p data-type="indexterm" data-primary="autonomous navigation" data-secondary="laser sensor for" id="ch17-ix_17-rossify_robots2-asciidoc6">
                  <span class="text" id="span_006938" smilref="Programming_Robots_with_ROS00021.smil#span_006938">Still one of the most popular sensors for mobile robots,</span>
                  <em id="em_000405" smilref="Programming_Robots_with_ROS00021.smil#em_000405">laser range-finders</em>
                  <span class="text" id="span_006939" smilref="Programming_Robots_with_ROS00021.smil#span_006939">, or simply</span>
                  <em id="ch17-ix_17-rossify_robots2-asciidoc7" smilref="Programming_Robots_with_ROS00021.smil#ch17-ix_17-rossify_robots2-asciidoc7">lasers</em>
                  <span class="text" id="span_006940" smilref="Programming_Robots_with_ROS00021.smil#span_006940">, are very handy devices. A laser gives you a pretty accurate view of the world around you, and while it's just a single slice, that slice turns out to contain plenty of information for a robot that roams around a world with lots of continuous vertical structure (like walls and doors). In this section, we're going to add to our TortoiseBot a laser similar to those made by Hokuyo, whose sensors are widely used on robots today (for more on lasers, refer back to</span>
                  <a data-type="xref" href="#ch06-laser_scanners" external="false" id="a_000298" smilref="Programming_Robots_with_ROS00021.smil#a_000298">"Laser scanners"</a>
                  <span class="text" id="span_006941" smilref="Programming_Robots_with_ROS00021.smil#span_006941">).</span>
                </p>
                <p id="p_001191">
                  <span class="text" id="span_006942" smilref="Programming_Robots_with_ROS00021.smil#span_006942">If we were building a physical robot, this is where we would buy the sensor, physically bolt it to the robot, then hook up power and data. Because we're working in simulation, we can just edit some URDF. First, we need to add the link that will represent the sensor, plus a joint to attach it to the robot. The URDF code in</span>
                  <a data-type="xref" href="#ch17-tortoisebot_nav_urdf_2" external="false" id="a_000299" smilref="Programming_Robots_with_ROS00021.smil#a_000299">Example 17-2</a>
                  <span class="text" id="span_006943" smilref="Programming_Robots_with_ROS00021.smil#span_006943">adds a small cube representing the laser, attached to the top center of the robot chassis; insert this code in your</span>
                  <em id="em_000406" smilref="Programming_Robots_with_ROS00021.smil#em_000406">tortoisebot.urdf</em>
                  <span class="text" id="span_006944" smilref="Programming_Robots_with_ROS00021.smil#span_006944">. Note that, as with other parts of the robot, we must provide reasonable mass and inertia values for the laser; without that information, we cannot incorporate the laser into a physics-based simulation like Gazebo.</span>
                </p>
                <h1 id="h1_000382" smilref="Programming_Robots_with_ROS00021.smil#h1_000382">Example 17-2. Extra URDF code to define a link and joint for the laser sensor</h1>
                <div id="ch17-tortoisebot_nav_urdf_2" data-type="example">
                  <p id="p_001192">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001673" smilref="Programming_Robots_with_ROS00021.smil#code_001673">  &lt;link name="hokuyo_link"&gt;
    &lt;collision&gt;
      &lt;origin xyz="0 0 0" rpy="0 0 0"/&gt;
      &lt;geometry&gt;
        &lt;box size="0.1 0.1 0.1"/&gt;
      &lt;/geometry&gt;
    &lt;/collision&gt;
    &lt;visual&gt;
      &lt;origin xyz="0 0 0" rpy="0 0 0"/&gt;
      &lt;geometry&gt;
        &lt;box size="0.1 0.1 0.1"/&gt;
      &lt;/geometry&gt;
    &lt;/visual&gt;
    &lt;inertial&gt;
      &lt;mass value="1e-5" /&gt;
      &lt;origin xyz="0 0 0" rpy="0 0 0"/&gt;
      &lt;inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" /&gt;
    &lt;/inertial&gt;
  &lt;/link&gt;

  &lt;joint name="hokuyo_joint" type="fixed"&gt;
    &lt;axis xyz="0 1 0" /&gt;
    &lt;origin xyz="0 0 0.2" rpy="0 0 0"/&gt;
    &lt;parent link="base_link"/&gt;
    &lt;child link="hokuyo_link"/&gt;
  &lt;/joint&gt;</code>
                  </p>
                </div>
                <p id="p_001193">
                  <span class="text" id="span_006945" smilref="Programming_Robots_with_ROS00021.smil#span_006945">You can confirm the result by launching Gazebo again (and, optionally,</span>
                  <code xml:space="preserve" id="code_001674" smilref="Programming_Robots_with_ROS00021.smil#code_001674">rviz</code>
                  <span class="text" id="span_006946" smilref="Programming_Robots_with_ROS00021.smil#span_006946">). But so far, all we did was add the physical representation of the laser; we haven't told Gazebo that it should behave like a laser. To do that, we need to use the</span>
                  <code xml:space="preserve" id="code_001675" smilref="Programming_Robots_with_ROS00021.smil#code_001675">&lt;sensor&gt;</code>
                  <span class="text" id="span_006947" smilref="Programming_Robots_with_ROS00021.smil#span_006947">tag, which allows us to define and configure a sensor. Shown in</span>
                  <a data-type="xref" href="#ch17-tortoisebot_nav_urdf_3" external="false" id="a_000300" smilref="Programming_Robots_with_ROS00021.smil#a_000300">Example 17-3</a>
                  <span class="text" id="span_006948" smilref="Programming_Robots_with_ROS00021.smil#span_006948">is the URDF code required to attach a laser sensor to the TortoiseBot.</span>
                </p>
                <h1 id="h1_000383" smilref="Programming_Robots_with_ROS00021.smil#h1_000383">Example 17-3. Extra URDF code to define a laser sensor</h1>
                <div id="ch17-tortoisebot_nav_urdf_3" data-type="example">
                  <p id="p_001194">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001676" smilref="Programming_Robots_with_ROS00021.smil#code_001676">  &lt;gazebo reference="hokuyo_link"&gt;
    &lt;sensor type="gpu_ray" name="hokuyo"&gt;
      &lt;pose&gt;0 0 0 0 0 0&lt;/pose&gt;
      &lt;visualize&gt;false&lt;/visualize&gt;
      &lt;update_rate&gt;40&lt;/update_rate&gt;
      &lt;ray&gt;
        &lt;scan&gt;
          &lt;horizontal&gt;
            &lt;samples&gt;720&lt;/samples&gt;
            &lt;resolution&gt;1&lt;/resolution&gt;
            &lt;min_angle&gt;-1.570796&lt;/min_angle&gt;
            &lt;max_angle&gt;1.570796&lt;/max_angle&gt;
          &lt;/horizontal&gt;
        &lt;/scan&gt;
        &lt;range&gt;
          &lt;min&gt;0.10&lt;/min&gt;
          &lt;max&gt;30.0&lt;/max&gt;
          &lt;resolution&gt;0.01&lt;/resolution&gt;
        &lt;/range&gt;
      &lt;/ray&gt;
      &lt;plugin name="gpu_laser" filename="libgazebo_ros_gpu_laser.so"&gt;
        &lt;topicName&gt;/scan&lt;/topicName&gt;
        &lt;frameName&gt;hokuyo_link&lt;/frameName&gt;
      &lt;/plugin&gt;
    &lt;/sensor&gt;
  &lt;/gazebo&gt;</code>
                  </p>
                </div>
                <p id="p_001195" smilref="Programming_Robots_with_ROS00021.smil#p_001195">Here are the key points of this block of code:</p>
                <list type="ul" id="list_000020">
                  <li id="li_000066">
                    <p id="p_001196">
                      <span class="text" id="span_006949" smilref="Programming_Robots_with_ROS00021.smil#span_006949">First, we create a sensor of type</span>
                      <code xml:space="preserve" id="code_001677" smilref="Programming_Robots_with_ROS00021.smil#code_001677">gpu_ray</code>
                      <span class="text" id="span_006950" smilref="Programming_Robots_with_ROS00021.smil#span_006950">(which means that it will be simulated on your computer's GPU, which is more efficient than using the CPU), and attach it to the</span>
                      <code xml:space="preserve" id="code_001678" smilref="Programming_Robots_with_ROS00021.smil#code_001678">hokuyo_link</code>
                      <span class="text" id="span_006951" smilref="Programming_Robots_with_ROS00021.smil#span_006951">that we created previously.</span>
                    </p>
                  </li>
                  <li id="li_000067">
                    <p id="p_001197" smilref="Programming_Robots_with_ROS00021.smil#p_001197">Then, we configure the sensor to behave similarly to a Hokuyo laser: publish new scans at 40 Hz, take 720 samples per scan over a field of view of 180 degrees, and scan from a minimum of 0.1 m to a maximum of 30 m.</p>
                  </li>
                  <li id="li_000068">
                    <p id="p_001198">
                      <span class="text" id="span_006952" smilref="Programming_Robots_with_ROS00021.smil#span_006952">Finally, we load the GPU laser Gazebo plugin and configure it to publish data from the laser via</span>
                      <code xml:space="preserve" id="code_001679" smilref="Programming_Robots_with_ROS00021.smil#code_001679">sensor_msgs/LaserScan</code>
                      <span class="text" id="span_006953" smilref="Programming_Robots_with_ROS00021.smil#span_006953">messages on the</span>
                      <code xml:space="preserve" id="code_001680" smilref="Programming_Robots_with_ROS00021.smil#code_001680">scan</code>
                      <span class="text" id="span_006954" smilref="Programming_Robots_with_ROS00021.smil#span_006954">topic. For more information on this and other Gazebo plugins, check the</span>
                      <a href="http://wiki.ros.org/gazebo_plugins?distro=indigo" external="true" id="a_000301">
                        <code xml:space="preserve" id="code_001681" smilref="Programming_Robots_with_ROS00021.smil#code_001681">gazebo_plugins</code>
                        <span class="text" id="span_006955" smilref="Programming_Robots_with_ROS00021.smil#span_006955">documentation</span>
                      </a>
                      <span class="text" id="span_006956" smilref="Programming_Robots_with_ROS00021.smil#span_006956">.</span>
                    </p>
                  </li>
                </list>
                <p id="p_001199">
                  <span class="text" id="span_006957" smilref="Programming_Robots_with_ROS00021.smil#span_006957">Let's check the result of attaching the laser. Add the code from</span>
                  <a data-type="xref" href="#ch17-tortoisebot_nav_urdf_3" external="false" id="a_000302" smilref="Programming_Robots_with_ROS00021.smil#a_000302">Example 17-3</a>
                  <span class="text" id="span_006958" smilref="Programming_Robots_with_ROS00021.smil#span_006958">to your</span>
                  <em id="em_000407" smilref="Programming_Robots_with_ROS00021.smil#em_000407">tortoise.urdf</em>
                  <span class="text" id="span_006959" smilref="Programming_Robots_with_ROS00021.smil#span_006959">, then relaunch. To give the laser something to look at, use the Gazebo GUI to drop a cylinder somewhere in front of the robot, as shown in</span>
                  <a data-type="xref" href="#ch17-tortoisebot_nav_gz_1" external="false" id="a_000303" smilref="Programming_Robots_with_ROS00021.smil#a_000303">Figure 17-4</a>
                  <span class="text" id="span_006960" smilref="Programming_Robots_with_ROS00021.smil#span_006960">.</span>
                </p>
                <p id="p_001200">
                  <span class="text" id="span_006961" smilref="Programming_Robots_with_ROS00021.smil#span_006961">Start</span>
                  <code xml:space="preserve" id="code_001682" smilref="Programming_Robots_with_ROS00021.smil#code_001682">rviz</code>
                  <span class="text" id="span_006962" smilref="Programming_Robots_with_ROS00021.smil#span_006962">and configure it to show the laser data: in Displays, click "Add", select "LaserScan", and click "OK". Then, in Displays LaserScan, set the topic to</span>
                  <code xml:space="preserve" id="code_001683" smilref="Programming_Robots_with_ROS00021.smil#code_001683">/scan</code>
                  <span class="text" id="span_006963" smilref="Programming_Robots_with_ROS00021.smil#span_006963">. You should see a visualization of the laser scan similar to</span>
                  <a data-type="xref" href="#ch17-tortoisebot_nav_rviz4" external="false" id="a_000304" smilref="Programming_Robots_with_ROS00021.smil#a_000304">Figure 17-5</a>
                  <span class="text" id="span_006964" smilref="Programming_Robots_with_ROS00021.smil#span_006964">.</span>
                </p>
                <p id="p_001201">
                  <span class="text" id="span_006965" smilref="Programming_Robots_with_ROS00021.smil#span_006965">In the Gazebo GUI, trying moving the cylinder around, and inserting and moving other objects, while checking the effect on the laser scan display in</span>
                  <code xml:space="preserve" id="code_001684" smilref="Programming_Robots_with_ROS00021.smil#code_001684">rviz</code>
                  <span class="text" id="span_006966" smilref="Programming_Robots_with_ROS00021.smil#span_006966">. You can also try driving the robot from the keyboard with</span>
                  <code xml:space="preserve" id="code_001685" smilref="Programming_Robots_with_ROS00021.smil#code_001685">teleop_twist_keyboard</code>
                  <span class="text" id="span_006967" smilref="Programming_Robots_with_ROS00021.smil#span_006967">, as we did in</span>
                  <a data-type="xref" href="#ch16-rossify_robots_gazebo" external="false" id="a_000305" smilref="Programming_Robots_with_ROS00021.smil#a_000305">"Simulation in Gazebo"</a>
                  <span class="text" id="span_006968" smilref="Programming_Robots_with_ROS00021.smil#span_006968">.</span>
                </p>
                <figure id="figure_000091">
                  <h1 id="h1_000384" smilref="Programming_Robots_with_ROS00021.smil#h1_000384">Figure 17-4. Simulation of the TortoiseBot with an obstacle for the laser to see</h1>
                  <div id="ch17-tortoisebot_nav_gz_1" class="figure">
                    <img src="images/prwr_1704.jpg" alt="TortoiseBot model" id="img_000281" />
                  </div>
                </figure>
                <figure id="figure_000092">
                  <h1 id="h1_000385" smilref="Programming_Robots_with_ROS00021.smil#h1_000385">Figure 17-5. Visualization of laser scans from the TortoiseBot</h1>
                  <div id="ch17-tortoisebot_nav_rviz4" class="figure">
                    <img src="images/prwr_1705.jpg" alt="TortoiseBot model" id="img_000282" />
                  </div>
                </figure>
                <p id="ch17-idp40992448" data-type="indexterm" data-startref="ix_17-rossify_robots2-asciidoc6" smilref="Programming_Robots_with_ROS00021.smil#ch17-idp40992448">We now have a simulated robot with good transform and laser data, so it's time to add autonomous navigation.</p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Configuring the Navigation Stack" id="section_000172">
              <h1 id="h1_000386" smilref="Programming_Robots_with_ROS00021.smil#h1_000386">Configuring the Navigation Stack</h1>
              <div class="sect1" id="ch17-rossify_robots2_nav_stack">
                <p id="ch17-ix_17-rossify_robots2-asciidoc9" data-type="indexterm" data-primary="autonomous navigation" data-secondary="nav stack configuration for" smilref="Programming_Robots_with_ROS00021.smil#ch17-ix_17-rossify_robots2-asciidoc9">We're going to give the TortoiseBot the ability to autonomously navigate with a known map (i.e., we're not going to build a map). To add navigation to a robot, we need to launch three new nodes:</p>
                <list type="ul" id="list_000021">
                  <li id="li_000069">
                    <p data-type="indexterm" data-primary="static map" id="ch17-ix_17-rossify_robots2-asciidoc12">
                      <code xml:space="preserve" id="code_001686" smilref="Programming_Robots_with_ROS00021.smil#code_001686">map_server</code>
                      <span class="text" id="span_006969" smilref="Programming_Robots_with_ROS00021.smil#span_006969">, to provide the static map against which the robot will localize and plan</span>
                    </p>
                  </li>
                  <li id="li_000070">
                    <p id="p_001202">
                      <code xml:space="preserve" id="code_001687" smilref="Programming_Robots_with_ROS00021.smil#code_001687">amcl</code>
                      <span class="text" id="span_006970" smilref="Programming_Robots_with_ROS00021.smil#span_006970">, to localize the robot against the static map</span>
                    </p>
                  </li>
                  <li id="li_000071">
                    <p id="p_001203">
                      <code xml:space="preserve" id="code_001688" smilref="Programming_Robots_with_ROS00021.smil#code_001688">move_base</code>
                      <span class="text" id="span_006971" smilref="Programming_Robots_with_ROS00021.smil#span_006971">, to handle global planning and local control for the robot</span>
                    </p>
                  </li>
                </list>
                <h1 id="h1_000387" smilref="Programming_Robots_with_ROS00021.smil#h1_000387">Note</h1>
                <div data-type="note" epub:type="note" id="div_000039">
                  <p id="p_001204">
                    <span class="text" id="span_006972" smilref="Programming_Robots_with_ROS00021.smil#span_006972">The theory and operation of the ROS navigation stack are explained in</span>
                    <a data-type="xref" href="#ch10-navigating" external="false" id="a_000306" smilref="Programming_Robots_with_ROS00021.smil#a_000306">Chapter 10</a>
                    <span class="text" id="span_006973" smilref="Programming_Robots_with_ROS00021.smil#span_006973">; in this section, we're specifically covering the process of configuring navigation for use on a new robot.</span>
                  </p>
                </div>
                <p data-type="indexterm" data-primary="map_server" data-secondary="and nav stack" id="ch17-ix_17-rossify_robots2-asciidoc13">
                  <span class="text" id="span_006974" smilref="Programming_Robots_with_ROS00022.smil#span_006974">To run</span>
                  <code xml:space="preserve" id="code_001689" smilref="Programming_Robots_with_ROS00022.smil#code_001689">map_server</code>
                  <span class="text" id="span_006975" smilref="Programming_Robots_with_ROS00022.smil#span_006975">, we need a static map. Let's reuse the map from</span>
                  <a data-type="xref" href="#ch09-mapping" external="false" id="a_000307" smilref="Programming_Robots_with_ROS00022.smil#a_000307">Chapter 9</a>
                  <span class="text" id="span_006976" smilref="Programming_Robots_with_ROS00022.smil#span_006976">, which was created by a mobile robot roaming around in a reasonably complex office building, (see</span>
                  <a data-type="xref" href="#ch17-tortoisebot_nav_map" external="false" id="a_000308" smilref="Programming_Robots_with_ROS00022.smil#a_000308">Figure 17-6</a>
                  <span class="text" id="span_006977" smilref="Programming_Robots_with_ROS00022.smil#span_006977">).</span>
                </p>
                <p id="p_001205">
                  <span class="text" id="span_006978" smilref="Programming_Robots_with_ROS00022.smil#span_006978">That map is stored in the</span>
                  <code xml:space="preserve" id="code_001690" smilref="Programming_Robots_with_ROS00022.smil#code_001690">mapping</code>
                  <span class="text" id="span_006979" smilref="Programming_Robots_with_ROS00022.smil#span_006979">package that we created previously. To have</span>
                  <code xml:space="preserve" id="code_001691" smilref="Programming_Robots_with_ROS00022.smil#code_001691">map_server</code>
                  <span class="text" id="span_006980" smilref="Programming_Robots_with_ROS00022.smil#span_006980">provide this map, add the following XML code to your</span>
                  <em id="em_000408" smilref="Programming_Robots_with_ROS00022.smil#em_000408">tortoisebot.launch</em>
                  <span class="text" id="span_006981" smilref="Programming_Robots_with_ROS00022.smil#span_006981">file, inside the</span>
                  <code xml:space="preserve" id="code_001692" smilref="Programming_Robots_with_ROS00022.smil#code_001692">&lt;launch&gt;</code>
                  <span class="text" id="span_006982" smilref="Programming_Robots_with_ROS00022.smil#span_006982">block:</span>
                </p>
                <p id="p_001206">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001693" smilref="Programming_Robots_with_ROS00022.smil#code_001693">  &lt;node name="map_server" pkg="map_server" type="map_server"
        args="$(find mapping)/maps/willow.yaml"/&gt;</code>
                </p>
                <p id="p_001207">
                  <span class="text" id="span_006983" smilref="Programming_Robots_with_ROS00022.smil#span_006983">We also need to put our TortoiseBot into a 3D simulation world that matches the 2D map we're using. Fortunately, there is just such a world in the</span>
                  <code xml:space="preserve" id="code_001694" smilref="Programming_Robots_with_ROS00022.smil#code_001694">gazebo_ros</code>
                  <span class="text" id="span_006984" smilref="Programming_Robots_with_ROS00022.smil#span_006984">package, with a launch file ready for our use. In</span>
                  <em id="em_000409" smilref="Programming_Robots_with_ROS00022.smil#em_000409">tortoisebot.launch</em>
                  <span class="text" id="span_006985" smilref="Programming_Robots_with_ROS00022.smil#span_006985">, remove the line that includes</span>
                  <code xml:space="preserve" id="code_001695" smilref="Programming_Robots_with_ROS00022.smil#code_001695">empty_world.launch</code>
                  <span class="text" id="span_006986" smilref="Programming_Robots_with_ROS00022.smil#span_006986">and substitute the following line, which instead includes</span>
                  <em id="em_000410" smilref="Programming_Robots_with_ROS00022.smil#em_000410">willowgarage_world.launch</em>
                  <span class="text" id="span_006987" smilref="Programming_Robots_with_ROS00022.smil#span_006987">:</span>
                </p>
                <p id="p_001208">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001696" smilref="Programming_Robots_with_ROS00022.smil#code_001696">  &lt;include file="$(find gazebo_ros)/launch/willowgarage_world.launch"/&gt;</code>
                </p>
                <figure id="figure_000093">
                  <h1 id="h1_000388" smilref="Programming_Robots_with_ROS00022.smil#h1_000388">Figure 17-6. Map of an office building, to be used for navigation</h1>
                  <div id="ch17-tortoisebot_nav_map" class="figure">
                    <img src="images/prwr_1706.jpg" alt="Willow map" id="img_000283" />
                  </div>
                </figure>
                <p id="p_001209">
                  <span class="text" id="span_006988" smilref="Programming_Robots_with_ROS00022.smil#span_006988">Now that we're using a nonempty world, we care about where the TortoiseBot gets placed. Previously, when spawning a TortoiseBot with</span>
                  <code xml:space="preserve" id="code_001697" smilref="Programming_Robots_with_ROS00022.smil#code_001697">spawn_model</code>
                  <span class="text" id="span_006989" smilref="Programming_Robots_with_ROS00022.smil#span_006989">, we didn't specify a position, so the robot was placed at the origin of the world. Given the office environment provided by</span>
                  <em id="em_000411" smilref="Programming_Robots_with_ROS00022.smil#em_000411">willowgarage_world.launch</em>
                  <span class="text" id="span_006990" smilref="Programming_Robots_with_ROS00022.smil#span_006990">, it will be helpful to put the robot in an open area where we can easily localize it. A convenient position, relative to the origin of the world, is +8 m in</span>
                  <em id="em_000412" smilref="Programming_Robots_with_ROS00022.smil#em_000412">x</em>
                  <span class="text" id="span_006991" smilref="Programming_Robots_with_ROS00022.smil#span_006991">and -8 m in</span>
                  <em id="em_000413" smilref="Programming_Robots_with_ROS00022.smil#em_000413">y</em>
                  <span class="text" id="span_006992" smilref="Programming_Robots_with_ROS00022.smil#span_006992">. To place the robot at this position, remove the line from</span>
                  <em id="em_000414" smilref="Programming_Robots_with_ROS00022.smil#em_000414">tortoisebot.launch</em>
                  <span class="text" id="span_006993" smilref="Programming_Robots_with_ROS00022.smil#span_006993">that calls</span>
                  <code xml:space="preserve" id="code_001698" smilref="Programming_Robots_with_ROS00022.smil#code_001698">spawn_model</code>
                  <span class="text" id="span_006994" smilref="Programming_Robots_with_ROS00022.smil#span_006994">and replace it with the line shown here, which specifies values for the robot's</span>
                  <em id="em_000415" smilref="Programming_Robots_with_ROS00022.smil#em_000415">x</em>
                  <span class="text" id="span_006995" smilref="Programming_Robots_with_ROS00022.smil#span_006995">and</span>
                  <em id="em_000416" smilref="Programming_Robots_with_ROS00022.smil#em_000416">y</em>
                  <span class="text" id="span_006996" smilref="Programming_Robots_with_ROS00022.smil#span_006996">position (in the same way, you can also specify a</span>
                  <em id="em_000417" smilref="Programming_Robots_with_ROS00022.smil#em_000417">z</em>
                  <span class="text" id="span_006997" smilref="Programming_Robots_with_ROS00022.smil#span_006997">position and/or an orientation):</span>
                </p>
                <p id="p_001210">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001699" smilref="Programming_Robots_with_ROS00022.smil#code_001699">  &lt;node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model"
        args="-param robot_description -urdf -model tortoisebot -x 8 -y -8" /&gt;</code>
                </p>
                <p id="p_001211">
                  <span class="text" id="span_006998" smilref="Programming_Robots_with_ROS00022.smil#span_006998">To check that the world is loaded with the robot placed correctly within it, relaunch</span>
                  <em id="em_000418" smilref="Programming_Robots_with_ROS00022.smil#em_000418">tortoisebot.launch</em>
                  <span class="text" id="span_006999" smilref="Programming_Robots_with_ROS00022.smil#span_006999">. Use the Gazebo GUI to change your point of view to get a result similar to</span>
                  <a data-type="xref" href="#ch17-tortoisebot_nav_gz_2" external="false" id="a_000309" smilref="Programming_Robots_with_ROS00022.smil#a_000309">Figure 17-7</a>
                  <span class="text" id="span_007000" smilref="Programming_Robots_with_ROS00022.smil#span_007000">, in which you're looking down on the building from above, with the robot visible.</span>
                </p>
                <figure id="figure_000094">
                  <h1 id="h1_000389" smilref="Programming_Robots_with_ROS00022.smil#h1_000389">Figure 17-7. TortoiseBot in an office building in Gazebo</h1>
                  <div id="ch17-tortoisebot_nav_gz_2" class="figure">
                    <img src="images/prwr_1707.jpg" alt="TortoiseBot in an office building in Gazebo" id="img_000284" />
                  </div>
                </figure>
                <p id="p_001212">
                  <span class="text" id="span_007001" smilref="Programming_Robots_with_ROS00022.smil#span_007001">Let's also check that</span>
                  <code xml:space="preserve" id="code_001700" smilref="Programming_Robots_with_ROS00022.smil#code_001700">map_server</code>
                  <span class="text" id="span_007002" smilref="Programming_Robots_with_ROS00022.smil#span_007002">is working. Run</span>
                  <code xml:space="preserve" id="code_001701" smilref="Programming_Robots_with_ROS00022.smil#code_001701">rviz</code>
                  <span class="text" id="span_007003" smilref="Programming_Robots_with_ROS00022.smil#span_007003">and configure it to show the map: in Displays, click "Add", select "Map", and click "OK". Then, in Displays Map, set the topic to</span>
                  <code xml:space="preserve" id="code_001702" smilref="Programming_Robots_with_ROS00022.smil#code_001702">/map</code>
                  <span class="text" id="span_007004" smilref="Programming_Robots_with_ROS00022.smil#span_007004">. In addition, in Displays Global Options, change the fixed frame to</span>
                  <code xml:space="preserve" id="code_001703" smilref="Programming_Robots_with_ROS00022.smil#code_001703">map</code>
                  <span class="text" id="span_007005" smilref="Programming_Robots_with_ROS00022.smil#span_007005">. You should see the 2D map appear, similar to</span>
                  <a data-type="xref" href="#ch17-tortoisebot_nav_rviz5" external="false" id="a_000310" smilref="Programming_Robots_with_ROS00022.smil#a_000310">Figure 17-8</a>
                  <span class="text" id="span_007006" smilref="Programming_Robots_with_ROS00022.smil#span_007006">.</span>
                </p>
                <figure id="figure_000095">
                  <h1 id="h1_000390" smilref="Programming_Robots_with_ROS00022.smil#h1_000390">Figure 17-8. The static map displayed in rviz</h1>
                  <div id="ch17-tortoisebot_nav_rviz5" class="figure">
                    <img src="images/prwr_1708.jpg" alt="The static map displayed in +rviz+" id="img_000285" />
                  </div>
                </figure>
                <p data-type="indexterm" data-primary="amcl" data-secondary="for TortoiseBot nav stack" id="ch17-idp41074752" data-startref="ix_17-rossify_robots2-asciidoc13">
                  <span class="text" id="span_007007" smilref="Programming_Robots_with_ROS00022.smil#span_007007">With our robot ready to go in a simulated office building, and a</span>
                  <code xml:space="preserve" id="code_001704" smilref="Programming_Robots_with_ROS00022.smil#code_001704">map_server</code>
                  <span class="text" id="span_007008" smilref="Programming_Robots_with_ROS00022.smil#span_007008">providing a matching static map, we need to launch</span>
                  <code id="ch17-idp41076432" xml:space="preserve" smilref="Programming_Robots_with_ROS00022.smil#ch17-idp41076432">amcl</code>
                  <span class="text" id="span_007009" smilref="Programming_Robots_with_ROS00022.smil#span_007009">, which will localize the robot within the building, using the map. While</span>
                  <code xml:space="preserve" id="code_001705" smilref="Programming_Robots_with_ROS00022.smil#code_001705">amcl</code>
                  <span class="text" id="span_007010" smilref="Programming_Robots_with_ROS00022.smil#span_007010">is extremely configurable and generally does need to be tuned for good performance, for our purposes, we can use the example configuration for differential-drive robots, which is provided as a launch file in the</span>
                  <code xml:space="preserve" id="code_001706" smilref="Programming_Robots_with_ROS00022.smil#code_001706">amcl</code>
                  <span class="text" id="span_007011" smilref="Programming_Robots_with_ROS00022.smil#span_007011">package. Add the following line to your</span>
                  <em id="em_000419" smilref="Programming_Robots_with_ROS00022.smil#em_000419">tortoisebot.launch</em>
                  <span class="text" id="span_007012" smilref="Programming_Robots_with_ROS00022.smil#span_007012">file:</span>
                </p>
                <p id="p_001213">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001707" smilref="Programming_Robots_with_ROS00022.smil#code_001707">  &lt;include file="$(find amcl)/examples/amcl_diff.launch"/&gt;</code>
                </p>
                <p data-type="indexterm" data-primary="costmaps" id="ch17-ix_17-rossify_robots2-asciidoc15a" data-secondary="for TortoiseBot nav stack">
                  <span class="text" id="span_007013" smilref="Programming_Robots_with_ROS00022.smil#span_007013">Now it's time to set up</span>
                  <code id="ch17-ix_17-rossify_robots2-asciidoc14" xml:space="preserve" smilref="Programming_Robots_with_ROS00022.smil#ch17-ix_17-rossify_robots2-asciidoc14">move_base</code>
                  <span class="text" id="span_007014" smilref="Programming_Robots_with_ROS00022.smil#span_007014">. As explained in</span>
                  <a data-type="xref" href="#ch10-navigating" external="false" id="a_000311" smilref="Programming_Robots_with_ROS00022.smil#a_000311">Chapter 10</a>
                  <span class="text" id="span_007015" smilref="Programming_Robots_with_ROS00022.smil#span_007015">,</span>
                  <code xml:space="preserve" id="code_001708" smilref="Programming_Robots_with_ROS00022.smil#code_001708">move_base</code>
                  <span class="text" id="span_007016" smilref="Programming_Robots_with_ROS00022.smil#span_007016">is a complex node, with a variety of opportunities for configuration. Fortunately, its default configuration is pretty close to what we need, leaving just a handful of things for us to change. First, we need to set the parameters that will be common to both the global and local costmaps that are used by</span>
                  <code xml:space="preserve" id="code_001709" smilref="Programming_Robots_with_ROS00022.smil#code_001709">move_base</code>
                  <span class="text" id="span_007017" smilref="Programming_Robots_with_ROS00022.smil#span_007017">. Create a file called</span>
                  <em id="ch17-ix_17-rossify_robots2-asciidoc16" smilref="Programming_Robots_with_ROS00022.smil#ch17-ix_17-rossify_robots2-asciidoc16">costmap_common_params.yaml</em>
                  <span class="text" id="span_007018" smilref="Programming_Robots_with_ROS00022.smil#span_007018">and insert the YAML code from</span>
                  <a data-type="xref" href="#ch17-tortoisebot_nav_yaml_1" external="false" id="a_000312" smilref="Programming_Robots_with_ROS00022.smil#a_000312">Example 17-4</a>
                  <span class="text" id="span_007019" smilref="Programming_Robots_with_ROS00022.smil#span_007019">.</span>
                </p>
                <h1 id="h1_000391" smilref="Programming_Robots_with_ROS00022.smil#h1_000391">Example 17-4. costmap_common_params.yaml</h1>
                <div id="ch17-tortoisebot_nav_yaml_1" data-type="example">
                  <p id="p_001214">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001710" smilref="Programming_Robots_with_ROS00022.smil#code_001710">footprint: [[0.35, 0.15], [0.35, -0.15], [-0.35, -0.15], [-0.35, 0.15]]
observation_sources: laser_scan_sensor
laser_scan_sensor:
  sensor_frame: hokuyo_link
  data_type: LaserScan
  topic: scan
  marking: true
  clearing: true</code>
                  </p>
                </div>
                <p id="p_001215">
                  <span class="text" id="span_007020" smilref="Programming_Robots_with_ROS00022.smil#span_007020">We first define the shape of the robot's footprint as a rectangle (you can add more points to make a different 2D polygon), using the outer dimensions of the chassis plus caster. Then we define our laser to be an observation source. As a result, data published on the</span>
                  <code xml:space="preserve" id="code_001711" smilref="Programming_Robots_with_ROS00022.smil#code_001711">scan</code>
                  <span class="text" id="span_007021" smilref="Programming_Robots_with_ROS00022.smil#span_007021">topic will be used to update the costmaps, both inserting obstacles (</span>
                  <code xml:space="preserve" id="code_001712" smilref="Programming_Robots_with_ROS00022.smil#code_001712">marking</code>
                  <span class="text" id="span_007022" smilref="Programming_Robots_with_ROS00022.smil#span_007022">) and asserting free space (</span>
                  <code xml:space="preserve" id="code_001713" smilref="Programming_Robots_with_ROS00022.smil#code_001713">clearing</code>
                  <span class="text" id="span_007023" smilref="Programming_Robots_with_ROS00022.smil#span_007023">).</span>
                </p>
                <p id="p_001216">
                  <span class="text" id="span_007024" smilref="Programming_Robots_with_ROS00022.smil#span_007024">With the common parameters established, we need to configure the global and local costmaps separately. For the global costmap, create a file called</span>
                  <em id="em_000420" smilref="Programming_Robots_with_ROS00022.smil#em_000420">global_costmap_params.yaml</em>
                  <span class="text" id="span_007025" smilref="Programming_Robots_with_ROS00022.smil#span_007025">, and insert the YAML code from</span>
                  <a data-type="xref" href="#ch17-tortoisebot_nav_yaml_2" external="false" id="a_000313" smilref="Programming_Robots_with_ROS00022.smil#a_000313">Example 17-5</a>
                  <span class="text" id="span_007026" smilref="Programming_Robots_with_ROS00022.smil#span_007026">.</span>
                </p>
                <h1 id="h1_000392" smilref="Programming_Robots_with_ROS00022.smil#h1_000392">Example 17-5. global_costmap_params.yaml</h1>
                <div id="ch17-tortoisebot_nav_yaml_2" data-type="example">
                  <p id="p_001217">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001714" smilref="Programming_Robots_with_ROS00022.smil#code_001714">global_costmap:
  global_frame: map
  robot_base_frame: base_link
  static_map: true</code>
                  </p>
                </div>
                <p id="ch17-idp41096384" data-type="indexterm" data-startref="ix_17-rossify_robots2-asciidoc17">
                  <span class="text" id="span_007027" smilref="Programming_Robots_with_ROS00022.smil#span_007027">We tell the global costmap to use a static map (to be provided by the</span>
                  <code xml:space="preserve" id="code_001715" smilref="Programming_Robots_with_ROS00022.smil#code_001715">map_server</code>
                  <span class="text" id="span_007028" smilref="Programming_Robots_with_ROS00022.smil#span_007028">) and that it should do its reasoning in the</span>
                  <code xml:space="preserve" id="code_001716" smilref="Programming_Robots_with_ROS00022.smil#code_001716">map</code>
                  <span class="text" id="span_007029" smilref="Programming_Robots_with_ROS00022.smil#span_007029">frame, while it should consider the canonical frame of the robot to be</span>
                  <code xml:space="preserve" id="code_001717" smilref="Programming_Robots_with_ROS00022.smil#code_001717">base_link</code>
                  <span class="text" id="span_007030" smilref="Programming_Robots_with_ROS00022.smil#span_007030">.</span>
                </p>
                <p id="p_001218">
                  <span class="text" id="span_007031" smilref="Programming_Robots_with_ROS00022.smil#span_007031">The local costmap requires only a slightly different configuration; create a file called</span>
                  <em id="em_000421" smilref="Programming_Robots_with_ROS00022.smil#em_000421">local_costmap_params.yaml</em>
                  <span class="text" id="span_007032" smilref="Programming_Robots_with_ROS00022.smil#span_007032">, and insert the YAML code from</span>
                  <a data-type="xref" href="#ch17-tortoisebot_nav_yaml_3" external="false" id="a_000314" smilref="Programming_Robots_with_ROS00022.smil#a_000314">Example 17-6</a>
                  <span class="text" id="span_007033" smilref="Programming_Robots_with_ROS00022.smil#span_007033">.</span>
                </p>
                <h1 id="h1_000393" smilref="Programming_Robots_with_ROS00022.smil#h1_000393">Example 17-6. local_costmap_params.yaml</h1>
                <div id="ch17-tortoisebot_nav_yaml_3" data-type="example">
                  <p id="p_001219">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001718" smilref="Programming_Robots_with_ROS00022.smil#code_001718">local_costmap:
  global_frame: odom
  robot_base_frame: base_link
  rolling_window: true</code>
                  </p>
                </div>
                <p data-type="indexterm" data-primary="odometry" data-secondary="odom topic" id="ch17-idp41101792">
                  <span class="text" id="span_007034" smilref="Programming_Robots_with_ROS00022.smil#span_007034">Whereas the global costmap uses a large static map, we tell the local costmap to use a small rolling window: the robot always remains at the center of the window, with obstacle data outside the window being discarded, and potentially reobserved later, as the robot moves. We also tell the local costmap to reason in the</span>
                  <code xml:space="preserve" id="code_001719" smilref="Programming_Robots_with_ROS00022.smil#code_001719">odom</code>
                  <span class="text" id="span_007035" smilref="Programming_Robots_with_ROS00022.smil#span_007035">frame, in which the robot's pose may drift, but tends to vary smoothly, as compared to the</span>
                  <code xml:space="preserve" id="code_001720" smilref="Programming_Robots_with_ROS00022.smil#code_001720">map</code>
                  <span class="text" id="span_007036" smilref="Programming_Robots_with_ROS00022.smil#span_007036">frame, in which the pose can make discrete jumps. These two differences cause the local costmap to be more suitable for local obstacle avoidance, in which what's happening right now, near the robot, is far more important than either where the robot thinks it is in the world, or what the static map (which might be outdated, after all) says.</span>
                </p>
                <p id="p_001220">
                  <span class="text" id="span_007037" smilref="Programming_Robots_with_ROS00022.smil#span_007037">We also need to configure the base local planner, which does the actual work of planning paths and computing control commands. Create a file called</span>
                  <em id="em_000422" smilref="Programming_Robots_with_ROS00022.smil#em_000422">base_local_planner_params.yaml</em>
                  <span class="text" id="span_007038" smilref="Programming_Robots_with_ROS00022.smil#span_007038">, and insert the YAML code from</span>
                  <a data-type="xref" href="#ch17-tortoisebot_nav_yaml_4" external="false" id="a_000315" smilref="Programming_Robots_with_ROS00022.smil#a_000315">Example 17-7</a>
                  <span class="text" id="span_007039" smilref="Programming_Robots_with_ROS00022.smil#span_007039">.</span>
                </p>
                <h1 id="h1_000394" smilref="Programming_Robots_with_ROS00022.smil#h1_000394">Example 17-7. base_local_planner_params.yaml</h1>
                <div id="ch17-tortoisebot_nav_yaml_4" data-type="example">
                  <p id="p_001221">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001721" smilref="Programming_Robots_with_ROS00022.smil#code_001721">TrajectoryPlannerROS:
  holonomic_robot: false</code>
                  </p>
                </div>
                <p id="p_001222">
                  <span class="text" id="span_007040" smilref="Programming_Robots_with_ROS00022.smil#span_007040">In this case, we're setting just one parameter, to tell the planner that the TortoiseBot is not holonomic (because it is differential-drive; for more on types of mobile robots, refer back to</span>
                  <a data-type="xref" href="#ch06-robots_actuation_mobile_platforms" external="false" id="a_000316" smilref="Programming_Robots_with_ROS00022.smil#a_000316">"Actuation: Mobile Platform"</a>
                  <span class="text" id="span_007041" smilref="Programming_Robots_with_ROS00022.smil#span_007041">).</span>
                </p>
                <p id="p_001223">
                  <span class="text" id="span_007042" smilref="Programming_Robots_with_ROS00022.smil#span_007042">With all the configuration established, it's time to modify the launch file to run</span>
                  <code xml:space="preserve" id="code_001722" smilref="Programming_Robots_with_ROS00022.smil#code_001722">move_base</code>
                  <span class="text" id="span_007043" smilref="Programming_Robots_with_ROS00022.smil#span_007043">. Add the code from</span>
                  <a data-type="xref" href="#ch17-tortoisebot_nav_launch_4" external="false" id="a_000317" smilref="Programming_Robots_with_ROS00022.smil#a_000317">Example 17-8</a>
                  <span class="text" id="span_007044" smilref="Programming_Robots_with_ROS00022.smil#span_007044">to your</span>
                  <em id="em_000423" smilref="Programming_Robots_with_ROS00022.smil#em_000423">tortoisebot.launch</em>
                  <span class="text" id="span_007045" smilref="Programming_Robots_with_ROS00022.smil#span_007045">.</span>
                </p>
                <h1 id="h1_000395" smilref="Programming_Robots_with_ROS00022.smil#h1_000395">Example 17-8. Extra XML code to launch move_base</h1>
                <div id="ch17-tortoisebot_nav_launch_4" data-type="example">
                  <p id="p_001224">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001723" smilref="Programming_Robots_with_ROS00022.smil#code_001723">  &lt;node pkg="move_base" type="move_base" respawn="false" name="move_base"
        output="screen"&gt;
    &lt;rosparam file="$(find tortoisebot)/costmap_common_params.yaml"
              command="load" ns="global_costmap" /&gt;
    &lt;rosparam file="$(find tortoisebot)/costmap_common_params.yaml"
              command="load" ns="local_costmap" /&gt;
    &lt;rosparam file="$(find tortoisebot)/local_costmap_params.yaml"
              command="load" /&gt;
    &lt;rosparam file="$(find tortoisebot)/global_costmap_params.yaml"
              command="load" /&gt;
    &lt;rosparam file="$(find tortoisebot)/base_local_planner_params.yaml"
              command="load" /&gt;
  &lt;/node&gt;</code>
                  </p>
                </div>
                <p id="ch17-idp41168176" data-type="indexterm" data-startref="ix_17-rossify_robots2-asciidoc9">
                  <span class="text" id="span_007046" smilref="Programming_Robots_with_ROS00022.smil#span_007046">In this part of the launch file, we start the</span>
                  <code xml:space="preserve" id="code_001724" smilref="Programming_Robots_with_ROS00022.smil#code_001724">move_base</code>
                  <span class="text" id="span_007047" smilref="Programming_Robots_with_ROS00022.smil#span_007047">node and configure it with the parameters from the YAML files that we just created. Note that we load the</span>
                  <em id="em_000424" smilref="Programming_Robots_with_ROS00022.smil#em_000424">costmap_common_params.yaml</em>
                  <span class="text" id="span_007048" smilref="Programming_Robots_with_ROS00022.smil#span_007048">file twice, once in the</span>
                  <code xml:space="preserve" id="code_001725" smilref="Programming_Robots_with_ROS00022.smil#code_001725">global_costmap</code>
                  <span class="text" id="span_007049" smilref="Programming_Robots_with_ROS00022.smil#span_007049">namespace and again in the</span>
                  <code xml:space="preserve" id="code_001726" smilref="Programming_Robots_with_ROS00022.smil#code_001726">local_costmap</code>
                  <span class="text" id="span_007050" smilref="Programming_Robots_with_ROS00022.smil#span_007050">namespace; we separated those parameters exactly because we would require them in two places and didn't want to duplicate any code.</span>
                </p>
                <p id="p_001225" smilref="Programming_Robots_with_ROS00022.smil#p_001225">That's all the configuration required; let's get this robot moving!</p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Using rviz to Localize and Command a Navigating Robot" id="section_000173">
              <h1 id="h1_000396" smilref="Programming_Robots_with_ROS00022.smil#h1_000396">Using rviz to Localize and Command a Navigating Robot</h1>
              <div class="sect1" id="ch17-idp40993904">
                <p data-type="indexterm" data-primary="autonomous navigation" data-secondary="localizing/commanding TortoiseBot with rviz" id="ch17-ix_17-rossify_robots2-asciidoc18">
                  <span class="text" id="span_007051" smilref="Programming_Robots_with_ROS00022.smil#span_007051">With all the changes incorporated, launch</span>
                  <em id="em_000425" smilref="Programming_Robots_with_ROS00022.smil#em_000425">tortoisebot.launch</em>
                  <span class="text" id="span_007052" smilref="Programming_Robots_with_ROS00022.smil#span_007052">, which will bring up a TortoiseBot in the simulated office building, with the navigation stack ready to run. As described in</span>
                  <a data-type="xref" href="#ch10-navigating" external="false" id="a_000318" smilref="Programming_Robots_with_ROS00022.smil#a_000318">Chapter 10</a>
                  <span class="text" id="span_007053" smilref="Programming_Robots_with_ROS00022.smil#span_007053">, we need to give</span>
                  <code xml:space="preserve" id="code_001727" smilref="Programming_Robots_with_ROS00022.smil#code_001727">amcl</code>
                  <span class="text" id="span_007054" smilref="Programming_Robots_with_ROS00022.smil#span_007054">a reasonable initial estimate of the robot's pose within the map that corresponds to its actual location in the building. That's easiest to do with a GUI, so also start</span>
                  <code xml:space="preserve" id="code_001728" smilref="Programming_Robots_with_ROS00022.smil#code_001728">rviz</code>
                  <span class="text" id="span_007055" smilref="Programming_Robots_with_ROS00022.smil#span_007055">. It will be helpful to see how</span>
                  <code xml:space="preserve" id="code_001729" smilref="Programming_Robots_with_ROS00022.smil#code_001729">amcl</code>
                  <span class="text" id="span_007056" smilref="Programming_Robots_with_ROS00022.smil#span_007056">'s particle filter evolves as the robot moves, so go ahead and enable the</span>
                  <code xml:space="preserve" id="code_001730" smilref="Programming_Robots_with_ROS00022.smil#code_001730">rviz</code>
                  <span class="text" id="span_007057" smilref="Programming_Robots_with_ROS00022.smil#span_007057">visualization for it: in Displays, click "Add", select "PoseArray", click "OK", then set the topic for the new display to</span>
                  <code xml:space="preserve" id="code_001731" smilref="Programming_Robots_with_ROS00022.smil#code_001731">/particlecloud</code>
                  <span class="text" id="span_007058" smilref="Programming_Robots_with_ROS00022.smil#span_007058">.</span>
                </p>
                <p id="p_001226">
                  <span class="text" id="span_007059" smilref="Programming_Robots_with_ROS00022.smil#span_007059">Work with the points of view in Gazebo and</span>
                  <code xml:space="preserve" id="code_001732" smilref="Programming_Robots_with_ROS00022.smil#code_001732">rviz</code>
                  <span class="text" id="span_007060" smilref="Programming_Robots_with_ROS00022.smil#span_007060">until you have them roughly aligned and can match where the TortoiseBot is in the Gazebo world to where it should be in the</span>
                  <code xml:space="preserve" id="code_001733" smilref="Programming_Robots_with_ROS00022.smil#code_001733">rviz</code>
                  <span class="text" id="span_007061" smilref="Programming_Robots_with_ROS00022.smil#span_007061">map. In</span>
                  <code xml:space="preserve" id="code_001734" smilref="Programming_Robots_with_ROS00022.smil#code_001734">rviz</code>
                  <span class="text" id="span_007062" smilref="Programming_Robots_with_ROS00022.smil#span_007062">, click the "2D Pose Estimate" button, then click and drag in the map to set the robot's position and orientation, as shown in</span>
                  <a data-type="xref" href="#ch17-tortoisebot_nav_rviz6" external="false" id="a_000319" smilref="Programming_Robots_with_ROS00022.smil#a_000319">Figure 17-9</a>
                  <span class="text" id="span_007063" smilref="Programming_Robots_with_ROS00022.smil#span_007063">.</span>
                </p>
                <figure id="figure_000096">
                  <h1 id="h1_000397" smilref="Programming_Robots_with_ROS00022.smil#h1_000397">Figure 17-9. Setting the robot's initial pose in rviz</h1>
                  <div id="ch17-tortoisebot_nav_rviz6" class="figure">
                    <img src="images/prwr_1709.jpg" alt="Setting the robot's initial pose in +rviz+" id="img_000286" />
                  </div>
                </figure>
                <p data-type="indexterm" data-primary="pose" data-secondary="initial" id="ch17-idp41187152">
                  <span class="text" id="span_007064" smilref="Programming_Robots_with_ROS00022.smil#span_007064">In</span>
                  <code xml:space="preserve" id="code_001735" smilref="Programming_Robots_with_ROS00022.smil#code_001735">rviz</code>
                  <span class="text" id="span_007065" smilref="Programming_Robots_with_ROS00022.smil#span_007065">, the robot's pose will jump to approximately the pose that you provided, with a surrounding cloud of arrows showing the distribution of poses being tracked by</span>
                  <code xml:space="preserve" id="code_001736" smilref="Programming_Robots_with_ROS00022.smil#code_001736">amcl</code>
                  <span class="text" id="span_007066" smilref="Programming_Robots_with_ROS00022.smil#span_007066">, as seen in</span>
                  <a data-type="xref" href="#ch17-tortoisebot_nav_rviz7" external="false" id="a_000320" smilref="Programming_Robots_with_ROS00022.smil#a_000320">Figure 17-10</a>
                  <span class="text" id="span_007067" smilref="Programming_Robots_with_ROS00022.smil#span_007067">. You can judge the goodness of the estimate by checking how the laser scan visualized in</span>
                  <code xml:space="preserve" id="code_001737" smilref="Programming_Robots_with_ROS00022.smil#code_001737">rviz</code>
                  <span class="text" id="span_007068" smilref="Programming_Robots_with_ROS00022.smil#span_007068">matches with the map. If the laser scan looks badly misaligned, just set the pose again. In general, you should provide the best initial pose you can, but it doesn't have to be perfect, because</span>
                  <code xml:space="preserve" id="code_001738" smilref="Programming_Robots_with_ROS00022.smil#code_001738">amcl</code>
                  <span class="text" id="span_007069" smilref="Programming_Robots_with_ROS00022.smil#span_007069">uses a fairly robust probabilistic localization algorithm. Nothing is happening yet in Gazebo; we're just telling the robot where it is, not asking it to move anywhere.</span>
                </p>
                <figure id="figure_000097">
                  <h1 id="h1_000398" smilref="Programming_Robots_with_ROS00022.smil#h1_000398">Figure 17-10. The robot's pose in rviz after setting the initial pose</h1>
                  <div id="ch17-tortoisebot_nav_rviz7" class="figure">
                    <img src="images/prwr_1710.jpg" alt="The robot's pose in +rviz+ after setting the initial pose" id="img_000287" />
                  </div>
                </figure>
                <p id="ch17-idp41191984" data-type="indexterm" data-primary="goal pose">
                  <span class="text" id="span_007070" smilref="Programming_Robots_with_ROS00022.smil#span_007070">With the robot localized in the map, it's time to make it drive. In</span>
                  <code xml:space="preserve" id="code_001739" smilref="Programming_Robots_with_ROS00022.smil#code_001739">rviz</code>
                  <span class="text" id="span_007071" smilref="Programming_Robots_with_ROS00022.smil#span_007071">, click the "2D Nav Goal" button, then click and drag in the map to set a goal pose for the robot, as shown in</span>
                  <a data-type="xref" href="#ch17-tortoisebot_nav_rviz8" external="false" id="a_000321" smilref="Programming_Robots_with_ROS00022.smil#a_000321">Figure 17-11</a>
                  <span class="text" id="span_007072" smilref="Programming_Robots_with_ROS00022.smil#span_007072">. The robot will start moving in Gazebo, and</span>
                  <code xml:space="preserve" id="code_001740" smilref="Programming_Robots_with_ROS00022.smil#code_001740">rviz</code>
                  <span class="text" id="span_007073" smilref="Programming_Robots_with_ROS00022.smil#span_007073">will be updated with the robot's estimated pose and laser scan data, as shown in</span>
                  <a data-type="xref" href="#ch17-tortoisebot_nav_rviz9" external="false" id="a_000322" smilref="Programming_Robots_with_ROS00022.smil#a_000322">Figure 17-12</a>
                  <span class="text" id="span_007074" smilref="Programming_Robots_with_ROS00022.smil#span_007074">.</span>
                </p>
                <figure id="figure_000098">
                  <h1 id="h1_000399" smilref="Programming_Robots_with_ROS00022.smil#h1_000399">Figure 17-11. Setting a navigation goal pose in rviz</h1>
                  <div id="ch17-tortoisebot_nav_rviz8" class="figure">
                    <img src="images/prwr_1711.jpg" alt="Setting a navigation goal pose in +rviz+" id="img_000288" />
                  </div>
                </figure>
                <p id="ch17-idp41199680" data-type="indexterm" data-startref="ix_17-rossify_robots2-asciidoc18" smilref="Programming_Robots_with_ROS00022.smil#ch17-idp41199680">It works; hooray! Now it's time to experiment. When the robot reaches the goal (or before), give it a new goal somewhere else. Try giving a new pose estimate on the fly. See what happens when you give it a very bad pose estimate, somewhere else in the map. Give it a navigation goal in a location that's unreachable.</p>
                <figure id="figure_000099">
                  <h1 id="h1_000400" smilref="Programming_Robots_with_ROS00022.smil#h1_000400">Figure 17-12. The robot navigating toward its goal, with the red localization particle cloud converging on a higher-confidence estimate</h1>
                  <div id="ch17-tortoisebot_nav_rviz9" class="figure">
                    <img src="images/prwr_1712.jpg" alt="The robot en route to its goal, with the red localization particle cloud converging on a higher confidence estimate." id="img_000289" />
                  </div>
                </figure>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Summary" id="section_000174">
              <h1 id="h1_000401" smilref="Programming_Robots_with_ROS00022.smil#h1_000401">Summary</h1>
              <div class="sect1" id="ch17-idp41169376">
                <p id="p_001227">
                  <span class="text" id="span_007075" smilref="Programming_Robots_with_ROS00022.smil#span_007075">In this chapter, we started with a working simulation model of a mobile robot and turned it into an autonomously navigating robot. We did this without writing any procedural code, but rather by providing configuration information (via XML and YAML). That's the power of ROS: standard, flexible tools like</span>
                  <code xml:space="preserve" id="code_001741" smilref="Programming_Robots_with_ROS00022.smil#code_001741">robot_state_publisher</code>
                  <span class="text" id="span_007076" smilref="Programming_Robots_with_ROS00022.smil#span_007076">,</span>
                  <code xml:space="preserve" id="code_001742" smilref="Programming_Robots_with_ROS00022.smil#code_001742">amcl</code>
                  <span class="text" id="span_007077" smilref="Programming_Robots_with_ROS00022.smil#span_007077">, and</span>
                  <code xml:space="preserve" id="code_001743" smilref="Programming_Robots_with_ROS00022.smil#code_001743">move_base</code>
                  <span class="text" id="span_007078" smilref="Programming_Robots_with_ROS00022.smil#span_007078">can be configured and combined to produce useful behavior on a wide variety of robots, even one that we just built ourselves.</span>
                </p>
                <p id="ch17-idp41208944" data-type="indexterm" data-startref="ix_17-rossify_robots2-asciidoc0">
                  <span class="text" id="span_007079" smilref="Programming_Robots_with_ROS00022.smil#span_007079">Of course, if you experiment more than a little with the system that we built, you'll find that the TortoiseBot's navigation isn't perfect. It doesn't always get through doorways, sometimes gets lost (becomes mislocalized), and might occasionally get stuck. The next step would be to dig into the documentation for the navigation stack and configure it carefully for our robot. Each of the nodes that we're using in this chapter offers extensive configuration options, from noise models in</span>
                  <code xml:space="preserve" id="code_001744" smilref="Programming_Robots_with_ROS00022.smil#code_001744">amcl</code>
                  <span class="text" id="span_007080" smilref="Programming_Robots_with_ROS00022.smil#span_007080">to acceleration limits and planning horizons in</span>
                  <code xml:space="preserve" id="code_001745" smilref="Programming_Robots_with_ROS00022.smil#code_001745">move_base</code>
                  <span class="text" id="span_007081" smilref="Programming_Robots_with_ROS00022.smil#span_007081">. The defaults and example configurations that we relied on were enough to produce a working system, but each robot requires some parameter tuning to get really solid navigation performance.</span>
                </p>
              </div>
            </section>
          </div>
        </section>
      </level1>
      <level1 id="ch18">
        <section xmlns:epub="http://www.idpf.org/2007/ops" data-type="chapter" epub:type="chapter" data-pdf-bookmark="Chapter 18. Your Own Robot Arm" id="section_000175">
          <h1 id="h1_000402" smilref="Programming_Robots_with_ROS00022.smil#h1_000402">Chapter 18. Your Own Robot Arm</h1>
          <div class="chapter" id="ch18-rossify_robots3">
            <p id="p_001228">
              <span class="text" id="span_007082" smilref="Programming_Robots_with_ROS00022.smil#span_007082">In Chapters</span>
              <a href="#ch16-rossify_robots" external="false" id="a_000323" smilref="Programming_Robots_with_ROS00022.smil#a_000323">16</a>
              <span class="text" id="span_007083" smilref="Programming_Robots_with_ROS00022.smil#span_007083">and</span>
              <a href="#ch17-rossify_robots2" external="false" id="a_000324" smilref="Programming_Robots_with_ROS00022.smil#a_000324">17</a>
              <span class="text" id="span_007084" smilref="Programming_Robots_with_ROS00022.smil#span_007084">, we learned how to add ROS support for a new mobile robot, from modeling and simulation to autonomous navigation. Here we're going to follow the same pattern, but this time for a robot arm, or manipulator. We learned about manipulation in general and how to use an existing ROS-supported robot arm in</span>
              <a data-type="xref" href="#ch11-chess_bot" external="false" id="a_000325" smilref="Programming_Robots_with_ROS00022.smil#a_000325">Chapter 11</a>
              <span class="text" id="span_007085" smilref="Programming_Robots_with_ROS00022.smil#span_007085">. Now we'll walk through how to add a new robot arm, including configuring MoveIt to perform path planning.</span>
            </p>
            <section data-type="sect1" data-pdf-bookmark="CougarBot" id="section_000176">
              <h1 id="h1_000403" smilref="Programming_Robots_with_ROS00022.smil#h1_000403">CougarBot</h1>
              <div class="sect1" id="ch18-idp41214704">
                <p data-type="indexterm" data-primary="CougarBot" id="ch18-ix_18-rossify_robots3-asciidoc0" data-secondary="robot arm">
                  <span class="text" id="span_007086" smilref="Programming_Robots_with_ROS00022.smil#span_007086">We're going to build a new manipulator. For inspiration, we go back to the earliest industrial robot arms, which were produced by the Unimation company in the 1960s. Founded by George Devol and Jospeh Engelberger, Unimation provided robot arms first to General Motors, then to other companies and industries, forever changing the nature of manufacturing worldwide. In 1966, Engelberger introduced robots to the general public when he appeared on the</span>
                  <em id="em_000426" smilref="Programming_Robots_with_ROS00022.smil#em_000426">Tonight Show</em>
                  <span class="text" id="span_007087" smilref="Programming_Robots_with_ROS00022.smil#span_007087">with one of his machines, demonstrating for Johnny Carson how a robot could pour a beer, conduct an orchestra, and putt a golf ball. Shown in</span>
                  <a data-type="xref" href="#ch18-unimation_puma" external="false" id="a_000326" smilref="Programming_Robots_with_ROS00022.smil#a_000326">Figure 18-1</a>
                  <span class="text" id="span_007088" smilref="Programming_Robots_with_ROS00022.smil#span_007088">is one of Unimation's later models, from its PUMA (Programmable Universal Machine for Assembly) series of robot arms.</span>
                </p>
                <figure id="figure_000100">
                  <h1 id="h1_000404" smilref="Programming_Robots_with_ROS00022.smil#h1_000404">Figure 18-1. An example of Unimation's PUMA series of robot arms (source: Wikimedia Commons)</h1>
                  <div id="ch18-unimation_puma" class="figure">
                    <img src="images/prwr_1801.jpg" alt="Unimation PUMA 500" id="img_000290" />
                  </div>
                </figure>
                <p id="ch18-idp41226112" data-type="indexterm" data-primary="CougarBot" data-secondary="steps in creating" smilref="Programming_Robots_with_ROS00022.smil#ch18-idp41226112">In honor of the contributions made by these early machines, we'll create a similar robot arm, called CougarBot. The steps to create the CougarBot robot arm are very similar to what we did when creating the TortoiseBot mobile base:</p>
                <list type="ol" id="list_000022">
                  <li id="li_000072">
                    <p id="p_001229" smilref="Programming_Robots_with_ROS00022.smil#p_001229">Decide on the ROS message interface.</p>
                  </li>
                  <li id="li_000073">
                    <p id="p_001230" smilref="Programming_Robots_with_ROS00022.smil#p_001230">Write drivers for the robot's motors.</p>
                  </li>
                  <li id="li_000074">
                    <p id="p_001231" smilref="Programming_Robots_with_ROS00022.smil#p_001231">Write a model of the robot's physical structure.</p>
                  </li>
                  <li id="li_000075">
                    <p id="p_001232" smilref="Programming_Robots_with_ROS00022.smil#p_001232">Extend the model with physical properties for use in simulation with Gazebo.</p>
                  </li>
                  <li id="li_000076">
                    <p id="p_001233">
                      <span class="text" id="span_007089" smilref="Programming_Robots_with_ROS00022.smil#span_007089">Publish coordinate transform data via</span>
                      <code xml:space="preserve" id="code_001746" smilref="Programming_Robots_with_ROS00022.smil#code_001746">tf</code>
                      <span class="text" id="span_007090" smilref="Programming_Robots_with_ROS00022.smil#span_007090">and visualize it with</span>
                      <code xml:space="preserve" id="code_001747" smilref="Programming_Robots_with_ROS00022.smil#code_001747">rviz</code>
                      <span class="text" id="span_007091" smilref="Programming_Robots_with_ROS00022.smil#span_007091">.</span>
                    </p>
                  </li>
                  <li id="li_000077">
                    <p id="p_001234" smilref="Programming_Robots_with_ROS00022.smil#p_001234">Add sensors, with driver and simulation support.</p>
                  </li>
                  <li id="li_000078">
                    <p id="p_001235" smilref="Programming_Robots_with_ROS00022.smil#p_001235">Apply standard algorithms, such as path planning.</p>
                  </li>
                </list>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="ROS Message Interface" id="section_000177">
              <h1 id="h1_000405" smilref="Programming_Robots_with_ROS00022.smil#h1_000405">ROS Message Interface</h1>
              <div class="sect1" id="ch18-rossify_robots3_msg_interface">
                <p id="ch18-idp41236896" data-type="indexterm" data-primary="CougarBot" data-secondary="ROS message interface for">
                  <span class="text" id="span_007092" smilref="Programming_Robots_with_ROS00022.smil#span_007092">We saw in</span>
                  <a data-type="xref" href="#ch16-rossify_robots" external="false" id="a_000327" smilref="Programming_Robots_with_ROS00022.smil#a_000327">Chapter 16</a>
                  <span class="text" id="span_007093" smilref="Programming_Robots_with_ROS00022.smil#span_007093">that the standard ROS interface to a mobile robot is the</span>
                  <code xml:space="preserve" id="code_001748" smilref="Programming_Robots_with_ROS00022.smil#code_001748">cmd_vel</code>
                  <span class="text" id="span_007094" smilref="Programming_Robots_with_ROS00022.smil#span_007094">/</span>
                  <code xml:space="preserve" id="code_001749" smilref="Programming_Robots_with_ROS00022.smil#code_001749">odom</code>
                  <span class="text" id="span_007095" smilref="Programming_Robots_with_ROS00022.smil#span_007095">topic pair, which allows us to send velocity commands and receive odometry updates. The analogous interface for a robot arm is:</span>
                </p>
                <dl id="dl_000025">
                  <dt id="dt_000111">
                    <code xml:space="preserve" id="code_001750" smilref="Programming_Robots_with_ROS00022.smil#code_001750">control_msgs/FollowJointTrajectory</code>
                    <span class="text" id="span_007096" smilref="Programming_Robots_with_ROS00022.smil#span_007096">(</span>
                    <code xml:space="preserve" id="code_001751" smilref="Programming_Robots_with_ROS00022.smil#code_001751">follow_joint_trajectory</code>
                    <span class="text" id="span_007097" smilref="Programming_Robots_with_ROS00022.smil#span_007097">action)</span>
                  </dt>
                  <dd id="dd_000111">
                    <p id="p_001236" smilref="Programming_Robots_with_ROS00022.smil#p_001236">Command a trajectory for the arm and monitor its progress.</p>
                  </dd>
                  <dt id="dt_000112">
                    <code xml:space="preserve" id="code_001752" smilref="Programming_Robots_with_ROS00022.smil#code_001752">sensor_msgs/JointState</code>
                    <span class="text" id="span_007098" smilref="Programming_Robots_with_ROS00022.smil#span_007098">(</span>
                    <code xml:space="preserve" id="code_001753" smilref="Programming_Robots_with_ROS00022.smil#code_001753">joint_states</code>
                    <span class="text" id="span_007099" smilref="Programming_Robots_with_ROS00022.smil#span_007099">topic)</span>
                  </dt>
                  <dd id="dd_000112">
                    <p id="p_001237" smilref="Programming_Robots_with_ROS00022.smil#p_001237">Publish the current state of each joint in the arm.</p>
                  </dd>
                </dl>
                <p id="p_001238">
                  <span class="text" id="span_007100" smilref="Programming_Robots_with_ROS00022.smil#span_007100">The</span>
                  <code xml:space="preserve" id="code_001754" smilref="Programming_Robots_with_ROS00022.smil#code_001754">follow_joint_trajectory</code>
                  <span class="text" id="span_007101" smilref="Programming_Robots_with_ROS00022.smil#span_007101">/</span>
                  <code xml:space="preserve" id="code_001755" smilref="Programming_Robots_with_ROS00022.smil#code_001755">joint_states</code>
                  <span class="text" id="span_007102" smilref="Programming_Robots_with_ROS00022.smil#span_007102">ROS interface allows us to, in a portable manner, observe and command a robot arm's joints. Let's see what kind of goal message we can send to the</span>
                  <code xml:space="preserve" id="code_001756" smilref="Programming_Robots_with_ROS00022.smil#code_001756">follow_joint_trajectory</code>
                  <span class="text" id="span_007103" smilref="Programming_Robots_with_ROS00022.smil#span_007103">action:</span>
                </p>
                <p id="p_001239">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001757"><span class="text" id="span_007104" smilref="Programming_Robots_with_ROS00022.smil#span_007104">
user@hostname$ </span><strong id="strong_000183" smilref="Programming_Robots_with_ROS00022.smil#strong_000183">rosmsg show control_msgs/FollowJointTrajectoryGoal</strong><span class="text" id="span_007105" smilref="Programming_Robots_with_ROS00022.smil#span_007105">
trajectory_msgs/JointTrajectory trajectory
  std_msgs/Header header
    uint32 seq
    time stamp
    string frame_id
  string[] joint_names
  trajectory_msgs/JointTrajectoryPoint[] points
    float64[] positions
    float64[] velocities
    float64[] accelerations
    float64[] effort
    duration time_from_start
control_msgs/JointTolerance[] path_tolerance
  string name
  float64 position
  float64 velocity
  float64 acceleration
control_msgs/JointTolerance[] goal_tolerance
  string name
  float64 position
  float64 velocity
  float64 acceleration
duration goal_time_tolerance
</span></code>
                </p>
                <p id="p_001240" smilref="Programming_Robots_with_ROS00022.smil#p_001240">Wow, there's a lot going on there. It looks like we can define a trajectory by any combination of position, velocity, acceleration, and effort targets, along with time parameterization and tolerances to obey along the way. Fortunately, as we'll see later, it's easy to construct simple trajectories without filling out every field.</p>
                <p id="p_001241">
                  <span class="text" id="span_007106" smilref="Programming_Robots_with_ROS00022.smil#span_007106">Let's look at the</span>
                  <code xml:space="preserve" id="code_001758" smilref="Programming_Robots_with_ROS00022.smil#code_001758">joint_states</code>
                  <span class="text" id="span_007107" smilref="Programming_Robots_with_ROS00022.smil#span_007107">side of things:</span>
                </p>
                <p id="p_001242">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001759"><span class="text" id="span_007108" smilref="Programming_Robots_with_ROS00022.smil#span_007108">
user@hostname$ </span><strong id="strong_000184" smilref="Programming_Robots_with_ROS00022.smil#strong_000184">rosmsg show sensor_msgs/JointState</strong><span class="text" id="span_007109" smilref="Programming_Robots_with_ROS00022.smil#span_007109">
std_msgs/Header header
  uint32 seq
  time stamp
  string frame_id
string[] name
float64[] position
float64[] velocity
float64[] effort
</span></code>
                </p>
                <p id="p_001243" smilref="Programming_Robots_with_ROS00022.smil#p_001243">This message is more straightforward, just reporting the current position, velocity, and effort of each joint. We'll read and plot this data later.</p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Hardware Driver" id="section_000178">
              <h1 id="h1_000406" smilref="Programming_Robots_with_ROS00022.smil#h1_000406">Hardware Driver</h1>
              <div class="sect1" id="ch18-idp41235520">
                <p data-type="indexterm" data-primary="CougarBot" data-secondary="hardware driver for" id="ch18-idp41254816">
                  <span class="text" id="span_007110" smilref="Programming_Robots_with_ROS00022.smil#span_007110">To implement the</span>
                  <code xml:space="preserve" id="code_001760" smilref="Programming_Robots_with_ROS00022.smil#code_001760">follow_joint_trajectory</code>
                  <span class="text" id="span_007111" smilref="Programming_Robots_with_ROS00022.smil#span_007111">/</span>
                  <code id="ch18-idp41255792" xml:space="preserve" smilref="Programming_Robots_with_ROS00022.smil#ch18-idp41255792">joint_states</code>
                  <span class="text" id="span_007112" smilref="Programming_Robots_with_ROS00022.smil#span_007112">interface for a physical robot, we need to write a node that will communicate with the robot hardware. The details of that driver node will depend on how the robot works and how we can communicate with it. As with mobile robots, a robot arm will usually offer some physical interface, often serial or network, along with a protocol for exchanging messages over that interface. Ideally, we can find a reusable library that implements the protocol, which we can wrap into a ROS node where we will handle any necessary data transformations, such as unit conversions.</span>
                </p>
                <p id="p_001244">
                  <span class="text" id="span_007113" smilref="Programming_Robots_with_ROS00022.smil#span_007113">We can't provide general-purpose driver code for controlling a robot arm, but there are many examples within the ROS ecosystem to look at. For the rest of this chapter, we'll proceed under the assumption that you have written a driver node that supports the</span>
                  <code xml:space="preserve" id="code_001761" smilref="Programming_Robots_with_ROS00022.smil#code_001761">follow_joint_trajectory</code>
                  <span class="text" id="span_007114" smilref="Programming_Robots_with_ROS00022.smil#span_007114">/</span>
                  <code xml:space="preserve" id="code_001762" smilref="Programming_Robots_with_ROS00022.smil#code_001762">joint_states</code>
                  <span class="text" id="span_007115" smilref="Programming_Robots_with_ROS00022.smil#span_007115">interface, and discuss the other steps that are needed for ROS integration. The following steps, starting with writing a model, can all be tried out in simulation, without any hardware or drivers.</span>
                </p>
              </div>
            </section>
            <section data-type="sect1" class="pagebreak-before" data-pdf-bookmark="Modeling the Robot: URDF" id="section_000179">
              <h1 id="h1_000407" smilref="Programming_Robots_with_ROS00022.smil#h1_000407">Modeling the Robot: URDF</h1>
              <div class="sect1" id="ch18-idp41260320">
                <p data-type="indexterm" data-primary="CougarBot" data-secondary="modeling with URDF" id="ch18-ix_18-rossify_robots3-asciidoc3">
                  <span class="text" id="span_007116" smilref="Programming_Robots_with_ROS00022.smil#span_007116">Now it's time to write down a physical model of the CougarBot, as a URDF file. This model will be used by</span>
                  <code xml:space="preserve" id="code_001763" smilref="Programming_Robots_with_ROS00022.smil#code_001763">rviz</code>
                  <span class="text" id="span_007117" smilref="Programming_Robots_with_ROS00022.smil#span_007117">to visualize the robot, by Gazebo to simulate it, and by MoveIt to plan motions for it.</span>
                </p>
                <p id="p_001245">
                  <span class="text" id="span_007118" smilref="Programming_Robots_with_ROS00022.smil#span_007118">Let's start with the kinematics. Looking at</span>
                  <a data-type="xref" href="#ch18-unimation_puma" external="false" id="a_000328" smilref="Programming_Robots_with_ROS00022.smil#a_000328">Figure 18-1</a>
                  <span class="text" id="span_007119" smilref="Programming_Robots_with_ROS00022.smil#span_007119">, we see that the defining characteristics of this robot arm are that:</span>
                </p>
                <list type="ul" id="list_000023">
                  <li id="li_000079">
                    <p id="p_001246" smilref="Programming_Robots_with_ROS00022.smil#p_001246">The base is rigidly attached (e.g., bolted) to a work surface.</p>
                  </li>
                  <li id="li_000080">
                    <p id="p_001247" smilref="Programming_Robots_with_ROS00022.smil#p_001247">After the base, the first joint is a "hip" that swivels the "torso" from side to side.</p>
                  </li>
                  <li id="li_000081">
                    <p id="p_001248" smilref="Programming_Robots_with_ROS00022.smil#p_001248">The next three joints are the "shoulder," "elbow," and "wrist," which respectively swing the "upper arm," "lower arm," and "hand" up and down.</p>
                  </li>
                </list>
                <p id="p_001249" smilref="Programming_Robots_with_ROS00022.smil#p_001249">So, our robot model will need five links (base, torso, upper arm, lower arm, and hand) connected by four joints (hip, shoulder, elbow, and wrist). Let's start modeling it. For simplicity, we'll use a combination of cylinders (a series of tubes, if you will) for the links; more sophisticated models, including highly detailed surface meshes, could be used to improve the accuracy and visual realism of the model.</p>
                <p id="p_001250">
                  <span class="text" id="span_007120" smilref="Programming_Robots_with_ROS00022.smil#span_007120">We'll start with the base, which is rigidly attached to a work surface. We represent this arrangement in URDF by creating a special link called</span>
                  <code xml:space="preserve" id="code_001764" smilref="Programming_Robots_with_ROS00022.smil#code_001764">world</code>
                  <span class="text" id="span_007121" smilref="Programming_Robots_with_ROS00022.smil#span_007121">and connecting the base, modeled as a squat cylinder, to it with a</span>
                  <code xml:space="preserve" id="code_001765" smilref="Programming_Robots_with_ROS00022.smil#code_001765">fixed</code>
                  <span class="text" id="span_007122" smilref="Programming_Robots_with_ROS00022.smil#span_007122">joint. This URDF code is shown in</span>
                  <a data-type="xref" href="#ch18-cougarbot_urdf_1" external="false" id="a_000329" smilref="Programming_Robots_with_ROS00022.smil#a_000329">Example 18-1</a>
                  <span class="text" id="span_007123" smilref="Programming_Robots_with_ROS00022.smil#span_007123">.</span>
                </p>
                <h1 id="h1_000408" smilref="Programming_Robots_with_ROS00022.smil#h1_000408">Example 18-1. Model of the CougarBot base link, fixed to the world</h1>
                <div id="ch18-cougarbot_urdf_1" data-type="example">
                  <p id="p_001251">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001766" smilref="Programming_Robots_with_ROS00022.smil#code_001766">&lt;?xml version="1.0"?&gt;
&lt;robot name="cougarbot"&gt;
  &lt;link name="world"/&gt;
  &lt;link name="base_link"&gt;
    &lt;visual&gt;
      &lt;geometry&gt;
        &lt;cylinder length="0.05" radius="0.1"/&gt;
      &lt;/geometry&gt;
      &lt;material name="silver"&gt;
        &lt;color rgba="0.75 0.75 0.75 1"/&gt;
      &lt;/material&gt;
      &lt;origin rpy="0 0 0" xyz="0 0 0.025"/&gt;
    &lt;/visual&gt;
  &lt;/link&gt;
  &lt;joint name="fixed" type="fixed"&gt;
    &lt;parent link="world"/&gt;
    &lt;child link="base_link"/&gt;
  &lt;/joint&gt;
&lt;/robot&gt;</code>
                  </p>
                </div>
                <p id="p_001252">
                  <span class="text" id="span_007124" smilref="Programming_Robots_with_ROS00022.smil#span_007124">Note that we used the</span>
                  <code xml:space="preserve" id="code_001767" smilref="Programming_Robots_with_ROS00022.smil#code_001767">&lt;origin&gt;</code>
                  <span class="text" id="span_007125" smilref="Programming_Robots_with_ROS00022.smil#span_007125">tag in the</span>
                  <code xml:space="preserve" id="code_001768" smilref="Programming_Robots_with_ROS00022.smil#code_001768">&lt;visual&gt;</code>
                  <span class="text" id="span_007126" smilref="Programming_Robots_with_ROS00022.smil#span_007126">element to offset in</span>
                  <em id="em_000427" smilref="Programming_Robots_with_ROS00022.smil#em_000427">z</em>
                  <span class="text" id="span_007127" smilref="Programming_Robots_with_ROS00022.smil#span_007127">the point of reference for the base link from its default in the cylinder's center to its bottom. That offset will make it easier to reason about where to attach the next joint, and we'll do the same thing for subsequent links. To see what this model looks like, save that code to a file called</span>
                  <em id="em_000428" smilref="Programming_Robots_with_ROS00022.smil#em_000428">cougarbot.urdf</em>
                  <span class="text" id="span_007128" smilref="Programming_Robots_with_ROS00022.smil#span_007128">, and use</span>
                  <code xml:space="preserve" id="code_001769" smilref="Programming_Robots_with_ROS00022.smil#code_001769">roslauch urdf_tutorial display.launch</code>
                  <span class="text" id="span_007129" smilref="Programming_Robots_with_ROS00022.smil#span_007129">to visualize it:</span>
                </p>
                <p id="p_001253">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001770"><span class="text" id="span_007130" smilref="Programming_Robots_with_ROS00022.smil#span_007130">
user@hostname$ </span><strong id="strong_000185" smilref="Programming_Robots_with_ROS00022.smil#strong_000185">roslaunch urdf_tutorial display.launch model:=cougarbot.urdf</strong>
</code>
                </p>
                <p id="p_001254">
                  <span class="text" id="span_007131" smilref="Programming_Robots_with_ROS00022.smil#span_007131">You should see</span>
                  <code xml:space="preserve" id="code_001771" smilref="Programming_Robots_with_ROS00022.smil#code_001771">rviz</code>
                  <span class="text" id="span_007132" smilref="Programming_Robots_with_ROS00022.smil#span_007132">pop up, showing you a single squat cylinder, similar to</span>
                  <a data-type="xref" href="#ch18-cougarbot_urdf_1_rviz" external="false" id="a_000330" smilref="Programming_Robots_with_ROS00022.smil#a_000330">Figure 18-2</a>
                  <span class="text" id="span_007133" smilref="Programming_Robots_with_ROS00022.smil#span_007133">. You can see the effect of the</span>
                  <code xml:space="preserve" id="code_001772" smilref="Programming_Robots_with_ROS00022.smil#code_001772">origin</code>
                  <span class="text" id="span_007134" smilref="Programming_Robots_with_ROS00022.smil#span_007134">offset in the placement of the coordinate axes at the bottom of the cylinder.</span>
                </p>
                <figure id="figure_000101">
                  <h1 id="h1_000409" smilref="Programming_Robots_with_ROS00022.smil#h1_000409">Figure 18-2. Visualization of the CougarBot base link</h1>
                  <div id="ch18-cougarbot_urdf_1_rviz" class="figure">
                    <img src="images/prwr_1802.jpg" alt="CougarBot model" id="img_000291" />
                  </div>
                </figure>
                <p id="p_001255">
                  <span class="text" id="span_007135" smilref="Programming_Robots_with_ROS00022.smil#span_007135">With the base link in place, we'll add the torso link and hip joint, as shown in</span>
                  <a data-type="xref" href="#ch18-cougarbot_urdf_2" external="false" id="a_000331" smilref="Programming_Robots_with_ROS00022.smil#a_000331">Example 18-2</a>
                  <span class="text" id="span_007136" smilref="Programming_Robots_with_ROS00022.smil#span_007136">.</span>
                </p>
                <h1 id="h1_000410" smilref="Programming_Robots_with_ROS00022.smil#h1_000410">Example 18-2. URDF code to add the CougarBot torso and hip</h1>
                <div id="ch18-cougarbot_urdf_2" data-type="example">
                  <p id="p_001256">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001773" smilref="Programming_Robots_with_ROS00022.smil#code_001773">  &lt;link name="torso"&gt;
    &lt;visual&gt;
      &lt;geometry&gt;
        &lt;cylinder length="0.5" radius="0.05"/&gt;
      &lt;/geometry&gt;
      &lt;material name="silver"&gt;
        &lt;color rgba="0.75 0.75 0.75 1"/&gt;
      &lt;/material&gt;
      &lt;origin rpy="0 0 0" xyz="0 0 0.25"/&gt;
    &lt;/visual&gt;
  &lt;/link&gt;
  &lt;joint name="hip" type="continuous"&gt;
    &lt;axis xyz="0 0 1"/&gt;
    &lt;parent link="base_link"/&gt;
    &lt;child link="torso"/&gt;
    &lt;origin rpy="0 0 0" xyz="0.0 0.0 0.05"/&gt;
  &lt;/joint&gt;</code>
                  </p>
                </div>
                <p id="p_001257">
                  <span class="text" id="span_007137" smilref="Programming_Robots_with_ROS00022.smil#span_007137">The torso is a tall, thin cylinder, connected to the base via the hip, which is a continuous joint that rotates indefinitely about the z-axis. Add this code to</span>
                  <em id="em_000429" smilref="Programming_Robots_with_ROS00022.smil#em_000429">cougarbot.urdf</em>
                  <span class="text" id="span_007138" smilref="Programming_Robots_with_ROS00022.smil#span_007138">, and check the result with the URDF visualizer, this time with the joint control GUI enabled:</span>
                </p>
                <p id="p_001258">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001774"><span class="text" id="span_007139" smilref="Programming_Robots_with_ROS00022.smil#span_007139">
user@hostname$ </span><strong id="strong_000186" smilref="Programming_Robots_with_ROS00022.smil#strong_000186">roslaunch urdf_tutorial display.launch model:=cougarbot.urdf \
  gui:=True</strong>
</code>
                </p>
                <p id="p_001259">
                  <span class="text" id="span_007140" smilref="Programming_Robots_with_ROS00022.smil#span_007140">The</span>
                  <code xml:space="preserve" id="code_001775" smilref="Programming_Robots_with_ROS00022.smil#code_001775">hip</code>
                  <span class="text" id="span_007141" smilref="Programming_Robots_with_ROS00022.smil#span_007141">slider in the GUI will swivel the torso back and forth. Next are the upper and lower arm. We can model each as a thin cylinder with the same radius as the torso, but shorter. From the robot's point of view, the upper arm is connected via the shoulder to the right (or outside) of the torso, and the lower arm is connected via the elbow to the left (or inside) upper arm. The URDF code for these new arm components is shown in</span>
                  <a data-type="xref" href="#ch18-cougarbot_urdf_3" external="false" id="a_000332" smilref="Programming_Robots_with_ROS00022.smil#a_000332">Example 18-3</a>
                  <span class="text" id="span_007142" smilref="Programming_Robots_with_ROS00022.smil#span_007142">and</span>
                  <a data-type="xref" href="#ch18-cougarbot_urdf_4" external="false" id="a_000333" smilref="Programming_Robots_with_ROS00022.smil#a_000333">Example 18-4</a>
                  <span class="text" id="span_007143" smilref="Programming_Robots_with_ROS00022.smil#span_007143">.</span>
                </p>
                <h1 id="h1_000411" smilref="Programming_Robots_with_ROS00022.smil#h1_000411">Example 18-3. URDF code to add the CougarBot upper arm and shoulder</h1>
                <div id="ch18-cougarbot_urdf_3" data-type="example">
                  <p id="p_001260">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001776" smilref="Programming_Robots_with_ROS00022.smil#code_001776">  &lt;link name="upper_arm"&gt;
    &lt;visual&gt;
      &lt;geometry&gt;
        &lt;cylinder length="0.4" radius="0.05"/&gt;
      &lt;/geometry&gt;
      &lt;material name="silver"/&gt;
      &lt;origin rpy="0 0 0" xyz="0 0 0.2"/&gt;
    &lt;/visual&gt;
  &lt;/link&gt;
  &lt;joint name="shoulder" type="continuous"&gt;
    &lt;axis xyz="0 1 0"/&gt;
    &lt;parent link="torso"/&gt;
    &lt;child link="upper_arm"/&gt;
    &lt;origin rpy="0 1.5708 0" xyz="0.0 -0.1 0.45"/&gt;
  &lt;/joint&gt;</code>
                  </p>
                </div>
                <h1 id="h1_000412" smilref="Programming_Robots_with_ROS00022.smil#h1_000412">Example 18-4. URDF code to add the CougarBot lower arm and elbow</h1>
                <div id="ch18-cougarbot_urdf_4" data-type="example">
                  <p id="p_001261">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001777" smilref="Programming_Robots_with_ROS00022.smil#code_001777">  &lt;link name="lower_arm"&gt;
    &lt;visual&gt;
      &lt;geometry&gt;
        &lt;cylinder length="0.4" radius="0.05"/&gt;
      &lt;/geometry&gt;
      &lt;material name="silver"/&gt;
      &lt;origin rpy="0 0 0" xyz="0 0 0.2"/&gt;
    &lt;/visual&gt;
  &lt;/link&gt;
  &lt;joint name="elbow" type="continuous"&gt;
    &lt;axis xyz="0 1 0"/&gt;
    &lt;parent link="upper_arm"/&gt;
    &lt;child link="lower_arm"/&gt;
    &lt;origin rpy="0 0 0" xyz="0.0 0.1 0.35"/&gt;
  &lt;/joint&gt;</code>
                  </p>
                </div>
                <p id="p_001262">
                  <span class="text" id="span_007144" smilref="Programming_Robots_with_ROS00022.smil#span_007144">Add this code to</span>
                  <em id="em_000430" smilref="Programming_Robots_with_ROS00022.smil#em_000430">cougarbot.urdf</em>
                  <span class="text" id="span_007145" smilref="Programming_Robots_with_ROS00022.smil#span_007145">. The last kinematic element that we need is the hand, attached via the wrist to the end of the lower arm. For variety, we'll model the hand as a box, as shown in</span>
                  <a data-type="xref" href="#ch18-cougarbot_urdf_5" external="false" id="a_000334" smilref="Programming_Robots_with_ROS00022.smil#a_000334">Example 18-5</a>
                  <span class="text" id="span_007146" smilref="Programming_Robots_with_ROS00022.smil#span_007146">.</span>
                </p>
                <h1 id="h1_000413" smilref="Programming_Robots_with_ROS00022.smil#h1_000413">Example 18-5. URDF code to add the CougarBot hand and wrist</h1>
                <div id="ch18-cougarbot_urdf_5" data-type="example">
                  <p id="p_001263">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001778" smilref="Programming_Robots_with_ROS00022.smil#code_001778">  &lt;link name="hand"&gt;
    &lt;visual&gt;
      &lt;geometry&gt;
        &lt;box size="0.05 0.05 0.05"/&gt;
      &lt;/geometry&gt;
      &lt;material name="silver"/&gt;
    &lt;/visual&gt;
  &lt;/link&gt;
  &lt;joint name="wrist" type="continuous"&gt;
    &lt;axis xyz="0 1 0"/&gt;
    &lt;parent link="lower_arm"/&gt;
    &lt;child link="hand"/&gt;
    &lt;origin rpy="0 0 0" xyz="0.0 0.0 0.425"/&gt;
  &lt;/joint&gt;</code>
                  </p>
                </div>
                <p id="p_001264">
                  <span class="text" id="span_007147" smilref="Programming_Robots_with_ROS00022.smil#span_007147">After adding this code to</span>
                  <em id="em_000431" smilref="Programming_Robots_with_ROS00022.smil#em_000431">cougarbot.urdf</em>
                  <span class="text" id="span_007148" smilref="Programming_Robots_with_ROS00022.smil#span_007148">, visualize it again via</span>
                  <code xml:space="preserve" id="code_001779" smilref="Programming_Robots_with_ROS00022.smil#code_001779">roslauch urdf_tutorial display.launch</code>
                  <span class="text" id="span_007149" smilref="Programming_Robots_with_ROS00022.smil#span_007149">with the joint control GUI enabled, then use the</span>
                  <code xml:space="preserve" id="code_001780" smilref="Programming_Robots_with_ROS00022.smil#code_001780">hip</code>
                  <span class="text" id="span_007150" smilref="Programming_Robots_with_ROS00022.smil#span_007150">,</span>
                  <code xml:space="preserve" id="code_001781" smilref="Programming_Robots_with_ROS00022.smil#code_001781">shoulder</code>
                  <span class="text" id="span_007151" smilref="Programming_Robots_with_ROS00022.smil#span_007151">,</span>
                  <code xml:space="preserve" id="code_001782" smilref="Programming_Robots_with_ROS00022.smil#code_001782">elbow</code>
                  <span class="text" id="span_007152" smilref="Programming_Robots_with_ROS00022.smil#span_007152">, and</span>
                  <code xml:space="preserve" id="code_001783" smilref="Programming_Robots_with_ROS00022.smil#code_001783">wrist</code>
                  <span class="text" id="span_007153" smilref="Programming_Robots_with_ROS00022.smil#span_007153">sliders to move the robot model around, as shown in</span>
                  <a data-type="xref" href="#ch18-cougarbot_urdf_2_rviz" external="false" id="a_000335" smilref="Programming_Robots_with_ROS00022.smil#a_000335">Figure 18-3</a>
                  <span class="text" id="span_007154" smilref="Programming_Robots_with_ROS00022.smil#span_007154">.</span>
                </p>
                <p id="ch18-idp41631600" data-type="indexterm" data-startref="ix_18-rossify_robots3-asciidoc3" smilref="Programming_Robots_with_ROS00022.smil#ch18-idp41631600">Now we're getting somewhere; that looks like a pretty decent robot arm. With the CougarBot's structure settled, let's get this robot into simulation.</p>
                <figure id="figure_000102">
                  <h1 id="h1_000414" smilref="Programming_Robots_with_ROS00022.smil#h1_000414">Figure 18-3. Visualization of the CougarBot base, torso, upper arm, lower arm, and hand</h1>
                  <div id="ch18-cougarbot_urdf_2_rviz" class="figure">
                    <img src="images/prwr_1803.jpg" alt="CougarBot model" id="img_000292" />
                  </div>
                </figure>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Simulation in Gazebo" id="section_000180">
              <h1 id="h1_000415" smilref="Programming_Robots_with_ROS00022.smil#h1_000415">Simulation in Gazebo</h1>
              <div class="sect1" id="ch18-idp41261264">
                <p data-type="indexterm" data-primary="CougarBot" data-secondary="simulation in Gazebo" id="ch18-ix_18-rossify_robots3-asciidoc5">
                  <span class="text" id="span_007155" smilref="Programming_Robots_with_ROS00022.smil#span_007155">In the previous section, we created a visual kinematic model of the CougarBot, capturing the sizes and positions of the links and joints. That's enough information to visualize the robot in</span>
                  <code xml:space="preserve" id="code_001784" smilref="Programming_Robots_with_ROS00022.smil#code_001784">rviz</code>
                  <span class="text" id="span_007156" smilref="Programming_Robots_with_ROS00022.smil#span_007156">, but to simulate it in Gazebo, we need to add the collision geometry and inertial properties of each link.</span>
                </p>
                <p id="p_001265">
                  <span class="text" id="span_007157" smilref="Programming_Robots_with_ROS00022.smil#span_007157">To add collision geometry, given the simplicity of our visual model, we just duplicate the visual geometry. Go through your</span>
                  <em id="em_000432" smilref="Programming_Robots_with_ROS00022.smil#em_000432">cougarbot.urdf</em>
                  <span class="text" id="span_007158" smilref="Programming_Robots_with_ROS00022.smil#span_007158">, adding for each</span>
                  <code xml:space="preserve" id="code_001785" smilref="Programming_Robots_with_ROS00022.smil#code_001785">&lt;visual&gt;</code>
                  <span class="text" id="span_007159" smilref="Programming_Robots_with_ROS00022.smil#span_007159">/</span>
                  <code xml:space="preserve" id="code_001786" smilref="Programming_Robots_with_ROS00022.smil#code_001786">&lt;geometry&gt;</code>
                  <span class="text" id="span_007160" smilref="Programming_Robots_with_ROS00022.smil#span_007160">tag a sibling</span>
                  <code xml:space="preserve" id="code_001787" smilref="Programming_Robots_with_ROS00022.smil#code_001787">&lt;collision&gt;</code>
                  <span class="text" id="span_007161" smilref="Programming_Robots_with_ROS00022.smil#span_007161">/</span>
                  <code xml:space="preserve" id="code_001788" smilref="Programming_Robots_with_ROS00022.smil#code_001788">&lt;geometry&gt;</code>
                  <span class="text" id="span_007162" smilref="Programming_Robots_with_ROS00022.smil#span_007162">tag with the same shape, size, and origin. For example, the</span>
                  <code xml:space="preserve" id="code_001789" smilref="Programming_Robots_with_ROS00022.smil#code_001789">base_link</code>
                  <span class="text" id="span_007163" smilref="Programming_Robots_with_ROS00022.smil#span_007163">with collision information would look like</span>
                  <a data-type="xref" href="#ch18-cougarbot_urdf_6" external="false" id="a_000336" smilref="Programming_Robots_with_ROS00022.smil#a_000336">Example 18-6</a>
                  <span class="text" id="span_007164" smilref="Programming_Robots_with_ROS00022.smil#span_007164">. Note that you don't need to add a</span>
                  <code xml:space="preserve" id="code_001790" smilref="Programming_Robots_with_ROS00022.smil#code_001790">&lt;material&gt;</code>
                  <span class="text" id="span_007165" smilref="Programming_Robots_with_ROS00022.smil#span_007165">tag for the collision body.</span>
                </p>
                <h1 id="h1_000416" smilref="Programming_Robots_with_ROS00022.smil#h1_000416">Example 18-6. Code for the CougarBot base, with collision information</h1>
                <div id="ch18-cougarbot_urdf_6" data-type="example">
                  <p id="p_001266">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001791" smilref="Programming_Robots_with_ROS00022.smil#code_001791">  &lt;link name="base_link"&gt;
    &lt;visual&gt;
      &lt;geometry&gt;
        &lt;cylinder length="0.05" radius="0.1"/&gt;
      &lt;/geometry&gt;
      &lt;material name="silver"&gt;
        &lt;color rgba="0.75 0.75 0.75 1"/&gt;
      &lt;/material&gt;
      &lt;origin rpy="0 0 0" xyz="0 0 0.025"/&gt;
    &lt;/visual&gt;
    &lt;collision&gt;
      &lt;geometry&gt;
        &lt;cylinder length="0.05" radius="0.1"/&gt;
      &lt;/geometry&gt;
      &lt;origin rpy="0 0 0" xyz="0 0 0.025"/&gt;
    &lt;/collision&gt;
  &lt;/link&gt;</code>
                  </p>
                </div>
                <p id="p_001267">
                  <span class="text" id="span_007166" smilref="Programming_Robots_with_ROS00022.smil#span_007166">To add inertial data, we need to determine the mass properties of each link. To keep things simple, we'll give each link a mass of 1.0 kg. For help with computing inertia matrices, we can consult</span>
                  <a href="http://bit.ly/moments_of_inertia" external="true" id="a_000337" smilref="Programming_Robots_with_ROS00022.smil#a_000337">some well-known formulas</a>
                  <span class="text" id="span_007167" smilref="Programming_Robots_with_ROS00022.smil#span_007167">for computing moments of inertia for objects of various shapes, including boxes and cylinders. Using those formulas, we computed the inertia values shown in</span>
                  <a data-type="xref" href="#ch18-cougarbot_urdf_7" external="false" id="a_000338" smilref="Programming_Robots_with_ROS00022.smil#a_000338">Example 18-7</a>
                  <span class="text" id="span_007168" smilref="Programming_Robots_with_ROS00022.smil#span_007168">for the base, in</span>
                  <a data-type="xref" href="#ch18-cougarbot_urdf_8" external="false" id="a_000339" smilref="Programming_Robots_with_ROS00022.smil#a_000339">Example 18-8</a>
                  <span class="text" id="span_007169" smilref="Programming_Robots_with_ROS00022.smil#span_007169">for the torso, in</span>
                  <a data-type="xref" href="#ch18-cougarbot_urdf_9" external="false" id="a_000340" smilref="Programming_Robots_with_ROS00022.smil#a_000340">Example 18-9</a>
                  <span class="text" id="span_007170" smilref="Programming_Robots_with_ROS00022.smil#span_007170">for the upper arm and lower arm (they're identical), and in</span>
                  <a data-type="xref" href="#ch18-cougarbot_urdf_10" external="false" id="a_000341" smilref="Programming_Robots_with_ROS00022.smil#a_000341">Example 18-10</a>
                  <span class="text" id="span_007171" smilref="Programming_Robots_with_ROS00022.smil#span_007171">for the hand. Add each block of XML inside the corresponding link(s) in</span>
                  <em id="em_000433" smilref="Programming_Robots_with_ROS00022.smil#em_000433">cougarbot.urdf</em>
                  <span class="text" id="span_007172" smilref="Programming_Robots_with_ROS00022.smil#span_007172">.</span>
                </p>
                <h1 id="h1_000417" smilref="Programming_Robots_with_ROS00022.smil#h1_000417">Example 18-7. CougarBot inertial data for the base</h1>
                <div id="ch18-cougarbot_urdf_7" data-type="example">
                  <p id="p_001268">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001792" smilref="Programming_Robots_with_ROS00022.smil#code_001792">    &lt;inertial&gt;
      &lt;mass value="1.0"/&gt;
      &lt;origin rpy="0 0 0" xyz="0 0 0.025"/&gt;
      &lt;inertia ixx="0.0027" iyy="0.0027" izz="0.005"
               ixy="0" ixz="0" iyz="0"/&gt;
    &lt;/inertial&gt;</code>
                  </p>
                </div>
                <h1 id="h1_000418" smilref="Programming_Robots_with_ROS00022.smil#h1_000418">Example 18-8. CougarBot inertial data for the torso</h1>
                <div id="ch18-cougarbot_urdf_8" data-type="example">
                  <p id="p_001269">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001793" smilref="Programming_Robots_with_ROS00022.smil#code_001793">    &lt;inertial&gt;
      &lt;mass value="1.0"/&gt;
      &lt;origin rpy="0 0 0" xyz="0 0 0.25"/&gt;
      &lt;inertia ixx="0.02146" iyy="0.02146" izz="0.00125"
               ixy="0" ixz="0" iyz="0"/&gt;
    &lt;/inertial&gt;</code>
                  </p>
                </div>
                <h1 id="h1_000419" smilref="Programming_Robots_with_ROS00022.smil#h1_000419">Example 18-9. CougarBot inertial data for the upper arm and lower arm</h1>
                <div id="ch18-cougarbot_urdf_9" data-type="example">
                  <p id="p_001270">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001794" smilref="Programming_Robots_with_ROS00022.smil#code_001794">    &lt;inertial&gt;
      &lt;mass value="1.0"/&gt;
      &lt;origin rpy="0 0 0" xyz="0 0 0.2"/&gt;
      &lt;inertia ixx="0.01396" iyy="0.01396" izz="0.00125"
               ixy="0" ixz="0" iyz="0"/&gt;
    &lt;/inertial&gt;</code>
                  </p>
                </div>
                <h1 id="h1_000420" smilref="Programming_Robots_with_ROS00022.smil#h1_000420">Example 18-10. CougarBot inertial data for the hand</h1>
                <div id="ch18-cougarbot_urdf_10" data-type="example">
                  <p id="p_001271">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001795" smilref="Programming_Robots_with_ROS00022.smil#code_001795">    &lt;inertial&gt;
      &lt;mass value="1.0"/&gt;
      &lt;inertia ixx="0.00042" iyy="0.00042" izz="0.00042"
               ixy="0" ixz="0" iyz="0"/&gt;
    &lt;/inertial&gt;</code>
                  </p>
                </div>
                <p id="p_001272">
                  <span class="text" id="span_007173" smilref="Programming_Robots_with_ROS00022.smil#span_007173">Note that, in every link for which we used the</span>
                  <code xml:space="preserve" id="code_001796" smilref="Programming_Robots_with_ROS00022.smil#code_001796">&lt;origin&gt;</code>
                  <span class="text" id="span_007174" smilref="Programming_Robots_with_ROS00022.smil#span_007174">tag to offset the point of reference for the</span>
                  <code xml:space="preserve" id="code_001797" smilref="Programming_Robots_with_ROS00022.smil#code_001797">&lt;visual&gt;</code>
                  <span class="text" id="span_007175" smilref="Programming_Robots_with_ROS00022.smil#span_007175">and</span>
                  <code xml:space="preserve" id="code_001798" smilref="Programming_Robots_with_ROS00022.smil#code_001798">&lt;collision&gt;</code>
                  <span class="text" id="span_007176" smilref="Programming_Robots_with_ROS00022.smil#span_007176">elements, we used the same</span>
                  <code xml:space="preserve" id="code_001799" smilref="Programming_Robots_with_ROS00022.smil#code_001799">&lt;origin&gt;</code>
                  <span class="text" id="span_007177" smilref="Programming_Robots_with_ROS00022.smil#span_007177">tag for the</span>
                  <code xml:space="preserve" id="code_001800" smilref="Programming_Robots_with_ROS00022.smil#code_001800">&lt;inertial&gt;</code>
                  <span class="text" id="span_007178" smilref="Programming_Robots_with_ROS00022.smil#span_007178">element. In this way, we ensure that the visual, kinematic, and dynamic representations of the robot are consistent, which suits our purposes with the CougarBot (there are situations in which you might want them to diverge from each other).</span>
                </p>
                <p id="p_001273">
                  <span class="text" id="span_007179" smilref="Programming_Robots_with_ROS00022.smil#span_007179">At this point, we need to organize our code into a ROS package, which we'll call</span>
                  <code xml:space="preserve" id="code_001801" smilref="Programming_Robots_with_ROS00022.smil#code_001801">cougarbot</code>
                  <span class="text" id="span_007180" smilref="Programming_Robots_with_ROS00022.smil#span_007180">. Create a directory in your workspace called</span>
                  <em id="em_000434" smilref="Programming_Robots_with_ROS00022.smil#em_000434">cougarbot</em>
                  <span class="text" id="span_007181" smilref="Programming_Robots_with_ROS00022.smil#span_007181">, add an appropriate</span>
                  <em id="em_000435" smilref="Programming_Robots_with_ROS00022.smil#em_000435">package.xml</em>
                  <span class="text" id="span_007182" smilref="Programming_Robots_with_ROS00022.smil#span_007182">file, then move your</span>
                  <em id="em_000436" smilref="Programming_Robots_with_ROS00022.smil#em_000436">cougarbot.urdf</em>
                  <span class="text" id="span_007183" smilref="Programming_Robots_with_ROS00022.smil#span_007183">file in there. Now we're going to add a</span>
                  <code xml:space="preserve" id="code_001802" smilref="Programming_Robots_with_ROS00022.smil#code_001802">roslaunch</code>
                  <span class="text" id="span_007184" smilref="Programming_Robots_with_ROS00022.smil#span_007184">file that launches Gazebo with a CougarBot in it. The</span>
                  <code xml:space="preserve" id="code_001803" smilref="Programming_Robots_with_ROS00022.smil#code_001803">roslaunch</code>
                  <span class="text" id="span_007185" smilref="Programming_Robots_with_ROS00022.smil#span_007185">code is shown in</span>
                  <a data-type="xref" href="#ch18-cougarbot_launch" external="false" id="a_000342" smilref="Programming_Robots_with_ROS00022.smil#a_000342">Example 18-11</a>
                  <span class="text" id="span_007186" smilref="Programming_Robots_with_ROS00022.smil#span_007186">.</span>
                </p>
                <h1 id="h1_000421" smilref="Programming_Robots_with_ROS00022.smil#h1_000421">Example 18-11. cougarbot.launch file to bring up Gazebo with a CougarBot model</h1>
                <div id="ch18-cougarbot_launch" data-type="example">
                  <p id="p_001274">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001804" smilref="Programming_Robots_with_ROS00022.smil#code_001804">&lt;launch&gt;
  &lt;!-- Load the CougarBot URDF model into the parameter server --&gt;
  &lt;param name="robot_description" textfile="$(find cougarbot)/cougarbot.urdf" /&gt;
  &lt;!-- Start Gazebo with an empty world --&gt;
  &lt;include file="$(find gazebo_ros)/launch/empty_world.launch"/&gt;
  &lt;!-- Spawn a CougarBot in Gazebo, taking the description from the
       parameter server --&gt;
  &lt;node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model"
        args="-param robot_description -urdf -model cougarbot" /&gt;
&lt;/launch&gt;</code>
                  </p>
                </div>
                <p id="p_001275">
                  <span class="text" id="span_007187" smilref="Programming_Robots_with_ROS00022.smil#span_007187">In this launch file, we load the URDF file into the parameter server as</span>
                  <span class="keep-together" id="span_007188">
                    <code xml:space="preserve" id="code_001805" smilref="Programming_Robots_with_ROS00022.smil#code_001805">/robot_description</code>
                  </span>
                  <span class="text" id="span_007189" smilref="Programming_Robots_with_ROS00022.smil#span_007189">, then use a helper launch file from the</span>
                  <code xml:space="preserve" id="code_001806" smilref="Programming_Robots_with_ROS00022.smil#code_001806">gazebo_ros</code>
                  <span class="text" id="span_007190" smilref="Programming_Robots_with_ROS00022.smil#span_007190">package to run Gazebo with an empty world. With the model data loaded into the parameter server and Gazebo running, we use the helper tool</span>
                  <code xml:space="preserve" id="code_001807" smilref="Programming_Robots_with_ROS00022.smil#code_001807">spawn_model</code>
                  <span class="text" id="span_007191" smilref="Programming_Robots_with_ROS00022.smil#span_007191">, also from the</span>
                  <code xml:space="preserve" id="code_001808" smilref="Programming_Robots_with_ROS00022.smil#code_001808">gazebo_ros</code>
                  <span class="text" id="span_007192" smilref="Programming_Robots_with_ROS00022.smil#span_007192">package, to ask Gazebo to spawn an instance of the CougarBot, reading URDF data from the</span>
                  <code xml:space="preserve" id="code_001809" smilref="Programming_Robots_with_ROS00022.smil#code_001809">/robot_description</code>
                  <span class="text" id="span_007193" smilref="Programming_Robots_with_ROS00022.smil#span_007193">parameter.</span>
                </p>
                <p id="p_001276">
                  <span class="text" id="span_007194" smilref="Programming_Robots_with_ROS00022.smil#span_007194">Save that file as</span>
                  <em id="em_000437" smilref="Programming_Robots_with_ROS00022.smil#em_000437">cougarbot/cougarbot.launch</em>
                  <span class="text" id="span_007195" smilref="Programming_Robots_with_ROS00022.smil#span_007195">and give it a try:</span>
                </p>
                <p id="p_001277">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001810"><span class="text" id="span_007196" smilref="Programming_Robots_with_ROS00022.smil#span_007196">
user@hostname$ </span><strong id="strong_000187" smilref="Programming_Robots_with_ROS00022.smil#strong_000187">roslaunch cougarbot cougarbot.launch</strong>
</code>
                </p>
                <p id="p_001278">
                  <span class="text" id="span_007197" smilref="Programming_Robots_with_ROS00022.smil#span_007197">You should see Gazebo pop up, with a CougarBot, similar to</span>
                  <a data-type="xref" href="#ch18-cougarbot_gazebo_1" external="false" id="a_000343" smilref="Programming_Robots_with_ROS00022.smil#a_000343">Figure 18-4</a>
                  <span class="text" id="span_007198" smilref="Programming_Robots_with_ROS00022.smil#span_007198">. Hooray!</span>
                </p>
                <figure id="figure_000103">
                  <h1 id="h1_000422" smilref="Programming_Robots_with_ROS00022.smil#h1_000422">Figure 18-4. Gazebo simulating the CougarBot</h1>
                  <div id="ch18-cougarbot_gazebo_1" class="figure">
                    <img src="images/prwr_1804.jpg" alt="CougarBot model in simulation" id="img_000293" />
                  </div>
                </figure>
                <p id="p_001279">
                  <span class="text" id="span_007199" smilref="Programming_Robots_with_ROS00022.smil#span_007199">However, the robot is just lying there, collapsed. What happened? We asked Gazebo to simulate a robot arm having links with mass connected to joints. But we didn't say anything about how to</span>
                  <em id="em_000438" smilref="Programming_Robots_with_ROS00022.smil#em_000438">control</em>
                  <span class="text" id="span_007200" smilref="Programming_Robots_with_ROS00022.smil#span_007200">those joints. In the absence of any torque being applied to the joints, as a motor would do, the robot is limp, with the links falling under the force of gravity like a in rag doll (but obeying the kinematic and dynamic properties of the model).</span>
                </p>
                <p data-type="indexterm" data-primary="ros_control plugin" id="ch18-idp42053952">
                  <span class="text" id="span_007201" smilref="Programming_Robots_with_ROS00022.smil#span_007201">Recall from</span>
                  <a data-type="xref" href="#ch16-rossify_robots_gazebo" external="false" id="a_000344" smilref="Programming_Robots_with_ROS00022.smil#a_000344">"Simulation in Gazebo"</a>
                  <span class="text" id="span_007202" smilref="Programming_Robots_with_ROS00022.smil#span_007202">that for the TortoiseBot we added to the model a Gazebo plugin to support differential drive control via the</span>
                  <code xml:space="preserve" id="code_001811" smilref="Programming_Robots_with_ROS00022.smil#code_001811">cmd_vel</code>
                  <span class="text" id="span_007203" smilref="Programming_Robots_with_ROS00022.smil#span_007203">/</span>
                  <code xml:space="preserve" id="code_001812" smilref="Programming_Robots_with_ROS00022.smil#code_001812">odom</code>
                  <span class="text" id="span_007204" smilref="Programming_Robots_with_ROS00022.smil#span_007204">interface. Obviously, differential drive isn't right for our robot arm. For the CougarBot, we need something to help us control all its joints via the</span>
                  <code xml:space="preserve" id="code_001813" smilref="Programming_Robots_with_ROS00022.smil#code_001813">follow_joint_ tra jec tory</code>
                  <span class="text" id="span_007205" smilref="Programming_Robots_with_ROS00022.smil#span_007205">/</span>
                  <code xml:space="preserve" id="code_001814" smilref="Programming_Robots_with_ROS00022.smil#code_001814">joint_states</code>
                  <span class="text" id="span_007206" smilref="Programming_Robots_with_ROS00022.smil#span_007206">interface. For this purpose, we're going to use two plugins: the</span>
                  <code xml:space="preserve" id="code_001815" smilref="Programming_Robots_with_ROS00022.smil#code_001815">ros_control</code>
                  <span class="text" id="span_007207" smilref="Programming_Robots_with_ROS00022.smil#span_007207">plugin will accept new desired trajectories via</span>
                  <code xml:space="preserve" id="code_001816" smilref="Programming_Robots_with_ROS00022.smil#code_001816">follow_joint_ tra jec tory</code>
                  <span class="text" id="span_007208" smilref="Programming_Robots_with_ROS00022.smil#span_007208">, while the</span>
                  <code xml:space="preserve" id="code_001817" smilref="Programming_Robots_with_ROS00022.smil#code_001817">ros_joint_state_publisher</code>
                  <span class="text" id="span_007209" smilref="Programming_Robots_with_ROS00023.smil#span_007209">will publish the</span>
                  <code xml:space="preserve" id="code_001818" smilref="Programming_Robots_with_ROS00023.smil#code_001818">joint_states</code>
                  <span class="text" id="span_007210" smilref="Programming_Robots_with_ROS00023.smil#span_007210">data.</span>
                </p>
                <p id="p_001280">
                  <span class="text" id="span_007211" smilref="Programming_Robots_with_ROS00023.smil#span_007211">To make the joints move, we need the</span>
                  <code xml:space="preserve" id="code_001819" smilref="Programming_Robots_with_ROS00023.smil#code_001819">ros_control</code>
                  <span class="text" id="span_007212" smilref="Programming_Robots_with_ROS00023.smil#span_007212">plugin. Adding this plugin takes some effort. To understand why, it's important to know that all the control code we're going to use in simulation is also used with real hardware. To make this work, the controllers and supporting infrastructure require extra abstraction and configuration, both of which add complexity. In exchange for the additional complexity, we get</span>
                  <span class="keep-together" id="span_007213" smilref="Programming_Robots_with_ROS00023.smil#span_007213">the ability to run</span>
                  <span class="text" id="span_007214" smilref="Programming_Robots_with_ROS00023.smil#span_007214">the same code in simulation and on real robots, which is a great</span>
                  <span class="keep-together" id="span_007215" smilref="Programming_Robots_with_ROS00023.smil#span_007215">trade-off</span>
                  <span class="text" id="span_007216" smilref="Programming_Robots_with_ROS00023.smil#span_007216">to make.</span>
                </p>
                <p data-type="indexterm" data-primary="transmissions" id="ch18-idp42059280">
                  <span class="text" id="span_007217" smilref="Programming_Robots_with_ROS00023.smil#span_007217">First, for every joint in our URDF model, we need to define a matching</span>
                  <em id="em_000439" smilref="Programming_Robots_with_ROS00023.smil#em_000439">transmission</em>
                  <span class="text" id="span_007218" smilref="Programming_Robots_with_ROS00023.smil#span_007218">. The transmission models what happens between the output of a motor and the joint to which the motor is attached. Transmissions often involve a gear reduction to account for the mechanical gearbox that is used to increase the torque available from an electric motor, which is naturally a high-speed, low-torque device. A transmission can also include more complex phenomena, such as mechanical coupling among joints. Shown in</span>
                  <a data-type="xref" href="#ch18-cougarbot_urdf_12" external="false" id="a_000345" smilref="Programming_Robots_with_ROS00023.smil#a_000345">Example 18-12</a>
                  <span class="text" id="span_007219" smilref="Programming_Robots_with_ROS00023.smil#span_007219">is the code to define a simple transmission for the CougarBot's hip joint. To learn more about this and other types of transmission, consult the</span>
                  <a href="http://wiki.ros.org/urdf/XML/Transmission?distro=indigo" external="true" id="a_000346" smilref="Programming_Robots_with_ROS00023.smil#a_000346">documentation for URDF</a>
                  <span class="text" id="span_007220" smilref="Programming_Robots_with_ROS00023.smil#span_007220">.</span>
                </p>
                <h1 id="h1_000423" smilref="Programming_Robots_with_ROS00023.smil#h1_000423">Example 18-12. URDF code to add a transmission for the hip joint</h1>
                <div id="ch18-cougarbot_urdf_12" data-type="example">
                  <p id="p_001281">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001820" smilref="Programming_Robots_with_ROS00023.smil#code_001820">  &lt;transmission name="tran0"&gt;
    &lt;type&gt;transmission_interface/SimpleTransmission&lt;/type&gt;
    &lt;joint name="hip"&gt;
      &lt;hardwareInterface&gt;PositionJointInterface&lt;/hardwareInterface&gt;
    &lt;/joint&gt;
    &lt;actuator name="motor0"&gt;
      &lt;hardwareInterface&gt;PositionJointInterface&lt;/hardwareInterface&gt;
      &lt;mechanicalReduction&gt;1&lt;/mechanicalReduction&gt;
    &lt;/actuator&gt;
  &lt;/transmission&gt;</code>
                  </p>
                </div>
                <p id="p_001282">
                  <span class="text" id="span_007221" smilref="Programming_Robots_with_ROS00023.smil#span_007221">This block of code defines what is essentially an empty transmission, with a gear reduction of</span>
                  <code xml:space="preserve" id="code_001821" smilref="Programming_Robots_with_ROS00023.smil#code_001821">1</code>
                  <span class="text" id="span_007222" smilref="Programming_Robots_with_ROS00023.smil#span_007222">. It's unrealistic, but will meet our needs for simulating a CougarBot. Add that URDF code to your model, anywhere inside the</span>
                  <code xml:space="preserve" id="code_001822" smilref="Programming_Robots_with_ROS00023.smil#code_001822">&lt;robot&gt;</code>
                  <span class="text" id="span_007223" smilref="Programming_Robots_with_ROS00023.smil#span_007223">tag. Then add the analogous transmissions for the other three joints, shown in</span>
                  <a data-type="xref" href="#ch18-cougarbot_urdf_13" external="false" id="a_000347" smilref="Programming_Robots_with_ROS00023.smil#a_000347">Example 18-13</a>
                  <span class="text" id="span_007224" smilref="Programming_Robots_with_ROS00023.smil#span_007224">.</span>
                </p>
                <h1 id="h1_000424" smilref="Programming_Robots_with_ROS00023.smil#h1_000424">Example 18-13. URDF code to add transmissions for the shoulder, elbow, and wrist</h1>
                <div id="ch18-cougarbot_urdf_13" data-type="example">
                  <p id="p_001283">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001823" smilref="Programming_Robots_with_ROS00023.smil#code_001823">  &lt;transmission name="tran1"&gt;
    &lt;type&gt;transmission_interface/SimpleTransmission&lt;/type&gt;
    &lt;joint name="shoulder"&gt;
      &lt;hardwareInterface&gt;PositionJointInterface&lt;/hardwareInterface&gt;
    &lt;/joint&gt;
    &lt;actuator name="motor1"&gt;
      &lt;hardwareInterface&gt;PositionJointInterface&lt;/hardwareInterface&gt;
      &lt;mechanicalReduction&gt;1&lt;/mechanicalReduction&gt;
    &lt;/actuator&gt;
  &lt;/transmission&gt;
  &lt;transmission name="tran2"&gt;
    &lt;type&gt;transmission_interface/SimpleTransmission&lt;/type&gt;
    &lt;joint name="elbow"&gt;
      &lt;hardwareInterface&gt;PositionJointInterface&lt;/hardwareInterface&gt;
    &lt;/joint&gt;
    &lt;actuator name="motor2"&gt;
      &lt;hardwareInterface&gt;PositionJointInterface&lt;/hardwareInterface&gt;
      &lt;mechanicalReduction&gt;1&lt;/mechanicalReduction&gt;
    &lt;/actuator&gt;
  &lt;/transmission&gt;
  &lt;transmission name="tran3"&gt;
    &lt;type&gt;transmission_interface/SimpleTransmission&lt;/type&gt;
    &lt;joint name="wrist"&gt;
      &lt;hardwareInterface&gt;PositionJointInterface&lt;/hardwareInterface&gt;
    &lt;/joint&gt;
    &lt;actuator name="motor3"&gt;
      &lt;hardwareInterface&gt;PositionJointInterface&lt;/hardwareInterface&gt;
      &lt;mechanicalReduction&gt;1&lt;/mechanicalReduction&gt;
    &lt;/actuator&gt;
  &lt;/transmission&gt;</code>
                  </p>
                </div>
                <p id="p_001284">
                  <span class="text" id="span_007225" smilref="Programming_Robots_with_ROS00023.smil#span_007225">With the transmissions defined, we can add the</span>
                  <code xml:space="preserve" id="code_001824" smilref="Programming_Robots_with_ROS00023.smil#code_001824">ros_control</code>
                  <span class="text" id="span_007226" smilref="Programming_Robots_with_ROS00023.smil#span_007226">plugin, as shown in</span>
                  <a data-type="xref" href="#ch18-cougarbot_urdf_14" external="false" id="a_000348" smilref="Programming_Robots_with_ROS00023.smil#a_000348">Example 18-14</a>
                </p>
                <h1 id="h1_000425" smilref="Programming_Robots_with_ROS00023.smil#h1_000425">Example 18-14. URDF code to load the ros_control plugin</h1>
                <div id="ch18-cougarbot_urdf_14" data-type="example">
                  <p id="p_001285">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001825" smilref="Programming_Robots_with_ROS00023.smil#code_001825">  &lt;gazebo&gt;
    &lt;plugin name="control" filename="libgazebo_ros_control.so"/&gt;
  &lt;/gazebo&gt;</code>
                  </p>
                </div>
                <p id="p_001286">
                  <span class="text" id="span_007227" smilref="Programming_Robots_with_ROS00023.smil#span_007227">Add that code to your</span>
                  <em id="em_000440" smilref="Programming_Robots_with_ROS00023.smil#em_000440">cougarbot.urdf</em>
                  <span class="text" id="span_007228" smilref="Programming_Robots_with_ROS00023.smil#span_007228">. Next we'll choose which of the controllers offered by</span>
                  <code xml:space="preserve" id="code_001826" smilref="Programming_Robots_with_ROS00023.smil#code_001826">ros_control</code>
                  <span class="text" id="span_007229" smilref="Programming_Robots_with_ROS00023.smil#span_007229">we're going to use and configure it. For our purposes, we need something that will accept trajectories of joint positions (as opposed to, say, velocities, accelerations, or other goals or constraints). Create a new file in your</span>
                  <code xml:space="preserve" id="code_001827" smilref="Programming_Robots_with_ROS00023.smil#code_001827">cougarbot</code>
                  <span class="text" id="span_007230" smilref="Programming_Robots_with_ROS00023.smil#span_007230">package, call it</span>
                  <em id="em_000441" smilref="Programming_Robots_with_ROS00023.smil#em_000441">controllers.yaml</em>
                  <span class="text" id="span_007231" smilref="Programming_Robots_with_ROS00023.smil#span_007231">, and insert the YAML code shown in</span>
                  <a data-type="xref" href="#ch18-cougarbot_controllers_yaml" external="false" id="a_000349" smilref="Programming_Robots_with_ROS00023.smil#a_000349">Example 18-15</a>
                  <span class="text" id="span_007232" smilref="Programming_Robots_with_ROS00023.smil#span_007232">.</span>
                </p>
                <h1 id="h1_000426" smilref="Programming_Robots_with_ROS00023.smil#h1_000426">Example 18-15. YAML configuration of a controller for CougarBot</h1>
                <div id="ch18-cougarbot_controllers_yaml" data-type="example">
                  <p id="p_001287">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001828" smilref="Programming_Robots_with_ROS00023.smil#code_001828">arm_controller:
  type: "position_controllers/JointTrajectoryController"
  joints:
    - hip
    - shoulder
    - elbow
    - wrist</code>
                  </p>
                </div>
                <p id="p_001288">
                  <span class="text" id="span_007233" smilref="Programming_Robots_with_ROS00023.smil#span_007233">This file defines a new controller, called</span>
                  <code xml:space="preserve" id="code_001829" smilref="Programming_Robots_with_ROS00023.smil#code_001829">arm_controller</code>
                  <span class="text" id="span_007234" smilref="Programming_Robots_with_ROS00023.smil#span_007234">, of type</span>
                  <code xml:space="preserve" id="code_001830" smilref="Programming_Robots_with_ROS00023.smil#code_001830">position_ con trol lers/JointTrajectoryController</code>
                  <span class="text" id="span_007235" smilref="Programming_Robots_with_ROS00023.smil#span_007235">, that controls all of of our robot's joints. The following is the XML code required to load the contents of this file via</span>
                  <code xml:space="preserve" id="code_001831" smilref="Programming_Robots_with_ROS00023.smil#code_001831">rosparam</code>
                  <span class="text" id="span_007236" smilref="Programming_Robots_with_ROS00023.smil#span_007236">into the ROS parameter server, where other tools can access it:</span>
                </p>
                <p id="p_001289">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001832" smilref="Programming_Robots_with_ROS00023.smil#code_001832">  &lt;rosparam file="$(find cougarbot)/controllers.yaml" command="load"/&gt;</code>
                </p>
                <p id="p_001290">
                  <span class="text" id="span_007237" smilref="Programming_Robots_with_ROS00023.smil#span_007237">Add that code to your</span>
                  <em id="em_000442" smilref="Programming_Robots_with_ROS00023.smil#em_000442">cougarbot.launch</em>
                  <span class="text" id="span_007238" smilref="Programming_Robots_with_ROS00023.smil#span_007238">. Now we actually need to spawn our newly configured controller. By default,</span>
                  <code xml:space="preserve" id="code_001833" smilref="Programming_Robots_with_ROS00023.smil#code_001833">ros_control</code>
                  <span class="text" id="span_007239" smilref="Programming_Robots_with_ROS00023.smil#span_007239">starts without any controllers running, waiting to be told what to do. Here is the XML code required to use the</span>
                  <code xml:space="preserve" id="code_001834" smilref="Programming_Robots_with_ROS00023.smil#code_001834">controller_manager/spawner</code>
                  <span class="text" id="span_007240" smilref="Programming_Robots_with_ROS00023.smil#span_007240">tool to spawn our</span>
                  <code xml:space="preserve" id="code_001835" smilref="Programming_Robots_with_ROS00023.smil#code_001835">arm_controller</code>
                  <span class="text" id="span_007241" smilref="Programming_Robots_with_ROS00023.smil#span_007241">:</span>
                </p>
                <p id="p_001291">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001836" smilref="Programming_Robots_with_ROS00023.smil#code_001836">  &lt;node name="controller_spawner" pkg="controller_manager" type="spawner"
        args="arm_controller"/&gt;</code>
                </p>
                <p id="p_001292">
                  <span class="text" id="span_007242" smilref="Programming_Robots_with_ROS00023.smil#span_007242">Add that code to your</span>
                  <em id="em_000443" smilref="Programming_Robots_with_ROS00023.smil#em_000443">cougarbot.launch</em>
                  <span class="text" id="span_007243" smilref="Programming_Robots_with_ROS00023.smil#span_007243">. Now, let's get this robot moving! Launch the simulation again. You should get a different result this time, similar to</span>
                  <a data-type="xref" href="#ch18-cougarbot_gz_2" external="false" id="a_000350" smilref="Programming_Robots_with_ROS00023.smil#a_000350">Figure 18-5</a>
                  <span class="text" id="span_007244" smilref="Programming_Robots_with_ROS00023.smil#span_007244">.</span>
                </p>
                <figure id="figure_000104">
                  <h1 id="h1_000427" smilref="Programming_Robots_with_ROS00023.smil#h1_000427">Figure 18-5. Gazebo simulating the CougarBot, with the controller running</h1>
                  <div id="ch18-cougarbot_gz_2" class="figure">
                    <img src="images/prwr_1805.jpg" alt="CougarBot model in simulation, with controller running" id="img_000294" />
                  </div>
                </figure>
                <p id="p_001293">
                  <span class="text" id="span_007245" smilref="Programming_Robots_with_ROS00023.smil#span_007245">The robot is now no longer just lying there, but rather is maintaining the configuration that we specified when we built the model. That's the result of our new controller, which by default will try to keep each joint at its zero position. We can tell it to go somewhere else by sending a new command to the</span>
                  <code xml:space="preserve" id="code_001837" smilref="Programming_Robots_with_ROS00023.smil#code_001837">follow_joint_trajectory</code>
                  <span class="text" id="span_007246" smilref="Programming_Robots_with_ROS00023.smil#span_007246">interface. How can we do that? Let's start by looking at the list of available topics:</span>
                </p>
                <p id="p_001294">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001838"><span class="text" id="span_007247" smilref="Programming_Robots_with_ROS00023.smil#span_007247">
user@hostname$ </span><strong id="strong_000188" smilref="Programming_Robots_with_ROS00023.smil#strong_000188">rostopic list</strong><span class="text" id="span_007248" smilref="Programming_Robots_with_ROS00023.smil#span_007248">
/arm_controller/command
/arm_controller/follow_joint_trajectory/cancel
/arm_controller/follow_joint_trajectory/feedback
/arm_controller/follow_joint_trajectory/goal
/arm_controller/follow_joint_trajectory/result
/arm_controller/follow_joint_trajectory/status
/arm_controller/state
/clock
/gazebo/link_states
/gazebo/model_states
/gazebo/parameter_descriptions
/gazebo/parameter_updates
/gazebo/set_link_state
/gazebo/set_model_state
/rosout
/rosout_agg
</span></code>
                </p>
                <p id="p_001295">
                  <span class="text" id="span_007249" smilref="Programming_Robots_with_ROS00023.smil#span_007249">We can see that the</span>
                  <code xml:space="preserve" id="code_001839" smilref="Programming_Robots_with_ROS00023.smil#code_001839">/arm_controller</code>
                  <span class="text" id="span_007250" smilref="Programming_Robots_with_ROS00023.smil#span_007250">namespace contains several topics that look interesting. The</span>
                  <code xml:space="preserve" id="code_001840" smilref="Programming_Robots_with_ROS00023.smil#code_001840">follow_joint_trajectory</code>
                  <span class="text" id="span_007251" smilref="Programming_Robots_with_ROS00023.smil#span_007251">namespace contains the topics that make up the action interface, which is how the controller is normally used. But it also offers a</span>
                  <code xml:space="preserve" id="code_001841" smilref="Programming_Robots_with_ROS00023.smil#code_001841">command</code>
                  <span class="text" id="span_007252" smilref="Programming_Robots_with_ROS00023.smil#span_007252">topic; let's get more information on that one:</span>
                </p>
                <p id="p_001296">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001842"><span class="text" id="span_007253" smilref="Programming_Robots_with_ROS00023.smil#span_007253">
user@hostname$ </span><strong id="strong_000189" smilref="Programming_Robots_with_ROS00023.smil#strong_000189">rostopic info /arm_controller/command</strong><span class="text" id="span_007254" smilref="Programming_Robots_with_ROS00023.smil#span_007254">
Type: trajectory_msgs/JointTrajectory

Publishers: None

Subscribers:
 * /gazebo (http://rossum:42185/)
</span></code>
                </p>
                <p id="p_001297">
                  <span class="text" id="span_007255" smilref="Programming_Robots_with_ROS00023.smil#span_007255">We saw the</span>
                  <code xml:space="preserve" id="code_001843" smilref="Programming_Robots_with_ROS00023.smil#code_001843">trajectory_msgs/JointTrajectory</code>
                  <span class="text" id="span_007256" smilref="Programming_Robots_with_ROS00023.smil#span_007256">message in</span>
                  <a data-type="xref" href="#ch18-rossify_robots3_msg_interface" external="false" id="a_000351" smilref="Programming_Robots_with_ROS00023.smil#a_000351">"ROS Message Interface"</a>
                  <span class="text" id="span_007257" smilref="Programming_Robots_with_ROS00023.smil#span_007257">when looking at the type of goal accepted by the</span>
                  <code xml:space="preserve" id="code_001844" smilref="Programming_Robots_with_ROS00023.smil#code_001844">follow_joint_ tra jec tory</code>
                  <span class="text" id="span_007258" smilref="Programming_Robots_with_ROS00023.smil#span_007258">action. Now let's try to construct and publish a message of that type. The minimum information that we need to provide is the ordered list of joint names that we want to control, and a trajectory containing at least one point. Each trajectory point needs to define a position for each joint, along with a target time (measured from the start of execution of the trajectory) by which that point should be reached. That's not so much data, so we can publish it via</span>
                  <code xml:space="preserve" id="code_001845" smilref="Programming_Robots_with_ROS00023.smil#code_001845">rostopic</code>
                  <span class="text" id="span_007259" smilref="Programming_Robots_with_ROS00023.smil#span_007259">at the command line, telling each joint to move to a new angle, and get there in 1 second:</span>
                </p>
                <p id="p_001298">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001846"><span class="text" id="span_007260" smilref="Programming_Robots_with_ROS00023.smil#span_007260">
user@hostname$ </span><strong id="strong_000190" smilref="Programming_Robots_with_ROS00023.smil#strong_000190">rostopic pub /arm_controller/command \
  trajectory_msgs/JointTrajectory \
  '{joint_names: ["hip", "shoulder", "elbow", "wrist"], points: \
  [{positions: [0.1, -0.5, 0.5, 0.75], time_from_start: [1.0, 0.0]}]}' -1</strong>
</code>
                </p>
                <p id="p_001299">
                  <span class="text" id="span_007261" smilref="Programming_Robots_with_ROS00023.smil#span_007261">You should see the robot arm smoothly move to the new configuration, as shown in</span>
                  <a data-type="xref" href="#ch18-cougarbot_gz_3" external="false" id="a_000352" smilref="Programming_Robots_with_ROS00023.smil#a_000352">Figure 18-6</a>
                  <span class="text" id="span_007262" smilref="Programming_Robots_with_ROS00023.smil#span_007262">. Controlling a robot like this is similar to how an animator might create key frames for a character. We specify the configuration that the robot should achieve and let something else (in our case, the controller that we attached to the arm) fill in the intervening details.</span>
                </p>
                <figure id="figure_000105">
                  <h1 id="h1_000428" smilref="Programming_Robots_with_ROS00023.smil#h1_000428">Figure 18-6. CougarBot arm moved to a new configuration</h1>
                  <div id="ch18-cougarbot_gz_3" class="figure">
                    <img src="images/prwr_1806.jpg" alt="CougarBot arm moved to a new configuration" id="img_000295" />
                  </div>
                </figure>
                <p id="ch18-idp42461264" data-type="indexterm" data-startref="ix_18-rossify_robots3-asciidoc5">
                  <span class="text" id="span_007263" smilref="Programming_Robots_with_ROS00023.smil#span_007263">Try modifying the</span>
                  <code xml:space="preserve" id="code_001847" smilref="Programming_Robots_with_ROS00023.smil#code_001847">rostopic</code>
                  <span class="text" id="span_007264" smilref="Programming_Robots_with_ROS00023.smil#span_007264">call to send the robot to other configurations, as well as adding more points to form a longer trajectory. Interesting, but that quickly gets tedious. Typing out lists of joint angles at the command line is not a great way to control a robot arm. We need to continue working on our CougarBot until it's planning paths for itself.</span>
                </p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Verifying Transforms" id="section_000181">
              <h1 id="h1_000429" smilref="Programming_Robots_with_ROS00023.smil#h1_000429">Verifying Transforms</h1>
              <div class="sect1" id="ch18-rossify_robots3_verify_tf">
                <p data-type="indexterm" data-primary="transforms, verifying" data-secondary="for Cougarbot" id="ch18-ix_18-rossify_robots3-asciidoc6b">
                  <span class="text" id="span_007265" smilref="Programming_Robots_with_ROS00023.smil#span_007265">In the previous section, we used the</span>
                  <code xml:space="preserve" id="code_001848" smilref="Programming_Robots_with_ROS00023.smil#code_001848">ros_control</code>
                  <span class="text" id="span_007266" smilref="Programming_Robots_with_ROS00023.smil#span_007266">plugin to provide the</span>
                  <code xml:space="preserve" id="code_001849" smilref="Programming_Robots_with_ROS00023.smil#code_001849">fol low_ joint_trajectory</code>
                  <span class="text" id="span_007267" smilref="Programming_Robots_with_ROS00023.smil#span_007267">interface to control the arm. Now we'll use the</span>
                  <code xml:space="preserve" id="code_001850" smilref="Programming_Robots_with_ROS00023.smil#code_001850">ros_ joint_state_publisher</code>
                  <span class="text" id="span_007268" smilref="Programming_Robots_with_ROS00023.smil#span_007268">plugin to provide the</span>
                  <code xml:space="preserve" id="code_001851" smilref="Programming_Robots_with_ROS00023.smil#code_001851">joint_states</code>
                  <span class="text" id="span_007269" smilref="Programming_Robots_with_ROS00023.smil#span_007269">interface to send out the current state of the arm.</span>
                </p>
                <p id="p_001300">
                  <span class="text" id="span_007270" smilref="Programming_Robots_with_ROS00023.smil#span_007270">Adding the</span>
                  <code xml:space="preserve" id="code_001852" smilref="Programming_Robots_with_ROS00023.smil#code_001852">ros_joint_state_publisher</code>
                  <span class="text" id="span_007271" smilref="Programming_Robots_with_ROS00023.smil#span_007271">plugin is easy. We just need to tell it the list of joints for which it should publish state data. In our case, we want all of them: hip, shoulder, elbow, and wrist. Add the code in</span>
                  <a data-type="xref" href="#ch18-cougarbot_urdf_11" external="false" id="a_000353" smilref="Programming_Robots_with_ROS00023.smil#a_000353">Example 18-16</a>
                  <span class="text" id="span_007272" smilref="Programming_Robots_with_ROS00023.smil#span_007272">to your</span>
                  <em id="em_000444" smilref="Programming_Robots_with_ROS00023.smil#em_000444">cougarbot.urdf</em>
                  <span class="text" id="span_007273" smilref="Programming_Robots_with_ROS00023.smil#span_007273">, anywhere inside the</span>
                  <code xml:space="preserve" id="code_001853" smilref="Programming_Robots_with_ROS00023.smil#code_001853">&lt;robot&gt;</code>
                  <span class="text" id="span_007274" smilref="Programming_Robots_with_ROS00023.smil#span_007274">tag.</span>
                </p>
                <h1 id="h1_000430" smilref="Programming_Robots_with_ROS00023.smil#h1_000430">Example 18-16. Plugin to publish joint state data</h1>
                <div id="ch18-cougarbot_urdf_11" data-type="example" class="pagebreak-before">
                  <p id="p_001301">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001854" smilref="Programming_Robots_with_ROS00023.smil#code_001854">  &lt;gazebo&gt;
    &lt;plugin name="joint_state_publisher"
            filename="libgazebo_ros_joint_state_publisher.so"&gt;
      &lt;jointName&gt;hip, shoulder, elbow, wrist&lt;/jointName&gt;
    &lt;/plugin&gt;
  &lt;/gazebo&gt;</code>
                  </p>
                </div>
                <p id="p_001302">
                  <span class="text" id="span_007275" smilref="Programming_Robots_with_ROS00023.smil#span_007275">To check that the plugin is working, launch</span>
                  <em id="em_000445" smilref="Programming_Robots_with_ROS00023.smil#em_000445">cougarbot.launch</em>
                  <span class="text" id="span_007276" smilref="Programming_Robots_with_ROS00023.smil#span_007276">, then echo the</span>
                  <code xml:space="preserve" id="code_001855" smilref="Programming_Robots_with_ROS00023.smil#code_001855">joint_states</code>
                  <span class="text" id="span_007277" smilref="Programming_Robots_with_ROS00023.smil#span_007277">data to the console:</span>
                </p>
                <p id="p_001303">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001856"><span class="text" id="span_007278" smilref="Programming_Robots_with_ROS00023.smil#span_007278">
user@hostname$ </span><strong id="strong_000191" smilref="Programming_Robots_with_ROS00023.smil#strong_000191">rostopic echo /joint_states</strong>
</code>
                </p>
                <p id="p_001304" smilref="Programming_Robots_with_ROS00023.smil#p_001304">You should see a stream of messages showing you the position (angle) of each joint:</p>
                <p id="p_001305">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001857" smilref="Programming_Robots_with_ROS00023.smil#code_001857">
header:
  seq: 2946
  stamp:
    secs: 29
    nsecs: 632000000
  frame_id: ''
name: ['hip', 'shoulder', 'elbow', 'wrist']
position: [0.0002283149969581899, 2.4271024408939468e-05, \
           -6.677035226587691e-05, 1.7216278225262727e-06]
velocity: []
effort: []
</code>
                </p>
                <p id="p_001306" smilref="Programming_Robots_with_ROS00023.smil#p_001306">The position values should be near zero, because that's where the controller is trying to keep the arm. They might change slightly over time, much like a in real robot that is fighting against gravity to hold its position.</p>
                <p id="p_001307">
                  <span class="text" id="span_007279" smilref="Programming_Robots_with_ROS00023.smil#span_007279">Let's go ahead and add the familiar</span>
                  <code xml:space="preserve" id="code_001858" smilref="Programming_Robots_with_ROS00023.smil#code_001858">robot_state_publisher</code>
                  <span class="text" id="span_007280" smilref="Programming_Robots_with_ROS00023.smil#span_007280">, which will do forward kinematics on the</span>
                  <code xml:space="preserve" id="code_001859" smilref="Programming_Robots_with_ROS00023.smil#code_001859">joint_states</code>
                  <span class="text" id="span_007281" smilref="Programming_Robots_with_ROS00023.smil#span_007281">messages and robot model to produce</span>
                  <code xml:space="preserve" id="code_001860" smilref="Programming_Robots_with_ROS00023.smil#code_001860">tf</code>
                  <span class="text" id="span_007282" smilref="Programming_Robots_with_ROS00023.smil#span_007282">messages. Here is the XML code to launch the</span>
                  <code xml:space="preserve" id="code_001861" smilref="Programming_Robots_with_ROS00023.smil#code_001861">robot_state_publisher</code>
                  <span class="text" id="span_007283" smilref="Programming_Robots_with_ROS00023.smil#span_007283">:</span>
                </p>
                <p id="p_001308">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001862" smilref="Programming_Robots_with_ROS00023.smil#code_001862">  &lt;node name="robot_state_publisher" pkg="robot_state_publisher"
        type="robot_state_publisher"/&gt;</code>
                </p>
                <p id="p_001309">
                  <span class="text" id="span_007284" smilref="Programming_Robots_with_ROS00023.smil#span_007284">Add that code to your</span>
                  <em id="em_000446" smilref="Programming_Robots_with_ROS00023.smil#em_000446">cougarbot.launch</em>
                  <span class="text" id="span_007285" smilref="Programming_Robots_with_ROS00023.smil#span_007285">and relaunch it. Now we're ready to visualize the state of the robot, so also launch</span>
                  <code xml:space="preserve" id="code_001863" smilref="Programming_Robots_with_ROS00023.smil#code_001863">rviz</code>
                  <span class="text" id="span_007286" smilref="Programming_Robots_with_ROS00023.smil#span_007286">. In</span>
                  <code xml:space="preserve" id="code_001864" smilref="Programming_Robots_with_ROS00023.smil#code_001864">rviz</code>
                  <span class="text" id="span_007287" smilref="Programming_Robots_with_ROS00023.smil#span_007287">, choose</span>
                  <code xml:space="preserve" id="code_001865" smilref="Programming_Robots_with_ROS00023.smil#code_001865">base_link</code>
                  <span class="text" id="span_007288" smilref="Programming_Robots_with_ROS00023.smil#span_007288">as your "fixed frame", and be sure to add the</span>
                  <code xml:space="preserve" id="code_001866" smilref="Programming_Robots_with_ROS00023.smil#code_001866">RobotModel</code>
                  <span class="text" id="span_007289" smilref="Programming_Robots_with_ROS00023.smil#span_007289">and</span>
                  <code xml:space="preserve" id="code_001867" smilref="Programming_Robots_with_ROS00023.smil#code_001867">TF</code>
                  <span class="text" id="span_007290" smilref="Programming_Robots_with_ROS00023.smil#span_007290">displays. You should see the robot, with its</span>
                  <code xml:space="preserve" id="code_001868" smilref="Programming_Robots_with_ROS00023.smil#code_001868">TF</code>
                  <span class="text" id="span_007291" smilref="Programming_Robots_with_ROS00023.smil#span_007291">frames visualized, similar to</span>
                  <a data-type="xref" href="#ch18-cougarbot_rviz_1" external="false" id="a_000354" smilref="Programming_Robots_with_ROS00023.smil#a_000354">Figure 18-7</a>
                  <span class="text" id="span_007292" smilref="Programming_Robots_with_ROS00023.smil#span_007292">.</span>
                </p>
                <figure id="figure_000106">
                  <h1 id="h1_000431" smilref="Programming_Robots_with_ROS00023.smil#h1_000431">Figure 18-7. Simulated CougarBot arm, visualized live in rviz</h1>
                  <div id="ch18-cougarbot_rviz_1" class="figure">
                    <img src="images/prwr_1807.jpg" alt="Simulated CougarBot arm, visualized live in rviz" id="img_000296" />
                  </div>
                </figure>
                <p id="p_001310">
                  <span class="text" id="span_007293" smilref="Programming_Robots_with_ROS00023.smil#span_007293">To check that everything is working, let's also plot the</span>
                  <code xml:space="preserve" id="code_001869" smilref="Programming_Robots_with_ROS00023.smil#code_001869">joint_states</code>
                  <span class="text" id="span_007294" smilref="Programming_Robots_with_ROS00023.smil#span_007294">data using</span>
                  <code xml:space="preserve" id="code_001870" smilref="Programming_Robots_with_ROS00023.smil#code_001870">rqt_plot</code>
                  <span class="text" id="span_007295" smilref="Programming_Robots_with_ROS00023.smil#span_007295">(see also</span>
                  <a data-type="xref" href="#ch21-debugging_data_plotting" external="false" id="a_000355" smilref="Programming_Robots_with_ROS00023.smil#a_000355">"Plotting Data: rqt_plot"</a>
                  <span class="text" id="span_007296" smilref="Programming_Robots_with_ROS00023.smil#span_007296">):</span>
                </p>
                <p id="p_001311">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001871"><span class="text" id="span_007297" smilref="Programming_Robots_with_ROS00023.smil#span_007297">
user@hostname$ </span><strong id="strong_000192" smilref="Programming_Robots_with_ROS00023.smil#strong_000192">rqt_plot '/joint_states/position[0]' '/joint_states/position[1]' \
  '/joint_states/position[2]' '/joint_states/position[3]'</strong>
</code>
                </p>
                <p id="p_001312" smilref="Programming_Robots_with_ROS00023.smil#p_001312">You should see a live combined plot of the four joint positions, all near zero. Now let's send that simple trajectory again:</p>
                <p id="p_001313">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001872"><span class="text" id="span_007298" smilref="Programming_Robots_with_ROS00023.smil#span_007298">
user@hostname$ </span><strong id="strong_000193" smilref="Programming_Robots_with_ROS00023.smil#strong_000193">rostopic pub /arm_controller/command \
  trajectory_msgs/JointTrajectory \
  '{joint_names: ["hip", "shoulder", "elbow", "wrist"], points: \
  [{positions: [0.1, -0.5, 0.5, 0.75], time_from_start: [1.0, 0.0]}]} -1' </strong>
</code>
                </p>
                <p class="pagebreak-before" id="p_001314">
                  <span class="text" id="span_007299" smilref="Programming_Robots_with_ROS00023.smil#span_007299">You should see the robot model move to the new configuration in</span>
                  <code xml:space="preserve" id="code_001873" smilref="Programming_Robots_with_ROS00023.smil#code_001873">rviz</code>
                  <span class="text" id="span_007300" smilref="Programming_Robots_with_ROS00023.smil#span_007300">, similar to</span>
                  <a data-type="xref" href="#ch18-cougarbot_rviz_2" external="false" id="a_000356" smilref="Programming_Robots_with_ROS00023.smil#a_000356">Figure 18-8</a>
                  <span class="text" id="span_007301" smilref="Programming_Robots_with_ROS00023.smil#span_007301">.</span>
                </p>
                <p id="p_001315">
                  <span class="text" id="span_007302" smilref="Programming_Robots_with_ROS00023.smil#span_007302">And, if you were paying attention to the</span>
                  <code xml:space="preserve" id="code_001874" smilref="Programming_Robots_with_ROS00023.smil#code_001874">rqt_plot</code>
                  <span class="text" id="span_007303" smilref="Programming_Robots_with_ROS00023.smil#span_007303">window, you should have seen the joint angles diverge from zero to their new respective goals, similar to</span>
                  <a data-type="xref" href="#ch18-cougarbot_rqt_plot_1" external="false" id="a_000357" smilref="Programming_Robots_with_ROS00023.smil#a_000357">Figure 18-9</a>
                  <span class="text" id="span_007304" smilref="Programming_Robots_with_ROS00023.smil#span_007304">.</span>
                </p>
                <figure id="figure_000107">
                  <h1 id="h1_000432" smilref="Programming_Robots_with_ROS00023.smil#h1_000432">Figure 18-8. Simulated CougarBot arm, visualized live in rviz</h1>
                  <div id="ch18-cougarbot_rviz_2" class="figure">
                    <img src="images/prwr_1808.jpg" alt="Simulated CougarBot arm, visualized live in rviz" id="img_000297" />
                  </div>
                </figure>
                <p id="ch18-idp42532736" data-type="indexterm" data-startref="ix_18-rossify_robots3-asciidoc6b">
                  <span class="text" id="span_007305" smilref="Programming_Robots_with_ROS00023.smil#span_007305">Now that we have our CougarBot supporting the</span>
                  <code xml:space="preserve" id="code_001875" smilref="Programming_Robots_with_ROS00023.smil#code_001875">follow_joint_trajectory</code>
                  <span class="text" id="span_007306" smilref="Programming_Robots_with_ROS00023.smil#span_007306">/</span>
                  <code xml:space="preserve" id="code_001876" smilref="Programming_Robots_with_ROS00023.smil#code_001876">joint_states</code>
                  <span class="text" id="span_007307" smilref="Programming_Robots_with_ROS00023.smil#span_007307">interface, we can put MoveIt on top to do path planning.</span>
                </p>
                <figure id="figure_000108">
                  <h1 id="h1_000433" smilref="Programming_Robots_with_ROS00023.smil#h1_000433">Figure 18-9. Plot of CougarBot joint angles during trajectory execution</h1>
                  <div id="ch18-cougarbot_rqt_plot_1" class="figure">
                    <img src="images/prwr_1809.jpg" alt="Plot of CougarBot joint angles during trajectory execution" id="img_000298" />
                  </div>
                </figure>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Configuring MoveIt" id="section_000182">
              <h1 id="h1_000434" smilref="Programming_Robots_with_ROS00023.smil#h1_000434">Configuring MoveIt</h1>
              <div class="sect1" id="ch18-idp42462160">
                <p id="ch18-ix_18-rossify_robots3-asciidoc7" data-type="indexterm" data-primary="CougarBot" data-secondary="configuring MoveIt for">
                  <span class="text" id="span_007308" smilref="Programming_Robots_with_ROS00023.smil#span_007308">MoveIt is a library of tools for motion planning and control. Though similar in spirit to the navigation stack, which we configured for the TortoiseBot in</span>
                  <a data-type="xref" href="#ch17-rossify_robots2_nav_stack" external="false" id="a_000358" smilref="Programming_Robots_with_ROS00023.smil#a_000358">"Configuring the Navigation Stack"</a>
                  <span class="text" id="span_007309" smilref="Programming_Robots_with_ROS00023.smil#span_007309">, MoveIt is a more complex system, with extensive opportunities for configuration. To help with configuration, MoveIt provides a graphical tool called the Setup Assistant. Let's start to configure MoveIt for CougarBot by launching the Setup Assistant:</span>
                </p>
                <p id="p_001316">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001877"><span class="text" id="span_007310" smilref="Programming_Robots_with_ROS00023.smil#span_007310">
user@hostname$ </span><strong id="strong_000194" smilref="Programming_Robots_with_ROS00023.smil#strong_000194">roslaunch moveit_setup_assistant setup_assistant.launch</strong>
</code>
                </p>
                <p id="p_001317">
                  <span class="text" id="span_007311" smilref="Programming_Robots_with_ROS00023.smil#span_007311">You should see an introductory screen similar to</span>
                  <a data-type="xref" href="#ch18-cougarbot_moveit_1" external="false" id="a_000359" smilref="Programming_Robots_with_ROS00023.smil#a_000359">Figure 18-10</a>
                  <span class="text" id="span_007312" smilref="Programming_Robots_with_ROS00023.smil#span_007312">.</span>
                </p>
                <p id="p_001318">
                  <span class="text" id="span_007313" smilref="Programming_Robots_with_ROS00023.smil#span_007313">Click "Create New MoveIt Configuration Package," then browse to your</span>
                  <em id="em_000447" smilref="Programming_Robots_with_ROS00023.smil#em_000447">cougarbot.urdf</em>
                  <span class="text" id="span_007314" smilref="Programming_Robots_with_ROS00023.smil#span_007314">file, and click "Load Files." You should see a model of your robot appear on the right side of the Setup Assistant window, similar to</span>
                  <a data-type="xref" href="#ch18-cougarbot_moveit_2" external="false" id="a_000360" smilref="Programming_Robots_with_ROS00023.smil#a_000360">Figure 18-11</a>
                  <span class="text" id="span_007315" smilref="Programming_Robots_with_ROS00023.smil#span_007315">.</span>
                </p>
                <figure id="figure_000109">
                  <h1 id="h1_000435" smilref="Programming_Robots_with_ROS00023.smil#h1_000435">Figure 18-10. The MoveIt Setup Assistant</h1>
                  <div id="ch18-cougarbot_moveit_1" class="figure">
                    <img src="images/prwr_1810.jpg" alt="The MoveIt Setup Assistant" id="img_000299" />
                  </div>
                </figure>
                <figure id="figure_000110">
                  <h1 id="h1_000436" smilref="Programming_Robots_with_ROS00023.smil#h1_000436">Figure 18-11. The CougarBot model loaded into the MoveIt Setup Assistant</h1>
                  <div id="ch18-cougarbot_moveit_2" class="figure">
                    <img src="images/prwr_1811.jpg" alt="The CougarBot model loaded into the MoveIt Setup Assistant" id="img_000300" />
                  </div>
                </figure>
                <p id="p_001319" smilref="Programming_Robots_with_ROS00023.smil#p_001319">Now we're going to work our way through the sections on the lefthand side of the Setup Assistant window, clicking on each one:</p>
                <dl id="dl_000026">
                  <dt id="dt_000113" smilref="Programming_Robots_with_ROS00023.smil#dt_000113">Self-Collisions</dt>
                  <dd id="dd_000113">
                    <p id="p_001320" smilref="Programming_Robots_with_ROS00023.smil#p_001320">In this section, click the "Regenerate Default Collision Matrix" button. MoveIt will examine the robot model and also randomly sample many possible configurations to help decide when collision checks should and should not be performed. Collision checking is very expensive, so it's important to be able to avoid it when possible.</p>
                  </dd>
                  <dt id="dt_000114" smilref="Programming_Robots_with_ROS00023.smil#dt_000114">Virtual Joints</dt>
                  <dd id="dd_000114">
                    <p id="p_001321" smilref="Programming_Robots_with_ROS00023.smil#p_001321">Nothing to do here.</p>
                  </dd>
                  <dt id="dt_000115" smilref="Programming_Robots_with_ROS00023.smil#dt_000115">Planning Groups</dt>
                  <dd id="dd_000115">
                    <p id="p_001322">
                      <span class="text" id="span_007316" smilref="Programming_Robots_with_ROS00023.smil#span_007316">We need to create one planning group, which will cover the entire arm. Click "Add Group." For "Group Name," fill in "arm" (really, any name will do). For "Kinematic Solver," select "kdl_kinematics_plugin/KDLKinematicsPlugin." This plugin provides a generic inverse kinematics solver, which isn't the most efficient way to do things, but it will work fine for our purposes. Click "Add Joints," then select and add all five joints, and click "Save." You should see a result similar to</span>
                      <a data-type="xref" href="#ch18-cougarbot_moveit_3" external="false" id="a_000361" smilref="Programming_Robots_with_ROS00023.smil#a_000361">Figure 18-12</a>
                      <span class="text" id="span_007317" smilref="Programming_Robots_with_ROS00023.smil#span_007317">.</span>
                    </p>
                  </dd>
                </dl>
                <figure id="figure_000111">
                  <h1 id="h1_000437" smilref="Programming_Robots_with_ROS00023.smil#h1_000437">Figure 18-12. The Planning Groups configuration step in the MoveIt Setup Assistant</h1>
                  <div id="ch18-cougarbot_moveit_3" class="figure">
                    <img src="images/prwr_1812.jpg" alt="The Planning Groups configuration step in the MoveIt Setup Assistant" id="img_000301" />
                  </div>
                </figure>
                <dl class="pagebreak-before" id="dl_000027">
                  <dt id="dt_000116" smilref="Programming_Robots_with_ROS00023.smil#dt_000116">Robot Poses</dt>
                  <dd id="dd_000116">
                    <p id="p_001323" smilref="Programming_Robots_with_ROS00023.smil#p_001323">Nothing to do here.</p>
                  </dd>
                  <dt id="dt_000117" smilref="Programming_Robots_with_ROS00023.smil#dt_000117">End Effectors</dt>
                  <dd id="dd_000117">
                    <p id="p_001324" smilref="Programming_Robots_with_ROS00023.smil#p_001324">We need to tell MoveIt which link of the robot we'll be planning for; let's use the hand link. In "End Effector Name," fill in "hand" (again, any name will do). In "Parent Link," select "hand," then click "Save."</p>
                  </dd>
                  <dt id="dt_000118" smilref="Programming_Robots_with_ROS00023.smil#dt_000118">Passive Joints</dt>
                  <dd id="dd_000118">
                    <p id="p_001325" smilref="Programming_Robots_with_ROS00023.smil#p_001325">Nothing to do here.</p>
                  </dd>
                  <dt id="dt_000119" smilref="Programming_Robots_with_ROS00023.smil#dt_000119">Configuration Files</dt>
                  <dd id="dd_000119">
                    <p id="p_001326">
                      <span class="text" id="span_007318" smilref="Programming_Robots_with_ROS00023.smil#span_007318">We need to tell MoveIt where to create a new ROS package that contains the new configuration files. In "Configuration Package Save Path," provide a path to a new directory called</span>
                      <em id="em_000448" smilref="Programming_Robots_with_ROS00023.smil#em_000448">cougarbot_moveit_config</em>
                      <span class="text" id="span_007319" smilref="Programming_Robots_with_ROS00023.smil#span_007319">that is a sibling to your existing</span>
                      <em id="em_000449" smilref="Programming_Robots_with_ROS00023.smil#em_000449">cougarbot</em>
                      <span class="text" id="span_007320" smilref="Programming_Robots_with_ROS00023.smil#span_007320">directory, then click "Generate Package."</span>
                    </p>
                  </dd>
                </dl>
                <p id="p_001327">
                  <span class="text" id="span_007321" smilref="Programming_Robots_with_ROS00023.smil#span_007321">That's it for the Setup Assistant; quit it by clicking "Exit Setup Assistant." Now we have a new package, called</span>
                  <code xml:space="preserve" id="code_001878" smilref="Programming_Robots_with_ROS00023.smil#code_001878">cougarbot_moveit_config</code>
                  <span class="text" id="span_007322" smilref="Programming_Robots_with_ROS00023.smil#span_007322">, which contains various launch and YAML files. Trying out all the launch files is outside the scope of this book; consult the</span>
                  <a href="http://moveit.ros.org/" external="true" id="a_000362" smilref="Programming_Robots_with_ROS00023.smil#a_000362">MoveIt documentation</a>
                  <span class="text" id="span_007323" smilref="Programming_Robots_with_ROS00023.smil#span_007323">for a complete introduction to the generated files.</span>
                </p>
                <p id="p_001328">
                  <span class="text" id="span_007324" smilref="Programming_Robots_with_ROS00023.smil#span_007324">We'll focus our attention on what's required to get MoveIt controlling the CougarBot. The last thing we need to tell MoveIt is how our arm controller is configured. In</span>
                  <em id="em_000450" smilref="Programming_Robots_with_ROS00023.smil#em_000450">cougarbot_moveit_config</em>
                  <span class="text" id="span_007325" smilref="Programming_Robots_with_ROS00023.smil#span_007325">, create a new file,</span>
                  <em id="em_000451" smilref="Programming_Robots_with_ROS00023.smil#em_000451">config/controller.yaml</em>
                  <span class="text" id="span_007326" smilref="Programming_Robots_with_ROS00023.smil#span_007326">, and insert the YAML code shown in</span>
                  <a data-type="xref" href="#ch18-cougarbot_controllers_yaml_2" external="false" id="a_000363" smilref="Programming_Robots_with_ROS00023.smil#a_000363">Example 18-17</a>
                  <span class="text" id="span_007327" smilref="Programming_Robots_with_ROS00023.smil#span_007327">.</span>
                </p>
                <h1 id="h1_000438" smilref="Programming_Robots_with_ROS00023.smil#h1_000438">Example 18-17. YAML code to configure MoveIt to use the CougarBot arm controller</h1>
                <div id="ch18-cougarbot_controllers_yaml_2" data-type="example">
                  <p id="p_001329">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001879" smilref="Programming_Robots_with_ROS00023.smil#code_001879">controller_manager_ns: /
controller_list:
  - name: arm_controller
    action_ns: follow_joint_trajectory
    type: FollowJointTrajectory
    joints:
      - hip
      - shoulder
      - elbow
      - wrist</code>
                  </p>
                </div>
                <p id="p_001330">
                  <span class="text" id="span_007328" smilref="Programming_Robots_with_ROS00023.smil#span_007328">In this file, we're telling MoveIt where to find the</span>
                  <code xml:space="preserve" id="code_001880" smilref="Programming_Robots_with_ROS00023.smil#code_001880">follow_joint_trajectory</code>
                  <span class="text" id="span_007329" smilref="Programming_Robots_with_ROS00023.smil#span_007329">action server that's being provided by the</span>
                  <code xml:space="preserve" id="code_001881" smilref="Programming_Robots_with_ROS00023.smil#code_001881">ros_control</code>
                  <span class="text" id="span_007330" smilref="Programming_Robots_with_ROS00023.smil#span_007330">plugin, as well as which joints should be controlled. There's one more file to edit: in</span>
                  <em id="em_000452" smilref="Programming_Robots_with_ROS00023.smil#em_000452">cougarbot_moveit_config</em>
                  <span class="text" id="span_007331" smilref="Programming_Robots_with_ROS00023.smil#span_007331">, open</span>
                  <em id="em_000453" smilref="Programming_Robots_with_ROS00023.smil#em_000453">launch/cougarbot_moveit_controller_manager.launch.xml</em>
                  <span class="text" id="span_007332" smilref="Programming_Robots_with_ROS00023.smil#span_007332">, which was autogenerated empty by the Setup Assistant, and insert the XML code shown in</span>
                  <a data-type="xref" href="#ch18-cougarbot_controller_launch" external="false" id="a_000364" smilref="Programming_Robots_with_ROS00023.smil#a_000364">Example 18-18</a>
                  <span class="text" id="span_007333" smilref="Programming_Robots_with_ROS00023.smil#span_007333">.</span>
                </p>
                <h1 id="h1_000439" smilref="Programming_Robots_with_ROS00023.smil#h1_000439">Example 18-18. Extra XML code to load MoveIt's controller configuration</h1>
                <div id="ch18-cougarbot_controller_launch" data-type="example">
                  <p id="p_001331">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001882" smilref="Programming_Robots_with_ROS00023.smil#code_001882">&lt;launch&gt;
  &lt;param name="moveit_controller_manager"
         value="moveit_simple_controller_manager/MoveItSimpleControllerManager"/&gt;
  &lt;param name="controller_manager_name" value="/" /&gt;
  &lt;param name="use_controller_manager" value="true" /&gt;
  &lt;rosparam file="$(find cougarbot_moveit_config)/config/controllers.yaml"/&gt;
&lt;/launch&gt;</code>
                  </p>
                </div>
                <p id="ch18-idp42580320" data-type="indexterm" data-startref="ix_18-rossify_robots3-asciidoc7">
                  <span class="text" id="span_007334" smilref="Programming_Robots_with_ROS00023.smil#span_007334">This file sets several parameters, including loading the contents of the</span>
                  <em id="em_000454" smilref="Programming_Robots_with_ROS00023.smil#em_000454">controllers.yaml</em>
                  <span class="text" id="span_007335" smilref="Programming_Robots_with_ROS00023.smil#span_007335">file that we just created.</span>
                </p>
                <p id="p_001332" smilref="Programming_Robots_with_ROS00023.smil#p_001332">That's it; MoveIt is configured! Now, how do we actually use it?</p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Using rviz to Send Goals" id="section_000183">
              <h1 id="h1_000440" smilref="Programming_Robots_with_ROS00023.smil#h1_000440">Using rviz to Send Goals</h1>
              <div class="sect1" id="ch18-idp42535568">
                <p id="ch18-ix_18-rossify_robots3-asciidoc9" data-type="indexterm" data-primary="CougarBot" data-secondary="rviz for sending goals to" smilref="Programming_Robots_with_ROS00023.smil#ch18-ix_18-rossify_robots3-asciidoc9">Launch the CougarBot simulation as usual:</p>
                <p id="p_001333">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001883"><span class="text" id="span_007336" smilref="Programming_Robots_with_ROS00023.smil#span_007336">
user@hostname$ </span><strong id="strong_000195" smilref="Programming_Robots_with_ROS00023.smil#strong_000195">roslaunch cougarbot cougarbot.launch</strong>
</code>
                </p>
                <p id="p_001334" smilref="Programming_Robots_with_ROS00023.smil#p_001334">Also launch MoveIt, using the configuration that we just created:</p>
                <p id="p_001335">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001884"><span class="text" id="span_007337" smilref="Programming_Robots_with_ROS00023.smil#span_007337">
user@hostname$ </span><strong id="strong_000196" smilref="Programming_Robots_with_ROS00023.smil#strong_000196">roslaunch cougarbot_moveit_config move_group.launch</strong>
</code>
                </p>
                <p id="p_001336">
                  <span class="text" id="span_007338" smilref="Programming_Robots_with_ROS00023.smil#span_007338">Now the simulated robot is running, with MoveIt ready to accept goal poses and do path planning. We just need to bring up</span>
                  <code xml:space="preserve" id="code_001885" smilref="Programming_Robots_with_ROS00023.smil#code_001885">rviz</code>
                  <span class="text" id="span_007339" smilref="Programming_Robots_with_ROS00023.smil#span_007339">in a? with a? suitable configuration to send those goals. Fortunately, MoveIt provided us with such a configuration. Launch</span>
                  <code xml:space="preserve" id="code_001886" smilref="Programming_Robots_with_ROS00023.smil#code_001886">rviz</code>
                  <span class="text" id="span_007340" smilref="Programming_Robots_with_ROS00023.smil#span_007340">like so:</span>
                </p>
                <p id="p_001337">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001887"><span class="text" id="span_007341" smilref="Programming_Robots_with_ROS00023.smil#span_007341">
user@hostname$ </span><strong id="strong_000197" smilref="Programming_Robots_with_ROS00023.smil#strong_000197">roslaunch cougarbot_moveit_config moveit_rviz.launch config:=True</strong>
</code>
                </p>
                <p id="p_001338">
                  <span class="text" id="span_007342" smilref="Programming_Robots_with_ROS00023.smil#span_007342">Note that you could combine these three steps into one by writing a new launch file, called</span>
                  <em id="em_000455" smilref="Programming_Robots_with_ROS00023.smil#em_000455">all.launch</em>
                  <span class="text" id="span_007343" smilref="Programming_Robots_with_ROS00023.smil#span_007343">, as shown in</span>
                  <a data-type="xref" href="#ch18-cougarbot_launch_5" external="false" id="a_000365" smilref="Programming_Robots_with_ROS00023.smil#a_000365">Example 18-19</a>
                  <span class="text" id="span_007344" smilref="Programming_Robots_with_ROS00023.smil#span_007344">.</span>
                </p>
                <h1 id="h1_000441" smilref="Programming_Robots_with_ROS00023.smil#h1_000441">Example 18-19. One launch file to rule them all</h1>
                <div id="ch18-cougarbot_launch_5" data-type="example">
                  <p id="p_001339">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_001888" smilref="Programming_Robots_with_ROS00023.smil#code_001888">&lt;launch&gt;
  &lt;include file="$(find cougarbot)/cougarbot.launch"/&gt;
  &lt;include file="$(find cougarbot_moveit_config)/launch/move_group.launch"/&gt;
  &lt;include file="$(find cougarbot_moveit_config)/launch/moveit_rviz.launch"&gt;
    &lt;arg name="config" value="True"/&gt;
  &lt;/include&gt;
&lt;/launch&gt;</code>
                  </p>
                </div>
                <p id="p_001340">
                  <span class="text" id="span_007345" smilref="Programming_Robots_with_ROS00023.smil#span_007345">Whichever way you launch everything, you should see</span>
                  <code xml:space="preserve" id="code_001889" smilref="Programming_Robots_with_ROS00023.smil#code_001889">rviz</code>
                  <span class="text" id="span_007346" smilref="Programming_Robots_with_ROS00023.smil#span_007346">with some new features provided by the</span>
                  <code xml:space="preserve" id="code_001890" smilref="Programming_Robots_with_ROS00023.smil#code_001890">MotionPlanning</code>
                  <span class="text" id="span_007347" smilref="Programming_Robots_with_ROS00023.smil#span_007347">display, as shown in</span>
                  <a data-type="xref" href="#ch18-cougarbot_rviz_3" external="false" id="a_000366" smilref="Programming_Robots_with_ROS00023.smil#a_000366">Figure 18-13</a>
                </p>
                <figure id="figure_000112">
                  <h1 id="h1_000442" smilref="Programming_Robots_with_ROS00023.smil#h1_000442">Figure 18-13. CougarBot visualized in rviz with the MotionPlanning display</h1>
                  <div id="ch18-cougarbot_rviz_3" class="figure">
                    <img src="images/prwr_1813.jpg" alt="CougarBot visualized in rviz with the MotionPlanning plugin" id="img_000302" />
                  </div>
                </figure>
                <p id="p_001341" smilref="Programming_Robots_with_ROS00023.smil#p_001341">There is a lot that you can do with this interface. We'll just cover basic planning and execution. First, in the Motion Planning Context window, select "Allow Approximate IK Solutions." We do this because our robot's one-degree-of-freedom wrist makes it difficult to interactively specify a strictly reachable pose. For this reason, robot arms usually have a two- or three-degrees-of-freedom wrist.</p>
                <p id="p_001342">
                  <span class="text" id="span_007348" smilref="Programming_Robots_with_ROS00023.smil#span_007348">Click on Motion Planning Planning. Now we're ready to start playing with the robot. In the</span>
                  <code xml:space="preserve" id="code_001891" smilref="Programming_Robots_with_ROS00023.smil#code_001891">rviz</code>
                  <span class="text" id="span_007349" smilref="Programming_Robots_with_ROS00023.smil#span_007349">window, the multicolored marker attached to the robot's hand allows you to translate and rotate the hand in space. As you do that, the inverse kinematics (IK) solver is trying to find a configuration of the robot arm that will put the hand where you want it. The configuration that it finds will be visualized for your review, as shown in</span>
                  <a data-type="xref" href="#ch18-cougarbot_rviz_4" external="false" id="a_000367" smilref="Programming_Robots_with_ROS00023.smil#a_000367">Figure 18-14</a>
                  <span class="text" id="span_007350" smilref="Programming_Robots_with_ROS00023.smil#span_007350">.</span>
                </p>
                <figure id="figure_000113">
                  <h1 id="h1_000443" smilref="Programming_Robots_with_ROS00023.smil#h1_000443">Figure 18-14. Using rviz to define a goal configuration</h1>
                  <div id="ch18-cougarbot_rviz_4" class="figure">
                    <img src="images/prwr_1814.jpg" alt="Using rviz to define a goal configuration" id="img_000303" />
                  </div>
                </figure>
                <p id="p_001343">
                  <span class="text" id="span_007351" smilref="Programming_Robots_with_ROS00023.smil#span_007351">With the goal configuration selected, click "Plan." You should see a planned trajectory from start to goal being played back repeatedly in</span>
                  <code xml:space="preserve" id="code_001892" smilref="Programming_Robots_with_ROS00023.smil#code_001892">rviz</code>
                  <span class="text" id="span_007352" smilref="Programming_Robots_with_ROS00023.smil#span_007352">. So far, nothing is moving in Gazebo; we're just visualizing the trajectory in</span>
                  <code xml:space="preserve" id="code_001893" smilref="Programming_Robots_with_ROS00023.smil#code_001893">rviz</code>
                  <span class="text" id="span_007353" smilref="Programming_Robots_with_ROS00023.smil#span_007353">. To execute the trajectory on the robot, click "Execute." The robot should move in Gazebo, following the trajectory promised by</span>
                  <code xml:space="preserve" id="code_001894" smilref="Programming_Robots_with_ROS00023.smil#code_001894">rviz</code>
                  <span class="text" id="span_007354" smilref="Programming_Robots_with_ROS00023.smil#span_007354">.</span>
                </p>
                <p id="ch18-idp42725088" data-type="indexterm" data-startref="ix_18-rossify_robots3-asciidoc9" smilref="Programming_Robots_with_ROS00023.smil#ch18-idp42725088">Try other goal configurations by dragging the hand marker around. If you're having trouble getting to a configuration, remember to use both the rotation and translation handles on the hand marker. It might help to imagine what combination of joint rotations would be required to reach a configuration that you have in mind. You can also try random configurations: under "Select Goal State," select "&lt;random valid&gt;" then click "Update." Repeat this procedure until you find a goal configuration that you like, then click "Plan and Execute" to move the robot there.</p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Summary" id="section_000184">
              <h1 id="h1_000444" smilref="Programming_Robots_with_ROS00023.smil#h1_000444">Summary</h1>
              <div class="sect1" id="ch18-idp42592064">
                <p id="p_001344">
                  <span class="text" id="span_007355" smilref="Programming_Robots_with_ROS00023.smil#span_007355">In this chapter, we learned how to build a model of a robot arm from scratch, including all the details need to visualize and simulate it. We further attached a controller to the arm, then configured MoveIt to plan and execute trajectories on the arm based on goal poses for the robot's hand--and we were able to do all of that by specifying and configuring models in XML and YAML, without doing any procedural programming. It's a good demonstration of how Gazebo,</span>
                  <code xml:space="preserve" id="code_001895" smilref="Programming_Robots_with_ROS00023.smil#code_001895">rviz</code>
                  <span class="text" id="span_007356" smilref="Programming_Robots_with_ROS00023.smil#span_007356">, MoveIt, and other ROS tools can be combined to provide significant power to the developer of a robot system.</span>
                </p>
                <p id="ch18-idp42731200" data-type="indexterm" data-startref="ix_18-rossify_robots3-asciidoc0">
                  <span class="text" id="span_007357" smilref="Programming_Robots_with_ROS00023.smil#span_007357">Of course, our CougarBot is not ready to ship yet. For a start, we haven't added any sensors. Path planning is good, but it's far more useful when you're using it to avoid running into obstacles. MoveIt supports obstacle-aware path planning; we just need to add a sensor (probably a Kinect-like depth camera) to the CougarBot model, then extend our MoveIt configuration to subscribe to that sensor stream and use the resulting data to create an environment model in which to do path planning. Check the</span>
                  <a href="http://moveit.ros.org/" external="true" id="a_000368" smilref="Programming_Robots_with_ROS00023.smil#a_000368">MoveIt documentation</a>
                  <span class="text" id="span_007358" smilref="Programming_Robots_with_ROS00023.smil#span_007358">for tips on doing just that.</span>
                </p>
                <p id="p_001345" smilref="Programming_Robots_with_ROS00023.smil#p_001345">At this point, we have learned how to model and control new robots with ROS. In the next chapter, we'll cover a different, but equally important, kind of integration, which is adding a new software library to ROS.</p>
              </div>
            </section>
          </div>
        </section>
      </level1>
      <level1 id="ch19">
        <section xmlns:epub="http://www.idpf.org/2007/ops" data-type="chapter" epub:type="chapter" data-pdf-bookmark="Chapter 19. Adding a Software Library" id="section_000185">
          <h1 id="h1_000445" smilref="Programming_Robots_with_ROS00023.smil#h1_000445">Chapter 19. Adding a Software Library</h1>
          <div class="chapter" id="ch19-software_libraries">
            <p id="ch19-ix_19-libraries-asciidoc0" data-type="indexterm" data-primary="libraries" data-secondary="adding to robot" smilref="Programming_Robots_with_ROS00023.smil#ch19-ix_19-libraries-asciidoc0">A common step in building a robotics application is adding an existing software library that provides an important capability. Depending on your application, you might want to give your robot the ability to recognize certain objects, or detect people, or (as we'll do in this chapter) speak. There are many good libraries (many of them open source!) out in the world implementing such algorithms that you could use on your robot. Whenever possible, we recommend that you try the existing libraries, especially the ones with strong reputations for reliability and support. While it's always tempting to build your own, and while in some cases you may eventually end up doing so, you'll get going more quickly--and learn more about what exactly you need--by starting with an existing system that does most of what you want.</p>
            <p id="p_001346">
              <span class="text" id="span_007359" smilref="Programming_Robots_with_ROS00023.smil#span_007359">Many libraries that are relevant to robotics have already been integrated with ROS, such as</span>
              <a href="http://wiki.ros.org/vision_opencv?distro=indigo" external="true" id="a_000369" smilref="Programming_Robots_with_ROS00023.smil#a_000369">OpenCV</a>
              <span class="text" id="span_007360" smilref="Programming_Robots_with_ROS00023.smil#span_007360">,</span>
              <a href="http://wiki.ros.org/pcl?distro=indigo" external="true" id="a_000370" smilref="Programming_Robots_with_ROS00023.smil#a_000370">PCL</a>
              <span class="text" id="span_007361" smilref="Programming_Robots_with_ROS00023.smil#span_007361">, and</span>
              <a href="http://wiki.ros.org/moveit?distro=indigo" external="true" id="a_000371" smilref="Programming_Robots_with_ROS00023.smil#a_000371">MoveIt</a>
              <span class="text" id="span_007362" smilref="Programming_Robots_with_ROS00023.smil#span_007362">. These libraries, and the code that makes them easy to use in a ROS-based robot, form a vital part of the overall ROS ecosystem. Much of the value in using ROS is having ready access to the right tools for the job, especially libraries of useful algorithms. Still, you'll probably find some library that you need but that hasn't yet been integrated.</span>
            </p>
            <p id="p_001347" smilref="Programming_Robots_with_ROS00023.smil#p_001347">In this chapter, we'll discuss how to integrate an existing software library (whether it's one that you wrote or a third-party package) with ROS. Between the content of this chapter and the examples provided by the many ROS-connected libraries already available, you'll be ready to tackle the next integration project on your own.</p>
            <section data-type="sect1" class="pagebreak-before" data-pdf-bookmark="Make Your Robot Talk: pyttsx" id="section_000186">
              <h1 id="h1_000446" smilref="Programming_Robots_with_ROS00023.smil#h1_000446">Make Your Robot Talk: pyttsx</h1>
              <div class="sect1" id="ch19-idp42741440">
                <p id="ch19-ix_19-libraries-asciidoc2" data-type="indexterm" data-primary="pyttsx (speech library)">
                  <span class="text" id="span_007363" smilref="Programming_Robots_with_ROS00023.smil#span_007363">From Robbie the Robot to C3PO, we have come to expect our robots to talk with us. While (at the time of writing) there are still some fundamental challenges to overcome on the path to creating truly conversational machines, giving your robot the ability to speak is easy, fun, and can even be a handy debugging tool. Consider all those times when the robot is just sitting there, refusing to move, and you're wondering why. While ROS offers great software tools for helping you to understand what's going on (</span>
                  <a data-type="xref" href="#ch21-chapter_debugging" external="false" id="a_000372" smilref="Programming_Robots_with_ROS00023.smil#a_000372">Chapter 21</a>
                  <span class="text" id="span_007364" smilref="Programming_Robots_with_ROS00023.smil#span_007364">), to use those tools you need to be looking a screen, not the robot. What if the robot could talk to you, telling you what state it's in, what it's waiting for, or something else?</span>
                </p>
                <p id="p_001348">
                  <span class="text" id="span_007365" smilref="Programming_Robots_with_ROS00023.smil#span_007365">Fortunately, following decades of research in speech synthesis, there are now multiple text-to-speech (TTS) software packages that you can use off the shelf, as black boxes. In this section, we'll work with the Python</span>
                  <code xml:space="preserve" id="code_001896" smilref="Programming_Robots_with_ROS00023.smil#code_001896">pyttsx</code>
                  <span class="text" id="span_007366" smilref="Programming_Robots_with_ROS00023.smil#span_007366">module, which provides a unified way to interact with TTS systems that are commonly available on various operating systems.</span>
                </p>
                <h1 id="h1_000447" smilref="Programming_Robots_with_ROS00023.smil#h1_000447">Note</h1>
                <div data-type="note" epub:type="note" id="div_000040">
                  <p id="p_001349">
                    <span class="text" id="span_007367" smilref="Programming_Robots_with_ROS00023.smil#span_007367">Our goal in this section is to explain the process of integrating with a library like</span>
                    <code xml:space="preserve" id="code_001897" smilref="Programming_Robots_with_ROS00023.smil#code_001897">pyttsx</code>
                    <span class="text" id="span_007368" smilref="Programming_Robots_with_ROS00023.smil#span_007368">. If you want a ready-to-use ROS node with speech synthesis capabilities, try the</span>
                    <a href="http://wiki.ros.org/sound_play?distro=indigo" external="true" id="a_000373">
                      <code xml:space="preserve" id="code_001898" smilref="Programming_Robots_with_ROS00023.smil#code_001898">sound_play</code>
                      <span class="text" id="span_007369" smilref="Programming_Robots_with_ROS00023.smil#span_007369">package</span>
                    </a>
                    <span class="text" id="span_007370" smilref="Programming_Robots_with_ROS00023.smil#span_007370">.</span>
                  </p>
                </div>
                <p id="p_001350">
                  <span class="text" id="span_007371" smilref="Programming_Robots_with_ROS00023.smil#span_007371">First, let's make sure that we have</span>
                  <code xml:space="preserve" id="code_001899" smilref="Programming_Robots_with_ROS00023.smil#code_001899">pyttsx</code>
                  <span class="text" id="span_007372" smilref="Programming_Robots_with_ROS00023.smil#span_007372">installed. On most systems,</span>
                  <code xml:space="preserve" id="code_001900" smilref="Programming_Robots_with_ROS00023.smil#code_001900">sudo pip install pyttsx</code>
                  <span class="text" id="span_007373" smilref="Programming_Robots_with_ROS00023.smil#span_007373">will do the job; for special cases, consult the</span>
                  <a href="http://pyttsx.readthedocs.org" external="true" id="a_000374">
                    <code xml:space="preserve" id="code_001901" smilref="Programming_Robots_with_ROS00023.smil#code_001901">pyttsx</code>
                    <span class="text" id="span_007374" smilref="Programming_Robots_with_ROS00023.smil#span_007374">documentation</span>
                  </a>
                  <span class="text" id="span_007375" smilref="Programming_Robots_with_ROS00023.smil#span_007375">. To make sure that it's working properly, let's try one of their example programs:</span>
                </p>
                <p id="p_001351">
                  <code id="ch19-pyttsx_example" class="preserve-whitespace" xml:space="preserve" smilref="Programming_Robots_with_ROS00023.smil#ch19-pyttsx_example">#!/usr/bin/env python

import pyttsx
engine = pyttsx.init()
engine.say('Sally sells seashells by the seashore.')
engine.say('The quick brown fox jumped over the lazy dog.')
engine.runAndWait()</code>
                </p>
                <p id="p_001352" smilref="Programming_Robots_with_ROS00023.smil#p_001352">Save that code to a file and run it:</p>
                <p id="p_001353">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001902"><span class="text" id="span_007376" smilref="Programming_Robots_with_ROS00023.smil#span_007376">
user@hostname$ </span><strong id="strong_000198" smilref="Programming_Robots_with_ROS00023.smil#strong_000198">python pyttsx_example.py</strong>
</code>
                </p>
                <p id="p_001354">
                  <span class="text" id="span_007377" smilref="Programming_Robots_with_ROS00023.smil#span_007377">You should hear the two sentences spoken through your computer's audio system. If you have trouble at this step, check your speaker/headphone connections and volume settings; after that, consult the</span>
                  <code xml:space="preserve" id="code_001903" smilref="Programming_Robots_with_ROS00023.smil#code_001903">pyttsx</code>
                  <span class="text" id="span_007378" smilref="Programming_Robots_with_ROS00023.smil#span_007378">documentation.</span>
                </p>
                <p id="p_001355" smilref="Programming_Robots_with_ROS00023.smil#p_001355">Now we have a working executable program that will speak a couple of sentences; how should we wrap it up into a general-purpose ROS node? We need to decide a few things:</p>
                <list type="ul" id="list_000024">
                  <li id="li_000082">
                    <p id="p_001356" smilref="Programming_Robots_with_ROS00023.smil#p_001356">What type of topic/service/action interface will the node provide?</p>
                  </li>
                  <li id="li_000083">
                    <p id="p_001357" smilref="Programming_Robots_with_ROS00023.smil#p_001357">What parameters should be exposed?</p>
                  </li>
                  <li id="li_000084">
                    <p id="p_001358">
                      <span class="text" id="span_007379" smilref="Programming_Robots_with_ROS00023.smil#span_007379">How will we integrate the ROS event loop with the</span>
                      <code xml:space="preserve" id="code_001904" smilref="Programming_Robots_with_ROS00023.smil#code_001904">pyttsx</code>
                      <span class="text" id="span_007380" smilref="Programming_Robots_with_ROS00023.smil#span_007380">event loop?</span>
                    </p>
                  </li>
                </list>
                <p id="p_001359" smilref="Programming_Robots_with_ROS00023.smil#p_001359">We start by defining the action interface that we'll use to interact with our node.</p>
                <section data-type="sect2" data-pdf-bookmark="Action Interface" id="section_000187">
                  <h1 id="h1_000448" smilref="Programming_Robots_with_ROS00023.smil#h1_000448">Action Interface</h1>
                  <div class="sect2" id="ch19-idp42660816">
                    <p id="ch19-idp42662256" data-type="indexterm" data-primary="action interface, pyttsx" data-secondary="for TTS software">
                      <span class="text" id="span_007381" smilref="Programming_Robots_with_ROS00023.smil#span_007381">Because the act of converting text to speech takes time--possibly many seconds for long sentences--it's a good candidate for an action server (see</span>
                      <a data-type="xref" href="#ch05-actions" external="false" id="a_000375" smilref="Programming_Robots_with_ROS00023.smil#a_000375">Chapter 5</a>
                      <span class="text" id="span_007382" smilref="Programming_Robots_with_ROS00023.smil#span_007382">). That way, we can send goals (what we want to say), get notification when they've been said, and even cancel a sentence that is in progress.</span>
                    </p>
                    <p id="p_001360">
                      <span class="text" id="span_007383" smilref="Programming_Robots_with_ROS00023.smil#span_007383">Let's decide on the message type that will be received as a goal by our</span>
                      <code xml:space="preserve" id="code_001905" smilref="Programming_Robots_with_ROS00023.smil#code_001905">pyttsx</code>
                      <span class="text" id="span_007384" smilref="Programming_Robots_with_ROS00023.smil#span_007384">node. As always, we should first consider using an existing message, especially if it's already being used by a similar node. In this case, the most similar example is the</span>
                      <code xml:space="preserve" id="code_001906" smilref="Programming_Robots_with_ROS00023.smil#code_001906">sound_play/soundplay_node.py</code>
                      <span class="text" id="span_007385" smilref="Programming_Robots_with_ROS00023.smil#span_007385">node, which subscribes to messages of type</span>
                      <a href="http://docs.ros.org/api/sound_play/html/msg/SoundRequest.html" external="true" id="a_000376">
                        <code xml:space="preserve" id="code_001907" smilref="Programming_Robots_with_ROS00023.smil#code_001907">sound_play/SoundRequest</code>
                      </a>
                      <span class="text" id="span_007386" smilref="Programming_Robots_with_ROS00023.smil#span_007386">. But that message has a surprisingly large number of fields and flags. The complexity of the message comes from the fact that the</span>
                      <code xml:space="preserve" id="code_001908" smilref="Programming_Robots_with_ROS00023.smil#code_001908">sound_play/soundplay_node.py</code>
                      <span class="text" id="span_007387" smilref="Programming_Robots_with_ROS00023.smil#span_007387">node does more than just text-to-speech (and that it's somewhat specific to the PR2 robot). We could use that message type, but it's overkill for our application.</span>
                    </p>
                    <p id="p_001361">
                      <span class="text" id="span_007388" smilref="Programming_Robots_with_ROS00023.smil#span_007388">So, we'll design our own goal message type. We know that we need it to contain a</span>
                      <code xml:space="preserve" id="code_001909" smilref="Programming_Robots_with_ROS00023.smil#code_001909">string</code>
                      <span class="text" id="span_007389" smilref="Programming_Robots_with_ROS00023.smil#span_007389">field that will be the sentence to be spoken. Let's start with that, then add more fields later as needed. Similarly, we can leave the feedback and result empty, because this node won't have that much status to report.</span>
                      <a data-type="xref" href="#ch19-talk_action" external="false" id="a_000377" smilref="Programming_Robots_with_ROS00023.smil#a_000377">Example 19-1</a>
                      <span class="text" id="span_007390" smilref="Programming_Robots_with_ROS00023.smil#span_007390">shows the action definition, also available in the</span>
                      <em id="em_000456" smilref="Programming_Robots_with_ROS00023.smil#em_000456">action</em>
                      <span class="text" id="span_007391" smilref="Programming_Robots_with_ROS00023.smil#span_007391">directory of the</span>
                      <code xml:space="preserve" id="code_001910" smilref="Programming_Robots_with_ROS00023.smil#code_001910">basics</code>
                      <span class="text" id="span_007392" smilref="Programming_Robots_with_ROS00023.smil#span_007392">package (refer back to</span>
                      <a data-type="xref" href="#ch05-actions" external="false" id="a_000378" smilref="Programming_Robots_with_ROS00023.smil#a_000378">Chapter 5</a>
                      <span class="text" id="span_007393" smilref="Programming_Robots_with_ROS00023.smil#span_007393">for help with</span>
                      <em id="em_000457" smilref="Programming_Robots_with_ROS00023.smil#em_000457">.action</em>
                      <span class="text" id="span_007394" smilref="Programming_Robots_with_ROS00023.smil#span_007394">file syntax).</span>
                    </p>
                    <h1 id="h1_000449" smilref="Programming_Robots_with_ROS00023.smil#h1_000449">Example 19-1. Talk.action</h1>
                    <div id="ch19-talk_action" data-type="example" class="pagebreak-before">
                      <p id="p_001362">
                        <code class="preserve-whitespace" xml:space="preserve" id="code_001911" smilref="Programming_Robots_with_ROS00023.smil#code_001911"># The sentence to be spoken
string sentence
---
# No result content needed
---
# No feedback content needed</code>
                      </p>
                    </div>
                    <p id="p_001363" smilref="Programming_Robots_with_ROS00023.smil#p_001363">With the action interface settled, we need to decide what kinds of configuration we should offer.</p>
                  </div>
                </section>
                <section data-type="sect2" data-pdf-bookmark="Parameters" id="section_000188">
                  <h1 id="h1_000450" smilref="Programming_Robots_with_ROS00023.smil#h1_000450">Parameters</h1>
                  <div class="sect2" id="ch19-idp42676384">
                    <p id="ch19-idp42677824" data-type="indexterm" data-primary="pyttsx (speech library)" data-secondary="parameters">
                      <span class="text" id="span_007395" smilref="Programming_Robots_with_ROS00023.smil#span_007395">Consulting the</span>
                      <a href="http://pyttsx.readthedocs.org" external="true" id="a_000379">
                        <code xml:space="preserve" id="code_001912" smilref="Programming_Robots_with_ROS00023.smil#code_001912">pyttsx</code>
                        <span class="text" id="span_007396" smilref="Programming_Robots_with_ROS00023.smil#span_007396">documentation</span>
                      </a>
                      <span class="text" id="span_007397" smilref="Programming_Robots_with_ROS00023.smil#span_007397">, we see that we can change various settings, such as the volume and rate of speech, and the voice that is used. Those settings are all good candidates for parameters, which the user can set when launching the node (see</span>
                      <a data-type="xref" href="#ch08-teleop_bot_params" external="false" id="a_000380" smilref="Programming_Robots_with_ROS00023.smil#a_000380">"Parameter Server"</a>
                      <span class="text" id="span_007398" smilref="Programming_Robots_with_ROS00023.smil#span_007398">).</span>
                    </p>
                    <p id="p_001364">
                      <span class="text" id="span_007399" smilref="Programming_Robots_with_ROS00023.smil#span_007399">Let's start by exposing the volume and rate of speech, because we can reasonably expect that a user might want to modify them. That's what parameters are for: the knobs that you expect users will want to be able to adjust easily and/or frequently, without modifying any code. For each parameter, we need to decide its data type and its default value (i.e., what we will do if the user doesn't set a value). In our case, the easiest thing is to just mirror how the</span>
                      <code xml:space="preserve" id="code_001913" smilref="Programming_Robots_with_ROS00023.smil#code_001913">volume</code>
                      <span class="text" id="span_007400" smilref="Programming_Robots_with_ROS00023.smil#span_007400">and</span>
                      <code xml:space="preserve" id="code_001914" smilref="Programming_Robots_with_ROS00023.smil#code_001914">rate</code>
                      <span class="text" id="span_007401" smilref="Programming_Robots_with_ROS00023.smil#span_007401">parameters are used in the underlying</span>
                      <code xml:space="preserve" id="code_001915" smilref="Programming_Robots_with_ROS00023.smil#code_001915">pyttsx</code>
                      <span class="text" id="span_007402" smilref="Programming_Robots_with_ROS00023.smil#span_007402">library:</span>
                    </p>
                    <dl id="dl_000028">
                      <dt id="dt_000120">
                        <code xml:space="preserve" id="code_001916" smilref="Programming_Robots_with_ROS00023.smil#code_001916">volume</code>
                        <span class="text" id="span_007403" smilref="Programming_Robots_with_ROS00023.smil#span_007403">(</span>
                        <code xml:space="preserve" id="code_001917" smilref="Programming_Robots_with_ROS00023.smil#code_001917">float32</code>
                        <span class="text" id="span_007404" smilref="Programming_Robots_with_ROS00023.smil#span_007404">)</span>
                      </dt>
                      <dd id="dd_000120">
                        <p id="p_001365" smilref="Programming_Robots_with_ROS00023.smil#p_001365">Floating point volume in the range of 0.0 to 1.0 inclusive. Defaults to 1.0.</p>
                      </dd>
                      <dt id="dt_000121">
                        <code xml:space="preserve" id="code_001918" smilref="Programming_Robots_with_ROS00023.smil#code_001918">rate</code>
                        <span class="text" id="span_007405" smilref="Programming_Robots_with_ROS00023.smil#span_007405">(</span>
                        <code xml:space="preserve" id="code_001919" smilref="Programming_Robots_with_ROS00023.smil#code_001919">int32</code>
                        <span class="text" id="span_007406" smilref="Programming_Robots_with_ROS00023.smil#span_007406">)</span>
                      </dt>
                      <dd id="dd_000121">
                        <p id="p_001366" smilref="Programming_Robots_with_ROS00023.smil#p_001366">Integer speech rate in words per minute. Defaults to 200 words per minute.</p>
                      </dd>
                    </dl>
                    <p id="p_001367" smilref="Programming_Robots_with_ROS00023.smil#p_001367">We should also add a parameter to control whether the node will preempt a sentence that is currently being spoken when a new sentence is received. Interrupting the speaker might not be the nicest thing from a user interaction point of view, but it's a good capability to have, and we want the developer to have control over that behavior. Our new parameter is:</p>
                    <dl id="dl_000029">
                      <dt id="dt_000122">
                        <code xml:space="preserve" id="code_001920" smilref="Programming_Robots_with_ROS00023.smil#code_001920">preempt</code>
                        <span class="text" id="span_007407" smilref="Programming_Robots_with_ROS00023.smil#span_007407">(</span>
                        <code xml:space="preserve" id="code_001921" smilref="Programming_Robots_with_ROS00023.smil#code_001921">bool</code>
                        <span class="text" id="span_007408" smilref="Programming_Robots_with_ROS00023.smil#span_007408">)</span>
                      </dt>
                      <dd id="dd_000122">
                        <p id="p_001368" smilref="Programming_Robots_with_ROS00023.smil#p_001368">Whether to preempt in-progress speech in response to a new goal. Defaults to false.</p>
                      </dd>
                    </dl>
                    <p id="p_001369">
                      <span class="text" id="span_007409" smilref="Programming_Robots_with_ROS00023.smil#span_007409">Now we know what the external interface to our node will look like, both for control (action server) and configuration (parameters). Next we will determine how to design the internal structure of the node to bridge between the</span>
                      <code xml:space="preserve" id="code_001922" smilref="Programming_Robots_with_ROS00023.smil#code_001922">pyttsx</code>
                      <span class="text" id="span_007410" smilref="Programming_Robots_with_ROS00023.smil#span_007410">library and the</span>
                      <code xml:space="preserve" id="code_001923" smilref="Programming_Robots_with_ROS00023.smil#code_001923">rospy</code>
                      <span class="text" id="span_007411" smilref="Programming_Robots_with_ROS00023.smil#span_007411">library.</span>
                    </p>
                  </div>
                </section>
                <section data-type="sect2" data-pdf-bookmark="Event Loops" id="section_000189">
                  <h1 id="h1_000451" smilref="Programming_Robots_with_ROS00023.smil#h1_000451">Event Loops</h1>
                  <div class="sect2" id="ch19-idp42783968">
                    <p data-type="indexterm" data-primary="event loops, pyttsx" id="ch19-idp42785280" data-secondary="event loops">
                      <span class="text" id="span_007412" smilref="Programming_Robots_with_ROS00023.smil#span_007412">A common issue when integrating an existing software library into a ROS node is how to manage event loops. Often, the library will have its own way to manage execution and may even want you to give up control of your</span>
                      <code xml:space="preserve" id="code_001924" smilref="Programming_Robots_with_ROS00023.smil#code_001924">main()</code>
                      <span class="text" id="span_007413" smilref="Programming_Robots_with_ROS00023.smil#span_007413">function. Every situation will be a little different, but it's often the case that you'll need to separate the library's event loop into its own thread. That's usually easy enough, but it's also important to ensure that the event loop can be properly and safely stopped at the right time.</span>
                    </p>
                    <p id="p_001370">
                      <span class="text" id="span_007414" smilref="Programming_Robots_with_ROS00023.smil#span_007414">For the</span>
                      <code xml:space="preserve" id="code_001925" smilref="Programming_Robots_with_ROS00023.smil#code_001925">pyttsx</code>
                      <span class="text" id="span_007415" smilref="Programming_Robots_with_ROS00023.smil#span_007415">node, we'll create a separate thread for its event loop, and we'll structure that thread in such a way that we can reliably shut it down. Here's the code for that thread:</span>
                    </p>
                    <p id="p_001371">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_001926" smilref="Programming_Robots_with_ROS00023.smil#code_001926">    def loop(self):
        self.engine.startLoop(False)
        while not rospy.is_shutdown():
            self.engine.iterate()
            time.sleep(0.1)
        self.engine.endLoop()</code>
                    </p>
                    <p id="p_001372">
                      <span class="text" id="span_007416" smilref="Programming_Robots_with_ROS00023.smil#span_007416">In this thread, we check whether it's time to shut down in between repeated calls to the library's</span>
                      <code xml:space="preserve" id="code_001927" smilref="Programming_Robots_with_ROS00023.smil#code_001927">iterate()</code>
                      <span class="text" id="span_007417" smilref="Programming_Robots_with_ROS00023.smil#span_007417">function, which causes the event loop to turn over once, processing the next event. We could instead call the library's</span>
                      <code xml:space="preserve" id="code_001928" smilref="Programming_Robots_with_ROS00023.smil#code_001928">startLoop()</code>
                      <span class="text" id="span_007418" smilref="Programming_Robots_with_ROS00023.smil#span_007418">function with the argument</span>
                      <code xml:space="preserve" id="code_001929" smilref="Programming_Robots_with_ROS00023.smil#code_001929">True</code>
                      <span class="text" id="span_007419" smilref="Programming_Robots_with_ROS00023.smil#span_007419">, which enters an internal processing loop, but then we would need to have the right machinery in another thread to call</span>
                      <code xml:space="preserve" id="code_001930" smilref="Programming_Robots_with_ROS00023.smil#code_001930">endLoop()</code>
                      <span class="text" id="span_007420" smilref="Programming_Robots_with_ROS00023.smil#span_007420">at the right time.</span>
                    </p>
                    <p id="p_001373">
                      <span class="text" id="span_007421" smilref="Programming_Robots_with_ROS00023.smil#span_007421">While the details of this interaction are specific to the</span>
                      <code xml:space="preserve" id="code_001931" smilref="Programming_Robots_with_ROS00023.smil#code_001931">pyttsx</code>
                      <span class="text" id="span_007422" smilref="Programming_Robots_with_ROS00023.smil#span_007422">library, the underlying characteristics are shared by many libraries. For example, it's common to see both the "endless loop" call (</span>
                      <code xml:space="preserve" id="code_001932" smilref="Programming_Robots_with_ROS00023.smil#code_001932">startLoop(True)</code>
                      <span class="text" id="span_007423" smilref="Programming_Robots_with_ROS00023.smil#span_007423">in the case of</span>
                      <code xml:space="preserve" id="code_001933" smilref="Programming_Robots_with_ROS00023.smil#code_001933">pyttsx</code>
                      <span class="text" id="span_007424" smilref="Programming_Robots_with_ROS00023.smil#span_007424">, or</span>
                      <code xml:space="preserve" id="code_001934" smilref="Programming_Robots_with_ROS00023.smil#code_001934">ros::spin()</code>
                      <span class="text" id="span_007425" smilref="Programming_Robots_with_ROS00023.smil#span_007425">in the case of</span>
                      <code xml:space="preserve" id="code_001935" smilref="Programming_Robots_with_ROS00023.smil#code_001935">roscpp</code>
                      <span class="text" id="span_007426" smilref="Programming_Robots_with_ROS00023.smil#span_007426">) and the "do one loop" call (</span>
                      <code xml:space="preserve" id="code_001936" smilref="Programming_Robots_with_ROS00023.smil#code_001936">iterate()</code>
                      <span class="text" id="span_007427" smilref="Programming_Robots_with_ROS00023.smil#span_007427">in the case of</span>
                      <code xml:space="preserve" id="code_001937" smilref="Programming_Robots_with_ROS00023.smil#code_001937">pyttsx</code>
                      <span class="text" id="span_007428" smilref="Programming_Robots_with_ROS00023.smil#span_007428">, or</span>
                      <code xml:space="preserve" id="code_001938" smilref="Programming_Robots_with_ROS00023.smil#code_001938">ros::spinOnce()</code>
                      <span class="text" id="span_007429" smilref="Programming_Robots_with_ROS00023.smil#span_007429">in the case of</span>
                      <code xml:space="preserve" id="code_001939" smilref="Programming_Robots_with_ROS00023.smil#code_001939">roscpp</code>
                      <span class="text" id="span_007430" smilref="Programming_Robots_with_ROS00023.smil#span_007430">). The right way to use the library's event mechanisms will depend on how they work and your requirements.</span>
                    </p>
                    <p id="p_001374">
                      <span class="text" id="span_007431" smilref="Programming_Robots_with_ROS00023.smil#span_007431">Having decided on the action interface, parameters, and event loop structure, we're ready to write our</span>
                      <code xml:space="preserve" id="code_001940" smilref="Programming_Robots_with_ROS00023.smil#code_001940">pyttsx</code>
                      <span class="text" id="span_007432" smilref="Programming_Robots_with_ROS00023.smil#span_007432">action server node.</span>
                    </p>
                  </div>
                </section>
                <section data-type="sect2" data-pdf-bookmark="The Speech Server" id="section_000190">
                  <h1 id="h1_000452" smilref="Programming_Robots_with_ROS00023.smil#h1_000452">The Speech Server</h1>
                  <div class="sect2" id="ch19-idp42870208">
                    <p id="ch19-ix_19-libraries-asciidoc3" data-type="indexterm" data-primary="pyttsx (speech library)" data-secondary="speech server">
                      <a data-type="xref" href="#ch19-pyttsx_server" external="false" id="a_000381" smilref="Programming_Robots_with_ROS00023.smil#a_000381">Example 19-2</a>
                      <span class="text" id="span_007433" smilref="Programming_Robots_with_ROS00023.smil#span_007433">shows the code for a full speech synthesis node. Don't worry if it looks intimidating; we're going to step through each part of the program.</span>
                    </p>
                    <h1 id="h1_000453" smilref="Programming_Robots_with_ROS00023.smil#h1_000453">Example 19-2. pyttsx_server.py</h1>
                    <div id="ch19-pyttsx_server" data-type="example">
                      <p id="p_001375">
                        <code class="preserve-whitespace" xml:space="preserve" id="code_001941" smilref="Programming_Robots_with_ROS00023.smil#code_001941">#! /usr/bin/env python
import rospy
import threading, time, pyttsx
import actionlib
from basics.msg import TalkAction, TalkGoal, TalkResult

class TalkNode():

    def __init__(self, node_name, action_name):
        rospy.init_node(node_name)
        self.server = actionlib.SimpleActionServer(action_name, TalkAction,
          self.do_talk, False)
        self.engine = pyttsx.init()
        self.engine_thread = threading.Thread(target=self.loop)
        self.engine_thread.start()
        self.engine.setProperty('volume', rospy.get_param('~volume', 1.0))
        self.engine.setProperty('rate', rospy.get_param('~rate', 200.0))
        self.preempt = rospy.get_param('~preempt', False)
        self.server.start()

    def loop(self):
        self.engine.startLoop(False)
        while not rospy.is_shutdown():
            self.engine.iterate()
            time.sleep(0.1)
        self.engine.endLoop()

    def do_talk(self, goal):
        self.engine.say(goal.sentence)
        while self.engine.isBusy():
            if self.preempt and self.server.is_preempt_requested():
                self.engine.stop()
                while self.engine.isBusy():
                    time.sleep(0.1)
                self.server.set_preempted(TalkResult(), "Talk preempted")
                return
            time.sleep(0.1)
        self.server.set_succeeded(TalkResult(), "Talk completed successfully")

talker = TalkNode('speaker', 'speak')
rospy.spin()</code>
                      </p>
                    </div>
                    <p id="p_001376">
                      <span class="text" id="span_007434" smilref="Programming_Robots_with_ROS00023.smil#span_007434">Let's look at the code piece by piece. First we do some standard imports, including the</span>
                      <code xml:space="preserve" id="code_001942" smilref="Programming_Robots_with_ROS00023.smil#code_001942">Talk</code>
                      <span class="text" id="span_007435" smilref="Programming_Robots_with_ROS00023.smil#span_007435">action message types that we'll need and the</span>
                      <code xml:space="preserve" id="code_001943" smilref="Programming_Robots_with_ROS00023.smil#code_001943">pyttsx</code>
                      <span class="text" id="span_007436" smilref="Programming_Robots_with_ROS00023.smil#span_007436">module. We also import the standard</span>
                      <code xml:space="preserve" id="code_001944" smilref="Programming_Robots_with_ROS00023.smil#code_001944">threading</code>
                      <span class="text" id="span_007437" smilref="Programming_Robots_with_ROS00023.smil#span_007437">module, which we'll need to manage the event loop thread:</span>
                    </p>
                    <p id="p_001377">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_001945" smilref="Programming_Robots_with_ROS00023.smil#code_001945">import rospy
import threading, time, pyttsx
import actionlib
from basics.msg import TalkAction, TalkGoal, TalkResult</code>
                    </p>
                    <p id="p_001378">
                      <span class="text" id="span_007438" smilref="Programming_Robots_with_ROS00023.smil#span_007438">Next we create a class,</span>
                      <code xml:space="preserve" id="code_001946" smilref="Programming_Robots_with_ROS00023.smil#code_001946">TalkNode</code>
                      <span class="text" id="span_007439" smilref="Programming_Robots_with_ROS00023.smil#span_007439">, which will make it easier (or at least cleaner) to store some state about the node, including the speech engine. In the constructor, we initialize the node, create the action server, initialize the speech engine, then create and start the thread that will run the event loop:</span>
                    </p>
                    <p id="p_001379">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_001947" smilref="Programming_Robots_with_ROS00023.smil#code_001947">class TalkNode():

    def __init__(self, node_name, action_name):
        rospy.init_node(node_name)
        self.server = actionlib.SimpleActionServer(action_name, TalkAction,
          self.do_talk, False)
        self.engine = pyttsx.init()
        self.engine_thread = threading.Thread(target=self.loop)
        self.engine_thread.start()</code>
                    </p>
                    <p id="p_001380">
                      <span class="text" id="span_007440" smilref="Programming_Robots_with_ROS00023.smil#span_007440">Now it's time to handle parameters, then start the action server. The</span>
                      <code xml:space="preserve" id="code_001948" smilref="Programming_Robots_with_ROS00023.smil#code_001948">volume</code>
                      <span class="text" id="span_007441" smilref="Programming_Robots_with_ROS00023.smil#span_007441">and</span>
                      <code xml:space="preserve" id="code_001949" smilref="Programming_Robots_with_ROS00023.smil#code_001949">rate</code>
                      <span class="text" id="span_007442" smilref="Programming_Robots_with_ROS00023.smil#span_007442">parameters get passed directly to the library; we'll keep the</span>
                      <code xml:space="preserve" id="code_001950" smilref="Programming_Robots_with_ROS00023.smil#code_001950">preempt</code>
                      <span class="text" id="span_007443" smilref="Programming_Robots_with_ROS00023.smil#span_007443">parameter for ourselves:</span>
                    </p>
                    <p id="p_001381">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_001951" smilref="Programming_Robots_with_ROS00023.smil#code_001951">        self.engine.setProperty('volume', rospy.get_param('~volume', 1.0))
        self.engine.setProperty('rate', rospy.get_param('~rate', 200.0))
        self.preempt = rospy.get_param('~preempt', False)
        self.server.start()</code>
                    </p>
                    <h1 id="h1_000454" smilref="Programming_Robots_with_ROS00023.smil#h1_000454">Tip</h1>
                    <div data-type="tip" id="div_000041">
                      <p data-type="indexterm" data-primary="  (tilde)" id="ch19-idp43221552">
                        <span class="text" id="span_007444" smilref="Programming_Robots_with_ROS00023.smil#span_007444">A leading tilde character in a parameter name, such as</span>
                        <code xml:space="preserve" id="code_001952" smilref="Programming_Robots_with_ROS00023.smil#code_001952">~volume</code>
                        <span class="text" id="span_007445" smilref="Programming_Robots_with_ROS00024.smil#span_007445">, indicates that the parameter is</span>
                        <em id="ch19-idp43222416" smilref="Programming_Robots_with_ROS00024.smil#ch19-idp43222416">private</em>
                        <span class="text" id="span_007446" smilref="Programming_Robots_with_ROS00024.smil#span_007446">to the node, which means that it will be stored in and retrieved from the node's namespace, as opposed to its parent namespace (which is the default). It is good practice to keep parameters local to the node using them whenever possible. If our node is named</span>
                        <code xml:space="preserve" id="code_001953" smilref="Programming_Robots_with_ROS00024.smil#code_001953">speaker</code>
                        <span class="text" id="span_007447" smilref="Programming_Robots_with_ROS00024.smil#span_007447">, then the volume parameter will be stored in the parameter server as</span>
                        <code xml:space="preserve" id="code_001954" smilref="Programming_Robots_with_ROS00024.smil#code_001954">/speaker/volume</code>
                        <span class="text" id="span_007448" smilref="Programming_Robots_with_ROS00024.smil#span_007448">(unless the node is itself pushed down into a namespace, in which case the parameter name would be further qualified).</span>
                      </p>
                    </div>
                    <p id="p_001382">
                      <span class="text" id="span_007449" smilref="Programming_Robots_with_ROS00024.smil#span_007449">We already went over the code for the</span>
                      <code xml:space="preserve" id="code_001955" smilref="Programming_Robots_with_ROS00024.smil#code_001955">loop()</code>
                      <span class="text" id="span_007450" smilref="Programming_Robots_with_ROS00024.smil#span_007450">function that runs in a separate thread. Let's look at the code for the goal callback,</span>
                      <code xml:space="preserve" id="code_001956" smilref="Programming_Robots_with_ROS00024.smil#code_001956">do_talk()</code>
                      <span class="text" id="span_007451" smilref="Programming_Robots_with_ROS00024.smil#span_007451">. On receipt of a new goal, which is a sentence, we pass the sentence to the speech engine:</span>
                    </p>
                    <p id="p_001383">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_001957" smilref="Programming_Robots_with_ROS00024.smil#code_001957">    def do_talk(self, goal):
        self.engine.say(goal.sentence)</code>
                    </p>
                    <p id="p_001384">
                      <span class="text" id="span_007452" smilref="Programming_Robots_with_ROS00024.smil#span_007452">Having asked the speech engine to say the sentence, we need to monitor it for completion. Also, if</span>
                      <code xml:space="preserve" id="code_001958" smilref="Programming_Robots_with_ROS00024.smil#code_001958">preempt</code>
                      <span class="text" id="span_007453" smilref="Programming_Robots_with_ROS00024.smil#span_007453">was set, we need to check for a preemption request. If the current goal is to be preempted, then we call</span>
                      <code xml:space="preserve" id="code_001959" smilref="Programming_Robots_with_ROS00024.smil#code_001959">stop()</code>
                      <span class="text" id="span_007454" smilref="Programming_Robots_with_ROS00024.smil#span_007454">on the engine, followed by a second loop to wait for confirmation that it's stopped, and finally a report back to clients that the preemption was accomplished. Otherwise, when the speech engine has finished saying the sentence, we report that success:</span>
                    </p>
                    <p id="p_001385">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_001960" smilref="Programming_Robots_with_ROS00024.smil#code_001960">        while self.engine.isBusy():
            if self.preempt and self.server.is_preempt_requested():
                self.engine.stop()
                while self.engine.isBusy():
                    time.sleep(0.1)
                self.server.set_preempted(TalkResult(), "Talk preempted")
                return
            time.sleep(0.1)
        self.server.set_succeeded(TalkResult(), "Talk completed successfully")</code>
                    </p>
                    <p id="ch19-idp43294720" data-type="indexterm" data-startref="ix_19-libraries-asciidoc3">
                      <span class="text" id="span_007455" smilref="Programming_Robots_with_ROS00024.smil#span_007455">Now that we have an action</span>
                      <em id="em_000458" smilref="Programming_Robots_with_ROS00024.smil#em_000458">server</em>
                      <span class="text" id="span_007456" smilref="Programming_Robots_with_ROS00024.smil#span_007456">that will accept commands to make the robot talk, we need to write an action</span>
                      <em id="em_000459" smilref="Programming_Robots_with_ROS00024.smil#em_000459">client</em>
                      <span class="text" id="span_007457" smilref="Programming_Robots_with_ROS00024.smil#span_007457">that will exercise it.</span>
                    </p>
                  </div>
                </section>
                <section data-type="sect2" data-pdf-bookmark="The Speech Client" id="section_000191">
                  <h1 id="h1_000455" smilref="Programming_Robots_with_ROS00024.smil#h1_000455">The Speech Client</h1>
                  <div class="sect2" id="ch19-idp42870864">
                    <p id="ch19-idp43296496" data-type="indexterm" data-primary="pyttsx (speech library)" data-secondary="speech client">
                      <span class="text" id="span_007458" smilref="Programming_Robots_with_ROS00024.smil#span_007458">A ROS node that activates the speech server is straightforward to write.</span>
                      <a data-type="xref" href="#ch19-pyttsx_client" external="false" id="a_000382" smilref="Programming_Robots_with_ROS00024.smil#a_000382">Example 19-3</a>
                      <span class="text" id="span_007459" smilref="Programming_Robots_with_ROS00024.smil#span_007459">shows the code for a simple client program that tells the server to say "hello world" a few times.</span>
                    </p>
                    <h1 id="h1_000456" smilref="Programming_Robots_with_ROS00024.smil#h1_000456">Example 19-3. pyttsx_client.py</h1>
                    <div id="ch19-pyttsx_client" data-type="example">
                      <p id="p_001386">
                        <code class="preserve-whitespace" xml:space="preserve" id="code_001961" smilref="Programming_Robots_with_ROS00024.smil#code_001961">#! /usr/bin/env python
import rospy

import actionlib
from basics.msg import TalkAction, TalkGoal, TalkResult

rospy.init_node('speaker_client')
client = actionlib.SimpleActionClient('speak', TalkAction)
client.wait_for_server()
goal = TalkGoal()
goal.sentence = "hello world, hello world, hello world, hello world"
client.send_goal(goal)
client.wait_for_result()
print('[Result] State: %d'%(client.get_state()))
print('[Result] Status: %s'%(client.get_goal_status_text()))</code>
                      </p>
                    </div>
                    <p id="p_001387" smilref="Programming_Robots_with_ROS00024.smil#p_001387">In this program, following the usual initialization, we create an action client of the appropriate type, send a sentence as a goal, then wait for completion. That's the beauty of using an action server: we've wrapped up the non trivial behavior of synthesizing speech in an interface where we can just send it a string of words, then wait to be told that it's done executing. We've written the code; now it's time to test it.</p>
                  </div>
                </section>
                <section data-type="sect2" data-pdf-bookmark="Checking That Everything Works as Expected" id="section_000192">
                  <h1 id="h1_000457" smilref="Programming_Robots_with_ROS00024.smil#h1_000457">Checking That Everything Works as Expected</h1>
                  <div class="sect2" id="ch19-idp43615232">
                    <p data-type="indexterm" data-primary="pyttsx (speech library)" data-secondary="checking" id="ch19-idp43691568">
                      <span class="text" id="span_007460" smilref="Programming_Robots_with_ROS00024.smil#span_007460">Let's verify that our speech server and client work as intended. Open a new terminal, and start up</span>
                      <code xml:space="preserve" id="code_001962" smilref="Programming_Robots_with_ROS00024.smil#code_001962">roscore</code>
                      <span class="text" id="span_007461" smilref="Programming_Robots_with_ROS00024.smil#span_007461">. In another terminal, start the server:</span>
                    </p>
                    <p id="p_001388">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_001963"><span class="text" id="span_007462" smilref="Programming_Robots_with_ROS00024.smil#span_007462">
user@hostname$ </span><strong id="strong_000199" smilref="Programming_Robots_with_ROS00024.smil#strong_000199">rosrun basics pyttsx_server.py</strong>
</code>
                    </p>
                    <p id="p_001389" smilref="Programming_Robots_with_ROS00024.smil#p_001389">In a third terminal, start the client:</p>
                    <p id="p_001390">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_001964"><span class="text" id="span_007463" smilref="Programming_Robots_with_ROS00024.smil#span_007463">
user@hostname$ </span><strong id="strong_000200" smilref="Programming_Robots_with_ROS00024.smil#strong_000200">rosrun basics pyttsx_client.py</strong>
</code>
                    </p>
                    <p id="p_001391" smilref="Programming_Robots_with_ROS00024.smil#p_001391">You should hear the words "hello world" repeated a few times. Let's try out those parameters. Stop the server, then run it again with a lower volume setting:</p>
                    <p id="p_001392">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_001965"><span class="text" id="span_007464" smilref="Programming_Robots_with_ROS00024.smil#span_007464">
user@hostname$ </span><strong id="strong_000201" smilref="Programming_Robots_with_ROS00024.smil#strong_000201">rosrun basics pyttsx_server.py _volume:=0.5</strong>
</code>
                    </p>
                    <p id="ch19-idp43699760" data-type="indexterm" data-startref="ix_19-libraries-asciidoc2">
                      <span class="text" id="span_007465" smilref="Programming_Robots_with_ROS00024.smil#span_007465">Now run the client again, and you should hear the same words, but quieter. You can adjust the</span>
                      <code xml:space="preserve" id="code_001966" smilref="Programming_Robots_with_ROS00024.smil#code_001966">rate</code>
                      <span class="text" id="span_007466" smilref="Programming_Robots_with_ROS00024.smil#span_007466">of speech in the same way. You can also experiment with the effect of the</span>
                      <code xml:space="preserve" id="code_001967" smilref="Programming_Robots_with_ROS00024.smil#code_001967">preempt</code>
                      <span class="text" id="span_007467" smilref="Programming_Robots_with_ROS00024.smil#span_007467">parameter: try running the server with</span>
                      <code xml:space="preserve" id="code_001968" smilref="Programming_Robots_with_ROS00024.smil#code_001968">_preempt:=true</code>
                      <span class="text" id="span_007468" smilref="Programming_Robots_with_ROS00024.smil#span_007468">, then run two instances of the client, each in a separate terminal. You should hear the speech begin on behalf of the first client, then be interrupted and start again on behalf of the second client (the effect will be more noticeable if you modify the second client to send a different string).</span>
                    </p>
                  </div>
                </section>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Summary" id="section_000193">
              <h1 id="h1_000458" smilref="Programming_Robots_with_ROS00024.smil#h1_000458">Summary</h1>
              <div class="sect1" id="ch19-idp42742064">
                <p id="p_001393" smilref="Programming_Robots_with_ROS00024.smil#p_001393">In this chapter, we discussed how to integrate an existing software library into a ROS system, which is often called for when building a robotics application. We worked with the relatively simple example of a text-to-speech system that has just one kind of input (the text to be spoken), but the basic elements apply equally well to other libraries: decide on the appropriate data types, and develop an interface (in this case an action interface); decide on the parameters that will be accepted; and decide how to integrate the library's event loop with your own.</p>
                <p id="ch19-idp43704000" data-type="indexterm" data-startref="ix_19-libraries-asciidoc0" smilref="Programming_Robots_with_ROS00024.smil#ch19-idp43704000">Even this relatively simple example resulted in a useful node that could be deployed straight away on a robot (as long as the robot has speakers). The node could, of course, be improved and extended in a number of ways, from exposing more configuration of the speech engine (e.g., which voice is being used), to delivering detailed feedback to clients (e.g., notification of each word having been said). There's almost always more that could be exposed, and the art is in deciding what to leave out.</p>
                <p id="p_001394" smilref="Programming_Robots_with_ROS00024.smil#p_001394">In the past few chapters, we've presented examples and discussed patterns for adding devices, robots, and capabilities to ROS. The ease with which the platform can be stretched and extended to cover new use cases is a key feature of ROS--but each new feature brings complexity, and writing good robot software is a challenging task to begin with. With that challenge in mind, the next few chapters will introduce some important tools and techniques that will help you to become an efficient and effective ROS developer.</p>
              </div>
            </section>
          </div>
        </section>
      </level1>
      <level1 xmlns:epub="http://www.idpf.org/2007/ops" data-type="part" epub:type="part" data-pdf-bookmark="Part V. Tips and Tricks" id="part05">
        <h1 id="h1_000459" smilref="Programming_Robots_with_ROS00024.smil#h1_000459">Part V. Tips and Tricks</h1>
        <p id="p_001395" />
      </level1>
      <level1 id="ch20">
        <section xmlns:epub="http://www.idpf.org/2007/ops" data-type="chapter" epub:type="chapter" data-pdf-bookmark="Chapter 20. Tools" id="section_000194">
          <h1 id="h1_000460" smilref="Programming_Robots_with_ROS00024.smil#h1_000460">Chapter 20. Tools</h1>
          <div class="chapter" id="ch20-chapter_tools">
            <p class="keep-together" id="ch20-ix_20-tools-asciidoc0" data-type="indexterm" data-primary="tools" smilref="Programming_Robots_with_ROS00024.smil#ch20-ix_20-tools-asciidoc0">Efficient software development requires good developer tools. Where would you be without your favorite editor, version control system, or testing framework? When developing robotics software, we of course rely on those tools, but we also add some new ones. These ROS-specific developer tools are designed to help you work with your robotics applications, including starting and stopping, introspection, and testing.</p>
            <p id="p_001396">
              <span class="text" id="span_007469" smilref="Programming_Robots_with_ROS00024.smil#span_007469">In this chapter, we'll cover commonly used ROS tools, explaining when and how to use each one. We will leave out the following tools, which are covered in the context of debugging in</span>
              <a data-type="xref" href="#ch21-chapter_debugging" external="false" id="a_000383" smilref="Programming_Robots_with_ROS00024.smil#a_000383">Chapter 21</a>
              <span class="text" id="span_007470" smilref="Programming_Robots_with_ROS00024.smil#span_007470">:</span>
              <code xml:space="preserve" id="code_001969" smilref="Programming_Robots_with_ROS00024.smil#code_001969">rosbag</code>
              <span class="text" id="span_007471" smilref="Programming_Robots_with_ROS00024.smil#span_007471">,</span>
              <code xml:space="preserve" id="code_001970" smilref="Programming_Robots_with_ROS00024.smil#code_001970">rqt_bag</code>
              <span class="text" id="span_007472" smilref="Programming_Robots_with_ROS00024.smil#span_007472">,</span>
              <code xml:space="preserve" id="code_001971" smilref="Programming_Robots_with_ROS00024.smil#code_001971">rqt_graph</code>
              <span class="text" id="span_007473" smilref="Programming_Robots_with_ROS00024.smil#span_007473">, and</span>
              <code xml:space="preserve" id="code_001972" smilref="Programming_Robots_with_ROS00024.smil#code_001972">rqt_plot</code>
              <span class="text" id="span_007474" smilref="Programming_Robots_with_ROS00024.smil#span_007474">.</span>
            </p>
            <section data-type="sect1" data-pdf-bookmark="The Master and Friends: roscore" id="section_000195">
              <h1 id="h1_000461" smilref="Programming_Robots_with_ROS00024.smil#h1_000461">The Master and Friends: roscore</h1>
              <div class="sect1" id="ch20-idp43714848">
                <p data-type="indexterm" data-primary="ROS command-line tools" data-secondary="roscore" id="ch20-idp43716288">
                  <span class="text" id="span_007475" smilref="Programming_Robots_with_ROS00024.smil#span_007475">We first encountered</span>
                  <code xml:space="preserve" id="code_001973" smilref="Programming_Robots_with_ROS00024.smil#code_001973">roscore</code>
                  <span class="text" id="span_007476" smilref="Programming_Robots_with_ROS00024.smil#span_007476">much earlier in this book (see</span>
                  <a data-type="xref" href="#ch02-preliminaries_roscore" external="false" id="a_000384" smilref="Programming_Robots_with_ROS00024.smil#a_000384">"roscore"</a>
                  <span class="text" id="span_007477" smilref="Programming_Robots_with_ROS00024.smil#span_007477">), and have used it extensively since then. But it will be helpful to understand what exactly it does. When you run</span>
                  <code xml:space="preserve" id="code_001974" smilref="Programming_Robots_with_ROS00024.smil#code_001974">roscore</code>
                  <span class="text" id="span_007478" smilref="Programming_Robots_with_ROS00024.smil#span_007478">, which is your first step in bringing up a ROS system, you're really starting three different tools:</span>
                </p>
                <list type="ul" id="list_000025">
                  <li id="li_000085">
                    <p id="p_001397">
                      <span class="text" id="span_007479" smilref="Programming_Robots_with_ROS00024.smil#span_007479">The</span>
                      <em id="em_000460" smilref="Programming_Robots_with_ROS00024.smil#em_000460">master</em>
                      <span class="text" id="span_007480" smilref="Programming_Robots_with_ROS00024.smil#span_007480">, which handles the name service.</span>
                    </p>
                  </li>
                  <li id="li_000086">
                    <p data-type="indexterm" data-primary="parameter server" data-secondary="roscore and" id="ch20-idp43722496">
                      <span class="text" id="span_007481" smilref="Programming_Robots_with_ROS00024.smil#span_007481">The</span>
                      <em id="em_000461" smilref="Programming_Robots_with_ROS00024.smil#em_000461">parameter server</em>
                      <span class="text" id="span_007482" smilref="Programming_Robots_with_ROS00024.smil#span_007482">, which holds key/value parameter data (see</span>
                      <a data-type="xref" href="#ch20-tools_rosparam" external="false" id="a_000385" smilref="Programming_Robots_with_ROS00024.smil#a_000385">"Parameters: rosparam"</a>
                      <span class="text" id="span_007483" smilref="Programming_Robots_with_ROS00024.smil#span_007483">).</span>
                    </p>
                  </li>
                  <li id="li_000087">
                    <p data-type="indexterm" data-primary="rosout node" id="ch20-idp43725584">
                      <span class="text" id="span_007484" smilref="Programming_Robots_with_ROS00024.smil#span_007484">The</span>
                      <code xml:space="preserve" id="code_001975" smilref="Programming_Robots_with_ROS00024.smil#code_001975">rosout</code>
                      <span class="text" id="span_007485" smilref="Programming_Robots_with_ROS00024.smil#span_007485">node, which aggregates debug messages from all other nodes (see</span>
                      <span class="keep-together" id="span_007486">
                        <a data-type="xref" href="#ch21-debugging_rosout_agg" external="false" id="a_000386" smilref="Programming_Robots_with_ROS00024.smil#a_000386">"/rosout Versus /rosout_agg"</a>
                      </span>
                      <span class="text" id="span_007487" smilref="Programming_Robots_with_ROS00024.smil#span_007487">).</span>
                    </p>
                  </li>
                </list>
                <p id="ch20-idp43757584" data-type="indexterm" data-primary="master (tool)" smilref="Programming_Robots_with_ROS00024.smil#ch20-idp43757584">The first thing that a ROS node does on startup is contact the master to register itself. That's why, if you try to start a node without a master, you'll get a warning, like this:</p>
                <p id="p_001398">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001976"><span class="text" id="span_007488" smilref="Programming_Robots_with_ROS00024.smil#span_007488">
user@hostname$ </span><strong id="strong_000202" smilref="Programming_Robots_with_ROS00024.smil#strong_000202">python -c "import rospy; rospy.init_node('my_node')"</strong><span class="text" id="span_007489" smilref="Programming_Robots_with_ROS00024.smil#span_007489">
Unable to register with master node [http://localhost:11311]: master may
not be running yet. Will keep trying.
</span></code>
                </p>
                <p id="p_001399">
                  <span class="text" id="span_007490" smilref="Programming_Robots_with_ROS00024.smil#span_007490">When registering with the master, each node supplies its own network address, which is where it can be contacted later by other nodes. The master maintains a table of these registrations, each one mapping the node name to its network address. For example, the node</span>
                  <code xml:space="preserve" id="code_001977" smilref="Programming_Robots_with_ROS00024.smil#code_001977">my_node</code>
                  <span class="text" id="span_007491" smilref="Programming_Robots_with_ROS00024.smil#span_007491">might be listening for new connections at the address</span>
                  <em id="em_000462" smilref="Programming_Robots_with_ROS00024.smil#em_000462">http://localhost:61515</em>
                  <span class="text" id="span_007492" smilref="Programming_Robots_with_ROS00024.smil#span_007492">. The port on which a node listens (61515 in this example) is randomly assigned by the operating system when the node starts, which is why we need the master to keep track of where each node can be found. This mapping of node name to address is used constantly behind the scenes when nodes connect with each other.</span>
                </p>
                <p data-type="indexterm" data-primary="advertising" data-secondary="with rospy.Publisher" id="ch20-idp43763008">
                  <span class="text" id="span_007493" smilref="Programming_Robots_with_ROS00024.smil#span_007493">In addition to registering itself with the master, a node registers each of its topic subscriptions and advertisements, and its services. When you advertise a topic by creating a</span>
                  <code xml:space="preserve" id="code_001978" smilref="Programming_Robots_with_ROS00024.smil#code_001978">rospy.Publisher</code>
                  <span class="text" id="span_007494" smilref="Programming_Robots_with_ROS00024.smil#span_007494">, the</span>
                  <code id="ch20-idp43764544" xml:space="preserve" smilref="Programming_Robots_with_ROS00024.smil#ch20-idp43764544">rospy</code>
                  <span class="text" id="span_007495" smilref="Programming_Robots_with_ROS00024.smil#span_007495">library registers with the master that your node is a publisher of that topic. That information is subsequently provided to each node that registers as a subscriber for the topic (by creating a</span>
                  <code xml:space="preserve" id="code_001979" smilref="Programming_Robots_with_ROS00024.smil#code_001979">rospy.Subscriber</code>
                  <span class="text" id="span_007496" smilref="Programming_Robots_with_ROS00024.smil#span_007496">). Given the publisher list for a topic, each subscribing node will contact each publishing node to negotiate a connection over which to receive messages for that topic. Thereafter, the message data is sent directly from publishers to subscribers, without involving the master. For services, a similar mechanism is used to keep track of names and addresses of servers, allowing clients to find them by name.</span>
                </p>
                <p id="p_001400" smilref="Programming_Robots_with_ROS00024.smil#p_001400">With its critical role in name lookup, the master is the one centralized aspect of an otherwise distributed ROS system. As such, it is also a potential point of failure. If you kill the master, the situation is usually unrecoverable. Already running nodes and existing topic connections will persist, but new nodes can't be started, and new connections can't be made. Because there is no easy way to reconstruct the state previously held by the master, you will likely need to restart your entire ROS system following the death of the master. If the master is only temporarily unreachable--e.g., because a robot moves out of wireless range--then the system should resume normal operation when the master becomes reachable again. Fortunately, the master is a robust, well-tested tool that is not prone to crashing.</p>
                <p data-type="indexterm" data-primary="nodes" data-secondary="stale state cleanup" id="ch20-idp43768560">
                  <span class="text" id="span_007497" smilref="Programming_Robots_with_ROS00024.smil#span_007497">It's common to keep a master running over an extended period of time, reusing it across multiple development and debugging sessions. This is fine to do, with the caveat that the master can accumulate stale state about nodes. When a node crashes, it won't deregister itself with the master and so will still show up, for example, when you run</span>
                  <code xml:space="preserve" id="code_001980" smilref="Programming_Robots_with_ROS00024.smil#code_001980">rosnode list</code>
                  <span class="text" id="span_007498" smilref="Programming_Robots_with_ROS00024.smil#span_007498">(see</span>
                  <a data-type="xref" href="#ch20-tools_introspection" external="false" id="a_000387" smilref="Programming_Robots_with_ROS00024.smil#a_000387">"Introspection: rosnode, rostopic, rosmsg, rosservice, and rossrv"</a>
                  <span class="text" id="span_007499" smilref="Programming_Robots_with_ROS00024.smil#span_007499">). Such stale state is usually not a problem, as the ROS tools and client libraries are designed to tolerate it, but it can be distracting. To purge the master of entries for nodes that are no longer reachable, run</span>
                  <code xml:space="preserve" id="code_001981" smilref="Programming_Robots_with_ROS00024.smil#code_001981">rosnode cleanup</code>
                  <span class="text" id="span_007500" smilref="Programming_Robots_with_ROS00024.smil#span_007500">.</span>
                </p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Parameters: rosparam" id="section_000196">
              <h1 id="h1_000462" smilref="Programming_Robots_with_ROS00024.smil#h1_000462">Parameters: rosparam</h1>
              <div class="sect1" id="ch20-tools_rosparam">
                <p data-type="indexterm" data-primary="parameter server" data-secondary="rosparam and" id="ch20-idp43773904">
                  <span class="text" id="span_007501" smilref="Programming_Robots_with_ROS00024.smil#span_007501">In the same process with the master (but functionally separate) is the</span>
                  <em id="em_000463" smilref="Programming_Robots_with_ROS00024.smil#em_000463">parameter server</em>
                  <span class="text" id="span_007502" smilref="Programming_Robots_with_ROS00024.smil#span_007502">. The job of the parameter server is to store configuration data in a network-accessible database. The parameter server maintains a dictionary of key/value pairs, in which the keys are strings and the values can be of (nearly) any type. Any node, including yours, can write to or read from the parameter server.</span>
                </p>
                <h1 id="h1_000463" smilref="Programming_Robots_with_ROS00024.smil#h1_000463">Tip</h1>
                <div data-type="tip" id="div_000042">
                  <p data-type="indexterm" data-primary="configuration, parameters and" id="ch20-idp43777552">
                    <span class="text" id="span_007503" smilref="Programming_Robots_with_ROS00024.smil#span_007503">Parameters are intended for</span>
                    <em id="em_000464" smilref="Programming_Robots_with_ROS00024.smil#em_000464">configuration</em>
                    <span class="text" id="span_007504" smilref="Programming_Robots_with_ROS00024.smil#span_007504">, not</span>
                    <em id="em_000465" smilref="Programming_Robots_with_ROS00024.smil#em_000465">communication</em>
                    <span class="text" id="span_007505" smilref="Programming_Robots_with_ROS00024.smil#span_007505">. If you try to use parameters to exchange high-volume or high-rate data between nodes, you will be sorely disappointed by the resulting performance. Instead, use topics for these purposes.</span>
                  </p>
                </div>
                <p id="p_001401">
                  <span class="text" id="span_007506" smilref="Programming_Robots_with_ROS00024.smil#span_007506">While parameter access is usually done from code (via</span>
                  <code xml:space="preserve" id="code_001982" smilref="Programming_Robots_with_ROS00024.smil#code_001982">rospy.get_param()</code>
                  <span class="text" id="span_007507" smilref="Programming_Robots_with_ROS00024.smil#span_007507">and</span>
                  <code xml:space="preserve" id="code_001983" smilref="Programming_Robots_with_ROS00024.smil#code_001983">rospy.set_param()</code>
                  <span class="text" id="span_007508" smilref="Programming_Robots_with_ROS00024.smil#span_007508">), it can be useful to operate on the parameter server from the command line, for which we use the</span>
                  <code xml:space="preserve" id="code_001984" smilref="Programming_Robots_with_ROS00024.smil#code_001984">rosparam</code>
                  <span class="text" id="span_007509" smilref="Programming_Robots_with_ROS00024.smil#span_007509">tool. For example, to list the current parameters:</span>
                </p>
                <p id="p_001402">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001985"><span class="text" id="span_007510" smilref="Programming_Robots_with_ROS00024.smil#span_007510">
user@hostname$ </span><strong id="strong_000203" smilref="Programming_Robots_with_ROS00024.smil#strong_000203">rosparam list</strong><span class="text" id="span_007511" smilref="Programming_Robots_with_ROS00024.smil#span_007511">
/rosdistro
/roslaunch/uris/host_localhost__50387
/rosversion
/run_id
</span></code>
                </p>
                <p id="p_001403" smilref="Programming_Robots_with_ROS00024.smil#p_001403">You can also operate on individual parameters, setting, getting, or deleting them:</p>
                <p id="p_001404">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001986"><span class="text" id="span_007512" smilref="Programming_Robots_with_ROS00024.smil#span_007512">
user@hostname$ </span><strong id="strong_000204" smilref="Programming_Robots_with_ROS00024.smil#strong_000204">rosparam set my_param 4.2</strong><span class="text" id="span_007513" smilref="Programming_Robots_with_ROS00024.smil#span_007513">
user@hostname$ </span><strong id="strong_000205" smilref="Programming_Robots_with_ROS00024.smil#strong_000205">rosparam get my_param</strong><span class="text" id="span_007514" smilref="Programming_Robots_with_ROS00024.smil#span_007514">
4.2
user@hostname$ </span><strong id="strong_000206" smilref="Programming_Robots_with_ROS00024.smil#strong_000206">rosparam delete my_param</strong><span class="text" id="span_007515" smilref="Programming_Robots_with_ROS00024.smil#span_007515">
user@hostname$ </span><strong id="strong_000207" smilref="Programming_Robots_with_ROS00024.smil#strong_000207">rosparam get my_param</strong><span class="text" id="span_007516" smilref="Programming_Robots_with_ROS00024.smil#span_007516">
ERROR: Parameter [/my_param] is not set
</span></code>
                </p>
                <p class="keep-together" data-type="indexterm" data-primary="YAML" data-secondary="and parameter values" id="ch20-idp43785920">
                  <span class="text" id="span_007517" smilref="Programming_Robots_with_ROS00024.smil#span_007517">Parameter values can be specified using any valid YAML string. You can put parameters into a namespace by either specifying a YAML dictionary or using the</span>
                  <code xml:space="preserve" id="code_001987" smilref="Programming_Robots_with_ROS00024.smil#code_001987">/</code>
                  <span class="text" id="span_007518" smilref="Programming_Robots_with_ROS00024.smil#span_007518">separator:</span>
                </p>
                <p id="p_001405">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001988"><span class="text" id="span_007519" smilref="Programming_Robots_with_ROS00024.smil#span_007519">
user@hostname$ </span><strong id="strong_000208" smilref="Programming_Robots_with_ROS00024.smil#strong_000208">rosparam set my_dict "{message: 'Hello world', x: 4.2, y: 2.4}"</strong><span class="text" id="span_007520" smilref="Programming_Robots_with_ROS00024.smil#span_007520">
user@hostname$ </span><strong id="strong_000209" smilref="Programming_Robots_with_ROS00024.smil#strong_000209">rosparam get my_dict</strong><span class="text" id="span_007521" smilref="Programming_Robots_with_ROS00024.smil#span_007521">
{message: Hello world, x: 4.2, y: 2.4}
user@hostname$ </span><strong id="strong_000210" smilref="Programming_Robots_with_ROS00024.smil#strong_000210">rosparam set my_dict/message 'Goodbye world'</strong><span class="text" id="span_007522" smilref="Programming_Robots_with_ROS00024.smil#span_007522">
user@hostname$ </span><strong id="strong_000211" smilref="Programming_Robots_with_ROS00024.smil#strong_000211">rosparam get my_dict/message</strong><span class="text" id="span_007523" smilref="Programming_Robots_with_ROS00024.smil#span_007523">
Goodbye world
</span></code>
                </p>
                <p id="p_001406" smilref="Programming_Robots_with_ROS00024.smil#p_001406">You can also dump parameter data to and load it back from a YAML file, optionally in a namespace:</p>
                <p id="p_001407">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001989"><span class="text" id="span_007524" smilref="Programming_Robots_with_ROS00024.smil#span_007524">
user@hostname$ </span><strong id="strong_000212" smilref="Programming_Robots_with_ROS00024.smil#strong_000212">rosparam set my_dict "{message: 'Hello world', x: 4.2, y: 2.4}"</strong><span class="text" id="span_007525" smilref="Programming_Robots_with_ROS00024.smil#span_007525">
user@hostname$ </span><strong id="strong_000213" smilref="Programming_Robots_with_ROS00024.smil#strong_000213">rosparam dump data.yaml my_dict</strong><span class="text" id="span_007526" smilref="Programming_Robots_with_ROS00024.smil#span_007526">
user@hostname$ </span><strong id="strong_000214" smilref="Programming_Robots_with_ROS00024.smil#strong_000214">cat data.yaml</strong><span class="text" id="span_007527" smilref="Programming_Robots_with_ROS00024.smil#span_007527">
{message: Hello world, x: 4.2, y: 2.4}
user@hostname$ </span><strong id="strong_000215" smilref="Programming_Robots_with_ROS00024.smil#strong_000215">rosparam load data.yaml my_dict2</strong><span class="text" id="span_007528" smilref="Programming_Robots_with_ROS00024.smil#span_007528">
user@hostname$ </span><strong id="strong_000216" smilref="Programming_Robots_with_ROS00024.smil#strong_000216">rosparam get my_dict2</strong><span class="text" id="span_007529" smilref="Programming_Robots_with_ROS00024.smil#span_007529">
{message: Hello world, x: 4.2, y: 2.4}
</span></code>
                </p>
                <p id="p_001408">
                  <span class="text" id="span_007530" smilref="Programming_Robots_with_ROS00024.smil#span_007530">In summary,</span>
                  <code xml:space="preserve" id="code_001990" smilref="Programming_Robots_with_ROS00024.smil#code_001990">rosparam</code>
                  <span class="text" id="span_007531" smilref="Programming_Robots_with_ROS00024.smil#span_007531">is handy tool for inspecting and modifying the parameters that configure your ROS system.</span>
                </p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Navigating the Filesystem: roscd" id="section_000197">
              <h1 id="h1_000464" smilref="Programming_Robots_with_ROS00024.smil#h1_000464">Navigating the Filesystem: roscd</h1>
              <div class="sect1" id="ch20-idp43773216">
                <p data-type="indexterm" data-primary="filesystem, roscd for navigation of" id="ch20-idp43797792" data-secondary="roscd">
                  <span class="text" id="span_007532" smilref="Programming_Robots_with_ROS00024.smil#span_007532">As we've seen throughout this book, ROS code is organized into packages, with each package in its own directory. It can sometimes be hard to remember where exactly in the filesystem a given package lives. To speed up moving around among packages, we use</span>
                  <code xml:space="preserve" id="code_001991" smilref="Programming_Robots_with_ROS00024.smil#code_001991">roscd</code>
                  <span class="text" id="span_007533" smilref="Programming_Robots_with_ROS00024.smil#span_007533">, which changes to the directory containing a given package:</span>
                </p>
                <p id="p_001409">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001992"><span class="text" id="span_007534" smilref="Programming_Robots_with_ROS00024.smil#span_007534">
user@hostname$ </span><strong id="strong_000217" smilref="Programming_Robots_with_ROS00024.smil#strong_000217">roscd my_package</strong>
</code>
                </p>
                <p data-type="indexterm" data-primary="rosbash suite" id="ch20-idp43802640">
                  <span class="text" id="span_007535" smilref="Programming_Robots_with_ROS00024.smil#span_007535">The</span>
                  <code xml:space="preserve" id="code_001993" smilref="Programming_Robots_with_ROS00024.smil#code_001993">roscd</code>
                  <span class="text" id="span_007536" smilref="Programming_Robots_with_ROS00024.smil#span_007536">tool is part of the</span>
                  <code xml:space="preserve" id="code_001994" smilref="Programming_Robots_with_ROS00024.smil#code_001994">rosbash</code>
                  <span class="text" id="span_007537" smilref="Programming_Robots_with_ROS00024.smil#span_007537">suite, where it is implemented as a</span>
                  <code xml:space="preserve" id="code_001995" smilref="Programming_Robots_with_ROS00024.smil#code_001995">bash</code>
                  <span class="text" id="span_007538" smilref="Programming_Robots_with_ROS00024.smil#span_007538">shell function, rather than an executable program. To use</span>
                  <code xml:space="preserve" id="code_001996" smilref="Programming_Robots_with_ROS00024.smil#code_001996">roscd</code>
                  <span class="text" id="span_007539" smilref="Programming_Robots_with_ROS00024.smil#span_007539">or other</span>
                  <code xml:space="preserve" id="code_001997" smilref="Programming_Robots_with_ROS00024.smil#code_001997">rosbash</code>
                  <span class="text" id="span_007540" smilref="Programming_Robots_with_ROS00024.smil#span_007540">functions, you must be sure to source the</span>
                  <code xml:space="preserve" id="code_001998" smilref="Programming_Robots_with_ROS00024.smil#code_001998">bash</code>
                  <span class="text" id="span_007541" smilref="Programming_Robots_with_ROS00024.smil#span_007541">-specific ROS setup file, for example:</span>
                </p>
                <p id="p_001410">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_001999"><span class="text" id="span_007542" smilref="Programming_Robots_with_ROS00024.smil#span_007542">
user@hostname$ </span><strong id="strong_000218" smilref="Programming_Robots_with_ROS00024.smil#strong_000218">source /opt/ros/indigo/setup.bash</strong>
</code>
                </p>
                <p data-type="indexterm" data-primary="ROS command-line tools" data-secondary="rosed" id="ch20-idp43807632">
                  <span class="text" id="span_007543" smilref="Programming_Robots_with_ROS00024.smil#span_007543">Another handy</span>
                  <code xml:space="preserve" id="code_002000" smilref="Programming_Robots_with_ROS00024.smil#code_002000">rosbash</code>
                  <span class="text" id="span_007544" smilref="Programming_Robots_with_ROS00024.smil#span_007544">shortcut is</span>
                  <code xml:space="preserve" id="code_002001" smilref="Programming_Robots_with_ROS00024.smil#code_002001">rosed</code>
                  <span class="text" id="span_007545" smilref="Programming_Robots_with_ROS00024.smil#span_007545">, with which you can edit a file in a ROS package without having to first change to the package's directory. The file will be opened in your favorite editor (as determined by the value of the environment variable</span>
                  <code xml:space="preserve" id="code_002002" smilref="Programming_Robots_with_ROS00024.smil#code_002002">EDITOR</code>
                  <span class="text" id="span_007546" smilref="Programming_Robots_with_ROS00024.smil#span_007546">):</span>
                </p>
                <p id="p_001411">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_002003"><span class="text" id="span_007547" smilref="Programming_Robots_with_ROS00024.smil#span_007547">
user@hostname$ </span><strong id="strong_000219" smilref="Programming_Robots_with_ROS00024.smil#strong_000219">rosed my_package my_file.cpp</strong>
</code>
                </p>
                <p id="p_001412">
                  <span class="text" id="span_007548" smilref="Programming_Robots_with_ROS00024.smil#span_007548">The</span>
                  <code xml:space="preserve" id="code_002004" smilref="Programming_Robots_with_ROS00024.smil#code_002004">rosed</code>
                  <span class="text" id="span_007549" smilref="Programming_Robots_with_ROS00024.smil#span_007549">tool will look for a file by the given name anywhere within the given package's directory.</span>
                </p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Starting a Node: rosrun" id="section_000198">
              <h1 id="h1_000465" smilref="Programming_Robots_with_ROS00024.smil#h1_000465">Starting a Node: rosrun</h1>
              <div class="sect1" id="ch20-idp43812560">
                <p data-type="indexterm" data-primary="nodes" data-secondary="rosrun for starting single node" id="ch20-idp43813760">
                  <span class="text" id="span_007550" smilref="Programming_Robots_with_ROS00024.smil#span_007550">Just like other resources, ROS nodes are stored in packages, where they are not in the default search path for executables (the environment variable</span>
                  <code xml:space="preserve" id="code_002005" smilref="Programming_Robots_with_ROS00024.smil#code_002005">PATH</code>
                  <span class="text" id="span_007551" smilref="Programming_Robots_with_ROS00024.smil#span_007551">). As a result, depending on where a package sits in the filesystem, running a node might require you to use a long and difficult-to-remember directory prefix to specify where that node is on disk. Instead, you can use</span>
                  <code id="ch20-idp43814752" xml:space="preserve" smilref="Programming_Robots_with_ROS00024.smil#ch20-idp43814752">rosrun</code>
                  <span class="text" id="span_007552" smilref="Programming_Robots_with_ROS00024.smil#span_007552">and just give the package name and node name:</span>
                </p>
                <p id="p_001413">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_002006"><span class="text" id="span_007553" smilref="Programming_Robots_with_ROS00024.smil#span_007553">
user@hostname$ </span><strong id="strong_000220" smilref="Programming_Robots_with_ROS00024.smil#strong_000220">rosrun my_package my_node</strong>
</code>
                </p>
                <p id="p_001414">
                  <span class="text" id="span_007554" smilref="Programming_Robots_with_ROS00024.smil#span_007554">Similar to</span>
                  <code xml:space="preserve" id="code_002007" smilref="Programming_Robots_with_ROS00024.smil#code_002007">rosed</code>
                  <span class="text" id="span_007555" smilref="Programming_Robots_with_ROS00024.smil#span_007555">,</span>
                  <code xml:space="preserve" id="code_002008" smilref="Programming_Robots_with_ROS00024.smil#code_002008">rosrun</code>
                  <span class="text" id="span_007556" smilref="Programming_Robots_with_ROS00024.smil#span_007556">will look for an executable file by the given name anywhere within the given package's directory. You can kill a node started via</span>
                  <code xml:space="preserve" id="code_002009" smilref="Programming_Robots_with_ROS00024.smil#code_002009">rosrun</code>
                  <span class="text" id="span_007557" smilref="Programming_Robots_with_ROS00024.smil#span_007557">just as you would if you had run it directly, with Ctrl-C. The</span>
                  <code xml:space="preserve" id="code_002010" smilref="Programming_Robots_with_ROS00024.smil#code_002010">rosrun</code>
                  <span class="text" id="span_007558" smilref="Programming_Robots_with_ROS00024.smil#span_007558">tool is part of the</span>
                  <code xml:space="preserve" id="code_002011" smilref="Programming_Robots_with_ROS00024.smil#code_002011">rosbash</code>
                  <span class="text" id="span_007559" smilref="Programming_Robots_with_ROS00024.smil#span_007559">suite.</span>
                </p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Starting Many Nodes: roslaunch" id="section_000199">
              <h1 id="h1_000466" smilref="Programming_Robots_with_ROS00024.smil#h1_000466">Starting Many Nodes: roslaunch</h1>
              <div class="sect1" id="ch20-idp43822336">
                <p data-type="indexterm" data-primary="nodes" data-secondary="roslaunch for starting multiple nodes" id="ch20-ix_20-tools-asciidoc1">
                  <span class="text" id="span_007560" smilref="Programming_Robots_with_ROS00024.smil#span_007560">Starting nodes one by one with</span>
                  <code xml:space="preserve" id="code_002012" smilref="Programming_Robots_with_ROS00024.smil#code_002012">rosrun</code>
                  <span class="text" id="span_007561" smilref="Programming_Robots_with_ROS00024.smil#span_007561">is good for testing and debugging, but most ROS systems comprise many nodes, and you don't want to have to start and stop them individually. You also don't want to have to remember which command-line arguments, name remappings, and parameters to provide to each node. Ideally, especially for complex systems, you would describe the desired set of nodes and their configuration in a file.</span>
                </p>
                <p data-type="indexterm" data-primary="XML" data-secondary="and roslaunch" id="ch20-idp43829264">
                  <span class="text" id="span_007562" smilref="Programming_Robots_with_ROS00024.smil#span_007562">For this purpose, we use</span>
                  <code xml:space="preserve" id="code_002013" smilref="Programming_Robots_with_ROS00024.smil#code_002013">roslaunch</code>
                  <span class="text" id="span_007563" smilref="Programming_Robots_with_ROS00024.smil#span_007563">, a tool that reads an XML description of a set of nodes, then launches and monitors those nodes. By convention,</span>
                  <code xml:space="preserve" id="code_002014" smilref="Programming_Robots_with_ROS00024.smil#code_002014">roslaunch</code>
                  <span class="text" id="span_007564" smilref="Programming_Robots_with_ROS00024.smil#span_007564">XML files have the extension</span>
                  <em id="em_000466" smilref="Programming_Robots_with_ROS00024.smil#em_000466">.launch</em>
                  <span class="text" id="span_007565" smilref="Programming_Robots_with_ROS00024.smil#span_007565">and are called "launch files." For example, to launch both the talker and listener examples from the</span>
                  <code xml:space="preserve" id="code_002015" smilref="Programming_Robots_with_ROS00024.smil#code_002015">rospy_tutorials</code>
                  <span class="text" id="span_007566" smilref="Programming_Robots_with_ROS00024.smil#span_007566">package, we would write the XML code shown in example</span>
                  <a data-type="xref" href="#ch20-talker_listener_launch" external="false" id="a_000388" smilref="Programming_Robots_with_ROS00024.smil#a_000388">Example 20-1</a>
                  <span class="text" id="span_007567" smilref="Programming_Robots_with_ROS00024.smil#span_007567">:</span>
                </p>
                <h1 id="h1_000467" smilref="Programming_Robots_with_ROS00024.smil#h1_000467">Example 20-1. talker_listener.launch</h1>
                <div id="ch20-talker_listener_launch" data-type="example">
                  <p id="p_001415">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_002016" smilref="Programming_Robots_with_ROS00024.smil#code_002016">&lt;launch&gt;
  &lt;node name="talker" pkg="rospy_tutorials" type="talker" /&gt;
  &lt;node name="listener" pkg="rospy_tutorials" type="listener" /&gt;
&lt;/launch&gt;</code>
                  </p>
                </div>
                <h1 id="h1_000468" smilref="Programming_Robots_with_ROS00024.smil#h1_000468">Tip</h1>
                <div data-type="tip" id="div_000043">
                  <p id="p_001416">
                    <span class="text" id="span_007568" smilref="Programming_Robots_with_ROS00024.smil#span_007568">While</span>
                    <code xml:space="preserve" id="code_002017" smilref="Programming_Robots_with_ROS00024.smil#code_002017">roslaunch</code>
                    <span class="text" id="span_007569" smilref="Programming_Robots_with_ROS00024.smil#span_007569">guarantees that all parameters are set prior to executing any nodes, there is no ordering when it comes to executing the nodes. Conceptually, all nodes start executing at around, but not exactly, the same time. If you need to sequence the execution of two nodes, use ROS communication between them.</span>
                  </p>
                </div>
                <p id="p_001417">
                  <span class="text" id="span_007570" smilref="Programming_Robots_with_ROS00024.smil#span_007570">We're asking</span>
                  <code xml:space="preserve" id="code_002018" smilref="Programming_Robots_with_ROS00024.smil#code_002018">roslaunch</code>
                  <span class="text" id="span_007571" smilref="Programming_Robots_with_ROS00024.smil#span_007571">to start two nodes for us. In each</span>
                  <code xml:space="preserve" id="code_002019" smilref="Programming_Robots_with_ROS00024.smil#code_002019">&lt;node&gt;</code>
                  <span class="text" id="span_007572" smilref="Programming_Robots_with_ROS00024.smil#span_007572">tag, we specify the containing package (</span>
                  <code xml:space="preserve" id="code_002020" smilref="Programming_Robots_with_ROS00024.smil#code_002020">pkg</code>
                  <span class="text" id="span_007573" smilref="Programming_Robots_with_ROS00024.smil#span_007573">), the name of the executable file within that package (</span>
                  <code xml:space="preserve" id="code_002021" smilref="Programming_Robots_with_ROS00024.smil#code_002021">type</code>
                  <span class="text" id="span_007574" smilref="Programming_Robots_with_ROS00024.smil#span_007574">), and the name that we want to assign to the node once it's running (</span>
                  <code xml:space="preserve" id="code_002022" smilref="Programming_Robots_with_ROS00024.smil#code_002022">name</code>
                  <span class="text" id="span_007575" smilref="Programming_Robots_with_ROS00024.smil#span_007575">). Save that code to a launch file called</span>
                  <em id="em_000467" smilref="Programming_Robots_with_ROS00024.smil#em_000467">talker_listener.launch</em>
                  <span class="text" id="span_007576" smilref="Programming_Robots_with_ROS00024.smil#span_007576">, then pass it to</span>
                  <code xml:space="preserve" id="code_002023" smilref="Programming_Robots_with_ROS00024.smil#code_002023">roslaunch</code>
                  <span class="text" id="span_007577" smilref="Programming_Robots_with_ROS00024.smil#span_007577">:</span>
                </p>
                <p id="p_001418">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_002024"><span class="text" id="span_007578" smilref="Programming_Robots_with_ROS00024.smil#span_007578">
user@hostname$ </span><strong id="strong_000221" smilref="Programming_Robots_with_ROS00024.smil#strong_000221">roslaunch talker_listener.launch</strong><span class="text" id="span_007579" smilref="Programming_Robots_with_ROS00024.smil#span_007579">
roslaunch talker_listener.launch
... logging to
/home/user/.ros/log/99e865f8-314c-11e4-bf3a-705681aea243/
  roslaunch-localhost-36423.log
Checking log directory for disk usage. This may take awhile.
Press Ctrl-C to interrupt

started roslaunch server http://localhost:52380/

SUMMARY
========

PARAMETERS
 * /rosdistro
 * /rosversion

NODES
  /
    listener (rospy_tutorials/listener)
    talker (rospy_tutorials/talker)

ROS_MASTER_URI=http://localhost:11311

core service [/rosout] found
process[talker-1]: started with pid [36428]
process[listener-2]: started with pid [36429]
</span></code>
                </p>
                <p id="p_001419">
                  <span class="text" id="span_007580" smilref="Programming_Robots_with_ROS00024.smil#span_007580">Now both the</span>
                  <code xml:space="preserve" id="code_002025" smilref="Programming_Robots_with_ROS00024.smil#code_002025">talker</code>
                  <span class="text" id="span_007581" smilref="Programming_Robots_with_ROS00024.smil#span_007581">and</span>
                  <code xml:space="preserve" id="code_002026" smilref="Programming_Robots_with_ROS00024.smil#code_002026">listener</code>
                  <span class="text" id="span_007582" smilref="Programming_Robots_with_ROS00024.smil#span_007582">nodes are running. To stop them, give a Ctrl-C to</span>
                  <code xml:space="preserve" id="code_002027" smilref="Programming_Robots_with_ROS00024.smil#code_002027">roslaunch</code>
                  <span class="text" id="span_007583" smilref="Programming_Robots_with_ROS00024.smil#span_007583">, and it will take care of shutting everything down. It keeps careful track of all processes that it has launched and is thorough about stopping them before exiting itself. If a node is not responding properly to a shutdown request,</span>
                  <code xml:space="preserve" id="code_002028" smilref="Programming_Robots_with_ROS00024.smil#code_002028">roslaunch</code>
                  <span class="text" id="span_007584" smilref="Programming_Robots_with_ROS00024.smil#span_007584">will forcibly kill it. This is a key feature of</span>
                  <code xml:space="preserve" id="code_002029" smilref="Programming_Robots_with_ROS00024.smil#code_002029">roslaunch</code>
                  <span class="text" id="span_007585" smilref="Programming_Robots_with_ROS00024.smil#span_007585">and a reason to use it even for small ROS systems: in a distributed computing environment comprising multiple processes, it's important to be sure that after shutdown, they are all indeed stopped.</span>
                </p>
                <h1 id="h1_000469" smilref="Programming_Robots_with_ROS00024.smil#h1_000469">Tip</h1>
                <div data-type="tip" id="div_000044">
                  <p id="p_001420">
                    <span class="text" id="span_007586" smilref="Programming_Robots_with_ROS00024.smil#span_007586">If there is already an instance of</span>
                    <code xml:space="preserve" id="code_002030" smilref="Programming_Robots_with_ROS00024.smil#code_002030">roscore</code>
                    <span class="text" id="span_007587" smilref="Programming_Robots_with_ROS00024.smil#span_007587">running,</span>
                    <code xml:space="preserve" id="code_002031" smilref="Programming_Robots_with_ROS00024.smil#code_002031">roslaunch</code>
                    <span class="text" id="span_007588" smilref="Programming_Robots_with_ROS00024.smil#span_007588">will use it. If not,</span>
                    <code xml:space="preserve" id="code_002032" smilref="Programming_Robots_with_ROS00024.smil#code_002032">roslaunch</code>
                    <span class="text" id="span_007589" smilref="Programming_Robots_with_ROS00024.smil#span_007589">will start a</span>
                    <code xml:space="preserve" id="code_002033" smilref="Programming_Robots_with_ROS00024.smil#code_002033">roscore</code>
                    <span class="text" id="span_007590" smilref="Programming_Robots_with_ROS00024.smil#span_007590">automatically and will kill it on exit.</span>
                  </p>
                </div>
                <p id="p_001421">
                  <span class="text" id="span_007591" smilref="Programming_Robots_with_ROS00024.smil#span_007591">You may have noticed that in the previous example, there were no messages printed to the console, which is surprising because both</span>
                  <code xml:space="preserve" id="code_002034" smilref="Programming_Robots_with_ROS00024.smil#code_002034">talker</code>
                  <span class="text" id="span_007592" smilref="Programming_Robots_with_ROS00024.smil#span_007592">and</span>
                  <code xml:space="preserve" id="code_002035" smilref="Programming_Robots_with_ROS00024.smil#code_002035">listener</code>
                  <span class="text" id="span_007593" smilref="Programming_Robots_with_ROS00024.smil#span_007593">are usually very chatty, printing to the each time a message is sent or received. In this case, there's no output because the default behavior of</span>
                  <code xml:space="preserve" id="code_002036" smilref="Programming_Robots_with_ROS00024.smil#code_002036">roslaunch</code>
                  <span class="text" id="span_007594" smilref="Programming_Robots_with_ROS00024.smil#span_007594">is to direct nodes' output to log files to avoid cluttering the console. If you want to see the output from a node, set the attribute</span>
                  <code xml:space="preserve" id="code_002037" smilref="Programming_Robots_with_ROS00024.smil#code_002037">output="screen"</code>
                  <span class="text" id="span_007595" smilref="Programming_Robots_with_ROS00024.smil#span_007595">in the corresponding</span>
                  <code xml:space="preserve" id="code_002038" smilref="Programming_Robots_with_ROS00024.smil#code_002038">&lt;node&gt;</code>
                  <span class="text" id="span_007596" smilref="Programming_Robots_with_ROS00024.smil#span_007596">tag. For example, to see the output from the</span>
                  <code xml:space="preserve" id="code_002039" smilref="Programming_Robots_with_ROS00024.smil#code_002039">listener</code>
                  <span class="text" id="span_007597" smilref="Programming_Robots_with_ROS00024.smil#span_007597">node, we would modify the launch file as shown in</span>
                  <a data-type="xref" href="#ch20-talker_listener_screen_launch" external="false" id="a_000389" smilref="Programming_Robots_with_ROS00024.smil#a_000389">Example 20-2</a>
                  <span class="text" id="span_007598" smilref="Programming_Robots_with_ROS00024.smil#span_007598">.</span>
                </p>
                <h1 id="h1_000470" smilref="Programming_Robots_with_ROS00024.smil#h1_000470">Example 20-2. talker_listener_screen.launch</h1>
                <div id="ch20-talker_listener_screen_launch" data-type="example">
                  <p id="p_001422">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_002040" smilref="Programming_Robots_with_ROS00024.smil#code_002040">&lt;launch&gt;
  &lt;node name="talker" pkg="rospy_tutorials" type="talker" /&gt;
  &lt;node name="listener" pkg="rospy_tutorials" type="listener" output="screen" /&gt;
&lt;/launch&gt;</code>
                  </p>
                </div>
                <p id="p_001423">
                  <span class="text" id="span_007599" smilref="Programming_Robots_with_ROS00024.smil#span_007599">Then we'll see the usual console output from</span>
                  <code xml:space="preserve" id="code_002041" smilref="Programming_Robots_with_ROS00024.smil#code_002041">listener</code>
                  <span class="text" id="span_007600" smilref="Programming_Robots_with_ROS00024.smil#span_007600">even when run by</span>
                  <code xml:space="preserve" id="code_002042" smilref="Programming_Robots_with_ROS00024.smil#code_002042">roslaunch</code>
                  <span class="text" id="span_007601" smilref="Programming_Robots_with_ROS00024.smil#span_007601">:</span>
                </p>
                <p id="p_001424">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_002043"><span class="text" id="span_007602" smilref="Programming_Robots_with_ROS00024.smil#span_007602">
user@hostname$ </span><strong id="strong_000222" smilref="Programming_Robots_with_ROS00024.smil#strong_000222">roslaunch talker_listener_screen.launch</strong><span class="text" id="span_007603" smilref="Programming_Robots_with_ROS00024.smil#span_007603">
...
process[talker-1]: started with pid [36626]
process[listener-2]: started with pid [36627]
[INFO] [WallTime: 1409517683.732251] /listener I heard hello world 1409517683.73
[INFO] [WallTime: 1409517683.831888] /listener I heard hello world 1409517683.83
[INFO] [WallTime: 1409517683.932052] /listener I heard hello world 1409517683.93
...
</span></code>
                </p>
                <p id="p_001425">
                  <span class="text" id="span_007604" smilref="Programming_Robots_with_ROS00024.smil#span_007604">You can specify name remappings for a node in a launch file by using the</span>
                  <code xml:space="preserve" id="code_002044" smilref="Programming_Robots_with_ROS00024.smil#code_002044">&lt;remap&gt;</code>
                  <span class="text" id="span_007605" smilref="Programming_Robots_with_ROS00024.smil#span_007605">tag inside the corresponding</span>
                  <code xml:space="preserve" id="code_002045" smilref="Programming_Robots_with_ROS00024.smil#code_002045">&lt;node&gt;</code>
                  <span class="text" id="span_007606" smilref="Programming_Robots_with_ROS00024.smil#span_007606">tag. For example, we can remap our</span>
                  <code xml:space="preserve" id="code_002046" smilref="Programming_Robots_with_ROS00024.smil#code_002046">talker</code>
                  <span class="text" id="span_007607" smilref="Programming_Robots_with_ROS00024.smil#span_007607">/</span>
                  <code xml:space="preserve" id="code_002047" smilref="Programming_Robots_with_ROS00024.smil#code_002047">listener</code>
                  <span class="text" id="span_007608" smilref="Programming_Robots_with_ROS00024.smil#span_007608">pair to communicate over a different topic than their default, which is</span>
                  <code xml:space="preserve" id="code_002048" smilref="Programming_Robots_with_ROS00024.smil#code_002048">chatter</code>
                  <span class="text" id="span_007609" smilref="Programming_Robots_with_ROS00024.smil#span_007609">, as seen in</span>
                  <a data-type="xref" href="#ch20-talker_listener_remap_launch" external="false" id="a_000390" smilref="Programming_Robots_with_ROS00024.smil#a_000390">Example 20-3</a>
                  <span class="text" id="span_007610" smilref="Programming_Robots_with_ROS00024.smil#span_007610">.</span>
                </p>
                <h1 id="h1_000471" smilref="Programming_Robots_with_ROS00024.smil#h1_000471">Example 20-3. talker_listener_remap.launch</h1>
                <div id="ch20-talker_listener_remap_launch" data-type="example">
                  <p id="p_001426">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_002049" smilref="Programming_Robots_with_ROS00024.smil#code_002049">&lt;launch&gt;
  &lt;node name="talker" pkg="rospy_tutorials" type="talker"&gt;
    &lt;remap from="chatter" to="my_chatter"/&gt;
  &lt;/node&gt;
  &lt;node name="listener" pkg="rospy_tutorials" type="listener"&gt;
    &lt;remap from="chatter" to="my_chatter"/&gt;
  &lt;/node&gt;
&lt;/launch&gt;</code>
                  </p>
                </div>
                <p id="p_001427">
                  <span class="text" id="span_007611" smilref="Programming_Robots_with_ROS00024.smil#span_007611">It's also useful to specify parameters in a launch file by using the</span>
                  <code xml:space="preserve" id="code_002050" smilref="Programming_Robots_with_ROS00024.smil#code_002050">&lt;param&gt;</code>
                  <span class="text" id="span_007612" smilref="Programming_Robots_with_ROS00024.smil#span_007612">tag. Most often, you'll be setting parameters for a specific node, which you can do by putting the</span>
                  <code xml:space="preserve" id="code_002051" smilref="Programming_Robots_with_ROS00024.smil#code_002051">&lt;param&gt;</code>
                  <span class="text" id="span_007613" smilref="Programming_Robots_with_ROS00024.smil#span_007613">tag inside the corresponding</span>
                  <code xml:space="preserve" id="code_002052" smilref="Programming_Robots_with_ROS00024.smil#code_002052">&lt;node&gt;</code>
                  <span class="text" id="span_007614" smilref="Programming_Robots_with_ROS00024.smil#span_007614">tag. For example, we could add a parameter in the namespace of the</span>
                  <code xml:space="preserve" id="code_002053" smilref="Programming_Robots_with_ROS00024.smil#code_002053">talker</code>
                  <span class="text" id="span_007615" smilref="Programming_Robots_with_ROS00024.smil#span_007615">node as shown in</span>
                  <a data-type="xref" href="#ch20-talker_listener_param_launch" external="false" id="a_000391" smilref="Programming_Robots_with_ROS00024.smil#a_000391">Example 20-4</a>
                  <span class="text" id="span_007616" smilref="Programming_Robots_with_ROS00024.smil#span_007616">.</span>
                </p>
                <h1 id="h1_000472" smilref="Programming_Robots_with_ROS00024.smil#h1_000472">Example 20-4. talker_listener_param.launch</h1>
                <div id="ch20-talker_listener_param_launch" data-type="example">
                  <p id="p_001428">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_002054" smilref="Programming_Robots_with_ROS00024.smil#code_002054">&lt;launch&gt;
  &lt;node name="talker" pkg="rospy_tutorials" type="talker"&gt;
    &lt;param name="my_param" value="4.2"/&gt;
  &lt;/node&gt;
  &lt;node name="listener" pkg="rospy_tutorials" type="listener" /&gt;
&lt;/launch&gt;</code>
                  </p>
                </div>
                <p id="p_001429">
                  <span class="text" id="span_007617" smilref="Programming_Robots_with_ROS00024.smil#span_007617">Pass that file to</span>
                  <code xml:space="preserve" id="code_002055" smilref="Programming_Robots_with_ROS00024.smil#code_002055">roslaunch</code>
                  <span class="text" id="span_007618" smilref="Programming_Robots_with_ROS00024.smil#span_007618">, then check the parameter value from another terminal:</span>
                </p>
                <p id="p_001430">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_002056"><span class="text" id="span_007619" smilref="Programming_Robots_with_ROS00024.smil#span_007619">
user@hostname$ </span><strong id="strong_000223" smilref="Programming_Robots_with_ROS00024.smil#strong_000223">rosparam get talker/my_param</strong><span class="text" id="span_007620" smilref="Programming_Robots_with_ROS00024.smil#span_007620">
4.2
</span></code>
                </p>
                <p id="p_001431">
                  <span class="text" id="span_007621" smilref="Programming_Robots_with_ROS00024.smil#span_007621">In this case, we're just setting a parameter in a node's namespace, then reading it back. More often, the node in question would read the parameter value and modify its behavior in some way. Because parameters are usually read by nodes on startup,</span>
                  <code xml:space="preserve" id="code_002057" smilref="Programming_Robots_with_ROS00024.smil#code_002057">roslaunch</code>
                  <span class="text" id="span_007622" smilref="Programming_Robots_with_ROS00024.smil#span_007622">guarantees that all parameters specified in a launch file are set prior to launching any of the nodes.</span>
                </p>
                <p id="p_001432">
                  <span class="text" id="span_007623" smilref="Programming_Robots_with_ROS00024.smil#span_007623">It is common to separate a complex</span>
                  <code xml:space="preserve" id="code_002058" smilref="Programming_Robots_with_ROS00024.smil#code_002058">roslaunch</code>
                  <span class="text" id="span_007624" smilref="Programming_Robots_with_ROS00024.smil#span_007624">configuration into multiple launch files that are easier to test, document, and maintain. These files can be composed through the use of the</span>
                  <code xml:space="preserve" id="code_002059" smilref="Programming_Robots_with_ROS00024.smil#code_002059">&lt;include&gt;</code>
                  <span class="text" id="span_007625" smilref="Programming_Robots_with_ROS00024.smil#span_007625">tag. For example, we could separate the node declarations from</span>
                  <a data-type="xref" href="#ch20-talker_listener_param_launch" external="false" id="a_000392" smilref="Programming_Robots_with_ROS00024.smil#a_000392">Example 20-4</a>
                  <span class="text" id="span_007626" smilref="Programming_Robots_with_ROS00024.smil#span_007626">into two files, as shown in</span>
                  <a data-type="xref" href="#ch20-listener_launch" external="false" id="a_000393" smilref="Programming_Robots_with_ROS00024.smil#a_000393">Example 20-5</a>
                  <span class="text" id="span_007627" smilref="Programming_Robots_with_ROS00024.smil#span_007627">, which is included by</span>
                  <a data-type="xref" href="#ch20-talker_listener_param_include_launch" external="false" id="a_000394" smilref="Programming_Robots_with_ROS00024.smil#a_000394">Example 20-6</a>
                  <span class="text" id="span_007628" smilref="Programming_Robots_with_ROS00024.smil#span_007628">. Note that the</span>
                  <code xml:space="preserve" id="code_002060" smilref="Programming_Robots_with_ROS00024.smil#code_002060">file</code>
                  <span class="text" id="span_007629" smilref="Programming_Robots_with_ROS00024.smil#span_007629">attribute of the</span>
                  <code xml:space="preserve" id="code_002061" smilref="Programming_Robots_with_ROS00024.smil#code_002061">&lt;include&gt;</code>
                  <span class="text" id="span_007630" smilref="Programming_Robots_with_ROS00024.smil#span_007630">tag should be relative to the location of a ROS package, which in this case is called</span>
                  <code xml:space="preserve" id="code_002062" smilref="Programming_Robots_with_ROS00024.smil#code_002062">basics</code>
                  <span class="text" id="span_007631" smilref="Programming_Robots_with_ROS00024.smil#span_007631">.</span>
                </p>
                <h1 id="h1_000473" smilref="Programming_Robots_with_ROS00024.smil#h1_000473">Example 20-5. listener.launch</h1>
                <div id="ch20-listener_launch" data-type="example">
                  <p id="p_001433">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_002063" smilref="Programming_Robots_with_ROS00024.smil#code_002063">&lt;launch&gt;
  &lt;node name="listener" pkg="rospy_tutorials" type="listener" /&gt;
&lt;/launch&gt;</code>
                  </p>
                </div>
                <h1 id="h1_000474" smilref="Programming_Robots_with_ROS00024.smil#h1_000474">Example 20-6. talker_listener_param_include.launch</h1>
                <div id="ch20-talker_listener_param_include_launch" data-type="example">
                  <p id="p_001434">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_002064" smilref="Programming_Robots_with_ROS00024.smil#code_002064">&lt;launch&gt;
  &lt;node name="talker" pkg="rospy_tutorials" type="talker"&gt;
    &lt;param name="my_param" value="4.2"/&gt;
  &lt;/node&gt;
  &lt;include file="$(find basics)/launch/listener.launch"/&gt;
&lt;/launch&gt;</code>
                  </p>
                </div>
                <p id="ch20-idp44202816" data-type="indexterm" data-startref="ix_20-tools-asciidoc1">
                  <span class="text" id="span_007632" smilref="Programming_Robots_with_ROS00024.smil#span_007632">While these examples cover the most commonly used features of</span>
                  <code xml:space="preserve" id="code_002065" smilref="Programming_Robots_with_ROS00024.smil#code_002065">roslaunch</code>
                  <span class="text" id="span_007633" smilref="Programming_Robots_with_ROS00024.smil#span_007633">, there are many more, such as namespace grouping, environment variable access, argument substitution, conditional evaluation, and launching on remote machines. For details on advanced features, consult the</span>
                  <a href="http://wiki.ros.org/roslaunch?distro=indigo" external="true" id="a_000395">
                    <code xml:space="preserve" id="code_002066" smilref="Programming_Robots_with_ROS00024.smil#code_002066">roslaunch</code>
                    <span class="text" id="span_007634" smilref="Programming_Robots_with_ROS00024.smil#span_007634">documentation</span>
                  </a>
                  <span class="text" id="span_007635" smilref="Programming_Robots_with_ROS00024.smil#span_007635">.</span>
                </p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Testing a Many-Node System: rostest" id="section_000200">
              <h1 id="h1_000475" smilref="Programming_Robots_with_ROS00024.smil#h1_000475">Testing a Many-Node System: rostest</h1>
              <div class="sect1" id="ch20-idp43823312">
                <p data-type="indexterm" data-primary="nodes" data-secondary="rostest for testing many-node system" id="ch20-ix_20-tools-asciidoc4">
                  <span class="text" id="span_007636" smilref="Programming_Robots_with_ROS00024.smil#span_007636">Testing is a critical aspect of any software system, and we strongly encourage the use of standard testing frameworks such as</span>
                  <code xml:space="preserve" id="code_002067" smilref="Programming_Robots_with_ROS00024.smil#code_002067">unittest</code>
                  <span class="text" id="span_007637" smilref="Programming_Robots_with_ROS00024.smil#span_007637">or</span>
                  <code id="ch20-ix_20-tools-asciidoc5" xml:space="preserve" smilref="Programming_Robots_with_ROS00024.smil#ch20-ix_20-tools-asciidoc5">nose</code>
                  <span class="text" id="span_007638" smilref="Programming_Robots_with_ROS00024.smil#span_007638">(Python) and Google Test (C++). These frameworks allow you to write test programs that exercise your code in various ways to ensure that it behaves correctly. But, while these frameworks are great for testing libraries in isolation, it can be difficult to write tests for an entire ROS system. For this purpose we use</span>
                  <code id="ch20-ix_20-tools-asciidoc6" xml:space="preserve" smilref="Programming_Robots_with_ROS00024.smil#ch20-ix_20-tools-asciidoc6">rostest</code>
                  <span class="text" id="span_007639" smilref="Programming_Robots_with_ROS00024.smil#span_007639">.</span>
                </p>
                <p id="p_001435">
                  <span class="text" id="span_007640" smilref="Programming_Robots_with_ROS00024.smil#span_007640">The</span>
                  <code xml:space="preserve" id="code_002068" smilref="Programming_Robots_with_ROS00024.smil#code_002068">rostest</code>
                  <span class="text" id="span_007641" smilref="Programming_Robots_with_ROS00024.smil#span_007641">tool is just an extension to</span>
                  <code xml:space="preserve" id="code_002069" smilref="Programming_Robots_with_ROS00024.smil#code_002069">roslaunch</code>
                  <span class="text" id="span_007642" smilref="Programming_Robots_with_ROS00024.smil#span_007642">, adding the</span>
                  <code xml:space="preserve" id="code_002070" smilref="Programming_Robots_with_ROS00024.smil#code_002070">&lt;test&gt;</code>
                  <span class="text" id="span_007643" smilref="Programming_Robots_with_ROS00024.smil#span_007643">tag to allow specification of a test program to be run alongside the other nodes. For example, if we wanted to test that the</span>
                  <code xml:space="preserve" id="code_002071" smilref="Programming_Robots_with_ROS00024.smil#code_002071">talker</code>
                  <span class="text" id="span_007644" smilref="Programming_Robots_with_ROS00024.smil#span_007644">in our</span>
                  <code xml:space="preserve" id="code_002072" smilref="Programming_Robots_with_ROS00024.smil#code_002072">talker</code>
                  <span class="text" id="span_007645" smilref="Programming_Robots_with_ROS00024.smil#span_007645">/</span>
                  <code xml:space="preserve" id="code_002073" smilref="Programming_Robots_with_ROS00024.smil#code_002073">listener</code>
                  <span class="text" id="span_007646" smilref="Programming_Robots_with_ROS00024.smil#span_007646">system is working properly, we could extend the launch file as shown in</span>
                  <a data-type="xref" href="#ch20-talker_listener_test_launch" external="false" id="a_000396" smilref="Programming_Robots_with_ROS00024.smil#a_000396">Example 20-7</a>
                  <span class="text" id="span_007647" smilref="Programming_Robots_with_ROS00024.smil#span_007647">.</span>
                </p>
                <h1 id="h1_000476" smilref="Programming_Robots_with_ROS00024.smil#h1_000476">Example 20-7. talker_listener_test.launch</h1>
                <div id="ch20-talker_listener_test_launch" data-type="example">
                  <p id="p_001436">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_002074" smilref="Programming_Robots_with_ROS00024.smil#code_002074">&lt;launch&gt;
  &lt;node name="talker" pkg="rospy_tutorials" type="talker" /&gt;
  &lt;node name="listener" pkg="rospy_tutorials" type="listener" /&gt;
  &lt;test test-name="test_talker" pkg="basics" type="test_talker.py" /&gt;
&lt;/launch&gt;</code>
                  </p>
                </div>
                <p id="p_001437">
                  <span class="text" id="span_007648" smilref="Programming_Robots_with_ROS00024.smil#span_007648">This file says to</span>
                  <code xml:space="preserve" id="code_002075" smilref="Programming_Robots_with_ROS00024.smil#code_002075">rostest</code>
                  <span class="text" id="span_007649" smilref="Programming_Robots_with_ROS00024.smil#span_007649">: bring up the nodes, then run the test program to check that everything is working. Given this file as input,</span>
                  <code xml:space="preserve" id="code_002076" smilref="Programming_Robots_with_ROS00024.smil#code_002076">rostest</code>
                  <span class="text" id="span_007650" smilref="Programming_Robots_with_ROS00024.smil#span_007650">will launch the nodes just like</span>
                  <code xml:space="preserve" id="code_002077" smilref="Programming_Robots_with_ROS00024.smil#code_002077">roslaunch</code>
                  <span class="text" id="span_007651" smilref="Programming_Robots_with_ROS00024.smil#span_007651">does. The difference with</span>
                  <code xml:space="preserve" id="code_002078" smilref="Programming_Robots_with_ROS00024.smil#code_002078">rostest</code>
                  <span class="text" id="span_007652" smilref="Programming_Robots_with_ROS00024.smil#span_007652">is that, after launching the rest of the nodes, it will further launch the test node, which is expected to use one of the standard testing frameworks to verify that the rest of the nodes are working properly and to report its findings in an xUnit-format output file.</span>
                </p>
                <h1 id="h1_000477" smilref="Programming_Robots_with_ROS00024.smil#h1_000477">Tip</h1>
                <div data-type="tip" id="div_000045">
                  <p id="p_001438">
                    <span class="text" id="span_007653" smilref="Programming_Robots_with_ROS00024.smil#span_007653">If you declare multiple</span>
                    <code xml:space="preserve" id="code_002079" smilref="Programming_Robots_with_ROS00024.smil#code_002079">&lt;test&gt;</code>
                    <span class="text" id="span_007654" smilref="Programming_Robots_with_ROS00024.smil#span_007654">tags in a single launch file,</span>
                    <code xml:space="preserve" id="code_002080" smilref="Programming_Robots_with_ROS00024.smil#code_002080">rostest</code>
                    <span class="text" id="span_007655" smilref="Programming_Robots_with_ROS00024.smil#span_007655">will run them all, sequentially. For each test,</span>
                    <code xml:space="preserve" id="code_002081" smilref="Programming_Robots_with_ROS00024.smil#code_002081">rostest</code>
                    <span class="text" id="span_007656" smilref="Programming_Robots_with_ROS00024.smil#span_007656">will ensure a clean environment by tearing down and restarting the nodes to be tested.</span>
                  </p>
                </div>
                <p id="p_001439">
                  <span class="text" id="span_007657" smilref="Programming_Robots_with_ROS00024.smil#span_007657">For example, the</span>
                  <code xml:space="preserve" id="code_002082" smilref="Programming_Robots_with_ROS00024.smil#code_002082">test_talker.py</code>
                  <span class="text" id="span_007658" smilref="Programming_Robots_with_ROS00024.smil#span_007658">node referenced in</span>
                  <a data-type="xref" href="#ch20-talker_listener_test_launch" external="false" id="a_000397" smilref="Programming_Robots_with_ROS00024.smil#a_000397">Example 20-7</a>
                  <span class="text" id="span_007659" smilref="Programming_Robots_with_ROS00024.smil#span_007659">might have the contents shown in</span>
                  <a data-type="xref" href="#ch20-test_talker_py" external="false" id="a_000398" smilref="Programming_Robots_with_ROS00024.smil#a_000398">Example 20-8</a>
                  <span class="text" id="span_007660" smilref="Programming_Robots_with_ROS00024.smil#span_007660">.</span>
                </p>
                <h1 id="h1_000478" smilref="Programming_Robots_with_ROS00024.smil#h1_000478">Example 20-8. test_talker.py</h1>
                <div id="ch20-test_talker_py" data-type="example">
                  <p id="p_001440">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_002083" smilref="Programming_Robots_with_ROS00024.smil#code_002083">#!/usr/bin/env python

import sys, unittest, time
import rospy, rostest
from std_msgs.msg import String

class TestTalker(unittest.TestCase):

    def __init__(self, *args):
        super(TestTalker, self).__init__(*args)
        self.success = False

    def callback(self, data):
        self.success = data.data and data.data.startswith('hello world')

    def test_talker(self):
        rospy.init_node('test_talker')
        rospy.Subscriber("chatter", String, self.callback)
        timeout_t = time.time() + 10.0
        while (not rospy.is_shutdown() and
               not self.success and time.time() &lt; timeout_t):
            time.sleep(0.1)
        self.assert_(self.success)

if __name__ == '__main__':
    rostest.rosrun('basics', 'talker_test', TestTalker, sys.argv)</code>
                  </p>
                </div>
                <p id="p_001441">
                  <span class="text" id="span_007661" smilref="Programming_Robots_with_ROS00024.smil#span_007661">In this test, we subscribe to the</span>
                  <code xml:space="preserve" id="code_002084" smilref="Programming_Robots_with_ROS00024.smil#code_002084">chatter</code>
                  <span class="text" id="span_007662" smilref="Programming_Robots_with_ROS00024.smil#span_007662">topic, then check for receipt of a message on that topic that starts with a particular substring. If that condition is satisfied within 10 seconds, then we report success; otherwise, we report failure. In other words, we're verifying that the</span>
                  <code xml:space="preserve" id="code_002085" smilref="Programming_Robots_with_ROS00024.smil#code_002085">talker</code>
                  <span class="text" id="span_007663" smilref="Programming_Robots_with_ROS00024.smil#span_007663">node is functioning as expected.</span>
                </p>
                <p id="p_001442" smilref="Programming_Robots_with_ROS00024.smil#p_001442">Let's look at the fundamental elements of this test, starting with the module imports:</p>
                <p id="p_001443">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_002086" smilref="Programming_Robots_with_ROS00024.smil#code_002086">import sys, unittest, time
import rospy, rostest
from std_msgs.msg import String</code>
                </p>
                <p id="p_001444">
                  <span class="text" id="span_007664" smilref="Programming_Robots_with_ROS00024.smil#span_007664">In addition to the usual imports in a</span>
                  <code xml:space="preserve" id="code_002087" smilref="Programming_Robots_with_ROS00024.smil#code_002087">rospy</code>
                  <span class="text" id="span_007665" smilref="Programming_Robots_with_ROS00024.smil#span_007665">node, we're also pulling in the standard Python</span>
                  <code xml:space="preserve" id="code_002088" smilref="Programming_Robots_with_ROS00024.smil#code_002088">unittest</code>
                  <span class="text" id="span_007666" smilref="Programming_Robots_with_ROS00024.smil#span_007666">module and the ROS-specific</span>
                  <code xml:space="preserve" id="code_002089" smilref="Programming_Robots_with_ROS00024.smil#code_002089">rostest</code>
                  <span class="text" id="span_007667" smilref="Programming_Robots_with_ROS00024.smil#span_007667">module. Taken together, these two modules allow us to declare, run, and collect results from our test. Next we create the class that will contain our test(s):</span>
                </p>
                <p id="p_001445">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_002090" smilref="Programming_Robots_with_ROS00024.smil#code_002090">class TestTalker(unittest.TestCase):

    def __init__(self, *args):
        super(TestTalker, self).__init__(*args)
        self.success = False</code>
                </p>
                <p id="p_001446">
                  <span class="text" id="span_007668" smilref="Programming_Robots_with_ROS00024.smil#span_007668">As usual when using</span>
                  <code xml:space="preserve" id="code_002091" smilref="Programming_Robots_with_ROS00024.smil#code_002091">unittest</code>
                  <span class="text" id="span_007669" smilref="Programming_Robots_with_ROS00024.smil#span_007669">, we create a class that inherits from the</span>
                  <span class="keep-together" id="span_007670">
                    <code xml:space="preserve" id="code_002092" smilref="Programming_Robots_with_ROS00024.smil#code_002092">unittest.TestCase</code>
                  </span>
                  <span class="text" id="span_007671" smilref="Programming_Robots_with_ROS00024.smil#span_007671">class. Because we're going to signal success in this test asynchronously, we also declare a constructor that initializes a success flag (and explicitly invokes the</span>
                  <code xml:space="preserve" id="code_002093" smilref="Programming_Robots_with_ROS00024.smil#code_002093">unittest.TestCase</code>
                  <span class="text" id="span_007672" smilref="Programming_Robots_with_ROS00024.smil#span_007672">constructor; to ensure proper setup for running tests). With the initial conditions in place, we write the test itself:</span>
                </p>
                <p id="p_001447">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_002094" smilref="Programming_Robots_with_ROS00024.smil#code_002094">    def callback(self, data):
        self.success = data.data and data.data.startswith('hello world')

    def test_talker(self):
        rospy.init_node('test_talker')
        rospy.Subscriber("chatter", String, self.callback)
        timeout_t = time.time() + 10.0
        while (not rospy.is_shutdown() and
               not self.success and time.time() &lt; timeout_t):
            time.sleep(0.1)
        self.assert_(self.success)</code>
                </p>
                <p id="p_001448">
                  <span class="text" id="span_007673" smilref="Programming_Robots_with_ROS00024.smil#span_007673">First, there's a callback function that, if provided a string message with the expected content, will signal that the test has succeeded. Next, we create a function that runs the test: create a node, subscribe to a topic using the previously defined callback function, wait for either success or a timeout, then report the test result via the</span>
                  <code xml:space="preserve" id="code_002095" smilref="Programming_Robots_with_ROS00024.smil#code_002095">unittest.TestCase.assert_()</code>
                  <span class="text" id="span_007674" smilref="Programming_Robots_with_ROS00024.smil#span_007674">function. The name of our test function is important--in this context, all functions with names beginning with</span>
                  <code xml:space="preserve" id="code_002096" smilref="Programming_Robots_with_ROS00024.smil#code_002096">test_</code>
                  <span class="text" id="span_007675" smilref="Programming_Robots_with_ROS00024.smil#span_007675">are assumed to be tests and will be run as a result of running the overall test suite.</span>
                </p>
                <p id="p_001449">
                  <span class="text" id="span_007676" smilref="Programming_Robots_with_ROS00024.smil#span_007676">Finally, in this invocation of</span>
                  <code xml:space="preserve" id="code_002097" smilref="Programming_Robots_with_ROS00024.smil#code_002097">rostest.rosrun()</code>
                  <span class="text" id="span_007677" smilref="Programming_Robots_with_ROS00024.smil#span_007677">, we're saying that this test is part of the</span>
                  <code xml:space="preserve" id="code_002098" smilref="Programming_Robots_with_ROS00024.smil#code_002098">basics</code>
                  <span class="text" id="span_007678" smilref="Programming_Robots_with_ROS00024.smil#span_007678">ROS package, that the test is named</span>
                  <code xml:space="preserve" id="code_002099" smilref="Programming_Robots_with_ROS00024.smil#code_002099">talker_test</code>
                  <span class="text" id="span_007679" smilref="Programming_Robots_with_ROS00024.smil#span_007679">(this name will be used to organize test results and should be unique within each package), and that the tests to be run are defined in the</span>
                  <code xml:space="preserve" id="code_002100" smilref="Programming_Robots_with_ROS00024.smil#code_002100">TestTalker</code>
                  <span class="text" id="span_007680" smilref="Programming_Robots_with_ROS00024.smil#span_007680">class:</span>
                </p>
                <p id="p_001450">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_002101" smilref="Programming_Robots_with_ROS00024.smil#code_002101">if __name__ == '__main__':
    rostest.rosrun('basics', 'talker_test', TestTalker, sys.argv)</code>
                </p>
                <h1 id="h1_000479" smilref="Programming_Robots_with_ROS00024.smil#h1_000479">Tip</h1>
                <div data-type="tip" id="div_000046">
                  <p id="p_001451">
                    <span class="text" id="span_007681" smilref="Programming_Robots_with_ROS00024.smil#span_007681">The</span>
                    <code xml:space="preserve" id="code_002102" smilref="Programming_Robots_with_ROS00024.smil#code_002102">roslaunch</code>
                    <span class="text" id="span_007682" smilref="Programming_Robots_with_ROS00024.smil#span_007682">tool will ignore</span>
                    <code xml:space="preserve" id="code_002103" smilref="Programming_Robots_with_ROS00024.smil#code_002103">&lt;test&gt;</code>
                    <span class="text" id="span_007683" smilref="Programming_Robots_with_ROS00024.smil#span_007683">tags in launch files, so you can freely declare tests directly in launch files that you are actively using.</span>
                  </p>
                </div>
                <p id="ch20-idp44812240" data-type="indexterm" data-startref="ix_20-tools-asciidoc4" smilref="Programming_Robots_with_ROS00024.smil#ch20-idp44812240">While this example test is intentionally simple, the same techniques can be applied to build sophisticated tests for complex ROS systems. The structure of a good ROS test is similar to that found in other software testing: set up the system to be tested, optionally stimulate it with input, then verify some expected output.</p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Introspection: rosnode, rostopic, rosmsg, rosservice, and rossrv" id="section_000201">
              <h1 id="h1_000480" smilref="Programming_Robots_with_ROS00024.smil#h1_000480">Introspection: rosnode, rostopic, rosmsg, rosservice, and rossrv</h1>
              <div class="sect1" id="ch20-tools_introspection">
                <p id="ch20-ix_20-tools-asciidoc8" data-type="indexterm" data-primary="introspection, tools for" data-secondary="for introspection" smilref="Programming_Robots_with_ROS00024.smil#ch20-ix_20-tools-asciidoc8">A core design principle of ROS is that it should be possible from outside the system to see as much as possible of what's going on inside. This introspection capability is made possible by the fact that both the master and the nodes can be remotely interrogated with regard to their state. While you can conduct this interrogation directly in code, it's usually more convenient to use the command-line tools that we'll present in this section.</p>
                <p id="p_001452">
                  <span class="text" id="span_007684" smilref="Programming_Robots_with_ROS00024.smil#span_007684">To get started, let's define a simple system, consisting of a couple of nodes (</span>
                  <a data-type="xref" href="#ch20-listener_add_two_ints_server_launch" external="false" id="a_000399" smilref="Programming_Robots_with_ROS00024.smil#a_000399">Example 20-9</a>
                  <span class="text" id="span_007685" smilref="Programming_Robots_with_ROS00024.smil#span_007685">).</span>
                </p>
                <h1 id="h1_000481" smilref="Programming_Robots_with_ROS00024.smil#h1_000481">Example 20-9. listener_add_two_ints_server.launch</h1>
                <div id="ch20-listener_add_two_ints_server_launch" data-type="example">
                  <p id="p_001453">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_002104" smilref="Programming_Robots_with_ROS00024.smil#code_002104">&lt;launch&gt;
  &lt;node name="listener" pkg="rospy_tutorials"
        type="listener" output="screen" /&gt;
  &lt;node name="add_two_ints_server" pkg="rospy_tutorials"
        type="add_two_ints_server" output="screen" /&gt;
&lt;/launch&gt;</code>
                  </p>
                </div>
                <p id="p_001454">
                  <span class="text" id="span_007686" smilref="Programming_Robots_with_ROS00024.smil#span_007686">Save that code to a file called</span>
                  <em id="em_000468" smilref="Programming_Robots_with_ROS00024.smil#em_000468">listener_add_two_ints_server.launch</em>
                  <span class="text" id="span_007687" smilref="Programming_Robots_with_ROS00024.smil#span_007687">and launch it:</span>
                </p>
                <p id="p_001455">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_002105"><span class="text" id="span_007688" smilref="Programming_Robots_with_ROS00024.smil#span_007688">
user@hostname$ </span><strong id="strong_000224" smilref="Programming_Robots_with_ROS00024.smil#strong_000224">roslaunch listener_add_two_ints_server.launch</strong>
</code>
                </p>
                <p data-type="indexterm" data-primary="ROS command-line tools" data-secondary="rostopic" id="ch20-idp44712192">
                  <span class="text" id="span_007689" smilref="Programming_Robots_with_ROS00024.smil#span_007689">Now, imagine that you've just encountered this ROS system and you're trying to understand how it works. First let's see what topics are available, using</span>
                  <code xml:space="preserve" id="code_002106" smilref="Programming_Robots_with_ROS00024.smil#code_002106">rostopic list</code>
                  <span class="text" id="span_007690" smilref="Programming_Robots_with_ROS00024.smil#span_007690">:</span>
                </p>
                <p id="p_001456">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_002107"><span class="text" id="span_007691" smilref="Programming_Robots_with_ROS00024.smil#span_007691">
user@hostname$ </span><strong id="strong_000225" smilref="Programming_Robots_with_ROS00024.smil#strong_000225">rostopic list</strong><span class="text" id="span_007692" smilref="Programming_Robots_with_ROS00024.smil#span_007692">
/chatter
/rosout
/rosout_agg
</span></code>
                </p>
                <p id="p_001457">
                  <span class="text" id="span_007693" smilref="Programming_Robots_with_ROS00024.smil#span_007693">So, there's a</span>
                  <code xml:space="preserve" id="code_002108" smilref="Programming_Robots_with_ROS00024.smil#code_002108">chatter</code>
                  <span class="text" id="span_007694" smilref="Programming_Robots_with_ROS00024.smil#span_007694">topic (we'll ignore the</span>
                  <code xml:space="preserve" id="code_002109" smilref="Programming_Robots_with_ROS00024.smil#code_002109">/rosout</code>
                  <span class="text" id="span_007695" smilref="Programming_Robots_with_ROS00024.smil#span_007695">and</span>
                  <code xml:space="preserve" id="code_002110" smilref="Programming_Robots_with_ROS00024.smil#code_002110">/rosout_agg</code>
                  <span class="text" id="span_007696" smilref="Programming_Robots_with_ROS00024.smil#span_007696">for now; see</span>
                  <a data-type="xref" href="#ch21-debugging_rosout_agg" external="false" id="a_000400" smilref="Programming_Robots_with_ROS00024.smil#a_000400">"/rosout Versus /rosout_agg"</a>
                  <span class="text" id="span_007697" smilref="Programming_Robots_with_ROS00024.smil#span_007697">). Let's see what type of message it carries, using</span>
                  <code xml:space="preserve" id="code_002111" smilref="Programming_Robots_with_ROS00024.smil#code_002111">rostopic info</code>
                  <span class="text" id="span_007698" smilref="Programming_Robots_with_ROS00024.smil#span_007698">:</span>
                </p>
                <p id="p_001458">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_002112"><span class="text" id="span_007699" smilref="Programming_Robots_with_ROS00024.smil#span_007699">
user@hostname$ </span><strong id="strong_000226" smilref="Programming_Robots_with_ROS00024.smil#strong_000226">rostopic info chatter</strong><span class="text" id="span_007700" smilref="Programming_Robots_with_ROS00024.smil#span_007700">
Type: std_msgs/String

Publishers: None

Subscribers:
 * /listener (http://hostname:53752/)
</span></code>
                </p>
                <p data-type="indexterm" data-primary="ROS command-line tools" data-secondary="rosmsg" id="ch20-idp44857632">
                  <span class="text" id="span_007701" smilref="Programming_Robots_with_ROS00024.smil#span_007701">There's one subscriber to</span>
                  <code xml:space="preserve" id="code_002113" smilref="Programming_Robots_with_ROS00025.smil#code_002113">chatter</code>
                  <span class="text" id="span_007702" smilref="Programming_Robots_with_ROS00025.smil#span_007702">, and the message type is</span>
                  <code id="ch20-idp44858608" xml:space="preserve" smilref="Programming_Robots_with_ROS00025.smil#ch20-idp44858608">std_msgs/String</code>
                  <span class="text" id="span_007703" smilref="Programming_Robots_with_ROS00025.smil#span_007703">. Let's see what makes up that type, using</span>
                  <code xml:space="preserve" id="code_002114" smilref="Programming_Robots_with_ROS00025.smil#code_002114">rosmsg show</code>
                  <span class="text" id="span_007704" smilref="Programming_Robots_with_ROS00025.smil#span_007704">:</span>
                </p>
                <p id="p_001459">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_002115"><span class="text" id="span_007705" smilref="Programming_Robots_with_ROS00025.smil#span_007705">
user@hostname$ </span><strong id="strong_000227" smilref="Programming_Robots_with_ROS00025.smil#strong_000227">rosmsg show std_msgs/String</strong><span class="text" id="span_007706" smilref="Programming_Robots_with_ROS00025.smil#span_007706">
string data
</span></code>
                </p>
                <p id="p_001460">
                  <span class="text" id="span_007707" smilref="Programming_Robots_with_ROS00025.smil#span_007707">Now we know that there is one subscriber to the</span>
                  <code xml:space="preserve" id="code_002116" smilref="Programming_Robots_with_ROS00025.smil#code_002116">chatter</code>
                  <span class="text" id="span_007708" smilref="Programming_Robots_with_ROS00025.smil#span_007708">topic, named</span>
                  <code xml:space="preserve" id="code_002117" smilref="Programming_Robots_with_ROS00025.smil#code_002117">listener</code>
                  <span class="text" id="span_007709" smilref="Programming_Robots_with_ROS00025.smil#span_007709">, and that it is expecting to receive messages of type</span>
                  <code xml:space="preserve" id="code_002118" smilref="Programming_Robots_with_ROS00025.smil#code_002118">std_msgs/String</code>
                  <span class="text" id="span_007710" smilref="Programming_Robots_with_ROS00025.smil#span_007710">, each of which contains a field called</span>
                  <code xml:space="preserve" id="code_002119" smilref="Programming_Robots_with_ROS00025.smil#code_002119">data</code>
                  <span class="text" id="span_007711" smilref="Programming_Robots_with_ROS00025.smil#span_007711">that is of type</span>
                  <code xml:space="preserve" id="code_002120" smilref="Programming_Robots_with_ROS00025.smil#code_002120">string</code>
                  <span class="text" id="span_007712" smilref="Programming_Robots_with_ROS00025.smil#span_007712">. That's a lot of information to be able to gather at runtime, without any knowledge of how the system was configured. And it's enough information to allow us to publish a message to</span>
                  <code xml:space="preserve" id="code_002121" smilref="Programming_Robots_with_ROS00025.smil#code_002121">listener</code>
                  <span class="text" id="span_007713" smilref="Programming_Robots_with_ROS00025.smil#span_007713">on the</span>
                  <code xml:space="preserve" id="code_002122" smilref="Programming_Robots_with_ROS00025.smil#code_002122">chatter</code>
                  <span class="text" id="span_007714" smilref="Programming_Robots_with_ROS00025.smil#span_007714">topic, using</span>
                  <code xml:space="preserve" id="code_002123" smilref="Programming_Robots_with_ROS00025.smil#code_002123">rostopic pub</code>
                  <span class="text" id="span_007715" smilref="Programming_Robots_with_ROS00025.smil#span_007715">:</span>
                </p>
                <p id="p_001461">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_002124"><span class="text" id="span_007716" smilref="Programming_Robots_with_ROS00025.smil#span_007716">
user@hostname$ </span><strong id="strong_000228" smilref="Programming_Robots_with_ROS00025.smil#strong_000228">rostopic pub /chatter std_msgs/String\</strong>
  <strong id="strong_000229" smilref="Programming_Robots_with_ROS00025.smil#strong_000229">"{data: 'Hello world'}"</strong><span class="text" id="span_007717" smilref="Programming_Robots_with_ROS00025.smil#span_007717">
publishing and latching message. Press ctrl-C to terminate
</span></code>
                </p>
                <p id="p_001462">
                  <span class="text" id="span_007718" smilref="Programming_Robots_with_ROS00025.smil#span_007718">In the terminal where you ran</span>
                  <code xml:space="preserve" id="code_002125" smilref="Programming_Robots_with_ROS00025.smil#code_002125">roslaunch</code>
                  <span class="text" id="span_007719" smilref="Programming_Robots_with_ROS00025.smil#span_007719">, you should see a message from</span>
                  <code xml:space="preserve" id="code_002126" smilref="Programming_Robots_with_ROS00025.smil#code_002126">listener</code>
                  <span class="text" id="span_007720" smilref="Programming_Robots_with_ROS00025.smil#span_007720">confirming receipt of the message, similar to this:</span>
                </p>
                <p id="p_001463">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_002127" smilref="Programming_Robots_with_ROS00025.smil#code_002127">
[INFO] [WallTime: 1409524634.817011] /listener I heard Hello world
</code>
                </p>
                <p id="p_001464">
                  <span class="text" id="span_007721" smilref="Programming_Robots_with_ROS00025.smil#span_007721">The default behavior of</span>
                  <code xml:space="preserve" id="code_002128" smilref="Programming_Robots_with_ROS00025.smil#code_002128">rostopic pub</code>
                  <span class="text" id="span_007722" smilref="Programming_Robots_with_ROS00025.smil#span_007722">is to publish and latch a single message. But we can publish multiple messages by using the</span>
                  <code xml:space="preserve" id="code_002129" smilref="Programming_Robots_with_ROS00025.smil#code_002129">-r</code>
                  <span class="text" id="span_007723" smilref="Programming_Robots_with_ROS00025.smil#span_007723">option to specify the publication rate in Hz:</span>
                </p>
                <p id="p_001465">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_002130"><span class="text" id="span_007724" smilref="Programming_Robots_with_ROS00025.smil#span_007724">
user@hostname$ </span><strong id="strong_000230" smilref="Programming_Robots_with_ROS00025.smil#strong_000230">rostopic pub -r 10 /chatter std_msgs/String "{data: 'Hello world'}"</strong><span class="text" id="span_007725" smilref="Programming_Robots_with_ROS00025.smil#span_007725">
publishing and latching message. Press ctrl-C to terminate
</span></code>
                </p>
                <p id="p_001466">
                  <span class="text" id="span_007726" smilref="Programming_Robots_with_ROS00025.smil#span_007726">Back in the</span>
                  <code xml:space="preserve" id="code_002131" smilref="Programming_Robots_with_ROS00025.smil#code_002131">roslaunch</code>
                  <span class="text" id="span_007727" smilref="Programming_Robots_with_ROS00025.smil#span_007727">terminal, you should see a stream of console output from</span>
                  <code xml:space="preserve" id="code_002132" smilref="Programming_Robots_with_ROS00025.smil#code_002132">listener</code>
                  <span class="text" id="span_007728" smilref="Programming_Robots_with_ROS00025.smil#span_007728">, confirming receipt of each message.</span>
                </p>
                <h1 id="h1_000482" smilref="Programming_Robots_with_ROS00025.smil#h1_000482">Tip</h1>
                <div data-type="tip" id="div_000047">
                  <p data-type="indexterm" data-primary="YAML" data-secondary="and rostopic pub" id="ch20-idp44874944">
                    <span class="text" id="span_007729" smilref="Programming_Robots_with_ROS00025.smil#span_007729">Like</span>
                    <code xml:space="preserve" id="code_002133" smilref="Programming_Robots_with_ROS00025.smil#code_002133">rosparam set</code>
                    <span class="text" id="span_007730" smilref="Programming_Robots_with_ROS00025.smil#span_007730">,</span>
                    <code xml:space="preserve" id="code_002134" smilref="Programming_Robots_with_ROS00025.smil#code_002134">rostopic pub</code>
                    <span class="text" id="span_007731" smilref="Programming_Robots_with_ROS00025.smil#span_007731">accepts message data in YAML, which allows you to publish complicated message structures directly from the command line.</span>
                  </p>
                </div>
                <p data-type="indexterm" data-primary="ROS command-line tools" data-secondary="rosservice" id="ch20-idp44877472">
                  <span class="text" id="span_007732" smilref="Programming_Robots_with_ROS00025.smil#span_007732">So, we can introspect topics; now let's do the same for services. We start by listing the available services, using</span>
                  <code xml:space="preserve" id="code_002135" smilref="Programming_Robots_with_ROS00025.smil#code_002135">rosservice list</code>
                  <span class="text" id="span_007733" smilref="Programming_Robots_with_ROS00025.smil#span_007733">:</span>
                </p>
                <p id="p_001467">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_002136"><span class="text" id="span_007734" smilref="Programming_Robots_with_ROS00025.smil#span_007734">
user@hostname$ </span><strong id="strong_000231" smilref="Programming_Robots_with_ROS00025.smil#strong_000231">rosservice list</strong><span class="text" id="span_007735" smilref="Programming_Robots_with_ROS00025.smil#span_007735">
/add_two_ints
/add_two_ints_server/get_loggers
/add_two_ints_server/set_logger_level
/listener/get_loggers
/listener/set_logger_level
/rosout/get_loggers
/rosout/set_logger_level
</span></code>
                </p>
                <p id="p_001468">
                  <span class="text" id="span_007736" smilref="Programming_Robots_with_ROS00025.smil#span_007736">Let's learn more about that</span>
                  <code xml:space="preserve" id="code_002137" smilref="Programming_Robots_with_ROS00025.smil#code_002137">add_two_ints</code>
                  <span class="text" id="span_007737" smilref="Programming_Robots_with_ROS00025.smil#span_007737">service (we'll ignore the</span>
                  <code xml:space="preserve" id="code_002138" smilref="Programming_Robots_with_ROS00025.smil#code_002138">\logger</code>
                  <span class="text" id="span_007738" smilref="Programming_Robots_with_ROS00025.smil#span_007738">services for now; see</span>
                  <a data-type="xref" href="#ch21-debugging_logger_levels" external="false" id="a_000401" smilref="Programming_Robots_with_ROS00025.smil#a_000401">"Logger Levels"</a>
                  <span class="text" id="span_007739" smilref="Programming_Robots_with_ROS00025.smil#span_007739">), using</span>
                  <code xml:space="preserve" id="code_002139" smilref="Programming_Robots_with_ROS00025.smil#code_002139">rosservice
info</code>
                  <span class="text" id="span_007740" smilref="Programming_Robots_with_ROS00025.smil#span_007740">:</span>
                </p>
                <p id="p_001469">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_002140"><span class="text" id="span_007741" smilref="Programming_Robots_with_ROS00025.smil#span_007741">
user@hostname$ </span><strong id="strong_000232" smilref="Programming_Robots_with_ROS00025.smil#strong_000232">rosservice info /add_two_ints</strong><span class="text" id="span_007742" smilref="Programming_Robots_with_ROS00025.smil#span_007742">
Node: /add_two_ints_server
URI: rosrpc://localhost:53877
Type: rospy_tutorials/AddTwoInts
Args: a b
</span></code>
                </p>
                <p data-type="indexterm" data-primary="ROS command-line tools" data-secondary="rossrv" id="ch20-idp44724848">
                  <span class="text" id="span_007743" smilref="Programming_Robots_with_ROS00025.smil#span_007743">This service is being offered by the</span>
                  <code xml:space="preserve" id="code_002141" smilref="Programming_Robots_with_ROS00025.smil#code_002141">add_two_ints_server</code>
                  <span class="text" id="span_007744" smilref="Programming_Robots_with_ROS00025.smil#span_007744">node and is of type</span>
                  <code xml:space="preserve" id="code_002142" smilref="Programming_Robots_with_ROS00025.smil#code_002142">rospy_tutorials/AddTwoInts</code>
                  <span class="text" id="span_007745" smilref="Programming_Robots_with_ROS00025.smil#span_007745">. Let's see the request and response type definitions, using</span>
                  <code xml:space="preserve" id="code_002143" smilref="Programming_Robots_with_ROS00025.smil#code_002143">rossrv show</code>
                  <span class="text" id="span_007746" smilref="Programming_Robots_with_ROS00025.smil#span_007746">:</span>
                </p>
                <p id="p_001470">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_002144"><span class="text" id="span_007747" smilref="Programming_Robots_with_ROS00025.smil#span_007747">
user@hostname$ </span><strong id="strong_000233" smilref="Programming_Robots_with_ROS00025.smil#strong_000233">rossrv show rospy_tutorials/AddTwoInts</strong><span class="text" id="span_007748" smilref="Programming_Robots_with_ROS00025.smil#span_007748">
int64 a
int64 b
---
int64 sum
</span></code>
                </p>
                <p id="p_001471">
                  <span class="text" id="span_007749" smilref="Programming_Robots_with_ROS00025.smil#span_007749">Now we know that the</span>
                  <code xml:space="preserve" id="code_002145" smilref="Programming_Robots_with_ROS00025.smil#code_002145">add_two_ints_server</code>
                  <span class="text" id="span_007750" smilref="Programming_Robots_with_ROS00025.smil#span_007750">node is offering the</span>
                  <code xml:space="preserve" id="code_002146" smilref="Programming_Robots_with_ROS00025.smil#code_002146">add_two_ints</code>
                  <span class="text" id="span_007751" smilref="Programming_Robots_with_ROS00025.smil#span_007751">service, which is of type</span>
                  <code xml:space="preserve" id="code_002147" smilref="Programming_Robots_with_ROS00025.smil#code_002147">rospy_tutorials/AddTwoInts</code>
                  <span class="text" id="span_007752" smilref="Programming_Robots_with_ROS00025.smil#span_007752">, which accepts a request containing two integers and returns a response containing one integer. That's enough information to allow us to call the service directly, using</span>
                  <code xml:space="preserve" id="code_002148" smilref="Programming_Robots_with_ROS00025.smil#code_002148">rosservice call</code>
                  <span class="text" id="span_007753" smilref="Programming_Robots_with_ROS00025.smil#span_007753">:</span>
                </p>
                <p id="p_001472">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_002149"><span class="text" id="span_007754" smilref="Programming_Robots_with_ROS00025.smil#span_007754">
user@hostname$ </span><strong id="strong_000234" smilref="Programming_Robots_with_ROS00025.smil#strong_000234">rosservice call /add_two_ints "{a: 40, b: 2}"</strong><span class="text" id="span_007755" smilref="Programming_Robots_with_ROS00025.smil#span_007755">
sum: 42
</span></code>
                </p>
                <p id="p_001473">
                  <span class="text" id="span_007756" smilref="Programming_Robots_with_ROS00025.smil#span_007756">Back in the</span>
                  <code xml:space="preserve" id="code_002150" smilref="Programming_Robots_with_ROS00025.smil#code_002150">roslaunch</code>
                  <span class="text" id="span_007757" smilref="Programming_Robots_with_ROS00025.smil#span_007757">terminal, you should see some output from the</span>
                  <code xml:space="preserve" id="code_002151" smilref="Programming_Robots_with_ROS00025.smil#code_002151">add_two_ints_server</code>
                  <span class="text" id="span_007758" smilref="Programming_Robots_with_ROS00025.smil#span_007758">node as it processes the request:</span>
                </p>
                <p id="p_001474">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_002152" smilref="Programming_Robots_with_ROS00025.smil#code_002152">
Returning [40 + 2 = 42]
</code>
                </p>
                <p data-type="indexterm" data-primary="nodes" data-secondary="rosnode for inspecting" id="ch20-idp44734560">
                  <span class="text" id="span_007759" smilref="Programming_Robots_with_ROS00025.smil#span_007759">In addition to topics and services, we can introspect nodes directly, starting with</span>
                  <code xml:space="preserve" id="code_002153" smilref="Programming_Robots_with_ROS00025.smil#code_002153">rosnode list</code>
                  <span class="text" id="span_007760" smilref="Programming_Robots_with_ROS00025.smil#span_007760">:</span>
                </p>
                <p id="p_001475">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_002154"><span class="text" id="span_007761" smilref="Programming_Robots_with_ROS00025.smil#span_007761">
user@hostname$ </span><strong id="strong_000235" smilref="Programming_Robots_with_ROS00025.smil#strong_000235">rosnode list</strong><span class="text" id="span_007762" smilref="Programming_Robots_with_ROS00025.smil#span_007762">
/add_two_ints_server
/listener
/rosout
</span></code>
                </p>
                <p id="p_001476">
                  <span class="text" id="span_007763" smilref="Programming_Robots_with_ROS00025.smil#span_007763">We can see our two nodes,</span>
                  <code xml:space="preserve" id="code_002155" smilref="Programming_Robots_with_ROS00025.smil#code_002155">add_two_ints_server</code>
                  <span class="text" id="span_007764" smilref="Programming_Robots_with_ROS00025.smil#span_007764">and</span>
                  <code xml:space="preserve" id="code_002156" smilref="Programming_Robots_with_ROS00025.smil#code_002156">listener</code>
                  <span class="text" id="span_007765" smilref="Programming_Robots_with_ROS00025.smil#span_007765">(we'll ignore the</span>
                  <code xml:space="preserve" id="code_002157" smilref="Programming_Robots_with_ROS00025.smil#code_002157">rosout</code>
                  <span class="text" id="span_007766" smilref="Programming_Robots_with_ROS00025.smil#span_007766">node for now; see</span>
                  <a data-type="xref" href="#ch21-debugging_rosout_agg" external="false" id="a_000402" smilref="Programming_Robots_with_ROS00025.smil#a_000402">"/rosout Versus /rosout_agg"</a>
                  <span class="text" id="span_007767" smilref="Programming_Robots_with_ROS00025.smil#span_007767">). Let's get more details on the</span>
                  <code xml:space="preserve" id="code_002158" smilref="Programming_Robots_with_ROS00025.smil#code_002158">listener</code>
                  <span class="text" id="span_007768" smilref="Programming_Robots_with_ROS00025.smil#span_007768">node:</span>
                </p>
                <p id="p_001477">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_002159"><span class="text" id="span_007769" smilref="Programming_Robots_with_ROS00025.smil#span_007769">
user@hostname$ </span><strong id="strong_000236" smilref="Programming_Robots_with_ROS00025.smil#strong_000236">rosnode info listener</strong><span class="text" id="span_007770" smilref="Programming_Robots_with_ROS00025.smil#span_007770">
Node [/listener]
Publications:
 * /rosout [rosgraph_msgs/Log]

Subscriptions:
 * /chatter [unknown type]

Services:
 * /listener/set_logger_level
 * /listener/get_loggers


contacting node http://localhost:53866/ ...
Pid: 38875
Connections:
 * topic: /rosout
    * to: /rosout
    * direction: outbound
    * transport: TCPROS
</span></code>
                </p>
                <p id="p_001478">
                  <span class="text" id="span_007771" smilref="Programming_Robots_with_ROS00025.smil#span_007771">From this output, we can see the topics and services that are used by the node, as well as the active connections that exist between that node and others. We can check whether the node is responsive with</span>
                  <code xml:space="preserve" id="code_002160" smilref="Programming_Robots_with_ROS00025.smil#code_002160">rosnode ping</code>
                  <span class="text" id="span_007772" smilref="Programming_Robots_with_ROS00025.smil#span_007772">, similar to how we use</span>
                  <code xml:space="preserve" id="code_002161" smilref="Programming_Robots_with_ROS00025.smil#code_002161">ping</code>
                  <span class="text" id="span_007773" smilref="Programming_Robots_with_ROS00025.smil#span_007773">to check for a machine on the network:</span>
                </p>
                <p id="p_001479">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_002162"><span class="text" id="span_007774" smilref="Programming_Robots_with_ROS00025.smil#span_007774">
user@hostname$ </span><strong id="strong_000237" smilref="Programming_Robots_with_ROS00025.smil#strong_000237">rosnode ping listener</strong><span class="text" id="span_007775" smilref="Programming_Robots_with_ROS00025.smil#span_007775">
rosnode: node is [/listener]
pinging /listener with a timeout of 3.0s
xmlrpc reply from http://localhost:54055/ time=1.947880ms
xmlrpc reply from http://localhost:54055/ time=3.143072ms
xmlrpc reply from http://localhost:54055/ time=3.656149ms
</span></code>
                </p>
                <p id="p_001480">
                  <span class="text" id="span_007776" smilref="Programming_Robots_with_ROS00025.smil#span_007776">We can also remotely kill a node via</span>
                  <code xml:space="preserve" id="code_002163" smilref="Programming_Robots_with_ROS00025.smil#code_002163">rosnode kill</code>
                  <span class="text" id="span_007777" smilref="Programming_Robots_with_ROS00025.smil#span_007777">:</span>
                </p>
                <p id="p_001481">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_002164"><span class="text" id="span_007778" smilref="Programming_Robots_with_ROS00025.smil#span_007778">
user@hostname$ </span><strong id="strong_000238" smilref="Programming_Robots_with_ROS00025.smil#strong_000238">rosnode kill listener</strong><span class="text" id="span_007779" smilref="Programming_Robots_with_ROS00025.smil#span_007779">
killing /listener
killed
</span></code>
                </p>
                <p id="ch20-idp44750384" data-type="indexterm" data-startref="ix_20-tools-asciidoc8">
                  <span class="text" id="span_007780" smilref="Programming_Robots_with_ROS00025.smil#span_007780">Back in the</span>
                  <code xml:space="preserve" id="code_002165" smilref="Programming_Robots_with_ROS00025.smil#code_002165">roslaunch</code>
                  <span class="text" id="span_007781" smilref="Programming_Robots_with_ROS00025.smil#span_007781">console, you can see evidence of the node shutting down:</span>
                </p>
                <p id="p_001482">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_002166" smilref="Programming_Robots_with_ROS00025.smil#code_002166">
shutdown request: user request
[listener] process has finished cleanly
log file: /home/user/.ros/log/99e865f8-314c-11e4-bf3a-705681aea243/listener*.log
</code>
                </p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Summary" id="section_000202">
              <h1 id="h1_000483" smilref="Programming_Robots_with_ROS00025.smil#h1_000483">Summary</h1>
              <div class="sect1" id="ch20-idp44814464">
                <p id="p_001483">
                  <span class="text" id="span_007782" smilref="Programming_Robots_with_ROS00025.smil#span_007782">In this chapter, we covered the most commonly used ROS tools, learning along the way how to start, stop, configure, test, and introspect a ROS system. You now know what's happening under the hood when you run</span>
                  <code xml:space="preserve" id="code_002167" smilref="Programming_Robots_with_ROS00025.smil#code_002167">roscore</code>
                  <span class="text" id="span_007783" smilref="Programming_Robots_with_ROS00025.smil#span_007783">, how to view and modify parameters with</span>
                  <code xml:space="preserve" id="code_002168" smilref="Programming_Robots_with_ROS00025.smil#code_002168">rosparam</code>
                  <span class="text" id="span_007784" smilref="Programming_Robots_with_ROS00025.smil#span_007784">, how to get around your package directories with</span>
                  <code xml:space="preserve" id="code_002169" smilref="Programming_Robots_with_ROS00025.smil#code_002169">roscd</code>
                  <span class="text" id="span_007785" smilref="Programming_Robots_with_ROS00025.smil#span_007785">and</span>
                  <code xml:space="preserve" id="code_002170" smilref="Programming_Robots_with_ROS00025.smil#code_002170">rosed</code>
                  <span class="text" id="span_007786" smilref="Programming_Robots_with_ROS00025.smil#span_007786">, how to run a single node with</span>
                  <code xml:space="preserve" id="code_002171" smilref="Programming_Robots_with_ROS00025.smil#code_002171">rosrun</code>
                  <span class="text" id="span_007787" smilref="Programming_Robots_with_ROS00025.smil#span_007787">and multiple nodes with</span>
                  <code xml:space="preserve" id="code_002172" smilref="Programming_Robots_with_ROS00025.smil#code_002172">roslaunch</code>
                  <span class="text" id="span_007788" smilref="Programming_Robots_with_ROS00025.smil#span_007788">, and how to test a many-node system with</span>
                  <code xml:space="preserve" id="code_002173" smilref="Programming_Robots_with_ROS00025.smil#code_002173">rostest</code>
                  <span class="text" id="span_007789" smilref="Programming_Robots_with_ROS00025.smil#span_007789">. You also know how to combine</span>
                  <code xml:space="preserve" id="code_002174" smilref="Programming_Robots_with_ROS00025.smil#code_002174">rosnode</code>
                  <span class="text" id="span_007790" smilref="Programming_Robots_with_ROS00025.smil#span_007790">,</span>
                  <code xml:space="preserve" id="code_002175" smilref="Programming_Robots_with_ROS00025.smil#code_002175">rostopic</code>
                  <span class="text" id="span_007791" smilref="Programming_Robots_with_ROS00025.smil#span_007791">,</span>
                  <code xml:space="preserve" id="code_002176" smilref="Programming_Robots_with_ROS00025.smil#code_002176">rosmsg</code>
                  <span class="text" id="span_007792" smilref="Programming_Robots_with_ROS00025.smil#span_007792">,</span>
                  <code xml:space="preserve" id="code_002177" smilref="Programming_Robots_with_ROS00025.smil#code_002177">rosservice</code>
                  <span class="text" id="span_007793" smilref="Programming_Robots_with_ROS00025.smil#span_007793">, and</span>
                  <code xml:space="preserve" id="code_002178" smilref="Programming_Robots_with_ROS00025.smil#code_002178">rossrv</code>
                  <span class="text" id="span_007794" smilref="Programming_Robots_with_ROS00025.smil#span_007794">to gain an understanding of what's going on in a running ROS system, even when you don't have any a priori knowledge of how it's structured.</span>
                </p>
                <p id="ch20-idp44752592" data-type="indexterm" data-startref="ix_20-tools-asciidoc0" smilref="Programming_Robots_with_ROS00025.smil#ch20-idp44752592">These tools are a key part of the value of ROS and will contribute significantly to your efficiency as a developer of ROS software. In the next chapter, we'll focus on debugging techniques, revisiting some of the tools covered here and introducing some new ones.</p>
              </div>
            </section>
          </div>
        </section>
      </level1>
      <level1 id="ch21">
        <section xmlns:epub="http://www.idpf.org/2007/ops" data-type="chapter" epub:type="chapter" data-pdf-bookmark="Chapter 21. Debugging Robot Behavior" id="section_000203">
          <h1 id="h1_000484" smilref="Programming_Robots_with_ROS00025.smil#h1_000484">Chapter 21. Debugging Robot Behavior</h1>
          <div class="chapter" id="ch21-chapter_debugging">
            <p id="ch21-ix_21-debugging-asciidoc0" data-type="indexterm" data-primary="debugging" smilref="Programming_Robots_with_ROS00025.smil#ch21-ix_21-debugging-asciidoc0">As you've no doubt noticed by now, robotics applications can be complex. In addition to the usual complexity present in any software system, you have sensors and actuators that are interacting in uncertain ways with the physical (or simulated) world. And, at least in a ROS system, you have a distributed processing graph with many independent processes that are interacting asynchronously through message passing. In short, there are many ways for things to go wrong, and it can sometimes be tricky to figure out what the problem is.</p>
            <p id="p_001484" smilref="Programming_Robots_with_ROS00025.smil#p_001484">When you have everything ready, and you hit the "Go" button, and... nothing happens, what do you do?</p>
            <p id="p_001485" smilref="Programming_Robots_with_ROS00025.smil#p_001485">Fortunately, ROS provides some powerful tools to assist you in debugging your applications. In this chapter, we'll go over the most commonly used tools, providing some debugging technique suggestions along the way.</p>
            <section data-type="sect1" data-pdf-bookmark="Log Messages: /rosout and rqt_console" id="section_000204">
              <h1 id="h1_000485" smilref="Programming_Robots_with_ROS00025.smil#h1_000485">Log Messages: /rosout and rqt_console</h1>
              <div class="sect1" id="ch21-idp44764592">
                <p id="ch21-ix_21-debugging-asciidoc1" data-type="indexterm" data-primary="debugging" data-secondary="getting log messages" smilref="Programming_Robots_with_ROS00025.smil#ch21-ix_21-debugging-asciidoc1">Just as you would with any other software, when a ROS system isn't behaving properly, you should first check for error messages. If you're in luck, then some part of the system will be telling you exactly what's wrong. Of course, the distributed nature of a ROS system makes error message handling a little more complex than with a single program.</p>
                <p id="p_001486" smilref="Programming_Robots_with_ROS00025.smil#p_001486">If you're running a single program, you would reasonably expect to see error messages from that program pop up in a dialog window (if it's a graphical application, like a web browser) or be printed to the terminal where you ran the program (if it's a console application, like a compiler). But ROS is a distributed computing environment, with applications commonly comprising dozens of separate processes, the great majority of them lacking a graphical interface. How can you get error messages from all those processes?</p>
                <p id="p_001487">
                  <span class="text" id="span_007795" smilref="Programming_Robots_with_ROS00025.smil#span_007795">You could go check each terminal from which you started a node, but what if you started a whole bunch of nodes in one terminal with</span>
                  <code xml:space="preserve" id="code_002179" smilref="Programming_Robots_with_ROS00025.smil#code_002179">roslaunch</code>
                  <span class="text" id="span_007796" smilref="Programming_Robots_with_ROS00025.smil#span_007796">? Or what if you don't have access to the terminal where the nodes were started (e.g., if they were started on the robot as part of the boot sequence)? This situation is similar to that encountered by operating system services: they are started automatically, no one watches them, and yet they need a way to report errors. Operating systems solve this problem with a central message logging mechanism; for example, on Linux, most services log their messages to the file</span>
                  <em id="em_000469" smilref="Programming_Robots_with_ROS00025.smil#em_000469">/var/log/syslog</em>
                  <span class="text" id="span_007797" smilref="Programming_Robots_with_ROS00025.smil#span_007797">. That's close to what we need, but we further require the ability to see messages generated anywhere on the network.</span>
                </p>
                <section data-type="sect2" data-pdf-bookmark="Generating Log Messages: /rosout" id="section_000205">
                  <h1 id="h1_000486" smilref="Programming_Robots_with_ROS00025.smil#h1_000486">Generating Log Messages: /rosout</h1>
                  <div class="sect2" id="ch21-idp44772128">
                    <p data-type="indexterm" data-primary="/rosout, generating log messages with" id="ch21-ix_21-debugging-asciidoc5" data-secondary="and /rosout">
                      <span class="text" id="span_007798" smilref="Programming_Robots_with_ROS00025.smil#span_007798">How can we share log messages (which could be errors, warnings, debugging information, etc.) throughout a ROS system? Naturally, we'll use ROS topics. Specifically, there's a special ROS topic,</span>
                      <code xml:space="preserve" id="code_002180" smilref="Programming_Robots_with_ROS00025.smil#code_002180">/rosout</code>
                      <span class="text" id="span_007799" smilref="Programming_Robots_with_ROS00025.smil#span_007799">, that carries all log messages from all nodes. The</span>
                      <code id="ch21-ix_21-debugging-asciidoc3" xml:space="preserve" smilref="Programming_Robots_with_ROS00025.smil#ch21-ix_21-debugging-asciidoc3">/rosout</code>
                      <span class="text" id="span_007800" smilref="Programming_Robots_with_ROS00025.smil#span_007800">topic is of type</span>
                      <code id="ch21-ix_21-debugging-asciidoc4" xml:space="preserve" smilref="Programming_Robots_with_ROS00025.smil#ch21-ix_21-debugging-asciidoc4">rosgraph_msgs/Log</code>
                      <span class="text" id="span_007801" smilref="Programming_Robots_with_ROS00025.smil#span_007801">:</span>
                    </p>
                    <p id="p_001488">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_002181"><span class="text" id="span_007802" smilref="Programming_Robots_with_ROS00025.smil#span_007802">
user@hostname$ </span><strong id="strong_000239" smilref="Programming_Robots_with_ROS00025.smil#strong_000239">rosmsg show rosgraph_msgs/Log</strong><span class="text" id="span_007803" smilref="Programming_Robots_with_ROS00025.smil#span_007803">
byte DEBUG=1
byte INFO=2
byte WARN=4
byte ERROR=8
byte FATAL=16
std_msgs/Header header
  uint32 seq
  time stamp
  string frame_id
byte level
string name
string msg
string file
string function
uint32 line
string[] topics
</span></code>
                    </p>
                    <p id="p_001489">
                      <span class="text" id="span_007804" smilref="Programming_Robots_with_ROS00025.smil#span_007804">The</span>
                      <code xml:space="preserve" id="code_002182" smilref="Programming_Robots_with_ROS00025.smil#code_002182">rosgraph_msgs/Log</code>
                      <span class="text" id="span_007805" smilref="Programming_Robots_with_ROS00025.smil#span_007805">message is designed to allow any node to publish a log message so that it can be viewed by anyone else on the network. You can think of</span>
                      <code xml:space="preserve" id="code_002183" smilref="Programming_Robots_with_ROS00025.smil#code_002183">/rosout</code>
                      <span class="text" id="span_007806" smilref="Programming_Robots_with_ROS00025.smil#span_007806">as an enhanced</span>
                      <code xml:space="preserve" id="code_002184" smilref="Programming_Robots_with_ROS00025.smil#code_002184">print()</code>
                      <span class="text" id="span_007807" smilref="Programming_Robots_with_ROS00025.smil#span_007807">: instead of just printing a string to the console, you send that string, along with a bunch of useful metadata, to anyone who wants to know about it. In fact, a well-written ROS node won't use</span>
                      <code xml:space="preserve" id="code_002185" smilref="Programming_Robots_with_ROS00025.smil#code_002185">print()</code>
                      <span class="text" id="span_007808" smilref="Programming_Robots_with_ROS00025.smil#span_007808">at all, because those printed strings will be seen only by someone who happens to glance at the terminal where the node was started. Instead, ROS nodes publish their log messages to</span>
                      <code xml:space="preserve" id="code_002186" smilref="Programming_Robots_with_ROS00025.smil#code_002186">/rosout</code>
                      <span class="text" id="span_007809" smilref="Programming_Robots_with_ROS00025.smil#span_007809">so that they can be seen by anyone.</span>
                    </p>
                    <p id="p_001490">
                      <span class="text" id="span_007810" smilref="Programming_Robots_with_ROS00025.smil#span_007810">Of course, it would be unreasonable to expect developers to construct and publish a</span>
                      <code xml:space="preserve" id="code_002187" smilref="Programming_Robots_with_ROS00025.smil#code_002187">rosgraph_msgs/Log</code>
                      <span class="text" id="span_007811" smilref="Programming_Robots_with_ROS00025.smil#span_007811">message instead of just calling</span>
                      <code xml:space="preserve" id="code_002188" smilref="Programming_Robots_with_ROS00025.smil#code_002188">print()</code>
                      <span class="text" id="span_007812" smilref="Programming_Robots_with_ROS00025.smil#span_007812">. So, the</span>
                      <code xml:space="preserve" id="code_002189" smilref="Programming_Robots_with_ROS00025.smil#code_002189">rospy</code>
                      <span class="text" id="span_007813" smilref="Programming_Robots_with_ROS00025.smil#span_007813">client library provides functions that handle the</span>
                      <code xml:space="preserve" id="code_002190" smilref="Programming_Robots_with_ROS00025.smil#code_002190">rosgraph_msgs/Log</code>
                      <span class="text" id="span_007814" smilref="Programming_Robots_with_ROS00025.smil#span_007814">publishing but are as easy to use as</span>
                      <code xml:space="preserve" id="code_002191" smilref="Programming_Robots_with_ROS00025.smil#code_002191">print()</code>
                      <span class="text" id="span_007815" smilref="Programming_Robots_with_ROS00025.smil#span_007815">. For example, to warn of a potentially problematic power situation, you might do something like this:</span>
                    </p>
                    <p id="p_001491">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_002192" smilref="Programming_Robots_with_ROS00025.smil#code_002192">if battery_voltage &lt; 11.0:
  rospy.logwarn('Battery voltage low: %f'%(battery_voltage))</code>
                    </p>
                    <p id="p_001492">
                      <span class="text" id="span_007816" smilref="Programming_Robots_with_ROS00025.smil#span_007816">The</span>
                      <code xml:space="preserve" id="code_002193" smilref="Programming_Robots_with_ROS00025.smil#code_002193">rospy.logwarn()</code>
                      <span class="text" id="span_007817" smilref="Programming_Robots_with_ROS00025.smil#span_007817">function does three things:</span>
                    </p>
                    <list type="ul" id="list_000026">
                      <li id="li_000088">
                        <p id="p_001493" smilref="Programming_Robots_with_ROS00025.smil#p_001493">Prints a formatted version of the warning to the console</p>
                      </li>
                      <li id="li_000089">
                        <p id="p_001494">
                          <span class="text" id="span_007818" smilref="Programming_Robots_with_ROS00025.smil#span_007818">Prints a more detailed version of the warning to the node's own log file in</span>
                          <em id="em_000470" smilref="Programming_Robots_with_ROS00025.smil#em_000470">~/.ros/log</em>
                          <span class="text" id="span_007819" smilref="Programming_Robots_with_ROS00025.smil#span_007819">on the machine where it is running</span>
                        </p>
                      </li>
                      <li id="li_000090">
                        <p id="p_001495">
                          <span class="text" id="span_007820" smilref="Programming_Robots_with_ROS00025.smil#span_007820">Contructs and publishes to the</span>
                          <code xml:space="preserve" id="code_002194" smilref="Programming_Robots_with_ROS00025.smil#code_002194">/rosout</code>
                          <span class="text" id="span_007821" smilref="Programming_Robots_with_ROS00025.smil#span_007821">topic a message that contains the warning, plus useful metadata about the node in which it's called</span>
                        </p>
                      </li>
                    </list>
                    <p id="p_001496" smilref="Programming_Robots_with_ROS00025.smil#p_001496">The battery warning might look like this on the console where the node is started:</p>
                    <p id="p_001497">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_002195" smilref="Programming_Robots_with_ROS00025.smil#code_002195">[WARN] [WallTime: 1408299179.063983] Battery voltage low: 10.430000</code>
                    </p>
                    <p id="p_001498">
                      <span class="text" id="span_007822" smilref="Programming_Robots_with_ROS00025.smil#span_007822">It might look like this in the node's log file, assuming that the node is named</span>
                      <span class="keep-together" id="span_007823">
                        <code xml:space="preserve" id="code_002196" smilref="Programming_Robots_with_ROS00025.smil#code_002196">battery_monitor</code>
                      </span>
                      <span class="text" id="span_007824" smilref="Programming_Robots_with_ROS00025.smil#span_007824">:</span>
                    </p>
                    <p id="p_001499">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_002197"><span class="text" id="span_007825" smilref="Programming_Robots_with_ROS00025.smil#span_007825">
user@hostname$ </span><strong id="strong_000240" smilref="Programming_Robots_with_ROS00025.smil#strong_000240">tail -n 1 ~/.ros/log/battery_monitor.log</strong><span class="text" id="span_007826" smilref="Programming_Robots_with_ROS00025.smil#span_007826">
[rosout][WARNING] 2014-08-17 11:12:59,063: Battery voltage low: 10.430000
</span></code>
                    </p>
                    <p id="p_001500">
                      <span class="text" id="span_007827" smilref="Programming_Robots_with_ROS00025.smil#span_007827">And the corresponding</span>
                      <code xml:space="preserve" id="code_002198" smilref="Programming_Robots_with_ROS00025.smil#code_002198">/rosout</code>
                      <span class="text" id="span_007828" smilref="Programming_Robots_with_ROS00025.smil#span_007828">message that is published might look like this (the level is</span>
                      <code xml:space="preserve" id="code_002199" smilref="Programming_Robots_with_ROS00025.smil#code_002199">rospy.WARN=4</code>
                      <span class="text" id="span_007829" smilref="Programming_Robots_with_ROS00025.smil#span_007829">):</span>
                    </p>
                    <p id="p_001501">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_002200"><span class="text" id="span_007830" smilref="Programming_Robots_with_ROS00025.smil#span_007830">
user@hostname$ </span><strong id="strong_000241" smilref="Programming_Robots_with_ROS00025.smil#strong_000241">rostopic echo /rosout</strong><span class="text" id="span_007831" smilref="Programming_Robots_with_ROS00025.smil#span_007831">
header:
  seq: 1
  stamp:
    secs: 1408299179
    nsecs: 063983
  frame_id: ''
level: 4
name: /battery_monitor
msg: Battery voltage low: 10.430000
file: &lt;stdin&gt;
function: &lt;module&gt;
line: 2
topics: ['/rosout']
</span></code>
                    </p>
                    <p id="p_001502">
                      <span class="text" id="span_007832" smilref="Programming_Robots_with_ROS00025.smil#span_007832">In the</span>
                      <code xml:space="preserve" id="code_002201" smilref="Programming_Robots_with_ROS00025.smil#code_002201">rospy</code>
                      <span class="text" id="span_007833" smilref="Programming_Robots_with_ROS00025.smil#span_007833">client library, there is one logging function for each logger level (we'll learn more about logger levels in the next section), in order of increasing severity:</span>
                    </p>
                    <dl id="dl_000030">
                      <dt id="dt_000123">
                        <code xml:space="preserve" id="code_002202" smilref="Programming_Robots_with_ROS00025.smil#code_002202">rospy.logdebug()</code>
                      </dt>
                      <dd id="dd_000123">
                        <p id="p_001503" smilref="Programming_Robots_with_ROS00025.smil#p_001503">Debugging statements, which nobody needs to see when the system is working properly.</p>
                      </dd>
                      <dt id="dt_000124">
                        <code xml:space="preserve" id="code_002203" smilref="Programming_Robots_with_ROS00025.smil#code_002203">rospy.loginfo()</code>
                      </dt>
                      <dd id="dd_000124">
                        <p id="p_001504" smilref="Programming_Robots_with_ROS00025.smil#p_001504">Informational statements, which don't indicate a problem, but which might be helpful to users.</p>
                      </dd>
                      <dt id="dt_000125">
                        <code xml:space="preserve" id="code_002204" smilref="Programming_Robots_with_ROS00025.smil#code_002204">rospy.logwarn()</code>
                      </dt>
                      <dd id="dd_000125">
                        <p id="p_001505" smilref="Programming_Robots_with_ROS00025.smil#p_001505">Warnings, which users should probably know about because they may affect the behavior of the system, but which do not indicate a failure.</p>
                      </dd>
                      <dt id="dt_000126">
                        <code xml:space="preserve" id="code_002205" smilref="Programming_Robots_with_ROS00025.smil#code_002205">rospy.logerror()</code>
                      </dt>
                      <dd id="dd_000126">
                        <p id="p_001506" smilref="Programming_Robots_with_ROS00025.smil#p_001506">Errors, which users should know about because something has failed; however, the situation is recoverable.</p>
                      </dd>
                      <dt id="dt_000127">
                        <code xml:space="preserve" id="code_002206" smilref="Programming_Robots_with_ROS00025.smil#code_002206">rospy.logfatal()</code>
                      </dt>
                      <dd id="dd_000127">
                        <p id="p_001507" smilref="Programming_Robots_with_ROS00025.smil#p_001507">Fatal errors, which users should definitely know about because the situation is unrecoverable.</p>
                      </dd>
                    </dl>
                    <p id="ch21-idp44945984" data-type="indexterm" data-startref="ix_21-debugging-asciidoc5">
                      <span class="text" id="span_007834" smilref="Programming_Robots_with_ROS00025.smil#span_007834">When writing ROS code, you should always use one of the</span>
                      <code xml:space="preserve" id="code_002207" smilref="Programming_Robots_with_ROS00025.smil#code_002207">rospy.log*()</code>
                      <span class="text" id="span_007835" smilref="Programming_Robots_with_ROS00025.smil#span_007835">functions instead of calling</span>
                      <code xml:space="preserve" id="code_002208" smilref="Programming_Robots_with_ROS00025.smil#code_002208">print()</code>
                      <span class="text" id="span_007836" smilref="Programming_Robots_with_ROS00025.smil#span_007836">directly. They're just as easy to use as</span>
                      <code xml:space="preserve" id="code_002209" smilref="Programming_Robots_with_ROS00025.smil#code_002209">print()</code>
                      <span class="text" id="span_007837" smilref="Programming_Robots_with_ROS00025.smil#span_007837">, and they offer you a much greater ability to debug your system, as we'll see in the next section.</span>
                    </p>
                  </div>
                </section>
                <section data-type="sect2" data-pdf-bookmark="Logger Levels" id="section_000206">
                  <h1 id="h1_000487" smilref="Programming_Robots_with_ROS00025.smil#h1_000487">Logger Levels</h1>
                  <div class="sect2" id="ch21-debugging_logger_levels">
                    <p data-type="indexterm" data-primary="debugging" data-secondary="and logger levels" id="ch21-ix_21-debugging-asciidoc6">
                      <span class="text" id="span_007838" smilref="Programming_Robots_with_ROS00025.smil#span_007838">Each ROS node is configured with a</span>
                      <em id="em_000471" smilref="Programming_Robots_with_ROS00025.smil#em_000471">logger level</em>
                      <span class="text" id="span_007839" smilref="Programming_Robots_with_ROS00025.smil#span_007839">that controls how severe a log message must be for it to be printed, logged to a file, and published to</span>
                      <code id="ch21-ix_21-debugging-asciidoc7" xml:space="preserve" smilref="Programming_Robots_with_ROS00025.smil#ch21-ix_21-debugging-asciidoc7">/rosout</code>
                      <span class="text" id="span_007840" smilref="Programming_Robots_with_ROS00025.smil#span_007840">. The logger levels correspond to the logging functions explained in the previous section, in order of increasing severity:</span>
                      <code id="ch21-ix_21-debugging-asciidoc8" xml:space="preserve" smilref="Programming_Robots_with_ROS00025.smil#ch21-ix_21-debugging-asciidoc8">rospy.DEBUG</code>
                      <span class="text" id="span_007841" smilref="Programming_Robots_with_ROS00025.smil#span_007841">,</span>
                      <code id="ch21-idp44954512" xml:space="preserve" smilref="Programming_Robots_with_ROS00025.smil#ch21-idp44954512">rospy.INFO</code>
                      <span class="text" id="span_007842" smilref="Programming_Robots_with_ROS00025.smil#span_007842">,</span>
                      <code xml:space="preserve" id="code_002210" smilref="Programming_Robots_with_ROS00025.smil#code_002210">rospy.WARN</code>
                      <span class="text" id="span_007843" smilref="Programming_Robots_with_ROS00025.smil#span_007843">,</span>
                      <code xml:space="preserve" id="code_002211" smilref="Programming_Robots_with_ROS00025.smil#code_002211">rospy.ERROR</code>
                      <span class="text" id="span_007844" smilref="Programming_Robots_with_ROS00025.smil#span_007844">, and</span>
                      <code xml:space="preserve" id="code_002212" smilref="Programming_Robots_with_ROS00025.smil#code_002212">rospy.FATAL</code>
                      <span class="text" id="span_007845" smilref="Programming_Robots_with_ROS00025.smil#span_007845">.</span>
                    </p>
                    <p id="p_001508">
                      <span class="text" id="span_007846" smilref="Programming_Robots_with_ROS00025.smil#span_007846">The default logger level for a node is</span>
                      <code xml:space="preserve" id="code_002213" smilref="Programming_Robots_with_ROS00025.smil#code_002213">rospy.INFO</code>
                      <span class="text" id="span_007847" smilref="Programming_Robots_with_ROS00025.smil#span_007847">, which means that messages that are at least as severe as</span>
                      <code xml:space="preserve" id="code_002214" smilref="Programming_Robots_with_ROS00025.smil#code_002214">rospy.INFO</code>
                      <span class="text" id="span_007848" smilref="Programming_Robots_with_ROS00025.smil#span_007848">will be printed, logged, and published. As a result, by default,</span>
                      <code xml:space="preserve" id="code_002215" smilref="Programming_Robots_with_ROS00025.smil#code_002215">rospy.DEBUG</code>
                      <span class="text" id="span_007849" smilref="Programming_Robots_with_ROS00025.smil#span_007849">messages are suppressed: effectively,</span>
                      <code xml:space="preserve" id="code_002216" smilref="Programming_Robots_with_ROS00025.smil#code_002216">rospy.logdebug()</code>
                      <span class="text" id="span_007850" smilref="Programming_Robots_with_ROS00025.smil#span_007850">does nothing. You can think of it like the debug mode of a compiler or other tool: when you need detailed debug information, it's vital to be able to see it, but most of the time you don't want to be distracted by the extra output, nor do you want to pay the performance penalty associated with producing it. In ROS, the penalty is the time required to print to screen, write to file, and publish to</span>
                      <code xml:space="preserve" id="code_002217" smilref="Programming_Robots_with_ROS00025.smil#code_002217">/rosout</code>
                      <span class="text" id="span_007851" smilref="Programming_Robots_with_ROS00025.smil#span_007851">. Because for debug messages none of this work is done by default, you can make liberal use of</span>
                      <code xml:space="preserve" id="code_002218" smilref="Programming_Robots_with_ROS00025.smil#code_002218">rospy.logdebug()</code>
                      <span class="text" id="span_007852" smilref="Programming_Robots_with_ROS00025.smil#span_007852">in your code without any impact on the system except when someone asks to see those messages.</span>
                    </p>
                    <p id="p_001509">
                      <span class="text" id="span_007853" smilref="Programming_Robots_with_ROS00025.smil#span_007853">When you do want to see the debug messages from a node, you need to change its logger level. If you have access to the code, you can make this change by passing the</span>
                      <code xml:space="preserve" id="code_002219" smilref="Programming_Robots_with_ROS00025.smil#code_002219">log_level</code>
                      <span class="text" id="span_007854" smilref="Programming_Robots_with_ROS00025.smil#span_007854">keyword argument to</span>
                      <code xml:space="preserve" id="code_002220" smilref="Programming_Robots_with_ROS00025.smil#code_002220">rospy.init_node()</code>
                      <span class="text" id="span_007855" smilref="Programming_Robots_with_ROS00025.smil#span_007855">when initializing the node. For example:</span>
                    </p>
                    <p id="p_001510">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_002221" smilref="Programming_Robots_with_ROS00025.smil#code_002221">rospy.init_node('battery_monitor', log_level=rospy.DEBUG)</code>
                    </p>
                    <p id="p_001511">
                      <span class="text" id="span_007856" smilref="Programming_Robots_with_ROS00025.smil#span_007856">Following that initialization, the node will print, log, and publish messages that are at least as severe as</span>
                      <code xml:space="preserve" id="code_002222" smilref="Programming_Robots_with_ROS00025.smil#code_002222">rospy.DEBUG</code>
                      <span class="text" id="span_007857" smilref="Programming_Robots_with_ROS00025.smil#span_007857">(which is all log messages). Usually, you would make such a change temporarily, only while you're actively debugging a problem with the node.</span>
                    </p>
                    <p id="p_001512">
                      <span class="text" id="span_007858" smilref="Programming_Robots_with_ROS00025.smil#span_007858">You can also change the logger level in the other direction. For example, if your node is making a lot of calls to</span>
                      <code xml:space="preserve" id="code_002223" smilref="Programming_Robots_with_ROS00025.smil#code_002223">rospy.loginfo()</code>
                      <span class="text" id="span_007859" smilref="Programming_Robots_with_ROS00025.smil#span_007859">, and you want to focus on the warnings, then you could change its logger level to</span>
                      <code xml:space="preserve" id="code_002224" smilref="Programming_Robots_with_ROS00025.smil#code_002224">rospy.WARN</code>
                      <span class="text" id="span_007860" smilref="Programming_Robots_with_ROS00025.smil#span_007860">:</span>
                    </p>
                    <p id="p_001513">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_002225" smilref="Programming_Robots_with_ROS00025.smil#code_002225">rospy.init_node('battery_monitor', log_level=rospy.WARN)</code>
                    </p>
                    <p id="p_001514">
                      <span class="text" id="span_007861" smilref="Programming_Robots_with_ROS00025.smil#span_007861">Following that initialization, both</span>
                      <code xml:space="preserve" id="code_002226" smilref="Programming_Robots_with_ROS00025.smil#code_002226">rospy.DEBUG</code>
                      <span class="text" id="span_007862" smilref="Programming_Robots_with_ROS00025.smil#span_007862">and</span>
                      <code xml:space="preserve" id="code_002227" smilref="Programming_Robots_with_ROS00025.smil#code_002227">rospy.INFO</code>
                      <span class="text" id="span_007863" smilref="Programming_Robots_with_ROS00025.smil#span_007863">messages will be suppressed.</span>
                    </p>
                    <p data-type="indexterm" data-primary="rqt_* interfaces" data-secondary="rqt_logger_level" id="ch21-idp44969504">
                      <span class="text" id="span_007864" smilref="Programming_Robots_with_ROS00025.smil#span_007864">But it's not always convenient (or possible) to change the code in a node for debugging purposes, so ROS provides a service call mechanism for changing logger levels at runtime. Every ROS node advertises two services in its node namespace:</span>
                      <code xml:space="preserve" id="code_002228" smilref="Programming_Robots_with_ROS00025.smil#code_002228">get_ log gers</code>
                      <span class="text" id="span_007865" smilref="Programming_Robots_with_ROS00025.smil#span_007865">and</span>
                      <code xml:space="preserve" id="code_002229" smilref="Programming_Robots_with_ROS00025.smil#code_002229">set_logger_level</code>
                      <span class="text" id="span_007866" smilref="Programming_Robots_with_ROS00025.smil#span_007866">. As the names suggest, these services allow you to, respectively, get and set a node's logger configuration. While you can of course call these services directly (e.g., with the</span>
                      <code xml:space="preserve" id="code_002230" smilref="Programming_Robots_with_ROS00025.smil#code_002230">rosservice</code>
                      <span class="text" id="span_007867" smilref="Programming_Robots_with_ROS00025.smil#span_007867">command-line tool), it's easier and more practical in most situations to use</span>
                      <code xml:space="preserve" id="code_002231" smilref="Programming_Robots_with_ROS00025.smil#code_002231">rqt_logger_level</code>
                      <span class="text" id="span_007868" smilref="Programming_Robots_with_ROS00025.smil#span_007868">, a graphical tool that allows you to browse and configure the logger levels for all nodes in a ROS system. Let's try it out:</span>
                    </p>
                    <p id="p_001515">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_002232"><span class="text" id="span_007869" smilref="Programming_Robots_with_ROS00025.smil#span_007869">
user@hostname$ </span><strong id="strong_000242" smilref="Programming_Robots_with_ROS00025.smil#strong_000242">rqt_logger_level</strong>
</code>
                    </p>
                    <p id="p_001516">
                      <span class="text" id="span_007870" smilref="Programming_Robots_with_ROS00025.smil#span_007870">You'll see a window similar to the image in</span>
                      <a data-type="xref" href="#ch21-debugging_rqt_logger_level_screenshot" external="false" id="a_000403" smilref="Programming_Robots_with_ROS00025.smil#a_000403">Figure 21-1</a>
                      <span class="text" id="span_007871" smilref="Programming_Robots_with_ROS00025.smil#span_007871">.</span>
                    </p>
                    <p id="p_001517" smilref="Programming_Robots_with_ROS00025.smil#p_001517">Using this GUI, you can change the logger level of any currently running node: click on a node, then a logger within that node, then the desired level. The new level will persist for the lifetime of the node, or until someone else changes it. If the node is restarted, it will go back to its default logger level.</p>
                    <figure id="figure_000114">
                      <h1 id="h1_000488" smilref="Programming_Robots_with_ROS00025.smil#h1_000488">Figure 21-1. The rqt_logger_level GUI allows you to change the debugging logger level of any running ROS node</h1>
                      <div id="ch21-debugging_rqt_logger_level_screenshot" class="figure">
                        <img src="images/prwr_2101.jpg" alt="rqt_logger_level screenshot" id="img_000304" />
                      </div>
                    </figure>
                    <p class="keep-together" id="ch21-idp45045296" data-type="indexterm" data-startref="ix_21-debugging-asciidoc6">
                      <span class="text" id="span_007872" smilref="Programming_Robots_with_ROS00025.smil#span_007872">Using</span>
                      <code xml:space="preserve" id="code_002233" smilref="Programming_Robots_with_ROS00025.smil#code_002233">rqt_logger_level</code>
                      <span class="text" id="span_007873" smilref="Programming_Robots_with_ROS00025.smil#span_007873">(or the underlying</span>
                      <code xml:space="preserve" id="code_002234" smilref="Programming_Robots_with_ROS00025.smil#code_002234">get_loggers</code>
                      <span class="text" id="span_007874" smilref="Programming_Robots_with_ROS00025.smil#span_007874">service call), you'll notice that nodes expose multiple loggers, sometimes a dozen or more. That's because the log message mechanism is extensible, allowing the developer to create custom, even hierarchical loggers to organize the messages that are produced by different parts of a library or tool. Such custom use of log messages is beyond the scope of this book. For our purposes in debugging a ROS system, such as when configuring logger levels via</span>
                      <code xml:space="preserve" id="code_002235" smilref="Programming_Robots_with_ROS00025.smil#code_002235">rqt_logger_level</code>
                      <span class="text" id="span_007875" smilref="Programming_Robots_with_ROS00025.smil#span_007875">, you want to work with either the logger named</span>
                      <code xml:space="preserve" id="code_002236" smilref="Programming_Robots_with_ROS00025.smil#code_002236">rosout</code>
                      <span class="text" id="span_007876" smilref="Programming_Robots_with_ROS00025.smil#span_007876">(if the node was written in Python) or the logger named</span>
                      <code xml:space="preserve" id="code_002237" smilref="Programming_Robots_with_ROS00025.smil#code_002237">ros</code>
                      <span class="text" id="span_007877" smilref="Programming_Robots_with_ROS00025.smil#span_007877">(if the node was written in C++).</span>
                    </p>
                  </div>
                </section>
                <section data-type="sect2" data-pdf-bookmark="Reading Log Messages: rqt_console" id="section_000207">
                  <h1 id="h1_000489" smilref="Programming_Robots_with_ROS00025.smil#h1_000489">Reading Log Messages: rqt_console</h1>
                  <div class="sect2" id="ch21-idp44948576">
                    <p data-type="indexterm" data-primary="debugging" data-secondary="rqt_console" id="ch21-ix_21-debugging-asciidoc9">
                      <span class="text" id="span_007878" smilref="Programming_Robots_with_ROS00025.smil#span_007878">Now that we know how to generate log messages and configure logger levels, it's time to start reading the messages. As we've seen, nodes publish log messages to the</span>
                      <code xml:space="preserve" id="code_002238" smilref="Programming_Robots_with_ROS00025.smil#code_002238">/rosout</code>
                      <span class="text" id="span_007879" smilref="Programming_Robots_with_ROS00025.smil#span_007879">topic, so we could access those messages by reading</span>
                      <code id="ch21-ix_21-debugging-asciidoc10" xml:space="preserve" smilref="Programming_Robots_with_ROS00025.smil#ch21-ix_21-debugging-asciidoc10">/rosout</code>
                      <span class="text" id="span_007880" smilref="Programming_Robots_with_ROS00025.smil#span_007880">directly, either with a simple subscriber node or by calling</span>
                      <code id="ch21-ix_21-debugging-asciidoc11" xml:space="preserve" smilref="Programming_Robots_with_ROS00025.smil#ch21-ix_21-debugging-asciidoc11">rostopic echo /rosout</code>
                      <span class="text" id="span_007881" smilref="Programming_Robots_with_ROS00025.smil#span_007881">. But in a large ROS system, there will be many log messages flowing through the network, and we need a better way to access them.</span>
                    </p>
                    <p id="p_001518">
                      <span class="text" id="span_007882" smilref="Programming_Robots_with_ROS00025.smil#span_007882">For this purpose, ROS provides the graphical tool</span>
                      <code xml:space="preserve" id="code_002239" smilref="Programming_Robots_with_ROS00025.smil#code_002239">rqt_console</code>
                      <span class="text" id="span_007883" smilref="Programming_Robots_with_ROS00025.smil#span_007883">. You can launch it just like the other ROS tools:</span>
                    </p>
                    <p id="p_001519">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_002240"><span class="text" id="span_007884" smilref="Programming_Robots_with_ROS00025.smil#span_007884">
user@hostname$ </span><strong id="strong_000243" smilref="Programming_Robots_with_ROS00025.smil#strong_000243">rqt_console</strong>
</code>
                    </p>
                    <p id="p_001520">
                      <span class="text" id="span_007885" smilref="Programming_Robots_with_ROS00025.smil#span_007885">A window will pop up similar to the image in</span>
                      <a data-type="xref" href="#ch21-debugging_rqt_console_screenshot" external="false" id="a_000404" smilref="Programming_Robots_with_ROS00025.smil#a_000404">Figure 21-2</a>
                      <span class="text" id="span_007886" smilref="Programming_Robots_with_ROS00025.smil#span_007886">(in this case, we were running a simple node named</span>
                      <code xml:space="preserve" id="code_002241" smilref="Programming_Robots_with_ROS00025.smil#code_002241">battery_monitor</code>
                      <span class="text" id="span_007887" smilref="Programming_Robots_with_ROS00025.smil#span_007887">that called</span>
                      <code xml:space="preserve" id="code_002242" smilref="Programming_Robots_with_ROS00025.smil#code_002242">rospy.logwarn()</code>
                      <span class="text" id="span_007888" smilref="Programming_Robots_with_ROS00025.smil#span_007888">periodically in a loop).</span>
                    </p>
                    <figure id="figure_000115">
                      <h1 id="h1_000490" smilref="Programming_Robots_with_ROS00025.smil#h1_000490">Figure 21-2. The rqt_console GUI collects and displays debug messages from all running ROS nodes in one console</h1>
                      <div id="ch21-debugging_rqt_console_screenshot" class="figure">
                        <img src="images/prwr_2102.jpg" alt="rqt_console screenshot" id="img_000305" />
                      </div>
                    </figure>
                    <p id="p_001521">
                      <span class="text" id="span_007889" smilref="Programming_Robots_with_ROS00025.smil#span_007889">You can heavily customize your view into the log messages using</span>
                      <code xml:space="preserve" id="code_002243" smilref="Programming_Robots_with_ROS00025.smil#code_002243">rqt_console</code>
                      <span class="text" id="span_007890" smilref="Programming_Robots_with_ROS00025.smil#span_007890">. Here are some of the features that you're likely to find useful, especially when working with a large ROS system (there are many other features; check the</span>
                      <a href="http://wiki.ros.org/rqt_console" external="true" id="a_000405" smilref="Programming_Robots_with_ROS00025.smil#a_000405">documentation</a>
                      <span class="text" id="span_007891" smilref="Programming_Robots_with_ROS00025.smil#span_007891">and experiment with the interface to see what's possible):</span>
                    </p>
                    <list type="ul" id="list_000027">
                      <li id="li_000091">
                        <p id="p_001522" smilref="Programming_Robots_with_ROS00025.smil#p_001522">Pause and resume message display, useful when messages are scrolling by too quickly to see.</p>
                      </li>
                      <li id="li_000092">
                        <p id="p_001523" smilref="Programming_Robots_with_ROS00025.smil#p_001523">Clear the accumulated messages from the display, useful when retrying a failing operation.</p>
                      </li>
                      <li id="li_000093">
                        <p id="p_001524" smilref="Programming_Robots_with_ROS00025.smil#p_001524">Double-click on a message to pop up a window with the full content of that message, for easier inspection and copying to the clipboard.</p>
                      </li>
                      <li id="li_000094">
                        <p id="p_001525" smilref="Programming_Robots_with_ROS00025.smil#p_001525">Define filters to include or exclude messages from display based a variety of criteria, to allow you to focus on just errors, or just messages from one node, or any other criterion of interest.</p>
                      </li>
                      <li id="li_000095">
                        <p id="p_001526" smilref="Programming_Robots_with_ROS00025.smil#p_001526">Save accumulated messages to a file, for offline analysis.</p>
                      </li>
                    </list>
                    <p id="ch21-idp45070672" data-type="indexterm" data-startref="ix_21-debugging-asciidoc9">
                      <span class="text" id="span_007892" smilref="Programming_Robots_with_ROS00025.smil#span_007892">Your first step in debugging a misbehaving ROS system is to check for relevant messages (especially errors and warnings) with</span>
                      <code xml:space="preserve" id="code_002244" smilref="Programming_Robots_with_ROS00025.smil#code_002244">rqt_console</code>
                      <span class="text" id="span_007893" smilref="Programming_Robots_with_ROS00025.smil#span_007893">. In fact, any time you're running an ROS system comprising more than a couple of nodes, you should have</span>
                      <code xml:space="preserve" id="code_002245" smilref="Programming_Robots_with_ROS00025.smil#code_002245">rqt_console</code>
                      <span class="text" id="span_007894" smilref="Programming_Robots_with_ROS00025.smil#span_007894">up, so that you can quickly and easily consult it if something goes wrong. Note that</span>
                      <code xml:space="preserve" id="code_002246" smilref="Programming_Robots_with_ROS00025.smil#code_002246">rqt_console</code>
                      <span class="text" id="span_007895" smilref="Programming_Robots_with_ROS00025.smil#span_007895">can only display the messages that it has received since it started running; starting</span>
                      <code xml:space="preserve" id="code_002247" smilref="Programming_Robots_with_ROS00025.smil#code_002247">rqt_console</code>
                      <em id="em_000472" smilref="Programming_Robots_with_ROS00025.smil#em_000472">after</em>
                      <span class="text" id="span_007896" smilref="Programming_Robots_with_ROS00025.smil#span_007896">a problem occurs usually won't tell you anything about what caused the problem.</span>
                    </p>
                  </div>
                </section>
                <section data-type="sect2" data-pdf-bookmark="/rosout Versus /rosout_agg" id="section_000208">
                  <h1 id="h1_000491" smilref="Programming_Robots_with_ROS00025.smil#h1_000491">/rosout Versus /rosout_agg</h1>
                  <div class="sect2" id="ch21-debugging_rosout_agg">
                    <p id="p_001527">
                      <span class="text" id="span_007897" smilref="Programming_Robots_with_ROS00025.smil#span_007897">2107.140While nodes publish their log messages to</span>
                      <code xml:space="preserve" id="code_002248" smilref="Programming_Robots_with_ROS00025.smil#code_002248">/rosout</code>
                      <span class="text" id="span_007898" smilref="Programming_Robots_with_ROS00025.smil#span_007898">, if we look under the hood, we'll see that</span>
                      <code xml:space="preserve" id="code_002249" smilref="Programming_Robots_with_ROS00025.smil#code_002249">rqt_console</code>
                      <span class="text" id="span_007899" smilref="Programming_Robots_with_ROS00025.smil#span_007899">doesn't actually subscribe to that topic:</span>
                    </p>
                    <p id="p_001528">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_002250"><span class="text" id="span_007900" smilref="Programming_Robots_with_ROS00025.smil#span_007900">
user@hostname$ </span><strong id="strong_000244" smilref="Programming_Robots_with_ROS00025.smil#strong_000244">rosnode info rqt_console</strong><span class="text" id="span_007901" smilref="Programming_Robots_with_ROS00025.smil#span_007901">
Node [/rqt_console]
Publications:
 * /rosout [rosgraph_msgs/Log]

Subscriptions:
 * /rosout_agg [rosgraph_msgs/Log]
</span></code>
                    </p>
                    <p id="p_001529">
                      <span class="text" id="span_007902" smilref="Programming_Robots_with_ROS00025.smil#span_007902">So,</span>
                      <code xml:space="preserve" id="code_002251" smilref="Programming_Robots_with_ROS00025.smil#code_002251">rqt_console</code>
                      <span class="text" id="span_007903" smilref="Programming_Robots_with_ROS00025.smil#span_007903">is publishing to</span>
                      <code xml:space="preserve" id="code_002252" smilref="Programming_Robots_with_ROS00025.smil#code_002252">/rosout</code>
                      <span class="text" id="span_007904" smilref="Programming_Robots_with_ROS00025.smil#span_007904">(as do all ROS nodes), but it's subscribing to</span>
                      <code xml:space="preserve" id="code_002253" smilref="Programming_Robots_with_ROS00025.smil#code_002253">/rosout_agg</code>
                      <span class="text" id="span_007905" smilref="Programming_Robots_with_ROS00025.smil#span_007905">, a different topic of the same type (</span>
                      <code xml:space="preserve" id="code_002254" smilref="Programming_Robots_with_ROS00025.smil#code_002254">rosgraph_msgs/Log</code>
                      <span class="text" id="span_007906" smilref="Programming_Robots_with_ROS00025.smil#span_007906">). Why is that? To understand the reason, consider a large ROS system, with a hundred nodes running on multiple machines (this situation is not uncommon with complex robots such as the Willow Garage PR2). Each of those hundred nodes is publishing log messages to</span>
                      <code xml:space="preserve" id="code_002255" smilref="Programming_Robots_with_ROS00025.smil#code_002255">/rosout</code>
                      <span class="text" id="span_007907" smilref="Programming_Robots_with_ROS00025.smil#span_007907">. To receive those messages, you need to establish a connection to each node. The time required to establish each connection is small, but when you do it a hundred times, the total time is not small. If a tool like</span>
                      <code xml:space="preserve" id="code_002256" smilref="Programming_Robots_with_ROS00025.smil#code_002256">rqt_console</code>
                      <span class="text" id="span_007908" smilref="Programming_Robots_with_ROS00025.smil#span_007908">had to connect individually to each node, the delay during startup would be unacceptable: you might wait tens of seconds while the connections were established, and to complicate matters, along the way you would see messages from some nodes but not others, which could be misleading.</span>
                    </p>
                    <p id="ch21-idp45086912" data-type="indexterm" data-startref="ix_21-debugging-asciidoc1">
                      <span class="text" id="span_007909" smilref="Programming_Robots_with_ROS00025.smil#span_007909">To avoid this sort of startup delay and lack of determinism, ROS provides a node called</span>
                      <code xml:space="preserve" id="code_002257" smilref="Programming_Robots_with_ROS00025.smil#code_002257">rosout</code>
                      <span class="text" id="span_007910" smilref="Programming_Robots_with_ROS00025.smil#span_007910">(which shouldn't be confused with the topic by the same name,</span>
                      <span class="keep-together" id="span_007911">
                        <code xml:space="preserve" id="code_002258" smilref="Programming_Robots_with_ROS00025.smil#code_002258">/rosout</code>
                      </span>
                      <span class="text" id="span_007912" smilref="Programming_Robots_with_ROS00025.smil#span_007912">). The job of</span>
                      <code xml:space="preserve" id="code_002259" smilref="Programming_Robots_with_ROS00025.smil#code_002259">rosout</code>
                      <span class="text" id="span_007913" smilref="Programming_Robots_with_ROS00025.smil#span_007913">is to subscribe to</span>
                      <code xml:space="preserve" id="code_002260" smilref="Programming_Robots_with_ROS00025.smil#code_002260">/rosout</code>
                      <span class="text" id="span_007914" smilref="Programming_Robots_with_ROS00025.smil#span_007914">, taking in log messages via direct connections to all nodes in the system, then republish those messages on an aggregation topic,</span>
                      <code xml:space="preserve" id="code_002261" smilref="Programming_Robots_with_ROS00025.smil#code_002261">/rosout_agg</code>
                      <span class="text" id="span_007915" smilref="Programming_Robots_with_ROS00025.smil#span_007915">. The</span>
                      <code xml:space="preserve" id="code_002262" smilref="Programming_Robots_with_ROS00025.smil#code_002262">rosout</code>
                      <span class="text" id="span_007916" smilref="Programming_Robots_with_ROS00025.smil#span_007916">node is started automatically for every ROS system as part of</span>
                      <code xml:space="preserve" id="code_002263" smilref="Programming_Robots_with_ROS00025.smil#code_002263">roscore</code>
                      <span class="text" id="span_007917" smilref="Programming_Robots_with_ROS00025.smil#span_007917">. As a result,</span>
                      <code xml:space="preserve" id="code_002264" smilref="Programming_Robots_with_ROS00025.smil#code_002264">rosout</code>
                      <span class="text" id="span_007918" smilref="Programming_Robots_with_ROS00025.smil#span_007918">is already up and running before any other node, and so can establish</span>
                      <code xml:space="preserve" id="code_002265" smilref="Programming_Robots_with_ROS00025.smil#code_002265">/rosout</code>
                      <span class="text" id="span_007919" smilref="Programming_Robots_with_ROS00025.smil#span_007919">connections to other nodes as they are started. Later, when a tool like</span>
                      <code xml:space="preserve" id="code_002266" smilref="Programming_Robots_with_ROS00025.smil#code_002266">rqt_console</code>
                      <span class="text" id="span_007920" smilref="Programming_Robots_with_ROS00025.smil#span_007920">starts, it need only make a single connection to the</span>
                      <code xml:space="preserve" id="code_002267" smilref="Programming_Robots_with_ROS00025.smil#code_002267">rosout</code>
                      <span class="text" id="span_007921" smilref="Programming_Robots_with_ROS00025.smil#span_007921">node over the</span>
                      <code xml:space="preserve" id="code_002268" smilref="Programming_Robots_with_ROS00025.smil#code_002268">/rosout_agg</code>
                      <span class="text" id="span_007922" smilref="Programming_Robots_with_ROS00025.smil#span_007922">topic, after which it will immediately begin receiving the aggregated log messages from all nodes in the system.</span>
                    </p>
                  </div>
                </section>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Nodes, Topics, and Connections: rqt_graph and rosnode" id="section_000209">
              <h1 id="h1_000492" smilref="Programming_Robots_with_ROS00025.smil#h1_000492">Nodes, Topics, and Connections: rqt_graph and rosnode</h1>
              <div class="sect1" id="ch21-debugging_connections">
                <p data-type="indexterm" data-primary="debugging" data-secondary="node connection problems" id="ch21-ix_21-debugging-asciidoc12">
                  <span class="text" id="span_007923" smilref="Programming_Robots_with_ROS00025.smil#span_007923">In the previous section, we learned the first rule of ROS debugging: always check for error messages using</span>
                  <code xml:space="preserve" id="code_002269" smilref="Programming_Robots_with_ROS00025.smil#code_002269">rqt_console</code>
                  <span class="text" id="span_007924" smilref="Programming_Robots_with_ROS00025.smil#span_007924">. Very often, when your robot refuses to move, somewhere in the system there's a node complaining about the underlying cause of the problem (e.g., "No laser scans received; is the sensor powered and connected to the computer?"). But it's not always that obvious.</span>
                </p>
                <p id="p_001530" smilref="Programming_Robots_with_ROS00025.smil#p_001530">A frequent cause of problems in a ROS system is missing or otherwise incorrect connections between nodes. In this section, we'll learn how to debug such problems, then walk through some situations that commonly arise.</p>
                <section data-type="sect2" data-pdf-bookmark="Visualizing the Graph: rqt_graph" id="section_000210">
                  <h1 id="h1_000493" smilref="Programming_Robots_with_ROS00025.smil#h1_000493">Visualizing the Graph: rqt_graph</h1>
                  <div class="sect2" id="ch21-idp45093088">
                    <p data-type="indexterm" data-primary="debugging" data-secondary="graph visualization" id="ch21-ix_21-debugging-asciidoc14">
                      <span class="text" id="span_007925" smilref="Programming_Robots_with_ROS00025.smil#span_007925">If you suspect that something is wrong with the connections in your system, your first step is to run</span>
                      <code xml:space="preserve" id="code_002270" smilref="Programming_Robots_with_ROS00025.smil#code_002270">rqt_graph</code>
                      <span class="text" id="span_007926" smilref="Programming_Robots_with_ROS00025.smil#span_007926">, a graphical tool that queries and visualizes nodes and topics. To see how it works, let's start a pair of nodes that will communicate with each other. Start a</span>
                      <code id="ch21-ix_21-debugging-asciidoc15" xml:space="preserve" smilref="Programming_Robots_with_ROS00025.smil#ch21-ix_21-debugging-asciidoc15">roscore</code>
                      <span class="text" id="span_007927" smilref="Programming_Robots_with_ROS00025.smil#span_007927">, then start an instance of</span>
                      <code id="ch21-ix_21-debugging-asciidoc16" xml:space="preserve" smilref="Programming_Robots_with_ROS00025.smil#ch21-ix_21-debugging-asciidoc16">rostopic</code>
                      <span class="text" id="span_007928" smilref="Programming_Robots_with_ROS00025.smil#span_007928">to publish a string on the</span>
                      <code id="ch21-ix_21-debugging-asciidoc17" xml:space="preserve" smilref="Programming_Robots_with_ROS00025.smil#ch21-ix_21-debugging-asciidoc17">chatter</code>
                      <span class="text" id="span_007929" smilref="Programming_Robots_with_ROS00025.smil#span_007929">topic, once per second (for clarity of demonstration, we're explicitly setting the node names using the</span>
                      <code xml:space="preserve" id="code_002271" smilref="Programming_Robots_with_ROS00025.smil#code_002271">__name</code>
                      <span class="text" id="span_007930" smilref="Programming_Robots_with_ROS00025.smil#span_007930">argument so as to override the random names that would otherwise be generated to avoid name conflicts):</span>
                    </p>
                    <p id="p_001531">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_002272"><span class="text" id="span_007931" smilref="Programming_Robots_with_ROS00025.smil#span_007931">
user@hostname$ </span><strong id="strong_000245" smilref="Programming_Robots_with_ROS00025.smil#strong_000245">rostopic pub /chatter std_msgs/String \
  -r 1 "Hello world" __name:=talker</strong>
</code>
                    </p>
                    <p class="pagebreak-before" id="p_001532">
                      <span class="text" id="span_007932" smilref="Programming_Robots_with_ROS00025.smil#span_007932">In another terminal, start another instance of</span>
                      <code xml:space="preserve" id="code_002273" smilref="Programming_Robots_with_ROS00025.smil#code_002273">rostopic</code>
                      <span class="text" id="span_007933" smilref="Programming_Robots_with_ROS00025.smil#span_007933">to listen to the</span>
                      <code xml:space="preserve" id="code_002274" smilref="Programming_Robots_with_ROS00025.smil#code_002274">chatter</code>
                      <span class="text" id="span_007934" smilref="Programming_Robots_with_ROS00025.smil#span_007934">topic and print the received messages to console:</span>
                    </p>
                    <p id="p_001533">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_002275"><span class="text" id="span_007935" smilref="Programming_Robots_with_ROS00025.smil#span_007935">
user@hostname$ </span><strong id="strong_000246" smilref="Programming_Robots_with_ROS00025.smil#strong_000246">rostopic echo /chatter __name:=listener</strong>
</code>
                    </p>
                    <p id="p_001534">
                      <span class="text" id="span_007936" smilref="Programming_Robots_with_ROS00025.smil#span_007936">Now start</span>
                      <code xml:space="preserve" id="code_002276" smilref="Programming_Robots_with_ROS00025.smil#code_002276">rqt_graph</code>
                      <span class="text" id="span_007937" smilref="Programming_Robots_with_ROS00025.smil#span_007937">:</span>
                    </p>
                    <p id="p_001535">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_002277"><span class="text" id="span_007938" smilref="Programming_Robots_with_ROS00025.smil#span_007938">
user@hostname$ </span><strong id="strong_000247" smilref="Programming_Robots_with_ROS00025.smil#strong_000247">rqt_graph __name:=rqt_graph</strong>
</code>
                    </p>
                    <p id="p_001536">
                      <span class="text" id="span_007939" smilref="Programming_Robots_with_ROS00025.smil#span_007939">A window will pop up similar to the image in</span>
                      <a data-type="xref" href="#ch21-debugging_rqt_graph_screenshot" external="false" id="a_000406" smilref="Programming_Robots_with_ROS00025.smil#a_000406">Figure 21-3</a>
                      <span class="text" id="span_007940" smilref="Programming_Robots_with_ROS00025.smil#span_007940">.</span>
                    </p>
                    <figure id="figure_000116">
                      <h1 id="h1_000494" smilref="Programming_Robots_with_ROS00025.smil#h1_000494">Figure 21-3. The rqt_graph GUI shows the current state of nodes and topics in a running ROS system</h1>
                      <div id="ch21-debugging_rqt_graph_screenshot" class="figure">
                        <img src="images/prwr_2103.jpg" alt="rqt_graph screenshot" id="img_000306" />
                      </div>
                    </figure>
                    <p id="p_001537" smilref="Programming_Robots_with_ROS00025.smil#p_001537">The nodes are displayed as ovals and the topics as boxes, with arrows showing the direction of the flow of messages. This display is the best way to get a high-level view of the structure of your system. As with the other graphical ROS tools, there are a variety of ways to configure the presentation of the data, some of which we'll explore in the upcoming sections.</p>
                    <p id="p_001538">
                      <span class="text" id="span_007941" smilref="Programming_Robots_with_ROS00025.smil#span_007941">First, let's get a view of the</span>
                      <em id="em_000473" smilref="Programming_Robots_with_ROS00025.smil#em_000473">entire</em>
                      <span class="text" id="span_007942" smilref="Programming_Robots_with_ROS00025.smil#span_007942">system: in the drop-down in the upper-left corner, select "Nodes/Topics (all)," then uncheck the boxes for "Hide dead sinks" and "Hide debug." The resulting graph looks like the image in</span>
                      <a data-type="xref" href="#ch21-debugging_rqt_graph_all_screenshot" external="false" id="a_000407" smilref="Programming_Robots_with_ROS00025.smil#a_000407">Figure 21-4</a>
                      <span class="text" id="span_007943" smilref="Programming_Robots_with_ROS00025.smil#span_007943">.</span>
                    </p>
                    <p id="ch21-idp45146128" data-type="indexterm" data-startref="ix_21-debugging-asciidoc14">
                      <span class="text" id="span_007944" smilref="Programming_Robots_with_ROS00025.smil#span_007944">Now we can see the</span>
                      <code xml:space="preserve" id="code_002278" smilref="Programming_Robots_with_ROS00025.smil#code_002278">rosout</code>
                      <span class="text" id="span_007945" smilref="Programming_Robots_with_ROS00025.smil#span_007945">node mentioned in the previous section, along with the</span>
                      <span class="keep-together" id="span_007946">
                        <code xml:space="preserve" id="code_002279" smilref="Programming_Robots_with_ROS00025.smil#code_002279">/rosout_agg</code>
                      </span>
                      <span class="text" id="span_007947" smilref="Programming_Robots_with_ROS00025.smil#span_007947">topic that it publishes for use by tools like</span>
                      <code xml:space="preserve" id="code_002280" smilref="Programming_Robots_with_ROS00025.smil#code_002280">rqt_console</code>
                      <span class="text" id="span_007948" smilref="Programming_Robots_with_ROS00025.smil#span_007948">. We also see</span>
                      <code xml:space="preserve" id="code_002281" smilref="Programming_Robots_with_ROS00025.smil#code_002281">rqt_graph</code>
                      <span class="text" id="span_007949" smilref="Programming_Robots_with_ROS00025.smil#span_007949">itself. In most cases, the default view, which hides these system nodes and topics, is appropriate, but it's good to know how to see</span>
                      <em id="em_000474" smilref="Programming_Robots_with_ROS00025.smil#em_000474">all</em>
                      <span class="text" id="span_007950" smilref="Programming_Robots_with_ROS00025.smil#span_007950">of what's going on.</span>
                    </p>
                    <figure id="figure_000117">
                      <h1 id="h1_000495" smilref="Programming_Robots_with_ROS00025.smil#h1_000495">Figure 21-4. The options in rqt_graph allow you to reveal more or less about a running ROS system</h1>
                      <div id="ch21-debugging_rqt_graph_all_screenshot" class="figure">
                        <img src="images/prwr_2104.jpg" alt="rqt_graph screenshot with debug enabled" id="img_000307" />
                      </div>
                    </figure>
                  </div>
                </section>
                <section data-type="sect2" data-pdf-bookmark="Problem: Mismatched Topic Names" id="section_000211">
                  <h1 id="h1_000496" smilref="Programming_Robots_with_ROS00025.smil#h1_000496">Problem: Mismatched Topic Names</h1>
                  <div class="sect2" id="ch21-idp45093712">
                    <p data-type="indexterm" data-primary="debugging" data-secondary="mismatched topic names" id="ch21-idp45149888">
                      <span class="text" id="span_007951" smilref="Programming_Robots_with_ROS00025.smil#span_007951">With the</span>
                      <code xml:space="preserve" id="code_002282" smilref="Programming_Robots_with_ROS00025.smil#code_002282">talker</code>
                      <span class="text" id="span_007952" smilref="Programming_Robots_with_ROS00025.smil#span_007952">,</span>
                      <code id="ch21-idp45151088" xml:space="preserve" smilref="Programming_Robots_with_ROS00025.smil#ch21-idp45151088">listener</code>
                      <span class="text" id="span_007953" smilref="Programming_Robots_with_ROS00025.smil#span_007953">, and</span>
                      <code xml:space="preserve" id="code_002283" smilref="Programming_Robots_with_ROS00025.smil#code_002283">rqt_graph</code>
                      <span class="text" id="span_007954" smilref="Programming_Robots_with_ROS00025.smil#span_007954">nodes still running, let's add another publisher for</span>
                      <code xml:space="preserve" id="code_002284" smilref="Programming_Robots_with_ROS00025.smil#code_002284">/chatter</code>
                      <span class="text" id="span_007955" smilref="Programming_Robots_with_ROS00025.smil#span_007955">. This time, though, we'll misspell the topic name:</span>
                    </p>
                    <p id="p_001539">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_002285"><span class="text" id="span_007956" smilref="Programming_Robots_with_ROS00025.smil#span_007956">
user@hostname$ </span><strong id="strong_000248" smilref="Programming_Robots_with_ROS00025.smil#strong_000248">rostopic pub /chatter std_msgs/String -r 1 "Hello world 2" \
  __name:=talker2</strong>
</code>
                    </p>
                    <p id="p_001540">
                      <span class="text" id="span_007957" smilref="Programming_Robots_with_ROS00025.smil#span_007957">Click the refresh button in</span>
                      <code xml:space="preserve" id="code_002286" smilref="Programming_Robots_with_ROS00025.smil#code_002286">rqt_graph</code>
                      <span class="text" id="span_007958" smilref="Programming_Robots_with_ROS00025.smil#span_007958">, then select "Hide debug." You'll see something like the image in</span>
                      <a data-type="xref" href="#ch21-debugging_rqt_graph_misspelled_screenshot" external="false" id="a_000408" smilref="Programming_Robots_with_ROS00025.smil#a_000408">Figure 21-5</a>
                      <span class="text" id="span_007959" smilref="Programming_Robots_with_ROS00025.smil#span_007959">.</span>
                    </p>
                    <p id="p_001541">
                      <span class="text" id="span_007960" smilref="Programming_Robots_with_ROS00025.smil#span_007960">From this view, it's clear what the problem is with the topic names. While in this case, it's a simple misspelling, more often it's a mismatch in naming convention (e.g.,</span>
                      <code xml:space="preserve" id="code_002287" smilref="Programming_Robots_with_ROS00025.smil#code_002287">laser</code>
                      <span class="text" id="span_007961" smilref="Programming_Robots_with_ROS00025.smil#span_007961">vs.</span>
                      <code xml:space="preserve" id="code_002288" smilref="Programming_Robots_with_ROS00025.smil#code_002288">lidar</code>
                      <span class="text" id="span_007962" smilref="Programming_Robots_with_ROS00026.smil#span_007962">) or specificity (e.g.,</span>
                      <code xml:space="preserve" id="code_002289" smilref="Programming_Robots_with_ROS00026.smil#code_002289">camera</code>
                      <span class="text" id="span_007963" smilref="Programming_Robots_with_ROS00026.smil#span_007963">vs.</span>
                      <code xml:space="preserve" id="code_002290" smilref="Programming_Robots_with_ROS00026.smil#code_002290">head_camera</code>
                      <span class="text" id="span_007964" smilref="Programming_Robots_with_ROS00026.smil#span_007964">). But the result is the same: a publisher/subscriber pair that you expect to be connected are not, because they disagree on the name of the topic over which they should be communicating. Diagnosing this problem is most easily done with</span>
                      <code xml:space="preserve" id="code_002291" smilref="Programming_Robots_with_ROS00026.smil#code_002291">rqt_graph</code>
                      <span class="text" id="span_007965" smilref="Programming_Robots_with_ROS00026.smil#span_007965">, wherein the disconnected topics are easy to pick out. Having diagnosed the problem, the fix depends on how the system is structured: while code changes might be required, more often it's a matter of changing the topic name remapping arguments that were passed to one node or the other (in complex systems, those remapping arguments are stored in</span>
                      <code xml:space="preserve" id="code_002292" smilref="Programming_Robots_with_ROS00026.smil#code_002292">roslaunch</code>
                      <span class="text" id="span_007966" smilref="Programming_Robots_with_ROS00026.smil#span_007966">files).</span>
                    </p>
                    <figure id="figure_000118">
                      <h1 id="h1_000497" smilref="Programming_Robots_with_ROS00026.smil#h1_000497">Figure 21-5. A missing connection caused by a misspelled topic name can be seen clearly in rqt_graph</h1>
                      <div id="ch21-debugging_rqt_graph_misspelled_screenshot" class="figure">
                        <img src="images/prwr_2105.jpg" alt="rqt_graph screenshot with misspelled topic" id="img_000308" />
                      </div>
                    </figure>
                  </div>
                </section>
                <section data-type="sect2" data-pdf-bookmark="Problem: Mismatched Topic Types and/or Checksums" id="section_000212">
                  <h1 id="h1_000498" smilref="Programming_Robots_with_ROS00026.smil#h1_000498">Problem: Mismatched Topic Types and/or Checksums</h1>
                  <div class="sect2" id="ch21-idp45163152">
                    <p id="ch21-ix_21-debugging-asciidoc18" data-type="indexterm" data-primary="checksums, debugging mismatched" data-secondary="mismatched topic types/checksums" smilref="Programming_Robots_with_ROS00026.smil#ch21-ix_21-debugging-asciidoc18">Now let's add a third publisher, this time using the right topic name but the wrong topic type; instead of publishing a string, we'll send a 32-bit integer:</p>
                    <p id="p_001542">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_002293"><span class="text" id="span_007967" smilref="Programming_Robots_with_ROS00026.smil#span_007967">
user@hostname$ </span><strong id="strong_000249" smilref="Programming_Robots_with_ROS00026.smil#strong_000249">rostopic pub /chatter std_msgs/Int32 -r 1 "3" __name:=talker3</strong>
</code>
                    </p>
                    <p id="p_001543">
                      <span class="text" id="span_007968" smilref="Programming_Robots_with_ROS00026.smil#span_007968">Click the refresh button in</span>
                      <code xml:space="preserve" id="code_002294" smilref="Programming_Robots_with_ROS00026.smil#code_002294">rqt_graph</code>
                      <span class="text" id="span_007969" smilref="Programming_Robots_with_ROS00026.smil#span_007969">. You'll see something like the image in</span>
                      <a data-type="xref" href="#ch21-debugging_rqt_graph_bad_type_screenshot" external="false" id="a_000409" smilref="Programming_Robots_with_ROS00026.smil#a_000409">Figure 21-6</a>
                      <span class="text" id="span_007970" smilref="Programming_Robots_with_ROS00026.smil#span_007970">.</span>
                    </p>
                    <p id="p_001544">
                      <span class="text" id="span_007971" smilref="Programming_Robots_with_ROS00026.smil#span_007971">Everything looks good:</span>
                      <code xml:space="preserve" id="code_002295" smilref="Programming_Robots_with_ROS00026.smil#code_002295">talker</code>
                      <span class="text" id="span_007972" smilref="Programming_Robots_with_ROS00026.smil#span_007972">and</span>
                      <code xml:space="preserve" id="code_002296" smilref="Programming_Robots_with_ROS00026.smil#code_002296">talker3</code>
                      <span class="text" id="span_007973" smilref="Programming_Robots_with_ROS00026.smil#span_007973">are both publishing via</span>
                      <code xml:space="preserve" id="code_002297" smilref="Programming_Robots_with_ROS00026.smil#code_002297">chatter</code>
                      <span class="text" id="span_007974" smilref="Programming_Robots_with_ROS00026.smil#span_007974">to</span>
                      <span class="keep-together" id="span_007975">
                        <code xml:space="preserve" id="code_002298" smilref="Programming_Robots_with_ROS00026.smil#code_002298">listener</code>
                      </span>
                      <span class="text" id="span_007976" smilref="Programming_Robots_with_ROS00026.smil#span_007976">. But if we watch the terminal where we started</span>
                      <code xml:space="preserve" id="code_002299" smilref="Programming_Robots_with_ROS00026.smil#code_002299">listener</code>
                      <span class="text" id="span_007977" smilref="Programming_Robots_with_ROS00026.smil#span_007977">, we see that it's receiving only the string messages from</span>
                      <code xml:space="preserve" id="code_002300" smilref="Programming_Robots_with_ROS00026.smil#code_002300">talker</code>
                      <span class="text" id="span_007978" smilref="Programming_Robots_with_ROS00026.smil#span_007978">, not the integer messages from</span>
                      <code xml:space="preserve" id="code_002301" smilref="Programming_Robots_with_ROS00026.smil#code_002301">talker3</code>
                      <span class="text" id="span_007979" smilref="Programming_Robots_with_ROS00026.smil#span_007979">. To dig in further, we'll use the command-line tool</span>
                      <code xml:space="preserve" id="code_002302" smilref="Programming_Robots_with_ROS00026.smil#code_002302">rosnode</code>
                      <span class="text" id="span_007980" smilref="Programming_Robots_with_ROS00026.smil#span_007980">.</span>
                    </p>
                    <figure id="figure_000119">
                      <h1 id="h1_000499" smilref="Programming_Robots_with_ROS00026.smil#h1_000499">Figure 21-6. Two nodes are publishing to a subscriber, but they disagree on the message type; further investigation is needed</h1>
                      <div id="ch21-debugging_rqt_graph_bad_type_screenshot" class="figure">
                        <img src="images/prwr_2106.jpg" alt="rqt_graph screenshot with bad types" id="img_000309" />
                      </div>
                    </figure>
                    <p id="p_001545" smilref="Programming_Robots_with_ROS00026.smil#p_001545">First, let's list the nodes in the system:</p>
                    <p id="p_001546">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_002303"><span class="text" id="span_007981" smilref="Programming_Robots_with_ROS00026.smil#span_007981">
user@hostname$ </span><strong id="strong_000250" smilref="Programming_Robots_with_ROS00026.smil#strong_000250">rosnode list</strong><span class="text" id="span_007982" smilref="Programming_Robots_with_ROS00026.smil#span_007982">
/listener
/rosout
/rqt_graph
/talker
/talker2
/talker3
</span></code>
                    </p>
                    <p id="p_001547">
                      <span class="text" id="span_007983" smilref="Programming_Robots_with_ROS00026.smil#span_007983">The problem is that</span>
                      <code xml:space="preserve" id="code_002304" smilref="Programming_Robots_with_ROS00026.smil#code_002304">talker3</code>
                      <span class="text" id="span_007984" smilref="Programming_Robots_with_ROS00026.smil#span_007984">doesn't appear to be communicating with</span>
                      <code xml:space="preserve" id="code_002305" smilref="Programming_Robots_with_ROS00026.smil#code_002305">listener</code>
                      <span class="text" id="span_007985" smilref="Programming_Robots_with_ROS00026.smil#span_007985">, while</span>
                      <code xml:space="preserve" id="code_002306" smilref="Programming_Robots_with_ROS00026.smil#code_002306">talker</code>
                      <span class="text" id="span_007986" smilref="Programming_Robots_with_ROS00026.smil#span_007986">is working fine. Let's look at</span>
                      <code xml:space="preserve" id="code_002307" smilref="Programming_Robots_with_ROS00026.smil#code_002307">talker</code>
                      <span class="text" id="span_007987" smilref="Programming_Robots_with_ROS00026.smil#span_007987">in more detail:</span>
                    </p>
                    <p id="p_001548">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_002308"><span class="text" id="span_007988" smilref="Programming_Robots_with_ROS00026.smil#span_007988">
user@hostname$ </span><strong id="strong_000251" smilref="Programming_Robots_with_ROS00026.smil#strong_000251">rosnode info talker</strong><span class="text" id="span_007989" smilref="Programming_Robots_with_ROS00026.smil#span_007989">
Node [/talker]
Publications:
 * /chatter [std_msgs/String]

Subscriptions: None

Services:
 * /talker/set_logger_level
 * /talker/get_loggers


contacting node http://localhost:61515/ ...
Pid: 65904
Connections:
 * topic: /chatter
    * to: /listener
    * direction: outbound
    * transport: TCPROS
</span></code>
                    </p>
                    <p id="p_001549">
                      <span class="text" id="span_007990" smilref="Programming_Robots_with_ROS00026.smil#span_007990">Here we can see the</span>
                      <code xml:space="preserve" id="code_002309" smilref="Programming_Robots_with_ROS00026.smil#code_002309">chatter</code>
                      <span class="text" id="span_007991" smilref="Programming_Robots_with_ROS00026.smil#span_007991">topic is listed as a publication of</span>
                      <code xml:space="preserve" id="code_002310" smilref="Programming_Robots_with_ROS00026.smil#code_002310">talker</code>
                      <span class="text" id="span_007992" smilref="Programming_Robots_with_ROS00026.smil#span_007992">(which means that it's being advertised). We can further see that there is an outbound connection established on that topic from</span>
                      <code xml:space="preserve" id="code_002311" smilref="Programming_Robots_with_ROS00026.smil#code_002311">talker</code>
                      <span class="text" id="span_007993" smilref="Programming_Robots_with_ROS00026.smil#span_007993">to</span>
                      <code xml:space="preserve" id="code_002312" smilref="Programming_Robots_with_ROS00026.smil#code_002312">listener</code>
                      <span class="text" id="span_007994" smilref="Programming_Robots_with_ROS00026.smil#span_007994">, which means that data is flowing correctly. Now let's look at</span>
                      <code xml:space="preserve" id="code_002313" smilref="Programming_Robots_with_ROS00026.smil#code_002313">talker3</code>
                      <span class="text" id="span_007995" smilref="Programming_Robots_with_ROS00026.smil#span_007995">in detail:</span>
                    </p>
                    <p id="p_001550">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_002314"><span class="text" id="span_007996" smilref="Programming_Robots_with_ROS00026.smil#span_007996">
user@hostname$ </span><strong id="strong_000252" smilref="Programming_Robots_with_ROS00026.smil#strong_000252">rosnode info talker3</strong><span class="text" id="span_007997" smilref="Programming_Robots_with_ROS00026.smil#span_007997">
Node [/talker3]
Publications:
 * /chatter [std_msgs/Int32]

Subscriptions: None

Services:
 * /talker3/get_loggers
 * /talker3/set_logger_level


contacting node http://localhost:61686/ ...
Pid: 66317
</span></code>
                    </p>
                    <p id="p_001551">
                      <span class="text" id="span_007998" smilref="Programming_Robots_with_ROS00026.smil#span_007998">Here we can see that, while</span>
                      <code xml:space="preserve" id="code_002315" smilref="Programming_Robots_with_ROS00026.smil#code_002315">chatter</code>
                      <span class="text" id="span_007999" smilref="Programming_Robots_with_ROS00026.smil#span_007999">is listed as a publication of</span>
                      <code xml:space="preserve" id="code_002316" smilref="Programming_Robots_with_ROS00026.smil#code_002316">talker3</code>
                      <span class="text" id="span_008000" smilref="Programming_Robots_with_ROS00026.smil#span_008000">, there are no connections to</span>
                      <code xml:space="preserve" id="code_002317" smilref="Programming_Robots_with_ROS00026.smil#code_002317">listener</code>
                      <span class="text" id="span_008001" smilref="Programming_Robots_with_ROS00026.smil#span_008001">, or to anyone else. That connection is missing from</span>
                      <code xml:space="preserve" id="code_002318" smilref="Programming_Robots_with_ROS00026.smil#code_002318">talker3</code>
                      <span class="text" id="span_008002" smilref="Programming_Robots_with_ROS00026.smil#span_008002">because the ROS type-checking mechanism refused to establish the connection when the two sides disagreed on what type should be used. During negotiation of a topic connection, the subscriber (in this case,</span>
                      <code xml:space="preserve" id="code_002319" smilref="Programming_Robots_with_ROS00026.smil#code_002319">listener</code>
                      <span class="text" id="span_008003" smilref="Programming_Robots_with_ROS00026.smil#span_008003">) tells the publisher what type of message it is expecting; if that type does not match what the publisher is sending on that topic, then it drops the connection.</span>
                    </p>
                    <p id="p_001552">
                      <span class="text" id="span_008004" smilref="Programming_Robots_with_ROS00026.smil#span_008004">This kind of error-checking happens behind the scenes all the time in a ROS system. If types don't match, then connections are refused. The same thing happens when types match, but their checksums don't. For example, if you have a publisher/subscriber pair that agree on a topic name and type but have different definitions of the message type (often caused by different versions of the</span>
                      <em id="em_000475" smilref="Programming_Robots_with_ROS00026.smil#em_000475">.msg</em>
                      <span class="text" id="span_008005" smilref="Programming_Robots_with_ROS00026.smil#span_008005">file on different machines), then the connection between them will be refused. When there is a type or checksum mismatch, there are usually log messages that inform you of what has happened. For example, in the present example,</span>
                      <code xml:space="preserve" id="code_002320" smilref="Programming_Robots_with_ROS00026.smil#code_002320">talker3</code>
                      <span class="text" id="span_008006" smilref="Programming_Robots_with_ROS00026.smil#span_008006">produced this warning:</span>
                    </p>
                    <p id="p_001553">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_002321" smilref="Programming_Robots_with_ROS00026.smil#code_002321">[WARN] [WallTime: 1408327763.423004] Could not process inbound connection:\
  topic types do not match: [std_msgs/String] vs.\
  [std_msgs/Int32]{'message_definition': 'string data\n\n', 'callerid':\
  '/listener', 'tcp_nodelay': '0', 'md5sum':\
  '992ce8a1687cec8c8bd883ec73ca41d1', 'topic': '/chatter', 'type':\
  'std_msgs/String'}</code>
                    </p>
                    <p id="ch21-idp45198560" data-type="indexterm" data-startref="ix_21-debugging-asciidoc18">
                      <span class="text" id="span_008007" smilref="Programming_Robots_with_ROS00026.smil#span_008007">As mentioned previously, you should always check for such error messages first (with</span>
                      <code xml:space="preserve" id="code_002322" smilref="Programming_Robots_with_ROS00026.smil#code_002322">rqt_console</code>
                      <span class="text" id="span_008008" smilref="Programming_Robots_with_ROS00026.smil#span_008008">, of course). But you should also know how to navigate your nodes' connection status by interrogating them with</span>
                      <code xml:space="preserve" id="code_002323" smilref="Programming_Robots_with_ROS00026.smil#code_002323">rosnode</code>
                      <span class="text" id="span_008009" smilref="Programming_Robots_with_ROS00026.smil#span_008009">.</span>
                    </p>
                  </div>
                </section>
                <section data-type="sect2" data-pdf-bookmark="Problem: Incorrect Network Settings" id="section_000213">
                  <h1 id="h1_000500" smilref="Programming_Robots_with_ROS00026.smil#h1_000500">Problem: Incorrect Network Settings</h1>
                  <div class="sect2" id="ch21-idp45163776">
                    <p id="ch21-ix_21-debugging-asciidoc22" data-type="indexterm" data-primary="debugging" data-secondary="incorrect network settings" smilref="Programming_Robots_with_ROS00026.smil#ch21-ix_21-debugging-asciidoc22">In addition to type and checksum mismatches, connections between ROS nodes often fail because of incorrect network settings. There are many ways to mis-configure a network, and we are not going to address general network debugging in this book. Here, we'll cover a couple of cases that commonly arise in ROS systems, and we'll offer debugging procedures that can be repurposed for other situations.</p>
                    <p id="p_001554">
                      <span class="text" id="span_008010" smilref="Programming_Robots_with_ROS00026.smil#span_008010">Imagine that you're working with a mobile robot, with the</span>
                      <code xml:space="preserve" id="code_002324" smilref="Programming_Robots_with_ROS00026.smil#code_002324">roscore</code>
                      <span class="text" id="span_008011" smilref="Programming_Robots_with_ROS00026.smil#span_008011">and various ROS nodes running on the computer carried by the robot. You're doing development and debugging on your laptop, which is connected via a wireless network to the robot's computer. For clarity, let's assume hostnames and IP addresses for the computers:</span>
                    </p>
                    <list type="ul" id="list_000028">
                      <li id="li_000096">
                        <p id="p_001555">
                          <span class="text" id="span_008012" smilref="Programming_Robots_with_ROS00026.smil#span_008012">Robot computer:</span>
                          <code xml:space="preserve" id="code_002325" smilref="Programming_Robots_with_ROS00026.smil#code_002325">robby</code>
                          <span class="text" id="span_008013" smilref="Programming_Robots_with_ROS00026.smil#span_008013">, 192.168.1.2</span>
                        </p>
                      </li>
                      <li id="li_000097">
                        <p id="p_001556">
                          <span class="text" id="span_008014" smilref="Programming_Robots_with_ROS00026.smil#span_008014">Laptop:</span>
                          <code xml:space="preserve" id="code_002326" smilref="Programming_Robots_with_ROS00026.smil#code_002326">hal</code>
                          <span class="text" id="span_008015" smilref="Programming_Robots_with_ROS00026.smil#span_008015">, 192.168.1.3</span>
                        </p>
                      </li>
                    </list>
                    <p id="p_001557">
                      <span class="text" id="span_008016" smilref="Programming_Robots_with_ROS00026.smil#span_008016">For this configuration to work, nodes running on the laptop</span>
                      <code xml:space="preserve" id="code_002327" smilref="Programming_Robots_with_ROS00026.smil#code_002327">hal</code>
                      <span class="text" id="span_008017" smilref="Programming_Robots_with_ROS00026.smil#span_008017">will have their environment variable</span>
                      <code xml:space="preserve" id="code_002328" smilref="Programming_Robots_with_ROS00026.smil#code_002328">ROS_MASTER_URI</code>
                      <span class="text" id="span_008018" smilref="Programming_Robots_with_ROS00026.smil#span_008018">pointing to</span>
                      <code xml:space="preserve" id="code_002329" smilref="Programming_Robots_with_ROS00026.smil#code_002329">robby</code>
                      <span class="text" id="span_008019" smilref="Programming_Robots_with_ROS00026.smil#span_008019">, because that's where the</span>
                      <code xml:space="preserve" id="code_002330" smilref="Programming_Robots_with_ROS00026.smil#code_002330">roscore</code>
                      <span class="text" id="span_008020" smilref="Programming_Robots_with_ROS00026.smil#span_008020">is running. That could be done in</span>
                      <code xml:space="preserve" id="code_002331" smilref="Programming_Robots_with_ROS00026.smil#code_002331">bash</code>
                      <span class="text" id="span_008021" smilref="Programming_Robots_with_ROS00026.smil#span_008021">using the</span>
                      <code xml:space="preserve" id="code_002332" smilref="Programming_Robots_with_ROS00026.smil#code_002332">export</code>
                      <span class="text" id="span_008022" smilref="Programming_Robots_with_ROS00026.smil#span_008022">keyword:</span>
                    </p>
                    <p id="p_001558">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_002333"><span class="text" id="span_008023" smilref="Programming_Robots_with_ROS00026.smil#span_008023">
user@hal$ </span><strong id="strong_000253" smilref="Programming_Robots_with_ROS00026.smil#strong_000253">export ROS_MASTER_URI=192.168.1.2</strong>
</code>
                    </p>
                    <p id="p_001559">
                      <span class="text" id="span_008024" smilref="Programming_Robots_with_ROS00026.smil#span_008024">A common problem in this situation is that ROS topic communication will work in one direction but not the other. For example, subscribers on</span>
                      <code xml:space="preserve" id="code_002334" smilref="Programming_Robots_with_ROS00026.smil#code_002334">hal</code>
                      <span class="text" id="span_008025" smilref="Programming_Robots_with_ROS00026.smil#span_008025">can receive data from publishers on</span>
                      <code xml:space="preserve" id="code_002335" smilref="Programming_Robots_with_ROS00026.smil#code_002335">robby</code>
                      <span class="text" id="span_008026" smilref="Programming_Robots_with_ROS00026.smil#span_008026">, but subscribers on</span>
                      <code xml:space="preserve" id="code_002336" smilref="Programming_Robots_with_ROS00026.smil#code_002336">robby</code>
                      <span class="text" id="span_008027" smilref="Programming_Robots_with_ROS00026.smil#span_008027">cannot receive data from publishers on</span>
                      <code xml:space="preserve" id="code_002337" smilref="Programming_Robots_with_ROS00026.smil#code_002337">hal</code>
                      <span class="text" id="span_008028" smilref="Programming_Robots_with_ROS00026.smil#span_008028">. A particularly common example of this problem happens when running</span>
                      <code xml:space="preserve" id="code_002338" smilref="Programming_Robots_with_ROS00026.smil#code_002338">rviz</code>
                      <span class="text" id="span_008029" smilref="Programming_Robots_with_ROS00026.smil#span_008029">on the laptop and the navigation stack on the robot: you can see the sensor data reported by the robot visualized in</span>
                      <code xml:space="preserve" id="code_002339" smilref="Programming_Robots_with_ROS00026.smil#code_002339">rviz</code>
                      <span class="text" id="span_008030" smilref="Programming_Robots_with_ROS00026.smil#span_008030">, but you cannot set the robot's pose or send it navigation goals.</span>
                    </p>
                    <p id="p_001560">
                      <span class="text" id="span_008031" smilref="Programming_Robots_with_ROS00026.smil#span_008031">When you encounter this kind of situation, your first step is to use</span>
                      <code xml:space="preserve" id="code_002340" smilref="Programming_Robots_with_ROS00026.smil#code_002340">rostopic</code>
                      <span class="text" id="span_008032" smilref="Programming_Robots_with_ROS00026.smil#span_008032">to check what hostname is being used by nodes running on each machine. Say that you're unable to send messages via the</span>
                      <code xml:space="preserve" id="code_002341" smilref="Programming_Robots_with_ROS00026.smil#code_002341">/initialpose</code>
                      <span class="text" id="span_008033" smilref="Programming_Robots_with_ROS00026.smil#span_008033">topic (used to set the robot's initial pose) from</span>
                      <code xml:space="preserve" id="code_002342" smilref="Programming_Robots_with_ROS00026.smil#code_002342">rviz</code>
                      <span class="text" id="span_008034" smilref="Programming_Robots_with_ROS00026.smil#span_008034">on</span>
                      <code xml:space="preserve" id="code_002343" smilref="Programming_Robots_with_ROS00026.smil#code_002343">hal</code>
                      <span class="text" id="span_008035" smilref="Programming_Robots_with_ROS00026.smil#span_008035">to</span>
                      <code xml:space="preserve" id="code_002344" smilref="Programming_Robots_with_ROS00026.smil#code_002344">move_base</code>
                      <span class="text" id="span_008036" smilref="Programming_Robots_with_ROS00026.smil#span_008036">(a node in the navigation stack) on</span>
                      <code xml:space="preserve" id="code_002345" smilref="Programming_Robots_with_ROS00026.smil#code_002345">robby</code>
                      <span class="text" id="span_008037" smilref="Programming_Robots_with_ROS00026.smil#span_008037">. You should check the list of publishers and subscribers for</span>
                      <code xml:space="preserve" id="code_002346" smilref="Programming_Robots_with_ROS00026.smil#code_002346">/initialpose</code>
                      <span class="text" id="span_008038" smilref="Programming_Robots_with_ROS00026.smil#span_008038">, which might look like this:</span>
                    </p>
                    <p id="p_001561">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_002347"><span class="text" id="span_008039" smilref="Programming_Robots_with_ROS00026.smil#span_008039">
user@hostname$ </span><strong id="strong_000254" smilref="Programming_Robots_with_ROS00026.smil#strong_000254">rostopic info initialpose</strong><span class="text" id="span_008040" smilref="Programming_Robots_with_ROS00026.smil#span_008040">
Type: geometry_msgs/PoseWithCovarianceStamped

Publishers:
 * /rviz (http://localhost:56171/)

 Subscribers:
  * /move_base (http://robby:53992/)
</span></code>
                    </p>
                    <p id="p_001562">
                      <span class="text" id="span_008041" smilref="Programming_Robots_with_ROS00026.smil#span_008041">See the problem? The publisher,</span>
                      <code xml:space="preserve" id="code_002348" smilref="Programming_Robots_with_ROS00026.smil#code_002348">rviz</code>
                      <span class="text" id="span_008042" smilref="Programming_Robots_with_ROS00026.smil#span_008042">, is telling potential subscribers that it can be contacted at the</span>
                      <em id="em_000476" smilref="Programming_Robots_with_ROS00026.smil#em_000476">hostname</em>
                      <span class="text" id="span_008043" smilref="Programming_Robots_with_ROS00026.smil#span_008043">:_port address_</span>
                      <code xml:space="preserve" id="code_002349" smilref="Programming_Robots_with_ROS00026.smil#code_002349">localhost:56171</code>
                      <span class="text" id="span_008044" smilref="Programming_Robots_with_ROS00026.smil#span_008044">. The port number is probably fine (we'll talk more about that shortly), but the hostname is not. The</span>
                      <code xml:space="preserve" id="code_002350" smilref="Programming_Robots_with_ROS00026.smil#code_002350">move_base</code>
                      <span class="text" id="span_008045" smilref="Programming_Robots_with_ROS00026.smil#span_008045">node, which is running on</span>
                      <code xml:space="preserve" id="code_002351" smilref="Programming_Robots_with_ROS00026.smil#code_002351">robby</code>
                      <span class="text" id="span_008046" smilref="Programming_Robots_with_ROS00026.smil#span_008046">, will fail when it tries to contact</span>
                      <code xml:space="preserve" id="code_002352" smilref="Programming_Robots_with_ROS00026.smil#code_002352">rviz</code>
                      <span class="text" id="span_008047" smilref="Programming_Robots_with_ROS00026.smil#span_008047">at</span>
                      <code xml:space="preserve" id="code_002353" smilref="Programming_Robots_with_ROS00026.smil#code_002353">localhost:56171</code>
                      <span class="text" id="span_008048" smilref="Programming_Robots_with_ROS00026.smil#span_008048">, because</span>
                      <code xml:space="preserve" id="code_002354" smilref="Programming_Robots_with_ROS00026.smil#code_002354">rviz</code>
                      <span class="text" id="span_008049" smilref="Programming_Robots_with_ROS00026.smil#span_008049">is running on</span>
                      <code xml:space="preserve" id="code_002355" smilref="Programming_Robots_with_ROS00026.smil#code_002355">hal</code>
                      <span class="text" id="span_008050" smilref="Programming_Robots_with_ROS00026.smil#span_008050">. From the perspective of nodes running on</span>
                      <code xml:space="preserve" id="code_002356" smilref="Programming_Robots_with_ROS00026.smil#code_002356">robby</code>
                      <span class="text" id="span_008051" smilref="Programming_Robots_with_ROS00026.smil#span_008051">,</span>
                      <code xml:space="preserve" id="code_002357" smilref="Programming_Robots_with_ROS00026.smil#code_002357">localhost</code>
                      <span class="text" id="span_008052" smilref="Programming_Robots_with_ROS00026.smil#span_008052">means</span>
                      <code xml:space="preserve" id="code_002358" smilref="Programming_Robots_with_ROS00026.smil#code_002358">robby</code>
                      <span class="text" id="span_008053" smilref="Programming_Robots_with_ROS00026.smil#span_008053">, not</span>
                      <code xml:space="preserve" id="code_002359" smilref="Programming_Robots_with_ROS00026.smil#code_002359">hal</code>
                      <span class="text" id="span_008054" smilref="Programming_Robots_with_ROS00026.smil#span_008054">.</span>
                    </p>
                    <p class="keep-together" id="p_001563">
                      <span class="text" id="span_008055" smilref="Programming_Robots_with_ROS00026.smil#span_008055">This is a classic example of a computer not knowing its own name:</span>
                      <code xml:space="preserve" id="code_002360" smilref="Programming_Robots_with_ROS00026.smil#code_002360">hal</code>
                      <span class="text" id="span_008056" smilref="Programming_Robots_with_ROS00026.smil#span_008056">doesn't know its name, so it does the best that it can in topic advertisements by using</span>
                      <code xml:space="preserve" id="code_002361" smilref="Programming_Robots_with_ROS00026.smil#code_002361">localhost</code>
                      <span class="text" id="span_008057" smilref="Programming_Robots_with_ROS00026.smil#span_008057">, which will at least make sense to nodes running on</span>
                      <code xml:space="preserve" id="code_002362" smilref="Programming_Robots_with_ROS00026.smil#code_002362">hal</code>
                      <span class="text" id="span_008058" smilref="Programming_Robots_with_ROS00026.smil#span_008058">. In a properly configured network with properly configured machines, this kind of problem should not occur,</span>
                      <span class="keep-together" id="span_008059" smilref="Programming_Robots_with_ROS00026.smil#span_008059">but it is nonetheless fairly</span>
                      <span class="text" id="span_008060" smilref="Programming_Robots_with_ROS00026.smil#span_008060">common. In general, every computer involved in a ROS system must know the name or address by which other the computers will be able to contact it.</span>
                    </p>
                    <p id="p_001564">
                      <span class="text" id="span_008061" smilref="Programming_Robots_with_ROS00026.smil#span_008061">If you can, you should fix the configuration of your computers and/or network so that they all use valid, externally addressable names. But that is not always possible (e.g., if you do not have superuser privileges on a computer). In that case, you can use some hooks that ROS offers to override its default name lookup logic. Specifically, you can set the</span>
                      <code xml:space="preserve" id="code_002363" smilref="Programming_Robots_with_ROS00026.smil#code_002363">ROS_HOSTNAME</code>
                      <span class="text" id="span_008062" smilref="Programming_Robots_with_ROS00026.smil#span_008062">environment variable before starting nodes on the mis-configured machine. For example, to solve the specific problem described here, you would set</span>
                      <code xml:space="preserve" id="code_002364" smilref="Programming_Robots_with_ROS00026.smil#code_002364">ROS_HOSTNAME</code>
                      <span class="text" id="span_008063" smilref="Programming_Robots_with_ROS00026.smil#span_008063">on</span>
                      <code xml:space="preserve" id="code_002365" smilref="Programming_Robots_with_ROS00026.smil#code_002365">hal</code>
                      <span class="text" id="span_008064" smilref="Programming_Robots_with_ROS00026.smil#span_008064">before starting</span>
                      <code xml:space="preserve" id="code_002366" smilref="Programming_Robots_with_ROS00026.smil#code_002366">rviz</code>
                      <span class="text" id="span_008065" smilref="Programming_Robots_with_ROS00026.smil#span_008065">:</span>
                    </p>
                    <p id="p_001565">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_002367"><span class="text" id="span_008066" smilref="Programming_Robots_with_ROS00026.smil#span_008066">
user@hostname$ </span><strong id="strong_000255" smilref="Programming_Robots_with_ROS00026.smil#strong_000255">export ROS_HOSTNAME=hal</strong><span class="text" id="span_008067" smilref="Programming_Robots_with_ROS00026.smil#span_008067">
user@hostname$ </span><strong id="strong_000256" smilref="Programming_Robots_with_ROS00026.smil#strong_000256">rviz</strong>
</code>
                    </p>
                    <p id="p_001566">
                      <span class="text" id="span_008068" smilref="Programming_Robots_with_ROS00026.smil#span_008068">Then the output from</span>
                      <code xml:space="preserve" id="code_002368" smilref="Programming_Robots_with_ROS00026.smil#code_002368">rostopic info /initialpose</code>
                      <span class="text" id="span_008069" smilref="Programming_Robots_with_ROS00026.smil#span_008069">would include:</span>
                    </p>
                    <p id="p_001567">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_002369" smilref="Programming_Robots_with_ROS00026.smil#code_002369">
...
Publishers:
 * /rviz (http://hal:56171/)
...
</code>
                    </p>
                    <p id="p_001568">
                      <span class="text" id="span_008070" smilref="Programming_Robots_with_ROS00026.smil#span_008070">That will be enough so long as the name</span>
                      <code xml:space="preserve" id="code_002370" smilref="Programming_Robots_with_ROS00026.smil#code_002370">hal</code>
                      <span class="text" id="span_008071" smilref="Programming_Robots_with_ROS00026.smil#span_008071">can be resolved to an IP address. But if</span>
                      <code xml:space="preserve" id="code_002371" smilref="Programming_Robots_with_ROS00026.smil#code_002371">hal</code>
                      <span class="text" id="span_008072" smilref="Programming_Robots_with_ROS00026.smil#span_008072">was assigned an address dynamically from a DHCP server, then it's possible that the name</span>
                      <code xml:space="preserve" id="code_002372" smilref="Programming_Robots_with_ROS00026.smil#code_002372">hal</code>
                      <span class="text" id="span_008073" smilref="Programming_Robots_with_ROS00026.smil#span_008073">, while better than</span>
                      <code xml:space="preserve" id="code_002373" smilref="Programming_Robots_with_ROS00026.smil#code_002373">localhost</code>
                      <span class="text" id="span_008074" smilref="Programming_Robots_with_ROS00026.smil#span_008074">, still won't be resolvable by nodes running on</span>
                      <code xml:space="preserve" id="code_002374" smilref="Programming_Robots_with_ROS00026.smil#code_002374">robby</code>
                      <span class="text" id="span_008075" smilref="Programming_Robots_with_ROS00026.smil#span_008075">(again, this should not happen, but it does). In that case, you can specify the IP address explicitly using the</span>
                      <code xml:space="preserve" id="code_002375" smilref="Programming_Robots_with_ROS00026.smil#code_002375">ROS_IP</code>
                      <span class="text" id="span_008076" smilref="Programming_Robots_with_ROS00026.smil#span_008076">environment variable:</span>
                    </p>
                    <p id="p_001569">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_002376"><span class="text" id="span_008077" smilref="Programming_Robots_with_ROS00026.smil#span_008077">
user@hostname$ </span><strong id="strong_000257" smilref="Programming_Robots_with_ROS00026.smil#strong_000257">export ROS_IP=192.168.1.3</strong><span class="text" id="span_008078" smilref="Programming_Robots_with_ROS00026.smil#span_008078">
user@hostname$ </span><strong id="strong_000258" smilref="Programming_Robots_with_ROS00026.smil#strong_000258">rviz</strong>
</code>
                    </p>
                    <p id="p_001570">
                      <span class="text" id="span_008079" smilref="Programming_Robots_with_ROS00026.smil#span_008079">Then the output from</span>
                      <code xml:space="preserve" id="code_002377" smilref="Programming_Robots_with_ROS00026.smil#code_002377">rostopic info /initialpose</code>
                      <span class="text" id="span_008080" smilref="Programming_Robots_with_ROS00026.smil#span_008080">would include:</span>
                    </p>
                    <p id="p_001571">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_002378" smilref="Programming_Robots_with_ROS00026.smil#code_002378">
...
Publishers:
 * /rviz (http://192.168.1.3:56171/)
...
</code>
                    </p>
                    <p class="keep-together" data-type="indexterm" data-primary="firewalls" id="ch21-idp45244432">
                      <span class="text" id="span_008081" smilref="Programming_Robots_with_ROS00026.smil#span_008081">If that doesn't do it, then the problem is likely that the firewall settings on</span>
                      <code xml:space="preserve" id="code_002379" smilref="Programming_Robots_with_ROS00026.smil#code_002379">hal</code>
                      <span class="text" id="span_008082" smilref="Programming_Robots_with_ROS00026.smil#span_008082">are preventing inbound connections on port 56171. By default, many operating systems use software firewalls that limit inbound TCP or UDP connections to a specific set of ports that are used to provide well-known services like</span>
                      <code xml:space="preserve" id="code_002380" smilref="Programming_Robots_with_ROS00026.smil#code_002380">ssh</code>
                      <span class="text" id="span_008083" smilref="Programming_Robots_with_ROS00026.smil#span_008083">or</span>
                      <code xml:space="preserve" id="code_002381" smilref="Programming_Robots_with_ROS00026.smil#code_002381">http</code>
                      <span class="text" id="span_008084" smilref="Programming_Robots_with_ROS00026.smil#span_008084">. Because ROS publishers might use any port, and because there are often many publishers using many different ports, ROS requires complete bidirectional connectivity between all pairs of machines, on all ports. An easy way to meet this requirement is to change your firewall to allow incoming connections on all ports (essentially, disable the firewall).</span>
                    </p>
                    <p id="ch21-idp45253024" data-type="indexterm" data-startref="ix_21-debugging-asciidoc22" data-primary="OpenVPN">
                      <span class="text" id="span_008085" smilref="Programming_Robots_with_ROS00026.smil#span_008085">If you cannot or prefer not to change your firewall settings, then we recommend that you establish a</span>
                      <em id="ch21-idp45249408" smilref="Programming_Robots_with_ROS00026.smil#ch21-idp45249408">virtual private network</em>
                      <span class="text" id="span_008086" smilref="Programming_Robots_with_ROS00026.smil#span_008086">(VPN) between the computers in your network. Because the VPN is authenticated and encrypted, there is no need for a firewall to protect connections within it. There are multiple VPN tools to choose from; a widely used open source tool is OpenVPN, which creates a new network interface, with a new IP address, on each computer. If you use a tool like OpenVPN, then you should almost certainly set</span>
                      <code id="ch21-idp45250720" xml:space="preserve" smilref="Programming_Robots_with_ROS00026.smil#ch21-idp45250720">ROS_IP</code>
                      <span class="text" id="span_008087" smilref="Programming_Robots_with_ROS00026.smil#span_008087">on all computers to ensure that they are advertising their VPN-specific IP addresses. The configuration of a VPN is outside the scope of this book, but there are many good resources regarding this topic online and in other books.</span>
                    </p>
                  </div>
                </section>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Sensor Fusion: rviz" id="section_000214">
              <h1 id="h1_000501" smilref="Programming_Robots_with_ROS00026.smil#h1_000501">Sensor Fusion: rviz</h1>
              <div class="sect1" id="ch21-idp45200160">
                <p data-type="indexterm" data-primary="debugging" data-secondary="rviz for" id="ch21-idp45256080">
                  <span class="text" id="span_008088" smilref="Programming_Robots_with_ROS00026.smil#span_008088">In the previous sections, we covered problems related to error reporting and connection handling. What if all of the nodes are connected properly, and they're not raising any errors, but the robot is still not behaving properly? A good place to start is using</span>
                  <code xml:space="preserve" id="code_002382" smilref="Programming_Robots_with_ROS00026.smil#code_002382">rviz</code>
                  <span class="text" id="span_008089" smilref="Programming_Robots_with_ROS00026.smil#span_008089">to visualize the relevant sensor data from the robot. You can start</span>
                  <code id="ch21-idp45257056" xml:space="preserve" smilref="Programming_Robots_with_ROS00026.smil#ch21-idp45257056">rviz</code>
                  <span class="text" id="span_008090" smilref="Programming_Robots_with_ROS00026.smil#span_008090">just like the other ROS tools:</span>
                </p>
                <p id="p_001572">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_002383"><span class="text" id="span_008091" smilref="Programming_Robots_with_ROS00026.smil#span_008091">
user@hostname$ </span><strong id="strong_000259" smilref="Programming_Robots_with_ROS00026.smil#strong_000259">rviz</strong>
</code>
                </p>
                <p id="p_001573">
                  <span class="text" id="span_008092" smilref="Programming_Robots_with_ROS00026.smil#span_008092">The details of what to visualize will depend on your application. In addition,</span>
                  <code xml:space="preserve" id="code_002384" smilref="Programming_Robots_with_ROS00026.smil#code_002384">rviz</code>
                  <span class="text" id="span_008093" smilref="Programming_Robots_with_ROS00026.smil#span_008093">is a powerful tool, and its heavily configurable feature set is outside the scope of this book. Here a few tips to help with debugging common problems:</span>
                </p>
                <list type="ul" id="list_000029">
                  <li id="li_000098">
                    <p id="p_001574" smilref="Programming_Robots_with_ROS00026.smil#p_001574">Visualize data from multiple sensors simultaneously. For example, if you're using a laser and a depth camera, visualize them together in a common coordinate frame and look for differences. Assign a different color to each sensor to make it easy to distinguish them.</p>
                  </li>
                  <li id="li_000099">
                    <p id="p_001575" smilref="Programming_Robots_with_ROS00026.smil#p_001575">Increase the decay time on a sensor stream to check it for consistency over time. For example, if you're using a depth camera on a mobile robot, try setting the decay time for the depth camera point cloud to five seconds, then move the robot around and check the consistency of consecutive scans.</p>
                  </li>
                  <li id="li_000100">
                    <p id="p_001576" smilref="Programming_Robots_with_ROS00026.smil#p_001576">Visualize each stage of a sensor-processing pipeline. For example, if you are running camera images through a series of filters, be sure to publish the image output of each filter so that you can check the intermediate results in addition to the final result.</p>
                  </li>
                  <li id="li_000101">
                    <p id="p_001577">
                      <span class="text" id="span_008094" smilref="Programming_Robots_with_ROS00026.smil#span_008094">Wherever you can, publish visual debugging messages using the</span>
                      <code xml:space="preserve" id="code_002385" smilref="Programming_Robots_with_ROS00026.smil#code_002385">visualiza tion_ msgs/Marker</code>
                      <span class="text" id="span_008095" smilref="Programming_Robots_with_ROS00026.smil#span_008095">type. This message allows you to create, modify, and delete geometric shapes of various of kinds. For example, if you are estimating the pose of an object from sensor data, then publish that estimated pose as an arrow so that you can visually check the result against other sensor data.</span>
                    </p>
                  </li>
                </list>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Plotting Data: rqt_plot" id="section_000215">
              <h1 id="h1_000502" smilref="Programming_Robots_with_ROS00026.smil#h1_000502">Plotting Data: rqt_plot</h1>
              <div class="sect1" id="ch21-debugging_data_plotting">
                <p data-type="indexterm" data-primary="data plotting" id="ch21-ix_21-debugging-asciidoc24" data-secondary="plotting data">
                  <span class="text" id="span_008096" smilref="Programming_Robots_with_ROS00026.smil#span_008096">While</span>
                  <code xml:space="preserve" id="code_002386" smilref="Programming_Robots_with_ROS00026.smil#code_002386">rviz</code>
                  <span class="text" id="span_008097" smilref="Programming_Robots_with_ROS00026.smil#span_008097">is the right tool for gaining a high-level view of the sensor state of your system, sometimes you want to examine individual values. If you are debugging the behavior of a position controller for a joint in a robot arm, for example, you might want to examine the time series of computed torques, or the position errors, or some other quantity. For this purpose, we use</span>
                  <code id="ch21-ix_21-debugging-asciidoc25" xml:space="preserve" smilref="Programming_Robots_with_ROS00026.smil#ch21-ix_21-debugging-asciidoc25">rqt_plot</code>
                  <span class="text" id="span_008098" smilref="Programming_Robots_with_ROS00026.smil#span_008098">, which supports 2D plotting of any numeric data that is published in a ROS system.</span>
                </p>
                <p id="p_001578">
                  <span class="text" id="span_008099" smilref="Programming_Robots_with_ROS00026.smil#span_008099">As an example,</span>
                  <a data-type="xref" href="#ch21-sine_wave_py" external="false" id="a_000410" smilref="Programming_Robots_with_ROS00026.smil#a_000410">Example 21-1</a>
                  <span class="text" id="span_008100" smilref="Programming_Robots_with_ROS00026.smil#span_008100">shows a node that generates a sine wave on the topic</span>
                  <span class="keep-together" id="span_008101">
                    <code xml:space="preserve" id="code_002387" smilref="Programming_Robots_with_ROS00026.smil#code_002387">/sin</code>
                  </span>
                  <span class="text" id="span_008102" smilref="Programming_Robots_with_ROS00026.smil#span_008102">, of type</span>
                  <code xml:space="preserve" id="code_002388" smilref="Programming_Robots_with_ROS00026.smil#code_002388">std_msgs/Float64</code>
                  <span class="text" id="span_008103" smilref="Programming_Robots_with_ROS00026.smil#span_008103">.</span>
                </p>
                <h1 id="h1_000503" smilref="Programming_Robots_with_ROS00026.smil#h1_000503">Example 21-1. sine_wave.py</h1>
                <div id="ch21-sine_wave_py" data-type="example">
                  <p id="p_001579">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_002389" smilref="Programming_Robots_with_ROS00026.smil#code_002389">#!/usr/bin/env python

import math, time
import rospy
from std_msgs.msg import Float64

rospy.init_node('sine_wave')
pub = rospy.Publisher('sin', Float64)
while not rospy.is_shutdown():
  msg = Float64()
  msg.data = math.sin(4*time.time())
  pub.publish(msg)
  time.sleep(0.1)</code>
                  </p>
                </div>
                <p id="p_001580">
                  <span class="text" id="span_008104" smilref="Programming_Robots_with_ROS00026.smil#span_008104">Run</span>
                  <code xml:space="preserve" id="code_002390" smilref="Programming_Robots_with_ROS00026.smil#code_002390">sine_wave.py</code>
                  <span class="text" id="span_008105" smilref="Programming_Robots_with_ROS00026.smil#span_008105">; then in another terminal, run</span>
                  <code xml:space="preserve" id="code_002391" smilref="Programming_Robots_with_ROS00026.smil#code_002391">rqt_plot</code>
                  <span class="text" id="span_008106" smilref="Programming_Robots_with_ROS00026.smil#span_008106">, telling it to plot the</span>
                  <code xml:space="preserve" id="code_002392" smilref="Programming_Robots_with_ROS00026.smil#code_002392">data</code>
                  <span class="text" id="span_008107" smilref="Programming_Robots_with_ROS00026.smil#span_008107">field of the</span>
                  <code xml:space="preserve" id="code_002393" smilref="Programming_Robots_with_ROS00026.smil#code_002393">/sin</code>
                  <span class="text" id="span_008108" smilref="Programming_Robots_with_ROS00026.smil#span_008108">topic:</span>
                </p>
                <p id="p_001581">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_002394"><span class="text" id="span_008109" smilref="Programming_Robots_with_ROS00026.smil#span_008109">
user@hostname$ </span><strong id="strong_000260" smilref="Programming_Robots_with_ROS00026.smil#strong_000260">rqt_plot /sin/data</strong>
</code>
                </p>
                <p id="p_001582">
                  <span class="text" id="span_008110" smilref="Programming_Robots_with_ROS00026.smil#span_008110">You'll see a continuous plot of the sine wave, similar to the image in</span>
                  <a data-type="xref" href="#ch21-debugging_rqt_plot_sin" external="false" id="a_000411" smilref="Programming_Robots_with_ROS00026.smil#a_000411">Figure 21-7</a>
                  <span class="text" id="span_008111" smilref="Programming_Robots_with_ROS00026.smil#span_008111">.</span>
                </p>
                <figure id="figure_000120">
                  <h1 id="h1_000504" smilref="Programming_Robots_with_ROS00026.smil#h1_000504">Figure 21-7. The rqt_plot GUI produces 2D plots of any numeric data published in a ROS system</h1>
                  <div id="ch21-debugging_rqt_plot_sin" class="figure">
                    <img src="images/prwr_2107.jpg" alt="rqt_plot screenshot" id="img_000310" />
                  </div>
                </figure>
                <p id="p_001583">
                  <span class="text" id="span_008112" smilref="Programming_Robots_with_ROS00026.smil#span_008112">It's often helpful to plot multiple values at the same time to compare how they vary over time.</span>
                  <a data-type="xref" href="#ch21-cosine_wave_py" external="false" id="a_000412" smilref="Programming_Robots_with_ROS00026.smil#a_000412">Example 21-2</a>
                  <span class="text" id="span_008113" smilref="Programming_Robots_with_ROS00026.smil#span_008113">shows a node that generates a cosine wave on the</span>
                  <code xml:space="preserve" id="code_002395" smilref="Programming_Robots_with_ROS00026.smil#code_002395">/cos</code>
                  <span class="text" id="span_008114" smilref="Programming_Robots_with_ROS00026.smil#span_008114">topic, also of type</span>
                  <code xml:space="preserve" id="code_002396" smilref="Programming_Robots_with_ROS00026.smil#code_002396">std_msgs/Float64</code>
                  <span class="text" id="span_008115" smilref="Programming_Robots_with_ROS00026.smil#span_008115">.</span>
                </p>
                <h1 id="h1_000505" smilref="Programming_Robots_with_ROS00026.smil#h1_000505">Example 21-2. cosine_wave.py</h1>
                <div id="ch21-cosine_wave_py" data-type="example">
                  <p id="p_001584">
                    <code class="preserve-whitespace" xml:space="preserve" id="code_002397" smilref="Programming_Robots_with_ROS00026.smil#code_002397">#!/usr/bin/env python

import math, time
import rospy
from std_msgs.msg import Float64

rospy.init_node('cosine_wave')
pub = rospy.Publisher('cos', Float64)
while not rospy.is_shutdown():
  msg = Float64()
  msg.data = math.cos(4*time.time())
  pub.publish(msg)
  time.sleep(0.1)</code>
                  </p>
                </div>
                <p id="p_001585">
                  <span class="text" id="span_008116" smilref="Programming_Robots_with_ROS00026.smil#span_008116">With</span>
                  <code xml:space="preserve" id="code_002398" smilref="Programming_Robots_with_ROS00026.smil#code_002398">sine_wave.py</code>
                  <span class="text" id="span_008117" smilref="Programming_Robots_with_ROS00026.smil#span_008117">still running, run</span>
                  <code xml:space="preserve" id="code_002399" smilref="Programming_Robots_with_ROS00026.smil#code_002399">cosine_wave.py</code>
                  <span class="text" id="span_008118" smilref="Programming_Robots_with_ROS00026.smil#span_008118">; then in another terminal, run</span>
                  <code xml:space="preserve" id="code_002400" smilref="Programming_Robots_with_ROS00026.smil#code_002400">rqt_plot</code>
                  <span class="text" id="span_008119" smilref="Programming_Robots_with_ROS00026.smil#span_008119">, this time asking it to plot data from both topics:</span>
                </p>
                <p id="p_001586">
                  <code class="preserve-whitespace" xml:space="preserve" id="code_002401"><span class="text" id="span_008120" smilref="Programming_Robots_with_ROS00026.smil#span_008120">
user@hostname$ </span><strong id="strong_000261" smilref="Programming_Robots_with_ROS00026.smil#strong_000261">rqt_plot /sin/data /cos/data</strong>
</code>
                </p>
                <p id="p_001587">
                  <span class="text" id="span_008121" smilref="Programming_Robots_with_ROS00026.smil#span_008121">Now you'll see a continuous plot of both waves, with the expected phase difference between them, similar to the image in</span>
                  <a data-type="xref" href="#ch21-debugging_rqt_plot_cos" external="false" id="a_000413" smilref="Programming_Robots_with_ROS00026.smil#a_000413">Figure 21-8</a>
                  <span class="text" id="span_008122" smilref="Programming_Robots_with_ROS00026.smil#span_008122">.</span>
                </p>
                <figure id="figure_000121">
                  <h1 id="h1_000506" smilref="Programming_Robots_with_ROS00026.smil#h1_000506">Figure 21-8. The rqt_plot GUI can plot multiple data values simultaneously</h1>
                  <div id="ch21-debugging_rqt_plot_cos" class="figure">
                    <img src="images/prwr_2108.jpg" alt="rqt_plot screenshot" id="img_000311" />
                  </div>
                </figure>
                <p id="ch21-idp45420064" data-type="indexterm" data-startref="ix_21-debugging-asciidoc24">
                  <span class="text" id="span_008123" smilref="Programming_Robots_with_ROS00026.smil#span_008123">The</span>
                  <code xml:space="preserve" id="code_002402" smilref="Programming_Robots_with_ROS00026.smil#code_002402">rqt_plot</code>
                  <span class="text" id="span_008124" smilref="Programming_Robots_with_ROS00026.smil#span_008124">GUI offers a number of features, including stopping and starting plotting, panning and zooming, configuring subplots, and exporting images.</span>
                </p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Data Logging and Analysis: rosbag and rqt_bag" id="section_000216">
              <h1 id="h1_000507" smilref="Programming_Robots_with_ROS00026.smil#h1_000507">Data Logging and Analysis: rosbag and rqt_bag</h1>
              <div class="sect1" id="ch21-debugging_data_logging">
                <p id="ch21-ix_21-debugging-asciidoc28" data-type="indexterm" data-primary="data logging" data-secondary="and debugging" smilref="Programming_Robots_with_ROS00026.smil#ch21-ix_21-debugging-asciidoc28">The complement to live data visualization, data logging is also a vital debugging tool. It is common in ROS systems to log data to file for later analysis and playback. Data logging works as you might expect: subscribe to the topic(s) that you want to log, and then write incoming messages to disk. In fact, you could easily write your own node to log data for your application.</p>
                <p data-type="indexterm" data-primary="bags" data-secondary="for debugging" id="ch21-ix_21-debugging-asciidoc30">
                  <span class="text" id="span_008125" smilref="Programming_Robots_with_ROS00026.smil#span_008125">However, you shouldn't write your own logger, because ROS provides a powerful, general logging tool called</span>
                  <code xml:space="preserve" id="code_002403" smilref="Programming_Robots_with_ROS00026.smil#code_002403">rosbag</code>
                  <span class="text" id="span_008126" smilref="Programming_Robots_with_ROS00026.smil#span_008126">. The</span>
                  <code id="ch21-ix_21-debugging-asciidoc31" xml:space="preserve" smilref="Programming_Robots_with_ROS00026.smil#ch21-ix_21-debugging-asciidoc31">rosbag</code>
                  <span class="text" id="span_008127" smilref="Programming_Robots_with_ROS00026.smil#span_008127">tool is able to log data of any type from any ROS topic, all to a single file. By convention, the resulting log files have the extension</span>
                  <em id="ch21-ix_21-debugging-asciidoc32" smilref="Programming_Robots_with_ROS00026.smil#ch21-ix_21-debugging-asciidoc32">.bag</em>
                  <span class="text" id="span_008128" smilref="Programming_Robots_with_ROS00026.smil#span_008128">and are referred to as "ROS bags," or simply, "bags."</span>
                </p>
                <section data-type="sect2" data-pdf-bookmark="Logging and Playing Back Data: rosbag" id="section_000217">
                  <h1 id="h1_000508" smilref="Programming_Robots_with_ROS00026.smil#h1_000508">Logging and Playing Back Data: rosbag</h1>
                  <div class="sect2" id="ch21-idp45432400">
                    <p data-type="indexterm" data-primary="data" data-secondary="playing back with rosbag" id="ch21-ix_21-debugging-asciidoc34">
                      <span class="text" id="span_008129" smilref="Programming_Robots_with_ROS00026.smil#span_008129">Let's see how to record data from one topic. Start a</span>
                      <code xml:space="preserve" id="code_002404" smilref="Programming_Robots_with_ROS00026.smil#code_002404">roscore</code>
                      <span class="text" id="span_008130" smilref="Programming_Robots_with_ROS00026.smil#span_008130">, then run</span>
                      <code id="ch21-ix_21-debugging-asciidoc35" xml:space="preserve" smilref="Programming_Robots_with_ROS00026.smil#ch21-ix_21-debugging-asciidoc35">rosbag</code>
                      <span class="text" id="span_008131" smilref="Programming_Robots_with_ROS00026.smil#span_008131">, telling it to record from the</span>
                      <code xml:space="preserve" id="code_002405" smilref="Programming_Robots_with_ROS00026.smil#code_002405">chatter</code>
                      <span class="text" id="span_008132" smilref="Programming_Robots_with_ROS00026.smil#span_008132">topic and write the output to a file call</span>
                      <em id="em_000477" smilref="Programming_Robots_with_ROS00026.smil#em_000477">chatter.bag</em>
                      <span class="text" id="span_008133" smilref="Programming_Robots_with_ROS00026.smil#span_008133">(we are giving a specific filename here for clarity; in general, you should let</span>
                      <code xml:space="preserve" id="code_002406" smilref="Programming_Robots_with_ROS00026.smil#code_002406">rosbag</code>
                      <span class="text" id="span_008134" smilref="Programming_Robots_with_ROS00026.smil#span_008134">autogenerate a timestamp-based name for its output file):</span>
                    </p>
                    <p id="p_001588">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_002407"><span class="text" id="span_008135" smilref="Programming_Robots_with_ROS00026.smil#span_008135">
user@hostname$ </span><strong id="strong_000262" smilref="Programming_Robots_with_ROS00026.smil#strong_000262">rosbag record -O chatter.bag /chatter</strong><span class="text" id="span_008136" smilref="Programming_Robots_with_ROS00026.smil#span_008136">
[ INFO] [1408922392.770333000]: Subscribing to /chatter
[ INFO] [1408922392.773664000]: Recording to chatter.bag.
</span></code>
                    </p>
                    <p id="p_001589">
                      <span class="text" id="span_008137" smilref="Programming_Robots_with_ROS00026.smil#span_008137">In another terminal, use</span>
                      <code xml:space="preserve" id="code_002408" smilref="Programming_Robots_with_ROS00026.smil#code_002408">rostopic pub</code>
                      <span class="text" id="span_008138" smilref="Programming_Robots_with_ROS00026.smil#span_008138">to publish at 10 Hz to</span>
                      <code xml:space="preserve" id="code_002409" smilref="Programming_Robots_with_ROS00026.smil#code_002409">chatter</code>
                      <span class="text" id="span_008139" smilref="Programming_Robots_with_ROS00026.smil#span_008139">:</span>
                    </p>
                    <p id="p_001590">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_002410"><span class="text" id="span_008140" smilref="Programming_Robots_with_ROS00026.smil#span_008140">
user@hostname$ </span><strong id="strong_000263" smilref="Programming_Robots_with_ROS00026.smil#strong_000263">rostopic pub /chatter std_msgs/String -r 10 "Hello world"</strong>
</code>
                    </p>
                    <p id="p_001591">
                      <span class="text" id="span_008141" smilref="Programming_Robots_with_ROS00026.smil#span_008141">Let</span>
                      <code xml:space="preserve" id="code_002411" smilref="Programming_Robots_with_ROS00026.smil#code_002411">rostopic pub</code>
                      <span class="text" id="span_008142" smilref="Programming_Robots_with_ROS00026.smil#span_008142">run for about 10 seconds, then kill both it and</span>
                      <code xml:space="preserve" id="code_002412" smilref="Programming_Robots_with_ROS00026.smil#code_002412">rosbag
record</code>
                      <span class="text" id="span_008143" smilref="Programming_Robots_with_ROS00026.smil#span_008143">. Now you should have a file called</span>
                      <em id="em_000478" smilref="Programming_Robots_with_ROS00026.smil#em_000478">chatter.bag</em>
                      <span class="text" id="span_008144" smilref="Programming_Robots_with_ROS00026.smil#span_008144">, which contains the messages that were published to the</span>
                      <code xml:space="preserve" id="code_002413" smilref="Programming_Robots_with_ROS00026.smil#code_002413">chatter</code>
                      <span class="text" id="span_008145" smilref="Programming_Robots_with_ROS00026.smil#span_008145">topic. Let's look inside it:</span>
                    </p>
                    <p id="p_001592">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_002414"><span class="text" id="span_008146" smilref="Programming_Robots_with_ROS00026.smil#span_008146">
user@hostname$ </span><strong id="strong_000264" smilref="Programming_Robots_with_ROS00026.smil#strong_000264">rosbag info chatter.bag</strong><span class="text" id="span_008147" smilref="Programming_Robots_with_ROS00026.smil#span_008147">
path:        chatter.bag
version:     2.0
duration:    12.9s
start:       Aug 24 2014 16:23:54.80 (1408922634.80)
end:         Aug 24 2014 16:24:07.70 (1408922647.70)
size:        14.1 KB
messages:    130
compression: none [1/1 chunks]
types:       std_msgs/String [992ce8a1687cec8c8bd883ec73ca41d1]
topics:      /chatter   130 msgs: std_msgs/String
</span></code>
                    </p>
                    <p id="p_001593">
                      <span class="text" id="span_008148" smilref="Programming_Robots_with_ROS00026.smil#span_008148">The</span>
                      <code xml:space="preserve" id="code_002415" smilref="Programming_Robots_with_ROS00026.smil#code_002415">rosbag info</code>
                      <span class="text" id="span_008149" smilref="Programming_Robots_with_ROS00026.smil#span_008149">command interrogates the bag and presents the metadata, including time and duration and the number and types of messages contained within it. Here we can see that we captured 130 messages of type</span>
                      <code xml:space="preserve" id="code_002416" smilref="Programming_Robots_with_ROS00026.smil#code_002416">std_msgs/String</code>
                      <span class="text" id="span_008150" smilref="Programming_Robots_with_ROS00026.smil#span_008150">on the</span>
                      <code xml:space="preserve" id="code_002417" smilref="Programming_Robots_with_ROS00026.smil#code_002417">chatter</code>
                      <span class="text" id="span_008151" smilref="Programming_Robots_with_ROS00026.smil#span_008151">topic. If we had logged multiple topics and/or types (which is common), those names would be listed as well.</span>
                    </p>
                    <p id="p_001594">
                      <span class="text" id="span_008152" smilref="Programming_Robots_with_ROS00026.smil#span_008152">Playing back the data from a bag is just as easy as recording it. With your</span>
                      <code xml:space="preserve" id="code_002418" smilref="Programming_Robots_with_ROS00026.smil#code_002418">roscore</code>
                      <span class="text" id="span_008153" smilref="Programming_Robots_with_ROS00026.smil#span_008153">still running, start up</span>
                      <code xml:space="preserve" id="code_002419" smilref="Programming_Robots_with_ROS00026.smil#code_002419">rostopic echo</code>
                      <span class="text" id="span_008154" smilref="Programming_Robots_with_ROS00026.smil#span_008154">to be ready to print the messages to console:</span>
                    </p>
                    <p id="p_001595">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_002420"><span class="text" id="span_008155" smilref="Programming_Robots_with_ROS00026.smil#span_008155">
user@hostname$ </span><strong id="strong_000265" smilref="Programming_Robots_with_ROS00026.smil#strong_000265">rostopic echo /chatter</strong>
</code>
                    </p>
                    <p id="p_001596">
                      <span class="text" id="span_008156" smilref="Programming_Robots_with_ROS00026.smil#span_008156">Nothing happens yet, because there is no publisher of data on the</span>
                      <code xml:space="preserve" id="code_002421" smilref="Programming_Robots_with_ROS00026.smil#code_002421">chatter</code>
                      <span class="text" id="span_008157" smilref="Programming_Robots_with_ROS00026.smil#span_008157">topic. Now use</span>
                      <code xml:space="preserve" id="code_002422" smilref="Programming_Robots_with_ROS00026.smil#code_002422">rosbag play</code>
                      <span class="text" id="span_008158" smilref="Programming_Robots_with_ROS00026.smil#span_008158">to read the bag and play it back:</span>
                    </p>
                    <p id="p_001597">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_002423"><span class="text" id="span_008159" smilref="Programming_Robots_with_ROS00026.smil#span_008159">
user@hostname$ </span><strong id="strong_000266" smilref="Programming_Robots_with_ROS00026.smil#strong_000266">rosbag play chatter.bag</strong><span class="text" id="span_008160" smilref="Programming_Robots_with_ROS00026.smil#span_008160">
[ INFO] [1408923117.746632000]: Opening chatter.bag

Waiting 0.2 seconds after advertising topics... done.

Hit space to toggle paused, or 's' to step.
</span></code>
                    </p>
                    <p id="p_001598">
                      <span class="text" id="span_008161" smilref="Programming_Robots_with_ROS00026.smil#span_008161">In the terminal where you ran</span>
                      <code xml:space="preserve" id="code_002424" smilref="Programming_Robots_with_ROS00026.smil#code_002424">rostopic echo</code>
                      <span class="text" id="span_008162" smilref="Programming_Robots_with_ROS00026.smil#span_008162">, you'll see the messages displayed on the screen:</span>
                    </p>
                    <p id="p_001599">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_002425" smilref="Programming_Robots_with_ROS00026.smil#code_002425">
data: Hello world
---
data: Hello world
---
data: Hello world
---
...
</code>
                    </p>
                    <p id="p_001600">
                      <span class="text" id="span_008163" smilref="Programming_Robots_with_ROS00026.smil#span_008163">The console output from</span>
                      <code xml:space="preserve" id="code_002426" smilref="Programming_Robots_with_ROS00026.smil#code_002426">rostopic echo</code>
                      <span class="text" id="span_008164" smilref="Programming_Robots_with_ROS00026.smil#span_008164">will continue until all of the data in the bag has been played back, at which point</span>
                      <code xml:space="preserve" id="code_002427" smilref="Programming_Robots_with_ROS00026.smil#code_002427">rosbag play</code>
                      <span class="text" id="span_008165" smilref="Programming_Robots_with_ROS00026.smil#span_008165">will exit.</span>
                    </p>
                    <p id="p_001601">
                      <span class="text" id="span_008166" smilref="Programming_Robots_with_ROS00026.smil#span_008166">This example is intentionally simple, but the underlying system is very powerful. Using</span>
                      <code xml:space="preserve" id="code_002428" smilref="Programming_Robots_with_ROS00026.smil#code_002428">rosbag</code>
                      <span class="text" id="span_008167" smilref="Programming_Robots_with_ROS00026.smil#span_008167">, you can record the message stream from any ROS topic, then play it back later. To the subscribing nodes, the messages will be indistinguishable from the original publications. As a result, you can often test and debug large parts of your system exclusively from logged data in bags. A very common use case is to play back a bag along with the relevant nodes from your application, and visualize the result in</span>
                      <code xml:space="preserve" id="code_002429" smilref="Programming_Robots_with_ROS00026.smil#code_002429">rviz</code>
                      <span class="text" id="span_008168" smilref="Programming_Robots_with_ROS00026.smil#span_008168">.</span>
                    </p>
                    <p data-type="indexterm" data-primary="rosbag" data-secondary="tips on usage" id="ch21-idp45529856">
                      <span class="text" id="span_008169" smilref="Programming_Robots_with_ROS00026.smil#span_008169">The</span>
                      <code xml:space="preserve" id="code_002430" smilref="Programming_Robots_with_ROS00026.smil#code_002430">rosbag</code>
                      <span class="text" id="span_008170" smilref="Programming_Robots_with_ROS00026.smil#span_008170">tool offers many options.Here are some tips on usage:</span>
                    </p>
                    <list type="ul" id="list_000030">
                      <li id="li_000102">
                        <p class="keep-together" id="p_001602">
                          <span class="text" id="span_008171" smilref="Programming_Robots_with_ROS00026.smil#span_008171">To record all data within a ROS system, run</span>
                          <code xml:space="preserve" id="code_002431" smilref="Programming_Robots_with_ROS00026.smil#code_002431">rosbag record -a</code>
                          <span class="text" id="span_008172" smilref="Programming_Robots_with_ROS00026.smil#span_008172">. But be careful with this option, because in a large system, you could easily log immense amounts of data. Besides the disk space and CPU cycles consumed by</span>
                          <code xml:space="preserve" id="code_002432" smilref="Programming_Robots_with_ROS00026.smil#code_002432">rosbag record</code>
                          <span class="text" id="span_008173" smilref="Programming_Robots_with_ROS00026.smil#span_008173">itself, subscribing to all topics can have a nontrivial performance impact on the rest of system, especially for nodes that do not compute certain results unless there is at least one active subscriber (common for image-processing pipelines).</span>
                        </p>
                      </li>
                      <li id="li_000103">
                        <p data-type="indexterm" data-primary="chunks" id="ch21-idp45535280">
                          <span class="text" id="span_008174" smilref="Programming_Robots_with_ROS00026.smil#span_008174">Bags are internally composed of</span>
                          <em id="em_000479" smilref="Programming_Robots_with_ROS00026.smil#em_000479">chunks</em>
                          <span class="text" id="span_008175" smilref="Programming_Robots_with_ROS00026.smil#span_008175">that can be compressed to save disk space. To compress the data while recording, run</span>
                          <code xml:space="preserve" id="code_002433" smilref="Programming_Robots_with_ROS00026.smil#code_002433">rosbag record -j
/topic</code>
                          <span class="text" id="span_008176" smilref="Programming_Robots_with_ROS00026.smil#span_008176">. To compress an existing bag, run</span>
                          <code xml:space="preserve" id="code_002434" smilref="Programming_Robots_with_ROS00026.smil#code_002434">rosbag compress topic.bag</code>
                          <span class="text" id="span_008177" smilref="Programming_Robots_with_ROS00026.smil#span_008177">. Compressed bags can be read by</span>
                          <code xml:space="preserve" id="code_002435" smilref="Programming_Robots_with_ROS00026.smil#code_002435">rosbag play</code>
                          <span class="text" id="span_008178" smilref="Programming_Robots_with_ROS00026.smil#span_008178">; they will be automatically decompressed on the fly during playback.</span>
                        </p>
                      </li>
                      <li id="li_000104">
                        <p id="p_001603">
                          <span class="text" id="span_008179" smilref="Programming_Robots_with_ROS00026.smil#span_008179">To continually play back a bag in a loop, run</span>
                          <code xml:space="preserve" id="code_002436" smilref="Programming_Robots_with_ROS00026.smil#code_002436">rosbag play -l topic.bag</code>
                          <span class="text" id="span_008180" smilref="Programming_Robots_with_ROS00026.smil#span_008180">. This option is useful when testing processing pipelines.</span>
                        </p>
                      </li>
                      <li id="li_000105">
                        <p id="ch21-idp45543424" data-type="indexterm" data-startref="ix_21-debugging-asciidoc34">
                          <span class="text" id="span_008181" smilref="Programming_Robots_with_ROS00026.smil#span_008181">To have</span>
                          <code xml:space="preserve" id="code_002437" smilref="Programming_Robots_with_ROS00026.smil#code_002437">rosbag play</code>
                          <span class="text" id="span_008182" smilref="Programming_Robots_with_ROS00026.smil#span_008182">also publish the time associated with each message on the special</span>
                          <code xml:space="preserve" id="code_002438" smilref="Programming_Robots_with_ROS00026.smil#code_002438">/clock</code>
                          <span class="text" id="span_008183" smilref="Programming_Robots_with_ROS00026.smil#span_008183">topic, run</span>
                          <code xml:space="preserve" id="code_002439" smilref="Programming_Robots_with_ROS00026.smil#code_002439">rosbag play --clock topic.bag</code>
                          <span class="text" id="span_008184" smilref="Programming_Robots_with_ROS00026.smil#span_008184">. But note that handling of timestamps with the playback of logged data can be tricky. For example, the times published to</span>
                          <code xml:space="preserve" id="code_002440" smilref="Programming_Robots_with_ROS00026.smil#code_002440">/clock</code>
                          <span class="text" id="span_008185" smilref="Programming_Robots_with_ROS00026.smil#span_008185">will be in the past, from when the bag was created, and not all nodes are robust to backward jumps in time.</span>
                        </p>
                      </li>
                    </list>
                    <p id="ch21-idp45546928" data-type="indexterm" data-startref="ix_21-debugging-asciidoc30" smilref="Programming_Robots_with_ROS00026.smil#ch21-idp45546928">Whether you're trying to understand what went wrong in a particular situation where the robot misbehaved or you're tuning the parameters of your perception pipeline, bags are an important part of any development and debugging process.</p>
                  </div>
                </section>
                <section data-type="sect2" data-pdf-bookmark="Visualizing Bags: rqt_bag" id="section_000218">
                  <h1 id="h1_000509" smilref="Programming_Robots_with_ROS00026.smil#h1_000509">Visualizing Bags: rqt_bag</h1>
                  <div class="sect2" id="ch21-idp45433024">
                    <p data-type="indexterm" data-primary="bags" data-secondary="visualizing with rqt_bag" id="ch21-idp45548992">
                      <span class="text" id="span_008186" smilref="Programming_Robots_with_ROS00026.smil#span_008186">Similar to how you use</span>
                      <code xml:space="preserve" id="code_002441" smilref="Programming_Robots_with_ROS00026.smil#code_002441">rqt_graph</code>
                      <span class="text" id="span_008187" smilref="Programming_Robots_with_ROS00026.smil#span_008187">to inspect the structure of a ROS system, it can be helpful to inspect the structure of a bag. For this purpose, ROS provides the</span>
                      <code id="ch21-idp45550032" xml:space="preserve" smilref="Programming_Robots_with_ROS00026.smil#ch21-idp45550032">rqt_bag</code>
                      <span class="text" id="span_008188" smilref="Programming_Robots_with_ROS00026.smil#span_008188">tool. You can run this like the other ROS tools, giving it the name of a bag to operate on:</span>
                    </p>
                    <p id="p_001604">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_002442"><span class="text" id="span_008189" smilref="Programming_Robots_with_ROS00026.smil#span_008189">
user@hostname$ </span><strong id="strong_000267" smilref="Programming_Robots_with_ROS00026.smil#strong_000267">rqt_bag chatter.bag</strong>
</code>
                    </p>
                    <p id="p_001605">
                      <span class="text" id="span_008190" smilref="Programming_Robots_with_ROS00026.smil#span_008190">A window will pop up looking something like the image in</span>
                      <a data-type="xref" href="#ch21-debugging_rqt_bag_screenshot" external="false" id="a_000414" smilref="Programming_Robots_with_ROS00026.smil#a_000414">Figure 21-9</a>
                      <span class="text" id="span_008191" smilref="Programming_Robots_with_ROS00026.smil#span_008191">.</span>
                    </p>
                    <figure id="figure_000122">
                      <h1 id="h1_000510" smilref="Programming_Robots_with_ROS00026.smil#h1_000510">Figure 21-9. The rqt_bag GUI allows you to visually inspect and operate on logged data</h1>
                      <div id="ch21-debugging_rqt_bag_screenshot" class="figure">
                        <img src="images/prwr_2109.jpg" alt="rqt_bag screenshot" id="img_000312" />
                      </div>
                    </figure>
                    <p id="p_001606">
                      <span class="text" id="span_008192" smilref="Programming_Robots_with_ROS00026.smil#span_008192">Using</span>
                      <code xml:space="preserve" id="code_002443" smilref="Programming_Robots_with_ROS00026.smil#code_002443">rqt_bag</code>
                      <span class="text" id="span_008193" smilref="Programming_Robots_with_ROS00026.smil#span_008193">, you can see at a glance how many topics were recorded and how frequently messages on each topic were received, and you can introspect the contents of the messages. You can play back and optionally loop over the entire bag or a section of it, or you can step through it one message at a time. You can also save a section of the bag as its own bag, allowing you to work with a particular sequence of messages.</span>
                    </p>
                  </div>
                </section>
                <section data-type="sect2" data-pdf-bookmark="Analyzing ROS Bags with Other Tools: rostopic echo -b" id="section_000219">
                  <h1 id="h1_000511" smilref="Programming_Robots_with_ROS00026.smil#h1_000511">Analyzing ROS Bags with Other Tools: rostopic echo -b</h1>
                  <div class="sect2" id="ch21-idp45559920">
                    <p data-type="indexterm" data-primary="bags" data-secondary="analyzing with rostopic echo-b" id="ch21-idp45561232">
                      <span class="text" id="span_008194" smilref="Programming_Robots_with_ROS00026.smil#span_008194">It's common to work with data from ROS bags in other, non-ROS tools, such as gnuplot, GNU Octave, or MATLAB. For this purpose, you'll often want to produce a text presentation of the data that can be easily parsed by other tools. Fortunately, this ability is built into</span>
                      <code xml:space="preserve" id="code_002444" smilref="Programming_Robots_with_ROS00026.smil#code_002444">rostopic echo</code>
                      <span class="text" id="span_008195" smilref="Programming_Robots_with_ROS00026.smil#span_008195">; just tell it the name of the bag to read from:</span>
                    </p>
                    <p id="p_001607">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_002445"><span class="text" id="span_008196" smilref="Programming_Robots_with_ROS00026.smil#span_008196">
user@hostname$ </span><strong id="strong_000268" smilref="Programming_Robots_with_ROS00026.smil#strong_000268">rostopic echo -b chatter.bag /chatter</strong><span class="text" id="span_008197" smilref="Programming_Robots_with_ROS00026.smil#span_008197">
data: Hello world
---
data: Hello world
---
data: Hello world
---
...
</span></code>
                    </p>
                    <p id="p_001608">
                      <span class="text" id="span_008198" smilref="Programming_Robots_with_ROS00026.smil#span_008198">That format is easy enough to read, but not that easy to parse. So, let's add the</span>
                      <code xml:space="preserve" id="code_002446" smilref="Programming_Robots_with_ROS00026.smil#code_002446">-p</code>
                      <span class="text" id="span_008199" smilref="Programming_Robots_with_ROS00026.smil#span_008199">argument to produce a comma-separated format that starts with an explanatory header:</span>
                    </p>
                    <p id="p_001609">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_002447"><span class="text" id="span_008200" smilref="Programming_Robots_with_ROS00026.smil#span_008200">
user@hostname$ </span><strong id="strong_000269" smilref="Programming_Robots_with_ROS00026.smil#strong_000269">rostopic echo -p -b chatter.bag /chatter</strong><span class="text" id="span_008201" smilref="Programming_Robots_with_ROS00026.smil#span_008201">
%time,field.data
1408922634801335000,Hello world
1408922634901209000,Hello world
1408922635001016000,Hello world
...
</span></code>
                    </p>
                    <p id="p_001610" smilref="Programming_Robots_with_ROS00026.smil#p_001610">Redirect that output to a file:</p>
                    <p id="p_001611">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_002448"><span class="text" id="span_008202" smilref="Programming_Robots_with_ROS00026.smil#span_008202">
user@hostname$ </span><strong id="strong_000270" smilref="Programming_Robots_with_ROS00026.smil#strong_000270">rostopic echo -p -b chatter.bag /chatter &gt; chatter.csv</strong>
</code>
                    </p>
                    <p id="ch21-idp45572976" data-type="indexterm" data-startref="ix_21-debugging-asciidoc28">
                      <span class="text" id="span_008203" smilref="Programming_Robots_with_ROS00026.smil#span_008203">and you're ready to read the data into your favorite processing tool. You can also process the data yourself in Python using the</span>
                      <code xml:space="preserve" id="code_002449" smilref="Programming_Robots_with_ROS00026.smil#code_002449">rosbag</code>
                      <span class="text" id="span_008204" smilref="Programming_Robots_with_ROS00026.smil#span_008204">library; some useful examples are listed in the</span>
                      <a href="http://wiki.ros.org/rosbag/Cookbook" external="true" id="a_000415">
                        <code xml:space="preserve" id="code_002450" smilref="Programming_Robots_with_ROS00026.smil#code_002450">rosbag</code>
                        <span class="text" id="span_008205" smilref="Programming_Robots_with_ROS00026.smil#span_008205">cookbook</span>
                      </a>
                      <span class="text" id="span_008206" smilref="Programming_Robots_with_ROS00026.smil#span_008206">.</span>
                    </p>
                  </div>
                </section>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Summary" id="section_000220">
              <h1 id="h1_000512" smilref="Programming_Robots_with_ROS00026.smil#h1_000512">Summary</h1>
              <div class="sect1" id="ch21-idp45573792">
                <p id="p_001612" smilref="Programming_Robots_with_ROS00026.smil#p_001612">In this chapter, we covered a variety of tools and techniques that will help you when debugging your ROS system. We use these custom tools because robotics is a challenging endeavor, combining the complexity inherent in any software with the need to interact asynchronously with the physical world. Writing good robotics software is hard, and there are many more ways to get it wrong than right.</p>
                <p id="ch21-idp45576336" data-type="indexterm" data-startref="ix_21-debugging-asciidoc0" smilref="Programming_Robots_with_ROS00026.smil#ch21-idp45576336">While we use custom tools, the principles of debugging a ROS system are the same as debugging any other system: when something goes wrong, you first need to understand what is happening and why. The key is to gain visibility into the workings of the system, which is what the tools described in this chapter provide. Once you can see what's going on, you're on the path to figuring out how to fix it.</p>
              </div>
            </section>
          </div>
        </section>
      </level1>
      <level1 id="ch22">
        <section xmlns:epub="http://www.idpf.org/2007/ops" data-type="chapter" epub:type="chapter" data-pdf-bookmark="Chapter 22. The ROS Community: Online Resources" id="section_000221">
          <h1 id="h1_000513" smilref="Programming_Robots_with_ROS00026.smil#h1_000513">Chapter 22. The ROS Community: Online Resources</h1>
          <div class="chapter" id="ch22-community">
            <p id="ch22-ix_22-community-asciidoc0" data-type="indexterm" data-primary="ROS community" smilref="Programming_Robots_with_ROS00026.smil#ch22-ix_22-community-asciidoc0">In this book, we have explained how to use the libraries and tools that make up ROS. Along the way, we have implicitly been making the argument that you should use ROS for your next robotics project because of the technical merits of the software. But that's only part of the story.</p>
            <p id="p_001613" smilref="Programming_Robots_with_ROS00026.smil#p_001613">As with any large open source project, much of the strength of ROS derives not from the software itself, but from the community that develops, uses, and supports that software. If ROS were a finished product--a complete system that satisfied everyone's robotics needs--then the community would not play such a prominent role. But ROS is not finished: it is a living ecosystem of code and documentation, with thousands of people around the world constantly fixing, improving, and extending it. In this chapter, we'll introduce you to the online resources through which you can connect with the ROS community and hopefully become a contributor yourself.</p>
            <section data-type="sect1" data-pdf-bookmark="Etiquette" id="section_000222">
              <h1 id="h1_000514" smilref="Programming_Robots_with_ROS00026.smil#h1_000514">Etiquette</h1>
              <div class="sect1" id="ch22-idp45581552">
                <p id="ch22-idp45582752" data-type="indexterm" data-primary="etiquette, online" data-secondary="etiquette" smilref="Programming_Robots_with_ROS00026.smil#ch22-idp45582752">First, let's talk about good online etiquette. It's easy to get right, as most of us do most of the time: just behave in a reasonable manner. But it's also easy to become frustrated when something isn't working properly, or at least not the way that we think it should work. For those times, here are a few points to keep in mind:</p>
                <list type="ul" id="list_000031">
                  <li id="li_000106">
                    <p id="p_001614">
                      <span class="text" id="span_008207" smilref="Programming_Robots_with_ROS00026.smil#span_008207">Assume</span>
                      <em id="em_000480" smilref="Programming_Robots_with_ROS00026.smil#em_000480">good faith</em>
                      <span class="text" id="span_008208" smilref="Programming_Robots_with_ROS00026.smil#span_008208">on the part of your fellow community members. The bug that you found was just a mistake. The missing documentation that you need was just an oversight. The delay in responding to your question is just because we're all busy. And the seemingly caustic response that you received is just a misinterpretation of tone. We'll make more and quicker progress by giving everyone the benefit of the doubt.</span>
                    </p>
                  </li>
                  <li id="li_000107">
                    <p id="p_001615" smilref="Programming_Robots_with_ROS00026.smil#p_001615">Don't repeat questions on mailing lists or forums. The original question will have been seen, and if you haven't gotten a response then likely nobody has had time to answer yet. Alternatively, it could be that nobody knows the answer. In any case, repeating questions is poor form.</p>
                  </li>
                  <li id="li_000108">
                    <p id="p_001616" smilref="Programming_Robots_with_ROS00026.smil#p_001616">Don't try to raise the priority of your question or issue by demanding a fast answer or listing personal deadlines (homework, project, etc.). Doing so is unlikely to generate sympathy, and may even have the effect of slowing down the response.</p>
                  </li>
                </list>
                <p id="p_001617" smilref="Programming_Robots_with_ROS00026.smil#p_001617">We're all involved in this project because we want it to continue to succeed. Our contributions will make the greatest if we collaborate politely and generously.</p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="The ROS Wiki" id="section_000223">
              <h1 id="h1_000515" smilref="Programming_Robots_with_ROS00026.smil#h1_000515">The ROS Wiki</h1>
              <div class="sect1" id="ch22-idp45591024">
                <p id="ch22-idp45592464" data-type="indexterm" data-primary="ROS community" data-secondary="ROS wiki">
                  <span class="text" id="span_008209" smilref="Programming_Robots_with_ROS00026.smil#span_008209">The online hub of the community is the</span>
                  <a href="http://wiki.ros.org?distro=indigo" external="true" id="a_000416" smilref="Programming_Robots_with_ROS00026.smil#a_000416">ROS wiki</a>
                  <span class="text" id="span_008210" smilref="Programming_Robots_with_ROS00026.smil#span_008210">. The wiki contains information about ROS as a whole (e.g., installation instructions) and documentation specific to ROS packages, including all of the tools and libraries described in this book. The wiki is also your entry point to other online resources (repositories, trackers, etc.).</span>
                </p>
                <p class="keep-together" id="p_001618">
                  <span class="text" id="span_008211" smilref="Programming_Robots_with_ROS00026.smil#span_008211">The backbone of the wiki is a set of package pages, each named</span>
                  <em id="em_000481" smilref="Programming_Robots_with_ROS00026.smil#em_000481">http://wiki.ros.org/&lt;package name&gt;</em>
                  <span class="text" id="span_008212" smilref="Programming_Robots_with_ROS00026.smil#span_008212">. For example, to find documentation on the</span>
                  <code xml:space="preserve" id="code_002451" smilref="Programming_Robots_with_ROS00026.smil#code_002451">rospy</code>
                  <span class="text" id="span_008213" smilref="Programming_Robots_with_ROS00026.smil#span_008213">package, you would go to</span>
                  <a href="http://wiki.ros.org/rospy?distro=indigo" external="true" id="a_000417">
                    <em class="hyperlink" id="em_000482" smilref="Programming_Robots_with_ROS00026.smil#em_000482">http://wiki.ros.org/rospy?distro=indigo</em>
                  </a>
                  <span class="text" id="span_008214" smilref="Programming_Robots_with_ROS00026.smil#span_008214">. The package pages follow a consistent format and are partially autogenerated from metadata that is extracted from the packages' code (see</span>
                  <a data-type="xref" href="#ch22-community_ros_wiki_screenshot" external="false" id="a_000418" smilref="Programming_Robots_with_ROS00026.smil#a_000418">Figure 22-1</a>
                  <span class="text" id="span_008215" smilref="Programming_Robots_with_ROS00026.smil#span_008215">). In addition to introducing and explaining</span>
                  <span class="keep-together" id="span_008216" smilref="Programming_Robots_with_ROS00026.smil#span_008216">the purpose and</span>
                  <span class="text" id="span_008217" smilref="Programming_Robots_with_ROS00026.smil#span_008217">usage of the package, a good package page will offer links to</span>
                  <span class="keep-together" id="span_008218" smilref="Programming_Robots_with_ROS00026.smil#span_008218">related resources, such as</span>
                  <span class="text" id="span_008219" smilref="Programming_Robots_with_ROS00026.smil#span_008219">tutorials, troubleshooting guides, change logs, and API documentation.</span>
                </p>
                <p id="p_001619" smilref="Programming_Robots_with_ROS00026.smil#p_001619">The wiki is editable by anyone, including you, and we rely on the collective efforts of the community to maintain and update it. Developers do their best to write good documentation for their packages, but documentation can almost always be improved by users. When you see an opportunity to improve a page in the wiki, whether it's a minor typographical edit or the addition of an entirely new tutorial, please do!</p>
                <figure id="figure_000123">
                  <h1 id="h1_000516" smilref="Programming_Robots_with_ROS00026.smil#h1_000516">Figure 22-1. The ROS wiki: the home for information and documentation about ROS software</h1>
                  <div id="ch22-community_ros_wiki_screenshot" class="figure">
                    <img src="images/prwr_2201.jpg" alt="ROS wiki screenshot" id="img_000313" />
                  </div>
                </figure>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="ROS Answers" id="section_000224">
              <h1 id="h1_000517" smilref="Programming_Robots_with_ROS00026.smil#h1_000517">ROS Answers</h1>
              <div class="sect1" id="ch22-idp45604576">
                <p id="ch22-ix_22-community-asciidoc1" data-type="indexterm" data-primary="ROS Answers" data-secondary="ROS Answers">
                  <span class="text" id="span_008220" smilref="Programming_Robots_with_ROS00026.smil#span_008220">When you have a question about ROS--from "How do I do X?" to "Why doesn't Y work like Z?"--you should visit</span>
                  <a href="http://answers.ros.org" external="true" id="a_000419" smilref="Programming_Robots_with_ROS00026.smil#a_000419">ROS Answers</a>
                  <span class="text" id="span_008221" smilref="Programming_Robots_with_ROS00026.smil#span_008221">. ROS Answers is a Q&amp;A forum, similar in functionality to Stack Overflow but scoped to ROS (see</span>
                  <a data-type="xref" href="#ch22-community_ros_answers_screenshot" external="false" id="a_000420" smilref="Programming_Robots_with_ROS00026.smil#a_000420">Figure 22-2</a>
                  <span class="text" id="span_008222" smilref="Programming_Robots_with_ROS00026.smil#span_008222">). Because it is designed specifically to handle questions and answers, ROS Answers is the best way to address troubleshooting queries.</span>
                </p>
                <figure id="figure_000124">
                  <h1 id="h1_000518" smilref="Programming_Robots_with_ROS00026.smil#h1_000518">Figure 22-2. ROS Answers: the Q&amp;A forum for the ROS community</h1>
                  <div id="ch22-community_ros_answers_screenshot" class="figure">
                    <img src="images/prwr_2202.jpg" alt="ROS Answers screenshot" id="img_000314" />
                  </div>
                </figure>
                <p id="p_001620" smilref="Programming_Robots_with_ROS00026.smil#p_001620">Before asking a question, be sure to search for similar questions that have been asked in the past. While you might be the first to encounter a particular problem, it's often the case that someone else has been there before and asked about it at ROS Answers. If you don't find an answer to your question in the archive (which at the time of writing contained more than 18,000 questions), then by all means ask it. Here are some guidelines for asking good questions:</p>
                <list type="ul" id="list_000032">
                  <li id="li_000109">
                    <p id="p_001621" smilref="Programming_Robots_with_ROS00026.smil#p_001621">Be as specific as possible. If you're asking how to do something, give as much context as you can; it may be that, given information about your goal, someone will suggest an alternative approach. If you've encountered unexpected behavior (e.g., something appears to be broken), then provide steps to reproduce that behavior.</p>
                  </li>
                  <li id="li_000110">
                    <p id="p_001622" smilref="Programming_Robots_with_ROS00026.smil#p_001622">Where appropriate, include error/warning messages, relevant code snippets, debugger backtraces, bags and other log files, as well as images and/or videos that demonstrate the problem.</p>
                  </li>
                  <li id="li_000111">
                    <p id="p_001623" smilref="Programming_Robots_with_ROS00027.smil#p_001623">Provide relevant type and version information for your system. At least the ROS distribution name (Hydro, Indigo, etc.) should be included. Depending on the nature of the question, it may be helpful to include names and versions for specific ROS packages, the underlying operating system, and/or your hardware.</p>
                  </li>
                  <li id="li_000112">
                    <p id="p_001624" smilref="Programming_Robots_with_ROS00027.smil#p_001624">When including output from a program, such as error or warning messages, always copy and paste them, rather than re-typing them. Small typing mistakes can make a big difference, and it's important to see the exact output.</p>
                  </li>
                </list>
                <p id="ch22-idp45619408" data-type="indexterm" data-startref="ix_22-community-asciidoc1" smilref="Programming_Robots_with_ROS00027.smil#ch22-idp45619408">Like the wiki, ROS Answers is editable by everyone, including you, and we rely on the community to answer questions. If you know the answer to a question, answer it!</p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Trackers (Bugs and Feature Requests)" id="section_000225">
              <h1 id="h1_000519" smilref="Programming_Robots_with_ROS00027.smil#h1_000519">Trackers (Bugs and Feature Requests)</h1>
              <div class="sect1" id="ch22-idp45620224">
                <p id="ch22-idp45628960" data-type="indexterm" data-primary="bug reports" data-secondary="trackers (bugs/feature requests)" smilref="Programming_Robots_with_ROS00027.smil#ch22-idp45628960">It may happen that the answer to your question at ROS Answers is something like, "Yes, that looks like a bug," or perhaps, "No, that capability hasn't been implemented." Or it could be that you have independently identified a bug or missing feature. In any case, bugs and feature requests should be reported to the appropriate issue tracker.</p>
                <p class="keep-together" id="p_001625">
                  <span class="text" id="span_008223" smilref="Programming_Robots_with_ROS00027.smil#span_008223">Because of the distributed nature of ROS code, there is no central issue tracker for ROS. Rather, each package or collection of packages has its own issue tracker. To find the right issue tracker, you first need to decide in which package the problem lies. It's OK if you're not sure; make your best guess, and the issue can be migrated later if needed. Go that package's page in the wiki (</span>
                  <em id="em_000483" smilref="Programming_Robots_with_ROS00027.smil#em_000483">http://wiki.ros.org/&lt;package name&gt;</em>
                  <span class="text" id="span_008224" smilref="Programming_Robots_with_ROS00027.smil#span_008224">), where you should find a link for reporting bugs and requesting features. If such a link is not available, follow the link for the source, which will take you to the repository containing the code; from there you can navigate to the issue tracker for that repository.</span>
                </p>
                <p id="p_001626" smilref="Programming_Robots_with_ROS00027.smil#p_001626">To file a good bug report or feature request, start with the guidelines given in the previous section for ROS Answers. And if you can, try to supply a patch that fixes the bug or implements the feature. The best issues, and the ones that are serviced most promptly, are those that come with patches.</p>
                <p id="p_001627" smilref="Programming_Robots_with_ROS00027.smil#p_001627">Like the wiki and ROS Answers, the ROS issue trackers are open to everyone, including you. If you see a bug that you can fix or a feature that you can implement, please do!</p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Mailing Lists and Special Interest Groups" id="section_000226">
              <h1 id="h1_000520" smilref="Programming_Robots_with_ROS00027.smil#h1_000520">Mailing Lists and Special Interest Groups</h1>
              <div class="sect1" id="ch22-idp45637296">
                <p data-type="indexterm" data-primary="mailing lists" id="ch22-idp45638528" data-secondary="mailing lists">
                  <span class="text" id="span_008225" smilref="Programming_Robots_with_ROS00027.smil#span_008225">The primary ROS mailing list is</span>
                  <em id="em_000484" smilref="Programming_Robots_with_ROS00027.smil#em_000484">ros-users@lists.ros.org</em>
                  <span class="text" id="span_008226" smilref="Programming_Robots_with_ROS00027.smil#span_008226">. List archives and subscription information can be found at</span>
                  <a href="http://lists.ros.org/mailman/listinfo/ros-users" external="true" id="a_000421">
                    <em class="hyperlink" id="em_000485" smilref="Programming_Robots_with_ROS00027.smil#em_000485">http://lists.ros.org/mailman/listinfo/ros-users</em>
                  </a>
                  <span class="text" id="span_008227" smilref="Programming_Robots_with_ROS00027.smil#span_008227">. The</span>
                  <em id="em_000486" smilref="Programming_Robots_with_ROS00027.smil#em_000486">ros-users@</em>
                  <span class="text" id="span_008228" smilref="Programming_Robots_with_ROS00027.smil#span_008228">list is used only for announcements and discussions of general interest to the ROS community. If you have released a new ROS package or are hosting a ROS-related event, then post it to</span>
                  <em id="em_000487" smilref="Programming_Robots_with_ROS00027.smil#em_000487">ros-users@</em>
                  <span class="text" id="span_008229" smilref="Programming_Robots_with_ROS00027.smil#span_008229">. On the other hand, if you have a question about how to use ROS, or have found a bug, use ROS Answers and/or the issue trackers, as explained in the previous sections.</span>
                </p>
                <p id="p_001628">
                  <span class="text" id="span_008230" smilref="Programming_Robots_with_ROS00027.smil#span_008230">Within the ROS community, there are various subcommunities that focus on specific topics, from embedded systems, to driver development, to robot arms. These subcommunities self-organize into special interest groups, or SIGs, which have their own mailing lists and discussion forums. Information on ROS SIGs, including a list of active groups and advice on creating a new group, can be found</span>
                  <a href="http://wiki.ros.org/sig" external="true" id="a_000422" smilref="Programming_Robots_with_ROS00027.smil#a_000422">on the wiki</a>
                  <span class="text" id="span_008231" smilref="Programming_Robots_with_ROS00027.smil#span_008231">.</span>
                </p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Finding and Sharing Code" id="section_000227">
              <h1 id="h1_000521" smilref="Programming_Robots_with_ROS00027.smil#h1_000521">Finding and Sharing Code</h1>
              <div class="sect1" id="ch22-idp45646640">
                <p id="ch22-idp45647840" data-type="indexterm" data-primary="code, finding and sharing" data-secondary="finding and sharing code" smilref="Programming_Robots_with_ROS00027.smil#ch22-idp45647840">As with issue trackers, there is no single repository for ROS code. Instead, code is distributed throughout many different repositories, often on a package-by-package basis. This arrangement allows for maximum flexibility in how and where code is stored, what licenses are applied, and how development and releases are handled. To find the repository that contains the code for a particular package, follow the source's link from that package's page in the wiki.</p>
                <p id="ch22-idp45653056" data-type="indexterm" data-startref="ix_22-community-asciidoc0">
                  <span class="text" id="span_008232" smilref="Programming_Robots_with_ROS00027.smil#span_008232">People often ask the question, "How can I contribute my new package to ROS?" The answer is: put the code in publicly accessible repository, then tell the community about it. You can use your favorite version control tool and keep your code wherever you like (though it is highly recommended that you use</span>
                  <code xml:space="preserve" id="code_002452" smilref="Programming_Robots_with_ROS00027.smil#code_002452">git</code>
                  <span class="text" id="span_008233" smilref="Programming_Robots_with_ROS00027.smil#span_008233">and host the code at</span>
                  <a href="https://github.com" external="true" id="a_000423" smilref="Programming_Robots_with_ROS00027.smil#a_000423">GitHub</a>
                  <span class="text" id="span_008234" smilref="Programming_Robots_with_ROS00027.smil#span_008234">, which is where most existing ROS software is hosted. To have your repository indexed for inclusion in the ROS wiki, you just need to provide a few pieces of information; for details, see the</span>
                  <a href="http://bit.ly/doc_generation" external="true" id="a_000424" smilref="Programming_Robots_with_ROS00027.smil#a_000424">tutorial</a>
                  <span class="text" id="span_008235" smilref="Programming_Robots_with_ROS00027.smil#span_008235">on the ROS wiki. You're not giving the code to ROS so much as letting the ROS community know where to find it.</span>
                </p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Summary" id="section_000228">
              <h1 id="h1_000522" smilref="Programming_Robots_with_ROS00027.smil#h1_000522">Summary</h1>
              <div class="sect1" id="ch22-idp45654032">
                <p id="p_001629" smilref="Programming_Robots_with_ROS00027.smil#p_001629">In this chapter, we covered the online resources that allow you to connect with and join the ROS community. Whether you have a troubleshooting question, a bug to report, or a new package to announce, communicating with the community is easy to do. ROS is a collaborative effort, driven by the needs and contributions of the community. Get involved, don't be shy, and let us know what you're working on.</p>
              </div>
            </section>
          </div>
        </section>
      </level1>
      <level1 id="ch23">
        <section xmlns:epub="http://www.idpf.org/2007/ops" data-type="chapter" epub:type="chapter" data-pdf-bookmark="Chapter 23. Using C++ in ROS" id="section_000229">
          <h1 id="h1_000523" smilref="Programming_Robots_with_ROS00027.smil#h1_000523">Chapter 23. Using C++ in ROS</h1>
          <div class="chapter" id="ch23-cpp">
            <p id="ch23-ix_23-cplusplus-asciidoc0" data-type="indexterm" data-primary="C++" data-secondary="using, in ROS" smilref="Programming_Robots_with_ROS00027.smil#ch23-ix_23-cplusplus-asciidoc0">We chose to use Python for this book for a number of reasons. First, it's an accessible language for people without a lot of computer science background. Second, it has a lot of useful stuff in the core packages, which lets us concentrate on higher-level concepts. Third, ROS has strong support for Python. Fourth, we wanted to pick a single language for all of the examples in the book, and Python seemed like a reasonable choice.</p>
            <p id="p_001630" smilref="Programming_Robots_with_ROS00027.smil#p_001630">However, sometimes you're going to want to use another language for your ROS development. Maybe some library that you need to use doesn't have Python support. Maybe you're more comfortable developing in another language. Maybe you want the (often slight) speed advantage that a compiled language brings. In this chapter, we're going to look at how the API in C++, one of the other supported languages, differs from the Python API, and how you can translate the examples in this book to C++. All of the idioms and design patterns for C++, and any other language that has a ROS API, will be the same: we're still going to use callbacks, we're still going to pass messages over topics, and so on. However, the syntax and specific data structures will be a little different. Once you learn how to map the Python examples onto your language of choice, then you'll be able to easily translate examples from one language to another.</p>
            <p id="p_001631" smilref="Programming_Robots_with_ROS00027.smil#p_001631">The two best-supported language APIs in ROS are for Python and C++. In this chapter, we'll concentrate on the C++ API, but many of the things that we talk about will apply to APIs in other languages. Once you figure out the syntax and data structure differences, things will start to look the same, and you'll be able to change languages at will.</p>
            <section data-type="sect1" data-pdf-bookmark="When Should You Use C (or Some Other Language)?" id="section_000230">
              <h1 id="h1_000524" smilref="Programming_Robots_with_ROS00027.smil#h1_000524">When Should You Use C (or Some Other Language)?</h1>
              <div class="sect1" id="ch23-idp45662656">
                <p id="ch23-idp45664064" data-type="indexterm" data-primary="C++" data-secondary="reasons for using" smilref="Programming_Robots_with_ROS00027.smil#ch23-idp45664064">When should you use C++, or one of the other supported languages? The short answer is: when it makes your life easier. Since ROS is inherently a distributed system, it's easy to mix nodes written in different languages within the same system, with the messaging system (topics, services, and actions) acting as the glue that holds everything together.</p>
                <p class="keep-together" id="p_001632">
                  <span class="text" id="span_008236" smilref="Programming_Robots_with_ROS00027.smil#span_008236">Sometimes you will have a sensor or actuator with an API in C or C++, and it will be much easier to wrap this up into a ROS node if you use C++. Or, if you're new to Python but have years of C++ coding experience, you might just be more efficient writing code in C++. Similarly, if you're making extensive use of code that's written in C++, then it's easier to wrap this up in a C++ node. You might even be forced to use</span>
                  <span class="keep-together" id="span_008237" smilref="Programming_Robots_with_ROS00027.smil#span_008237">C++</span>
                  <span class="text" id="span_008238" smilref="Programming_Robots_with_ROS00027.smil#span_008238">because you're maintaining or extending a package that someone else wrote in C++.</span>
                </p>
                <p id="p_001633">
                  <span class="text" id="span_008239" smilref="Programming_Robots_with_ROS00027.smil#span_008239">Sometimes, especially if you're doing complex mathematical calculations, you'll want to write a node in C++ to make it faster. Be careful about this, though, since Python libraries like</span>
                  <code xml:space="preserve" id="code_002453" smilref="Programming_Robots_with_ROS00027.smil#code_002453">scipy</code>
                  <span class="text" id="span_008240" smilref="Programming_Robots_with_ROS00027.smil#span_008240">are already very well optimized and will most likely be running the same code as your C++ implementation under the hood. Python does introduce some slowness, but you should be objective when you make the decision to implement something in C++. A C++ node might be faster than a similar Python node, but does the speed increase justify the extra development time of writing and debugging the C++ node?</span>
                </p>
                <p id="p_001634" smilref="Programming_Robots_with_ROS00027.smil#p_001634">Whatever your reasons for using C++ in ROS, whether they're driven by programming language zealotry or by cold, hard facts, let's look at how to write and build a ROS node with C++.</p>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Building C++ with catkin" id="section_000231">
              <h1 id="h1_000525" smilref="Programming_Robots_with_ROS00027.smil#h1_000525">Building C++ with catkin</h1>
              <div class="sect1" id="ch23-idp45669984">
                <p data-type="indexterm" data-primary="C++" data-secondary="building, with catkin" id="ch23-ix_23-cplusplus-asciidoc1">
                  <span class="text" id="span_008241" smilref="Programming_Robots_with_ROS00027.smil#span_008241">The main difference between C++ and Python (for our purposes, at least) is that C++ is a compiled language, while Python is an interpreted one. This means that you're going to be interacting more with</span>
                  <code xml:space="preserve" id="code_002454" smilref="Programming_Robots_with_ROS00027.smil#code_002454">catkin</code>
                  <span class="text" id="span_008242" smilref="Programming_Robots_with_ROS00027.smil#span_008242">and the ROS build system when you're using C++. Every time you make a change to your code, you're going to have to recompile it using</span>
                  <code id="ch23-idp45674080" xml:space="preserve" smilref="Programming_Robots_with_ROS00027.smil#ch23-idp45674080">catkin_make</code>
                  <span class="text" id="span_008243" smilref="Programming_Robots_with_ROS00027.smil#span_008243">, and depending on the changes that you've made, you might also have to edit some other files.</span>
                </p>
                <p id="ch23-idp45677568" data-type="indexterm" data-primary="recompiling" smilref="Programming_Robots_with_ROS00027.smil#ch23-idp45677568">This need to recompile is, in our opinion, one of the reasons to prefer Python for development. You can iterate on changes faster with Python because you don't have to recompile your code. ROS is a big software system, and if your node is complex and has many dependencies, your compile might take a few minutes. This will inevitably slow down your development process a bit.</p>
                <p id="p_001635" smilref="Programming_Robots_with_ROS00027.smil#p_001635">Putting our biases to one side for the moment, let's look at the files you need to edit when using C++.</p>
                <section data-type="sect2" data-pdf-bookmark="package.xml" id="section_000232">
                  <h1 id="h1_000526" smilref="Programming_Robots_with_ROS00027.smil#h1_000526">package.xml</h1>
                  <div class="sect2" id="ch23-idp45679440">
                    <p data-type="indexterm" data-primary="C++" data-secondary="and package.xml" id="ch23-idp45680816">
                      <span class="text" id="span_008244" smilref="Programming_Robots_with_ROS00027.smil#span_008244">The</span>
                      <em id="em_000488" smilref="Programming_Robots_with_ROS00027.smil#em_000488">package.xml</em>
                      <span class="text" id="span_008245" smilref="Programming_Robots_with_ROS00027.smil#span_008245">file is the place where you declare all of your dependencies. When using C++, you have to declare both a build and a runtime dependency on</span>
                      <code id="ch23-idp45681792" xml:space="preserve" smilref="Programming_Robots_with_ROS00027.smil#ch23-idp45681792">roscpp</code>
                      <span class="text" id="span_008246" smilref="Programming_Robots_with_ROS00027.smil#span_008246">:</span>
                    </p>
                    <p id="p_001636">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_002455" smilref="Programming_Robots_with_ROS00027.smil#code_002455">&lt;build_depend&gt;roscpp&lt;/build_depend&gt;
&lt;run_depend&gt;roscpp&lt;/run_depend&gt;</code>
                    </p>
                    <p id="p_001637">
                      <span class="text" id="span_008247" smilref="Programming_Robots_with_ROS00027.smil#span_008247">You can either do this manually, by editing the file, or have</span>
                      <code xml:space="preserve" id="code_002456" smilref="Programming_Robots_with_ROS00027.smil#code_002456">catkin_create_pkg</code>
                      <span class="text" id="span_008248" smilref="Programming_Robots_with_ROS00027.smil#span_008248">do it for you when you create the package:</span>
                    </p>
                    <p id="p_001638">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_002457"><span class="text" id="span_008249" smilref="Programming_Robots_with_ROS00027.smil#span_008249">
user@hostname$ </span><strong id="strong_000271"><span class="text" id="span_008250" smilref="Programming_Robots_with_ROS00027.smil#span_008250">catkin_create_pkg </span><em id="em_000489" smilref="Programming_Robots_with_ROS00027.smil#em_000489">&lt;package name&gt;</em><span class="text" id="span_008251" smilref="Programming_Robots_with_ROS00027.smil#span_008251"> roscpp</span></strong>
</code>
                    </p>
                    <p id="p_001639" smilref="Programming_Robots_with_ROS00027.smil#p_001639">You'll also need to add in dependencies, both build and runtime, for any additional packages that you use in your node, just as you did when using Python.</p>
                  </div>
                </section>
                <section data-type="sect2" data-pdf-bookmark="CMakeLists.txt" id="section_000233">
                  <h1 id="h1_000527" smilref="Programming_Robots_with_ROS00027.smil#h1_000527">CMakeLists.txt</h1>
                  <div class="sect2" id="ch23-idp45692240">
                    <p data-type="indexterm" data-primary="C++" data-secondary="and CMakeLists.txt" id="ch23-idp45693680">
                      <span class="text" id="span_008252" smilref="Programming_Robots_with_ROS00027.smil#span_008252">You'll also need to add to the</span>
                      <em id="em_000490" smilref="Programming_Robots_with_ROS00027.smil#em_000490">CMakeLists.txt</em>
                      <span class="text" id="span_008253" smilref="Programming_Robots_with_ROS00027.smil#span_008253">file, so that the build system knows what you're trying to do and where to find things. In particular, you need to modify the file in the directory where your</span>
                      <em id="ch23-idp45694880" smilref="Programming_Robots_with_ROS00027.smil#ch23-idp45694880">src</em>
                      <span class="text" id="span_008254" smilref="Programming_Robots_with_ROS00027.smil#span_008254">directory lives (where your</span>
                      <em id="ch23-idp45695824" smilref="Programming_Robots_with_ROS00027.smil#ch23-idp45695824">package.xml</em>
                      <span class="text" id="span_008255" smilref="Programming_Robots_with_ROS00027.smil#span_008255">file also lives), not the one at the top of your</span>
                      <code xml:space="preserve" id="code_002458" smilref="Programming_Robots_with_ROS00027.smil#code_002458">catkin</code>
                      <span class="text" id="span_008256" smilref="Programming_Robots_with_ROS00027.smil#span_008256">workspace. Suppose you're going to build a node called</span>
                      <code xml:space="preserve" id="code_002459" smilref="Programming_Robots_with_ROS00027.smil#code_002459">minimal</code>
                      <span class="text" id="span_008257" smilref="Programming_Robots_with_ROS00027.smil#span_008257">from a single source file,</span>
                      <em id="em_000491" smilref="Programming_Robots_with_ROS00027.smil#em_000491">minimal.cpp</em>
                      <span class="text" id="span_008258" smilref="Programming_Robots_with_ROS00027.smil#span_008258">. You first have to let the build system know about the executable, and all of the files needed to build it:</span>
                    </p>
                    <p id="p_001640">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_002460" smilref="Programming_Robots_with_ROS00027.smil#code_002460">add_executable(minimal
  src/minimal.cpp
)</code>
                    </p>
                    <p id="p_001641">
                      <span class="text" id="span_008259" smilref="Programming_Robots_with_ROS00027.smil#span_008259">This tells the build system that you're going to build an executable called</span>
                      <code xml:space="preserve" id="code_002461" smilref="Programming_Robots_with_ROS00027.smil#code_002461">minimal</code>
                      <span class="text" id="span_008260" smilref="Programming_Robots_with_ROS00027.smil#span_008260">from the file</span>
                      <em id="em_000492" smilref="Programming_Robots_with_ROS00027.smil#em_000492">minimal.cpp</em>
                      <span class="text" id="span_008261" smilref="Programming_Robots_with_ROS00027.smil#span_008261">. If you have more than one executable in your package, you need to add lines like this for each one. If an executable is built from more than a single source file, you need to list these files in the body of</span>
                      <code xml:space="preserve" id="code_002462" smilref="Programming_Robots_with_ROS00027.smil#code_002462">add_executable()</code>
                      <span class="text" id="span_008262" smilref="Programming_Robots_with_ROS00027.smil#span_008262">.</span>
                    </p>
                    <p id="p_001642">
                      <span class="text" id="span_008263" smilref="Programming_Robots_with_ROS00027.smil#span_008263">You also need to tell the build system about any link dependencies that you have. At a minimum, this will be the set of dependencies that</span>
                      <code xml:space="preserve" id="code_002463" smilref="Programming_Robots_with_ROS00027.smil#code_002463">catkin</code>
                      <span class="text" id="span_008264" smilref="Programming_Robots_with_ROS00027.smil#span_008264">has worked out for you, based on the build dependencies in your</span>
                      <em id="em_000493" smilref="Programming_Robots_with_ROS00027.smil#em_000493">package.xml</em>
                      <span class="text" id="span_008265" smilref="Programming_Robots_with_ROS00027.smil#span_008265">file:</span>
                    </p>
                    <p id="p_001643">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_002464" smilref="Programming_Robots_with_ROS00027.smil#code_002464">target_link_libraries(minimal
  ${catkin_LIBRARIES}
)</code>
                    </p>
                    <p class="pagebreak-before" id="p_001644" smilref="Programming_Robots_with_ROS00027.smil#p_001644">Again, you need to add lines like this for each of the executables you build. Once you've got this information in place, then you're ready to build your node.</p>
                  </div>
                </section>
                <section data-type="sect2" data-pdf-bookmark="catkin_make" id="section_000234">
                  <h1 id="h1_000528" smilref="Programming_Robots_with_ROS00027.smil#h1_000528">catkin_make</h1>
                  <div class="sect2" id="ch23-idp45705488">
                    <p data-type="indexterm" data-primary="C++" data-secondary="catkin_make and" id="ch23-idp45684832">
                      <span class="text" id="span_008266" smilref="Programming_Robots_with_ROS00027.smil#span_008266">To build your node, invoke</span>
                      <code xml:space="preserve" id="code_002465" smilref="Programming_Robots_with_ROS00027.smil#code_002465">catkin_make</code>
                      <span class="text" id="span_008267" smilref="Programming_Robots_with_ROS00027.smil#span_008267">from the root of your</span>
                      <code id="ch23-idp45707872" xml:space="preserve" smilref="Programming_Robots_with_ROS00027.smil#ch23-idp45707872">catkin</code>
                      <span class="text" id="span_008268" smilref="Programming_Robots_with_ROS00027.smil#span_008268">workspace. This will build your code, and make sure that everything that you depend upon is up to date. To make things easier on you, you should structure your directories according to</span>
                      <a href="http://www.ros.org/reps/rep-0128.html" external="true" id="a_000425" smilref="Programming_Robots_with_ROS00027.smil#a_000425">ROS Enhancement Proposal (REP) 128</a>
                      <span class="text" id="span_008269" smilref="Programming_Robots_with_ROS00027.smil#span_008269">. Basically, this means that there should be a directory called</span>
                      <em id="em_000494" smilref="Programming_Robots_with_ROS00027.smil#em_000494">src</em>
                      <span class="text" id="span_008270" smilref="Programming_Robots_with_ROS00027.smil#span_008270">in your</span>
                      <code xml:space="preserve" id="code_002466" smilref="Programming_Robots_with_ROS00027.smil#code_002466">catkin</code>
                      <span class="text" id="span_008271" smilref="Programming_Robots_with_ROS00027.smil#span_008271">workspace directory. Individual package directories should live in this</span>
                      <em id="em_000495" smilref="Programming_Robots_with_ROS00027.smil#em_000495">src</em>
                      <span class="text" id="span_008272" smilref="Programming_Robots_with_ROS00027.smil#span_008272">directory. Within a package directory, there should be a</span>
                      <em id="em_000496" smilref="Programming_Robots_with_ROS00027.smil#em_000496">package.xml</em>
                      <span class="text" id="span_008273" smilref="Programming_Robots_with_ROS00027.smil#span_008273">, a</span>
                      <em id="em_000497" smilref="Programming_Robots_with_ROS00027.smil#em_000497">CMakeLists.txt</em>
                      <span class="text" id="span_008274" smilref="Programming_Robots_with_ROS00027.smil#span_008274">, and another</span>
                      <em id="em_000498" smilref="Programming_Robots_with_ROS00027.smil#em_000498">src</em>
                      <span class="text" id="span_008275" smilref="Programming_Robots_with_ROS00027.smil#span_008275">directory (where your source code actually lives):</span>
                    </p>
                    <p id="p_001645">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_002467" smilref="Programming_Robots_with_ROS00027.smil#code_002467">catkin_workspace/
  src/
    CMakeLists.txt
    package_1/
      CMakeLists.txt
      package.xml
    ...
    package_n/
      CMakeLists.txt
      package.xml
  build/
  devel/</code>
                    </p>
                    <p id="ch23-idp45718624" data-type="indexterm" data-startref="ix_23-cplusplus-asciidoc1">
                      <span class="text" id="span_008276" smilref="Programming_Robots_with_ROS00027.smil#span_008276">You invoke</span>
                      <code xml:space="preserve" id="code_002468" smilref="Programming_Robots_with_ROS00027.smil#code_002468">catkin_make</code>
                      <span class="text" id="span_008277" smilref="Programming_Robots_with_ROS00027.smil#span_008277">from</span>
                      <em id="em_000499" smilref="Programming_Robots_with_ROS00027.smil#em_000499">catkin_workspace</em>
                      <span class="text" id="span_008278" smilref="Programming_Robots_with_ROS00027.smil#span_008278">. This will build your</span>
                      <code xml:space="preserve" id="code_002469" smilref="Programming_Robots_with_ROS00027.smil#code_002469">minimal</code>
                      <span class="text" id="span_008279" smilref="Programming_Robots_with_ROS00027.smil#span_008279">executable and place it in</span>
                      <em id="em_000500" smilref="Programming_Robots_with_ROS00027.smil#em_000500">catkin_workspace/devel/lib/&lt;package name&gt;/minimal</em>
                      <span class="text" id="span_008280" smilref="Programming_Robots_with_ROS00027.smil#span_008280">.</span>
                    </p>
                    <p id="p_001646" smilref="Programming_Robots_with_ROS00027.smil#p_001646">Now that we've seen how to build a C++ node, let's look at what goes into the node itself, and how to translate from the Python examples in this book to C++.</p>
                  </div>
                </section>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Translating from Python to C++ (and Back Again)" id="section_000235">
              <h1 id="h1_000529" smilref="Programming_Robots_with_ROS00027.smil#h1_000529">Translating from Python to C++ (and Back Again)</h1>
              <div class="sect1" id="ch23-idp45719872">
                <p class="keep-together" id="ch23-ix_23-cplusplus-asciidoc4" data-type="indexterm" data-primary="C++" data-secondary="translating from Python to" smilref="Programming_Robots_with_ROS00027.smil#ch23-ix_23-cplusplus-asciidoc4">To understand how to translate from the Python examples in this book to C++, you only really need to know three things: how a node is put together, how the three communication mechanisms are defined, and how to translate the data structures from one language to another. We'll start by looking at how to write a minimal node in C++.</p>
                <section data-type="sect2" class="pagebreak-before" data-pdf-bookmark="A Simple Node" id="section_000236">
                  <h1 id="h1_000530" smilref="Programming_Robots_with_ROS00027.smil#h1_000530">A Simple Node</h1>
                  <div class="sect2" id="ch23-idp45724912">
                    <p id="ch23-idp45726816" data-type="indexterm" data-primary="C++" data-secondary="minimal node in">
                      <a data-type="xref" href="#ch23-minimal_node" external="false" id="a_000426" smilref="Programming_Robots_with_ROS00027.smil#a_000426">Example 23-1</a>
                      <span class="text" id="span_008281" smilref="Programming_Robots_with_ROS00027.smil#span_008281">shows the code for a minimal C++ node in ROS.</span>
                    </p>
                    <h1 id="h1_000531" smilref="Programming_Robots_with_ROS00027.smil#h1_000531">Example 23-1. minimal.cpp</h1>
                    <div id="ch23-minimal_node" data-type="example">
                      <p id="p_001647">
                        <code class="preserve-whitespace" xml:space="preserve" id="code_002470"><span class="text" id="span_008282" smilref="Programming_Robots_with_ROS00027.smil#span_008282">#</span><span class="text" id="span_008283" smilref="Programming_Robots_with_ROS00027.smil#span_008283">include &lt;ros</span><span class="text" id="span_008284" smilref="Programming_Robots_with_ROS00027.smil#span_008284">/</span><span class="text" id="span_008285" smilref="Programming_Robots_with_ROS00027.smil#span_008285">ros.h&gt; </span><a class="co" id="ch23-co_using_c___in_ros_CO1-1" href="#ch23-callout_using_c___in_ros_CO1-1" external="false"><img src="images/1.jpg" alt="1" id="img_000315" /></a>


<span class="text" id="span_008286" smilref="Programming_Robots_with_ROS00027.smil#span_008286">int</span> <span class="text" id="span_008287" smilref="Programming_Robots_with_ROS00027.smil#span_008287">main</span><span class="text" id="span_008288" smilref="Programming_Robots_with_ROS00027.smil#span_008288">(</span><span class="text" id="span_008289" smilref="Programming_Robots_with_ROS00027.smil#span_008289">int</span> <span class="text" id="span_008290" smilref="Programming_Robots_with_ROS00027.smil#span_008290">argc</span><span class="text" id="span_008291" smilref="Programming_Robots_with_ROS00027.smil#span_008291">,</span> <span class="text" id="span_008292" smilref="Programming_Robots_with_ROS00027.smil#span_008292">char</span> <span class="text" id="span_008293" smilref="Programming_Robots_with_ROS00027.smil#span_008293">*</span><span class="text" id="span_008294" smilref="Programming_Robots_with_ROS00027.smil#span_008294">*</span><span class="text" id="span_008295" smilref="Programming_Robots_with_ROS00027.smil#span_008295">argv</span><span class="text" id="span_008296" smilref="Programming_Robots_with_ROS00027.smil#span_008296">)</span> <span class="text" id="span_008297" smilref="Programming_Robots_with_ROS00027.smil#span_008297">{</span>
  <span class="text" id="span_008298" smilref="Programming_Robots_with_ROS00027.smil#span_008298">ros</span><span class="text" id="span_008299" smilref="Programming_Robots_with_ROS00027.smil#span_008299">:</span><span class="text" id="span_008300" smilref="Programming_Robots_with_ROS00027.smil#span_008300">:</span><span class="text" id="span_008301" smilref="Programming_Robots_with_ROS00027.smil#span_008301">init</span><span class="text" id="span_008302" smilref="Programming_Robots_with_ROS00027.smil#span_008302">(</span><span class="text" id="span_008303" smilref="Programming_Robots_with_ROS00027.smil#span_008303">argc</span><span class="text" id="span_008304" smilref="Programming_Robots_with_ROS00027.smil#span_008304">,</span> <span class="text" id="span_008305" smilref="Programming_Robots_with_ROS00027.smil#span_008305">argv</span><span class="text" id="span_008306" smilref="Programming_Robots_with_ROS00027.smil#span_008306">,</span> <span class="text" id="span_008307" smilref="Programming_Robots_with_ROS00027.smil#span_008307">"</span><span class="text" id="span_008308" smilref="Programming_Robots_with_ROS00027.smil#span_008308">minimal</span><span class="text" id="span_008309" smilref="Programming_Robots_with_ROS00027.smil#span_008309">"</span><span class="text" id="span_008310" smilref="Programming_Robots_with_ROS00027.smil#span_008310">)</span><span class="text" id="span_008311" smilref="Programming_Robots_with_ROS00027.smil#span_008311">;</span>  <a class="co" id="ch23-co_using_c___in_ros_CO1-2" href="#ch23-callout_using_c___in_ros_CO1-2" external="false"><img src="images/2.jpg" alt="2" id="img_000316" /></a>
  <span class="text" id="span_008312" smilref="Programming_Robots_with_ROS00027.smil#span_008312">ros</span><span class="text" id="span_008313" smilref="Programming_Robots_with_ROS00027.smil#span_008313">:</span><span class="text" id="span_008314" smilref="Programming_Robots_with_ROS00027.smil#span_008314">:</span><span class="text" id="span_008315" smilref="Programming_Robots_with_ROS00027.smil#span_008315">NodeHandle</span> <span class="text" id="span_008316" smilref="Programming_Robots_with_ROS00027.smil#span_008316">n</span><span class="text" id="span_008317" smilref="Programming_Robots_with_ROS00027.smil#span_008317">;</span>  <a class="co" id="ch23-co_using_c___in_ros_CO1-3" href="#ch23-callout_using_c___in_ros_CO1-3" external="false"><img src="images/3.jpg" alt="3" id="img_000317" /></a>

  <span class="text" id="span_008318" smilref="Programming_Robots_with_ROS00027.smil#span_008318">ros</span><span class="text" id="span_008319" smilref="Programming_Robots_with_ROS00027.smil#span_008319">:</span><span class="text" id="span_008320" smilref="Programming_Robots_with_ROS00027.smil#span_008320">:</span><span class="text" id="span_008321" smilref="Programming_Robots_with_ROS00027.smil#span_008321">spin</span><span class="text" id="span_008322" smilref="Programming_Robots_with_ROS00027.smil#span_008322">(</span><span class="text" id="span_008323" smilref="Programming_Robots_with_ROS00027.smil#span_008323">)</span><span class="text" id="span_008324" smilref="Programming_Robots_with_ROS00027.smil#span_008324">;</span>  <a class="co" id="ch23-co_using_c___in_ros_CO1-4" href="#ch23-callout_using_c___in_ros_CO1-4" external="false"><img src="images/4.jpg" alt="4" id="img_000318" /></a>

  <span class="text" id="span_008325" smilref="Programming_Robots_with_ROS00027.smil#span_008325">return</span> <span class="text" id="span_008326" smilref="Programming_Robots_with_ROS00027.smil#span_008326">0</span><span class="text" id="span_008327" smilref="Programming_Robots_with_ROS00027.smil#span_008327">;</span>
<span class="text" id="span_008328" smilref="Programming_Robots_with_ROS00027.smil#span_008328">}</span></code>
                      </p>
                    </div>
                    <dl class="calloutlist" id="dl_000031">
                      <dt id="dt_000128">
                        <a class="co" id="ch23-callout_using_c___in_ros_CO1-1" href="#ch23-co_using_c___in_ros_CO1-1" external="false">
                          <img src="images/1.jpg" alt="1" id="img_000319" />
                        </a>
                      </dt>
                      <dd id="dd_000128">
                        <p id="p_001648" smilref="Programming_Robots_with_ROS00027.smil#p_001648">Include the basic ROS header information.</p>
                      </dd>
                      <dt id="dt_000129">
                        <a class="co" id="ch23-callout_using_c___in_ros_CO1-2" href="#ch23-co_using_c___in_ros_CO1-2" external="false">
                          <img src="images/2.jpg" alt="2" id="img_000320" />
                        </a>
                      </dt>
                      <dd id="dd_000129">
                        <p id="p_001649" smilref="Programming_Robots_with_ROS00027.smil#p_001649">Initialize the node, and give it a name.</p>
                      </dd>
                      <dt id="dt_000130">
                        <a class="co" id="ch23-callout_using_c___in_ros_CO1-3" href="#ch23-co_using_c___in_ros_CO1-3" external="false">
                          <img src="images/3.jpg" alt="3" id="img_000321" />
                        </a>
                      </dt>
                      <dd id="dd_000130">
                        <p id="p_001650" smilref="Programming_Robots_with_ROS00027.smil#p_001650">Create a node handle.</p>
                      </dd>
                      <dt id="dt_000131">
                        <a class="co" id="ch23-callout_using_c___in_ros_CO1-4" href="#ch23-co_using_c___in_ros_CO1-4" external="false">
                          <img src="images/4.jpg" alt="4" id="img_000322" />
                        </a>
                      </dt>
                      <dd id="dd_000131">
                        <p id="p_001651" smilref="Programming_Robots_with_ROS00027.smil#p_001651">Give control over to ROS.</p>
                      </dd>
                    </dl>
                    <p id="p_001652">
                      <span class="text" id="span_008329" smilref="Programming_Robots_with_ROS00027.smil#span_008329">All ROS C++ nodes need to include the</span>
                      <em id="em_000501" smilref="Programming_Robots_with_ROS00027.smil#em_000501">ros.h</em>
                      <span class="text" id="span_008330" smilref="Programming_Robots_with_ROS00027.smil#span_008330">header file. Nodes are initialized by a call to</span>
                      <code xml:space="preserve" id="code_002471" smilref="Programming_Robots_with_ROS00027.smil#code_002471">init()</code>
                      <span class="text" id="span_008331" smilref="Programming_Robots_with_ROS00027.smil#span_008331">, giving the command-line arguments and a name for the node. Then, we create a node handle that allows us to create topics, services, and actions. We didn't have to explicitly create a node handle when using Python, since the language was able to do it for us behind the scenes. This is one of the recurring themes when using C++: things often need to be more explicitly specified.</span>
                    </p>
                    <p id="p_001653">
                      <span class="text" id="span_008332" smilref="Programming_Robots_with_ROS00027.smil#span_008332">We need to add both build and runtime dependencies on</span>
                      <code xml:space="preserve" id="code_002472" smilref="Programming_Robots_with_ROS00027.smil#code_002472">roscpp</code>
                      <span class="text" id="span_008333" smilref="Programming_Robots_with_ROS00027.smil#span_008333">to the</span>
                      <em id="em_000502" smilref="Programming_Robots_with_ROS00027.smil#em_000502">package.xml</em>
                      <span class="text" id="span_008334" smilref="Programming_Robots_with_ROS00027.smil#span_008334">file, and modify our</span>
                      <em id="em_000503" smilref="Programming_Robots_with_ROS00027.smil#em_000503">CMakeLists.txt</em>
                      <span class="text" id="span_008335" smilref="Programming_Robots_with_ROS00027.smil#span_008335">to contain the information shown in</span>
                      <a data-type="xref" href="#ch23-minimal_cmake" external="false" id="a_000427" smilref="Programming_Robots_with_ROS00027.smil#a_000427">Example 23-2</a>
                      <span class="text" id="span_008336" smilref="Programming_Robots_with_ROS00027.smil#span_008336">.</span>
                    </p>
                    <h1 id="h1_000532" smilref="Programming_Robots_with_ROS00027.smil#h1_000532">Example 23-2. CMakeLists.txt</h1>
                    <div id="ch23-minimal_cmake" data-type="example">
                      <p id="p_001654">
                        <code class="preserve-whitespace" xml:space="preserve" id="code_002473" smilref="Programming_Robots_with_ROS00027.smil#code_002473">cmake_minimum_required(VERSION 2.8.3)
project(cpp)

find_package(catkin REQUIRED roscpp)


add_executable(minimal src/minimal.cpp)

target_link_libraries(minimal
  ${catkin_LIBRARIES}
)</code>
                      </p>
                    </div>
                    <p id="p_001655">
                      <span class="text" id="span_008337" smilref="Programming_Robots_with_ROS00027.smil#span_008337">In this example, our package is called</span>
                      <code xml:space="preserve" id="code_002474" smilref="Programming_Robots_with_ROS00027.smil#code_002474">cpp</code>
                      <span class="text" id="span_008338" smilref="Programming_Robots_with_ROS00027.smil#span_008338">. Once all of this information is in place, we can</span>
                      <code xml:space="preserve" id="code_002475" smilref="Programming_Robots_with_ROS00027.smil#code_002475">cd</code>
                      <span class="text" id="span_008339" smilref="Programming_Robots_with_ROS00027.smil#span_008339">to our top-level</span>
                      <code xml:space="preserve" id="code_002476" smilref="Programming_Robots_with_ROS00027.smil#code_002476">catkin</code>
                      <span class="text" id="span_008340" smilref="Programming_Robots_with_ROS00027.smil#span_008340">workspace and invoke</span>
                      <code xml:space="preserve" id="code_002477" smilref="Programming_Robots_with_ROS00027.smil#code_002477">catkin_make</code>
                      <span class="text" id="span_008341" smilref="Programming_Robots_with_ROS00027.smil#span_008341">. This will compile our code and make sure all of the dependencies are up to date. Once this is done, we can find the resulting executable in</span>
                      <em id="em_000504" smilref="Programming_Robots_with_ROS00027.smil#em_000504">devel/lib/cpp/minimal</em>
                      <span class="text" id="span_008342" smilref="Programming_Robots_with_ROS00027.smil#span_008342">, and we can run it with</span>
                      <code xml:space="preserve" id="code_002478" smilref="Programming_Robots_with_ROS00027.smil#code_002478">rosrun</code>
                      <span class="text" id="span_008343" smilref="Programming_Robots_with_ROS00027.smil#span_008343">as usual:</span>
                    </p>
                    <p id="p_001656">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_002479"><span class="text" id="span_008344" smilref="Programming_Robots_with_ROS00027.smil#span_008344">
user@hostname$ </span><strong id="strong_000272" smilref="Programming_Robots_with_ROS00027.smil#strong_000272">rosrun cpp minimal</strong>
</code>
                    </p>
                  </div>
                </section>
                <section data-type="sect2" data-pdf-bookmark="Topics" id="section_000237">
                  <h1 id="h1_000533" smilref="Programming_Robots_with_ROS00027.smil#h1_000533">Topics</h1>
                  <div class="sect2" id="ch23-idp45725408">
                    <p id="ch23-ix_23-cplusplus-asciidoc6" data-type="indexterm" data-primary="C++" data-secondary="topic publisher setup">
                      <a data-type="xref" href="#ch23-cpp_topic_publisher" external="false" id="a_000428" smilref="Programming_Robots_with_ROS00027.smil#a_000428">Example 23-3</a>
                      <span class="text" id="span_008345" smilref="Programming_Robots_with_ROS00027.smil#span_008345">shows how to set up a topic publisher in C++. The basic approach (set up the node, define the publisher, publish in a loop) is the same as in Python, but the details are a little different.</span>
                    </p>
                    <h1 id="h1_000534" smilref="Programming_Robots_with_ROS00027.smil#h1_000534">Example 23-3. topic_publisher.cpp</h1>
                    <div id="ch23-cpp_topic_publisher" data-type="example">
                      <p id="p_001657">
                        <code class="preserve-whitespace" xml:space="preserve" id="code_002480"><span class="text" id="span_008346" smilref="Programming_Robots_with_ROS00027.smil#span_008346">#</span><span class="text" id="span_008347" smilref="Programming_Robots_with_ROS00027.smil#span_008347">include &lt;ros</span><span class="text" id="span_008348" smilref="Programming_Robots_with_ROS00027.smil#span_008348">/</span><span class="text" id="span_008349" smilref="Programming_Robots_with_ROS00027.smil#span_008349">ros.h&gt;</span>
<span class="text" id="span_008350" smilref="Programming_Robots_with_ROS00027.smil#span_008350">#</span><span class="text" id="span_008351" smilref="Programming_Robots_with_ROS00027.smil#span_008351">include &lt;std_msgs</span><span class="text" id="span_008352" smilref="Programming_Robots_with_ROS00027.smil#span_008352">/</span><span class="text" id="span_008353" smilref="Programming_Robots_with_ROS00027.smil#span_008353">Int32.h&gt;  </span><a class="co" id="ch23-co_using_c___in_ros_CO2-1" href="#ch23-callout_using_c___in_ros_CO2-1" external="false"><img src="images/1.jpg" alt="1" id="img_000323" /></a>


<span class="text" id="span_008354" smilref="Programming_Robots_with_ROS00027.smil#span_008354">int</span> <span class="text" id="span_008355" smilref="Programming_Robots_with_ROS00027.smil#span_008355">main</span><span class="text" id="span_008356" smilref="Programming_Robots_with_ROS00027.smil#span_008356">(</span><span class="text" id="span_008357" smilref="Programming_Robots_with_ROS00027.smil#span_008357">int</span> <span class="text" id="span_008358" smilref="Programming_Robots_with_ROS00027.smil#span_008358">argc</span><span class="text" id="span_008359" smilref="Programming_Robots_with_ROS00027.smil#span_008359">,</span> <span class="text" id="span_008360" smilref="Programming_Robots_with_ROS00027.smil#span_008360">char</span> <span class="text" id="span_008361" smilref="Programming_Robots_with_ROS00027.smil#span_008361">*</span><span class="text" id="span_008362" smilref="Programming_Robots_with_ROS00027.smil#span_008362">*</span><span class="text" id="span_008363" smilref="Programming_Robots_with_ROS00027.smil#span_008363">argv</span><span class="text" id="span_008364" smilref="Programming_Robots_with_ROS00027.smil#span_008364">)</span> <span class="text" id="span_008365" smilref="Programming_Robots_with_ROS00027.smil#span_008365">{</span>
  <span class="text" id="span_008366" smilref="Programming_Robots_with_ROS00027.smil#span_008366">ros</span><span class="text" id="span_008367" smilref="Programming_Robots_with_ROS00027.smil#span_008367">:</span><span class="text" id="span_008368" smilref="Programming_Robots_with_ROS00027.smil#span_008368">:</span><span class="text" id="span_008369" smilref="Programming_Robots_with_ROS00027.smil#span_008369">init</span><span class="text" id="span_008370" smilref="Programming_Robots_with_ROS00027.smil#span_008370">(</span><span class="text" id="span_008371" smilref="Programming_Robots_with_ROS00027.smil#span_008371">argc</span><span class="text" id="span_008372" smilref="Programming_Robots_with_ROS00027.smil#span_008372">,</span> <span class="text" id="span_008373" smilref="Programming_Robots_with_ROS00027.smil#span_008373">argv</span><span class="text" id="span_008374" smilref="Programming_Robots_with_ROS00027.smil#span_008374">,</span> <span class="text" id="span_008375" smilref="Programming_Robots_with_ROS00027.smil#span_008375">"</span><span class="text" id="span_008376" smilref="Programming_Robots_with_ROS00027.smil#span_008376">count_publisher</span><span class="text" id="span_008377" smilref="Programming_Robots_with_ROS00027.smil#span_008377">"</span><span class="text" id="span_008378" smilref="Programming_Robots_with_ROS00027.smil#span_008378">)</span><span class="text" id="span_008379" smilref="Programming_Robots_with_ROS00027.smil#span_008379">;</span>
  <span class="text" id="span_008380" smilref="Programming_Robots_with_ROS00027.smil#span_008380">ros</span><span class="text" id="span_008381" smilref="Programming_Robots_with_ROS00027.smil#span_008381">:</span><span class="text" id="span_008382" smilref="Programming_Robots_with_ROS00027.smil#span_008382">:</span><span class="text" id="span_008383" smilref="Programming_Robots_with_ROS00027.smil#span_008383">NodeHandle</span> <span class="text" id="span_008384" smilref="Programming_Robots_with_ROS00027.smil#span_008384">node</span><span class="text" id="span_008385" smilref="Programming_Robots_with_ROS00027.smil#span_008385">;</span>

  <span class="text" id="span_008386" smilref="Programming_Robots_with_ROS00027.smil#span_008386">ros</span><span class="text" id="span_008387" smilref="Programming_Robots_with_ROS00027.smil#span_008387">:</span><span class="text" id="span_008388" smilref="Programming_Robots_with_ROS00027.smil#span_008388">:</span><span class="text" id="span_008389" smilref="Programming_Robots_with_ROS00027.smil#span_008389">Publisher</span> <span class="text" id="span_008390" smilref="Programming_Robots_with_ROS00027.smil#span_008390">pub</span> <span class="text" id="span_008391" smilref="Programming_Robots_with_ROS00027.smil#span_008391">=</span> <span class="text" id="span_008392" smilref="Programming_Robots_with_ROS00027.smil#span_008392">node</span><span class="text" id="span_008393" smilref="Programming_Robots_with_ROS00027.smil#span_008393">.</span><span class="text" id="span_008394" smilref="Programming_Robots_with_ROS00027.smil#span_008394">advertise</span><span class="text" id="span_008395" smilref="Programming_Robots_with_ROS00027.smil#span_008395">&lt;</span><span class="text" id="span_008396" smilref="Programming_Robots_with_ROS00027.smil#span_008396">std_msgs</span><span class="text" id="span_008397" smilref="Programming_Robots_with_ROS00027.smil#span_008397">:</span><span class="text" id="span_008398" smilref="Programming_Robots_with_ROS00027.smil#span_008398">:</span><span class="text" id="span_008399" smilref="Programming_Robots_with_ROS00027.smil#span_008399">Int32</span><span class="text" id="span_008400" smilref="Programming_Robots_with_ROS00027.smil#span_008400">&gt;</span><span class="text" id="span_008401" smilref="Programming_Robots_with_ROS00027.smil#span_008401">(</span><span class="text" id="span_008402" smilref="Programming_Robots_with_ROS00027.smil#span_008402">"</span><span class="text" id="span_008403" smilref="Programming_Robots_with_ROS00027.smil#span_008403">counter</span><span class="text" id="span_008404" smilref="Programming_Robots_with_ROS00027.smil#span_008404">"</span><span class="text" id="span_008405" smilref="Programming_Robots_with_ROS00027.smil#span_008405">,</span> <span class="text" id="span_008406" smilref="Programming_Robots_with_ROS00027.smil#span_008406">10</span><span class="text" id="span_008407" smilref="Programming_Robots_with_ROS00027.smil#span_008407">)</span><span class="text" id="span_008408" smilref="Programming_Robots_with_ROS00027.smil#span_008408">;</span> <a class="co" id="ch23-co_using_c___in_ros_CO2-2" href="#ch23-callout_using_c___in_ros_CO2-2" external="false"><img src="images/2.jpg" alt="2" id="img_000324" /></a>

  <span class="text" id="span_008409" smilref="Programming_Robots_with_ROS00027.smil#span_008409">ros</span><span class="text" id="span_008410" smilref="Programming_Robots_with_ROS00027.smil#span_008410">:</span><span class="text" id="span_008411" smilref="Programming_Robots_with_ROS00027.smil#span_008411">:</span><span class="text" id="span_008412" smilref="Programming_Robots_with_ROS00027.smil#span_008412">Rate</span> <span class="text" id="span_008413" smilref="Programming_Robots_with_ROS00027.smil#span_008413">rate</span><span class="text" id="span_008414" smilref="Programming_Robots_with_ROS00027.smil#span_008414">(</span><span class="text" id="span_008415" smilref="Programming_Robots_with_ROS00027.smil#span_008415">1</span><span class="text" id="span_008416" smilref="Programming_Robots_with_ROS00027.smil#span_008416">)</span><span class="text" id="span_008417" smilref="Programming_Robots_with_ROS00027.smil#span_008417">;</span>  <a class="co" id="ch23-co_using_c___in_ros_CO2-3" href="#ch23-callout_using_c___in_ros_CO2-3" external="false"><img src="images/3.jpg" alt="3" id="img_000325" /></a>
  <span class="text" id="span_008418" smilref="Programming_Robots_with_ROS00027.smil#span_008418">int</span> <span class="text" id="span_008419" smilref="Programming_Robots_with_ROS00027.smil#span_008419">count</span> <span class="text" id="span_008420" smilref="Programming_Robots_with_ROS00027.smil#span_008420">=</span> <span class="text" id="span_008421" smilref="Programming_Robots_with_ROS00027.smil#span_008421">0</span><span class="text" id="span_008422" smilref="Programming_Robots_with_ROS00027.smil#span_008422">;</span>

  <span class="text" id="span_008423" smilref="Programming_Robots_with_ROS00027.smil#span_008423">while</span> <span class="text" id="span_008424" smilref="Programming_Robots_with_ROS00027.smil#span_008424">(</span><span class="text" id="span_008425" smilref="Programming_Robots_with_ROS00027.smil#span_008425">ros</span><span class="text" id="span_008426" smilref="Programming_Robots_with_ROS00027.smil#span_008426">:</span><span class="text" id="span_008427" smilref="Programming_Robots_with_ROS00027.smil#span_008427">:</span><span class="text" id="span_008428" smilref="Programming_Robots_with_ROS00027.smil#span_008428">ok</span><span class="text" id="span_008429" smilref="Programming_Robots_with_ROS00027.smil#span_008429">(</span><span class="text" id="span_008430" smilref="Programming_Robots_with_ROS00027.smil#span_008430">)</span><span class="text" id="span_008431" smilref="Programming_Robots_with_ROS00027.smil#span_008431">)</span> <span class="text" id="span_008432" smilref="Programming_Robots_with_ROS00027.smil#span_008432">{</span>  <a class="co" id="ch23-co_using_c___in_ros_CO2-4" href="#ch23-callout_using_c___in_ros_CO2-4" external="false"><img src="images/4.jpg" alt="4" id="img_000326" /></a>
    <span class="text" id="span_008433" smilref="Programming_Robots_with_ROS00027.smil#span_008433">std_msgs</span><span class="text" id="span_008434" smilref="Programming_Robots_with_ROS00027.smil#span_008434">:</span><span class="text" id="span_008435" smilref="Programming_Robots_with_ROS00027.smil#span_008435">:</span><span class="text" id="span_008436" smilref="Programming_Robots_with_ROS00027.smil#span_008436">Int32</span> <span class="text" id="span_008437" smilref="Programming_Robots_with_ROS00027.smil#span_008437">msg</span><span class="text" id="span_008438" smilref="Programming_Robots_with_ROS00027.smil#span_008438">;</span> <a class="co" id="ch23-co_using_c___in_ros_CO2-5" href="#ch23-callout_using_c___in_ros_CO2-5" external="false"><img src="images/5.jpg" alt="5" id="img_000327" /></a>
    <span class="text" id="span_008439" smilref="Programming_Robots_with_ROS00027.smil#span_008439">msg</span><span class="text" id="span_008440" smilref="Programming_Robots_with_ROS00027.smil#span_008440">.</span><span class="text" id="span_008441" smilref="Programming_Robots_with_ROS00027.smil#span_008441">data</span> <span class="text" id="span_008442" smilref="Programming_Robots_with_ROS00027.smil#span_008442">=</span> <span class="text" id="span_008443" smilref="Programming_Robots_with_ROS00027.smil#span_008443">count</span><span class="text" id="span_008444" smilref="Programming_Robots_with_ROS00027.smil#span_008444">;</span>

    <span class="text" id="span_008445" smilref="Programming_Robots_with_ROS00027.smil#span_008445">pub</span><span class="text" id="span_008446" smilref="Programming_Robots_with_ROS00027.smil#span_008446">.</span><span class="text" id="span_008447" smilref="Programming_Robots_with_ROS00027.smil#span_008447">publish</span><span class="text" id="span_008448" smilref="Programming_Robots_with_ROS00027.smil#span_008448">(</span><span class="text" id="span_008449" smilref="Programming_Robots_with_ROS00027.smil#span_008449">msg</span><span class="text" id="span_008450" smilref="Programming_Robots_with_ROS00027.smil#span_008450">)</span><span class="text" id="span_008451" smilref="Programming_Robots_with_ROS00027.smil#span_008451">;</span>  <a class="co" id="ch23-co_using_c___in_ros_CO2-6" href="#ch23-callout_using_c___in_ros_CO2-6" external="false"><img src="images/6.jpg" alt="6" id="img_000328" /></a>

    <span class="text" id="span_008452" smilref="Programming_Robots_with_ROS00027.smil#span_008452">+</span><span class="text" id="span_008453" smilref="Programming_Robots_with_ROS00027.smil#span_008453">+</span><span class="text" id="span_008454" smilref="Programming_Robots_with_ROS00027.smil#span_008454">count</span><span class="text" id="span_008455" smilref="Programming_Robots_with_ROS00027.smil#span_008455">;</span>
    <span class="text" id="span_008456" smilref="Programming_Robots_with_ROS00027.smil#span_008456">rate</span><span class="text" id="span_008457" smilref="Programming_Robots_with_ROS00027.smil#span_008457">.</span><span class="text" id="span_008458" smilref="Programming_Robots_with_ROS00027.smil#span_008458">sleep</span><span class="text" id="span_008459" smilref="Programming_Robots_with_ROS00027.smil#span_008459">(</span><span class="text" id="span_008460" smilref="Programming_Robots_with_ROS00027.smil#span_008460">)</span><span class="text" id="span_008461" smilref="Programming_Robots_with_ROS00027.smil#span_008461">;</span>  <a class="co" id="ch23-co_using_c___in_ros_CO2-7" href="#ch23-callout_using_c___in_ros_CO2-7" external="false"><img src="images/7.jpg" alt="7" id="img_000329" /></a>
  <span class="text" id="span_008462" smilref="Programming_Robots_with_ROS00027.smil#span_008462">}</span>

  <span class="text" id="span_008463" smilref="Programming_Robots_with_ROS00027.smil#span_008463">return</span> <span class="text" id="span_008464" smilref="Programming_Robots_with_ROS00027.smil#span_008464">0</span><span class="text" id="span_008465" smilref="Programming_Robots_with_ROS00027.smil#span_008465">;</span>  <a class="co" id="ch23-co_using_c___in_ros_CO2-8" href="#ch23-callout_using_c___in_ros_CO2-8" external="false"><img src="images/8.jpg" alt="8" id="img_000330" /></a>
<span class="text" id="span_008466" smilref="Programming_Robots_with_ROS00027.smil#span_008466">}</span></code>
                      </p>
                    </div>
                    <dl class="calloutlist" id="dl_000032">
                      <dt id="dt_000132">
                        <a class="co" id="ch23-callout_using_c___in_ros_CO2-1" href="#ch23-co_using_c___in_ros_CO2-1" external="false">
                          <img src="images/1.jpg" alt="1" id="img_000331" />
                        </a>
                      </dt>
                      <dd id="dd_000132">
                        <p id="p_001658" smilref="Programming_Robots_with_ROS00027.smil#p_001658">Include the definition of the message we're going to use.</p>
                      </dd>
                      <dt id="dt_000133">
                        <a class="co" id="ch23-callout_using_c___in_ros_CO2-2" href="#ch23-co_using_c___in_ros_CO2-2" external="false">
                          <img src="images/2.jpg" alt="2" id="img_000332" />
                        </a>
                      </dt>
                      <dd id="dd_000133">
                        <p id="p_001659" smilref="Programming_Robots_with_ROS00027.smil#p_001659">Create the publisher.</p>
                      </dd>
                      <dt id="dt_000134">
                        <a class="co" id="ch23-callout_using_c___in_ros_CO2-3" href="#ch23-co_using_c___in_ros_CO2-3" external="false">
                          <img src="images/3.jpg" alt="3" id="img_000333" />
                        </a>
                      </dt>
                      <dd id="dd_000134">
                        <p id="p_001660">
                          <span class="text" id="span_008467" smilref="Programming_Robots_with_ROS00027.smil#span_008467">Create a</span>
                          <code xml:space="preserve" id="code_002481" smilref="Programming_Robots_with_ROS00027.smil#code_002481">Rate</code>
                          <span class="text" id="span_008468" smilref="Programming_Robots_with_ROS00027.smil#span_008468">instance to control the publishing rate.</span>
                        </p>
                      </dd>
                      <dt id="dt_000135">
                        <a class="co" id="ch23-callout_using_c___in_ros_CO2-4" href="#ch23-co_using_c___in_ros_CO2-4" external="false">
                          <img src="images/4.jpg" alt="4" id="img_000334" />
                        </a>
                      </dt>
                      <dd id="dd_000135">
                        <p id="p_001661" smilref="Programming_Robots_with_ROS00027.smil#p_001661">Loop while the node is alive.</p>
                      </dd>
                      <dt id="dt_000136">
                        <a class="co" id="ch23-callout_using_c___in_ros_CO2-5" href="#ch23-co_using_c___in_ros_CO2-5" external="false">
                          <img src="images/5.jpg" alt="5" id="img_000335" />
                        </a>
                      </dt>
                      <dd id="dd_000136">
                        <p id="p_001662" smilref="Programming_Robots_with_ROS00027.smil#p_001662">Create a message and populate its data field.</p>
                      </dd>
                      <dt id="dt_000137">
                        <a class="co" id="ch23-callout_using_c___in_ros_CO2-6" href="#ch23-co_using_c___in_ros_CO2-6" external="false">
                          <img src="images/6.jpg" alt="6" id="img_000336" />
                        </a>
                      </dt>
                      <dd id="dd_000137">
                        <p id="p_001663" smilref="Programming_Robots_with_ROS00027.smil#p_001663">Publish the message.</p>
                      </dd>
                      <dt id="dt_000138">
                        <a class="co" id="ch23-callout_using_c___in_ros_CO2-7" href="#ch23-co_using_c___in_ros_CO2-7" external="false">
                          <img src="images/7.jpg" alt="7" id="img_000337" />
                        </a>
                      </dt>
                      <dd id="dd_000138">
                        <p id="p_001664" smilref="Programming_Robots_with_ROS00027.smil#p_001664">Wait for a while.</p>
                      </dd>
                      <dt id="dt_000139">
                        <a class="co" id="ch23-callout_using_c___in_ros_CO2-8" href="#ch23-co_using_c___in_ros_CO2-8" external="false">
                          <img src="images/8.jpg" alt="8" id="img_000338" />
                        </a>
                      </dt>
                      <dd id="dd_000139">
                        <p id="p_001665" smilref="Programming_Robots_with_ROS00027.smil#p_001665">Return success.</p>
                      </dd>
                    </dl>
                    <p id="p_001666" smilref="Programming_Robots_with_ROS00027.smil#p_001666">The two notable parts of this code are the creation of the topic publisher, and the loop condition. To create a publisher, we use the syntax:</p>
                    <p id="p_001667">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_002482" smilref="Programming_Robots_with_ROS00027.smil#code_002482">ros::Publisher pub = node.advertise&lt;std_msgs::Int32&gt;("counter", 10);</code>
                    </p>
                    <p id="p_001668">
                      <span class="text" id="span_008469" smilref="Programming_Robots_with_ROS00027.smil#span_008469">This is a function defined as part of the</span>
                      <code xml:space="preserve" id="code_002483" smilref="Programming_Robots_with_ROS00027.smil#code_002483">NodeHandle</code>
                      <span class="text" id="span_008470" smilref="Programming_Robots_with_ROS00027.smil#span_008470">class, templated on the type of message that's being sent. The parameters are the topic name, and the buffer size. The loop condition:</span>
                    </p>
                    <p id="p_001669">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_002484" smilref="Programming_Robots_with_ROS00027.smil#code_002484">while (ros::ok()) {</code>
                    </p>
                    <p id="p_001670" smilref="Programming_Robots_with_ROS00027.smil#p_001670">will evaluate to true as long as the node is running and has not received a Ctrl-C to shut it down.</p>
                    <p class="keep-together" id="p_001671">
                      <span class="text" id="span_008471" smilref="Programming_Robots_with_ROS00027.smil#span_008471">The corresponding topic subscriber node is shown in</span>
                      <a data-type="xref" href="#ch23-cpp_topic_subscriber" external="false" id="a_000429" smilref="Programming_Robots_with_ROS00027.smil#a_000429">Example 23-4</a>
                      <span class="text" id="span_008472" smilref="Programming_Robots_with_ROS00027.smil#span_008472">, and is even simpler.</span>
                    </p>
                    <h1 id="h1_000535" smilref="Programming_Robots_with_ROS00027.smil#h1_000535">Example 23-4. topic_subscriber.cpp</h1>
                    <div id="ch23-cpp_topic_subscriber" data-type="example">
                      <p id="p_001672">
                        <code class="preserve-whitespace" xml:space="preserve" id="code_002485"><span class="text" id="span_008473" smilref="Programming_Robots_with_ROS00027.smil#span_008473">#</span><span class="text" id="span_008474" smilref="Programming_Robots_with_ROS00027.smil#span_008474">include &lt;ros</span><span class="text" id="span_008475" smilref="Programming_Robots_with_ROS00027.smil#span_008475">/</span><span class="text" id="span_008476" smilref="Programming_Robots_with_ROS00027.smil#span_008476">ros.h&gt;</span>
<span class="text" id="span_008477" smilref="Programming_Robots_with_ROS00027.smil#span_008477">#</span><span class="text" id="span_008478" smilref="Programming_Robots_with_ROS00027.smil#span_008478">include &lt;std_msgs</span><span class="text" id="span_008479" smilref="Programming_Robots_with_ROS00027.smil#span_008479">/</span><span class="text" id="span_008480" smilref="Programming_Robots_with_ROS00027.smil#span_008480">Int32.h&gt;</span>

<span class="text" id="span_008481" smilref="Programming_Robots_with_ROS00027.smil#span_008481">#</span><span class="text" id="span_008482" smilref="Programming_Robots_with_ROS00027.smil#span_008482">include &lt;iostream&gt;</span>


<span class="text" id="span_008483" smilref="Programming_Robots_with_ROS00027.smil#span_008483">void</span> <span class="text" id="span_008484" smilref="Programming_Robots_with_ROS00027.smil#span_008484">callback</span><span class="text" id="span_008485" smilref="Programming_Robots_with_ROS00027.smil#span_008485">(</span><span class="text" id="span_008486" smilref="Programming_Robots_with_ROS00027.smil#span_008486">const</span> <span class="text" id="span_008487" smilref="Programming_Robots_with_ROS00027.smil#span_008487">std_msgs</span><span class="text" id="span_008488" smilref="Programming_Robots_with_ROS00027.smil#span_008488">:</span><span class="text" id="span_008489" smilref="Programming_Robots_with_ROS00027.smil#span_008489">:</span><span class="text" id="span_008490" smilref="Programming_Robots_with_ROS00027.smil#span_008490">Int32</span><span class="text" id="span_008491" smilref="Programming_Robots_with_ROS00027.smil#span_008491">:</span><span class="text" id="span_008492" smilref="Programming_Robots_with_ROS00027.smil#span_008492">:</span><span class="text" id="span_008493" smilref="Programming_Robots_with_ROS00027.smil#span_008493">ConstPtr</span> <span class="text" id="span_008494" smilref="Programming_Robots_with_ROS00027.smil#span_008494">&amp;</span><span class="text" id="span_008495" smilref="Programming_Robots_with_ROS00027.smil#span_008495">msg</span><span class="text" id="span_008496" smilref="Programming_Robots_with_ROS00027.smil#span_008496">)</span> <span class="text" id="span_008497" smilref="Programming_Robots_with_ROS00027.smil#span_008497">{</span>  <a class="co" id="ch23-co_using_c___in_ros_CO3-1" href="#ch23-callout_using_c___in_ros_CO3-1" external="false"><img src="images/1.jpg" alt="1" id="img_000339" /></a>
  <span class="text" id="span_008498" smilref="Programming_Robots_with_ROS00027.smil#span_008498">std</span><span class="text" id="span_008499" smilref="Programming_Robots_with_ROS00027.smil#span_008499">:</span><span class="text" id="span_008500" smilref="Programming_Robots_with_ROS00027.smil#span_008500">:</span><span class="text" id="span_008501" smilref="Programming_Robots_with_ROS00027.smil#span_008501">cout</span> <span class="text" id="span_008502" smilref="Programming_Robots_with_ROS00027.smil#span_008502">&lt;</span><span class="text" id="span_008503" smilref="Programming_Robots_with_ROS00027.smil#span_008503">&lt;</span> <span class="text" id="span_008504" smilref="Programming_Robots_with_ROS00027.smil#span_008504">msg</span><span class="text" id="span_008505" smilref="Programming_Robots_with_ROS00027.smil#span_008505">-</span><span class="text" id="span_008506" smilref="Programming_Robots_with_ROS00027.smil#span_008506">&gt;</span><span class="text" id="span_008507" smilref="Programming_Robots_with_ROS00027.smil#span_008507">data</span> <span class="text" id="span_008508" smilref="Programming_Robots_with_ROS00027.smil#span_008508">&lt;</span><span class="text" id="span_008509" smilref="Programming_Robots_with_ROS00027.smil#span_008509">&lt;</span> <span class="text" id="span_008510" smilref="Programming_Robots_with_ROS00027.smil#span_008510">std</span><span class="text" id="span_008511" smilref="Programming_Robots_with_ROS00027.smil#span_008511">:</span><span class="text" id="span_008512" smilref="Programming_Robots_with_ROS00027.smil#span_008512">:</span><span class="text" id="span_008513" smilref="Programming_Robots_with_ROS00027.smil#span_008513">endl</span><span class="text" id="span_008514" smilref="Programming_Robots_with_ROS00027.smil#span_008514">;</span>
<span class="text" id="span_008515" smilref="Programming_Robots_with_ROS00027.smil#span_008515">}</span>


<span class="text" id="span_008516" smilref="Programming_Robots_with_ROS00027.smil#span_008516">int</span> <span class="text" id="span_008517" smilref="Programming_Robots_with_ROS00027.smil#span_008517">main</span><span class="text" id="span_008518" smilref="Programming_Robots_with_ROS00027.smil#span_008518">(</span><span class="text" id="span_008519" smilref="Programming_Robots_with_ROS00027.smil#span_008519">int</span> <span class="text" id="span_008520" smilref="Programming_Robots_with_ROS00027.smil#span_008520">argc</span><span class="text" id="span_008521" smilref="Programming_Robots_with_ROS00027.smil#span_008521">,</span> <span class="text" id="span_008522" smilref="Programming_Robots_with_ROS00027.smil#span_008522">char</span> <span class="text" id="span_008523" smilref="Programming_Robots_with_ROS00027.smil#span_008523">*</span><span class="text" id="span_008524" smilref="Programming_Robots_with_ROS00027.smil#span_008524">*</span><span class="text" id="span_008525" smilref="Programming_Robots_with_ROS00027.smil#span_008525">argv</span><span class="text" id="span_008526" smilref="Programming_Robots_with_ROS00027.smil#span_008526">)</span> <span class="text" id="span_008527" smilref="Programming_Robots_with_ROS00027.smil#span_008527">{</span>
  <span class="text" id="span_008528" smilref="Programming_Robots_with_ROS00027.smil#span_008528">ros</span><span class="text" id="span_008529" smilref="Programming_Robots_with_ROS00027.smil#span_008529">:</span><span class="text" id="span_008530" smilref="Programming_Robots_with_ROS00027.smil#span_008530">:</span><span class="text" id="span_008531" smilref="Programming_Robots_with_ROS00027.smil#span_008531">init</span><span class="text" id="span_008532" smilref="Programming_Robots_with_ROS00027.smil#span_008532">(</span><span class="text" id="span_008533" smilref="Programming_Robots_with_ROS00027.smil#span_008533">argc</span><span class="text" id="span_008534" smilref="Programming_Robots_with_ROS00027.smil#span_008534">,</span> <span class="text" id="span_008535" smilref="Programming_Robots_with_ROS00027.smil#span_008535">argv</span><span class="text" id="span_008536" smilref="Programming_Robots_with_ROS00027.smil#span_008536">,</span> <span class="text" id="span_008537" smilref="Programming_Robots_with_ROS00027.smil#span_008537">"</span><span class="text" id="span_008538" smilref="Programming_Robots_with_ROS00027.smil#span_008538">count_subscriber</span><span class="text" id="span_008539" smilref="Programming_Robots_with_ROS00027.smil#span_008539">"</span><span class="text" id="span_008540" smilref="Programming_Robots_with_ROS00027.smil#span_008540">)</span><span class="text" id="span_008541" smilref="Programming_Robots_with_ROS00027.smil#span_008541">;</span>
  <span class="text" id="span_008542" smilref="Programming_Robots_with_ROS00027.smil#span_008542">ros</span><span class="text" id="span_008543" smilref="Programming_Robots_with_ROS00027.smil#span_008543">:</span><span class="text" id="span_008544" smilref="Programming_Robots_with_ROS00027.smil#span_008544">:</span><span class="text" id="span_008545" smilref="Programming_Robots_with_ROS00027.smil#span_008545">NodeHandle</span> <span class="text" id="span_008546" smilref="Programming_Robots_with_ROS00027.smil#span_008546">node</span><span class="text" id="span_008547" smilref="Programming_Robots_with_ROS00027.smil#span_008547">;</span>

  <span class="text" id="span_008548" smilref="Programming_Robots_with_ROS00027.smil#span_008548">ros</span><span class="text" id="span_008549" smilref="Programming_Robots_with_ROS00027.smil#span_008549">:</span><span class="text" id="span_008550" smilref="Programming_Robots_with_ROS00027.smil#span_008550">:</span><span class="text" id="span_008551" smilref="Programming_Robots_with_ROS00027.smil#span_008551">Subscriber</span> <span class="text" id="span_008552" smilref="Programming_Robots_with_ROS00027.smil#span_008552">sub</span> <span class="text" id="span_008553" smilref="Programming_Robots_with_ROS00027.smil#span_008553">=</span> <span class="text" id="span_008554" smilref="Programming_Robots_with_ROS00027.smil#span_008554">node</span><span class="text" id="span_008555" smilref="Programming_Robots_with_ROS00027.smil#span_008555">.</span><span class="text" id="span_008556" smilref="Programming_Robots_with_ROS00027.smil#span_008556">subscribe</span><span class="text" id="span_008557" smilref="Programming_Robots_with_ROS00027.smil#span_008557">(</span><span class="text" id="span_008558" smilref="Programming_Robots_with_ROS00027.smil#span_008558">"</span><span class="text" id="span_008559" smilref="Programming_Robots_with_ROS00027.smil#span_008559">counter</span><span class="text" id="span_008560" smilref="Programming_Robots_with_ROS00027.smil#span_008560">"</span><span class="text" id="span_008561" smilref="Programming_Robots_with_ROS00027.smil#span_008561">,</span> <span class="text" id="span_008562" smilref="Programming_Robots_with_ROS00027.smil#span_008562">10</span><span class="text" id="span_008563" smilref="Programming_Robots_with_ROS00027.smil#span_008563">,</span> <span class="text" id="span_008564" smilref="Programming_Robots_with_ROS00027.smil#span_008564">callback</span><span class="text" id="span_008565" smilref="Programming_Robots_with_ROS00027.smil#span_008565">)</span><span class="text" id="span_008566" smilref="Programming_Robots_with_ROS00027.smil#span_008566">;</span>  <a class="co" id="ch23-co_using_c___in_ros_CO3-2" href="#ch23-callout_using_c___in_ros_CO3-2" external="false"><img src="images/2.jpg" alt="2" id="img_000340" /></a>

  <span class="text" id="span_008567" smilref="Programming_Robots_with_ROS00027.smil#span_008567">ros</span><span class="text" id="span_008568" smilref="Programming_Robots_with_ROS00027.smil#span_008568">:</span><span class="text" id="span_008569" smilref="Programming_Robots_with_ROS00027.smil#span_008569">:</span><span class="text" id="span_008570" smilref="Programming_Robots_with_ROS00027.smil#span_008570">spin</span><span class="text" id="span_008571" smilref="Programming_Robots_with_ROS00027.smil#span_008571">(</span><span class="text" id="span_008572" smilref="Programming_Robots_with_ROS00027.smil#span_008572">)</span><span class="text" id="span_008573" smilref="Programming_Robots_with_ROS00027.smil#span_008573">;</span>
<span class="text" id="span_008574" smilref="Programming_Robots_with_ROS00027.smil#span_008574">}</span></code>
                      </p>
                    </div>
                    <dl class="calloutlist" id="dl_000033">
                      <dt id="dt_000140">
                        <a class="co" id="ch23-callout_using_c___in_ros_CO3-1" href="#ch23-co_using_c___in_ros_CO3-1" external="false">
                          <img src="images/1.jpg" alt="1" id="img_000341" />
                        </a>
                      </dt>
                      <dd id="dd_000140">
                        <p id="p_001673" smilref="Programming_Robots_with_ROS00027.smil#p_001673">Define the callback function.</p>
                      </dd>
                      <dt id="dt_000141">
                        <a class="co" id="ch23-callout_using_c___in_ros_CO3-2" href="#ch23-co_using_c___in_ros_CO3-2" external="false">
                          <img src="images/2.jpg" alt="2" id="img_000342" />
                        </a>
                      </dt>
                      <dd id="dd_000141">
                        <p id="p_001674" smilref="Programming_Robots_with_ROS00027.smil#p_001674">Create the subscriber.</p>
                      </dd>
                    </dl>
                    <p id="p_001675" smilref="Programming_Robots_with_ROS00027.smil#p_001675">As with the publisher, the subscriber is called on the node instance, but this time we don't need a template argument since it can be calculated from the type of the callback parameter. The three arguments are the topic name, the buffer size, and the callback function.</p>
                    <p id="ch23-idp46379152" data-type="indexterm" data-primary="callback function" data-secondary="and Python-C++ translation" smilref="Programming_Robots_with_ROS00027.smil#ch23-idp46379152">The trickiest part is the callback function:</p>
                    <p id="p_001676">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_002486" smilref="Programming_Robots_with_ROS00027.smil#code_002486">void callback(const std_msgs::Int32::ConstPtr &amp;msg) {</code>
                    </p>
                    <p id="p_001677">
                      <span class="text" id="span_008575" smilref="Programming_Robots_with_ROS00027.smil#span_008575">This function should have a return type of</span>
                      <code xml:space="preserve" id="code_002487" smilref="Programming_Robots_with_ROS00028.smil#code_002487">void</code>
                      <span class="text" id="span_008576" smilref="Programming_Robots_with_ROS00028.smil#span_008576">, and a single argument that is a</span>
                      <code xml:space="preserve" id="code_002488" smilref="Programming_Robots_with_ROS00028.smil#code_002488">const</code>
                      <span class="text" id="span_008577" smilref="Programming_Robots_with_ROS00028.smil#span_008577">reference to a</span>
                      <code xml:space="preserve" id="code_002489" smilref="Programming_Robots_with_ROS00028.smil#code_002489">const</code>
                      <span class="text" id="span_008578" smilref="Programming_Robots_with_ROS00028.smil#span_008578">pointer to the message type. In this instance, the message type is</span>
                      <code xml:space="preserve" id="code_002490" smilref="Programming_Robots_with_ROS00028.smil#code_002490">std_msgs::Int32</code>
                      <span class="text" id="span_008579" smilref="Programming_Robots_with_ROS00028.smil#span_008579">, and this has a type of</span>
                      <code xml:space="preserve" id="code_002491" smilref="Programming_Robots_with_ROS00028.smil#code_002491">ConstPtr</code>
                      <span class="text" id="span_008580" smilref="Programming_Robots_with_ROS00028.smil#span_008580">defined within it. In general, the argument for a callback dealing with messages of type</span>
                      <em id="em_000505">
                        <code xml:space="preserve" id="code_002492" smilref="Programming_Robots_with_ROS00028.smil#code_002492">T</code>
                      </em>
                      <span class="text" id="span_008581" smilref="Programming_Robots_with_ROS00028.smil#span_008581">should have an argument of type</span>
                      <code xml:space="preserve" id="code_002493"><span class="text" id="span_008582" smilref="Programming_Robots_with_ROS00028.smil#span_008582">const </span><em id="em_000506" smilref="Programming_Robots_with_ROS00028.smil#em_000506">T</em><span class="text" id="span_008583" smilref="Programming_Robots_with_ROS00028.smil#span_008583">::ConstPtr &amp;</span></code>
                      <span class="text" id="span_008584" smilref="Programming_Robots_with_ROS00028.smil#span_008584">. When building the message definition,</span>
                      <code xml:space="preserve" id="code_002494" smilref="Programming_Robots_with_ROS00028.smil#code_002494">catkin</code>
                      <span class="text" id="span_008585" smilref="Programming_Robots_with_ROS00028.smil#span_008585">will make sure that the type</span>
                      <code xml:space="preserve" id="code_002495" smilref="Programming_Robots_with_ROS00028.smil#code_002495">ConstPtr</code>
                      <span class="text" id="span_008586" smilref="Programming_Robots_with_ROS00028.smil#span_008586">is defined for your message types. Note that</span>
                      <code xml:space="preserve" id="code_002496" smilref="Programming_Robots_with_ROS00028.smil#code_002496">ConstPtr</code>
                      <span class="text" id="span_008587" smilref="Programming_Robots_with_ROS00028.smil#span_008587">is a reference-counted smart pointer. You're not expected to call</span>
                      <code xml:space="preserve" id="code_002497" smilref="Programming_Robots_with_ROS00028.smil#code_002497">delete()</code>
                      <span class="text" id="span_008588" smilref="Programming_Robots_with_ROS00028.smil#span_008588">on this when you're done with the message.</span>
                    </p>
                    <h1 id="h1_000536" smilref="Programming_Robots_with_ROS00028.smil#h1_000536">Tip</h1>
                    <div data-type="tip" id="div_000048">
                      <p id="p_001678">
                        <span class="text" id="span_008589" smilref="Programming_Robots_with_ROS00028.smil#span_008589">Although we've used one particular signature for the callback here (using</span>
                        <code xml:space="preserve" id="code_002498" smilref="Programming_Robots_with_ROS00028.smil#code_002498">ConstPtr</code>
                        <span class="text" id="span_008590" smilref="Programming_Robots_with_ROS00028.smil#span_008590">), there are actually several that will work just as well (they all resolve to the same underlying types). We suggest that you use signatures like this in your code, but don't be surprised if you see a different, but equivalent, signature in someone else's code.</span>
                      </p>
                    </div>
                    <p id="p_001679">
                      <span class="text" id="span_008591" smilref="Programming_Robots_with_ROS00028.smil#span_008591">Note that, when accessing the data from the message, you should use the dereferencing operator</span>
                      <code xml:space="preserve" id="code_002499" smilref="Programming_Robots_with_ROS00028.smil#code_002499">-&gt;</code>
                      <span class="text" id="span_008592" smilref="Programming_Robots_with_ROS00028.smil#span_008592">:</span>
                    </p>
                    <p id="p_001680">
                      <code class="preserve-whitespace" xml:space="preserve" id="code_002500" smilref="Programming_Robots_with_ROS00028.smil#code_002500">std::cout &lt;&lt; msg-&gt;data &lt;&lt; std::endl;</code>
                    </p>
                    <p id="ch23-idp46447808" data-type="indexterm" data-startref="ix_23-cplusplus-asciidoc6" smilref="Programming_Robots_with_ROS00028.smil#ch23-idp46447808">As you can see, the basic structure and idioms of a C++ node are the same as those of a Python node, even if the syntax is a little different. This is also true for services and actions.</p>
                  </div>
                </section>
                <section data-type="sect2" data-pdf-bookmark="Services" id="section_000238">
                  <h1 id="h1_000537" smilref="Programming_Robots_with_ROS00028.smil#h1_000537">Services</h1>
                  <div class="sect2" id="ch23-idp45908496">
                    <p id="ch23-ix_23-cplusplus-asciidoc8" data-type="indexterm" data-primary="C++" data-secondary="defining services">
                      <span class="text" id="span_008593" smilref="Programming_Robots_with_ROS00028.smil#span_008593">Defining and using services is largely the same as defining and using topics.</span>
                      <a data-type="xref" href="#ch23-cpp_service_server" external="false" id="a_000430" smilref="Programming_Robots_with_ROS00028.smil#a_000430">Example 23-5</a>
                      <span class="text" id="span_008594" smilref="Programming_Robots_with_ROS00028.smil#span_008594">shows how to define the word counting service from</span>
                      <a data-type="xref" href="#ch04-services" external="false" id="a_000431" smilref="Programming_Robots_with_ROS00028.smil#a_000431">Chapter 4</a>
                      <span class="text" id="span_008595" smilref="Programming_Robots_with_ROS00028.smil#span_008595">in C++.</span>
                    </p>
                    <h1 id="h1_000538" smilref="Programming_Robots_with_ROS00028.smil#h1_000538">Example 23-5. service_server.cpp</h1>
                    <div id="ch23-cpp_service_server" data-type="example">
                      <p id="p_001681">
                        <code class="preserve-whitespace" xml:space="preserve" id="code_002501"><span class="text" id="span_008596" smilref="Programming_Robots_with_ROS00028.smil#span_008596">#</span><span class="text" id="span_008597" smilref="Programming_Robots_with_ROS00028.smil#span_008597">include &lt;ros</span><span class="text" id="span_008598" smilref="Programming_Robots_with_ROS00028.smil#span_008598">/</span><span class="text" id="span_008599" smilref="Programming_Robots_with_ROS00028.smil#span_008599">ros.h&gt;</span>
<span class="text" id="span_008600" smilref="Programming_Robots_with_ROS00028.smil#span_008600">#</span><span class="text" id="span_008601" smilref="Programming_Robots_with_ROS00028.smil#span_008601">include &lt;cpp</span><span class="text" id="span_008602" smilref="Programming_Robots_with_ROS00028.smil#span_008602">/</span><span class="text" id="span_008603" smilref="Programming_Robots_with_ROS00028.smil#span_008603">WordCount.h&gt;</span>


<span class="text" id="span_008604" smilref="Programming_Robots_with_ROS00028.smil#span_008604">bool</span> <span class="text" id="span_008605" smilref="Programming_Robots_with_ROS00028.smil#span_008605">count</span><span class="text" id="span_008606" smilref="Programming_Robots_with_ROS00028.smil#span_008606">(</span><span class="text" id="span_008607" smilref="Programming_Robots_with_ROS00028.smil#span_008607">cpp</span><span class="text" id="span_008608" smilref="Programming_Robots_with_ROS00028.smil#span_008608">:</span><span class="text" id="span_008609" smilref="Programming_Robots_with_ROS00028.smil#span_008609">:</span><span class="text" id="span_008610" smilref="Programming_Robots_with_ROS00028.smil#span_008610">WordCount</span><span class="text" id="span_008611" smilref="Programming_Robots_with_ROS00028.smil#span_008611">:</span><span class="text" id="span_008612" smilref="Programming_Robots_with_ROS00028.smil#span_008612">:</span><span class="text" id="span_008613" smilref="Programming_Robots_with_ROS00028.smil#span_008613">Request</span> <span class="text" id="span_008614" smilref="Programming_Robots_with_ROS00028.smil#span_008614">&amp;</span><span class="text" id="span_008615" smilref="Programming_Robots_with_ROS00028.smil#span_008615">req</span><span class="text" id="span_008616" smilref="Programming_Robots_with_ROS00028.smil#span_008616">,</span>  <a class="co" id="ch23-co_using_c___in_ros_CO4-1" href="#ch23-callout_using_c___in_ros_CO4-1" external="false"><img src="images/1.jpg" alt="1" id="img_000343" /></a>
	   <span class="text" id="span_008617" smilref="Programming_Robots_with_ROS00028.smil#span_008617">cpp</span><span class="text" id="span_008618" smilref="Programming_Robots_with_ROS00028.smil#span_008618">:</span><span class="text" id="span_008619" smilref="Programming_Robots_with_ROS00028.smil#span_008619">:</span><span class="text" id="span_008620" smilref="Programming_Robots_with_ROS00028.smil#span_008620">WordCount</span><span class="text" id="span_008621" smilref="Programming_Robots_with_ROS00028.smil#span_008621">:</span><span class="text" id="span_008622" smilref="Programming_Robots_with_ROS00028.smil#span_008622">:</span><span class="text" id="span_008623" smilref="Programming_Robots_with_ROS00028.smil#span_008623">Response</span> <span class="text" id="span_008624" smilref="Programming_Robots_with_ROS00028.smil#span_008624">&amp;</span><span class="text" id="span_008625" smilref="Programming_Robots_with_ROS00028.smil#span_008625">res</span><span class="text" id="span_008626" smilref="Programming_Robots_with_ROS00028.smil#span_008626">)</span> <span class="text" id="span_008627" smilref="Programming_Robots_with_ROS00028.smil#span_008627">{</span>
  <span class="text" id="span_008628" smilref="Programming_Robots_with_ROS00028.smil#span_008628">l</span> <span class="text" id="span_008629" smilref="Programming_Robots_with_ROS00028.smil#span_008629">=</span> <span class="text" id="span_008630" smilref="Programming_Robots_with_ROS00028.smil#span_008630">strlen</span><span class="text" id="span_008631" smilref="Programming_Robots_with_ROS00028.smil#span_008631">(</span><span class="text" id="span_008632" smilref="Programming_Robots_with_ROS00028.smil#span_008632">req</span><span class="text" id="span_008633" smilref="Programming_Robots_with_ROS00028.smil#span_008633">.</span><span class="text" id="span_008634" smilref="Programming_Robots_with_ROS00028.smil#span_008634">words</span><span class="text" id="span_008635" smilref="Programming_Robots_with_ROS00028.smil#span_008635">)</span><span class="text" id="span_008636" smilref="Programming_Robots_with_ROS00028.smil#span_008636">;</span>
  <span class="text" id="span_008637" smilref="Programming_Robots_with_ROS00028.smil#span_008637">if</span> <span class="text" id="span_008638" smilref="Programming_Robots_with_ROS00028.smil#span_008638">(</span><span class="text" id="span_008639" smilref="Programming_Robots_with_ROS00028.smil#span_008639">l</span> <span class="text" id="span_008640" smilref="Programming_Robots_with_ROS00028.smil#span_008640">=</span><span class="text" id="span_008641" smilref="Programming_Robots_with_ROS00028.smil#span_008641">=</span> <span class="text" id="span_008642" smilref="Programming_Robots_with_ROS00028.smil#span_008642">0</span><span class="text" id="span_008643" smilref="Programming_Robots_with_ROS00028.smil#span_008643">)</span>
    <span class="text" id="span_008644" smilref="Programming_Robots_with_ROS00028.smil#span_008644">count</span> <span class="text" id="span_008645" smilref="Programming_Robots_with_ROS00028.smil#span_008645">=</span> <span class="text" id="span_008646" smilref="Programming_Robots_with_ROS00028.smil#span_008646">0</span><span class="text" id="span_008647" smilref="Programming_Robots_with_ROS00028.smil#span_008647">;</span>
  <span class="text" id="span_008648" smilref="Programming_Robots_with_ROS00028.smil#span_008648">else</span> <span class="text" id="span_008649" smilref="Programming_Robots_with_ROS00028.smil#span_008649">{</span>
    <span class="text" id="span_008650" smilref="Programming_Robots_with_ROS00028.smil#span_008650">count</span> <span class="text" id="span_008651" smilref="Programming_Robots_with_ROS00028.smil#span_008651">=</span> <span class="text" id="span_008652" smilref="Programming_Robots_with_ROS00028.smil#span_008652">1</span><span class="text" id="span_008653" smilref="Programming_Robots_with_ROS00028.smil#span_008653">;</span>
    <span class="text" id="span_008654" smilref="Programming_Robots_with_ROS00028.smil#span_008654">for</span><span class="text" id="span_008655" smilref="Programming_Robots_with_ROS00028.smil#span_008655">(</span><span class="text" id="span_008656" smilref="Programming_Robots_with_ROS00028.smil#span_008656">int</span> <span class="text" id="span_008657" smilref="Programming_Robots_with_ROS00028.smil#span_008657">i</span> <span class="text" id="span_008658" smilref="Programming_Robots_with_ROS00028.smil#span_008658">=</span> <span class="text" id="span_008659" smilref="Programming_Robots_with_ROS00028.smil#span_008659">0</span><span class="text" id="span_008660" smilref="Programming_Robots_with_ROS00028.smil#span_008660">;</span> <span class="text" id="span_008661" smilref="Programming_Robots_with_ROS00028.smil#span_008661">i</span> <span class="text" id="span_008662" smilref="Programming_Robots_with_ROS00028.smil#span_008662">&lt;</span> <span class="text" id="span_008663" smilref="Programming_Robots_with_ROS00028.smil#span_008663">l</span><span class="text" id="span_008664" smilref="Programming_Robots_with_ROS00028.smil#span_008664">;</span> <span class="text" id="span_008665" smilref="Programming_Robots_with_ROS00028.smil#span_008665">+</span><span class="text" id="span_008666" smilref="Programming_Robots_with_ROS00028.smil#span_008666">+</span><span class="text" id="span_008667" smilref="Programming_Robots_with_ROS00028.smil#span_008667">i</span><span class="text" id="span_008668" smilref="Programming_Robots_with_ROS00028.smil#span_008668">)</span>
      <span class="text" id="span_008669" smilref="Programming_Robots_with_ROS00028.smil#span_008669">if</span> <span class="text" id="span_008670" smilref="Programming_Robots_with_ROS00028.smil#span_008670">(</span><span class="text" id="span_008671" smilref="Programming_Robots_with_ROS00028.smil#span_008671">req</span><span class="text" id="span_008672" smilref="Programming_Robots_with_ROS00028.smil#span_008672">.</span><span class="text" id="span_008673" smilref="Programming_Robots_with_ROS00028.smil#span_008673">words</span><span class="text" id="span_008674" smilref="Programming_Robots_with_ROS00028.smil#span_008674">[</span><span class="text" id="span_008675" smilref="Programming_Robots_with_ROS00028.smil#span_008675">i</span><span class="text" id="span_008676" smilref="Programming_Robots_with_ROS00028.smil#span_008676">]</span> <span class="text" id="span_008677" smilref="Programming_Robots_with_ROS00028.smil#span_008677">=</span><span class="text" id="span_008678" smilref="Programming_Robots_with_ROS00028.smil#span_008678">=</span> <span class="text" id="span_008679" smilref="Programming_Robots_with_ROS00028.smil#span_008679">' '</span><span class="text" id="span_008680" smilref="Programming_Robots_with_ROS00028.smil#span_008680">)</span>
	<span class="text" id="span_008681" smilref="Programming_Robots_with_ROS00028.smil#span_008681">+</span><span class="text" id="span_008682" smilref="Programming_Robots_with_ROS00028.smil#span_008682">+</span><span class="text" id="span_008683" smilref="Programming_Robots_with_ROS00028.smil#span_008683">count</span><span class="text" id="span_008684" smilref="Programming_Robots_with_ROS00028.smil#span_008684">;</span>
  <span class="text" id="span_008685" smilref="Programming_Robots_with_ROS00028.smil#span_008685">}</span>

  <span class="text" id="span_008686" smilref="Programming_Robots_with_ROS00028.smil#span_008686">res</span><span class="text" id="span_008687" smilref="Programming_Robots_with_ROS00028.smil#span_008687">.</span><span class="text" id="span_008688" smilref="Programming_Robots_with_ROS00028.smil#span_008688">count</span> <span class="text" id="span_008689" smilref="Programming_Robots_with_ROS00028.smil#span_008689">=</span> <span class="text" id="span_008690" smilref="Programming_Robots_with_ROS00028.smil#span_008690">count</span><span class="text" id="span_008691" smilref="Programming_Robots_with_ROS00028.smil#span_008691">;</span>

  <span class="text" id="span_008692" smilref="Programming_Robots_with_ROS00028.smil#span_008692">return</span> <span class="text" id="span_008693" smilref="Programming_Robots_with_ROS00028.smil#span_008693">true</span><span class="text" id="span_008694" smilref="Programming_Robots_with_ROS00028.smil#span_008694">;</span>
<span class="text" id="span_008695" smilref="Programming_Robots_with_ROS00028.smil#span_008695">}</span>


<span class="text" id="span_008696" smilref="Programming_Robots_with_ROS00028.smil#span_008696">int</span> <span class="text" id="span_008697" smilref="Programming_Robots_with_ROS00028.smil#span_008697">main</span><span class="text" id="span_008698" smilref="Programming_Robots_with_ROS00028.smil#span_008698">(</span><span class="text" id="span_008699" smilref="Programming_Robots_with_ROS00028.smil#span_008699">int</span> <span class="text" id="span_008700" smilref="Programming_Robots_with_ROS00028.smil#span_008700">argc</span><span class="text" id="span_008701" smilref="Programming_Robots_with_ROS00028.smil#span_008701">,</span> <span class="text" id="span_008702" smilref="Programming_Robots_with_ROS00028.smil#span_008702">char</span> <span class="text" id="span_008703" smilref="Programming_Robots_with_ROS00028.smil#span_008703">*</span><span class="text" id="span_008704" smilref="Programming_Robots_with_ROS00028.smil#span_008704">*</span><span class="text" id="span_008705" smilref="Programming_Robots_with_ROS00028.smil#span_008705">argv</span><span class="text" id="span_008706" smilref="Programming_Robots_with_ROS00028.smil#span_008706">)</span> <span class="text" id="span_008707" smilref="Programming_Robots_with_ROS00028.smil#span_008707">{</span>
  <span class="text" id="span_008708" smilref="Programming_Robots_with_ROS00028.smil#span_008708">ros</span><span class="text" id="span_008709" smilref="Programming_Robots_with_ROS00028.smil#span_008709">:</span><span class="text" id="span_008710" smilref="Programming_Robots_with_ROS00028.smil#span_008710">:</span><span class="text" id="span_008711" smilref="Programming_Robots_with_ROS00028.smil#span_008711">init</span><span class="text" id="span_008712" smilref="Programming_Robots_with_ROS00028.smil#span_008712">(</span><span class="text" id="span_008713" smilref="Programming_Robots_with_ROS00028.smil#span_008713">int</span> <span class="text" id="span_008714" smilref="Programming_Robots_with_ROS00028.smil#span_008714">argc</span><span class="text" id="span_008715" smilref="Programming_Robots_with_ROS00028.smil#span_008715">,</span> <span class="text" id="span_008716" smilref="Programming_Robots_with_ROS00028.smil#span_008716">char</span> <span class="text" id="span_008717" smilref="Programming_Robots_with_ROS00028.smil#span_008717">*</span><span class="text" id="span_008718" smilref="Programming_Robots_with_ROS00028.smil#span_008718">*</span><span class="text" id="span_008719" smilref="Programming_Robots_with_ROS00028.smil#span_008719">argv</span><span class="text" id="span_008720" smilref="Programming_Robots_with_ROS00028.smil#span_008720">,</span> <span class="text" id="span_008721" smilref="Programming_Robots_with_ROS00028.smil#span_008721">"</span><span class="text" id="span_008722" smilref="Programming_Robots_with_ROS00028.smil#span_008722">count_server</span><span class="text" id="span_008723" smilref="Programming_Robots_with_ROS00028.smil#span_008723">"</span><span class="text" id="span_008724" smilref="Programming_Robots_with_ROS00028.smil#span_008724">)</span><span class="text" id="span_008725" smilref="Programming_Robots_with_ROS00028.smil#span_008725">;</span>
  <span class="text" id="span_008726" smilref="Programming_Robots_with_ROS00028.smil#span_008726">ros</span><span class="text" id="span_008727" smilref="Programming_Robots_with_ROS00028.smil#span_008727">:</span><span class="text" id="span_008728" smilref="Programming_Robots_with_ROS00028.smil#span_008728">:</span><span class="text" id="span_008729" smilref="Programming_Robots_with_ROS00028.smil#span_008729">NodeHandle</span> <span class="text" id="span_008730" smilref="Programming_Robots_with_ROS00028.smil#span_008730">node</span><span class="text" id="span_008731" smilref="Programming_Robots_with_ROS00028.smil#span_008731">;</span>

  <span class="text" id="span_008732" smilref="Programming_Robots_with_ROS00028.smil#span_008732">ros</span><span class="text" id="span_008733" smilref="Programming_Robots_with_ROS00028.smil#span_008733">:</span><span class="text" id="span_008734" smilref="Programming_Robots_with_ROS00028.smil#span_008734">:</span><span class="text" id="span_008735" smilref="Programming_Robots_with_ROS00028.smil#span_008735">ServiceServer</span> <span class="text" id="span_008736" smilref="Programming_Robots_with_ROS00028.smil#span_008736">service</span> <span class="text" id="span_008737" smilref="Programming_Robots_with_ROS00028.smil#span_008737">=</span> <span class="text" id="span_008738" smilref="Programming_Robots_with_ROS00028.smil#span_008738">node</span><span class="text" id="span_008739" smilref="Programming_Robots_with_ROS00028.smil#span_008739">.</span><span class="text" id="span_008740" smilref="Programming_Robots_with_ROS00028.smil#span_008740">advertiseService</span><span class="text" id="span_008741" smilref="Programming_Robots_with_ROS00028.smil#span_008741">(</span><span class="text" id="span_008742" smilref="Programming_Robots_with_ROS00028.smil#span_008742">"</span><span class="text" id="span_008743" smilref="Programming_Robots_with_ROS00028.smil#span_008743">count</span><span class="text" id="span_008744" smilref="Programming_Robots_with_ROS00028.smil#span_008744">"</span><span class="text" id="span_008745" smilref="Programming_Robots_with_ROS00028.smil#span_008745">,</span> <span class="text" id="span_008746" smilref="Programming_Robots_with_ROS00028.smil#span_008746">count</span><span class="text" id="span_008747" smilref="Programming_Robots_with_ROS00028.smil#span_008747">)</span><span class="text" id="span_008748" smilref="Programming_Robots_with_ROS00028.smil#span_008748">;</span>  <a class="co" id="ch23-co_using_c___in_ros_CO4-2" href="#ch23-callout_using_c___in_ros_CO4-2" external="false"><img src="images/2.jpg" alt="2" id="img_000344" /></a>

  <span class="text" id="span_008749" smilref="Programming_Robots_with_ROS00028.smil#span_008749">ros</span><span class="text" id="span_008750" smilref="Programming_Robots_with_ROS00028.smil#span_008750">:</span><span class="text" id="span_008751" smilref="Programming_Robots_with_ROS00028.smil#span_008751">:</span><span class="text" id="span_008752" smilref="Programming_Robots_with_ROS00028.smil#span_008752">spin</span><span class="text" id="span_008753" smilref="Programming_Robots_with_ROS00028.smil#span_008753">(</span><span class="text" id="span_008754" smilref="Programming_Robots_with_ROS00028.smil#span_008754">)</span><span class="text" id="span_008755" smilref="Programming_Robots_with_ROS00028.smil#span_008755">;</span>  <a class="co" id="ch23-co_using_c___in_ros_CO4-3" href="#ch23-callout_using_c___in_ros_CO4-3" external="false"><img src="images/3.jpg" alt="3" id="img_000345" /></a>


  <span class="text" id="span_008756" smilref="Programming_Robots_with_ROS00028.smil#span_008756">return</span> <span class="text" id="span_008757" smilref="Programming_Robots_with_ROS00028.smil#span_008757">0</span><span class="text" id="span_008758" smilref="Programming_Robots_with_ROS00028.smil#span_008758">;</span>
<span class="text" id="span_008759" smilref="Programming_Robots_with_ROS00028.smil#span_008759">}</span></code>
                      </p>
                    </div>
                    <dl class="calloutlist" id="dl_000034">
                      <dt id="dt_000142">
                        <a class="co" id="ch23-callout_using_c___in_ros_CO4-1" href="#ch23-co_using_c___in_ros_CO4-1" external="false">
                          <img src="images/1.jpg" alt="1" id="img_000346" />
                        </a>
                      </dt>
                      <dd id="dd_000142">
                        <p id="p_001682" smilref="Programming_Robots_with_ROS00028.smil#p_001682">Define the callback function.</p>
                      </dd>
                      <dt id="dt_000143">
                        <a class="co" id="ch23-callout_using_c___in_ros_CO4-2" href="#ch23-co_using_c___in_ros_CO4-2" external="false">
                          <img src="images/2.jpg" alt="2" id="img_000347" />
                        </a>
                      </dt>
                      <dd id="dd_000143">
                        <p id="p_001683" smilref="Programming_Robots_with_ROS00028.smil#p_001683">Create the server.</p>
                      </dd>
                      <dt id="dt_000144">
                        <a class="co" id="ch23-callout_using_c___in_ros_CO4-3" href="#ch23-co_using_c___in_ros_CO4-3" external="false">
                          <img src="images/3.jpg" alt="3" id="img_000348" />
                        </a>
                      </dt>
                      <dd id="dd_000144">
                        <p id="p_001684" smilref="Programming_Robots_with_ROS00028.smil#p_001684">Give control over to ROS.</p>
                      </dd>
                    </dl>
                    <p id="p_001685">
                      <span class="text" id="span_008760" smilref="Programming_Robots_with_ROS00028.smil#span_008760">The main differences here are that the callback function takes two arguments: the request, of type</span>
                      <code xml:space="preserve" id="code_002502" smilref="Programming_Robots_with_ROS00028.smil#code_002502">WordCount::Request</code>
                      <span class="text" id="span_008761" smilref="Programming_Robots_with_ROS00028.smil#span_008761">, and a response, of type</span>
                      <code xml:space="preserve" id="code_002503" smilref="Programming_Robots_with_ROS00028.smil#code_002503">WordCount::Response</code>
                      <span class="text" id="span_008762" smilref="Programming_Robots_with_ROS00028.smil#span_008762">. Again, these are provided automatically when you build the service definition. The return value is placed in the response argument, and the callback returns true or false, indicating success or failure. Once again, we advertise it through the node handle.</span>
                    </p>
                    <p id="p_001686">
                      <a data-type="xref" href="#ch23-cpp_service_client" external="false" id="a_000432" smilref="Programming_Robots_with_ROS00028.smil#a_000432">Example 23-6</a>
                      <span class="text" id="span_008763" smilref="Programming_Robots_with_ROS00028.smil#span_008763">shows how to use the service.</span>
                    </p>
                    <h1 id="h1_000539" smilref="Programming_Robots_with_ROS00028.smil#h1_000539">Example 23-6. service_client.cpp</h1>
                    <div id="ch23-cpp_service_client" data-type="example">
                      <p id="p_001687">
                        <code class="preserve-whitespace" xml:space="preserve" id="code_002504"><span class="text" id="span_008764" smilref="Programming_Robots_with_ROS00028.smil#span_008764">#</span><span class="text" id="span_008765" smilref="Programming_Robots_with_ROS00028.smil#span_008765">include &lt;ros</span><span class="text" id="span_008766" smilref="Programming_Robots_with_ROS00028.smil#span_008766">/</span><span class="text" id="span_008767" smilref="Programming_Robots_with_ROS00028.smil#span_008767">ros.h&gt;</span>
<span class="text" id="span_008768" smilref="Programming_Robots_with_ROS00028.smil#span_008768">#</span><span class="text" id="span_008769" smilref="Programming_Robots_with_ROS00028.smil#span_008769">include &lt;cpp</span><span class="text" id="span_008770" smilref="Programming_Robots_with_ROS00028.smil#span_008770">/</span><span class="text" id="span_008771" smilref="Programming_Robots_with_ROS00028.smil#span_008771">WordCount.h&gt;</span>

<span class="text" id="span_008772" smilref="Programming_Robots_with_ROS00028.smil#span_008772">#</span><span class="text" id="span_008773" smilref="Programming_Robots_with_ROS00028.smil#span_008773">include &lt;iostream&gt;</span>


<span class="text" id="span_008774" smilref="Programming_Robots_with_ROS00028.smil#span_008774">int</span> <span class="text" id="span_008775" smilref="Programming_Robots_with_ROS00028.smil#span_008775">main</span><span class="text" id="span_008776" smilref="Programming_Robots_with_ROS00028.smil#span_008776">(</span><span class="text" id="span_008777" smilref="Programming_Robots_with_ROS00028.smil#span_008777">int</span> <span class="text" id="span_008778" smilref="Programming_Robots_with_ROS00028.smil#span_008778">argc</span><span class="text" id="span_008779" smilref="Programming_Robots_with_ROS00028.smil#span_008779">,</span> <span class="text" id="span_008780" smilref="Programming_Robots_with_ROS00028.smil#span_008780">char</span> <span class="text" id="span_008781" smilref="Programming_Robots_with_ROS00028.smil#span_008781">*</span><span class="text" id="span_008782" smilref="Programming_Robots_with_ROS00028.smil#span_008782">*</span><span class="text" id="span_008783" smilref="Programming_Robots_with_ROS00028.smil#span_008783">argv</span><span class="text" id="span_008784" smilref="Programming_Robots_with_ROS00028.smil#span_008784">)</span> <span class="text" id="span_008785" smilref="Programming_Robots_with_ROS00028.smil#span_008785">{</span>
  <span class="text" id="span_008786" smilref="Programming_Robots_with_ROS00028.smil#span_008786">ros</span><span class="text" id="span_008787" smilref="Programming_Robots_with_ROS00028.smil#span_008787">:</span><span class="text" id="span_008788" smilref="Programming_Robots_with_ROS00028.smil#span_008788">:</span><span class="text" id="span_008789" smilref="Programming_Robots_with_ROS00028.smil#span_008789">init</span><span class="text" id="span_008790" smilref="Programming_Robots_with_ROS00028.smil#span_008790">(</span><span class="text" id="span_008791" smilref="Programming_Robots_with_ROS00028.smil#span_008791">argc</span><span class="text" id="span_008792" smilref="Programming_Robots_with_ROS00028.smil#span_008792">,</span> <span class="text" id="span_008793" smilref="Programming_Robots_with_ROS00028.smil#span_008793">char</span> <span class="text" id="span_008794" smilref="Programming_Robots_with_ROS00028.smil#span_008794">*</span><span class="text" id="span_008795" smilref="Programming_Robots_with_ROS00028.smil#span_008795">*</span><span class="text" id="span_008796" smilref="Programming_Robots_with_ROS00028.smil#span_008796">argv</span><span class="text" id="span_008797" smilref="Programming_Robots_with_ROS00028.smil#span_008797">,</span> <span class="text" id="span_008798" smilref="Programming_Robots_with_ROS00028.smil#span_008798">"</span><span class="text" id="span_008799" smilref="Programming_Robots_with_ROS00028.smil#span_008799">count_client</span><span class="text" id="span_008800" smilref="Programming_Robots_with_ROS00028.smil#span_008800">"</span><span class="text" id="span_008801" smilref="Programming_Robots_with_ROS00028.smil#span_008801">)</span><span class="text" id="span_008802" smilref="Programming_Robots_with_ROS00028.smil#span_008802">;</span>
  <span class="text" id="span_008803" smilref="Programming_Robots_with_ROS00028.smil#span_008803">ros</span><span class="text" id="span_008804" smilref="Programming_Robots_with_ROS00028.smil#span_008804">:</span><span class="text" id="span_008805" smilref="Programming_Robots_with_ROS00028.smil#span_008805">:</span><span class="text" id="span_008806" smilref="Programming_Robots_with_ROS00028.smil#span_008806">NodeHandle</span> <span class="text" id="span_008807" smilref="Programming_Robots_with_ROS00028.smil#span_008807">node</span><span class="text" id="span_008808" smilref="Programming_Robots_with_ROS00028.smil#span_008808">;</span>

  <span class="text" id="span_008809" smilref="Programming_Robots_with_ROS00028.smil#span_008809">ros</span><span class="text" id="span_008810" smilref="Programming_Robots_with_ROS00028.smil#span_008810">:</span><span class="text" id="span_008811" smilref="Programming_Robots_with_ROS00028.smil#span_008811">:</span><span class="text" id="span_008812" smilref="Programming_Robots_with_ROS00028.smil#span_008812">ServiceClient</span> <span class="text" id="span_008813" smilref="Programming_Robots_with_ROS00028.smil#span_008813">client</span> <span class="text" id="span_008814" smilref="Programming_Robots_with_ROS00028.smil#span_008814">=</span> <span class="text" id="span_008815" smilref="Programming_Robots_with_ROS00028.smil#span_008815">node</span><span class="text" id="span_008816" smilref="Programming_Robots_with_ROS00028.smil#span_008816">.</span><span class="text" id="span_008817" smilref="Programming_Robots_with_ROS00028.smil#span_008817">serviceClient</span><span class="text" id="span_008818" smilref="Programming_Robots_with_ROS00028.smil#span_008818">&lt;</span><span class="text" id="span_008819" smilref="Programming_Robots_with_ROS00028.smil#span_008819">cpp</span><span class="text" id="span_008820" smilref="Programming_Robots_with_ROS00028.smil#span_008820">:</span><span class="text" id="span_008821" smilref="Programming_Robots_with_ROS00028.smil#span_008821">:</span><span class="text" id="span_008822" smilref="Programming_Robots_with_ROS00028.smil#span_008822">WordCount</span><span class="text" id="span_008823" smilref="Programming_Robots_with_ROS00028.smil#span_008823">&gt;</span><span class="text" id="span_008824" smilref="Programming_Robots_with_ROS00028.smil#span_008824">(</span><span class="text" id="span_008825" smilref="Programming_Robots_with_ROS00028.smil#span_008825">"</span><span class="text" id="span_008826" smilref="Programming_Robots_with_ROS00028.smil#span_008826">count</span><span class="text" id="span_008827" smilref="Programming_Robots_with_ROS00028.smil#span_008827">"</span><span class="text" id="span_008828" smilref="Programming_Robots_with_ROS00028.smil#span_008828">)</span><span class="text" id="span_008829" smilref="Programming_Robots_with_ROS00028.smil#span_008829">;</span>  <a class="co" id="ch23-co_using_c___in_ros_CO5-1" href="#ch23-callout_using_c___in_ros_CO5-1" external="false"><img src="images/1.jpg" alt="1" id="img_000349" /></a>

  <span class="text" id="span_008830" smilref="Programming_Robots_with_ROS00028.smil#span_008830">cpp</span><span class="text" id="span_008831" smilref="Programming_Robots_with_ROS00028.smil#span_008831">:</span><span class="text" id="span_008832" smilref="Programming_Robots_with_ROS00028.smil#span_008832">:</span><span class="text" id="span_008833" smilref="Programming_Robots_with_ROS00028.smil#span_008833">WordCount</span> <span class="text" id="span_008834" smilref="Programming_Robots_with_ROS00028.smil#span_008834">srv</span><span class="text" id="span_008835" smilref="Programming_Robots_with_ROS00028.smil#span_008835">;</span>  <a class="co" id="ch23-co_using_c___in_ros_CO5-2" href="#ch23-callout_using_c___in_ros_CO5-2" external="false"><img src="images/2.jpg" alt="2" id="img_000350" /></a>
  <span class="text" id="span_008836" smilref="Programming_Robots_with_ROS00028.smil#span_008836">srv</span><span class="text" id="span_008837" smilref="Programming_Robots_with_ROS00028.smil#span_008837">.</span><span class="text" id="span_008838" smilref="Programming_Robots_with_ROS00028.smil#span_008838">request</span><span class="text" id="span_008839" smilref="Programming_Robots_with_ROS00028.smil#span_008839">.</span><span class="text" id="span_008840" smilref="Programming_Robots_with_ROS00028.smil#span_008840">words</span> <span class="text" id="span_008841" smilref="Programming_Robots_with_ROS00028.smil#span_008841">=</span> <span class="text" id="span_008842" smilref="Programming_Robots_with_ROS00028.smil#span_008842">"</span><span class="text" id="span_008843" smilref="Programming_Robots_with_ROS00028.smil#span_008843">one two three four</span><span class="text" id="span_008844" smilref="Programming_Robots_with_ROS00028.smil#span_008844">"</span><span class="text" id="span_008845" smilref="Programming_Robots_with_ROS00028.smil#span_008845">;</span>

  <span class="text" id="span_008846" smilref="Programming_Robots_with_ROS00028.smil#span_008846">if</span> <span class="text" id="span_008847" smilref="Programming_Robots_with_ROS00028.smil#span_008847">(</span><span class="text" id="span_008848" smilref="Programming_Robots_with_ROS00028.smil#span_008848">client</span><span class="text" id="span_008849" smilref="Programming_Robots_with_ROS00028.smil#span_008849">.</span><span class="text" id="span_008850" smilref="Programming_Robots_with_ROS00028.smil#span_008850">call</span><span class="text" id="span_008851" smilref="Programming_Robots_with_ROS00028.smil#span_008851">(</span><span class="text" id="span_008852" smilref="Programming_Robots_with_ROS00028.smil#span_008852">srv</span><span class="text" id="span_008853" smilref="Programming_Robots_with_ROS00028.smil#span_008853">)</span><span class="text" id="span_008854" smilref="Programming_Robots_with_ROS00028.smil#span_008854">)</span>  <a class="co" id="ch23-co_using_c___in_ros_CO5-3" href="#ch23-callout_using_c___in_ros_CO5-3" external="false"><img src="images/3.jpg" alt="3" id="img_000351" /></a>
    <span class="text" id="span_008855" smilref="Programming_Robots_with_ROS00028.smil#span_008855">std</span><span class="text" id="span_008856" smilref="Programming_Robots_with_ROS00028.smil#span_008856">:</span><span class="text" id="span_008857" smilref="Programming_Robots_with_ROS00028.smil#span_008857">:</span><span class="text" id="span_008858" smilref="Programming_Robots_with_ROS00028.smil#span_008858">cerr</span> <span class="text" id="span_008859" smilref="Programming_Robots_with_ROS00028.smil#span_008859">&lt;</span><span class="text" id="span_008860" smilref="Programming_Robots_with_ROS00028.smil#span_008860">&lt;</span> <span class="text" id="span_008861" smilref="Programming_Robots_with_ROS00028.smil#span_008861">"</span><span class="text" id="span_008862" smilref="Programming_Robots_with_ROS00028.smil#span_008862">success: </span><span class="text" id="span_008863" smilref="Programming_Robots_with_ROS00028.smil#span_008863">"</span> <span class="text" id="span_008864" smilref="Programming_Robots_with_ROS00028.smil#span_008864">&lt;</span><span class="text" id="span_008865" smilref="Programming_Robots_with_ROS00028.smil#span_008865">&lt;</span> <span class="text" id="span_008866" smilref="Programming_Robots_with_ROS00028.smil#span_008866">srv</span><span class="text" id="span_008867" smilref="Programming_Robots_with_ROS00028.smil#span_008867">.</span><span class="text" id="span_008868" smilref="Programming_Robots_with_ROS00028.smil#span_008868">response</span><span class="text" id="span_008869" smilref="Programming_Robots_with_ROS00028.smil#span_008869">.</span><span class="text" id="span_008870" smilref="Programming_Robots_with_ROS00028.smil#span_008870">count</span> <span class="text" id="span_008871" smilref="Programming_Robots_with_ROS00028.smil#span_008871">&lt;</span><span class="text" id="span_008872" smilref="Programming_Robots_with_ROS00028.smil#span_008872">&lt;</span> <span class="text" id="span_008873" smilref="Programming_Robots_with_ROS00028.smil#span_008873">std</span><span class="text" id="span_008874" smilref="Programming_Robots_with_ROS00028.smil#span_008874">:</span><span class="text" id="span_008875" smilref="Programming_Robots_with_ROS00028.smil#span_008875">:</span><span class="text" id="span_008876" smilref="Programming_Robots_with_ROS00028.smil#span_008876">endl</span><span class="text" id="span_008877" smilref="Programming_Robots_with_ROS00028.smil#span_008877">;</span>  <a class="co" id="ch23-co_using_c___in_ros_CO5-4" href="#ch23-callout_using_c___in_ros_CO5-4" external="false"><img src="images/4.jpg" alt="4" id="img_000352" /></a>
  <span class="text" id="span_008878" smilref="Programming_Robots_with_ROS00028.smil#span_008878">else</span>
    <span class="text" id="span_008879" smilref="Programming_Robots_with_ROS00028.smil#span_008879">std</span><span class="text" id="span_008880" smilref="Programming_Robots_with_ROS00028.smil#span_008880">:</span><span class="text" id="span_008881" smilref="Programming_Robots_with_ROS00028.smil#span_008881">:</span><span class="text" id="span_008882" smilref="Programming_Robots_with_ROS00028.smil#span_008882">cerr</span> <span class="text" id="span_008883" smilref="Programming_Robots_with_ROS00028.smil#span_008883">&lt;</span><span class="text" id="span_008884" smilref="Programming_Robots_with_ROS00028.smil#span_008884">&lt;</span> <span class="text" id="span_008885" smilref="Programming_Robots_with_ROS00028.smil#span_008885">"</span><span class="text" id="span_008886" smilref="Programming_Robots_with_ROS00028.smil#span_008886">failure</span><span class="text" id="span_008887" smilref="Programming_Robots_with_ROS00028.smil#span_008887">"</span> <span class="text" id="span_008888" smilref="Programming_Robots_with_ROS00028.smil#span_008888">&lt;</span><span class="text" id="span_008889" smilref="Programming_Robots_with_ROS00028.smil#span_008889">&lt;</span> <span class="text" id="span_008890" smilref="Programming_Robots_with_ROS00028.smil#span_008890">std</span><span class="text" id="span_008891" smilref="Programming_Robots_with_ROS00028.smil#span_008891">:</span><span class="text" id="span_008892" smilref="Programming_Robots_with_ROS00028.smil#span_008892">:</span><span class="text" id="span_008893" smilref="Programming_Robots_with_ROS00028.smil#span_008893">endl</span><span class="text" id="span_008894" smilref="Programming_Robots_with_ROS00028.smil#span_008894">;</span>

  <span class="text" id="span_008895" smilref="Programming_Robots_with_ROS00028.smil#span_008895">return</span> <span class="text" id="span_008896" smilref="Programming_Robots_with_ROS00028.smil#span_008896">0</span><span class="text" id="span_008897" smilref="Programming_Robots_with_ROS00028.smil#span_008897">;</span>
<span class="text" id="span_008898" smilref="Programming_Robots_with_ROS00028.smil#span_008898">}</span></code>
                      </p>
                    </div>
                    <dl class="calloutlist" id="dl_000035">
                      <dt id="dt_000145">
                        <a class="co" id="ch23-callout_using_c___in_ros_CO5-1" href="#ch23-co_using_c___in_ros_CO5-1" external="false">
                          <img src="images/1.jpg" alt="1" id="img_000353" />
                        </a>
                      </dt>
                      <dd id="dd_000145">
                        <p id="p_001688" smilref="Programming_Robots_with_ROS00028.smil#p_001688">Create the service client.</p>
                      </dd>
                      <dt id="dt_000146">
                        <a class="co" id="ch23-callout_using_c___in_ros_CO5-2" href="#ch23-co_using_c___in_ros_CO5-2" external="false">
                          <img src="images/2.jpg" alt="2" id="img_000354" />
                        </a>
                      </dt>
                      <dd id="dd_000146">
                        <p id="p_001689" smilref="Programming_Robots_with_ROS00028.smil#p_001689">Create a data structure for the request and response.</p>
                      </dd>
                      <dt id="dt_000147">
                        <a class="co" id="ch23-callout_using_c___in_ros_CO5-3" href="#ch23-co_using_c___in_ros_CO5-3" external="false">
                          <img src="images/3.jpg" alt="3" id="img_000355" />
                        </a>
                      </dt>
                      <dd id="dd_000147">
                        <p id="p_001690" smilref="Programming_Robots_with_ROS00028.smil#p_001690">Call the service, testing for success.</p>
                      </dd>
                      <dt id="dt_000148">
                        <a class="co" id="ch23-callout_using_c___in_ros_CO5-4" href="#ch23-co_using_c___in_ros_CO5-4" external="false">
                          <img src="images/4.jpg" alt="4" id="img_000356" />
                        </a>
                      </dt>
                      <dd id="dd_000148">
                        <p id="p_001691" smilref="Programming_Robots_with_ROS00028.smil#p_001691">Access the response through the data structure.</p>
                      </dd>
                    </dl>
                    <p id="ch23-idp46797424" data-type="indexterm" data-startref="ix_23-cplusplus-asciidoc8">
                      <span class="text" id="span_008899" smilref="Programming_Robots_with_ROS00028.smil#span_008899">Again, we make a call on the node handle, templated on the service data type, to set up the client. We then create an instance of the service data type, and fill in the request information. The actual service call is made using the</span>
                      <code xml:space="preserve" id="code_002505" smilref="Programming_Robots_with_ROS00028.smil#code_002505">client.call(srv)</code>
                      <span class="text" id="span_008900" smilref="Programming_Robots_with_ROS00028.smil#span_008900">call, which will return true if successful, and false otherwise. Note that it is the responsibility of the service server to return this value. Finally, we can access the results of the call through the data structure's</span>
                      <code xml:space="preserve" id="code_002506" smilref="Programming_Robots_with_ROS00028.smil#code_002506">response</code>
                      <span class="text" id="span_008901" smilref="Programming_Robots_with_ROS00028.smil#span_008901">field.</span>
                    </p>
                  </div>
                </section>
              </div>
            </section>
            <section data-type="sect1" data-pdf-bookmark="Summary" id="section_000239">
              <h1 id="h1_000540" smilref="Programming_Robots_with_ROS00028.smil#h1_000540">Summary</h1>
              <div class="sect1" id="ch23-idp46493632">
                <p id="p_001692" smilref="Programming_Robots_with_ROS00028.smil#p_001692">In this final chapter, we've seen how to translate some of the Python code from the rest of the book into C++. All of the idioms and design patterns that we've talked about previously are the same, regardless of the language that you write your code in; only the syntax and details change. Once you learn how to make these cosmetic changes, you should be able to switch from Python to C++ and back again with ease.</p>
                <p class="keep-together" id="ch23-idp46496816" data-type="indexterm" data-startref="ix_23-cplusplus-asciidoc0" smilref="Programming_Robots_with_ROS00028.smil#ch23-idp46496816">Of course, we've only scratched the surface of the C++ API in this chapter. Dealing with it completely would take a whole other book. However, if you're already familiar with the language, then you should be able to take this chapter in one hand and the ROS wiki documentation in the other, and start crafting your own ROS nodes in C++. Or, you can choose a simpler life, and stick with Python. Your choice.</p>
              </div>
            </section>
          </div>
        </section>
      </level1>
      <level1 id="ix01">
        <section xmlns:epub="http://www.idpf.org/2007/ops" data-type="index" epub:type="index" id="section_000240">
          <h1 id="h1_000541" smilref="Programming_Robots_with_ROS00028.smil#h1_000541">Index</h1>
          <div class="index" id="ix01-idp46861872">
            <div data-type="index" id="div_000049">
              <h1 id="h1_000542" smilref="Programming_Robots_with_ROS00028.smil#h1_000542">Symbols</h1>
              <div data-type="indexdiv" id="div_000050">
                <list type="ul" id="list_000033">
                  <li data-type="index-term" id="li_000113">
                    <span class="text" id="span_008902" smilref="Programming_Robots_with_ROS00028.smil#span_008902">/ (forward slash)</span>
                    <span class="text" id="span_008903" smilref="Programming_Robots_with_ROS00028.smil#span_008903">,</span>
                    <a data-type="index:locator" href="#ch02-idp16978032" external="false" id="a_000433" smilref="Programming_Robots_with_ROS00028.smil#a_000433">Names, Namespaces, and Remapping</a>
                  </li>
                  <li data-type="index-term" id="li_000114">
                    <span class="text" id="span_008904" smilref="Programming_Robots_with_ROS00028.smil#span_008904">/rosout, generating log messages with</span>
                    <span class="text" id="span_008905" smilref="Programming_Robots_with_ROS00028.smil#span_008905">,</span>
                    <a data-type="index:locator" href="#ch21-ix_21-debugging-asciidoc5" external="false" id="a_000434" smilref="Programming_Robots_with_ROS00028.smil#a_000434">Generating Log Messages: /rosout</a>
                    <span class="text" id="span_008906" smilref="Programming_Robots_with_ROS00028.smil#span_008906">-</span>
                    <a data-type="index:locator" href="#ch21-idp44945984" external="false" id="a_000435" smilref="Programming_Robots_with_ROS00028.smil#a_000435">Generating Log Messages: /rosout</a>
                  </li>
                  <li data-gentext="see" id="li_000115">
                    <span data-type="index-term" id="span_008907" smilref="Programming_Robots_with_ROS00028.smil#span_008907">3D visualization</span>
                    <span class="text" id="span_008908" smilref="Programming_Robots_with_ROS00028.smil#span_008908">(</span>
                    <span class="text" id="span_008909" smilref="Programming_Robots_with_ROS00028.smil#span_008909">see</span>
                    <span class="text" id="span_008910" smilref="Programming_Robots_with_ROS00028.smil#span_008910">rviz (ROS visualization))</span>
                  </li>
                  <li data-type="index-term" id="li_000116">
                    <span class="text" id="span_008911" smilref="Programming_Robots_with_ROS00028.smil#span_008911">(tilde)</span>
                    <span class="text" id="span_008912" smilref="Programming_Robots_with_ROS00028.smil#span_008912">,</span>
                    <a data-type="index:locator" href="#ch19-idp43221552" external="false" id="a_000436" smilref="Programming_Robots_with_ROS00028.smil#a_000436">The Speech Server</a>
                  </li>
                </list>
              </div>
              <h1 id="h1_000543" smilref="Programming_Robots_with_ROS00028.smil#h1_000543">A</h1>
              <div data-type="indexdiv" id="div_000051">
                <list type="ul" id="list_000034">
                  <li data-type="index-term" id="li_000117">
                    <span class="text" id="span_008913" smilref="Programming_Robots_with_ROS00028.smil#span_008913">abstraction</span>
                    <span class="text" id="span_008914" smilref="Programming_Robots_with_ROS00028.smil#span_008914">,</span>
                    <a data-type="index:locator" href="#ch16-idp39198672" external="false" id="a_000437" smilref="Programming_Robots_with_ROS00028.smil#a_000437">ROS Message Interface</a>
                  </li>
                  <li data-type="index-term" id="li_000118">
                    <span class="text" id="span_008915" smilref="Programming_Robots_with_ROS00028.smil#span_008915">Ackerman platforms</span>
                    <span class="text" id="span_008916" smilref="Programming_Robots_with_ROS00028.smil#span_008916">,</span>
                    <a data-type="index:locator" href="#ch06-idp21670528" external="false" id="a_000438" smilref="Programming_Robots_with_ROS00028.smil#a_000438">Actuation: Mobile Platform</a>
                  </li>
                  <li data-type="index-term" id="li_000119">
                    <span class="text" id="span_008917" smilref="Programming_Robots_with_ROS00028.smil#span_008917">action definition file</span>
                    <span class="text" id="span_008918" smilref="Programming_Robots_with_ROS00028.smil#span_008918">,</span>
                    <a data-type="index:locator" href="#ch05-idp19472608" external="false" id="a_000439" smilref="Programming_Robots_with_ROS00028.smil#a_000439">Defining an Action</a>
                  </li>
                  <li data-type="index-term" id="li_000120">
                    <span class="text" id="span_008919" smilref="Programming_Robots_with_ROS00028.smil#span_008919">action interface, pyttsx</span>
                    <span class="text" id="span_008920" smilref="Programming_Robots_with_ROS00028.smil#span_008920">,</span>
                    <a data-type="index:locator" href="#ch19-idp42662256" external="false" id="a_000440" smilref="Programming_Robots_with_ROS00028.smil#a_000440">Action Interface</a>
                  </li>
                  <li id="li_000121">
                    <span data-type="index-term" id="span_008921" smilref="Programming_Robots_with_ROS00028.smil#span_008921">action server</span>
                    <list type="ul" id="list_000035">
                      <li data-type="index-term" id="li_000122">
                        <span class="text" id="span_008922" smilref="Programming_Robots_with_ROS00028.smil#span_008922">basic</span>
                        <span class="text" id="span_008923" smilref="Programming_Robots_with_ROS00028.smil#span_008923">,</span>
                        <a data-type="index:locator" href="#ch05-ix_5-actions-asciidoc2" external="false" id="a_000441" smilref="Programming_Robots_with_ROS00028.smil#a_000441">Implementing a Basic Action Server</a>
                        <span class="text" id="span_008924" smilref="Programming_Robots_with_ROS00028.smil#span_008924">-</span>
                        <a data-type="index:locator" href="#ch05-idp20152448" external="false" id="a_000442" smilref="Programming_Robots_with_ROS00028.smil#a_000442">Checking That Everything Works as Expected</a>
                      </li>
                      <li data-type="index-term" id="li_000123">
                        <span class="text" id="span_008925" smilref="Programming_Robots_with_ROS00028.smil#span_008925">checking</span>
                        <span class="text" id="span_008926" smilref="Programming_Robots_with_ROS00028.smil#span_008926">,</span>
                        <a data-type="index:locator" href="#ch05-idp20134368" external="false" id="a_000443" smilref="Programming_Robots_with_ROS00028.smil#a_000443">Checking That Everything Works as Expected</a>
                        <span class="text" id="span_008927" smilref="Programming_Robots_with_ROS00028.smil#span_008927">,</span>
                        <a data-type="index:locator" href="#ch05-idp21361664" external="false" id="a_000444" smilref="Programming_Robots_with_ROS00028.smil#a_000444">Checking That Everything Works as Expected</a>
                      </li>
                      <li data-type="index-term" id="li_000124">
                        <span class="text" id="span_008928" smilref="Programming_Robots_with_ROS00028.smil#span_008928">for TTS software</span>
                        <span class="text" id="span_008929" smilref="Programming_Robots_with_ROS00028.smil#span_008929">,</span>
                        <a data-type="index:locator" href="#ch19-idp42662256" external="false" id="a_000445" smilref="Programming_Robots_with_ROS00028.smil#a_000445">Action Interface</a>
                      </li>
                      <li data-type="index-term" id="li_000125">
                        <span class="text" id="span_008930" smilref="Programming_Robots_with_ROS00028.smil#span_008930">more sophisticated</span>
                        <span class="text" id="span_008931" smilref="Programming_Robots_with_ROS00028.smil#span_008931">,</span>
                        <a data-type="index:locator" href="#ch05-idp21090096" external="false" id="a_000446" smilref="Programming_Robots_with_ROS00028.smil#a_000446">Using the More Sophisticated Action</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000126">
                    <span class="text" id="span_008932" smilref="Programming_Robots_with_ROS00028.smil#span_008932">actions</span>
                    <span class="text" id="span_008933" smilref="Programming_Robots_with_ROS00028.smil#span_008933">,</span>
                    <a data-type="index:locator" href="#ch05-ix_5-actions-asciidoc0" external="false" id="a_000447" smilref="Programming_Robots_with_ROS00028.smil#a_000447">Actions</a>
                    <span class="text" id="span_008934" smilref="Programming_Robots_with_ROS00028.smil#span_008934">-</span>
                    <a data-type="index:locator" href="#ch05-idp21637712" external="false" id="a_000448" smilref="Programming_Robots_with_ROS00028.smil#a_000448">Summary</a>
                    <list type="ul" id="list_000036">
                      <li data-type="index-term" id="li_000127">
                        <span class="text" id="span_008935" smilref="Programming_Robots_with_ROS00028.smil#span_008935">checking with action client</span>
                        <span class="text" id="span_008936" smilref="Programming_Robots_with_ROS00028.smil#span_008936">,</span>
                        <a data-type="index:locator" href="#ch05-idp20502112" external="false" id="a_000449" smilref="Programming_Robots_with_ROS00028.smil#a_000449">Checking That Everything Works as Expected</a>
                      </li>
                      <li data-type="index-term" id="li_000128">
                        <span class="text" id="span_008937" smilref="Programming_Robots_with_ROS00028.smil#span_008937">defining</span>
                        <span class="text" id="span_008938" smilref="Programming_Robots_with_ROS00028.smil#span_008938">,</span>
                        <a data-type="index:locator" href="#ch05-ix_5-actions-asciidoc1" external="false" id="a_000450" smilref="Programming_Robots_with_ROS00028.smil#a_000450">Defining an Action</a>
                        <span class="text" id="span_008939" smilref="Programming_Robots_with_ROS00028.smil#span_008939">-</span>
                        <a data-type="index:locator" href="#ch05-idp19748928" external="false" id="a_000451" smilref="Programming_Robots_with_ROS00028.smil#a_000451">Defining an Action</a>
                      </li>
                      <li data-type="index-term" id="li_000129">
                        <span class="text" id="span_008940" smilref="Programming_Robots_with_ROS00028.smil#span_008940">services vs.</span>
                        <span class="text" id="span_008941" smilref="Programming_Robots_with_ROS00028.smil#span_008941">,</span>
                        <a data-type="index:locator" href="#ch05-ix_5-actions-asciidoc0" external="false" id="a_000452" smilref="Programming_Robots_with_ROS00028.smil#a_000452">Actions</a>
                        <span class="text" id="span_008942" smilref="Programming_Robots_with_ROS00028.smil#span_008942">,</span>
                        <a data-type="index:locator" href="#ch05-idp21696896" external="false" id="a_000453" smilref="Programming_Robots_with_ROS00028.smil#a_000453">Summary</a>
                      </li>
                      <li data-type="index-term" id="li_000130">
                        <span class="text" id="span_008943" smilref="Programming_Robots_with_ROS00028.smil#span_008943">topics vs.</span>
                        <span class="text" id="span_008944" smilref="Programming_Robots_with_ROS00028.smil#span_008944">,</span>
                        <a data-type="index:locator" href="#ch05-idp21696896" external="false" id="a_000454" smilref="Programming_Robots_with_ROS00028.smil#a_000454">Summary</a>
                      </li>
                      <li data-type="index-term" id="li_000131">
                        <span class="text" id="span_008945" smilref="Programming_Robots_with_ROS00028.smil#span_008945">using</span>
                        <span class="text" id="span_008946" smilref="Programming_Robots_with_ROS00028.smil#span_008946">,</span>
                        <a data-type="index:locator" href="#ch05-ix_5-actions-asciidoc4" external="false" id="a_000455" smilref="Programming_Robots_with_ROS00028.smil#a_000455">Using an Action</a>
                        <span class="text" id="span_008947" smilref="Programming_Robots_with_ROS00028.smil#span_008947">-</span>
                        <a data-type="index:locator" href="#ch05-idp20505824" external="false" id="a_000456" smilref="Programming_Robots_with_ROS00028.smil#a_000456">Checking That Everything Works as Expected</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000132">
                    <span class="text" id="span_008948" smilref="Programming_Robots_with_ROS00028.smil#span_008948">actuation</span>
                    <span class="text" id="span_008949" smilref="Programming_Robots_with_ROS00028.smil#span_008949">,</span>
                    <a data-type="index:locator" href="#ch06-ix_6-robots-asciidoc1" external="false" id="a_000457" smilref="Programming_Robots_with_ROS00028.smil#a_000457">Actuation: Mobile Platform</a>
                    <span class="text" id="span_008950" smilref="Programming_Robots_with_ROS00028.smil#span_008950">-</span>
                    <a data-type="index:locator" href="#ch06-idp21745392" external="false" id="a_000458" smilref="Programming_Robots_with_ROS00028.smil#a_000458">Actuation: Manipulator Arm</a>
                    <list type="ul" id="list_000037">
                      <li data-type="index-term" id="li_000133">
                        <span class="text" id="span_008951" smilref="Programming_Robots_with_ROS00028.smil#span_008951">manipulator arm</span>
                        <span class="text" id="span_008952" smilref="Programming_Robots_with_ROS00028.smil#span_008952">,</span>
                        <a data-type="index:locator" href="#ch06-idp21721744" external="false" id="a_000459" smilref="Programming_Robots_with_ROS00028.smil#a_000459">Actuation: Manipulator Arm</a>
                      </li>
                      <li data-type="index-term" id="li_000134">
                        <span class="text" id="span_008953" smilref="Programming_Robots_with_ROS00028.smil#span_008953">mobile platform</span>
                        <span class="text" id="span_008954" smilref="Programming_Robots_with_ROS00028.smil#span_008954">,</span>
                        <a data-type="index:locator" href="#ch06-ix_6-robots-asciidoc1" external="false" id="a_000460" smilref="Programming_Robots_with_ROS00028.smil#a_000460">Actuation: Mobile Platform</a>
                        <span class="text" id="span_008955" smilref="Programming_Robots_with_ROS00028.smil#span_008955">-</span>
                        <a data-type="index:locator" href="#ch06-idp21719824" external="false" id="a_000461" smilref="Programming_Robots_with_ROS00028.smil#a_000461">Actuation: Mobile Platform</a>
                      </li>
                      <li data-type="index-term" id="li_000135">
                        <span class="text" id="span_008956" smilref="Programming_Robots_with_ROS00028.smil#span_008956">wander-bot</span>
                        <span class="text" id="span_008957" smilref="Programming_Robots_with_ROS00028.smil#span_008957">,</span>
                        <a data-type="index:locator" href="#ch07-idp22520096" external="false" id="a_000462" smilref="Programming_Robots_with_ROS00028.smil#a_000462">Sensing and Actuation: Wander-bot!</a>
                      </li>
                    </list>
                  </li>
                  <li id="li_000136">
                    <span data-type="index-term" id="span_008958" smilref="Programming_Robots_with_ROS00028.smil#span_008958">actuators</span>
                    <list type="ul" id="list_000038">
                      <li data-type="index-term" id="li_000137">
                        <span class="text" id="span_008959" smilref="Programming_Robots_with_ROS00028.smil#span_008959">adding your own to ROS</span>
                        <span class="text" id="span_008960" smilref="Programming_Robots_with_ROS00028.smil#span_008960">,</span>
                        <a data-type="index:locator" href="#ch15-ix_15-sensors_actuators-asciidoc5" external="false" id="a_000463" smilref="Programming_Robots_with_ROS00028.smil#a_000463">Adding Your Own Actuators</a>
                        <span class="text" id="span_008961" smilref="Programming_Robots_with_ROS00028.smil#span_008961">-</span>
                        <a data-type="index:locator" href="#ch15-idp39366640" external="false" id="a_000464" smilref="Programming_Robots_with_ROS00028.smil#a_000464">Summary</a>
                      </li>
                      <li data-type="index-term" id="li_000138">
                        <span class="text" id="span_008962" smilref="Programming_Robots_with_ROS00028.smil#span_008962">FakeActuator for simulation</span>
                        <span class="text" id="span_008963" smilref="Programming_Robots_with_ROS00028.smil#span_008963">,</span>
                        <a data-type="index:locator" href="#ch15-idp37498464" external="false" id="a_000465" smilref="Programming_Robots_with_ROS00028.smil#a_000465">A (Fake) Actuator</a>
                      </li>
                      <li data-type="index-term" id="li_000139">
                        <span class="text" id="span_008964" smilref="Programming_Robots_with_ROS00028.smil#span_008964">wrapper design considerations</span>
                        <span class="text" id="span_008965" smilref="Programming_Robots_with_ROS00028.smil#span_008965">,</span>
                        <a data-type="index:locator" href="#ch15-ix_15-sensors_actuators-asciidoc6" external="false" id="a_000466" smilref="Programming_Robots_with_ROS00028.smil#a_000466">Designing the ROS Wrapper</a>
                        <span class="text" id="span_008966" smilref="Programming_Robots_with_ROS00028.smil#span_008966">-</span>
                        <a data-type="index:locator" href="#ch15-idp38928560" external="false" id="a_000467" smilref="Programming_Robots_with_ROS00028.smil#a_000467">Designing the ROS Wrapper</a>
                      </li>
                      <li data-type="index-term" id="li_000140">
                        <span class="text" id="span_008967" smilref="Programming_Robots_with_ROS00028.smil#span_008967">wrapper for continuous actuation</span>
                        <span class="text" id="span_008968" smilref="Programming_Robots_with_ROS00028.smil#span_008968">,</span>
                        <a data-type="index:locator" href="#ch15-idp40181920" external="false" id="a_000468" smilref="Programming_Robots_with_ROS00028.smil#a_000468">Design 1: Continuous Actuation</a>
                      </li>
                      <li data-type="index-term" id="li_000141">
                        <span class="text" id="span_008969" smilref="Programming_Robots_with_ROS00028.smil#span_008969">wrapper for infrequent, extended actuation</span>
                        <span class="text" id="span_008970" smilref="Programming_Robots_with_ROS00028.smil#span_008970">,</span>
                        <a data-type="index:locator" href="#ch15-ix_15-sensors_actuators-asciidoc8" external="false" id="a_000469" smilref="Programming_Robots_with_ROS00028.smil#a_000469">Design 3: Infrequent, Extended Actuation</a>
                        <span class="text" id="span_008971" smilref="Programming_Robots_with_ROS00028.smil#span_008971">-</span>
                        <a data-type="index:locator" href="#ch15-idp39366640" external="false" id="a_000470" smilref="Programming_Robots_with_ROS00028.smil#a_000470">Summary</a>
                      </li>
                      <li data-type="index-term" id="li_000142">
                        <span class="text" id="span_008972" smilref="Programming_Robots_with_ROS00028.smil#span_008972">wrapper for infrequent, instantaneous actuation</span>
                        <span class="text" id="span_008973" smilref="Programming_Robots_with_ROS00028.smil#span_008973">,</span>
                        <a data-type="index:locator" href="#ch15-idp40157936" external="false" id="a_000471" smilref="Programming_Robots_with_ROS00028.smil#a_000471">Design 2: Infrequent, Instantaneous Actuation</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000143">
                    <span class="text" id="span_008974" smilref="Programming_Robots_with_ROS00028.smil#span_008974">Adaptive Monte Carlo Localization</span>
                    <span class="text" id="span_008975" smilref="Programming_Robots_with_ROS00028.smil#span_008975">,</span>
                    <a data-type="index:locator" href="#ch10-idp25559824" external="false" id="a_000472" smilref="Programming_Robots_with_ROS00028.smil#a_000472">Localizing the Robot in a Map</a>
                  </li>
                  <li data-type="index-term" id="li_000144">
                    <span class="text" id="span_008976" smilref="Programming_Robots_with_ROS00028.smil#span_008976">advertising</span>
                    <span class="text" id="span_008977" smilref="Programming_Robots_with_ROS00028.smil#span_008977">,</span>
                    <a data-type="index:locator" href="#ch03-idp17167760" external="false" id="a_000473" smilref="Programming_Robots_with_ROS00028.smil#a_000473">Publishing to a Topic</a>
                    <list type="ul" id="list_000039">
                      <li data-type="index-term" id="li_000145">
                        <span class="text" id="span_008978" smilref="Programming_Robots_with_ROS00028.smil#span_008978">with rospy.Publisher</span>
                        <span class="text" id="span_008979" smilref="Programming_Robots_with_ROS00028.smil#span_008979">,</span>
                        <a data-type="index:locator" href="#ch03-idp17593488" external="false" id="a_000474" smilref="Programming_Robots_with_ROS00028.smil#a_000474">Publishing to a Topic</a>
                        <span class="text" id="span_008980" smilref="Programming_Robots_with_ROS00028.smil#span_008980">,</span>
                        <a data-type="index:locator" href="#ch20-idp43763008" external="false" id="a_000475" smilref="Programming_Robots_with_ROS00029.smil#a_000475">The Master and Friends: roscore</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000146">
                    <span class="text" id="span_008981" smilref="Programming_Robots_with_ROS00029.smil#span_008981">ALVAR marker system</span>
                    <span class="text" id="span_008982" smilref="Programming_Robots_with_ROS00029.smil#span_008982">,</span>
                    <a data-type="index:locator" href="#ch14-ix_14-stockroom_bot-asciidoc6" external="false" id="a_000476" smilref="Programming_Robots_with_ROS00029.smil#a_000476">Stockroom Simulation</a>
                    <span class="text" id="span_008983" smilref="Programming_Robots_with_ROS00029.smil#span_008983">-</span>
                    <a data-type="index:locator" href="#ch14-idp33378672" external="false" id="a_000477" smilref="Programming_Robots_with_ROS00029.smil#a_000477">Stockroom Simulation</a>
                    <span class="text" id="span_008984" smilref="Programming_Robots_with_ROS00029.smil#span_008984">,</span>
                    <a data-type="index:locator" href="#ch14-ix_14-stockroom_bot-asciidoc15" external="false" id="a_000478" smilref="Programming_Robots_with_ROS00029.smil#a_000478">Picking Up the Item</a>
                    <span class="text" id="span_008985" smilref="Programming_Robots_with_ROS00029.smil#span_008985">-</span>
                    <a data-type="index:locator" href="#ch14-idp36332976" external="false" id="a_000479" smilref="Programming_Robots_with_ROS00029.smil#a_000479">Picking Up the Item</a>
                  </li>
                  <li id="li_000147">
                    <span data-type="index-term" id="span_008986" smilref="Programming_Robots_with_ROS00029.smil#span_008986">amcl</span>
                    <list type="ul" id="list_000040">
                      <li data-type="index-term" id="li_000148">
                        <span class="text" id="span_008987" smilref="Programming_Robots_with_ROS00029.smil#span_008987">for TortoiseBot nav stack</span>
                        <span class="text" id="span_008988" smilref="Programming_Robots_with_ROS00029.smil#span_008988">,</span>
                        <a data-type="index:locator" href="#ch17-idp41074752" external="false" id="a_000480" smilref="Programming_Robots_with_ROS00029.smil#a_000480">Configuring the Navigation Stack</a>
                      </li>
                      <li data-type="index-term" id="li_000149">
                        <span class="text" id="span_008989" smilref="Programming_Robots_with_ROS00029.smil#span_008989">possible poses maintained by</span>
                        <span class="text" id="span_008990" smilref="Programming_Robots_with_ROS00029.smil#span_008990">,</span>
                        <a data-type="index:locator" href="#ch10-idp25653024" external="false" id="a_000481" smilref="Programming_Robots_with_ROS00029.smil#a_000481">Navigating in rviz</a>
                      </li>
                      <li data-type="index-term" id="li_000150">
                        <span class="text" id="span_008991" smilref="Programming_Robots_with_ROS00029.smil#span_008991">to localize robot in a map</span>
                        <span class="text" id="span_008992" smilref="Programming_Robots_with_ROS00029.smil#span_008992">,</span>
                        <a data-type="index:locator" href="#ch10-ix_10-navigation-asciidoc1" external="false" id="a_000482" smilref="Programming_Robots_with_ROS00029.smil#a_000482">Localizing the Robot in a Map</a>
                        <span class="text" id="span_008993" smilref="Programming_Robots_with_ROS00029.smil#span_008993">-</span>
                        <a data-type="index:locator" href="#ch10-idp25626336" external="false" id="a_000483" smilref="Programming_Robots_with_ROS00029.smil#a_000483">Tips for Setting a Better Initial Pose</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000151">
                    <span class="text" id="span_008994" smilref="Programming_Robots_with_ROS00029.smil#span_008994">anonymous publish/subscribe system</span>
                    <span class="text" id="span_008995" smilref="Programming_Robots_with_ROS00029.smil#span_008995">,</span>
                    <a data-type="index:locator" href="#ch02-idp16946960" external="false" id="a_000484" smilref="Programming_Robots_with_ROS00029.smil#a_000484">rosrun</a>
                  </li>
                  <li data-gentext="see" id="li_000152">
                    <span data-type="index-term" id="span_008996" smilref="Programming_Robots_with_ROS00029.smil#span_008996">arm, robotic</span>
                    <span class="text" id="span_008997" smilref="Programming_Robots_with_ROS00029.smil#span_008997">(</span>
                    <span class="text" id="span_008998" smilref="Programming_Robots_with_ROS00029.smil#span_008998">see</span>
                    <span class="text" id="span_008999" smilref="Programming_Robots_with_ROS00029.smil#span_008999">CougarBot)</span>
                  </li>
                  <li data-type="index-term" id="li_000153">
                    <span class="text" id="span_009000" smilref="Programming_Robots_with_ROS00029.smil#span_009000">autonomous navigation</span>
                    <span class="text" id="span_009001" smilref="Programming_Robots_with_ROS00029.smil#span_009001">,</span>
                    <a data-type="index:locator" href="#ch17-ix_17-rossify_robots2-asciidoc0" external="false" id="a_000485" smilref="Programming_Robots_with_ROS00029.smil#a_000485">Your Own Mobile Robot: Part 2</a>
                    <span class="text" id="span_009002" smilref="Programming_Robots_with_ROS00029.smil#span_009002">-</span>
                    <a data-type="index:locator" href="#ch17-idp41208944" external="false" id="a_000486" smilref="Programming_Robots_with_ROS00029.smil#a_000486">Summary</a>
                    <list type="ul" id="list_000041">
                      <li data-type="index-term" id="li_000154">
                        <span class="text" id="span_009003" smilref="Programming_Robots_with_ROS00029.smil#span_009003">for TortoiseBot</span>
                        <span class="text" id="span_009004" smilref="Programming_Robots_with_ROS00029.smil#span_009004">,</span>
                        <a data-type="index:locator" href="#ch17-ix_17-rossify_robots2-asciidoc0" external="false" id="a_000487" smilref="Programming_Robots_with_ROS00029.smil#a_000487">Your Own Mobile Robot: Part 2</a>
                        <span class="text" id="span_009005" smilref="Programming_Robots_with_ROS00029.smil#span_009005">-</span>
                        <a data-type="index:locator" href="#ch17-idp41208944" external="false" id="a_000488" smilref="Programming_Robots_with_ROS00029.smil#a_000488">Summary</a>
                      </li>
                      <li data-type="index-term" id="li_000155">
                        <span class="text" id="span_009006" smilref="Programming_Robots_with_ROS00029.smil#span_009006">laser sensor for</span>
                        <span class="text" id="span_009007" smilref="Programming_Robots_with_ROS00029.smil#span_009007">,</span>
                        <a data-type="index:locator" href="#ch06-idp21806928" external="false" id="a_000489" smilref="Programming_Robots_with_ROS00029.smil#a_000489">Laser scanners</a>
                        <span class="text" id="span_009008" smilref="Programming_Robots_with_ROS00029.smil#span_009008">,</span>
                        <a data-type="index:locator" href="#ch17-ix_17-rossify_robots2-asciidoc6" external="false" id="a_000490" smilref="Programming_Robots_with_ROS00029.smil#a_000490">Adding a Laser Sensor</a>
                        <span class="text" id="span_009009" smilref="Programming_Robots_with_ROS00029.smil#span_009009">-</span>
                        <a data-type="index:locator" href="#ch17-idp40992448" external="false" id="a_000491" smilref="Programming_Robots_with_ROS00029.smil#a_000491">Adding a Laser Sensor</a>
                      </li>
                      <li data-type="index-term" id="li_000156">
                        <span class="text" id="span_009010" smilref="Programming_Robots_with_ROS00029.smil#span_009010">localizing/commanding TortoiseBot with rviz</span>
                        <span class="text" id="span_009011" smilref="Programming_Robots_with_ROS00029.smil#span_009011">,</span>
                        <a data-type="index:locator" href="#ch17-ix_17-rossify_robots2-asciidoc18" external="false" id="a_000492" smilref="Programming_Robots_with_ROS00029.smil#a_000492">Using rviz to Localize and Command a Navigating Robot</a>
                        <span class="text" id="span_009012" smilref="Programming_Robots_with_ROS00029.smil#span_009012">-</span>
                        <a data-type="index:locator" href="#ch17-idp41199680" external="false" id="a_000493" smilref="Programming_Robots_with_ROS00029.smil#a_000493">Using rviz to Localize and Command a Navigating Robot</a>
                      </li>
                      <li data-type="index-term" id="li_000157">
                        <span class="text" id="span_009013" smilref="Programming_Robots_with_ROS00029.smil#span_009013">nav stack configuration for</span>
                        <span class="text" id="span_009014" smilref="Programming_Robots_with_ROS00029.smil#span_009014">,</span>
                        <a data-type="index:locator" href="#ch17-ix_17-rossify_robots2-asciidoc9" external="false" id="a_000494" smilref="Programming_Robots_with_ROS00029.smil#a_000494">Configuring the Navigation Stack</a>
                        <span class="text" id="span_009015" smilref="Programming_Robots_with_ROS00029.smil#span_009015">-</span>
                        <a data-type="index:locator" href="#ch17-idp41168176" external="false" id="a_000495" smilref="Programming_Robots_with_ROS00029.smil#a_000495">Configuring the Navigation Stack</a>
                      </li>
                      <li data-type="index-term" id="li_000158">
                        <span class="text" id="span_009016" smilref="Programming_Robots_with_ROS00029.smil#span_009016">verifying transforms for</span>
                        <span class="text" id="span_009017" smilref="Programming_Robots_with_ROS00029.smil#span_009017">,</span>
                        <a data-type="index:locator" href="#ch17-ix_17-rossify_robots2-asciidoc3" external="false" id="a_000496" smilref="Programming_Robots_with_ROS00029.smil#a_000496">Verifying Transforms</a>
                        <span class="text" id="span_009018" smilref="Programming_Robots_with_ROS00029.smil#span_009018">-</span>
                        <a data-type="index:locator" href="#ch17-idp39169952" external="false" id="a_000497" smilref="Programming_Robots_with_ROS00029.smil#a_000497">Verifying Transforms</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000159">
                    <span class="text" id="span_009019" smilref="Programming_Robots_with_ROS00029.smil#span_009019">autostarting</span>
                    <span class="text" id="span_009020" smilref="Programming_Robots_with_ROS00029.smil#span_009020">,</span>
                    <a data-type="index:locator" href="#ch05-idp19991600" external="false" id="a_000498" smilref="Programming_Robots_with_ROS00029.smil#a_000498">Implementing a Basic Action Server</a>
                  </li>
                  <li data-type="index-term" id="li_000160">
                    <span class="text" id="span_009021" smilref="Programming_Robots_with_ROS00029.smil#span_009021">axis of rotation</span>
                    <span class="text" id="span_009022" smilref="Programming_Robots_with_ROS00029.smil#span_009022">,</span>
                    <a data-type="index:locator" href="#ch11-idp26436256" external="false" id="a_000499" smilref="Programming_Robots_with_ROS00029.smil#a_000499">Joints, Links, and Kinematic Chains</a>
                  </li>
                </list>
              </div>
              <h1 id="h1_000544" smilref="Programming_Robots_with_ROS00029.smil#h1_000544">B</h1>
              <div data-type="indexdiv" id="div_000052">
                <list type="ul" id="list_000042">
                  <li id="li_000161">
                    <span data-type="index-term" id="span_009023" smilref="Programming_Robots_with_ROS00029.smil#span_009023">bags</span>
                    <list type="ul" id="list_000043">
                      <li data-type="index-term" id="li_000162">
                        <span class="text" id="span_009024" smilref="Programming_Robots_with_ROS00029.smil#span_009024">analyzing with rostopic echo-b</span>
                        <span class="text" id="span_009025" smilref="Programming_Robots_with_ROS00029.smil#span_009025">,</span>
                        <a data-type="index:locator" href="#ch21-idp45561232" external="false" id="a_000500" smilref="Programming_Robots_with_ROS00029.smil#a_000500">Analyzing ROS Bags with Other Tools: rostopic echo -b</a>
                      </li>
                      <li data-type="index-term" id="li_000163">
                        <span class="text" id="span_009026" smilref="Programming_Robots_with_ROS00029.smil#span_009026">for debugging</span>
                        <span class="text" id="span_009027" smilref="Programming_Robots_with_ROS00029.smil#span_009027">,</span>
                        <a data-type="index:locator" href="#ch21-ix_21-debugging-asciidoc30" external="false" id="a_000501" smilref="Programming_Robots_with_ROS00029.smil#a_000501">Data Logging and Analysis: rosbag and rqt_bag</a>
                        <span class="text" id="span_009028" smilref="Programming_Robots_with_ROS00029.smil#span_009028">-</span>
                        <a data-type="index:locator" href="#ch21-idp45546928" external="false" id="a_000502" smilref="Programming_Robots_with_ROS00029.smil#a_000502">Logging and Playing Back Data: rosbag</a>
                      </li>
                      <li data-type="index-term" id="li_000164">
                        <span class="text" id="span_009029" smilref="Programming_Robots_with_ROS00029.smil#span_009029">recording data with rosbag</span>
                        <span class="text" id="span_009030" smilref="Programming_Robots_with_ROS00029.smil#span_009030">,</span>
                        <a data-type="index:locator" href="#ch09-ix_9-mapping-asciidoc3" external="false" id="a_000503" smilref="Programming_Robots_with_ROS00029.smil#a_000503">Recording Data with rosbag</a>
                        <span class="text" id="span_009031" smilref="Programming_Robots_with_ROS00029.smil#span_009031">-</span>
                        <a data-type="index:locator" href="#ch09-idp24886368" external="false" id="a_000504" smilref="Programming_Robots_with_ROS00029.smil#a_000504">Recording Data with rosbag</a>
                      </li>
                      <li data-type="index-term" id="li_000165">
                        <span class="text" id="span_009032" smilref="Programming_Robots_with_ROS00029.smil#span_009032">using when building maps</span>
                        <span class="text" id="span_009033" smilref="Programming_Robots_with_ROS00029.smil#span_009033">,</span>
                        <a data-type="index:locator" href="#ch09-ix_9-mapping-asciidoc4" external="false" id="a_000505" smilref="Programming_Robots_with_ROS00029.smil#a_000505">Recording Data with rosbag</a>
                        <span class="text" id="span_009034" smilref="Programming_Robots_with_ROS00029.smil#span_009034">-</span>
                        <a data-type="index:locator" href="#ch09-idp24886368" external="false" id="a_000506" smilref="Programming_Robots_with_ROS00029.smil#a_000506">Recording Data with rosbag</a>
                        <span class="text" id="span_009035" smilref="Programming_Robots_with_ROS00029.smil#span_009035">,</span>
                        <a data-type="index:locator" href="#ch09-idp24901216" external="false" id="a_000507" smilref="Programming_Robots_with_ROS00029.smil#a_000507">Building Maps</a>
                      </li>
                      <li data-type="index-term" id="li_000166">
                        <span class="text" id="span_009036" smilref="Programming_Robots_with_ROS00029.smil#span_009036">visualizing with rqt_bag</span>
                        <span class="text" id="span_009037" smilref="Programming_Robots_with_ROS00029.smil#span_009037">,</span>
                        <a data-type="index:locator" href="#ch21-idp45548992" external="false" id="a_000508" smilref="Programming_Robots_with_ROS00029.smil#a_000508">Visualizing Bags: rqt_bag</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000167">
                    <span class="text" id="span_009038" smilref="Programming_Robots_with_ROS00029.smil#span_009038">balancing wheeled mobile robot</span>
                    <span class="text" id="span_009039" smilref="Programming_Robots_with_ROS00029.smil#span_009039">,</span>
                    <a data-type="index:locator" href="#ch06-idp21661280" external="false" id="a_000509" smilref="Programming_Robots_with_ROS00029.smil#a_000509">Actuation: Mobile Platform</a>
                  </li>
                  <li data-type="index-term" id="li_000168">
                    <span class="text" id="span_009040" smilref="Programming_Robots_with_ROS00029.smil#span_009040">bash alias</span>
                    <span class="text" id="span_009041" smilref="Programming_Robots_with_ROS00029.smil#span_009041">,</span>
                    <a data-type="index:locator" href="#ch14-idp35296320" external="false" id="a_000510" smilref="Programming_Robots_with_ROS00029.smil#a_000510">Stockroom Simulation</a>
                  </li>
                  <li data-type="index-term" id="li_000169">
                    <span class="text" id="span_009042" smilref="Programming_Robots_with_ROS00029.smil#span_009042">binary image</span>
                    <span class="text" id="span_009043" smilref="Programming_Robots_with_ROS00029.smil#span_009043">,</span>
                    <a data-type="index:locator" href="#ch12-ix_12-followbot-asciidoc8" external="false" id="a_000511" smilref="Programming_Robots_with_ROS00029.smil#a_000511">Detecting the Line</a>
                    <span class="text" id="span_009044" smilref="Programming_Robots_with_ROS00029.smil#span_009044">-</span>
                    <a data-type="index:locator" href="#ch12-idp29795408" external="false" id="a_000512" smilref="Programming_Robots_with_ROS00029.smil#a_000512">Detecting the Line</a>
                  </li>
                  <li data-type="index-term" id="li_000170">
                    <span class="text" id="span_009045" smilref="Programming_Robots_with_ROS00029.smil#span_009045">binary sensors</span>
                    <span class="text" id="span_009046" smilref="Programming_Robots_with_ROS00029.smil#span_009046">,</span>
                    <a data-type="index:locator" href="#ch06-idp21752576" external="false" id="a_000513" smilref="Programming_Robots_with_ROS00029.smil#a_000513">Sensors</a>
                  </li>
                  <li id="li_000171">
                    <span data-type="index-term" id="span_009047" smilref="Programming_Robots_with_ROS00029.smil#span_009047">bins</span>
                    <list type="ul" id="list_000044">
                      <li data-type="index-term" id="li_000172">
                        <span class="text" id="span_009048" smilref="Programming_Robots_with_ROS00029.smil#span_009048">creating</span>
                        <span class="text" id="span_009049" smilref="Programming_Robots_with_ROS00029.smil#span_009049">,</span>
                        <a data-type="index:locator" href="#ch14-ix_14-stockroom_bot-asciidoc4" external="false" id="a_000514" smilref="Programming_Robots_with_ROS00029.smil#a_000514">Stockroom Simulation</a>
                        <span class="text" id="span_009050" smilref="Programming_Robots_with_ROS00029.smil#span_009050">-</span>
                        <a data-type="index:locator" href="#ch14-idp33388896" external="false" id="a_000515" smilref="Programming_Robots_with_ROS00029.smil#a_000515">Stockroom Simulation</a>
                      </li>
                      <li data-type="index-term" id="li_000173">
                        <span class="text" id="span_009051" smilref="Programming_Robots_with_ROS00029.smil#span_009051">driving Stockroom-bot to</span>
                        <span class="text" id="span_009052" smilref="Programming_Robots_with_ROS00029.smil#span_009052">,</span>
                        <a data-type="index:locator" href="#ch14-ix_14-stockroom_bot-asciidoc9" external="false" id="a_000516" smilref="Programming_Robots_with_ROS00029.smil#a_000516">Driving to Bins</a>
                        <span class="text" id="span_009053" smilref="Programming_Robots_with_ROS00029.smil#span_009053">-</span>
                        <a data-type="index:locator" href="#ch14-idp37984880" external="false" id="a_000517" smilref="Programming_Robots_with_ROS00029.smil#a_000517">Summary</a>
                      </li>
                      <li data-type="index-term" id="li_000174">
                        <span class="text" id="span_009054" smilref="Programming_Robots_with_ROS00029.smil#span_009054">picking up items from</span>
                        <span class="text" id="span_009055" smilref="Programming_Robots_with_ROS00029.smil#span_009055">,</span>
                        <a data-type="index:locator" href="#ch14-ix_14-stockroom_bot-asciidoc12" external="false" id="a_000518" smilref="Programming_Robots_with_ROS00029.smil#a_000518">Picking Up the Item</a>
                        <span class="text" id="span_009056" smilref="Programming_Robots_with_ROS00029.smil#span_009056">-</span>
                        <a data-type="index:locator" href="#ch14-idp38732608" external="false" id="a_000519" smilref="Programming_Robots_with_ROS00029.smil#a_000519">Picking Up the Item</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000175">
                    <span class="text" id="span_009057" smilref="Programming_Robots_with_ROS00029.smil#span_009057">BSD license</span>
                    <span class="text" id="span_009058" smilref="Programming_Robots_with_ROS00029.smil#span_009058">,</span>
                    <a data-type="index:locator" href="#ch01-idp211088" external="false" id="a_000520" smilref="Programming_Robots_with_ROS00029.smil#a_000520">Philosophy</a>
                  </li>
                  <li data-type="index-term" id="li_000176">
                    <span class="text" id="span_009059" smilref="Programming_Robots_with_ROS00029.smil#span_009059">bug reports</span>
                    <span class="text" id="span_009060" smilref="Programming_Robots_with_ROS00029.smil#span_009060">,</span>
                    <a data-type="index:locator" href="#ch22-idp45628960" external="false" id="a_000521" smilref="Programming_Robots_with_ROS00029.smil#a_000521">Trackers (Bugs and Feature Requests)</a>
                  </li>
                  <li data-type="index-term" id="li_000177">
                    <span class="text" id="span_009061" smilref="Programming_Robots_with_ROS00029.smil#span_009061">Bullet Physics Library</span>
                    <span class="text" id="span_009062" smilref="Programming_Robots_with_ROS00029.smil#span_009062">,</span>
                    <a data-type="index:locator" href="#ch06-idp21909008" external="false" id="a_000522" smilref="Programming_Robots_with_ROS00029.smil#a_000522">Gazebo</a>
                  </li>
                  <li data-type="index-term" id="li_000178">
                    <span class="text" id="span_009063" smilref="Programming_Robots_with_ROS00029.smil#span_009063">bump sensors</span>
                    <span class="text" id="span_009064" smilref="Programming_Robots_with_ROS00029.smil#span_009064">,</span>
                    <a data-type="index:locator" href="#ch06-idp21753872" external="false" id="a_000523" smilref="Programming_Robots_with_ROS00029.smil#a_000523">Sensors</a>
                  </li>
                </list>
              </div>
              <h1 id="h1_000545" smilref="Programming_Robots_with_ROS00029.smil#h1_000545">C</h1>
              <div data-type="indexdiv" id="div_000053">
                <list type="ul" id="list_000045">
                  <li id="li_000179">
                    <span data-type="index-term" id="span_009065" smilref="Programming_Robots_with_ROS00029.smil#span_009065">C++</span>
                    <list type="ul" id="list_000046">
                      <li data-type="index-term" id="li_000180">
                        <span class="text" id="span_009066" smilref="Programming_Robots_with_ROS00029.smil#span_009066">and checksum in generated message definitions</span>
                        <span class="text" id="span_009067" smilref="Programming_Robots_with_ROS00029.smil#span_009067">,</span>
                        <a data-type="index:locator" href="#ch03-idp18326320" external="false" id="a_000524" smilref="Programming_Robots_with_ROS00029.smil#a_000524">Defining a New Message</a>
                      </li>
                      <li data-type="index-term" id="li_000181">
                        <span class="text" id="span_009068" smilref="Programming_Robots_with_ROS00029.smil#span_009068">and CMakeLists.txt</span>
                        <span class="text" id="span_009069" smilref="Programming_Robots_with_ROS00029.smil#span_009069">,</span>
                        <a data-type="index:locator" href="#ch23-idp45693680" external="false" id="a_000525" smilref="Programming_Robots_with_ROS00029.smil#a_000525">CMakeLists.txt</a>
                      </li>
                      <li data-type="index-term" id="li_000182">
                        <span class="text" id="span_009070" smilref="Programming_Robots_with_ROS00029.smil#span_009070">and package.xml</span>
                        <span class="text" id="span_009071" smilref="Programming_Robots_with_ROS00029.smil#span_009071">,</span>
                        <a data-type="index:locator" href="#ch23-idp45680816" external="false" id="a_000526" smilref="Programming_Robots_with_ROS00029.smil#a_000526">package.xml</a>
                      </li>
                      <li data-type="index-term" id="li_000183">
                        <span class="text" id="span_009072" smilref="Programming_Robots_with_ROS00029.smil#span_009072">building, with catkin</span>
                        <span class="text" id="span_009073" smilref="Programming_Robots_with_ROS00029.smil#span_009073">,</span>
                        <a data-type="index:locator" href="#ch23-ix_23-cplusplus-asciidoc1" external="false" id="a_000527" smilref="Programming_Robots_with_ROS00029.smil#a_000527">Building C++ with catkin</a>
                        <span class="text" id="span_009074" smilref="Programming_Robots_with_ROS00029.smil#span_009074">-</span>
                        <a data-type="index:locator" href="#ch23-idp45718624" external="false" id="a_000528" smilref="Programming_Robots_with_ROS00029.smil#a_000528">catkin_make</a>
                      </li>
                      <li data-type="index-term" id="li_000184">
                        <span class="text" id="span_009075" smilref="Programming_Robots_with_ROS00029.smil#span_009075">catkin and</span>
                        <span class="text" id="span_009076" smilref="Programming_Robots_with_ROS00029.smil#span_009076">,</span>
                        <a data-type="index:locator" href="#ch02-idm212128" external="false" id="a_000529" smilref="Programming_Robots_with_ROS00029.smil#a_000529">catkin, Workspaces, and ROS Packages</a>
                      </li>
                      <li data-type="index-term" id="li_000185">
                        <span class="text" id="span_009077" smilref="Programming_Robots_with_ROS00029.smil#span_009077">catkin_make and</span>
                        <span class="text" id="span_009078" smilref="Programming_Robots_with_ROS00029.smil#span_009078">,</span>
                        <a data-type="index:locator" href="#ch23-idp45684832" external="false" id="a_000530" smilref="Programming_Robots_with_ROS00029.smil#a_000530">catkin_make</a>
                      </li>
                      <li data-type="index-term" id="li_000186">
                        <span class="text" id="span_009079" smilref="Programming_Robots_with_ROS00029.smil#span_009079">defining services</span>
                        <span class="text" id="span_009080" smilref="Programming_Robots_with_ROS00029.smil#span_009080">,</span>
                        <a data-type="index:locator" href="#ch23-ix_23-cplusplus-asciidoc8" external="false" id="a_000531" smilref="Programming_Robots_with_ROS00029.smil#a_000531">Services</a>
                        <span class="text" id="span_009081" smilref="Programming_Robots_with_ROS00029.smil#span_009081">-</span>
                        <a data-type="index:locator" href="#ch23-idp46797424" external="false" id="a_000532" smilref="Programming_Robots_with_ROS00029.smil#a_000532">Services</a>
                      </li>
                      <li data-type="index-term" id="li_000187">
                        <span class="text" id="span_009082" smilref="Programming_Robots_with_ROS00029.smil#span_009082">minimal node in</span>
                        <span class="text" id="span_009083" smilref="Programming_Robots_with_ROS00029.smil#span_009083">,</span>
                        <a data-type="index:locator" href="#ch23-idp45726816" external="false" id="a_000533" smilref="Programming_Robots_with_ROS00029.smil#a_000533">A Simple Node</a>
                      </li>
                      <li data-type="index-term" id="li_000188">
                        <span class="text" id="span_009084" smilref="Programming_Robots_with_ROS00029.smil#span_009084">native data types</span>
                        <span class="text" id="span_009085" smilref="Programming_Robots_with_ROS00029.smil#span_009085">,</span>
                        <a data-type="index:locator" href="#ch03-idp18072624" external="false" id="a_000534" smilref="Programming_Robots_with_ROS00029.smil#a_000534">Defining Your Own Message Types</a>
                      </li>
                      <li data-type="index-term" id="li_000189">
                        <span class="text" id="span_009086" smilref="Programming_Robots_with_ROS00029.smil#span_009086">Python and</span>
                        <span class="text" id="span_009087" smilref="Programming_Robots_with_ROS00029.smil#span_009087">,</span>
                        <a data-type="index:locator" href="#ch23-idp45674080" external="false" id="a_000535" smilref="Programming_Robots_with_ROS00029.smil#a_000535">Building C++ with catkin</a>
                      </li>
                      <li data-type="index-term" id="li_000190">
                        <span class="text" id="span_009088" smilref="Programming_Robots_with_ROS00029.smil#span_009088">reasons for using</span>
                        <span class="text" id="span_009089" smilref="Programming_Robots_with_ROS00029.smil#span_009089">,</span>
                        <a data-type="index:locator" href="#ch23-idp45664064" external="false" id="a_000536" smilref="Programming_Robots_with_ROS00029.smil#a_000536">When Should You Use C (or Some Other Language)?</a>
                      </li>
                      <li data-type="index-term" id="li_000191">
                        <span class="text" id="span_009090" smilref="Programming_Robots_with_ROS00029.smil#span_009090">topic publisher setup</span>
                        <span class="text" id="span_009091" smilref="Programming_Robots_with_ROS00029.smil#span_009091">,</span>
                        <a data-type="index:locator" href="#ch23-ix_23-cplusplus-asciidoc6" external="false" id="a_000537" smilref="Programming_Robots_with_ROS00029.smil#a_000537">Topics</a>
                        <span class="text" id="span_009092" smilref="Programming_Robots_with_ROS00029.smil#span_009092">-</span>
                        <a data-type="index:locator" href="#ch23-idp46447808" external="false" id="a_000538" smilref="Programming_Robots_with_ROS00029.smil#a_000538">Topics</a>
                      </li>
                      <li data-type="index-term" id="li_000192">
                        <span class="text" id="span_009093" smilref="Programming_Robots_with_ROS00029.smil#span_009093">translating from Python to</span>
                        <span class="text" id="span_009094" smilref="Programming_Robots_with_ROS00029.smil#span_009094">,</span>
                        <a data-type="index:locator" href="#ch23-ix_23-cplusplus-asciidoc4" external="false" id="a_000539" smilref="Programming_Robots_with_ROS00029.smil#a_000539">Translating from Python to C++ (and Back Again)</a>
                        <span class="text" id="span_009095" smilref="Programming_Robots_with_ROS00029.smil#span_009095">-</span>
                        <a data-type="index:locator" href="#ch23-idp46797424" external="false" id="a_000540" smilref="Programming_Robots_with_ROS00029.smil#a_000540">Services</a>
                      </li>
                      <li data-type="index-term" id="li_000193">
                        <span class="text" id="span_009096" smilref="Programming_Robots_with_ROS00029.smil#span_009096">using, in ROS</span>
                        <span class="text" id="span_009097" smilref="Programming_Robots_with_ROS00029.smil#span_009097">,</span>
                        <a data-type="index:locator" href="#ch23-ix_23-cplusplus-asciidoc0" external="false" id="a_000541" smilref="Programming_Robots_with_ROS00029.smil#a_000541">Using C++ in ROS</a>
                        <span class="text" id="span_009098" smilref="Programming_Robots_with_ROS00029.smil#span_009098">-</span>
                        <a data-type="index:locator" href="#ch23-idp46496816" external="false" id="a_000542" smilref="Programming_Robots_with_ROS00029.smil#a_000542">Summary</a>
                      </li>
                    </list>
                  </li>
                  <li id="li_000194">
                    <span data-type="index-term" id="span_009099" smilref="Programming_Robots_with_ROS00029.smil#span_009099">callback function</span>
                    <list type="ul" id="list_000047">
                      <li data-type="index-term" id="li_000195">
                        <span class="text" id="span_009100" smilref="Programming_Robots_with_ROS00029.smil#span_009100">actions and</span>
                        <span class="text" id="span_009101" smilref="Programming_Robots_with_ROS00029.smil#span_009101">,</span>
                        <a data-type="index:locator" href="#ch05-ix_5-actions-asciidoc2" external="false" id="a_000543" smilref="Programming_Robots_with_ROS00029.smil#a_000543">Implementing a Basic Action Server</a>
                      </li>
                      <li data-type="index-term" id="li_000196">
                        <span class="text" id="span_009102" smilref="Programming_Robots_with_ROS00029.smil#span_009102">and Python-C++ translation</span>
                        <span class="text" id="span_009103" smilref="Programming_Robots_with_ROS00029.smil#span_009103">,</span>
                        <a data-type="index:locator" href="#ch23-idp46379152" external="false" id="a_000544" smilref="Programming_Robots_with_ROS00029.smil#a_000544">Topics</a>
                      </li>
                      <li data-type="index-term" id="li_000197">
                        <span class="text" id="span_009104" smilref="Programming_Robots_with_ROS00029.smil#span_009104">services and</span>
                        <span class="text" id="span_009105" smilref="Programming_Robots_with_ROS00029.smil#span_009105">,</span>
                        <a data-type="index:locator" href="#ch04-idp18939488" external="false" id="a_000545" smilref="Programming_Robots_with_ROS00029.smil#a_000545">Implementing a Service</a>
                      </li>
                      <li data-type="index-term" id="li_000198">
                        <span class="text" id="span_009106" smilref="Programming_Robots_with_ROS00029.smil#span_009106">topics and</span>
                        <span class="text" id="span_009107" smilref="Programming_Robots_with_ROS00029.smil#span_009107">,</span>
                        <a data-type="index:locator" href="#ch03-idp17746864" external="false" id="a_000546" smilref="Programming_Robots_with_ROS00029.smil#a_000546">Subscribing to a Topic</a>
                      </li>
                    </list>
                  </li>
                  <li id="li_000199">
                    <span data-type="index-term" id="span_009108" smilref="Programming_Robots_with_ROS00029.smil#span_009108">cameras</span>
                    <list type="ul" id="list_000048">
                      <li data-type="index-term" id="li_000200">
                        <span class="text" id="span_009109" smilref="Programming_Robots_with_ROS00029.smil#span_009109">depth</span>
                        <span class="text" id="span_009110" smilref="Programming_Robots_with_ROS00029.smil#span_009110">,</span>
                        <a data-type="index:locator" href="#ch06-ix_6-robots-asciidoc8" external="false" id="a_000547" smilref="Programming_Robots_with_ROS00029.smil#a_000547">Depth cameras</a>
                        <span class="text" id="span_009111" smilref="Programming_Robots_with_ROS00029.smil#span_009111">-</span>
                        <a data-type="index:locator" href="#ch06-idp21801376" external="false" id="a_000548" smilref="Programming_Robots_with_ROS00029.smil#a_000548">Depth cameras</a>
                      </li>
                      <li data-type="index-term" id="li_000201">
                        <span class="text" id="span_009112" smilref="Programming_Robots_with_ROS00029.smil#span_009112">Kinect</span>
                        <span class="text" id="span_009113" smilref="Programming_Robots_with_ROS00029.smil#span_009113">,</span>
                        <a data-type="index:locator" href="#ch06-idp21786624" external="false" id="a_000549" smilref="Programming_Robots_with_ROS00029.smil#a_000549">Depth cameras</a>
                        <span class="text" id="span_009114" smilref="Programming_Robots_with_ROS00029.smil#span_009114">,</span>
                        <a data-type="index:locator" href="#ch07-idp22257040" external="false" id="a_000550" smilref="Programming_Robots_with_ROS00029.smil#a_000550">Reading Sensor Data</a>
                        <span class="text" id="span_009115" smilref="Programming_Robots_with_ROS00029.smil#span_009115">,</span>
                        <a data-type="index:locator" href="#ch08-idp25165424" external="false" id="a_000551" smilref="Programming_Robots_with_ROS00029.smil#a_000551">rviz</a>
                      </li>
                      <li data-type="index-term" id="li_000202">
                        <span class="text" id="span_009116" smilref="Programming_Robots_with_ROS00029.smil#span_009116">message types for</span>
                        <span class="text" id="span_009117" smilref="Programming_Robots_with_ROS00029.smil#span_009117">,</span>
                        <a data-type="index:locator" href="#ch06-idp21773920" external="false" id="a_000552" smilref="Programming_Robots_with_ROS00029.smil#a_000552">Visual cameras</a>
                      </li>
                      <li data-type="index-term" id="li_000203">
                        <span class="text" id="span_009118" smilref="Programming_Robots_with_ROS00029.smil#span_009118">visual</span>
                        <span class="text" id="span_009119" smilref="Programming_Robots_with_ROS00029.smil#span_009119">,</span>
                        <a data-type="index:locator" href="#ch06-idp21766096" external="false" id="a_000553" smilref="Programming_Robots_with_ROS00029.smil#a_000553">Visual cameras</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000204">
                    <span class="text" id="span_009120" smilref="Programming_Robots_with_ROS00029.smil#span_009120">Cartesian space</span>
                    <span class="text" id="span_009121" smilref="Programming_Robots_with_ROS00029.smil#span_009121">,</span>
                    <a data-type="index:locator" href="#ch11-idp26407008" external="false" id="a_000554" smilref="Programming_Robots_with_ROS00029.smil#a_000554">Joint Space</a>
                  </li>
                  <li data-type="index-term" id="li_000205">
                    <span class="text" id="span_009122" smilref="Programming_Robots_with_ROS00029.smil#span_009122">casters</span>
                    <span class="text" id="span_009123" smilref="Programming_Robots_with_ROS00029.smil#span_009123">,</span>
                    <a data-type="index:locator" href="#ch06-idp21658160" external="false" id="a_000555" smilref="Programming_Robots_with_ROS00029.smil#a_000555">Actuation: Mobile Platform</a>
                  </li>
                  <li data-type="index-term" id="li_000206">
                    <span class="text" id="span_009124" smilref="Programming_Robots_with_ROS00029.smil#span_009124">catkin</span>
                    <span class="text" id="span_009125" smilref="Programming_Robots_with_ROS00029.smil#span_009125">,</span>
                    <a data-type="index:locator" href="#ch02-idm213536" external="false" id="a_000556" smilref="Programming_Robots_with_ROS00029.smil#a_000556">catkin, Workspaces, and ROS Packages</a>
                    <list type="ul" id="list_000049">
                      <li data-type="index-term" id="li_000207">
                        <span class="text" id="span_009126" smilref="Programming_Robots_with_ROS00029.smil#span_009126">and catkin_make</span>
                        <span class="text" id="span_009127" smilref="Programming_Robots_with_ROS00029.smil#span_009127">,</span>
                        <a data-type="index:locator" href="#ch23-idp45707872" external="false" id="a_000557" smilref="Programming_Robots_with_ROS00029.smil#a_000557">catkin_make</a>
                      </li>
                      <li data-type="index-term" id="li_000208">
                        <span class="text" id="span_009128" smilref="Programming_Robots_with_ROS00029.smil#span_009128">and CMakeLists.txt</span>
                        <span class="text" id="span_009129" smilref="Programming_Robots_with_ROS00029.smil#span_009129">,</span>
                        <a data-type="index:locator" href="#ch23-idp45694880" external="false" id="a_000558" smilref="Programming_Robots_with_ROS00029.smil#a_000558">CMakeLists.txt</a>
                      </li>
                      <li data-type="index-term" id="li_000209">
                        <span class="text" id="span_009130" smilref="Programming_Robots_with_ROS00029.smil#span_009130">and package.xml</span>
                        <span class="text" id="span_009131" smilref="Programming_Robots_with_ROS00029.smil#span_009131">,</span>
                        <a data-type="index:locator" href="#ch23-idp45681792" external="false" id="a_000559" smilref="Programming_Robots_with_ROS00029.smil#a_000559">package.xml</a>
                      </li>
                      <li data-type="index-term" id="li_000210">
                        <span class="text" id="span_009132" smilref="Programming_Robots_with_ROS00029.smil#span_009132">building C++ with</span>
                        <span class="text" id="span_009133" smilref="Programming_Robots_with_ROS00029.smil#span_009133">,</span>
                        <a data-type="index:locator" href="#ch23-ix_23-cplusplus-asciidoc1" external="false" id="a_000560" smilref="Programming_Robots_with_ROS00029.smil#a_000560">Building C++ with catkin</a>
                        <span class="text" id="span_009134" smilref="Programming_Robots_with_ROS00029.smil#span_009134">-</span>
                        <a data-type="index:locator" href="#ch23-idp45718624" external="false" id="a_000561" smilref="Programming_Robots_with_ROS00029.smil#a_000561">catkin_make</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000211">
                    <span class="text" id="span_009135" smilref="Programming_Robots_with_ROS00029.smil#span_009135">catkin_make</span>
                    <span class="text" id="span_009136" smilref="Programming_Robots_with_ROS00029.smil#span_009136">,</span>
                    <a data-type="index:locator" href="#ch02-idm184784" external="false" id="a_000562" smilref="Programming_Robots_with_ROS00029.smil#a_000562">Workspaces</a>
                    <span class="text" id="span_009137" smilref="Programming_Robots_with_ROS00029.smil#span_009137">,</span>
                    <a data-type="index:locator" href="#ch23-idp45684832" external="false" id="a_000563" smilref="Programming_Robots_with_ROS00029.smil#a_000563">catkin_make</a>
                    <list type="ul" id="list_000050">
                      <li data-type="index-term" id="li_000212">
                        <span class="text" id="span_009138" smilref="Programming_Robots_with_ROS00029.smil#span_009138">for defining actions</span>
                        <span class="text" id="span_009139" smilref="Programming_Robots_with_ROS00029.smil#span_009139">,</span>
                        <a data-type="index:locator" href="#ch05-idp19708000" external="false" id="a_000564" smilref="Programming_Robots_with_ROS00029.smil#a_000564">Defining an Action</a>
                      </li>
                      <li data-type="index-term" id="li_000213">
                        <span class="text" id="span_009140" smilref="Programming_Robots_with_ROS00029.smil#span_009140">for defining message types</span>
                        <span class="text" id="span_009141" smilref="Programming_Robots_with_ROS00029.smil#span_009141">,</span>
                        <a data-type="index:locator" href="#ch03-idp18087488" external="false" id="a_000565" smilref="Programming_Robots_with_ROS00029.smil#a_000565">Defining a New Message</a>
                      </li>
                      <li data-type="index-term" id="li_000214">
                        <span class="text" id="span_009142" smilref="Programming_Robots_with_ROS00029.smil#span_009142">for defining services</span>
                        <span class="text" id="span_009143" smilref="Programming_Robots_with_ROS00029.smil#span_009143">,</span>
                        <a data-type="index:locator" href="#ch04-idp18776688" external="false" id="a_000566" smilref="Programming_Robots_with_ROS00029.smil#a_000566">Defining a Service</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000215">
                    <span class="text" id="span_009144" smilref="Programming_Robots_with_ROS00029.smil#span_009144">cells, in map files</span>
                    <span class="text" id="span_009145" smilref="Programming_Robots_with_ROS00029.smil#span_009145">,</span>
                    <a data-type="index:locator" href="#ch09-ix_9-mapping-asciidoc2" external="false" id="a_000567" smilref="Programming_Robots_with_ROS00029.smil#a_000567">Maps in ROS</a>
                    <span class="text" id="span_009146" smilref="Programming_Robots_with_ROS00029.smil#span_009146">-</span>
                    <a data-type="index:locator" href="#ch09-idp25216576" external="false" id="a_000568" smilref="Programming_Robots_with_ROS00029.smil#a_000568">Maps in ROS</a>
                  </li>
                  <li data-type="index-term" id="li_000216">
                    <span class="text" id="span_009147" smilref="Programming_Robots_with_ROS00029.smil#span_009147">checksums, debugging mismatched</span>
                    <span class="text" id="span_009148" smilref="Programming_Robots_with_ROS00029.smil#span_009148">,</span>
                    <a data-type="index:locator" href="#ch21-ix_21-debugging-asciidoc18" external="false" id="a_000569" smilref="Programming_Robots_with_ROS00029.smil#a_000569">Problem: Mismatched Topic Types and/or Checksums</a>
                    <span class="text" id="span_009149" smilref="Programming_Robots_with_ROS00029.smil#span_009149">-</span>
                    <a data-type="index:locator" href="#ch21-idp45198560" external="false" id="a_000570" smilref="Programming_Robots_with_ROS00029.smil#a_000570">Problem: Mismatched Topic Types and/or Checksums</a>
                  </li>
                  <li data-type="index-term" id="li_000217">
                    <span class="text" id="span_009150" smilref="Programming_Robots_with_ROS00029.smil#span_009150">Chess-bot</span>
                    <span class="text" id="span_009151" smilref="Programming_Robots_with_ROS00029.smil#span_009151">,</span>
                    <a data-type="index:locator" href="#ch11-ix_11-chessbot-asciidoc10" external="false" id="a_000571" smilref="Programming_Robots_with_ROS00029.smil#a_000571">Moving R2 Around a Chessboard</a>
                    <span class="text" id="span_009152" smilref="Programming_Robots_with_ROS00029.smil#span_009152">-</span>
                    <a data-type="index:locator" href="#ch11-idp28237440" external="false" id="a_000572" smilref="Programming_Robots_with_ROS00029.smil#a_000572">Summary</a>
                    <list type="ul" id="list_000051">
                      <li data-type="index-term" id="li_000218">
                        <span class="text" id="span_009153" smilref="Programming_Robots_with_ROS00029.smil#span_009153">chessboard modeling for</span>
                        <span class="text" id="span_009154" smilref="Programming_Robots_with_ROS00029.smil#span_009154">,</span>
                        <a data-type="index:locator" href="#ch11-ix_11-chessbot-asciidoc14" external="false" id="a_000573" smilref="Programming_Robots_with_ROS00029.smil#a_000573">Modeling a Chessboard</a>
                        <span class="text" id="span_009155" smilref="Programming_Robots_with_ROS00029.smil#span_009155">-</span>
                        <a data-type="index:locator" href="#ch11-idp28108496" external="false" id="a_000574" smilref="Programming_Robots_with_ROS00029.smil#a_000574">Modeling a Chessboard</a>
                      </li>
                      <li data-type="index-term" id="li_000219">
                        <span class="text" id="span_009156" smilref="Programming_Robots_with_ROS00029.smil#span_009156">hand operation</span>
                        <span class="text" id="span_009157" smilref="Programming_Robots_with_ROS00029.smil#span_009157">,</span>
                        <a data-type="index:locator" href="#ch11-ix_11-chessbot-asciidoc12" external="false" id="a_000575" smilref="Programming_Robots_with_ROS00029.smil#a_000575">Operating the Hand</a>
                        <span class="text" id="span_009158" smilref="Programming_Robots_with_ROS00029.smil#span_009158">-</span>
                        <a data-type="index:locator" href="#ch11-idp27623264" external="false" id="a_000576" smilref="Programming_Robots_with_ROS00029.smil#a_000576">Operating the Hand</a>
                      </li>
                      <li data-type="index-term" id="li_000220">
                        <span class="text" id="span_009159" smilref="Programming_Robots_with_ROS00029.smil#span_009159">playing back chess games with</span>
                        <span class="text" id="span_009160" smilref="Programming_Robots_with_ROS00029.smil#span_009160">,</span>
                        <a data-type="index:locator" href="#ch11-ix_11-chessbot-asciidoc19" external="false" id="a_000577" smilref="Programming_Robots_with_ROS00029.smil#a_000577">Playing Back a Famous Chess Game</a>
                        <span class="text" id="span_009161" smilref="Programming_Robots_with_ROS00029.smil#span_009161">-</span>
                        <a data-type="index:locator" href="#ch11-idp28234288" external="false" id="a_000578" smilref="Programming_Robots_with_ROS00029.smil#a_000578">Playing Back a Famous Chess Game</a>
                      </li>
                      <li data-type="index-term" id="li_000221">
                        <span class="text" id="span_009162" smilref="Programming_Robots_with_ROS00029.smil#span_009162">using chessboard coordinates for arm positions</span>
                        <span class="text" id="span_009163" smilref="Programming_Robots_with_ROS00029.smil#span_009163">,</span>
                        <a data-type="index:locator" href="#ch11-ix_11-chessbot-asciidoc10" external="false" id="a_000579" smilref="Programming_Robots_with_ROS00029.smil#a_000579">Moving R2 Around a Chessboard</a>
                      </li>
                    </list>
                  </li>
                  <li id="li_000222">
                    <span data-type="index-term" id="span_009164" smilref="Programming_Robots_with_ROS00029.smil#span_009164">chessboard</span>
                    <list type="ul" id="list_000052">
                      <li data-type="index-term" id="li_000223">
                        <span class="text" id="span_009165" smilref="Programming_Robots_with_ROS00029.smil#span_009165">modeling</span>
                        <span class="text" id="span_009166" smilref="Programming_Robots_with_ROS00029.smil#span_009166">,</span>
                        <a data-type="index:locator" href="#ch11-ix_11-chessbot-asciidoc14" external="false" id="a_000580" smilref="Programming_Robots_with_ROS00029.smil#a_000580">Modeling a Chessboard</a>
                        <span class="text" id="span_009167" smilref="Programming_Robots_with_ROS00029.smil#span_009167">-</span>
                        <a data-type="index:locator" href="#ch11-idp28108496" external="false" id="a_000581" smilref="Programming_Robots_with_ROS00029.smil#a_000581">Modeling a Chessboard</a>
                      </li>
                      <li data-type="index-term" id="li_000224">
                        <span class="text" id="span_009168" smilref="Programming_Robots_with_ROS00029.smil#span_009168">moving R2 (Chess-bot) around a</span>
                        <span class="text" id="span_009169" smilref="Programming_Robots_with_ROS00029.smil#span_009169">,</span>
                        <a data-type="index:locator" href="#ch11-idp27136912" external="false" id="a_000582" smilref="Programming_Robots_with_ROS00029.smil#a_000582">Moving R2 Around a Chessboard</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000225">
                    <span class="text" id="span_009170" smilref="Programming_Robots_with_ROS00029.smil#span_009170">chunks</span>
                    <span class="text" id="span_009171" smilref="Programming_Robots_with_ROS00029.smil#span_009171">,</span>
                    <a data-type="index:locator" href="#ch21-idp45535280" external="false" id="a_000583" smilref="Programming_Robots_with_ROS00029.smil#a_000583">Logging and Playing Back Data: rosbag</a>
                  </li>
                  <li data-type="index-term" id="li_000226">
                    <span class="text" id="span_009172" smilref="Programming_Robots_with_ROS00029.smil#span_009172">client libraries</span>
                    <span class="text" id="span_009173" smilref="Programming_Robots_with_ROS00029.smil#span_009173">,</span>
                    <a data-type="index:locator" href="#ch01-idp202752" external="false" id="a_000584" smilref="Programming_Robots_with_ROS00029.smil#a_000584">Philosophy</a>
                  </li>
                  <li data-type="index-term" id="li_000227">
                    <span class="text" id="span_009174" smilref="Programming_Robots_with_ROS00029.smil#span_009174">closed-loop systems</span>
                    <span class="text" id="span_009175" smilref="Programming_Robots_with_ROS00029.smil#span_009175">,</span>
                    <a data-type="index:locator" href="#ch12-idp28888704" external="false" id="a_000585" smilref="Programming_Robots_with_ROS00029.smil#a_000585">Follow-bot</a>
                    <list type="ul" id="list_000053">
                      <li data-gentext="see" id="li_000228" smilref="Programming_Robots_with_ROS00029.smil#li_000228">(see also follow-bot)</li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000229">
                    <span class="text" id="span_009176" smilref="Programming_Robots_with_ROS00029.smil#span_009176">CMake macros</span>
                    <span class="text" id="span_009177" smilref="Programming_Robots_with_ROS00029.smil#span_009177">,</span>
                    <a data-type="index:locator" href="#ch02-idm206944" external="false" id="a_000586" smilref="Programming_Robots_with_ROS00029.smil#a_000586">catkin</a>
                  </li>
                  <li data-type="index-term" id="li_000230">
                    <span class="text" id="span_009178" smilref="Programming_Robots_with_ROS00029.smil#span_009178">CMakeLists.txt</span>
                    <span class="text" id="span_009179" smilref="Programming_Robots_with_ROS00029.smil#span_009179">,</span>
                    <a data-type="index:locator" href="#ch02-idm203200" external="false" id="a_000587" smilref="Programming_Robots_with_ROS00029.smil#a_000587">catkin</a>
                    <span class="text" id="span_009180" smilref="Programming_Robots_with_ROS00029.smil#span_009180">,</span>
                    <a data-type="index:locator" href="#ch23-idp45695824" external="false" id="a_000588" smilref="Programming_Robots_with_ROS00029.smil#a_000588">CMakeLists.txt</a>
                  </li>
                  <li data-type="index-term" id="li_000231">
                    <span class="text" id="span_009181" smilref="Programming_Robots_with_ROS00029.smil#span_009181">code, finding and sharing</span>
                    <span class="text" id="span_009182" smilref="Programming_Robots_with_ROS00029.smil#span_009182">,</span>
                    <a data-type="index:locator" href="#ch22-idp45647840" external="false" id="a_000589" smilref="Programming_Robots_with_ROS00029.smil#a_000589">Finding and Sharing Code</a>
                  </li>
                  <li data-type="index-term" id="li_000232">
                    <span class="text" id="span_009183" smilref="Programming_Robots_with_ROS00029.smil#span_009183">collision data</span>
                    <span class="text" id="span_009184" smilref="Programming_Robots_with_ROS00029.smil#span_009184">,</span>
                    <a data-type="index:locator" href="#ch16-idp39602864" external="false" id="a_000590" smilref="Programming_Robots_with_ROS00029.smil#a_000590">Simulation in Gazebo</a>
                  </li>
                  <li id="li_000233">
                    <span data-type="index-term" id="span_009185" smilref="Programming_Robots_with_ROS00029.smil#span_009185">color detection</span>
                    <list type="ul" id="list_000054">
                      <li data-type="index-term" id="li_000234">
                        <span class="text" id="span_009186" smilref="Programming_Robots_with_ROS00029.smil#span_009186">by follow-bot</span>
                        <span class="text" id="span_009187" smilref="Programming_Robots_with_ROS00029.smil#span_009187">,</span>
                        <a data-type="index:locator" href="#ch12-ix_12-followbot-asciidoc8" external="false" id="a_000591" smilref="Programming_Robots_with_ROS00029.smil#a_000591">Detecting the Line</a>
                      </li>
                      <li data-type="index-term" id="li_000235">
                        <span class="text" id="span_009188" smilref="Programming_Robots_with_ROS00029.smil#span_009188">RGB vs. HSV</span>
                        <span class="text" id="span_009189" smilref="Programming_Robots_with_ROS00029.smil#span_009189">,</span>
                        <a data-type="index:locator" href="#ch12-ix_12-followbot-asciidoc8" external="false" id="a_000592" smilref="Programming_Robots_with_ROS00029.smil#a_000592">Detecting the Line</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000236">
                    <span class="text" id="span_009190" smilref="Programming_Robots_with_ROS00029.smil#span_009190">computational subsystems</span>
                    <span class="text" id="span_009191" smilref="Programming_Robots_with_ROS00029.smil#span_009191">,</span>
                    <a data-type="index:locator" href="#ch06-idp21836336" external="false" id="a_000593" smilref="Programming_Robots_with_ROS00029.smil#a_000593">Computation</a>
                  </li>
                  <li data-type="index-term" id="li_000237">
                    <span class="text" id="span_009192" smilref="Programming_Robots_with_ROS00029.smil#span_009192">configuration, parameters and</span>
                    <span class="text" id="span_009193" smilref="Programming_Robots_with_ROS00029.smil#span_009193">,</span>
                    <a data-type="index:locator" href="#ch20-idp43777552" external="false" id="a_000594" smilref="Programming_Robots_with_ROS00029.smil#a_000594">Parameters: rosparam</a>
                  </li>
                  <li data-type="index-term" id="li_000238">
                    <span class="text" id="span_009194" smilref="Programming_Robots_with_ROS00029.smil#span_009194">coordinate frames</span>
                    <span class="text" id="span_009195" smilref="Programming_Robots_with_ROS00029.smil#span_009195">,</span>
                    <a data-type="index:locator" href="#ch02-ix_2-preliminaries-asciidoc5" external="false" id="a_000595" smilref="Programming_Robots_with_ROS00029.smil#a_000595">tf: Coordinate Transforms</a>
                    <span class="text" id="span_009196" smilref="Programming_Robots_with_ROS00029.smil#span_009196">-</span>
                    <a data-type="index:locator" href="#ch02-idp17112336" external="false" id="a_000596" smilref="Programming_Robots_with_ROS00029.smil#a_000596">tf</a>
                    <list type="ul" id="list_000055">
                      <li data-type="index-term" id="li_000239">
                        <span class="text" id="span_009197" smilref="Programming_Robots_with_ROS00029.smil#span_009197">maps vs. images</span>
                        <span class="text" id="span_009198" smilref="Programming_Robots_with_ROS00029.smil#span_009198">,</span>
                        <a data-type="index:locator" href="#ch09-idp25207360" external="false" id="a_000597" smilref="Programming_Robots_with_ROS00029.smil#a_000597">Maps in ROS</a>
                      </li>
                      <li data-type="index-term" id="li_000240">
                        <span class="text" id="span_009199" smilref="Programming_Robots_with_ROS00029.smil#span_009199">poses, positions, and orientations</span>
                        <span class="text" id="span_009200" smilref="Programming_Robots_with_ROS00029.smil#span_009200">,</span>
                        <a data-type="index:locator" href="#ch02-idp17071696" external="false" id="a_000598" smilref="Programming_Robots_with_ROS00029.smil#a_000598">Poses, Positions, and Orientations</a>
                      </li>
                      <li data-type="index-term" id="li_000241">
                        <span class="text" id="span_009201" smilref="Programming_Robots_with_ROS00029.smil#span_009201">tf and</span>
                        <span class="text" id="span_009202" smilref="Programming_Robots_with_ROS00029.smil#span_009202">,</span>
                        <a data-type="index:locator" href="#ch02-idp17091248" external="false" id="a_000599" smilref="Programming_Robots_with_ROS00029.smil#a_000599">tf</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000242">
                    <span class="text" id="span_009203" smilref="Programming_Robots_with_ROS00029.smil#span_009203">costmaps</span>
                    <span class="text" id="span_009204" smilref="Programming_Robots_with_ROS00029.smil#span_009204">,</span>
                    <a data-type="index:locator" href="#ch10-ix_10-navigation-asciidoc7" external="false" id="a_000600" smilref="Programming_Robots_with_ROS00029.smil#a_000600">Seeing What's Going On</a>
                    <span class="text" id="span_009205" smilref="Programming_Robots_with_ROS00029.smil#span_009205">-</span>
                    <a data-type="index:locator" href="#ch10-idp25682368" external="false" id="a_000601" smilref="Programming_Robots_with_ROS00029.smil#a_000601">Seeing What's Going On</a>
                    <span class="text" id="span_009206" smilref="Programming_Robots_with_ROS00029.smil#span_009206">,</span>
                    <a data-type="index:locator" href="#ch17-ix_17-rossify_robots2-asciidoc15a" external="false" id="a_000602" smilref="Programming_Robots_with_ROS00029.smil#a_000602">Configuring the Navigation Stack</a>
                    <span class="text" id="span_009207" smilref="Programming_Robots_with_ROS00029.smil#span_009207">-</span>
                    <a data-type="index:locator" href="#ch17-idp41168176" external="false" id="a_000603" smilref="Programming_Robots_with_ROS00029.smil#a_000603">Configuring the Navigation Stack</a>
                  </li>
                  <li data-type="index-term" id="li_000243">
                    <span class="text" id="span_009208" smilref="Programming_Robots_with_ROS00029.smil#span_009208">CougarBot</span>
                    <span class="text" id="span_009209" smilref="Programming_Robots_with_ROS00029.smil#span_009209">,</span>
                    <a data-type="index:locator" href="#ch18-ix_18-rossify_robots3-asciidoc0" external="false" id="a_000604" smilref="Programming_Robots_with_ROS00029.smil#a_000604">CougarBot</a>
                    <span class="text" id="span_009210" smilref="Programming_Robots_with_ROS00029.smil#span_009210">-</span>
                    <a data-type="index:locator" href="#ch18-idp42731200" external="false" id="a_000605" smilref="Programming_Robots_with_ROS00029.smil#a_000605">Summary</a>
                    <list type="ul" id="list_000056">
                      <li data-type="index-term" id="li_000244">
                        <span class="text" id="span_009211" smilref="Programming_Robots_with_ROS00029.smil#span_009211">configuring MoveIt for</span>
                        <span class="text" id="span_009212" smilref="Programming_Robots_with_ROS00029.smil#span_009212">,</span>
                        <a data-type="index:locator" href="#ch18-ix_18-rossify_robots3-asciidoc7" external="false" id="a_000606" smilref="Programming_Robots_with_ROS00029.smil#a_000606">Configuring MoveIt</a>
                        <span class="text" id="span_009213" smilref="Programming_Robots_with_ROS00029.smil#span_009213">-</span>
                        <a data-type="index:locator" href="#ch18-idp42580320" external="false" id="a_000607" smilref="Programming_Robots_with_ROS00029.smil#a_000607">Configuring MoveIt</a>
                      </li>
                      <li data-type="index-term" id="li_000245">
                        <span class="text" id="span_009214" smilref="Programming_Robots_with_ROS00029.smil#span_009214">hardware driver for</span>
                        <span class="text" id="span_009215" smilref="Programming_Robots_with_ROS00029.smil#span_009215">,</span>
                        <a data-type="index:locator" href="#ch18-idp41254816" external="false" id="a_000608" smilref="Programming_Robots_with_ROS00029.smil#a_000608">Hardware Driver</a>
                      </li>
                      <li data-type="index-term" id="li_000246">
                        <span class="text" id="span_009216" smilref="Programming_Robots_with_ROS00029.smil#span_009216">modeling with URDF</span>
                        <span class="text" id="span_009217" smilref="Programming_Robots_with_ROS00029.smil#span_009217">,</span>
                        <a data-type="index:locator" href="#ch18-ix_18-rossify_robots3-asciidoc3" external="false" id="a_000609" smilref="Programming_Robots_with_ROS00029.smil#a_000609">Modeling the Robot: URDF</a>
                        <span class="text" id="span_009218" smilref="Programming_Robots_with_ROS00029.smil#span_009218">-</span>
                        <a data-type="index:locator" href="#ch18-idp41631600" external="false" id="a_000610" smilref="Programming_Robots_with_ROS00029.smil#a_000610">Modeling the Robot: URDF</a>
                      </li>
                      <li data-type="index-term" id="li_000247">
                        <span class="text" id="span_009219" smilref="Programming_Robots_with_ROS00029.smil#span_009219">ROS message interface for</span>
                        <span class="text" id="span_009220" smilref="Programming_Robots_with_ROS00029.smil#span_009220">,</span>
                        <a data-type="index:locator" href="#ch18-idp41236896" external="false" id="a_000611" smilref="Programming_Robots_with_ROS00029.smil#a_000611">ROS Message Interface</a>
                      </li>
                      <li data-type="index-term" id="li_000248">
                        <span class="text" id="span_009221" smilref="Programming_Robots_with_ROS00029.smil#span_009221">rviz for sending goals to</span>
                        <span class="text" id="span_009222" smilref="Programming_Robots_with_ROS00029.smil#span_009222">,</span>
                        <a data-type="index:locator" href="#ch18-ix_18-rossify_robots3-asciidoc9" external="false" id="a_000612" smilref="Programming_Robots_with_ROS00029.smil#a_000612">Using rviz to Send Goals</a>
                        <span class="text" id="span_009223" smilref="Programming_Robots_with_ROS00029.smil#span_009223">-</span>
                        <a data-type="index:locator" href="#ch18-idp42725088" external="false" id="a_000613" smilref="Programming_Robots_with_ROS00029.smil#a_000613">Using rviz to Send Goals</a>
                      </li>
                      <li data-type="index-term" id="li_000249">
                        <span class="text" id="span_009224" smilref="Programming_Robots_with_ROS00029.smil#span_009224">simulation in Gazebo</span>
                        <span class="text" id="span_009225" smilref="Programming_Robots_with_ROS00029.smil#span_009225">,</span>
                        <a data-type="index:locator" href="#ch18-ix_18-rossify_robots3-asciidoc5" external="false" id="a_000614" smilref="Programming_Robots_with_ROS00029.smil#a_000614">Simulation in Gazebo</a>
                        <span class="text" id="span_009226" smilref="Programming_Robots_with_ROS00029.smil#span_009226">-</span>
                        <a data-type="index:locator" href="#ch18-idp42461264" external="false" id="a_000615" smilref="Programming_Robots_with_ROS00029.smil#a_000615">Simulation in Gazebo</a>
                      </li>
                      <li data-type="index-term" id="li_000250">
                        <span class="text" id="span_009227" smilref="Programming_Robots_with_ROS00029.smil#span_009227">steps in creating</span>
                        <span class="text" id="span_009228" smilref="Programming_Robots_with_ROS00029.smil#span_009228">,</span>
                        <a data-type="index:locator" href="#ch18-idp41226112" external="false" id="a_000616" smilref="Programming_Robots_with_ROS00029.smil#a_000616">CougarBot</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000251">
                    <span class="text" id="span_009229" smilref="Programming_Robots_with_ROS00029.smil#span_009229">Ctrl-C</span>
                    <span class="text" id="span_009230" smilref="Programming_Robots_with_ROS00029.smil#span_009230">,</span>
                    <a data-type="index:locator" href="#ch02-idp17041248" external="false" id="a_000617" smilref="Programming_Robots_with_ROS00029.smil#a_000617">roslaunch</a>
                  </li>
                </list>
              </div>
              <h1 id="h1_000546" smilref="Programming_Robots_with_ROS00029.smil#h1_000546">D</h1>
              <div data-type="indexdiv" id="div_000054">
                <list type="ul" id="list_000057">
                  <li id="li_000252">
                    <span data-type="index-term" id="span_009231" smilref="Programming_Robots_with_ROS00029.smil#span_009231">data</span>
                    <list type="ul" id="list_000058">
                      <li data-type="index-term" id="li_000253">
                        <span class="text" id="span_009232" smilref="Programming_Robots_with_ROS00029.smil#span_009232">playing back with rosbag</span>
                        <span class="text" id="span_009233" smilref="Programming_Robots_with_ROS00029.smil#span_009233">,</span>
                        <a data-type="index:locator" href="#ch21-ix_21-debugging-asciidoc34" external="false" id="a_000618" smilref="Programming_Robots_with_ROS00029.smil#a_000618">Logging and Playing Back Data: rosbag</a>
                        <span class="text" id="span_009234" smilref="Programming_Robots_with_ROS00029.smil#span_009234">-</span>
                        <a data-type="index:locator" href="#ch21-idp45543424" external="false" id="a_000619" smilref="Programming_Robots_with_ROS00029.smil#a_000619">Logging and Playing Back Data: rosbag</a>
                      </li>
                      <li data-type="index-term" id="li_000254">
                        <span class="text" id="span_009235" smilref="Programming_Robots_with_ROS00029.smil#span_009235">recording with rosbag</span>
                        <span class="text" id="span_009236" smilref="Programming_Robots_with_ROS00029.smil#span_009236">,</span>
                        <a data-type="index:locator" href="#ch09-ix_9-mapping-asciidoc5" external="false" id="a_000620" smilref="Programming_Robots_with_ROS00029.smil#a_000620">Recording Data with rosbag</a>
                        <span class="text" id="span_009237" smilref="Programming_Robots_with_ROS00029.smil#span_009237">-</span>
                        <a data-type="index:locator" href="#ch09-idp24886368" external="false" id="a_000621" smilref="Programming_Robots_with_ROS00029.smil#a_000621">Recording Data with rosbag</a>
                      </li>
                    </list>
                  </li>
                  <li id="li_000255">
                    <span data-type="index-term" id="span_009238" smilref="Programming_Robots_with_ROS00029.smil#span_009238">data logging</span>
                    <list type="ul" id="list_000059">
                      <li data-type="index-term" id="li_000256">
                        <span class="text" id="span_009239" smilref="Programming_Robots_with_ROS00029.smil#span_009239">and debugging</span>
                        <span class="text" id="span_009240" smilref="Programming_Robots_with_ROS00029.smil#span_009240">,</span>
                        <a data-type="index:locator" href="#ch21-ix_21-debugging-asciidoc28" external="false" id="a_000622" smilref="Programming_Robots_with_ROS00029.smil#a_000622">Data Logging and Analysis: rosbag and rqt_bag</a>
                        <span class="text" id="span_009241" smilref="Programming_Robots_with_ROS00029.smil#span_009241">-</span>
                        <a data-type="index:locator" href="#ch21-idp45572976" external="false" id="a_000623" smilref="Programming_Robots_with_ROS00029.smil#a_000623">Analyzing ROS Bags with Other Tools: rostopic echo -b</a>
                      </li>
                      <li data-type="index-term" id="li_000257">
                        <span class="text" id="span_009242" smilref="Programming_Robots_with_ROS00029.smil#span_009242">with rosbag</span>
                        <span class="text" id="span_009243" smilref="Programming_Robots_with_ROS00029.smil#span_009243">,</span>
                        <a data-type="index:locator" href="#ch21-ix_21-debugging-asciidoc31" external="false" id="a_000624" smilref="Programming_Robots_with_ROS00029.smil#a_000624">Data Logging and Analysis: rosbag and rqt_bag</a>
                        <span class="text" id="span_009244" smilref="Programming_Robots_with_ROS00029.smil#span_009244">-</span>
                        <a data-type="index:locator" href="#ch21-idp45546928" external="false" id="a_000625" smilref="Programming_Robots_with_ROS00029.smil#a_000625">Logging and Playing Back Data: rosbag</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000258">
                    <span class="text" id="span_009245" smilref="Programming_Robots_with_ROS00029.smil#span_009245">data plotting</span>
                    <span class="text" id="span_009246" smilref="Programming_Robots_with_ROS00029.smil#span_009246">,</span>
                    <a data-type="index:locator" href="#ch21-ix_21-debugging-asciidoc24" external="false" id="a_000626" smilref="Programming_Robots_with_ROS00029.smil#a_000626">Plotting Data: rqt_plot</a>
                    <span class="text" id="span_009247" smilref="Programming_Robots_with_ROS00029.smil#span_009247">-</span>
                    <a data-type="index:locator" href="#ch21-idp45420064" external="false" id="a_000627" smilref="Programming_Robots_with_ROS00029.smil#a_000627">Plotting Data: rqt_plot</a>
                  </li>
                  <li data-type="index-term" id="li_000259">
                    <span class="text" id="span_009248" smilref="Programming_Robots_with_ROS00029.smil#span_009248">dead reckoning</span>
                    <span class="text" id="span_009249" smilref="Programming_Robots_with_ROS00029.smil#span_009249">,</span>
                    <a data-type="index:locator" href="#ch06-idp21819296" external="false" id="a_000628" smilref="Programming_Robots_with_ROS00029.smil#a_000628">Shaft encoders</a>
                  </li>
                  <li data-type="index-term" id="li_000260">
                    <span class="text" id="span_009250" smilref="Programming_Robots_with_ROS00029.smil#span_009250">debugging</span>
                    <span class="text" id="span_009251" smilref="Programming_Robots_with_ROS00029.smil#span_009251">,</span>
                    <a data-type="index:locator" href="#ch21-ix_21-debugging-asciidoc0" external="false" id="a_000629" smilref="Programming_Robots_with_ROS00029.smil#a_000629">Debugging Robot Behavior</a>
                    <span class="text" id="span_009252" smilref="Programming_Robots_with_ROS00029.smil#span_009252">-</span>
                    <a data-type="index:locator" href="#ch21-idp45576336" external="false" id="a_000630" smilref="Programming_Robots_with_ROS00029.smil#a_000630">Summary</a>
                    <list type="ul" id="list_000060">
                      <li data-type="index-term" id="li_000261">
                        <span class="text" id="span_009253" smilref="Programming_Robots_with_ROS00029.smil#span_009253">analyzing bags</span>
                        <span class="text" id="span_009254" smilref="Programming_Robots_with_ROS00029.smil#span_009254">,</span>
                        <a data-type="index:locator" href="#ch21-idp45561232" external="false" id="a_000631" smilref="Programming_Robots_with_ROS00029.smil#a_000631">Analyzing ROS Bags with Other Tools: rostopic echo -b</a>
                      </li>
                      <li data-type="index-term" id="li_000262">
                        <span class="text" id="span_009255" smilref="Programming_Robots_with_ROS00029.smil#span_009255">and /rosout</span>
                        <span class="text" id="span_009256" smilref="Programming_Robots_with_ROS00029.smil#span_009256">,</span>
                        <a data-type="index:locator" href="#ch21-ix_21-debugging-asciidoc3" external="false" id="a_000632" smilref="Programming_Robots_with_ROS00029.smil#a_000632">Generating Log Messages: /rosout</a>
                        <span class="text" id="span_009257" smilref="Programming_Robots_with_ROS00029.smil#span_009257">-</span>
                        <a data-type="index:locator" href="#ch21-idp44945984" external="false" id="a_000633" smilref="Programming_Robots_with_ROS00029.smil#a_000633">Generating Log Messages: /rosout</a>
                      </li>
                      <li data-type="index-term" id="li_000263">
                        <span class="text" id="span_009258" smilref="Programming_Robots_with_ROS00029.smil#span_009258">and logger levels</span>
                        <span class="text" id="span_009259" smilref="Programming_Robots_with_ROS00029.smil#span_009259">,</span>
                        <a data-type="index:locator" href="#ch21-ix_21-debugging-asciidoc6" external="false" id="a_000634" smilref="Programming_Robots_with_ROS00029.smil#a_000634">Logger Levels</a>
                        <span class="text" id="span_009260" smilref="Programming_Robots_with_ROS00029.smil#span_009260">-</span>
                        <a data-type="index:locator" href="#ch21-idp45045296" external="false" id="a_000635" smilref="Programming_Robots_with_ROS00029.smil#a_000635">Logger Levels</a>
                      </li>
                      <li data-type="index-term" id="li_000264">
                        <span class="text" id="span_009261" smilref="Programming_Robots_with_ROS00029.smil#span_009261">data logging/analysis</span>
                        <span class="text" id="span_009262" smilref="Programming_Robots_with_ROS00029.smil#span_009262">,</span>
                        <a data-type="index:locator" href="#ch21-ix_21-debugging-asciidoc28" external="false" id="a_000636" smilref="Programming_Robots_with_ROS00029.smil#a_000636">Data Logging and Analysis: rosbag and rqt_bag</a>
                        <span class="text" id="span_009263" smilref="Programming_Robots_with_ROS00029.smil#span_009263">-</span>
                        <a data-type="index:locator" href="#ch21-idp45572976" external="false" id="a_000637" smilref="Programming_Robots_with_ROS00029.smil#a_000637">Analyzing ROS Bags with Other Tools: rostopic echo -b</a>
                      </li>
                      <li data-type="index-term" id="li_000265">
                        <span class="text" id="span_009264" smilref="Programming_Robots_with_ROS00029.smil#span_009264">getting log messages</span>
                        <span class="text" id="span_009265" smilref="Programming_Robots_with_ROS00029.smil#span_009265">,</span>
                        <a data-type="index:locator" href="#ch21-ix_21-debugging-asciidoc1" external="false" id="a_000638" smilref="Programming_Robots_with_ROS00029.smil#a_000638">Log Messages: /rosout and rqt_console</a>
                        <span class="text" id="span_009266" smilref="Programming_Robots_with_ROS00029.smil#span_009266">-</span>
                        <a data-type="index:locator" href="#ch21-idp45086912" external="false" id="a_000639" smilref="Programming_Robots_with_ROS00029.smil#a_000639">/rosout Versus /rosout_agg</a>
                      </li>
                      <li data-type="index-term" id="li_000266">
                        <span class="text" id="span_009267" smilref="Programming_Robots_with_ROS00029.smil#span_009267">graph visualization</span>
                        <span class="text" id="span_009268" smilref="Programming_Robots_with_ROS00029.smil#span_009268">,</span>
                        <a data-type="index:locator" href="#ch21-ix_21-debugging-asciidoc14" external="false" id="a_000640" smilref="Programming_Robots_with_ROS00029.smil#a_000640">Visualizing the Graph: rqt_graph</a>
                        <span class="text" id="span_009269" smilref="Programming_Robots_with_ROS00029.smil#span_009269">-</span>
                        <a data-type="index:locator" href="#ch21-idp45146128" external="false" id="a_000641" smilref="Programming_Robots_with_ROS00029.smil#a_000641">Visualizing the Graph: rqt_graph</a>
                      </li>
                      <li data-type="index-term" id="li_000267">
                        <span class="text" id="span_009270" smilref="Programming_Robots_with_ROS00029.smil#span_009270">incorrect network settings</span>
                        <span class="text" id="span_009271" smilref="Programming_Robots_with_ROS00029.smil#span_009271">,</span>
                        <a data-type="index:locator" href="#ch21-ix_21-debugging-asciidoc22" external="false" id="a_000642" smilref="Programming_Robots_with_ROS00029.smil#a_000642">Problem: Incorrect Network Settings</a>
                        <span class="text" id="span_009272" smilref="Programming_Robots_with_ROS00029.smil#span_009272">-</span>
                        <a data-type="index:locator" href="#ch21-idp45253024" external="false" id="a_000643" smilref="Programming_Robots_with_ROS00029.smil#a_000643">Problem: Incorrect Network Settings</a>
                      </li>
                      <li data-type="index-term" id="li_000268">
                        <span class="text" id="span_009273" smilref="Programming_Robots_with_ROS00029.smil#span_009273">mismatched topic names</span>
                        <span class="text" id="span_009274" smilref="Programming_Robots_with_ROS00029.smil#span_009274">,</span>
                        <a data-type="index:locator" href="#ch21-idp45149888" external="false" id="a_000644" smilref="Programming_Robots_with_ROS00029.smil#a_000644">Problem: Mismatched Topic Names</a>
                      </li>
                      <li data-type="index-term" id="li_000269">
                        <span class="text" id="span_009275" smilref="Programming_Robots_with_ROS00029.smil#span_009275">mismatched topic types/checksums</span>
                        <span class="text" id="span_009276" smilref="Programming_Robots_with_ROS00029.smil#span_009276">,</span>
                        <a data-type="index:locator" href="#ch21-ix_21-debugging-asciidoc18" external="false" id="a_000645" smilref="Programming_Robots_with_ROS00029.smil#a_000645">Problem: Mismatched Topic Types and/or Checksums</a>
                        <span class="text" id="span_009277" smilref="Programming_Robots_with_ROS00029.smil#span_009277">-</span>
                        <a data-type="index:locator" href="#ch21-idp45198560" external="false" id="a_000646" smilref="Programming_Robots_with_ROS00029.smil#a_000646">Problem: Mismatched Topic Types and/or Checksums</a>
                      </li>
                      <li data-type="index-term" id="li_000270">
                        <span class="text" id="span_009278" smilref="Programming_Robots_with_ROS00029.smil#span_009278">node connection problems</span>
                        <span class="text" id="span_009279" smilref="Programming_Robots_with_ROS00029.smil#span_009279">,</span>
                        <a data-type="index:locator" href="#ch21-ix_21-debugging-asciidoc12" external="false" id="a_000647" smilref="Programming_Robots_with_ROS00029.smil#a_000647">Nodes, Topics, and Connections: rqt_graph and rosnode</a>
                        <span class="text" id="span_009280" smilref="Programming_Robots_with_ROS00029.smil#span_009280">-</span>
                        <a data-type="index:locator" href="#ch21-idp45253024" external="false" id="a_000648" smilref="Programming_Robots_with_ROS00029.smil#a_000648">Problem: Incorrect Network Settings</a>
                      </li>
                      <li data-type="index-term" id="li_000271">
                        <span class="text" id="span_009281" smilref="Programming_Robots_with_ROS00029.smil#span_009281">plotting data</span>
                        <span class="text" id="span_009282" smilref="Programming_Robots_with_ROS00029.smil#span_009282">,</span>
                        <a data-type="index:locator" href="#ch21-ix_21-debugging-asciidoc25" external="false" id="a_000649" smilref="Programming_Robots_with_ROS00029.smil#a_000649">Plotting Data: rqt_plot</a>
                        <span class="text" id="span_009283" smilref="Programming_Robots_with_ROS00029.smil#span_009283">-</span>
                        <a data-type="index:locator" href="#ch21-idp45420064" external="false" id="a_000650" smilref="Programming_Robots_with_ROS00029.smil#a_000650">Plotting Data: rqt_plot</a>
                      </li>
                      <li data-type="index-term" id="li_000272">
                        <span class="text" id="span_009284" smilref="Programming_Robots_with_ROS00029.smil#span_009284">rosbag for</span>
                        <span class="text" id="span_009285" smilref="Programming_Robots_with_ROS00029.smil#span_009285">,</span>
                        <a data-type="index:locator" href="#ch09-idp24879248" external="false" id="a_000651" smilref="Programming_Robots_with_ROS00029.smil#a_000651">Recording Data with rosbag</a>
                        <span class="text" id="span_009286" smilref="Programming_Robots_with_ROS00029.smil#span_009286">,</span>
                        <a data-type="index:locator" href="#ch21-ix_21-debugging-asciidoc32" external="false" id="a_000652" smilref="Programming_Robots_with_ROS00029.smil#a_000652">Data Logging and Analysis: rosbag and rqt_bag</a>
                        <span class="text" id="span_009287" smilref="Programming_Robots_with_ROS00029.smil#span_009287">-</span>
                        <a data-type="index:locator" href="#ch21-idp45546928" external="false" id="a_000653" smilref="Programming_Robots_with_ROS00029.smil#a_000653">Logging and Playing Back Data: rosbag</a>
                      </li>
                      <li data-type="index-term" id="li_000273">
                        <span class="text" id="span_009288" smilref="Programming_Robots_with_ROS00029.smil#span_009288">rostopic echo-b</span>
                        <span class="text" id="span_009289" smilref="Programming_Robots_with_ROS00029.smil#span_009289">,</span>
                        <a data-type="index:locator" href="#ch21-idp45561232" external="false" id="a_000654" smilref="Programming_Robots_with_ROS00029.smil#a_000654">Analyzing ROS Bags with Other Tools: rostopic echo -b</a>
                      </li>
                      <li data-type="index-term" id="li_000274">
                        <span class="text" id="span_009290" smilref="Programming_Robots_with_ROS00029.smil#span_009290">rqt_bag</span>
                        <span class="text" id="span_009291" smilref="Programming_Robots_with_ROS00029.smil#span_009291">,</span>
                        <a data-type="index:locator" href="#ch21-idp45550032" external="false" id="a_000655" smilref="Programming_Robots_with_ROS00029.smil#a_000655">Visualizing Bags: rqt_bag</a>
                      </li>
                      <li data-type="index-term" id="li_000275">
                        <span class="text" id="span_009292" smilref="Programming_Robots_with_ROS00029.smil#span_009292">rqt_console</span>
                        <span class="text" id="span_009293" smilref="Programming_Robots_with_ROS00029.smil#span_009293">,</span>
                        <a data-type="index:locator" href="#ch21-ix_21-debugging-asciidoc9" external="false" id="a_000656" smilref="Programming_Robots_with_ROS00029.smil#a_000656">Reading Log Messages: rqt_console</a>
                        <span class="text" id="span_009294" smilref="Programming_Robots_with_ROS00029.smil#span_009294">-</span>
                        <a data-type="index:locator" href="#ch21-idp45070672" external="false" id="a_000657" smilref="Programming_Robots_with_ROS00030.smil#a_000657">Reading Log Messages: rqt_console</a>
                      </li>
                      <li data-type="index-term" id="li_000276">
                        <span class="text" id="span_009295" smilref="Programming_Robots_with_ROS00030.smil#span_009295">rqt_graph</span>
                        <span class="text" id="span_009296" smilref="Programming_Robots_with_ROS00030.smil#span_009296">,</span>
                        <a data-type="index:locator" href="#ch21-ix_21-debugging-asciidoc15" external="false" id="a_000658" smilref="Programming_Robots_with_ROS00030.smil#a_000658">Visualizing the Graph: rqt_graph</a>
                        <span class="text" id="span_009297" smilref="Programming_Robots_with_ROS00030.smil#span_009297">-</span>
                        <a data-type="index:locator" href="#ch21-idp45146128" external="false" id="a_000659" smilref="Programming_Robots_with_ROS00030.smil#a_000659">Visualizing the Graph: rqt_graph</a>
                      </li>
                      <li data-type="index-term" id="li_000277">
                        <span class="text" id="span_009298" smilref="Programming_Robots_with_ROS00030.smil#span_009298">rqt_plot</span>
                        <span class="text" id="span_009299" smilref="Programming_Robots_with_ROS00030.smil#span_009299">,</span>
                        <a data-type="index:locator" href="#ch08-idp23760368" external="false" id="a_000660" smilref="Programming_Robots_with_ROS00030.smil#a_000660">Motion Generator</a>
                        <span class="text" id="span_009300" smilref="Programming_Robots_with_ROS00030.smil#span_009300">,</span>
                        <a data-type="index:locator" href="#ch21-ix_21-debugging-asciidoc24" external="false" id="a_000661" smilref="Programming_Robots_with_ROS00030.smil#a_000661">Plotting Data: rqt_plot</a>
                        <span class="text" id="span_009301" smilref="Programming_Robots_with_ROS00030.smil#span_009301">-</span>
                        <a data-type="index:locator" href="#ch21-idp45420064" external="false" id="a_000662" smilref="Programming_Robots_with_ROS00030.smil#a_000662">Plotting Data: rqt_plot</a>
                      </li>
                      <li data-type="index-term" id="li_000278">
                        <span class="text" id="span_009302" smilref="Programming_Robots_with_ROS00030.smil#span_009302">rviz for</span>
                        <span class="text" id="span_009303" smilref="Programming_Robots_with_ROS00030.smil#span_009303">,</span>
                        <a data-type="index:locator" href="#ch21-idp45256080" external="false" id="a_000663" smilref="Programming_Robots_with_ROS00030.smil#a_000663">Sensor Fusion: rviz</a>
                      </li>
                      <li data-type="index-term" id="li_000279">
                        <span class="text" id="span_009304" smilref="Programming_Robots_with_ROS00030.smil#span_009304">sensor fusion</span>
                        <span class="text" id="span_009305" smilref="Programming_Robots_with_ROS00030.smil#span_009305">,</span>
                        <a data-type="index:locator" href="#ch21-idp45257056" external="false" id="a_000664" smilref="Programming_Robots_with_ROS00030.smil#a_000664">Sensor Fusion: rviz</a>
                      </li>
                      <li data-type="index-term" id="li_000280">
                        <span class="text" id="span_009306" smilref="Programming_Robots_with_ROS00030.smil#span_009306">smach and</span>
                        <span class="text" id="span_009307" smilref="Programming_Robots_with_ROS00030.smil#span_009307">,</span>
                        <a data-type="index:locator" href="#ch13-idp31626224" external="false" id="a_000665" smilref="Programming_Robots_with_ROS00030.smil#a_000665">Defining State Machines with smach</a>
                      </li>
                      <li data-type="index-term" id="li_000281">
                        <span class="text" id="span_009308" smilref="Programming_Robots_with_ROS00030.smil#span_009308">visualizing bags</span>
                        <span class="text" id="span_009309" smilref="Programming_Robots_with_ROS00030.smil#span_009309">,</span>
                        <a data-type="index:locator" href="#ch21-idp45548992" external="false" id="a_000666" smilref="Programming_Robots_with_ROS00030.smil#a_000666">Visualizing Bags: rqt_bag</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000282">
                    <span class="text" id="span_009310" smilref="Programming_Robots_with_ROS00030.smil#span_009310">degrees of freedom (DOF)</span>
                    <span class="text" id="span_009311" smilref="Programming_Robots_with_ROS00030.smil#span_009311">,</span>
                    <a data-type="index:locator" href="#ch06-idp21736368" external="false" id="a_000667" smilref="Programming_Robots_with_ROS00030.smil#a_000667">Actuation: Manipulator Arm</a>
                  </li>
                  <li data-type="index-term" id="li_000283">
                    <span class="text" id="span_009312" smilref="Programming_Robots_with_ROS00030.smil#span_009312">dependency, adding</span>
                    <span class="text" id="span_009313" smilref="Programming_Robots_with_ROS00030.smil#span_009313">,</span>
                    <a data-type="index:locator" href="#ch03-idp17589520" external="false" id="a_000668" smilref="Programming_Robots_with_ROS00030.smil#a_000668">Publishing to a Topic</a>
                  </li>
                  <li data-type="index-term" id="li_000284">
                    <span class="text" id="span_009314" smilref="Programming_Robots_with_ROS00030.smil#span_009314">depth cameras</span>
                    <span class="text" id="span_009315" smilref="Programming_Robots_with_ROS00030.smil#span_009315">,</span>
                    <a data-type="index:locator" href="#ch06-ix_6-robots-asciidoc9" external="false" id="a_000669" smilref="Programming_Robots_with_ROS00030.smil#a_000669">Depth cameras</a>
                    <span class="text" id="span_009316" smilref="Programming_Robots_with_ROS00030.smil#span_009316">-</span>
                    <a data-type="index:locator" href="#ch06-idp21801376" external="false" id="a_000670" smilref="Programming_Robots_with_ROS00030.smil#a_000670">Depth cameras</a>
                    <span class="text" id="span_009317" smilref="Programming_Robots_with_ROS00030.smil#span_009317">,</span>
                    <a data-type="index:locator" href="#ch07-idp22258016" external="false" id="a_000671" smilref="Programming_Robots_with_ROS00030.smil#a_000671">Reading Sensor Data</a>
                  </li>
                  <li data-type="index-term" id="li_000285">
                    <span class="text" id="span_009318" smilref="Programming_Robots_with_ROS00030.smil#span_009318">depth image</span>
                    <span class="text" id="span_009319" smilref="Programming_Robots_with_ROS00030.smil#span_009319">,</span>
                    <a data-type="index:locator" href="#ch06-idp21795152" external="false" id="a_000672" smilref="Programming_Robots_with_ROS00030.smil#a_000672">Depth cameras</a>
                  </li>
                  <li data-gentext="see" id="li_000286">
                    <span data-type="index-term" id="span_009320" smilref="Programming_Robots_with_ROS00030.smil#span_009320">developer tools</span>
                    <span class="text" id="span_009321" smilref="Programming_Robots_with_ROS00030.smil#span_009321">(</span>
                    <span class="text" id="span_009322" smilref="Programming_Robots_with_ROS00030.smil#span_009322">see</span>
                    <span class="text" id="span_009323" smilref="Programming_Robots_with_ROS00030.smil#span_009323">tools)</span>
                  </li>
                  <li data-type="index-term" id="li_000287">
                    <span class="text" id="span_009324" smilref="Programming_Robots_with_ROS00030.smil#span_009324">development philosophy, ROS</span>
                    <span class="text" id="span_009325" smilref="Programming_Robots_with_ROS00030.smil#span_009325">,</span>
                    <a data-type="index:locator" href="#ch01-ix_1-intro-asciidoc1" external="false" id="a_000673" smilref="Programming_Robots_with_ROS00030.smil#a_000673">Philosophy</a>
                    <span class="text" id="span_009326" smilref="Programming_Robots_with_ROS00030.smil#span_009326">-</span>
                    <a data-type="index:locator" href="#ch01-idp211088" external="false" id="a_000674" smilref="Programming_Robots_with_ROS00030.smil#a_000674">Philosophy</a>
                  </li>
                  <li data-type="index-term" id="li_000288">
                    <span class="text" id="span_009327" smilref="Programming_Robots_with_ROS00030.smil#span_009327">dextrous workspace</span>
                    <span class="text" id="span_009328" smilref="Programming_Robots_with_ROS00030.smil#span_009328">,</span>
                    <a data-type="index:locator" href="#ch06-idp21741584" external="false" id="a_000675" smilref="Programming_Robots_with_ROS00030.smil#a_000675">Actuation: Manipulator Arm</a>
                  </li>
                  <li data-type="index-term" id="li_000289">
                    <span class="text" id="span_009329" smilref="Programming_Robots_with_ROS00030.smil#span_009329">differential drive</span>
                    <span class="text" id="span_009330" smilref="Programming_Robots_with_ROS00030.smil#span_009330">,</span>
                    <a data-type="index:locator" href="#ch06-idp21656448" external="false" id="a_000676" smilref="Programming_Robots_with_ROS00030.smil#a_000676">Actuation: Mobile Platform</a>
                  </li>
                  <li data-type="index-term" id="li_000290">
                    <span class="text" id="span_009331" smilref="Programming_Robots_with_ROS00030.smil#span_009331">DOF (degrees of freedom)</span>
                    <span class="text" id="span_009332" smilref="Programming_Robots_with_ROS00030.smil#span_009332">,</span>
                    <a data-type="index:locator" href="#ch06-idp21737072" external="false" id="a_000677" smilref="Programming_Robots_with_ROS00030.smil#a_000677">Actuation: Manipulator Arm</a>
                  </li>
                  <li data-type="index-term" id="li_000291">
                    <span class="text" id="span_009333" smilref="Programming_Robots_with_ROS00030.smil#span_009333">dynamically stable robot</span>
                    <span class="text" id="span_009334" smilref="Programming_Robots_with_ROS00030.smil#span_009334">,</span>
                    <a data-type="index:locator" href="#ch06-idp21661952" external="false" id="a_000678" smilref="Programming_Robots_with_ROS00030.smil#a_000678">Actuation: Mobile Platform</a>
                  </li>
                </list>
              </div>
              <h1 id="h1_000547" smilref="Programming_Robots_with_ROS00030.smil#h1_000547">E</h1>
              <div data-type="indexdiv" id="div_000055">
                <list type="ul" id="list_000061">
                  <li data-type="index-term" id="li_000292">
                    <span class="text" id="span_009335" smilref="Programming_Robots_with_ROS00030.smil#span_009335">edges</span>
                    <span class="text" id="span_009336" smilref="Programming_Robots_with_ROS00030.smil#span_009336">,</span>
                    <a data-type="index:locator" href="#ch02-idp130928" external="false" id="a_000679" smilref="Programming_Robots_with_ROS00030.smil#a_000679">The ROS Graph</a>
                  </li>
                  <li data-type="index-term" id="li_000293">
                    <span class="text" id="span_009337" smilref="Programming_Robots_with_ROS00030.smil#span_009337">Elsie (early mobile robot)</span>
                    <span class="text" id="span_009338" smilref="Programming_Robots_with_ROS00030.smil#span_009338">,</span>
                    <a data-type="index:locator" href="#ch16-ix_16-rossify_robots-asciidoc2" external="false" id="a_000680" smilref="Programming_Robots_with_ROS00030.smil#a_000680">TortoiseBot</a>
                    <span class="text" id="span_009339" smilref="Programming_Robots_with_ROS00030.smil#span_009339">-</span>
                    <a data-type="index:locator" href="#ch16-idp39192176" external="false" id="a_000681" smilref="Programming_Robots_with_ROS00030.smil#a_000681">TortoiseBot</a>
                  </li>
                  <li data-type="index-term" id="li_000294">
                    <span class="text" id="span_009340" smilref="Programming_Robots_with_ROS00030.smil#span_009340">EmPy template engine</span>
                    <span class="text" id="span_009341" smilref="Programming_Robots_with_ROS00030.smil#span_009341">,</span>
                    <a data-type="index:locator" href="#ch14-ix_14-stockroom_bot-asciidoc8" external="false" id="a_000682" smilref="Programming_Robots_with_ROS00030.smil#a_000682">Stockroom Simulation</a>
                    <span class="text" id="span_009342" smilref="Programming_Robots_with_ROS00030.smil#span_009342">-</span>
                    <a data-type="index:locator" href="#ch14-idp34260272" external="false" id="a_000683" smilref="Programming_Robots_with_ROS00030.smil#a_000683">Stockroom Simulation</a>
                  </li>
                  <li data-type="index-term" id="li_000295">
                    <span class="text" id="span_009343" smilref="Programming_Robots_with_ROS00030.smil#span_009343">end effector</span>
                    <span class="text" id="span_009344" smilref="Programming_Robots_with_ROS00030.smil#span_009344">,</span>
                    <a data-type="index:locator" href="#ch11-idp26401872" external="false" id="a_000684" smilref="Programming_Robots_with_ROS00030.smil#a_000684">Joints, Links, and Kinematic Chains</a>
                  </li>
                  <li data-gentext="see" id="li_000296">
                    <span data-type="index-term" id="span_009345" smilref="Programming_Robots_with_ROS00030.smil#span_009345">error messages</span>
                    <span class="text" id="span_009346" smilref="Programming_Robots_with_ROS00030.smil#span_009346">(</span>
                    <span class="text" id="span_009347" smilref="Programming_Robots_with_ROS00030.smil#span_009347">see</span>
                    <span class="text" id="span_009348" smilref="Programming_Robots_with_ROS00030.smil#span_009348">log messages)</span>
                  </li>
                  <li data-type="index-term" id="li_000297">
                    <span class="text" id="span_009349" smilref="Programming_Robots_with_ROS00030.smil#span_009349">etiquette, online</span>
                    <span class="text" id="span_009350" smilref="Programming_Robots_with_ROS00030.smil#span_009350">,</span>
                    <a data-type="index:locator" href="#ch22-idp45582752" external="false" id="a_000685" smilref="Programming_Robots_with_ROS00030.smil#a_000685">Etiquette</a>
                  </li>
                  <li data-type="index-term" id="li_000298">
                    <span class="text" id="span_009351" smilref="Programming_Robots_with_ROS00030.smil#span_009351">event loops, pyttsx</span>
                    <span class="text" id="span_009352" smilref="Programming_Robots_with_ROS00030.smil#span_009352">,</span>
                    <a data-type="index:locator" href="#ch19-idp42785280" external="false" id="a_000686" smilref="Programming_Robots_with_ROS00030.smil#a_000686">Event Loops</a>
                  </li>
                  <li data-type="index-term" id="li_000299">
                    <span class="text" id="span_009353" smilref="Programming_Robots_with_ROS00030.smil#span_009353">execute permissions</span>
                    <span class="text" id="span_009354" smilref="Programming_Robots_with_ROS00030.smil#span_009354">,</span>
                    <a data-type="index:locator" href="#ch03-idp17666448" external="false" id="a_000687" smilref="Programming_Robots_with_ROS00030.smil#a_000687">Publishing to a Topic</a>
                  </li>
                </list>
              </div>
              <h1 id="h1_000548" smilref="Programming_Robots_with_ROS00030.smil#h1_000548">F</h1>
              <div data-type="indexdiv" id="div_000056">
                <list type="ul" id="list_000062">
                  <li data-type="index-term" id="li_000300">
                    <span class="text" id="span_009355" smilref="Programming_Robots_with_ROS00030.smil#span_009355">feature requests</span>
                    <span class="text" id="span_009356" smilref="Programming_Robots_with_ROS00030.smil#span_009356">,</span>
                    <a data-type="index:locator" href="#ch22-idp45628960" external="false" id="a_000688" smilref="Programming_Robots_with_ROS00030.smil#a_000688">Trackers (Bugs and Feature Requests)</a>
                  </li>
                  <li data-type="index-term" id="li_000301">
                    <span class="text" id="span_009357" smilref="Programming_Robots_with_ROS00030.smil#span_009357">feedback</span>
                    <span class="text" id="span_009358" smilref="Programming_Robots_with_ROS00030.smil#span_009358">,</span>
                    <a data-type="index:locator" href="#ch05-idp19466048" external="false" id="a_000689" smilref="Programming_Robots_with_ROS00030.smil#a_000689">Actions</a>
                    <span class="text" id="span_009359" smilref="Programming_Robots_with_ROS00030.smil#span_009359">,</span>
                    <a data-type="index:locator" href="#ch05-idp20519344" external="false" id="a_000690" smilref="Programming_Robots_with_ROS00030.smil#a_000690">Implementing a More Sophisticated Action Server</a>
                  </li>
                  <li data-type="index-term" id="li_000302">
                    <span class="text" id="span_009360" smilref="Programming_Robots_with_ROS00030.smil#span_009360">Fetch robot</span>
                    <span class="text" id="span_009361" smilref="Programming_Robots_with_ROS00030.smil#span_009361">,</span>
                    <a data-type="index:locator" href="#ch06-idp21856784" external="false" id="a_000691" smilref="Programming_Robots_with_ROS00030.smil#a_000691">Fetch</a>
                    <span class="text" id="span_009362" smilref="Programming_Robots_with_ROS00030.smil#span_009362">,</span>
                    <a data-type="index:locator" href="#ch14-ix_14-stockroom_bot-asciidoc11" external="false" id="a_000692" smilref="Programming_Robots_with_ROS00030.smil#a_000692">Driving to Bins</a>
                    <span class="text" id="span_009363" smilref="Programming_Robots_with_ROS00030.smil#span_009363">-</span>
                    <a data-type="index:locator" href="#ch14-idp34979696" external="false" id="a_000693" smilref="Programming_Robots_with_ROS00030.smil#a_000693">Driving to Bins</a>
                  </li>
                  <li data-type="index-term" id="li_000303">
                    <span class="text" id="span_009364" smilref="Programming_Robots_with_ROS00030.smil#span_009364">filesystem, roscd for navigation of</span>
                    <span class="text" id="span_009365" smilref="Programming_Robots_with_ROS00030.smil#span_009365">,</span>
                    <a data-type="index:locator" href="#ch20-idp43797792" external="false" id="a_000694" smilref="Programming_Robots_with_ROS00030.smil#a_000694">Navigating the Filesystem: roscd</a>
                  </li>
                  <li data-type="index-term" id="li_000304">
                    <span class="text" id="span_009366" smilref="Programming_Robots_with_ROS00030.smil#span_009366">firewalls</span>
                    <span class="text" id="span_009367" smilref="Programming_Robots_with_ROS00030.smil#span_009367">,</span>
                    <a data-type="index:locator" href="#ch21-idp45244432" external="false" id="a_000695" smilref="Programming_Robots_with_ROS00030.smil#a_000695">Problem: Incorrect Network Settings</a>
                  </li>
                  <li data-type="index-term" id="li_000305">
                    <span class="text" id="span_009368" smilref="Programming_Robots_with_ROS00030.smil#span_009368">follow-bot</span>
                    <span class="text" id="span_009369" smilref="Programming_Robots_with_ROS00030.smil#span_009369">,</span>
                    <a data-type="index:locator" href="#ch12-ix_12-followbot-asciidoc0" external="false" id="a_000696" smilref="Programming_Robots_with_ROS00030.smil#a_000696">Follow-bot</a>
                    <span class="text" id="span_009370" smilref="Programming_Robots_with_ROS00030.smil#span_009370">-</span>
                    <a data-type="index:locator" href="#ch12-idp30775248" external="false" id="a_000697" smilref="Programming_Robots_with_ROS00030.smil#a_000697">Summary</a>
                    <list type="ul" id="list_000063">
                      <li data-type="index-term" id="li_000306">
                        <span class="text" id="span_009371" smilref="Programming_Robots_with_ROS00030.smil#span_009371">acquiring images for</span>
                        <span class="text" id="span_009372" smilref="Programming_Robots_with_ROS00030.smil#span_009372">,</span>
                        <a data-type="index:locator" href="#ch12-ix_12-followbot-asciidoc1" external="false" id="a_000698" smilref="Programming_Robots_with_ROS00030.smil#a_000698">Acquiring Images</a>
                        <span class="text" id="span_009373" smilref="Programming_Robots_with_ROS00030.smil#span_009373">-</span>
                        <a data-type="index:locator" href="#ch12-idp29373904" external="false" id="a_000699" smilref="Programming_Robots_with_ROS00030.smil#a_000699">Acquiring Images</a>
                      </li>
                      <li data-type="index-term" id="li_000307">
                        <span class="text" id="span_009374" smilref="Programming_Robots_with_ROS00030.smil#span_009374">detecting target line</span>
                        <span class="text" id="span_009375" smilref="Programming_Robots_with_ROS00030.smil#span_009375">,</span>
                        <a data-type="index:locator" href="#ch12-ix_12-followbot-asciidoc3" external="false" id="a_000700" smilref="Programming_Robots_with_ROS00030.smil#a_000700">Detecting the Line</a>
                        <span class="text" id="span_009376" smilref="Programming_Robots_with_ROS00030.smil#span_009376">-</span>
                        <a data-type="index:locator" href="#ch12-idp30167936" external="false" id="a_000701" smilref="Programming_Robots_with_ROS00030.smil#a_000701">Detecting the Line</a>
                      </li>
                      <li data-type="index-term" id="li_000308">
                        <span class="text" id="span_009377" smilref="Programming_Robots_with_ROS00030.smil#span_009377">following the target line</span>
                        <span class="text" id="span_009378" smilref="Programming_Robots_with_ROS00030.smil#span_009378">,</span>
                        <a data-type="index:locator" href="#ch12-ix_12-followbot-asciidoc9" external="false" id="a_000702" smilref="Programming_Robots_with_ROS00030.smil#a_000702">Following the Line</a>
                        <span class="text" id="span_009379" smilref="Programming_Robots_with_ROS00030.smil#span_009379">-</span>
                        <a data-type="index:locator" href="#ch12-idp30775248" external="false" id="a_000703" smilref="Programming_Robots_with_ROS00030.smil#a_000703">Summary</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000309">
                    <span class="text" id="span_009380" smilref="Programming_Robots_with_ROS00030.smil#span_009380">forward kinematics</span>
                    <span class="text" id="span_009381" smilref="Programming_Robots_with_ROS00030.smil#span_009381">,</span>
                    <a data-type="index:locator" href="#ch11-ix_11-chessbot-asciidoc3" external="false" id="a_000704" smilref="Programming_Robots_with_ROS00030.smil#a_000704">Inverse Kinematics</a>
                    <span class="text" id="span_009382" smilref="Programming_Robots_with_ROS00030.smil#span_009382">-</span>
                    <a data-type="index:locator" href="#ch11-idp26389744" external="false" id="a_000705" smilref="Programming_Robots_with_ROS00030.smil#a_000705">Inverse Kinematics</a>
                  </li>
                  <li data-type="index-term" id="li_000310">
                    <span class="text" id="span_009383" smilref="Programming_Robots_with_ROS00030.smil#span_009383">forward slash (/)</span>
                    <span class="text" id="span_009384" smilref="Programming_Robots_with_ROS00030.smil#span_009384">,</span>
                    <a data-type="index:locator" href="#ch02-idp16978640" external="false" id="a_000706" smilref="Programming_Robots_with_ROS00030.smil#a_000706">Names, Namespaces, and Remapping</a>
                  </li>
                  <li data-type="index-term" id="li_000311">
                    <span class="text" id="span_009385" smilref="Programming_Robots_with_ROS00030.smil#span_009385">frame of reference</span>
                    <span class="text" id="span_009386" smilref="Programming_Robots_with_ROS00030.smil#span_009386">,</span>
                    <a data-type="index:locator" href="#ch08-idp25125056" external="false" id="a_000707" smilref="Programming_Robots_with_ROS00030.smil#a_000707">rviz</a>
                  </li>
                  <li data-type="index-term" id="li_000312">
                    <span class="text" id="span_009387" smilref="Programming_Robots_with_ROS00030.smil#span_009387">free and open source development philosophy</span>
                    <span class="text" id="span_009388" smilref="Programming_Robots_with_ROS00030.smil#span_009388">,</span>
                    <a data-type="index:locator" href="#ch01-idp211088" external="false" id="a_000708" smilref="Programming_Robots_with_ROS00030.smil#a_000708">Philosophy</a>
                  </li>
                </list>
              </div>
              <h1 id="h1_000549" smilref="Programming_Robots_with_ROS00030.smil#h1_000549">G</h1>
              <div data-type="indexdiv" id="div_000057">
                <list type="ul" id="list_000064">
                  <li data-type="index-term" id="li_000313">
                    <span class="text" id="span_009389" smilref="Programming_Robots_with_ROS00030.smil#span_009389">Gazebo</span>
                    <span class="text" id="span_009390" smilref="Programming_Robots_with_ROS00030.smil#span_009390">,</span>
                    <a data-type="index:locator" href="#ch06-ix_6-robots-asciidoc15" external="false" id="a_000709" smilref="Programming_Robots_with_ROS00030.smil#a_000709">Gazebo</a>
                    <span class="text" id="span_009391" smilref="Programming_Robots_with_ROS00030.smil#span_009391">-</span>
                    <a data-type="index:locator" href="#ch06-idp21915808" external="false" id="a_000710" smilref="Programming_Robots_with_ROS00030.smil#a_000710">Gazebo</a>
                    <list type="ul" id="list_000065">
                      <li data-type="index-term" id="li_000314">
                        <span class="text" id="span_009392" smilref="Programming_Robots_with_ROS00030.smil#span_009392">and Kinect depth camera</span>
                        <span class="text" id="span_009393" smilref="Programming_Robots_with_ROS00030.smil#span_009393">,</span>
                        <a data-type="index:locator" href="#ch07-idp22281568" external="false" id="a_000711" smilref="Programming_Robots_with_ROS00030.smil#a_000711">Reading Sensor Data</a>
                      </li>
                      <li data-type="index-term" id="li_000315">
                        <span class="text" id="span_009394" smilref="Programming_Robots_with_ROS00030.smil#span_009394">chessboard modeling in</span>
                        <span class="text" id="span_009395" smilref="Programming_Robots_with_ROS00030.smil#span_009395">,</span>
                        <a data-type="index:locator" href="#ch11-ix_11-chessbot-asciidoc14" external="false" id="a_000712" smilref="Programming_Robots_with_ROS00030.smil#a_000712">Modeling a Chessboard</a>
                        <span class="text" id="span_009396" smilref="Programming_Robots_with_ROS00030.smil#span_009396">-</span>
                        <a data-type="index:locator" href="#ch11-idp28108496" external="false" id="a_000713" smilref="Programming_Robots_with_ROS00030.smil#a_000713">Modeling a Chessboard</a>
                      </li>
                      <li data-type="index-term" id="li_000316">
                        <span class="text" id="span_009397" smilref="Programming_Robots_with_ROS00030.smil#span_009397">debugging inertial data</span>
                        <span class="text" id="span_009398" smilref="Programming_Robots_with_ROS00030.smil#span_009398">,</span>
                        <a data-type="index:locator" href="#ch16-idp39013296" external="false" id="a_000714" smilref="Programming_Robots_with_ROS00030.smil#a_000714">Simulation in Gazebo</a>
                      </li>
                      <li data-type="index-term" id="li_000317">
                        <span class="text" id="span_009399" smilref="Programming_Robots_with_ROS00030.smil#span_009399">for CougarBot simulation</span>
                        <span class="text" id="span_009400" smilref="Programming_Robots_with_ROS00030.smil#span_009400">,</span>
                        <a data-type="index:locator" href="#ch18-ix_18-rossify_robots3-asciidoc5" external="false" id="a_000715" smilref="Programming_Robots_with_ROS00030.smil#a_000715">Simulation in Gazebo</a>
                        <span class="text" id="span_009401" smilref="Programming_Robots_with_ROS00030.smil#span_009401">-</span>
                        <a data-type="index:locator" href="#ch18-idp42461264" external="false" id="a_000716" smilref="Programming_Robots_with_ROS00030.smil#a_000716">Simulation in Gazebo</a>
                      </li>
                      <li data-type="index-term" id="li_000318">
                        <span class="text" id="span_009402" smilref="Programming_Robots_with_ROS00030.smil#span_009402">for developing manipulation software</span>
                        <span class="text" id="span_009403" smilref="Programming_Robots_with_ROS00030.smil#span_009403">,</span>
                        <a data-type="index:locator" href="#ch11-idp26438144" external="false" id="a_000717" smilref="Programming_Robots_with_ROS00030.smil#a_000717">Chess-bot</a>
                      </li>
                      <li data-type="index-term" id="li_000319">
                        <span class="text" id="span_009404" smilref="Programming_Robots_with_ROS00030.smil#span_009404">for stockroom simulation</span>
                        <span class="text" id="span_009405" smilref="Programming_Robots_with_ROS00030.smil#span_009405">,</span>
                        <a data-type="index:locator" href="#ch14-ix_14-stockroom_bot-asciidoc3" external="false" id="a_000718" smilref="Programming_Robots_with_ROS00030.smil#a_000718">Stockroom Simulation</a>
                        <span class="text" id="span_009406" smilref="Programming_Robots_with_ROS00030.smil#span_009406">-</span>
                        <a data-type="index:locator" href="#ch14-idp34510240" external="false" id="a_000719" smilref="Programming_Robots_with_ROS00030.smil#a_000719">Stockroom Simulation</a>
                      </li>
                      <li data-type="index-term" id="li_000320">
                        <span class="text" id="span_009407" smilref="Programming_Robots_with_ROS00030.smil#span_009407">for TortoiseBot simulation</span>
                        <span class="text" id="span_009408" smilref="Programming_Robots_with_ROS00030.smil#span_009408">,</span>
                        <a data-type="index:locator" href="#ch16-ix_16-rossify_robots-asciidoc10" external="false" id="a_000720" smilref="Programming_Robots_with_ROS00030.smil#a_000720">Simulation in Gazebo</a>
                        <span class="text" id="span_009409" smilref="Programming_Robots_with_ROS00030.smil#span_009409">-</span>
                        <a data-type="index:locator" href="#ch16-idp40547168" external="false" id="a_000721" smilref="Programming_Robots_with_ROS00030.smil#a_000721">Simulation in Gazebo</a>
                      </li>
                      <li data-type="index-term" id="li_000321">
                        <span class="text" id="span_009410" smilref="Programming_Robots_with_ROS00030.smil#span_009410">installing/running R2 in</span>
                        <span class="text" id="span_009411" smilref="Programming_Robots_with_ROS00030.smil#span_009411">,</span>
                        <a data-type="index:locator" href="#ch11-ix_11-chessbot-asciidoc5" external="false" id="a_000722" smilref="Programming_Robots_with_ROS00030.smil#a_000722">Installing and Running a Simulated R2</a>
                        <span class="text" id="span_009412" smilref="Programming_Robots_with_ROS00030.smil#span_009412">-</span>
                        <a data-type="index:locator" href="#ch11-idp26336784" external="false" id="a_000723" smilref="Programming_Robots_with_ROS00030.smil#a_000723">Installing and Running a Simulated R2</a>
                      </li>
                      <li data-type="index-term" id="li_000322">
                        <span class="text" id="span_009413" smilref="Programming_Robots_with_ROS00030.smil#span_009413">Rotate tool</span>
                        <span class="text" id="span_009414" smilref="Programming_Robots_with_ROS00030.smil#span_009414">,</span>
                        <a data-type="index:locator" href="#ch07-idp22387728" external="false" id="a_000724" smilref="Programming_Robots_with_ROS00030.smil#a_000724">Reading Sensor Data</a>
                      </li>
                      <li data-type="index-term" id="li_000323">
                        <span class="text" id="span_009415" smilref="Programming_Robots_with_ROS00030.smil#span_009415">rviz vs.</span>
                        <span class="text" id="span_009416" smilref="Programming_Robots_with_ROS00030.smil#span_009416">,</span>
                        <a data-type="index:locator" href="#ch17-idp39116544" external="false" id="a_000725" smilref="Programming_Robots_with_ROS00030.smil#a_000725">Verifying Transforms</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000324">
                    <span class="text" id="span_009417" smilref="Programming_Robots_with_ROS00030.smil#span_009417">gazebo_ros package</span>
                    <span class="text" id="span_009418" smilref="Programming_Robots_with_ROS00030.smil#span_009418">,</span>
                    <a data-type="index:locator" href="#ch06-idp21912304" external="false" id="a_000726" smilref="Programming_Robots_with_ROS00030.smil#a_000726">Gazebo</a>
                  </li>
                  <li data-type="index-term" id="li_000325">
                    <span class="text" id="span_009419" smilref="Programming_Robots_with_ROS00030.smil#span_009419">global costmap</span>
                    <span class="text" id="span_009420" smilref="Programming_Robots_with_ROS00030.smil#span_009420">,</span>
                    <a data-type="index:locator" href="#ch10-ix_10-navigation-asciidoc7" external="false" id="a_000727" smilref="Programming_Robots_with_ROS00030.smil#a_000727">Seeing What's Going On</a>
                    <span class="text" id="span_009421" smilref="Programming_Robots_with_ROS00030.smil#span_009421">-</span>
                    <a data-type="index:locator" href="#ch10-idp25682368" external="false" id="a_000728" smilref="Programming_Robots_with_ROS00030.smil#a_000728">Seeing What's Going On</a>
                    <span class="text" id="span_009422" smilref="Programming_Robots_with_ROS00030.smil#span_009422">,</span>
                    <a data-type="index:locator" href="#ch17-ix_17-rossify_robots2-asciidoc16" external="false" id="a_000729" smilref="Programming_Robots_with_ROS00030.smil#a_000729">Configuring the Navigation Stack</a>
                    <span class="text" id="span_009423" smilref="Programming_Robots_with_ROS00030.smil#span_009423">-</span>
                    <a data-type="index:locator" href="#ch17-idp41168176" external="false" id="a_000730" smilref="Programming_Robots_with_ROS00030.smil#a_000730">Configuring the Navigation Stack</a>
                  </li>
                  <li data-type="index-term" id="li_000326">
                    <span class="text" id="span_009424" smilref="Programming_Robots_with_ROS00030.smil#span_009424">global planner</span>
                    <span class="text" id="span_009425" smilref="Programming_Robots_with_ROS00030.smil#span_009425">,</span>
                    <a data-type="index:locator" href="#ch10-idp25642368" external="false" id="a_000731" smilref="Programming_Robots_with_ROS00030.smil#a_000731">The ROS Navigation Stack</a>
                  </li>
                  <li data-type="index-term" id="li_000327">
                    <span class="text" id="span_009426" smilref="Programming_Robots_with_ROS00030.smil#span_009426">goal pose</span>
                    <span class="text" id="span_009427" smilref="Programming_Robots_with_ROS00030.smil#span_009427">,</span>
                    <a data-type="index:locator" href="#ch10-idp25676000" external="false" id="a_000732" smilref="Programming_Robots_with_ROS00030.smil#a_000732">Seeing What's Going On</a>
                    <span class="text" id="span_009428" smilref="Programming_Robots_with_ROS00030.smil#span_009428">,</span>
                    <a data-type="index:locator" href="#ch17-idp41191984" external="false" id="a_000733" smilref="Programming_Robots_with_ROS00030.smil#a_000733">Using rviz to Localize and Command a Navigating Robot</a>
                  </li>
                  <li data-type="index-term" id="li_000328">
                    <span class="text" id="span_009429" smilref="Programming_Robots_with_ROS00030.smil#span_009429">goals</span>
                    <span class="text" id="span_009430" smilref="Programming_Robots_with_ROS00030.smil#span_009430">,</span>
                    <a data-type="index:locator" href="#ch05-idp19496304" external="false" id="a_000734" smilref="Programming_Robots_with_ROS00030.smil#a_000734">Actions</a>
                    <list type="ul" id="list_000066">
                      <li data-type="index-term" id="li_000329">
                        <span class="text" id="span_009431" smilref="Programming_Robots_with_ROS00030.smil#span_009431">preempting</span>
                        <span class="text" id="span_009432" smilref="Programming_Robots_with_ROS00030.smil#span_009432">,</span>
                        <a data-type="index:locator" href="#ch05-idp21367568" external="false" id="a_000735" smilref="Programming_Robots_with_ROS00030.smil#a_000735">Checking That Everything Works as Expected</a>
                      </li>
                      <li data-type="index-term" id="li_000330">
                        <span class="text" id="span_009433" smilref="Programming_Robots_with_ROS00030.smil#span_009433">rviz and</span>
                        <span class="text" id="span_009434" smilref="Programming_Robots_with_ROS00030.smil#span_009434">,</span>
                        <a data-type="index:locator" href="#ch18-ix_18-rossify_robots3-asciidoc9" external="false" id="a_000736" smilref="Programming_Robots_with_ROS00030.smil#a_000736">Using rviz to Send Goals</a>
                        <span class="text" id="span_009435" smilref="Programming_Robots_with_ROS00030.smil#span_009435">-</span>
                        <a data-type="index:locator" href="#ch18-idp42725088" external="false" id="a_000737" smilref="Programming_Robots_with_ROS00030.smil#a_000737">Using rviz to Send Goals</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000331">
                    <span class="text" id="span_009436" smilref="Programming_Robots_with_ROS00030.smil#span_009436">graph, ROS system</span>
                    <span class="text" id="span_009437" smilref="Programming_Robots_with_ROS00030.smil#span_009437">,</span>
                    <a data-type="index:locator" href="#ch02-ix_2-preliminaries-asciidoc1" external="false" id="a_000738" smilref="Programming_Robots_with_ROS00030.smil#a_000738">The ROS Graph</a>
                    <span class="text" id="span_009438" smilref="Programming_Robots_with_ROS00030.smil#span_009438">-</span>
                    <a data-type="index:locator" href="#ch02-idp143232" external="false" id="a_000739" smilref="Programming_Robots_with_ROS00030.smil#a_000739">The ROS Graph</a>
                    <span class="text" id="span_009439" smilref="Programming_Robots_with_ROS00030.smil#span_009439">,</span>
                    <a data-type="index:locator" href="#ch21-ix_21-debugging-asciidoc16" external="false" id="a_000740" smilref="Programming_Robots_with_ROS00030.smil#a_000740">Visualizing the Graph: rqt_graph</a>
                    <span class="text" id="span_009440" smilref="Programming_Robots_with_ROS00030.smil#span_009440">-</span>
                    <a data-type="index:locator" href="#ch21-idp45146128" external="false" id="a_000741" smilref="Programming_Robots_with_ROS00030.smil#a_000741">Visualizing the Graph: rqt_graph</a>
                  </li>
                </list>
              </div>
              <h1 id="h1_000550" smilref="Programming_Robots_with_ROS00030.smil#h1_000550">H</h1>
              <div data-type="indexdiv" id="div_000058">
                <list type="ul" id="list_000067">
                  <li data-type="index-term" id="li_000332">
                    <span class="text" id="span_009441" smilref="Programming_Robots_with_ROS00030.smil#span_009441">hand, Chess-bot</span>
                    <span class="text" id="span_009442" smilref="Programming_Robots_with_ROS00030.smil#span_009442">,</span>
                    <a data-type="index:locator" href="#ch11-ix_11-chessbot-asciidoc12" external="false" id="a_000742" smilref="Programming_Robots_with_ROS00030.smil#a_000742">Operating the Hand</a>
                    <span class="text" id="span_009443" smilref="Programming_Robots_with_ROS00030.smil#span_009443">-</span>
                    <a data-type="index:locator" href="#ch11-idp27623264" external="false" id="a_000743" smilref="Programming_Robots_with_ROS00030.smil#a_000743">Operating the Hand</a>
                  </li>
                  <li id="li_000333">
                    <span data-type="index-term" id="span_009444" smilref="Programming_Robots_with_ROS00030.smil#span_009444">hardware driver</span>
                    <list type="ul" id="list_000068">
                      <li data-type="index-term" id="li_000334">
                        <span class="text" id="span_009445" smilref="Programming_Robots_with_ROS00030.smil#span_009445">for CougarBot</span>
                        <span class="text" id="span_009446" smilref="Programming_Robots_with_ROS00030.smil#span_009446">,</span>
                        <a data-type="index:locator" href="#ch18-idp41255792" external="false" id="a_000744" smilref="Programming_Robots_with_ROS00030.smil#a_000744">Hardware Driver</a>
                      </li>
                      <li data-type="index-term" id="li_000335">
                        <span class="text" id="span_009447" smilref="Programming_Robots_with_ROS00030.smil#span_009447">for TortoiseBot</span>
                        <span class="text" id="span_009448" smilref="Programming_Robots_with_ROS00030.smil#span_009448">,</span>
                        <a data-type="index:locator" href="#ch16-idp39239984" external="false" id="a_000745" smilref="Programming_Robots_with_ROS00030.smil#a_000745">Hardware Driver</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000336">
                    <span class="text" id="span_009449" smilref="Programming_Robots_with_ROS00030.smil#span_009449">Header</span>
                    <span class="text" id="span_009450" smilref="Programming_Robots_with_ROS00030.smil#span_009450">,</span>
                    <a data-type="index:locator" href="#ch15-idp37239472" external="false" id="a_000746" smilref="Programming_Robots_with_ROS00030.smil#a_000746">Design 1: Periodic Measurements over a Topic</a>
                    <span class="text" id="span_009451" smilref="Programming_Robots_with_ROS00030.smil#span_009451">,</span>
                    <a data-type="index:locator" href="#ch16-idp39221744" external="false" id="a_000747" smilref="Programming_Robots_with_ROS00030.smil#a_000747">ROS Message Interface</a>
                  </li>
                  <li data-type="index-term" id="li_000337">
                    <span class="text" id="span_009452" smilref="Programming_Robots_with_ROS00030.smil#span_009452">history of ROS</span>
                    <span class="text" id="span_009453" smilref="Programming_Robots_with_ROS00030.smil#span_009453">,</span>
                    <a data-type="index:locator" href="#ch01-idp25184" external="false" id="a_000748" smilref="Programming_Robots_with_ROS00030.smil#a_000748">Brief History</a>
                  </li>
                  <li data-type="index-term" id="li_000338">
                    <span class="text" id="span_009454" smilref="Programming_Robots_with_ROS00030.smil#span_009454">holonomic platforms</span>
                    <span class="text" id="span_009455" smilref="Programming_Robots_with_ROS00030.smil#span_009455">,</span>
                    <a data-type="index:locator" href="#ch06-idp21674688" external="false" id="a_000749" smilref="Programming_Robots_with_ROS00030.smil#a_000749">Actuation: Mobile Platform</a>
                  </li>
                  <li data-type="index-term" id="li_000339">
                    <span class="text" id="span_009456" smilref="Programming_Robots_with_ROS00030.smil#span_009456">HSV (hue, saturation, value) images</span>
                    <span class="text" id="span_009457" smilref="Programming_Robots_with_ROS00030.smil#span_009457">,</span>
                    <a data-type="index:locator" href="#ch12-ix_12-followbot-asciidoc8" external="false" id="a_000750" smilref="Programming_Robots_with_ROS00030.smil#a_000750">Detecting the Line</a>
                    <span class="text" id="span_009458" smilref="Programming_Robots_with_ROS00030.smil#span_009458">-</span>
                    <a data-type="index:locator" href="#ch12-idp29795408" external="false" id="a_000751" smilref="Programming_Robots_with_ROS00030.smil#a_000751">Detecting the Line</a>
                  </li>
                </list>
              </div>
              <h1 id="h1_000551" smilref="Programming_Robots_with_ROS00030.smil#h1_000551">I</h1>
              <div data-type="indexdiv" id="div_000059">
                <list type="ul" id="list_000069">
                  <li id="li_000340">
                    <span data-type="index-term" id="span_009459" smilref="Programming_Robots_with_ROS00030.smil#span_009459">images</span>
                    <list type="ul" id="list_000070">
                      <li data-type="index-term" id="li_000341">
                        <span class="text" id="span_009460" smilref="Programming_Robots_with_ROS00030.smil#span_009460">acquiring for follow-bot</span>
                        <span class="text" id="span_009461" smilref="Programming_Robots_with_ROS00030.smil#span_009461">,</span>
                        <a data-type="index:locator" href="#ch12-ix_12-followbot-asciidoc2" external="false" id="a_000752" smilref="Programming_Robots_with_ROS00030.smil#a_000752">Acquiring Images</a>
                        <span class="text" id="span_009462" smilref="Programming_Robots_with_ROS00030.smil#span_009462">-</span>
                        <a data-type="index:locator" href="#ch12-idp29373904" external="false" id="a_000753" smilref="Programming_Robots_with_ROS00030.smil#a_000753">Acquiring Images</a>
                      </li>
                      <li data-type="index-term" id="li_000342">
                        <span class="text" id="span_009463" smilref="Programming_Robots_with_ROS00030.smil#span_009463">maps vs.</span>
                        <span class="text" id="span_009464" smilref="Programming_Robots_with_ROS00030.smil#span_009464">,</span>
                        <a data-type="index:locator" href="#ch09-idp25207360" external="false" id="a_000754" smilref="Programming_Robots_with_ROS00030.smil#a_000754">Maps in ROS</a>
                      </li>
                    </list>
                  </li>
                  <li id="li_000343">
                    <span data-type="index-term" id="span_009465" smilref="Programming_Robots_with_ROS00030.smil#span_009465">inertial data</span>
                    <list type="ul" id="list_000071">
                      <li data-type="index-term" id="li_000344">
                        <span class="text" id="span_009466" smilref="Programming_Robots_with_ROS00030.smil#span_009466">debugging in Gazebo</span>
                        <span class="text" id="span_009467" smilref="Programming_Robots_with_ROS00030.smil#span_009467">,</span>
                        <a data-type="index:locator" href="#ch16-idp39013296" external="false" id="a_000755" smilref="Programming_Robots_with_ROS00030.smil#a_000755">Simulation in Gazebo</a>
                      </li>
                      <li data-type="index-term" id="li_000345">
                        <span class="text" id="span_009468" smilref="Programming_Robots_with_ROS00030.smil#span_009468">for TortoiseBot simulation</span>
                        <span class="text" id="span_009469" smilref="Programming_Robots_with_ROS00030.smil#span_009469">,</span>
                        <a data-type="index:locator" href="#ch16-idp39606400" external="false" id="a_000756" smilref="Programming_Robots_with_ROS00030.smil#a_000756">Simulation in Gazebo</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000346">
                    <span class="text" id="span_009470" smilref="Programming_Robots_with_ROS00030.smil#span_009470">installation, ROS</span>
                    <span class="text" id="span_009471" smilref="Programming_Robots_with_ROS00030.smil#span_009471">,</span>
                    <a data-type="index:locator" href="#ch01-idp92720" external="false" id="a_000757" smilref="Programming_Robots_with_ROS00030.smil#a_000757">Installation</a>
                  </li>
                  <li data-type="index-term" id="li_000347">
                    <span class="text" id="span_009472" smilref="Programming_Robots_with_ROS00030.smil#span_009472">interprocess communication (IPC)</span>
                    <span class="text" id="span_009473" smilref="Programming_Robots_with_ROS00030.smil#span_009473">,</span>
                    <a data-type="index:locator" href="#ch01-idp211088" external="false" id="a_000758" smilref="Programming_Robots_with_ROS00030.smil#a_000758">Philosophy</a>
                  </li>
                  <li data-type="index-term" id="li_000348">
                    <span class="text" id="span_009474" smilref="Programming_Robots_with_ROS00030.smil#span_009474">intrinsic distortion</span>
                    <span class="text" id="span_009475" smilref="Programming_Robots_with_ROS00030.smil#span_009475">,</span>
                    <a data-type="index:locator" href="#ch06-idp21776576" external="false" id="a_000759" smilref="Programming_Robots_with_ROS00030.smil#a_000759">Visual cameras</a>
                  </li>
                  <li data-type="index-term" id="li_000349">
                    <span class="text" id="span_009476" smilref="Programming_Robots_with_ROS00030.smil#span_009476">introspection, tools for</span>
                    <span class="text" id="span_009477" smilref="Programming_Robots_with_ROS00030.smil#span_009477">,</span>
                    <a data-type="index:locator" href="#ch20-ix_20-tools-asciidoc8" external="false" id="a_000760" smilref="Programming_Robots_with_ROS00030.smil#a_000760">Introspection: rosnode, rostopic, rosmsg, rosservice, and rossrv</a>
                    <span class="text" id="span_009478" smilref="Programming_Robots_with_ROS00030.smil#span_009478">-</span>
                    <a data-type="index:locator" href="#ch20-idp44750384" external="false" id="a_000761" smilref="Programming_Robots_with_ROS00030.smil#a_000761">Introspection: rosnode, rostopic, rosmsg, rosservice, and rossrv</a>
                  </li>
                  <li data-type="index-term" id="li_000350">
                    <span class="text" id="span_009479" smilref="Programming_Robots_with_ROS00030.smil#span_009479">inverse kinematics</span>
                    <span class="text" id="span_009480" smilref="Programming_Robots_with_ROS00030.smil#span_009480">,</span>
                    <a data-type="index:locator" href="#ch11-ix_11-chessbot-asciidoc3" external="false" id="a_000762" smilref="Programming_Robots_with_ROS00030.smil#a_000762">Inverse Kinematics</a>
                  </li>
                </list>
              </div>
              <h1 id="h1_000552" smilref="Programming_Robots_with_ROS00030.smil#h1_000552">J</h1>
              <div data-type="indexdiv" id="div_000060">
                <list type="ul" id="list_000072">
                  <li data-type="index-term" id="li_000351">
                    <span class="text" id="span_009481" smilref="Programming_Robots_with_ROS00030.smil#span_009481">joint encoders</span>
                    <span class="text" id="span_009482" smilref="Programming_Robots_with_ROS00030.smil#span_009482">,</span>
                    <a data-type="index:locator" href="#ch11-idp26411248" external="false" id="a_000763" smilref="Programming_Robots_with_ROS00030.smil#a_000763">Joint Space</a>
                  </li>
                  <li data-type="index-term" id="li_000352">
                    <span class="text" id="span_009483" smilref="Programming_Robots_with_ROS00030.smil#span_009483">joint space</span>
                    <span class="text" id="span_009484" smilref="Programming_Robots_with_ROS00030.smil#span_009484">,</span>
                    <a data-type="index:locator" href="#ch11-ix_11-chessbot-asciidoc1" external="false" id="a_000764" smilref="Programming_Robots_with_ROS00030.smil#a_000764">Joint Space</a>
                    <span class="text" id="span_009485" smilref="Programming_Robots_with_ROS00030.smil#span_009485">-</span>
                    <a data-type="index:locator" href="#ch11-idp26339808" external="false" id="a_000765" smilref="Programming_Robots_with_ROS00030.smil#a_000765">Joint Space</a>
                  </li>
                  <li data-type="index-term" id="li_000353">
                    <span class="text" id="span_009486" smilref="Programming_Robots_with_ROS00030.smil#span_009486">joint state</span>
                    <span class="text" id="span_009487" smilref="Programming_Robots_with_ROS00030.smil#span_009487">,</span>
                    <a data-type="index:locator" href="#ch11-idp26033696" external="false" id="a_000766" smilref="Programming_Robots_with_ROS00030.smil#a_000766">Joint Space</a>
                  </li>
                  <li data-type="index-term" id="li_000354">
                    <span class="text" id="span_009488" smilref="Programming_Robots_with_ROS00030.smil#span_009488">joints</span>
                    <span class="text" id="span_009489" smilref="Programming_Robots_with_ROS00030.smil#span_009489">,</span>
                    <a data-type="index:locator" href="#ch06-idp21730400" external="false" id="a_000767" smilref="Programming_Robots_with_ROS00030.smil#a_000767">Actuation: Manipulator Arm</a>
                    <list type="ul" id="list_000073">
                      <li data-type="index-term" id="li_000355">
                        <span class="text" id="span_009490" smilref="Programming_Robots_with_ROS00030.smil#span_009490">and manipulators</span>
                        <span class="text" id="span_009491" smilref="Programming_Robots_with_ROS00030.smil#span_009491">,</span>
                        <a data-type="index:locator" href="#ch11-idp25975776" external="false" id="a_000768" smilref="Programming_Robots_with_ROS00030.smil#a_000768">Joints, Links, and Kinematic Chains</a>
                      </li>
                      <li data-type="index-term" id="li_000356">
                        <span class="text" id="span_009492" smilref="Programming_Robots_with_ROS00030.smil#span_009492">in URDF</span>
                        <span class="text" id="span_009493" smilref="Programming_Robots_with_ROS00030.smil#span_009493">,</span>
                        <a data-type="index:locator" href="#ch16-idp40082256" external="false" id="a_000769" smilref="Programming_Robots_with_ROS00030.smil#a_000769">Modeling the Robot: URDF</a>
                      </li>
                      <li data-type="index-term" id="li_000357">
                        <span class="text" id="span_009494" smilref="Programming_Robots_with_ROS00030.smil#span_009494">types supported by URDF</span>
                        <span class="text" id="span_009495" smilref="Programming_Robots_with_ROS00030.smil#span_009495">,</span>
                        <a data-type="index:locator" href="#ch16-idp39499040" external="false" id="a_000770" smilref="Programming_Robots_with_ROS00030.smil#a_000770">Modeling the Robot: URDF</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000358">
                    <span class="text" id="span_009496" smilref="Programming_Robots_with_ROS00030.smil#span_009496">JointState message</span>
                    <span class="text" id="span_009497" smilref="Programming_Robots_with_ROS00030.smil#span_009497">,</span>
                    <a data-type="index:locator" href="#ch06-idp21829136" external="false" id="a_000771" smilref="Programming_Robots_with_ROS00030.smil#a_000771">Shaft encoders</a>
                  </li>
                  <li data-type="index-term" id="li_000359">
                    <span class="text" id="span_009498" smilref="Programming_Robots_with_ROS00030.smil#span_009498">joint_state_publisher</span>
                    <span class="text" id="span_009499" smilref="Programming_Robots_with_ROS00030.smil#span_009499">,</span>
                    <a data-type="index:locator" href="#ch16-ix_16-rossify_robots-asciidoc9" external="false" id="a_000772" smilref="Programming_Robots_with_ROS00030.smil#a_000772">Modeling the Robot: URDF</a>
                    <span class="text" id="span_009500" smilref="Programming_Robots_with_ROS00030.smil#span_009500">-</span>
                    <a data-type="index:locator" href="#ch16-idp39975248" external="false" id="a_000773" smilref="Programming_Robots_with_ROS00030.smil#a_000773">Modeling the Robot: URDF</a>
                  </li>
                </list>
              </div>
              <h1 id="h1_000553" smilref="Programming_Robots_with_ROS00030.smil#h1_000553">K</h1>
              <div data-type="indexdiv" id="div_000061">
                <list type="ul" id="list_000074">
                  <li data-type="index-term" id="li_000360">
                    <span class="text" id="span_009501" smilref="Programming_Robots_with_ROS00030.smil#span_009501">keyboard, as teleop-bot driver</span>
                    <span class="text" id="span_009502" smilref="Programming_Robots_with_ROS00030.smil#span_009502">,</span>
                    <a data-type="index:locator" href="#ch08-ix_8-teleop_bot-asciidoc1" external="false" id="a_000774" smilref="Programming_Robots_with_ROS00030.smil#a_000774">Keyboard Driver</a>
                    <span class="text" id="span_009503" smilref="Programming_Robots_with_ROS00030.smil#span_009503">-</span>
                    <a data-type="index:locator" href="#ch08-idp23179248" external="false" id="a_000775" smilref="Programming_Robots_with_ROS00030.smil#a_000775">Keyboard Driver</a>
                  </li>
                  <li data-type="index-term" id="li_000361">
                    <span class="text" id="span_009504" smilref="Programming_Robots_with_ROS00030.smil#span_009504">Kinect camera</span>
                    <span class="text" id="span_009505" smilref="Programming_Robots_with_ROS00030.smil#span_009505">,</span>
                    <a data-type="index:locator" href="#ch06-idp21787600" external="false" id="a_000776" smilref="Programming_Robots_with_ROS00030.smil#a_000776">Depth cameras</a>
                    <span class="text" id="span_009506" smilref="Programming_Robots_with_ROS00030.smil#span_009506">,</span>
                    <a data-type="index:locator" href="#ch07-idp22258688" external="false" id="a_000777" smilref="Programming_Robots_with_ROS00030.smil#a_000777">Reading Sensor Data</a>
                    <span class="text" id="span_009507" smilref="Programming_Robots_with_ROS00030.smil#span_009507">,</span>
                    <a data-type="index:locator" href="#ch08-idp25166592" external="false" id="a_000778" smilref="Programming_Robots_with_ROS00030.smil#a_000778">rviz</a>
                  </li>
                  <li data-type="index-term" id="li_000362">
                    <span class="text" id="span_009508" smilref="Programming_Robots_with_ROS00030.smil#span_009508">kinematic chains</span>
                    <span class="text" id="span_009509" smilref="Programming_Robots_with_ROS00030.smil#span_009509">,</span>
                    <a data-type="index:locator" href="#ch11-idp26380384" external="false" id="a_000779" smilref="Programming_Robots_with_ROS00030.smil#a_000779">Joints, Links, and Kinematic Chains</a>
                  </li>
                  <li id="li_000363">
                    <span data-type="index-term" id="span_009510" smilref="Programming_Robots_with_ROS00030.smil#span_009510">kinematics</span>
                    <list type="ul" id="list_000075">
                      <li data-type="index-term" id="li_000364">
                        <span class="text" id="span_009511" smilref="Programming_Robots_with_ROS00030.smil#span_009511">forward</span>
                        <span class="text" id="span_009512" smilref="Programming_Robots_with_ROS00030.smil#span_009512">,</span>
                        <a data-type="index:locator" href="#ch11-ix_11-chessbot-asciidoc3" external="false" id="a_000780" smilref="Programming_Robots_with_ROS00030.smil#a_000780">Inverse Kinematics</a>
                        <span class="text" id="span_009513" smilref="Programming_Robots_with_ROS00030.smil#span_009513">-</span>
                        <a data-type="index:locator" href="#ch11-idp26389744" external="false" id="a_000781" smilref="Programming_Robots_with_ROS00030.smil#a_000781">Inverse Kinematics</a>
                      </li>
                      <li data-type="index-term" id="li_000365">
                        <span class="text" id="span_009514" smilref="Programming_Robots_with_ROS00030.smil#span_009514">inverse</span>
                        <span class="text" id="span_009515" smilref="Programming_Robots_with_ROS00030.smil#span_009515">,</span>
                        <a data-type="index:locator" href="#ch11-ix_11-chessbot-asciidoc3" external="false" id="a_000782" smilref="Programming_Robots_with_ROS00030.smil#a_000782">Inverse Kinematics</a>
                      </li>
                    </list>
                  </li>
                </list>
              </div>
              <h1 id="h1_000554" smilref="Programming_Robots_with_ROS00030.smil#h1_000554">L</h1>
              <div data-type="indexdiv" id="div_000062">
                <list type="ul" id="list_000076">
                  <li data-type="index-term" id="li_000366">
                    <span class="text" id="span_009516" smilref="Programming_Robots_with_ROS00030.smil#span_009516">laser scanners/sensors</span>
                    <span class="text" id="span_009517" smilref="Programming_Robots_with_ROS00030.smil#span_009517">,</span>
                    <a data-type="index:locator" href="#ch06-idp21803760" external="false" id="a_000783" smilref="Programming_Robots_with_ROS00030.smil#a_000783">Laser scanners</a>
                    <span class="text" id="span_009518" smilref="Programming_Robots_with_ROS00030.smil#span_009518">,</span>
                    <a data-type="index:locator" href="#ch17-ix_17-rossify_robots2-asciidoc7" external="false" id="a_000784" smilref="Programming_Robots_with_ROS00030.smil#a_000784">Adding a Laser Sensor</a>
                    <span class="text" id="span_009519" smilref="Programming_Robots_with_ROS00030.smil#span_009519">-</span>
                    <a data-type="index:locator" href="#ch17-idp40992448" external="false" id="a_000785" smilref="Programming_Robots_with_ROS00030.smil#a_000785">Adding a Laser Sensor</a>
                  </li>
                  <li data-type="index-term" id="li_000367">
                    <span class="text" id="span_009520" smilref="Programming_Robots_with_ROS00030.smil#span_009520">latched topics</span>
                    <span class="text" id="span_009521" smilref="Programming_Robots_with_ROS00030.smil#span_009521">,</span>
                    <a data-type="index:locator" href="#ch03-idp18019360" external="false" id="a_000786" smilref="Programming_Robots_with_ROS00030.smil#a_000786">Latched Topics</a>
                  </li>
                  <li data-type="index-term" id="li_000368">
                    <span class="text" id="span_009522" smilref="Programming_Robots_with_ROS00030.smil#span_009522">launch files</span>
                    <span class="text" id="span_009523" smilref="Programming_Robots_with_ROS00030.smil#span_009523">,</span>
                    <a data-type="index:locator" href="#ch02-idp17011696" external="false" id="a_000787" smilref="Programming_Robots_with_ROS00030.smil#a_000787">roslaunch</a>
                  </li>
                  <li id="li_000369">
                    <span data-type="index-term" id="span_009524" smilref="Programming_Robots_with_ROS00030.smil#span_009524">libraries</span>
                    <list type="ul" id="list_000077">
                      <li data-type="index-term" id="li_000370">
                        <span class="text" id="span_009525" smilref="Programming_Robots_with_ROS00030.smil#span_009525">adding to robot</span>
                        <span class="text" id="span_009526" smilref="Programming_Robots_with_ROS00030.smil#span_009526">,</span>
                        <a data-type="index:locator" href="#ch19-ix_19-libraries-asciidoc0" external="false" id="a_000788" smilref="Programming_Robots_with_ROS00030.smil#a_000788">Adding a Software Library</a>
                        <span class="text" id="span_009527" smilref="Programming_Robots_with_ROS00030.smil#span_009527">-</span>
                        <a data-type="index:locator" href="#ch19-idp43704000" external="false" id="a_000789" smilref="Programming_Robots_with_ROS00030.smil#a_000789">Summary</a>
                      </li>
                      <li data-type="index-term" id="li_000371">
                        <span class="text" id="span_009528" smilref="Programming_Robots_with_ROS00030.smil#span_009528">client</span>
                        <span class="text" id="span_009529" smilref="Programming_Robots_with_ROS00030.smil#span_009529">,</span>
                        <a data-type="index:locator" href="#ch01-idp202752" external="false" id="a_000790" smilref="Programming_Robots_with_ROS00030.smil#a_000790">Philosophy</a>
                      </li>
                      <li data-gentext="see" id="li_000372">
                        <span data-type="index-term" id="span_009530" smilref="Programming_Robots_with_ROS00030.smil#span_009530">pyttsx speech library</span>
                        <span class="text" id="span_009531" smilref="Programming_Robots_with_ROS00030.smil#span_009531">(</span>
                        <span class="text" id="span_009532" smilref="Programming_Robots_with_ROS00030.smil#span_009532">see</span>
                        <span class="text" id="span_009533" smilref="Programming_Robots_with_ROS00030.smil#span_009533">pyttsx)</span>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000373">
                    <span class="text" id="span_009534" smilref="Programming_Robots_with_ROS00030.smil#span_009534">limit switches</span>
                    <span class="text" id="span_009535" smilref="Programming_Robots_with_ROS00030.smil#span_009535">,</span>
                    <a data-type="index:locator" href="#ch06-idp21751152" external="false" id="a_000791" smilref="Programming_Robots_with_ROS00030.smil#a_000791">Sensors</a>
                  </li>
                  <li data-type="index-term" id="li_000374">
                    <span class="text" id="span_009536" smilref="Programming_Robots_with_ROS00030.smil#span_009536">linear joints</span>
                    <span class="text" id="span_009537" smilref="Programming_Robots_with_ROS00030.smil#span_009537">,</span>
                    <a data-type="index:locator" href="#ch06-idp21733296" external="false" id="a_000792" smilref="Programming_Robots_with_ROS00030.smil#a_000792">Actuation: Manipulator Arm</a>
                    <span class="text" id="span_009538" smilref="Programming_Robots_with_ROS00030.smil#span_009538">,</span>
                    <a data-type="index:locator" href="#ch11-idp25905424" external="false" id="a_000793" smilref="Programming_Robots_with_ROS00030.smil#a_000793">Joints, Links, and Kinematic Chains</a>
                  </li>
                  <li id="li_000375">
                    <span data-type="index-term" id="span_009539" smilref="Programming_Robots_with_ROS00030.smil#span_009539">lines</span>
                    <list type="ul" id="list_000078">
                      <li data-type="index-term" id="li_000376">
                        <span class="text" id="span_009540" smilref="Programming_Robots_with_ROS00030.smil#span_009540">detecting</span>
                        <span class="text" id="span_009541" smilref="Programming_Robots_with_ROS00030.smil#span_009541">,</span>
                        <a data-type="index:locator" href="#ch12-ix_12-followbot-asciidoc3" external="false" id="a_000794" smilref="Programming_Robots_with_ROS00030.smil#a_000794">Detecting the Line</a>
                        <span class="text" id="span_009542" smilref="Programming_Robots_with_ROS00030.smil#span_009542">-</span>
                        <a data-type="index:locator" href="#ch12-idp30167936" external="false" id="a_000795" smilref="Programming_Robots_with_ROS00030.smil#a_000795">Detecting the Line</a>
                      </li>
                      <li data-type="index-term" id="li_000377">
                        <span class="text" id="span_009543" smilref="Programming_Robots_with_ROS00030.smil#span_009543">following</span>
                        <span class="text" id="span_009544" smilref="Programming_Robots_with_ROS00030.smil#span_009544">,</span>
                        <a data-type="index:locator" href="#ch12-ix_12-followbot-asciidoc9" external="false" id="a_000796" smilref="Programming_Robots_with_ROS00030.smil#a_000796">Following the Line</a>
                        <span class="text" id="span_009545" smilref="Programming_Robots_with_ROS00030.smil#span_009545">-</span>
                        <a data-type="index:locator" href="#ch12-idp30775248" external="false" id="a_000797" smilref="Programming_Robots_with_ROS00030.smil#a_000797">Summary</a>
                      </li>
                    </list>
                  </li>
                  <li id="li_000378">
                    <span data-type="index-term" id="span_009546" smilref="Programming_Robots_with_ROS00030.smil#span_009546">links</span>
                    <list type="ul" id="list_000079">
                      <li data-type="index-term" id="li_000379">
                        <span class="text" id="span_009547" smilref="Programming_Robots_with_ROS00030.smil#span_009547">and manipulators</span>
                        <span class="text" id="span_009548" smilref="Programming_Robots_with_ROS00030.smil#span_009548">,</span>
                        <a data-type="index:locator" href="#ch11-idp26382848" external="false" id="a_000798" smilref="Programming_Robots_with_ROS00030.smil#a_000798">Joints, Links, and Kinematic Chains</a>
                      </li>
                      <li data-type="index-term" id="li_000380">
                        <span class="text" id="span_009549" smilref="Programming_Robots_with_ROS00030.smil#span_009549">in URDF</span>
                        <span class="text" id="span_009550" smilref="Programming_Robots_with_ROS00030.smil#span_009550">,</span>
                        <a data-type="index:locator" href="#ch16-idp40079936" external="false" id="a_000799" smilref="Programming_Robots_with_ROS00030.smil#a_000799">Modeling the Robot: URDF</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000381">
                    <span class="text" id="span_009551" smilref="Programming_Robots_with_ROS00030.smil#span_009551">Linux</span>
                    <span class="text" id="span_009552" smilref="Programming_Robots_with_ROS00030.smil#span_009552">,</span>
                    <a data-type="index:locator" href="#preface01-idm100160" external="false" id="a_000800" smilref="Programming_Robots_with_ROS00030.smil#a_000800">Prerequisites</a>
                    <span class="text" id="span_009553" smilref="Programming_Robots_with_ROS00030.smil#span_009553">,</span>
                    <a data-type="index:locator" href="#ch01-idp92720" external="false" id="a_000801" smilref="Programming_Robots_with_ROS00030.smil#a_000801">Installation</a>
                    <span class="text" id="span_009554" smilref="Programming_Robots_with_ROS00030.smil#span_009554">,</span>
                    <a data-type="index:locator" href="#ch03-idp17856560" external="false" id="a_000802" smilref="Programming_Robots_with_ROS00030.smil#a_000802">Checking That Everything Works as Expected</a>
                  </li>
                  <li data-type="index-term" id="li_000382">
                    <span class="text" id="span_009555" smilref="Programming_Robots_with_ROS00030.smil#span_009555">local costmaps</span>
                    <span class="text" id="span_009556" smilref="Programming_Robots_with_ROS00030.smil#span_009556">,</span>
                    <a data-type="index:locator" href="#ch10-idp25682368" external="false" id="a_000803" smilref="Programming_Robots_with_ROS00030.smil#a_000803">Seeing What's Going On</a>
                    <span class="text" id="span_009557" smilref="Programming_Robots_with_ROS00030.smil#span_009557">,</span>
                    <a data-type="index:locator" href="#ch17-ix_17-rossify_robots2-asciidoc15a" external="false" id="a_000804" smilref="Programming_Robots_with_ROS00030.smil#a_000804">Configuring the Navigation Stack</a>
                    <span class="text" id="span_009558" smilref="Programming_Robots_with_ROS00030.smil#span_009558">-</span>
                    <a data-type="index:locator" href="#ch17-idp41096384" external="false" id="a_000805" smilref="Programming_Robots_with_ROS00030.smil#a_000805">Configuring the Navigation Stack</a>
                  </li>
                  <li data-type="index-term" id="li_000383">
                    <span class="text" id="span_009559" smilref="Programming_Robots_with_ROS00030.smil#span_009559">local planner</span>
                    <span class="text" id="span_009560" smilref="Programming_Robots_with_ROS00030.smil#span_009560">,</span>
                    <a data-type="index:locator" href="#ch10-idp25644320" external="false" id="a_000806" smilref="Programming_Robots_with_ROS00030.smil#a_000806">The ROS Navigation Stack</a>
                    <span class="text" id="span_009561" smilref="Programming_Robots_with_ROS00030.smil#span_009561">,</span>
                    <a data-type="index:locator" href="#ch10-idp25682368" external="false" id="a_000807" smilref="Programming_Robots_with_ROS00030.smil#a_000807">Seeing What's Going On</a>
                  </li>
                  <li id="li_000384">
                    <span data-type="index-term" id="span_009562" smilref="Programming_Robots_with_ROS00030.smil#span_009562">localization</span>
                    <list type="ul" id="list_000080">
                      <li data-type="index-term" id="li_000385">
                        <span class="text" id="span_009563" smilref="Programming_Robots_with_ROS00030.smil#span_009563">and topics</span>
                        <span class="text" id="span_009564" smilref="Programming_Robots_with_ROS00030.smil#span_009564">,</span>
                        <a data-type="index:locator" href="#ch10-idp25604768" external="false" id="a_000808" smilref="Programming_Robots_with_ROS00030.smil#a_000808">What's Going on Behind the Scenes</a>
                      </li>
                      <li data-type="index-term" id="li_000386">
                        <span class="text" id="span_009565" smilref="Programming_Robots_with_ROS00030.smil#span_009565">candidate poses</span>
                        <span class="text" id="span_009566" smilref="Programming_Robots_with_ROS00030.smil#span_009566">,</span>
                        <a data-type="index:locator" href="#ch10-idp25571888" external="false" id="a_000809" smilref="Programming_Robots_with_ROS00030.smil#a_000809">Localizing the Robot in a Map</a>
                      </li>
                      <li data-type="index-term" id="li_000387">
                        <span class="text" id="span_009567" smilref="Programming_Robots_with_ROS00030.smil#span_009567">initial</span>
                        <span class="text" id="span_009568" smilref="Programming_Robots_with_ROS00030.smil#span_009568">,</span>
                        <a data-type="index:locator" href="#ch10-idp25594288" external="false" id="a_000810" smilref="Programming_Robots_with_ROS00030.smil#a_000810">Getting a Good Initial Localization</a>
                      </li>
                      <li data-type="index-term" id="li_000388">
                        <span class="text" id="span_009569" smilref="Programming_Robots_with_ROS00030.smil#span_009569">maps and</span>
                        <span class="text" id="span_009570" smilref="Programming_Robots_with_ROS00030.smil#span_009570">,</span>
                        <a data-type="index:locator" href="#ch09-idp24997888" external="false" id="a_000811" smilref="Programming_Robots_with_ROS00030.smil#a_000811">Starting a Map Server and Looking at a Map</a>
                      </li>
                      <li data-type="index-term" id="li_000389">
                        <span class="text" id="span_009571" smilref="Programming_Robots_with_ROS00030.smil#span_009571">of robot in a map</span>
                        <span class="text" id="span_009572" smilref="Programming_Robots_with_ROS00030.smil#span_009572">,</span>
                        <a data-type="index:locator" href="#ch10-ix_10-navigation-asciidoc2" external="false" id="a_000812" smilref="Programming_Robots_with_ROS00030.smil#a_000812">Localizing the Robot in a Map</a>
                        <span class="text" id="span_009573" smilref="Programming_Robots_with_ROS00030.smil#span_009573">-</span>
                        <a data-type="index:locator" href="#ch10-idp25626336" external="false" id="a_000813" smilref="Programming_Robots_with_ROS00030.smil#a_000813">Tips for Setting a Better Initial Pose</a>
                      </li>
                      <li data-type="index-term" id="li_000390">
                        <span class="text" id="span_009574" smilref="Programming_Robots_with_ROS00030.smil#span_009574">with rviz</span>
                        <span class="text" id="span_009575" smilref="Programming_Robots_with_ROS00030.smil#span_009575">,</span>
                        <a data-type="index:locator" href="#ch17-ix_17-rossify_robots2-asciidoc18" external="false" id="a_000814" smilref="Programming_Robots_with_ROS00030.smil#a_000814">Using rviz to Localize and Command a Navigating Robot</a>
                        <span class="text" id="span_009576" smilref="Programming_Robots_with_ROS00030.smil#span_009576">-</span>
                        <a data-type="index:locator" href="#ch17-idp41199680" external="false" id="a_000815" smilref="Programming_Robots_with_ROS00030.smil#a_000815">Using rviz to Localize and Command a Navigating Robot</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000391">
                    <span class="text" id="span_009577" smilref="Programming_Robots_with_ROS00030.smil#span_009577">locomotion, mobile platform for</span>
                    <span class="text" id="span_009578" smilref="Programming_Robots_with_ROS00030.smil#span_009578">,</span>
                    <a data-type="index:locator" href="#ch06-ix_6-robots-asciidoc1" external="false" id="a_000816" smilref="Programming_Robots_with_ROS00030.smil#a_000816">Actuation: Mobile Platform</a>
                    <span class="text" id="span_009579" smilref="Programming_Robots_with_ROS00030.smil#span_009579">-</span>
                    <a data-type="index:locator" href="#ch06-idp21719824" external="false" id="a_000817" smilref="Programming_Robots_with_ROS00030.smil#a_000817">Actuation: Mobile Platform</a>
                  </li>
                  <li id="li_000392">
                    <span data-type="index-term" id="span_009580" smilref="Programming_Robots_with_ROS00030.smil#span_009580">log messages</span>
                    <list type="ul" id="list_000081">
                      <li data-type="index-term" id="li_000393">
                        <span class="text" id="span_009581" smilref="Programming_Robots_with_ROS00030.smil#span_009581">and logger levels</span>
                        <span class="text" id="span_009582" smilref="Programming_Robots_with_ROS00030.smil#span_009582">,</span>
                        <a data-type="index:locator" href="#ch21-ix_21-debugging-asciidoc7" external="false" id="a_000818" smilref="Programming_Robots_with_ROS00030.smil#a_000818">Logger Levels</a>
                        <span class="text" id="span_009583" smilref="Programming_Robots_with_ROS00030.smil#span_009583">-</span>
                        <a data-type="index:locator" href="#ch21-idp45045296" external="false" id="a_000819" smilref="Programming_Robots_with_ROS00030.smil#a_000819">Logger Levels</a>
                      </li>
                      <li data-type="index-term" id="li_000394">
                        <span class="text" id="span_009584" smilref="Programming_Robots_with_ROS00030.smil#span_009584">for debugging</span>
                        <span class="text" id="span_009585" smilref="Programming_Robots_with_ROS00030.smil#span_009585">,</span>
                        <a data-type="index:locator" href="#ch21-ix_21-debugging-asciidoc1" external="false" id="a_000820" smilref="Programming_Robots_with_ROS00030.smil#a_000820">Log Messages: /rosout and rqt_console</a>
                        <span class="text" id="span_009586" smilref="Programming_Robots_with_ROS00030.smil#span_009586">-</span>
                        <a data-type="index:locator" href="#ch21-idp45086912" external="false" id="a_000821" smilref="Programming_Robots_with_ROS00030.smil#a_000821">/rosout Versus /rosout_agg</a>
                      </li>
                      <li data-type="index-term" id="li_000395">
                        <span class="text" id="span_009587" smilref="Programming_Robots_with_ROS00030.smil#span_009587">reading via rqt_console</span>
                        <span class="text" id="span_009588" smilref="Programming_Robots_with_ROS00030.smil#span_009588">,</span>
                        <a data-type="index:locator" href="#ch21-ix_21-debugging-asciidoc10" external="false" id="a_000822" smilref="Programming_Robots_with_ROS00030.smil#a_000822">Reading Log Messages: rqt_console</a>
                        <span class="text" id="span_009589" smilref="Programming_Robots_with_ROS00030.smil#span_009589">-</span>
                        <a data-type="index:locator" href="#ch21-idp45070672" external="false" id="a_000823" smilref="Programming_Robots_with_ROS00030.smil#a_000823">Reading Log Messages: rqt_console</a>
                      </li>
                      <li data-type="index-term" id="li_000396">
                        <span class="text" id="span_009590" smilref="Programming_Robots_with_ROS00030.smil#span_009590">via /rosout</span>
                        <span class="text" id="span_009591" smilref="Programming_Robots_with_ROS00030.smil#span_009591">,</span>
                        <a data-type="index:locator" href="#ch21-ix_21-debugging-asciidoc4" external="false" id="a_000824" smilref="Programming_Robots_with_ROS00030.smil#a_000824">Generating Log Messages: /rosout</a>
                        <span class="text" id="span_009592" smilref="Programming_Robots_with_ROS00030.smil#span_009592">-</span>
                        <a data-type="index:locator" href="#ch21-idp44945984" external="false" id="a_000825" smilref="Programming_Robots_with_ROS00030.smil#a_000825">Generating Log Messages: /rosout</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000397">
                    <span class="text" id="span_009593" smilref="Programming_Robots_with_ROS00030.smil#span_009593">logger levels</span>
                    <span class="text" id="span_009594" smilref="Programming_Robots_with_ROS00030.smil#span_009594">,</span>
                    <a data-type="index:locator" href="#ch21-ix_21-debugging-asciidoc8" external="false" id="a_000826" smilref="Programming_Robots_with_ROS00030.smil#a_000826">Logger Levels</a>
                    <span class="text" id="span_009595" smilref="Programming_Robots_with_ROS00030.smil#span_009595">-</span>
                    <a data-type="index:locator" href="#ch21-idp45045296" external="false" id="a_000827" smilref="Programming_Robots_with_ROS00030.smil#a_000827">Logger Levels</a>
                  </li>
                  <li data-type="index-term" id="li_000398">
                    <span class="text" id="span_009596" smilref="Programming_Robots_with_ROS00030.smil#span_009596">logger program</span>
                    <span class="text" id="span_009597" smilref="Programming_Robots_with_ROS00030.smil#span_009597">,</span>
                    <a data-type="index:locator" href="#ch02-idp16948656" external="false" id="a_000828" smilref="Programming_Robots_with_ROS00030.smil#a_000828">rosrun</a>
                  </li>
                </list>
              </div>
              <h1 id="h1_000555" smilref="Programming_Robots_with_ROS00030.smil#h1_000555">M</h1>
              <div data-type="indexdiv" id="div_000063">
                <list type="ul" id="list_000082">
                  <li data-type="index-term" id="li_000399">
                    <span class="text" id="span_009598" smilref="Programming_Robots_with_ROS00030.smil#span_009598">mailing lists</span>
                    <span class="text" id="span_009599" smilref="Programming_Robots_with_ROS00030.smil#span_009599">,</span>
                    <a data-type="index:locator" href="#ch22-idp45638528" external="false" id="a_000829" smilref="Programming_Robots_with_ROS00030.smil#a_000829">Mailing Lists and Special Interest Groups</a>
                  </li>
                  <li data-type="index-term" id="li_000400">
                    <span class="text" id="span_009600" smilref="Programming_Robots_with_ROS00030.smil#span_009600">manipulator configuration (vector)</span>
                    <span class="text" id="span_009601" smilref="Programming_Robots_with_ROS00030.smil#span_009601">,</span>
                    <a data-type="index:locator" href="#ch06-idp21824304" external="false" id="a_000830" smilref="Programming_Robots_with_ROS00030.smil#a_000830">Shaft encoders</a>
                  </li>
                  <li data-type="index-term" id="li_000401">
                    <span class="text" id="span_009602" smilref="Programming_Robots_with_ROS00030.smil#span_009602">manipulators</span>
                    <span class="text" id="span_009603" smilref="Programming_Robots_with_ROS00030.smil#span_009603">,</span>
                    <a data-type="index:locator" href="#ch06-idp21722944" external="false" id="a_000831" smilref="Programming_Robots_with_ROS00030.smil#a_000831">Actuation: Manipulator Arm</a>
                    <span class="text" id="span_009604" smilref="Programming_Robots_with_ROS00030.smil#span_009604">,</span>
                    <a data-type="index:locator" href="#ch11-ix_11-chessbot-asciidoc0" external="false" id="a_000832" smilref="Programming_Robots_with_ROS00030.smil#a_000832">Chess-bot</a>
                    <span class="text" id="span_009605" smilref="Programming_Robots_with_ROS00030.smil#span_009605">-</span>
                    <a data-type="index:locator" href="#ch11-idp28237440" external="false" id="a_000833" smilref="Programming_Robots_with_ROS00030.smil#a_000833">Summary</a>
                    <span class="text" id="span_009606" smilref="Programming_Robots_with_ROS00030.smil#span_009606">,</span>
                    <a data-type="index:locator" href="#ch18-ix_18-rossify_robots3-asciidoc0" external="false" id="a_000834" smilref="Programming_Robots_with_ROS00030.smil#a_000834">CougarBot</a>
                    <span class="text" id="span_009607" smilref="Programming_Robots_with_ROS00030.smil#span_009607">-</span>
                    <a data-type="index:locator" href="#ch18-idp42731200" external="false" id="a_000835" smilref="Programming_Robots_with_ROS00031.smil#a_000835">Summary</a>
                    <list type="ul" id="list_000083">
                      <li data-gentext="see" id="li_000402" smilref="Programming_Robots_with_ROS00031.smil#li_000402">(see also Chess-bot, CougarBot)</li>
                      <li data-type="index-term" id="li_000403">
                        <span class="text" id="span_009608" smilref="Programming_Robots_with_ROS00031.smil#span_009608">and inverse kinematics</span>
                        <span class="text" id="span_009609" smilref="Programming_Robots_with_ROS00031.smil#span_009609">,</span>
                        <a data-type="index:locator" href="#ch11-ix_11-chessbot-asciidoc3" external="false" id="a_000836" smilref="Programming_Robots_with_ROS00031.smil#a_000836">Inverse Kinematics</a>
                      </li>
                      <li data-type="index-term" id="li_000404">
                        <span class="text" id="span_009610" smilref="Programming_Robots_with_ROS00031.smil#span_009610">and joint space</span>
                        <span class="text" id="span_009611" smilref="Programming_Robots_with_ROS00031.smil#span_009611">,</span>
                        <a data-type="index:locator" href="#ch11-ix_11-chessbot-asciidoc2" external="false" id="a_000837" smilref="Programming_Robots_with_ROS00031.smil#a_000837">Joint Space</a>
                        <span class="text" id="span_009612" smilref="Programming_Robots_with_ROS00031.smil#span_009612">-</span>
                        <a data-type="index:locator" href="#ch11-idp26339808" external="false" id="a_000838" smilref="Programming_Robots_with_ROS00031.smil#a_000838">Joint Space</a>
                      </li>
                      <li data-type="index-term" id="li_000405">
                        <span class="text" id="span_009613" smilref="Programming_Robots_with_ROS00031.smil#span_009613">and joints</span>
                        <span class="text" id="span_009614" smilref="Programming_Robots_with_ROS00031.smil#span_009614">,</span>
                        <a data-type="index:locator" href="#ch11-idp25977152" external="false" id="a_000839" smilref="Programming_Robots_with_ROS00031.smil#a_000839">Joints, Links, and Kinematic Chains</a>
                      </li>
                      <li data-type="index-term" id="li_000406">
                        <span class="text" id="span_009615" smilref="Programming_Robots_with_ROS00031.smil#span_009615">and kinematic chains</span>
                        <span class="text" id="span_009616" smilref="Programming_Robots_with_ROS00031.smil#span_009616">,</span>
                        <a data-type="index:locator" href="#ch11-idp26423520" external="false" id="a_000840" smilref="Programming_Robots_with_ROS00031.smil#a_000840">Joints, Links, and Kinematic Chains</a>
                      </li>
                      <li data-type="index-term" id="li_000407">
                        <span class="text" id="span_009617" smilref="Programming_Robots_with_ROS00031.smil#span_009617">and links</span>
                        <span class="text" id="span_009618" smilref="Programming_Robots_with_ROS00031.smil#span_009618">,</span>
                        <a data-type="index:locator" href="#ch11-idp26383712" external="false" id="a_000841" smilref="Programming_Robots_with_ROS00031.smil#a_000841">Joints, Links, and Kinematic Chains</a>
                      </li>
                      <li data-type="index-term" id="li_000408">
                        <span class="text" id="span_009619" smilref="Programming_Robots_with_ROS00031.smil#span_009619">installing/running simulated R2</span>
                        <span class="text" id="span_009620" smilref="Programming_Robots_with_ROS00031.smil#span_009620">,</span>
                        <a data-type="index:locator" href="#ch11-ix_11-chessbot-asciidoc5" external="false" id="a_000842" smilref="Programming_Robots_with_ROS00031.smil#a_000842">Installing and Running a Simulated R2</a>
                        <span class="text" id="span_009621" smilref="Programming_Robots_with_ROS00031.smil#span_009621">-</span>
                        <a data-type="index:locator" href="#ch11-idp26336784" external="false" id="a_000843" smilref="Programming_Robots_with_ROS00031.smil#a_000843">Installing and Running a Simulated R2</a>
                      </li>
                      <li data-type="index-term" id="li_000409">
                        <span class="text" id="span_009622" smilref="Programming_Robots_with_ROS00031.smil#span_009622">moving R2 from the command line</span>
                        <span class="text" id="span_009623" smilref="Programming_Robots_with_ROS00031.smil#span_009623">,</span>
                        <a data-type="index:locator" href="#ch11-idp26331680" external="false" id="a_000844" smilref="Programming_Robots_with_ROS00031.smil#a_000844">Moving R2 from the Command Line</a>
                      </li>
                      <li data-type="index-term" id="li_000410">
                        <span class="text" id="span_009624" smilref="Programming_Robots_with_ROS00031.smil#span_009624">robot arm</span>
                        <span class="text" id="span_009625" smilref="Programming_Robots_with_ROS00031.smil#span_009625">,</span>
                        <a data-type="index:locator" href="#ch18-ix_18-rossify_robots3-asciidoc0" external="false" id="a_000845" smilref="Programming_Robots_with_ROS00031.smil#a_000845">CougarBot</a>
                        <span class="text" id="span_009626" smilref="Programming_Robots_with_ROS00031.smil#span_009626">-</span>
                        <a data-type="index:locator" href="#ch18-idp42731200" external="false" id="a_000846" smilref="Programming_Robots_with_ROS00031.smil#a_000846">Summary</a>
                      </li>
                      <li data-type="index-term" id="li_000411">
                        <span class="text" id="span_009627" smilref="Programming_Robots_with_ROS00031.smil#span_009627">simulation as key to programming success with</span>
                        <span class="text" id="span_009628" smilref="Programming_Robots_with_ROS00031.smil#span_009628">,</span>
                        <a data-type="index:locator" href="#ch11-idp26391840" external="false" id="a_000847" smilref="Programming_Robots_with_ROS00031.smil#a_000847">The Key to Success</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000412">
                    <span class="text" id="span_009629" smilref="Programming_Robots_with_ROS00031.smil#span_009629">map coordinate frame</span>
                    <span class="text" id="span_009630" smilref="Programming_Robots_with_ROS00031.smil#span_009630">,</span>
                    <a data-type="index:locator" href="#ch10-idp25569152" external="false" id="a_000848" smilref="Programming_Robots_with_ROS00031.smil#a_000848">Localizing the Robot in a Map</a>
                  </li>
                  <li data-type="index-term" id="li_000413">
                    <span class="text" id="span_009631" smilref="Programming_Robots_with_ROS00031.smil#span_009631">maps</span>
                    <span class="text" id="span_009632" smilref="Programming_Robots_with_ROS00031.smil#span_009632">,</span>
                    <a data-type="index:locator" href="#ch09-ix_9-mapping-asciidoc0" external="false" id="a_000849" smilref="Programming_Robots_with_ROS00031.smil#a_000849">Building Maps of the World</a>
                    <span class="text" id="span_009633" smilref="Programming_Robots_with_ROS00031.smil#span_009633">-</span>
                    <a data-type="index:locator" href="#ch09-idp25007120" external="false" id="a_000850" smilref="Programming_Robots_with_ROS00031.smil#a_000850">Summary</a>
                    <list type="ul" id="list_000084">
                      <li data-type="index-term" id="li_000414">
                        <span class="text" id="span_009634" smilref="Programming_Robots_with_ROS00031.smil#span_009634">building</span>
                        <span class="text" id="span_009635" smilref="Programming_Robots_with_ROS00031.smil#span_009635">,</span>
                        <a data-type="index:locator" href="#ch09-ix_9-mapping-asciidoc9" external="false" id="a_000851" smilref="Programming_Robots_with_ROS00031.smil#a_000851">Building Maps</a>
                        <span class="text" id="span_009636" smilref="Programming_Robots_with_ROS00031.smil#span_009636">-</span>
                        <a data-type="index:locator" href="#ch09-idp24997888" external="false" id="a_000852" smilref="Programming_Robots_with_ROS00031.smil#a_000852">Starting a Map Server and Looking at a Map</a>
                      </li>
                      <li data-type="index-term" id="li_000415">
                        <span class="text" id="span_009637" smilref="Programming_Robots_with_ROS00031.smil#span_009637">data recording for</span>
                        <span class="text" id="span_009638" smilref="Programming_Robots_with_ROS00031.smil#span_009638">,</span>
                        <a data-type="index:locator" href="#ch09-ix_9-mapping-asciidoc6" external="false" id="a_000853" smilref="Programming_Robots_with_ROS00031.smil#a_000853">Recording Data with rosbag</a>
                        <span class="text" id="span_009639" smilref="Programming_Robots_with_ROS00031.smil#span_009639">-</span>
                        <a data-type="index:locator" href="#ch09-idp24886368" external="false" id="a_000854" smilref="Programming_Robots_with_ROS00031.smil#a_000854">Recording Data with rosbag</a>
                      </li>
                      <li data-type="index-term" id="li_000416">
                        <span class="text" id="span_009640" smilref="Programming_Robots_with_ROS00031.smil#span_009640">displaying</span>
                        <span class="text" id="span_009641" smilref="Programming_Robots_with_ROS00031.smil#span_009641">,</span>
                        <a data-type="index:locator" href="#ch09-idp24989136" external="false" id="a_000855" smilref="Programming_Robots_with_ROS00031.smil#a_000855">Starting a Map Server and Looking at a Map</a>
                      </li>
                      <li data-type="index-term" id="li_000417">
                        <span class="text" id="span_009642" smilref="Programming_Robots_with_ROS00031.smil#span_009642">for navigating a stockroom</span>
                        <span class="text" id="span_009643" smilref="Programming_Robots_with_ROS00031.smil#span_009643">,</span>
                        <a data-type="index:locator" href="#ch14-idp34454048" external="false" id="a_000856" smilref="Programming_Robots_with_ROS00031.smil#a_000856">Driving to Bins</a>
                      </li>
                      <li data-type="index-term" id="li_000418">
                        <span class="text" id="span_009644" smilref="Programming_Robots_with_ROS00031.smil#span_009644">images vs.</span>
                        <span class="text" id="span_009645" smilref="Programming_Robots_with_ROS00031.smil#span_009645">,</span>
                        <a data-type="index:locator" href="#ch09-idp25207360" external="false" id="a_000857" smilref="Programming_Robots_with_ROS00031.smil#a_000857">Maps in ROS</a>
                      </li>
                      <li data-type="index-term" id="li_000419">
                        <span class="text" id="span_009646" smilref="Programming_Robots_with_ROS00031.smil#span_009646">in ROS</span>
                        <span class="text" id="span_009647" smilref="Programming_Robots_with_ROS00031.smil#span_009647">,</span>
                        <a data-type="index:locator" href="#ch09-ix_9-mapping-asciidoc2" external="false" id="a_000858" smilref="Programming_Robots_with_ROS00031.smil#a_000858">Maps in ROS</a>
                        <span class="text" id="span_009648" smilref="Programming_Robots_with_ROS00031.smil#span_009648">-</span>
                        <a data-type="index:locator" href="#ch09-idp25222416" external="false" id="a_000859" smilref="Programming_Robots_with_ROS00031.smil#a_000859">Maps in ROS</a>
                      </li>
                      <li data-type="index-term" id="li_000420">
                        <span class="text" id="span_009649" smilref="Programming_Robots_with_ROS00031.smil#span_009649">rosbag and</span>
                        <span class="text" id="span_009650" smilref="Programming_Robots_with_ROS00031.smil#span_009650">,</span>
                        <a data-type="index:locator" href="#ch09-ix_9-mapping-asciidoc3" external="false" id="a_000860" smilref="Programming_Robots_with_ROS00031.smil#a_000860">Recording Data with rosbag</a>
                        <span class="text" id="span_009651" smilref="Programming_Robots_with_ROS00031.smil#span_009651">-</span>
                        <a data-type="index:locator" href="#ch09-idp24886368" external="false" id="a_000861" smilref="Programming_Robots_with_ROS00031.smil#a_000861">Recording Data with rosbag</a>
                      </li>
                      <li data-type="index-term" id="li_000421">
                        <span class="text" id="span_009652" smilref="Programming_Robots_with_ROS00031.smil#span_009652">starting a map server</span>
                        <span class="text" id="span_009653" smilref="Programming_Robots_with_ROS00031.smil#span_009653">,</span>
                        <a data-type="index:locator" href="#ch09-idp24973392" external="false" id="a_000862" smilref="Programming_Robots_with_ROS00031.smil#a_000862">Starting a Map Server and Looking at a Map</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000422">
                    <span class="text" id="span_009654" smilref="Programming_Robots_with_ROS00031.smil#span_009654">map_server</span>
                    <span class="text" id="span_009655" smilref="Programming_Robots_with_ROS00031.smil#span_009655">,</span>
                    <a data-type="index:locator" href="#ch09-idp24974656" external="false" id="a_000863" smilref="Programming_Robots_with_ROS00031.smil#a_000863">Starting a Map Server and Looking at a Map</a>
                    <list type="ul" id="list_000085">
                      <li data-type="index-term" id="li_000423">
                        <span class="text" id="span_009656" smilref="Programming_Robots_with_ROS00031.smil#span_009656">and latched topics</span>
                        <span class="text" id="span_009657" smilref="Programming_Robots_with_ROS00031.smil#span_009657">,</span>
                        <a data-type="index:locator" href="#ch03-idp18022704" external="false" id="a_000864" smilref="Programming_Robots_with_ROS00031.smil#a_000864">Latched Topics</a>
                      </li>
                      <li data-type="index-term" id="li_000424">
                        <span class="text" id="span_009658" smilref="Programming_Robots_with_ROS00031.smil#span_009658">and nav stack</span>
                        <span class="text" id="span_009659" smilref="Programming_Robots_with_ROS00031.smil#span_009659">,</span>
                        <a data-type="index:locator" href="#ch17-ix_17-rossify_robots2-asciidoc13" external="false" id="a_000865" smilref="Programming_Robots_with_ROS00031.smil#a_000865">Configuring the Navigation Stack</a>
                        <span class="text" id="span_009660" smilref="Programming_Robots_with_ROS00031.smil#span_009660">-</span>
                        <a data-type="index:locator" href="#ch17-idp41076432" external="false" id="a_000866" smilref="Programming_Robots_with_ROS00031.smil#a_000866">Configuring the Navigation Stack</a>
                      </li>
                      <li data-type="index-term" id="li_000425">
                        <span class="text" id="span_009661" smilref="Programming_Robots_with_ROS00031.smil#span_009661">starting</span>
                        <span class="text" id="span_009662" smilref="Programming_Robots_with_ROS00031.smil#span_009662">,</span>
                        <a data-type="index:locator" href="#ch09-idp24975536" external="false" id="a_000867" smilref="Programming_Robots_with_ROS00031.smil#a_000867">Starting a Map Server and Looking at a Map</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000426">
                    <span class="text" id="span_009663" smilref="Programming_Robots_with_ROS00031.smil#span_009663">master (tool)</span>
                    <span class="text" id="span_009664" smilref="Programming_Robots_with_ROS00031.smil#span_009664">,</span>
                    <a data-type="index:locator" href="#ch20-idp43757584" external="false" id="a_000868" smilref="Programming_Robots_with_ROS00031.smil#a_000868">The Master and Friends: roscore</a>
                  </li>
                  <li data-type="index-term" id="li_000427">
                    <span class="text" id="span_009665" smilref="Programming_Robots_with_ROS00031.smil#span_009665">MD5 checksum</span>
                    <span class="text" id="span_009666" smilref="Programming_Robots_with_ROS00031.smil#span_009666">,</span>
                    <a data-type="index:locator" href="#ch03-idp18323264" external="false" id="a_000869" smilref="Programming_Robots_with_ROS00031.smil#a_000869">Defining a New Message</a>
                  </li>
                  <li data-type="index-term" id="li_000428">
                    <span class="text" id="span_009667" smilref="Programming_Robots_with_ROS00031.smil#span_009667">Mecanum wheels</span>
                    <span class="text" id="span_009668" smilref="Programming_Robots_with_ROS00031.smil#span_009668">,</span>
                    <a data-type="index:locator" href="#ch06-idp21710480" external="false" id="a_000870" smilref="Programming_Robots_with_ROS00031.smil#a_000870">Actuation: Mobile Platform</a>
                  </li>
                  <li id="li_000429">
                    <span data-type="index-term" id="span_009669" smilref="Programming_Robots_with_ROS00031.smil#span_009669">message</span>
                    <list type="ul" id="list_000086">
                      <li data-type="index-term" id="li_000430">
                        <span class="text" id="span_009670" smilref="Programming_Robots_with_ROS00031.smil#span_009670">and latched topics</span>
                        <span class="text" id="span_009671" smilref="Programming_Robots_with_ROS00031.smil#span_009671">,</span>
                        <a data-type="index:locator" href="#ch03-idp18019360" external="false" id="a_000871" smilref="Programming_Robots_with_ROS00031.smil#a_000871">Latched Topics</a>
                      </li>
                      <li data-type="index-term" id="li_000431">
                        <span class="text" id="span_009672" smilref="Programming_Robots_with_ROS00031.smil#span_009672">and localization</span>
                        <span class="text" id="span_009673" smilref="Programming_Robots_with_ROS00031.smil#span_009673">,</span>
                        <a data-type="index:locator" href="#ch10-idp25604768" external="false" id="a_000872" smilref="Programming_Robots_with_ROS00031.smil#a_000872">What's Going on Behind the Scenes</a>
                      </li>
                      <li data-type="index-term" id="li_000432">
                        <span class="text" id="span_009674" smilref="Programming_Robots_with_ROS00031.smil#span_009674">and peer-to-peer development philosophy</span>
                        <span class="text" id="span_009675" smilref="Programming_Robots_with_ROS00031.smil#span_009675">,</span>
                        <a data-type="index:locator" href="#ch01-idp194128" external="false" id="a_000873" smilref="Programming_Robots_with_ROS00031.smil#a_000873">Philosophy</a>
                      </li>
                      <li data-type="index-term" id="li_000433">
                        <span class="text" id="span_009676" smilref="Programming_Robots_with_ROS00031.smil#span_009676">defining new</span>
                        <span class="text" id="span_009677" smilref="Programming_Robots_with_ROS00031.smil#span_009677">,</span>
                        <a data-type="index:locator" href="#ch03-ix_3-topics-asciidoc9" external="false" id="a_000874" smilref="Programming_Robots_with_ROS00031.smil#a_000874">Defining a New Message</a>
                        <span class="text" id="span_009678" smilref="Programming_Robots_with_ROS00031.smil#span_009678">-</span>
                        <a data-type="index:locator" href="#ch03-idp18326320" external="false" id="a_000875" smilref="Programming_Robots_with_ROS00031.smil#a_000875">Defining a New Message</a>
                      </li>
                      <li data-type="index-term" id="li_000434">
                        <span class="text" id="span_009679" smilref="Programming_Robots_with_ROS00031.smil#span_009679">interface for CougarBot</span>
                        <span class="text" id="span_009680" smilref="Programming_Robots_with_ROS00031.smil#span_009680">,</span>
                        <a data-type="index:locator" href="#ch18-idp41236896" external="false" id="a_000876" smilref="Programming_Robots_with_ROS00031.smil#a_000876">ROS Message Interface</a>
                      </li>
                      <li data-type="index-term" id="li_000435">
                        <span class="text" id="span_009681" smilref="Programming_Robots_with_ROS00031.smil#span_009681">interface for TortoiseBot</span>
                        <span class="text" id="span_009682" smilref="Programming_Robots_with_ROS00031.smil#span_009682">,</span>
                        <a data-type="index:locator" href="#ch16-idp39198672" external="false" id="a_000877" smilref="Programming_Robots_with_ROS00031.smil#a_000877">ROS Message Interface</a>
                        <span class="text" id="span_009683" smilref="Programming_Robots_with_ROS00031.smil#span_009683">-</span>
                        <a data-type="index:locator" href="#ch16-idp39238128" external="false" id="a_000878" smilref="Programming_Robots_with_ROS00031.smil#a_000878">ROS Message Interface</a>
                      </li>
                      <li data-type="index-term" id="li_000436">
                        <span class="text" id="span_009684" smilref="Programming_Robots_with_ROS00031.smil#span_009684">using new</span>
                        <span class="text" id="span_009685" smilref="Programming_Robots_with_ROS00031.smil#span_009685">,</span>
                        <a data-type="index:locator" href="#ch03-idp18331408" external="false" id="a_000879" smilref="Programming_Robots_with_ROS00031.smil#a_000879">Using Your New Message</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000437">
                    <span class="text" id="span_009686" smilref="Programming_Robots_with_ROS00031.smil#span_009686">message definition files</span>
                    <span class="text" id="span_009687" smilref="Programming_Robots_with_ROS00031.smil#span_009687">,</span>
                    <a data-type="index:locator" href="#ch03-idp18090352" external="false" id="a_000880" smilref="Programming_Robots_with_ROS00031.smil#a_000880">Defining a New Message</a>
                  </li>
                  <li id="li_000438">
                    <span data-type="index-term" id="span_009688" smilref="Programming_Robots_with_ROS00031.smil#span_009688">message types</span>
                    <list type="ul" id="list_000087">
                      <li data-type="index-term" id="li_000439">
                        <span class="text" id="span_009689" smilref="Programming_Robots_with_ROS00031.smil#span_009689">defining your own</span>
                        <span class="text" id="span_009690" smilref="Programming_Robots_with_ROS00031.smil#span_009690">,</span>
                        <a data-type="index:locator" href="#ch03-ix_3-topics-asciidoc5" external="false" id="a_000881" smilref="Programming_Robots_with_ROS00031.smil#a_000881">Defining Your Own Message Types</a>
                        <span class="text" id="span_009691" smilref="Programming_Robots_with_ROS00031.smil#span_009691">-</span>
                        <a data-type="index:locator" href="#ch03-idp18439840" external="false" id="a_000882" smilref="Programming_Robots_with_ROS00031.smil#a_000882">When Should You Make a New Message Type?</a>
                      </li>
                      <li data-type="index-term" id="li_000440">
                        <span class="text" id="span_009692" smilref="Programming_Robots_with_ROS00031.smil#span_009692">determining appropriateness of new</span>
                        <span class="text" id="span_009693" smilref="Programming_Robots_with_ROS00031.smil#span_009693">,</span>
                        <a data-type="index:locator" href="#ch03-idp18435632" external="false" id="a_000883" smilref="Programming_Robots_with_ROS00031.smil#a_000883">When Should You Make a New Message Type?</a>
                      </li>
                      <li data-type="index-term" id="li_000441">
                        <span class="text" id="span_009694" smilref="Programming_Robots_with_ROS00031.smil#span_009694">primitive</span>
                        <span class="text" id="span_009695" smilref="Programming_Robots_with_ROS00031.smil#span_009695">,</span>
                        <a data-type="index:locator" href="#ch03-ix_3-topics-asciidoc5" external="false" id="a_000884" smilref="Programming_Robots_with_ROS00031.smil#a_000884">Defining Your Own Message Types</a>
                        <span class="text" id="span_009696" smilref="Programming_Robots_with_ROS00031.smil#span_009696">-</span>
                        <a data-type="index:locator" href="#ch03-idp18080736" external="false" id="a_000885" smilref="Programming_Robots_with_ROS00031.smil#a_000885">Defining Your Own Message Types</a>
                      </li>
                    </list>
                  </li>
                  <li data-gentext="see" id="li_000442">
                    <span data-type="index-term" id="span_009697" smilref="Programming_Robots_with_ROS00031.smil#span_009697">Microsoft Kinect</span>
                    <span class="text" id="span_009698" smilref="Programming_Robots_with_ROS00031.smil#span_009698">(</span>
                    <span class="text" id="span_009699" smilref="Programming_Robots_with_ROS00031.smil#span_009699">see</span>
                    <span class="text" id="span_009700" smilref="Programming_Robots_with_ROS00031.smil#span_009700">Kinect camera)</span>
                  </li>
                  <li data-type="index-term" id="li_000443">
                    <span class="text" id="span_009701" smilref="Programming_Robots_with_ROS00031.smil#span_009701">minimal C++ node</span>
                    <span class="text" id="span_009702" smilref="Programming_Robots_with_ROS00031.smil#span_009702">,</span>
                    <a data-type="index:locator" href="#ch23-idp45726816" external="false" id="a_000886" smilref="Programming_Robots_with_ROS00031.smil#a_000886">A Simple Node</a>
                  </li>
                  <li data-type="index-term" id="li_000444">
                    <span class="text" id="span_009703" smilref="Programming_Robots_with_ROS00031.smil#span_009703">mobile platform</span>
                    <span class="text" id="span_009704" smilref="Programming_Robots_with_ROS00031.smil#span_009704">,</span>
                    <a data-type="index:locator" href="#ch06-ix_6-robots-asciidoc1" external="false" id="a_000887" smilref="Programming_Robots_with_ROS00031.smil#a_000887">Actuation: Mobile Platform</a>
                    <span class="text" id="span_009705" smilref="Programming_Robots_with_ROS00031.smil#span_009705">-</span>
                    <a data-type="index:locator" href="#ch06-idp21719824" external="false" id="a_000888" smilref="Programming_Robots_with_ROS00031.smil#a_000888">Actuation: Mobile Platform</a>
                  </li>
                  <li id="li_000445">
                    <span data-type="index-term" id="span_009706" smilref="Programming_Robots_with_ROS00031.smil#span_009706">mobile robot</span>
                    <list type="ul" id="list_000088">
                      <li data-type="index-term" id="li_000446">
                        <span class="text" id="span_009707" smilref="Programming_Robots_with_ROS00031.smil#span_009707">autonomous navigation</span>
                        <span class="text" id="span_009708" smilref="Programming_Robots_with_ROS00031.smil#span_009708">,</span>
                        <a data-type="index:locator" href="#ch17-ix_17-rossify_robots2-asciidoc0" external="false" id="a_000889" smilref="Programming_Robots_with_ROS00031.smil#a_000889">Your Own Mobile Robot: Part 2</a>
                        <span class="text" id="span_009709" smilref="Programming_Robots_with_ROS00031.smil#span_009709">-</span>
                        <a data-type="index:locator" href="#ch17-idp41208944" external="false" id="a_000890" smilref="Programming_Robots_with_ROS00031.smil#a_000890">Summary</a>
                      </li>
                      <li data-type="index-term" id="li_000447">
                        <span class="text" id="span_009710" smilref="Programming_Robots_with_ROS00031.smil#span_009710">designing your own</span>
                        <span class="text" id="span_009711" smilref="Programming_Robots_with_ROS00031.smil#span_009711">,</span>
                        <a data-type="index:locator" href="#ch16-ix_16-rossify_robots-asciidoc1" external="false" id="a_000891" smilref="Programming_Robots_with_ROS00031.smil#a_000891">Your Own Mobile Robot</a>
                        <span class="text" id="span_009712" smilref="Programming_Robots_with_ROS00031.smil#span_009712">-</span>
                        <a data-type="index:locator" href="#ch16-idp40548432" external="false" id="a_000892" smilref="Programming_Robots_with_ROS00031.smil#a_000892">Summary</a>
                      </li>
                      <li data-type="index-term" id="li_000448">
                        <span class="text" id="span_009713" smilref="Programming_Robots_with_ROS00031.smil#span_009713">Elsie as inspiration for</span>
                        <span class="text" id="span_009714" smilref="Programming_Robots_with_ROS00031.smil#span_009714">,</span>
                        <a data-type="index:locator" href="#ch16-ix_16-rossify_robots-asciidoc2" external="false" id="a_000893" smilref="Programming_Robots_with_ROS00031.smil#a_000893">TortoiseBot</a>
                        <span class="text" id="span_009715" smilref="Programming_Robots_with_ROS00031.smil#span_009715">-</span>
                        <a data-type="index:locator" href="#ch16-idp39192176" external="false" id="a_000894" smilref="Programming_Robots_with_ROS00031.smil#a_000894">TortoiseBot</a>
                      </li>
                      <li data-type="index-term" id="li_000449">
                        <span class="text" id="span_009716" smilref="Programming_Robots_with_ROS00031.smil#span_009716">hardware driver</span>
                        <span class="text" id="span_009717" smilref="Programming_Robots_with_ROS00031.smil#span_009717">,</span>
                        <a data-type="index:locator" href="#ch16-idp39239984" external="false" id="a_000895" smilref="Programming_Robots_with_ROS00031.smil#a_000895">Hardware Driver</a>
                      </li>
                      <li data-type="index-term" id="li_000450">
                        <span class="text" id="span_009718" smilref="Programming_Robots_with_ROS00031.smil#span_009718">laser sensor for</span>
                        <span class="text" id="span_009719" smilref="Programming_Robots_with_ROS00031.smil#span_009719">,</span>
                        <a data-type="index:locator" href="#ch17-ix_17-rossify_robots2-asciidoc6" external="false" id="a_000896" smilref="Programming_Robots_with_ROS00031.smil#a_000896">Adding a Laser Sensor</a>
                        <span class="text" id="span_009720" smilref="Programming_Robots_with_ROS00031.smil#span_009720">-</span>
                        <a data-type="index:locator" href="#ch17-idp40992448" external="false" id="a_000897" smilref="Programming_Robots_with_ROS00031.smil#a_000897">Adding a Laser Sensor</a>
                      </li>
                      <li data-type="index-term" id="li_000451">
                        <span class="text" id="span_009721" smilref="Programming_Robots_with_ROS00031.smil#span_009721">localizing/commanding with rviz</span>
                        <span class="text" id="span_009722" smilref="Programming_Robots_with_ROS00031.smil#span_009722">,</span>
                        <a data-type="index:locator" href="#ch17-ix_17-rossify_robots2-asciidoc18" external="false" id="a_000898" smilref="Programming_Robots_with_ROS00031.smil#a_000898">Using rviz to Localize and Command a Navigating Robot</a>
                        <span class="text" id="span_009723" smilref="Programming_Robots_with_ROS00031.smil#span_009723">-</span>
                        <a data-type="index:locator" href="#ch17-idp41199680" external="false" id="a_000899" smilref="Programming_Robots_with_ROS00031.smil#a_000899">Using rviz to Localize and Command a Navigating Robot</a>
                      </li>
                      <li data-type="index-term" id="li_000452">
                        <span class="text" id="span_009724" smilref="Programming_Robots_with_ROS00031.smil#span_009724">modeling with URDF</span>
                        <span class="text" id="span_009725" smilref="Programming_Robots_with_ROS00031.smil#span_009725">,</span>
                        <a data-type="index:locator" href="#ch16-ix_16-rossify_robots-asciidoc7" external="false" id="a_000900" smilref="Programming_Robots_with_ROS00031.smil#a_000900">Modeling the Robot: URDF</a>
                        <span class="text" id="span_009726" smilref="Programming_Robots_with_ROS00031.smil#span_009726">-</span>
                        <a data-type="index:locator" href="#ch16-idp39979568" external="false" id="a_000901" smilref="Programming_Robots_with_ROS00031.smil#a_000901">Modeling the Robot: URDF</a>
                      </li>
                      <li data-type="index-term" id="li_000453">
                        <span class="text" id="span_009727" smilref="Programming_Robots_with_ROS00031.smil#span_009727">nav stack configuration</span>
                        <span class="text" id="span_009728" smilref="Programming_Robots_with_ROS00031.smil#span_009728">,</span>
                        <a data-type="index:locator" href="#ch17-ix_17-rossify_robots2-asciidoc9" external="false" id="a_000902" smilref="Programming_Robots_with_ROS00031.smil#a_000902">Configuring the Navigation Stack</a>
                        <span class="text" id="span_009729" smilref="Programming_Robots_with_ROS00031.smil#span_009729">-</span>
                        <a data-type="index:locator" href="#ch17-idp41168176" external="false" id="a_000903" smilref="Programming_Robots_with_ROS00031.smil#a_000903">Configuring the Navigation Stack</a>
                      </li>
                      <li data-type="index-term" id="li_000454">
                        <span class="text" id="span_009730" smilref="Programming_Robots_with_ROS00031.smil#span_009730">ROS message interface for</span>
                        <span class="text" id="span_009731" smilref="Programming_Robots_with_ROS00031.smil#span_009731">,</span>
                        <a data-type="index:locator" href="#ch16-idp39198672" external="false" id="a_000904" smilref="Programming_Robots_with_ROS00031.smil#a_000904">ROS Message Interface</a>
                        <span class="text" id="span_009732" smilref="Programming_Robots_with_ROS00031.smil#span_009732">-</span>
                        <a data-type="index:locator" href="#ch16-idp39238128" external="false" id="a_000905" smilref="Programming_Robots_with_ROS00031.smil#a_000905">ROS Message Interface</a>
                      </li>
                      <li data-type="index-term" id="li_000455">
                        <span class="text" id="span_009733" smilref="Programming_Robots_with_ROS00031.smil#span_009733">simulation in Gazebo</span>
                        <span class="text" id="span_009734" smilref="Programming_Robots_with_ROS00031.smil#span_009734">,</span>
                        <a data-type="index:locator" href="#ch16-ix_16-rossify_robots-asciidoc10" external="false" id="a_000906" smilref="Programming_Robots_with_ROS00031.smil#a_000906">Simulation in Gazebo</a>
                        <span class="text" id="span_009735" smilref="Programming_Robots_with_ROS00031.smil#span_009735">-</span>
                        <a data-type="index:locator" href="#ch16-idp40547168" external="false" id="a_000907" smilref="Programming_Robots_with_ROS00031.smil#a_000907">Simulation in Gazebo</a>
                      </li>
                      <li data-type="index-term" id="li_000456">
                        <span class="text" id="span_009736" smilref="Programming_Robots_with_ROS00031.smil#span_009736">TortoiseBot</span>
                        <span class="text" id="span_009737" smilref="Programming_Robots_with_ROS00031.smil#span_009737">,</span>
                        <a data-type="index:locator" href="#ch16-ix_16-rossify_robots-asciidoc1" external="false" id="a_000908" smilref="Programming_Robots_with_ROS00031.smil#a_000908">Your Own Mobile Robot</a>
                        <span class="text" id="span_009738" smilref="Programming_Robots_with_ROS00031.smil#span_009738">-</span>
                        <a data-type="index:locator" href="#ch16-idp40548432" external="false" id="a_000909" smilref="Programming_Robots_with_ROS00031.smil#a_000909">Summary</a>
                      </li>
                      <li data-type="index-term" id="li_000457">
                        <span class="text" id="span_009739" smilref="Programming_Robots_with_ROS00031.smil#span_009739">verifying transforms</span>
                        <span class="text" id="span_009740" smilref="Programming_Robots_with_ROS00031.smil#span_009740">,</span>
                        <a data-type="index:locator" href="#ch17-ix_17-rossify_robots2-asciidoc3" external="false" id="a_000910" smilref="Programming_Robots_with_ROS00031.smil#a_000910">Verifying Transforms</a>
                        <span class="text" id="span_009741" smilref="Programming_Robots_with_ROS00031.smil#span_009741">-</span>
                        <a data-type="index:locator" href="#ch17-idp39169952" external="false" id="a_000911" smilref="Programming_Robots_with_ROS00031.smil#a_000911">Verifying Transforms</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000458">
                    <span class="text" id="span_009742" smilref="Programming_Robots_with_ROS00031.smil#span_009742">motion generator</span>
                    <span class="text" id="span_009743" smilref="Programming_Robots_with_ROS00031.smil#span_009743">,</span>
                    <a data-type="index:locator" href="#ch08-ix_8-teleop_bot-asciidoc3" external="false" id="a_000912" smilref="Programming_Robots_with_ROS00031.smil#a_000912">Motion Generator</a>
                    <span class="text" id="span_009744" smilref="Programming_Robots_with_ROS00031.smil#span_009744">-</span>
                    <a data-type="index:locator" href="#ch08-idp23943216" external="false" id="a_000913" smilref="Programming_Robots_with_ROS00031.smil#a_000913">Motion Generator</a>
                  </li>
                  <li data-type="index-term" id="li_000459">
                    <span class="text" id="span_009745" smilref="Programming_Robots_with_ROS00031.smil#span_009745">motion planning</span>
                    <span class="text" id="span_009746" smilref="Programming_Robots_with_ROS00031.smil#span_009746">,</span>
                    <a data-type="index:locator" href="#ch11-idp25888144" external="false" id="a_000914" smilref="Programming_Robots_with_ROS00031.smil#a_000914">Joints, Links, and Kinematic Chains</a>
                  </li>
                  <li id="li_000460">
                    <span data-type="index-term" id="span_009747" smilref="Programming_Robots_with_ROS00031.smil#span_009747">MoveIt</span>
                    <list type="ul" id="list_000089">
                      <li data-type="index-term" id="li_000461">
                        <span class="text" id="span_009748" smilref="Programming_Robots_with_ROS00031.smil#span_009748">and Chess-bot hand operation</span>
                        <span class="text" id="span_009749" smilref="Programming_Robots_with_ROS00031.smil#span_009749">,</span>
                        <a data-type="index:locator" href="#ch11-ix_11-chessbot-asciidoc12" external="false" id="a_000915" smilref="Programming_Robots_with_ROS00031.smil#a_000915">Operating the Hand</a>
                      </li>
                      <li data-type="index-term" id="li_000462">
                        <span class="text" id="span_009750" smilref="Programming_Robots_with_ROS00031.smil#span_009750">and R2 arm movement simulation</span>
                        <span class="text" id="span_009751" smilref="Programming_Robots_with_ROS00031.smil#span_009751">,</span>
                        <a data-type="index:locator" href="#ch11-ix_11-chessbot-asciidoc9" external="false" id="a_000916" smilref="Programming_Robots_with_ROS00031.smil#a_000916">Installing and Running a Simulated R2</a>
                        <span class="text" id="span_009752" smilref="Programming_Robots_with_ROS00031.smil#span_009752">-</span>
                        <a data-type="index:locator" href="#ch11-idp26336784" external="false" id="a_000917" smilref="Programming_Robots_with_ROS00031.smil#a_000917">Installing and Running a Simulated R2</a>
                      </li>
                      <li data-type="index-term" id="li_000463">
                        <span class="text" id="span_009753" smilref="Programming_Robots_with_ROS00031.smil#span_009753">and rviz</span>
                        <span class="text" id="span_009754" smilref="Programming_Robots_with_ROS00031.smil#span_009754">,</span>
                        <a data-type="index:locator" href="#ch18-ix_18-rossify_robots3-asciidoc9" external="false" id="a_000918" smilref="Programming_Robots_with_ROS00031.smil#a_000918">Using rviz to Send Goals</a>
                        <span class="text" id="span_009755" smilref="Programming_Robots_with_ROS00031.smil#span_009755">-</span>
                        <a data-type="index:locator" href="#ch18-idp42725088" external="false" id="a_000919" smilref="Programming_Robots_with_ROS00031.smil#a_000919">Using rviz to Send Goals</a>
                      </li>
                      <li data-type="index-term" id="li_000464">
                        <span class="text" id="span_009756" smilref="Programming_Robots_with_ROS00031.smil#span_009756">and stockroom-bot</span>
                        <span class="text" id="span_009757" smilref="Programming_Robots_with_ROS00031.smil#span_009757">,</span>
                        <a data-type="index:locator" href="#ch14-idp37129312" external="false" id="a_000920" smilref="Programming_Robots_with_ROS00031.smil#a_000920">Picking Up the Item</a>
                        <span class="text" id="span_009758" smilref="Programming_Robots_with_ROS00031.smil#span_009758">,</span>
                        <a data-type="index:locator" href="#ch14-ix_14-stockroom_bot-asciidoc16" external="false" id="a_000921" smilref="Programming_Robots_with_ROS00031.smil#a_000921">Picking Up the Item</a>
                        <span class="text" id="span_009759" smilref="Programming_Robots_with_ROS00031.smil#span_009759">-</span>
                        <a data-type="index:locator" href="#ch14-idp38732608" external="false" id="a_000922" smilref="Programming_Robots_with_ROS00031.smil#a_000922">Picking Up the Item</a>
                      </li>
                      <li data-type="index-term" id="li_000465">
                        <span class="text" id="span_009760" smilref="Programming_Robots_with_ROS00031.smil#span_009760">configuring for CougarBot</span>
                        <span class="text" id="span_009761" smilref="Programming_Robots_with_ROS00031.smil#span_009761">,</span>
                        <a data-type="index:locator" href="#ch18-ix_18-rossify_robots3-asciidoc7" external="false" id="a_000923" smilref="Programming_Robots_with_ROS00031.smil#a_000923">Configuring MoveIt</a>
                        <span class="text" id="span_009762" smilref="Programming_Robots_with_ROS00031.smil#span_009762">-</span>
                        <a data-type="index:locator" href="#ch18-idp42580320" external="false" id="a_000924" smilref="Programming_Robots_with_ROS00031.smil#a_000924">Configuring MoveIt</a>
                      </li>
                    </list>
                  </li>
                  <li id="li_000466">
                    <span data-type="index-term" id="span_009763" smilref="Programming_Robots_with_ROS00031.smil#span_009763">move_base</span>
                    <list type="ul" id="list_000090">
                      <li data-type="index-term" id="li_000467">
                        <span class="text" id="span_009764" smilref="Programming_Robots_with_ROS00031.smil#span_009764">and nav stack performance tuning</span>
                        <span class="text" id="span_009765" smilref="Programming_Robots_with_ROS00031.smil#span_009765">,</span>
                        <a data-type="index:locator" href="#ch10-idp26453664" external="false" id="a_000925" smilref="Programming_Robots_with_ROS00031.smil#a_000925">Summary</a>
                      </li>
                      <li data-type="index-term" id="li_000468">
                        <span class="text" id="span_009766" smilref="Programming_Robots_with_ROS00031.smil#span_009766">and patrol node</span>
                        <span class="text" id="span_009767" smilref="Programming_Robots_with_ROS00031.smil#span_009767">,</span>
                        <a data-type="index:locator" href="#ch10-idp25694880" external="false" id="a_000926" smilref="Programming_Robots_with_ROS00031.smil#a_000926">Navigating in Code</a>
                      </li>
                      <li data-type="index-term" id="li_000469">
                        <span class="text" id="span_009768" smilref="Programming_Robots_with_ROS00031.smil#span_009768">for TortoiseBot nav stack</span>
                        <span class="text" id="span_009769" smilref="Programming_Robots_with_ROS00031.smil#span_009769">,</span>
                        <a data-type="index:locator" href="#ch17-ix_17-rossify_robots2-asciidoc14" external="false" id="a_000927" smilref="Programming_Robots_with_ROS00031.smil#a_000927">Configuring the Navigation Stack</a>
                        <span class="text" id="span_009770" smilref="Programming_Robots_with_ROS00031.smil#span_009770">-</span>
                        <a data-type="index:locator" href="#ch17-idp41168176" external="false" id="a_000928" smilref="Programming_Robots_with_ROS00031.smil#a_000928">Configuring the Navigation Stack</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000470">
                    <span class="text" id="span_009771" smilref="Programming_Robots_with_ROS00031.smil#span_009771">multilingual development philosophy</span>
                    <span class="text" id="span_009772" smilref="Programming_Robots_with_ROS00031.smil#span_009772">,</span>
                    <a data-type="index:locator" href="#ch01-idp200688" external="false" id="a_000929" smilref="Programming_Robots_with_ROS00031.smil#a_000929">Philosophy</a>
                  </li>
                </list>
              </div>
              <h1 id="h1_000556" smilref="Programming_Robots_with_ROS00031.smil#h1_000556">N</h1>
              <div data-type="indexdiv" id="div_000064">
                <list type="ul" id="list_000091">
                  <li data-type="index-term" id="li_000471">
                    <span class="text" id="span_009773" smilref="Programming_Robots_with_ROS00031.smil#span_009773">names, in ROS</span>
                    <span class="text" id="span_009774" smilref="Programming_Robots_with_ROS00031.smil#span_009774">,</span>
                    <a data-type="index:locator" href="#ch02-idp16971632" external="false" id="a_000930" smilref="Programming_Robots_with_ROS00031.smil#a_000930">Names, Namespaces, and Remapping</a>
                  </li>
                  <li data-type="index-term" id="li_000472">
                    <span class="text" id="span_009775" smilref="Programming_Robots_with_ROS00031.smil#span_009775">namespaces</span>
                    <span class="text" id="span_009776" smilref="Programming_Robots_with_ROS00031.smil#span_009776">,</span>
                    <a data-type="index:locator" href="#ch02-idp16975616" external="false" id="a_000931" smilref="Programming_Robots_with_ROS00031.smil#a_000931">Names, Namespaces, and Remapping</a>
                  </li>
                  <li data-gentext="see" id="li_000473">
                    <span data-type="index-term" id="span_009777" smilref="Programming_Robots_with_ROS00031.smil#span_009777">NASA/GM Robonaut 2</span>
                    <span class="text" id="span_009778" smilref="Programming_Robots_with_ROS00031.smil#span_009778">(</span>
                    <span class="text" id="span_009779" smilref="Programming_Robots_with_ROS00031.smil#span_009779">see</span>
                    <span class="text" id="span_009780" smilref="Programming_Robots_with_ROS00031.smil#span_009780">R2 (Robonaut 2))</span>
                  </li>
                  <li data-type="index-term" id="li_000474">
                    <span class="text" id="span_009781" smilref="Programming_Robots_with_ROS00031.smil#span_009781">native data types, C++ vs. Python</span>
                    <span class="text" id="span_009782" smilref="Programming_Robots_with_ROS00031.smil#span_009782">,</span>
                    <a data-type="index:locator" href="#ch03-idp18072624" external="false" id="a_000932" smilref="Programming_Robots_with_ROS00031.smil#a_000932">Defining Your Own Message Types</a>
                  </li>
                  <li data-type="index-term" id="li_000475">
                    <span class="text" id="span_009783" smilref="Programming_Robots_with_ROS00031.smil#span_009783">navigation</span>
                    <span class="text" id="span_009784" smilref="Programming_Robots_with_ROS00031.smil#span_009784">,</span>
                    <a data-type="index:locator" href="#ch10-ix_10-navigation-asciidoc0" external="false" id="a_000933" smilref="Programming_Robots_with_ROS00031.smil#a_000933">Navigating About the World</a>
                    <span class="text" id="span_009785" smilref="Programming_Robots_with_ROS00031.smil#span_009785">-</span>
                    <a data-type="index:locator" href="#ch10-idp25965056" external="false" id="a_000934" smilref="Programming_Robots_with_ROS00031.smil#a_000934">Summary</a>
                    <list type="ul" id="list_000092">
                      <li data-type="index-term" id="li_000476">
                        <span class="text" id="span_009786" smilref="Programming_Robots_with_ROS00031.smil#span_009786">costmaps</span>
                        <span class="text" id="span_009787" smilref="Programming_Robots_with_ROS00031.smil#span_009787">,</span>
                        <a data-type="index:locator" href="#ch10-ix_10-navigation-asciidoc7" external="false" id="a_000935" smilref="Programming_Robots_with_ROS00031.smil#a_000935">Seeing What's Going On</a>
                        <span class="text" id="span_009788" smilref="Programming_Robots_with_ROS00031.smil#span_009788">-</span>
                        <a data-type="index:locator" href="#ch10-idp25682368" external="false" id="a_000936" smilref="Programming_Robots_with_ROS00031.smil#a_000936">Seeing What's Going On</a>
                        <span class="text" id="span_009789" smilref="Programming_Robots_with_ROS00031.smil#span_009789">,</span>
                        <a data-type="index:locator" href="#ch17-ix_17-rossify_robots2-asciidoc15a" external="false" id="a_000937" smilref="Programming_Robots_with_ROS00031.smil#a_000937">Configuring the Navigation Stack</a>
                        <span class="text" id="span_009790" smilref="Programming_Robots_with_ROS00031.smil#span_009790">-</span>
                        <a data-type="index:locator" href="#ch17-idp41168176" external="false" id="a_000938" smilref="Programming_Robots_with_ROS00031.smil#a_000938">Configuring the Navigation Stack</a>
                      </li>
                      <li data-type="index-term" id="li_000477">
                        <span class="text" id="span_009791" smilref="Programming_Robots_with_ROS00031.smil#span_009791">getting good initial localization</span>
                        <span class="text" id="span_009792" smilref="Programming_Robots_with_ROS00031.smil#span_009792">,</span>
                        <a data-type="index:locator" href="#ch10-idp25594288" external="false" id="a_000939" smilref="Programming_Robots_with_ROS00031.smil#a_000939">Getting a Good Initial Localization</a>
                      </li>
                      <li data-type="index-term" id="li_000478">
                        <span class="text" id="span_009793" smilref="Programming_Robots_with_ROS00031.smil#span_009793">localizing robot in a map</span>
                        <span class="text" id="span_009794" smilref="Programming_Robots_with_ROS00031.smil#span_009794">,</span>
                        <a data-type="index:locator" href="#ch10-ix_10-navigation-asciidoc3" external="false" id="a_000940" smilref="Programming_Robots_with_ROS00031.smil#a_000940">Localizing the Robot in a Map</a>
                        <span class="text" id="span_009795" smilref="Programming_Robots_with_ROS00031.smil#span_009795">-</span>
                        <a data-type="index:locator" href="#ch10-idp25626336" external="false" id="a_000941" smilref="Programming_Robots_with_ROS00031.smil#a_000941">Tips for Setting a Better Initial Pose</a>
                      </li>
                      <li data-type="index-term" id="li_000479">
                        <span class="text" id="span_009796" smilref="Programming_Robots_with_ROS00031.smil#span_009796">messages/topics for initial localization</span>
                        <span class="text" id="span_009797" smilref="Programming_Robots_with_ROS00031.smil#span_009797">,</span>
                        <a data-type="index:locator" href="#ch10-idp25604768" external="false" id="a_000942" smilref="Programming_Robots_with_ROS00031.smil#a_000942">What's Going on Behind the Scenes</a>
                      </li>
                      <li data-type="index-term" id="li_000480">
                        <span class="text" id="span_009798" smilref="Programming_Robots_with_ROS00031.smil#span_009798">tips for setting better initial pose</span>
                        <span class="text" id="span_009799" smilref="Programming_Robots_with_ROS00031.smil#span_009799">,</span>
                        <a data-type="index:locator" href="#ch10-idp25620624" external="false" id="a_000943" smilref="Programming_Robots_with_ROS00031.smil#a_000943">Tips for Setting a Better Initial Pose</a>
                      </li>
                      <li data-type="index-term" id="li_000481">
                        <span class="text" id="span_009800" smilref="Programming_Robots_with_ROS00031.smil#span_009800">using code</span>
                        <span class="text" id="span_009801" smilref="Programming_Robots_with_ROS00031.smil#span_009801">,</span>
                        <a data-type="index:locator" href="#ch10-ix_10-navigation-asciidoc9" external="false" id="a_000944" smilref="Programming_Robots_with_ROS00031.smil#a_000944">Navigating in Code</a>
                        <span class="text" id="span_009802" smilref="Programming_Robots_with_ROS00031.smil#span_009802">-</span>
                        <a data-type="index:locator" href="#ch10-idp25941216" external="false" id="a_000945" smilref="Programming_Robots_with_ROS00031.smil#a_000945">Navigating in Code</a>
                      </li>
                      <li data-type="index-term" id="li_000482">
                        <span class="text" id="span_009803" smilref="Programming_Robots_with_ROS00031.smil#span_009803">with ROS nav stack</span>
                        <span class="text" id="span_009804" smilref="Programming_Robots_with_ROS00031.smil#span_009804">,</span>
                        <a data-type="index:locator" href="#ch10-ix_10-navigation-asciidoc4" external="false" id="a_000946" smilref="Programming_Robots_with_ROS00031.smil#a_000946">Using the ROS Navigation Stack</a>
                        <span class="text" id="span_009805" smilref="Programming_Robots_with_ROS00031.smil#span_009805">-</span>
                        <a data-type="index:locator" href="#ch10-idp25688064" external="false" id="a_000947" smilref="Programming_Robots_with_ROS00031.smil#a_000947">Seeing What's Going On</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000483">
                    <span class="text" id="span_009806" smilref="Programming_Robots_with_ROS00031.smil#span_009806">navigation goal</span>
                    <span class="text" id="span_009807" smilref="Programming_Robots_with_ROS00031.smil#span_009807">,</span>
                    <a data-type="index:locator" href="#ch10-idp25639152" external="false" id="a_000948" smilref="Programming_Robots_with_ROS00031.smil#a_000948">The ROS Navigation Stack</a>
                  </li>
                  <li data-gentext="see" id="li_000484">
                    <span data-type="index-term" id="span_009808" smilref="Programming_Robots_with_ROS00031.smil#span_009808">navigation maps</span>
                    <span class="text" id="span_009809" smilref="Programming_Robots_with_ROS00031.smil#span_009809">(</span>
                    <span class="text" id="span_009810" smilref="Programming_Robots_with_ROS00031.smil#span_009810">see</span>
                    <span class="text" id="span_009811" smilref="Programming_Robots_with_ROS00031.smil#span_009811">maps)</span>
                  </li>
                  <li data-type="index-term" id="li_000485">
                    <span class="text" id="span_009812" smilref="Programming_Robots_with_ROS00031.smil#span_009812">navigation stack (nav stack)</span>
                    <span class="text" id="span_009813" smilref="Programming_Robots_with_ROS00031.smil#span_009813">,</span>
                    <a data-type="index:locator" href="#ch10-ix_10-navigation-asciidoc5" external="false" id="a_000949" smilref="Programming_Robots_with_ROS00031.smil#a_000949">Using the ROS Navigation Stack</a>
                    <span class="text" id="span_009814" smilref="Programming_Robots_with_ROS00031.smil#span_009814">-</span>
                    <a data-type="index:locator" href="#ch10-idp25688064" external="false" id="a_000950" smilref="Programming_Robots_with_ROS00031.smil#a_000950">Seeing What's Going On</a>
                    <list type="ul" id="list_000093">
                      <li data-type="index-term" id="li_000486">
                        <span class="text" id="span_009815" smilref="Programming_Robots_with_ROS00031.smil#span_009815">configuration for TortoiseBot</span>
                        <span class="text" id="span_009816" smilref="Programming_Robots_with_ROS00031.smil#span_009816">,</span>
                        <a data-type="index:locator" href="#ch17-ix_17-rossify_robots2-asciidoc9" external="false" id="a_000951" smilref="Programming_Robots_with_ROS00031.smil#a_000951">Configuring the Navigation Stack</a>
                        <span class="text" id="span_009817" smilref="Programming_Robots_with_ROS00031.smil#span_009817">-</span>
                        <a data-type="index:locator" href="#ch17-idp41168176" external="false" id="a_000952" smilref="Programming_Robots_with_ROS00031.smil#a_000952">Configuring the Navigation Stack</a>
                      </li>
                      <li data-type="index-term" id="li_000487">
                        <span class="text" id="span_009818" smilref="Programming_Robots_with_ROS00031.smil#span_009818">in action</span>
                        <span class="text" id="span_009819" smilref="Programming_Robots_with_ROS00031.smil#span_009819">,</span>
                        <a data-type="index:locator" href="#ch10-ix_10-navigation-asciidoc6" external="false" id="a_000953" smilref="Programming_Robots_with_ROS00031.smil#a_000953">Seeing What's Going On</a>
                        <span class="text" id="span_009820" smilref="Programming_Robots_with_ROS00031.smil#span_009820">-</span>
                        <a data-type="index:locator" href="#ch10-idp25688064" external="false" id="a_000954" smilref="Programming_Robots_with_ROS00031.smil#a_000954">Seeing What's Going On</a>
                      </li>
                      <li data-type="index-term" id="li_000488">
                        <span class="text" id="span_009821" smilref="Programming_Robots_with_ROS00031.smil#span_009821">navigating in rviz</span>
                        <span class="text" id="span_009822" smilref="Programming_Robots_with_ROS00031.smil#span_009822">,</span>
                        <a data-type="index:locator" href="#ch10-idp25649392" external="false" id="a_000955" smilref="Programming_Robots_with_ROS00031.smil#a_000955">Navigating in rviz</a>
                      </li>
                      <li data-type="index-term" id="li_000489">
                        <span class="text" id="span_009823" smilref="Programming_Robots_with_ROS00031.smil#span_009823">steps in operation of</span>
                        <span class="text" id="span_009824" smilref="Programming_Robots_with_ROS00031.smil#span_009824">,</span>
                        <a data-type="index:locator" href="#ch10-idp25636864" external="false" id="a_000956" smilref="Programming_Robots_with_ROS00031.smil#a_000956">The ROS Navigation Stack</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000490">
                    <span class="text" id="span_009825" smilref="Programming_Robots_with_ROS00031.smil#span_009825">network settings, debugging</span>
                    <span class="text" id="span_009826" smilref="Programming_Robots_with_ROS00031.smil#span_009826">,</span>
                    <a data-type="index:locator" href="#ch21-ix_21-debugging-asciidoc22" external="false" id="a_000957" smilref="Programming_Robots_with_ROS00031.smil#a_000957">Problem: Incorrect Network Settings</a>
                    <span class="text" id="span_009827" smilref="Programming_Robots_with_ROS00031.smil#span_009827">-</span>
                    <a data-type="index:locator" href="#ch21-idp45253024" external="false" id="a_000958" smilref="Programming_Robots_with_ROS00031.smil#a_000958">Problem: Incorrect Network Settings</a>
                  </li>
                  <li id="li_000491">
                    <span data-type="index-term" id="span_009828" smilref="Programming_Robots_with_ROS00031.smil#span_009828">new message</span>
                    <list type="ul" id="list_000094">
                      <li data-type="index-term" id="li_000492">
                        <span class="text" id="span_009829" smilref="Programming_Robots_with_ROS00031.smil#span_009829">defining</span>
                        <span class="text" id="span_009830" smilref="Programming_Robots_with_ROS00031.smil#span_009830">,</span>
                        <a data-type="index:locator" href="#ch03-ix_3-topics-asciidoc10" external="false" id="a_000959" smilref="Programming_Robots_with_ROS00031.smil#a_000959">Defining a New Message</a>
                        <span class="text" id="span_009831" smilref="Programming_Robots_with_ROS00031.smil#span_009831">-</span>
                        <a data-type="index:locator" href="#ch03-idp18326320" external="false" id="a_000960" smilref="Programming_Robots_with_ROS00031.smil#a_000960">Defining a New Message</a>
                      </li>
                      <li data-type="index-term" id="li_000493">
                        <span class="text" id="span_009832" smilref="Programming_Robots_with_ROS00031.smil#span_009832">determining appropriateness of creating</span>
                        <span class="text" id="span_009833" smilref="Programming_Robots_with_ROS00031.smil#span_009833">,</span>
                        <a data-type="index:locator" href="#ch03-idp18439840" external="false" id="a_000961" smilref="Programming_Robots_with_ROS00031.smil#a_000961">When Should You Make a New Message Type?</a>
                      </li>
                      <li data-type="index-term" id="li_000494">
                        <span class="text" id="span_009834" smilref="Programming_Robots_with_ROS00031.smil#span_009834">using</span>
                        <span class="text" id="span_009835" smilref="Programming_Robots_with_ROS00031.smil#span_009835">,</span>
                        <a data-type="index:locator" href="#ch03-idp18331408" external="false" id="a_000962" smilref="Programming_Robots_with_ROS00031.smil#a_000962">Using Your New Message</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000495">
                    <span class="text" id="span_009836" smilref="Programming_Robots_with_ROS00031.smil#span_009836">nodes</span>
                    <span class="text" id="span_009837" smilref="Programming_Robots_with_ROS00031.smil#span_009837">,</span>
                    <a data-type="index:locator" href="#ch02-idp131632" external="false" id="a_000963" smilref="Programming_Robots_with_ROS00031.smil#a_000963">The ROS Graph</a>
                    <list type="ul" id="list_000095">
                      <li data-type="index-term" id="li_000496">
                        <span class="text" id="span_009838" smilref="Programming_Robots_with_ROS00031.smil#span_009838">catkin_make and</span>
                        <span class="text" id="span_009839" smilref="Programming_Robots_with_ROS00031.smil#span_009839">,</span>
                        <a data-type="index:locator" href="#ch23-idp45684832" external="false" id="a_000964" smilref="Programming_Robots_with_ROS00031.smil#a_000964">catkin_make</a>
                      </li>
                      <li data-type="index-term" id="li_000497">
                        <span class="text" id="span_009840" smilref="Programming_Robots_with_ROS00031.smil#span_009840">debugging connection problems</span>
                        <span class="text" id="span_009841" smilref="Programming_Robots_with_ROS00031.smil#span_009841">,</span>
                        <a data-type="index:locator" href="#ch21-ix_21-debugging-asciidoc12" external="false" id="a_000965" smilref="Programming_Robots_with_ROS00031.smil#a_000965">Nodes, Topics, and Connections: rqt_graph and rosnode</a>
                        <span class="text" id="span_009842" smilref="Programming_Robots_with_ROS00031.smil#span_009842">-</span>
                        <a data-type="index:locator" href="#ch21-idp45253024" external="false" id="a_000966" smilref="Programming_Robots_with_ROS00031.smil#a_000966">Problem: Incorrect Network Settings</a>
                      </li>
                      <li data-type="index-term" id="li_000498">
                        <span class="text" id="span_009843" smilref="Programming_Robots_with_ROS00031.smil#span_009843">roslaunch for starting multiple nodes</span>
                        <span class="text" id="span_009844" smilref="Programming_Robots_with_ROS00031.smil#span_009844">,</span>
                        <a data-type="index:locator" href="#ch20-ix_20-tools-asciidoc1" external="false" id="a_000967" smilref="Programming_Robots_with_ROS00031.smil#a_000967">Starting Many Nodes: roslaunch</a>
                        <span class="text" id="span_009845" smilref="Programming_Robots_with_ROS00031.smil#span_009845">-</span>
                        <a data-type="index:locator" href="#ch20-idp44202816" external="false" id="a_000968" smilref="Programming_Robots_with_ROS00031.smil#a_000968">Starting Many Nodes: roslaunch</a>
                      </li>
                      <li data-type="index-term" id="li_000499">
                        <span class="text" id="span_009846" smilref="Programming_Robots_with_ROS00031.smil#span_009846">rosnode for inspecting</span>
                        <span class="text" id="span_009847" smilref="Programming_Robots_with_ROS00031.smil#span_009847">,</span>
                        <a data-type="index:locator" href="#ch20-idp44734560" external="false" id="a_000969" smilref="Programming_Robots_with_ROS00031.smil#a_000969">Introspection: rosnode, rostopic, rosmsg, rosservice, and rossrv</a>
                      </li>
                      <li data-type="index-term" id="li_000500">
                        <span class="text" id="span_009848" smilref="Programming_Robots_with_ROS00031.smil#span_009848">rosrun for starting single node</span>
                        <span class="text" id="span_009849" smilref="Programming_Robots_with_ROS00031.smil#span_009849">,</span>
                        <a data-type="index:locator" href="#ch20-idp43813760" external="false" id="a_000970" smilref="Programming_Robots_with_ROS00031.smil#a_000970">Starting a Node: rosrun</a>
                      </li>
                      <li data-type="index-term" id="li_000501">
                        <span class="text" id="span_009850" smilref="Programming_Robots_with_ROS00031.smil#span_009850">rostest for testing many-node system</span>
                        <span class="text" id="span_009851" smilref="Programming_Robots_with_ROS00031.smil#span_009851">,</span>
                        <a data-type="index:locator" href="#ch20-ix_20-tools-asciidoc4" external="false" id="a_000971" smilref="Programming_Robots_with_ROS00031.smil#a_000971">Testing a Many-Node System: rostest</a>
                        <span class="text" id="span_009852" smilref="Programming_Robots_with_ROS00031.smil#span_009852">-</span>
                        <a data-type="index:locator" href="#ch20-idp44812240" external="false" id="a_000972" smilref="Programming_Robots_with_ROS00031.smil#a_000972">Testing a Many-Node System: rostest</a>
                      </li>
                      <li data-type="index-term" id="li_000502">
                        <span class="text" id="span_009853" smilref="Programming_Robots_with_ROS00031.smil#span_009853">stale state cleanup</span>
                        <span class="text" id="span_009854" smilref="Programming_Robots_with_ROS00031.smil#span_009854">,</span>
                        <a data-type="index:locator" href="#ch20-idp43768560" external="false" id="a_000973" smilref="Programming_Robots_with_ROS00031.smil#a_000973">The Master and Friends: roscore</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000503">
                    <span class="text" id="span_009855" smilref="Programming_Robots_with_ROS00031.smil#span_009855">non-holonomic platforms</span>
                    <span class="text" id="span_009856" smilref="Programming_Robots_with_ROS00031.smil#span_009856">,</span>
                    <a data-type="index:locator" href="#ch06-idp21672752" external="false" id="a_000974" smilref="Programming_Robots_with_ROS00031.smil#a_000974">Actuation: Mobile Platform</a>
                  </li>
                </list>
              </div>
              <h1 id="h1_000557" smilref="Programming_Robots_with_ROS00031.smil#h1_000557">O</h1>
              <div data-type="indexdiv" id="div_000065">
                <list type="ul" id="list_000096">
                  <li data-type="index-term" id="li_000504">
                    <span class="text" id="span_009857" smilref="Programming_Robots_with_ROS00031.smil#span_009857">octomap package</span>
                    <span class="text" id="span_009858" smilref="Programming_Robots_with_ROS00031.smil#span_009858">,</span>
                    <a data-type="index:locator" href="#ch14-idp35870208" external="false" id="a_000975" smilref="Programming_Robots_with_ROS00031.smil#a_000975">Picking Up the Item</a>
                  </li>
                  <li data-type="index-term" id="li_000505">
                    <span class="text" id="span_009859" smilref="Programming_Robots_with_ROS00031.smil#span_009859">odometry</span>
                    <span class="text" id="span_009860" smilref="Programming_Robots_with_ROS00031.smil#span_009860">,</span>
                    <a data-type="index:locator" href="#ch06-idp21820000" external="false" id="a_000976" smilref="Programming_Robots_with_ROS00031.smil#a_000976">Shaft encoders</a>
                    <span class="text" id="span_009861" smilref="Programming_Robots_with_ROS00031.smil#span_009861">,</span>
                    <a data-type="index:locator" href="#ch08-idp25126304" external="false" id="a_000977" smilref="Programming_Robots_with_ROS00031.smil#a_000977">rviz</a>
                    <list type="ul" id="list_000097">
                      <li data-type="index-term" id="li_000506">
                        <span class="text" id="span_009862" smilref="Programming_Robots_with_ROS00031.smil#span_009862">odom topic</span>
                        <span class="text" id="span_009863" smilref="Programming_Robots_with_ROS00031.smil#span_009863">,</span>
                        <a data-type="index:locator" href="#ch08-idp25127008" external="false" id="a_000978" smilref="Programming_Robots_with_ROS00031.smil#a_000978">rviz</a>
                        <span class="text" id="span_009864" smilref="Programming_Robots_with_ROS00031.smil#span_009864">,</span>
                        <a data-type="index:locator" href="#ch17-idp41101792" external="false" id="a_000979" smilref="Programming_Robots_with_ROS00031.smil#a_000979">Configuring the Navigation Stack</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000507">
                    <span class="text" id="span_009865" smilref="Programming_Robots_with_ROS00031.smil#span_009865">online etiquette</span>
                    <span class="text" id="span_009866" smilref="Programming_Robots_with_ROS00031.smil#span_009866">,</span>
                    <a data-type="index:locator" href="#ch22-idp45582752" external="false" id="a_000980" smilref="Programming_Robots_with_ROS00031.smil#a_000980">Etiquette</a>
                  </li>
                  <li data-gentext="see" id="li_000508">
                    <span data-type="index-term" id="span_009867" smilref="Programming_Robots_with_ROS00031.smil#span_009867">online resources, ROS community</span>
                    <span class="text" id="span_009868" smilref="Programming_Robots_with_ROS00031.smil#span_009868">(</span>
                    <span class="text" id="span_009869" smilref="Programming_Robots_with_ROS00031.smil#span_009869">see</span>
                    <span class="text" id="span_009870" smilref="Programming_Robots_with_ROS00031.smil#span_009870">ROS community)</span>
                  </li>
                  <li data-type="index-term" id="li_000509">
                    <span class="text" id="span_009871" smilref="Programming_Robots_with_ROS00031.smil#span_009871">Open Dynamics Engine</span>
                    <span class="text" id="span_009872" smilref="Programming_Robots_with_ROS00031.smil#span_009872">,</span>
                    <a data-type="index:locator" href="#ch06-idp21909008" external="false" id="a_000981" smilref="Programming_Robots_with_ROS00031.smil#a_000981">Gazebo</a>
                  </li>
                  <li data-type="index-term" id="li_000510">
                    <span class="text" id="span_009873" smilref="Programming_Robots_with_ROS00031.smil#span_009873">open kinematic chain</span>
                    <span class="text" id="span_009874" smilref="Programming_Robots_with_ROS00031.smil#span_009874">,</span>
                    <a data-type="index:locator" href="#ch11-idp26425696" external="false" id="a_000982" smilref="Programming_Robots_with_ROS00031.smil#a_000982">Joints, Links, and Kinematic Chains</a>
                  </li>
                  <li data-type="index-term" id="li_000511">
                    <span class="text" id="span_009875" smilref="Programming_Robots_with_ROS00031.smil#span_009875">OpenCV</span>
                    <span class="text" id="span_009876" smilref="Programming_Robots_with_ROS00031.smil#span_009876">,</span>
                    <a data-type="index:locator" href="#ch12-idp28890880" external="false" id="a_000983" smilref="Programming_Robots_with_ROS00031.smil#a_000983">Follow-bot</a>
                    <span class="text" id="span_009877" smilref="Programming_Robots_with_ROS00031.smil#span_009877">,</span>
                    <a data-type="index:locator" href="#ch12-idp28979728" external="false" id="a_000984" smilref="Programming_Robots_with_ROS00031.smil#a_000984">Acquiring Images</a>
                    <span class="text" id="span_009878" smilref="Programming_Robots_with_ROS00031.smil#span_009878">,</span>
                    <a data-type="index:locator" href="#ch12-ix_12-followbot-asciidoc3" external="false" id="a_000985" smilref="Programming_Robots_with_ROS00031.smil#a_000985">Detecting the Line</a>
                    <span class="text" id="span_009879" smilref="Programming_Robots_with_ROS00031.smil#span_009879">-</span>
                    <a data-type="index:locator" href="#ch12-idp30223632" external="false" id="a_000986" smilref="Programming_Robots_with_ROS00031.smil#a_000986">Detecting the Line</a>
                  </li>
                  <li data-type="index-term" id="li_000512">
                    <span class="text" id="span_009880" smilref="Programming_Robots_with_ROS00031.smil#span_009880">OpenVPN</span>
                    <span class="text" id="span_009881" smilref="Programming_Robots_with_ROS00031.smil#span_009881">,</span>
                    <a data-type="index:locator" href="#ch21-idp45250720" external="false" id="a_000987" smilref="Programming_Robots_with_ROS00031.smil#a_000987">Problem: Incorrect Network Settings</a>
                  </li>
                  <li data-type="index-term" id="li_000513">
                    <span class="text" id="span_009882" smilref="Programming_Robots_with_ROS00031.smil#span_009882">optical limit switches</span>
                    <span class="text" id="span_009883" smilref="Programming_Robots_with_ROS00031.smil#span_009883">,</span>
                    <a data-type="index:locator" href="#ch06-idp21754576" external="false" id="a_000988" smilref="Programming_Robots_with_ROS00031.smil#a_000988">Sensors</a>
                  </li>
                  <li data-type="index-term" id="li_000514">
                    <span class="text" id="span_009884" smilref="Programming_Robots_with_ROS00031.smil#span_009884">orientation</span>
                    <span class="text" id="span_009885" smilref="Programming_Robots_with_ROS00031.smil#span_009885">,</span>
                    <a data-type="index:locator" href="#ch02-idp17081232" external="false" id="a_000989" smilref="Programming_Robots_with_ROS00031.smil#a_000989">Poses, Positions, and Orientations</a>
                  </li>
                  <li data-type="index-term" id="li_000515">
                    <span class="text" id="span_009886" smilref="Programming_Robots_with_ROS00031.smil#span_009886">origin (coordinate frame of reference)</span>
                    <span class="text" id="span_009887" smilref="Programming_Robots_with_ROS00031.smil#span_009887">,</span>
                    <a data-type="index:locator" href="#ch02-idp17074784" external="false" id="a_000990" smilref="Programming_Robots_with_ROS00031.smil#a_000990">Poses, Positions, and Orientations</a>
                  </li>
                </list>
              </div>
              <h1 id="h1_000558" smilref="Programming_Robots_with_ROS00031.smil#h1_000558">P</h1>
              <div data-type="indexdiv" id="div_000066">
                <list type="ul" id="list_000098">
                  <li data-type="index-term" id="li_000516">
                    <span class="text" id="span_009888" smilref="Programming_Robots_with_ROS00031.smil#span_009888">P-controller</span>
                    <span class="text" id="span_009889" smilref="Programming_Robots_with_ROS00031.smil#span_009889">,</span>
                    <a data-type="index:locator" href="#ch12-ix_12-followbot-asciidoc9" external="false" id="a_000991" smilref="Programming_Robots_with_ROS00031.smil#a_000991">Following the Line</a>
                    <span class="text" id="span_009890" smilref="Programming_Robots_with_ROS00031.smil#span_009890">-</span>
                    <a data-type="index:locator" href="#ch12-idp30775248" external="false" id="a_000992" smilref="Programming_Robots_with_ROS00031.smil#a_000992">Summary</a>
                  </li>
                  <li data-type="index-term" id="li_000517">
                    <span class="text" id="span_009891" smilref="Programming_Robots_with_ROS00031.smil#span_009891">package.xml</span>
                    <span class="text" id="span_009892" smilref="Programming_Robots_with_ROS00031.smil#span_009892">,</span>
                    <a data-type="index:locator" href="#ch02-idm202464" external="false" id="a_000993" smilref="Programming_Robots_with_ROS00031.smil#a_000993">catkin</a>
                    <span class="text" id="span_009893" smilref="Programming_Robots_with_ROS00031.smil#span_009893">,</span>
                    <a data-type="index:locator" href="#ch14-idp35419744" external="false" id="a_000994" smilref="Programming_Robots_with_ROS00031.smil#a_000994">Stockroom Simulation</a>
                    <span class="text" id="span_009894" smilref="Programming_Robots_with_ROS00031.smil#span_009894">,</span>
                    <a data-type="index:locator" href="#ch23-idp45680816" external="false" id="a_000995" smilref="Programming_Robots_with_ROS00031.smil#a_000995">package.xml</a>
                  </li>
                  <li data-type="index-term" id="li_000518">
                    <span class="text" id="span_009895" smilref="Programming_Robots_with_ROS00031.smil#span_009895">pan/tilt assembly</span>
                    <span class="text" id="span_009896" smilref="Programming_Robots_with_ROS00031.smil#span_009896">,</span>
                    <a data-type="index:locator" href="#ch06-idp21763264" external="false" id="a_000996" smilref="Programming_Robots_with_ROS00031.smil#a_000996">Sensors</a>
                  </li>
                  <li data-type="index-term" id="li_000519">
                    <span class="text" id="span_009897" smilref="Programming_Robots_with_ROS00031.smil#span_009897">parameter server</span>
                    <span class="text" id="span_009898" smilref="Programming_Robots_with_ROS00031.smil#span_009898">,</span>
                    <a data-type="index:locator" href="#ch02-idp167088" external="false" id="a_000997" smilref="Programming_Robots_with_ROS00031.smil#a_000997">roscore</a>
                    <list type="ul" id="list_000099">
                      <li data-type="index-term" id="li_000520">
                        <span class="text" id="span_009899" smilref="Programming_Robots_with_ROS00031.smil#span_009899">roscore and</span>
                        <span class="text" id="span_009900" smilref="Programming_Robots_with_ROS00031.smil#span_009900">,</span>
                        <a data-type="index:locator" href="#ch20-idp43722496" external="false" id="a_000998" smilref="Programming_Robots_with_ROS00031.smil#a_000998">The Master and Friends: roscore</a>
                      </li>
                      <li data-type="index-term" id="li_000521">
                        <span class="text" id="span_009901" smilref="Programming_Robots_with_ROS00031.smil#span_009901">rosparam and</span>
                        <span class="text" id="span_009902" smilref="Programming_Robots_with_ROS00031.smil#span_009902">,</span>
                        <a data-type="index:locator" href="#ch20-idp43773904" external="false" id="a_000999" smilref="Programming_Robots_with_ROS00031.smil#a_000999">Parameters: rosparam</a>
                      </li>
                      <li data-type="index-term" id="li_000522">
                        <span class="text" id="span_009903" smilref="Programming_Robots_with_ROS00031.smil#span_009903">teleop-bot and</span>
                        <span class="text" id="span_009904" smilref="Programming_Robots_with_ROS00031.smil#span_009904">,</span>
                        <a data-type="index:locator" href="#ch08-ix_8-teleop_bot-asciidoc5" external="false" id="a_001000" smilref="Programming_Robots_with_ROS00031.smil#a_001000">Parameter Server</a>
                        <span class="text" id="span_009905" smilref="Programming_Robots_with_ROS00031.smil#span_009905">-</span>
                        <a data-type="index:locator" href="#ch08-idp24260864" external="false" id="a_001001" smilref="Programming_Robots_with_ROS00031.smil#a_001001">Parameter Server</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000523">
                    <span class="text" id="span_009906" smilref="Programming_Robots_with_ROS00031.smil#span_009906">patrolling</span>
                    <span class="text" id="span_009907" smilref="Programming_Robots_with_ROS00031.smil#span_009907">,</span>
                    <a data-type="index:locator" href="#ch13-ix_13-patrol-asciidoc0" external="false" id="a_001002" smilref="Programming_Robots_with_ROS00031.smil#a_001002">On Patrol</a>
                    <span class="text" id="span_009908" smilref="Programming_Robots_with_ROS00031.smil#span_009908">-</span>
                    <a data-type="index:locator" href="#ch13-idp35457248" external="false" id="a_001003" smilref="Programming_Robots_with_ROS00031.smil#a_001003">Summary</a>
                    <list type="ul" id="list_000100">
                      <li data-type="index-term" id="li_000524">
                        <span class="text" id="span_009909" smilref="Programming_Robots_with_ROS00031.smil#span_009909">and smach_ros package</span>
                        <span class="text" id="span_009910" smilref="Programming_Robots_with_ROS00031.smil#span_009910">,</span>
                        <a data-type="index:locator" href="#ch13-idp33353408" external="false" id="a_001004" smilref="Programming_Robots_with_ROS00031.smil#a_001004">A Better Way to Patrol</a>
                      </li>
                      <li data-type="index-term" id="li_000525">
                        <span class="text" id="span_009911" smilref="Programming_Robots_with_ROS00031.smil#span_009911">simple system for</span>
                        <span class="text" id="span_009912" smilref="Programming_Robots_with_ROS00031.smil#span_009912">,</span>
                        <a data-type="index:locator" href="#ch13-idp30782208" external="false" id="a_001005" smilref="Programming_Robots_with_ROS00031.smil#a_001005">Simple Patrolling</a>
                      </li>
                      <li data-type="index-term" id="li_000526">
                        <span class="text" id="span_009913" smilref="Programming_Robots_with_ROS00031.smil#span_009913">state machines</span>
                        <span class="text" id="span_009914" smilref="Programming_Robots_with_ROS00031.smil#span_009914">,</span>
                        <a data-type="index:locator" href="#ch13-ix_13-patrol-asciidoc1" external="false" id="a_001006" smilref="Programming_Robots_with_ROS00031.smil#a_001006">State Machines</a>
                        <span class="text" id="span_009915" smilref="Programming_Robots_with_ROS00031.smil#span_009915">-</span>
                        <a data-type="index:locator" href="#ch13-idp35466096" external="false" id="a_001007" smilref="Programming_Robots_with_ROS00031.smil#a_001007">A Better Way to Patrol</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000527">
                    <span class="text" id="span_009916" smilref="Programming_Robots_with_ROS00031.smil#span_009916">peer-to-peer development philosophy</span>
                    <span class="text" id="span_009917" smilref="Programming_Robots_with_ROS00031.smil#span_009917">,</span>
                    <a data-type="index:locator" href="#ch01-idp194128" external="false" id="a_001008" smilref="Programming_Robots_with_ROS00031.smil#a_001008">Philosophy</a>
                    <span class="text" id="span_009918" smilref="Programming_Robots_with_ROS00031.smil#span_009918">,</span>
                    <a data-type="index:locator" href="#ch02-idp145840" external="false" id="a_001009" smilref="Programming_Robots_with_ROS00031.smil#a_001009">roscore</a>
                  </li>
                  <li data-type="index-term" id="li_000528">
                    <span class="text" id="span_009919" smilref="Programming_Robots_with_ROS00031.smil#span_009919">personal robots</span>
                    <span class="text" id="span_009920" smilref="Programming_Robots_with_ROS00031.smil#span_009920">,</span>
                    <a data-type="index:locator" href="#ch06-idp21727008" external="false" id="a_001010" smilref="Programming_Robots_with_ROS00031.smil#a_001010">Actuation: Manipulator Arm</a>
                  </li>
                  <li data-type="index-term" id="li_000529">
                    <span class="text" id="span_009921" smilref="Programming_Robots_with_ROS00031.smil#span_009921">PGN (Portable Game Notation)</span>
                    <span class="text" id="span_009922" smilref="Programming_Robots_with_ROS00031.smil#span_009922">,</span>
                    <a data-type="index:locator" href="#ch11-ix_11-chessbot-asciidoc19" external="false" id="a_001011" smilref="Programming_Robots_with_ROS00031.smil#a_001011">Playing Back a Famous Chess Game</a>
                  </li>
                  <li id="li_000530">
                    <span data-type="index-term" id="span_009923" smilref="Programming_Robots_with_ROS00031.smil#span_009923">pick and place</span>
                    <list type="ul" id="list_000101">
                      <li data-type="index-term" id="li_000531">
                        <span class="text" id="span_009924" smilref="Programming_Robots_with_ROS00031.smil#span_009924">and manipulator arms</span>
                        <span class="text" id="span_009925" smilref="Programming_Robots_with_ROS00031.smil#span_009925">,</span>
                        <a data-type="index:locator" href="#ch06-idp21721744" external="false" id="a_001012" smilref="Programming_Robots_with_ROS00031.smil#a_001012">Actuation: Manipulator Arm</a>
                      </li>
                      <li data-type="index-term" id="li_000532">
                        <span class="text" id="span_009926" smilref="Programming_Robots_with_ROS00032.smil#span_009926">with Stockroom-bot</span>
                        <span class="text" id="span_009927" smilref="Programming_Robots_with_ROS00032.smil#span_009927">,</span>
                        <a data-type="index:locator" href="#ch14-ix_14-stockroom_bot-asciidoc12" external="false" id="a_001013" smilref="Programming_Robots_with_ROS00032.smil#a_001013">Picking Up the Item</a>
                        <span class="text" id="span_009928" smilref="Programming_Robots_with_ROS00032.smil#span_009928">-</span>
                        <a data-type="index:locator" href="#ch14-idp38732608" external="false" id="a_001014" smilref="Programming_Robots_with_ROS00032.smil#a_001014">Picking Up the Item</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000533">
                    <span class="text" id="span_009929" smilref="Programming_Robots_with_ROS00032.smil#span_009929">pin joints</span>
                    <span class="text" id="span_009930" smilref="Programming_Robots_with_ROS00032.smil#span_009930">,</span>
                    <a data-type="index:locator" href="#ch06-idp21731520" external="false" id="a_001015" smilref="Programming_Robots_with_ROS00032.smil#a_001015">Actuation: Manipulator Arm</a>
                    <span class="text" id="span_009931" smilref="Programming_Robots_with_ROS00032.smil#span_009931">,</span>
                    <a data-type="index:locator" href="#ch11-idp26436992" external="false" id="a_001016" smilref="Programming_Robots_with_ROS00032.smil#a_001016">Joints, Links, and Kinematic Chains</a>
                  </li>
                  <li data-type="index-term" id="li_000534">
                    <span class="text" id="span_009932" smilref="Programming_Robots_with_ROS00032.smil#span_009932">planar robots</span>
                    <span class="text" id="span_009933" smilref="Programming_Robots_with_ROS00032.smil#span_009933">,</span>
                    <a data-type="index:locator" href="#ch06-idp21715936" external="false" id="a_001017" smilref="Programming_Robots_with_ROS00032.smil#a_001017">Actuation: Mobile Platform</a>
                  </li>
                  <li data-type="index-term" id="li_000535">
                    <span class="text" id="span_009934" smilref="Programming_Robots_with_ROS00032.smil#span_009934">playing back data</span>
                    <span class="text" id="span_009935" smilref="Programming_Robots_with_ROS00032.smil#span_009935">,</span>
                    <a data-type="index:locator" href="#ch21-ix_21-debugging-asciidoc35" external="false" id="a_001018" smilref="Programming_Robots_with_ROS00032.smil#a_001018">Logging and Playing Back Data: rosbag</a>
                    <span class="text" id="span_009936" smilref="Programming_Robots_with_ROS00032.smil#span_009936">-</span>
                    <a data-type="index:locator" href="#ch21-idp45543424" external="false" id="a_001019" smilref="Programming_Robots_with_ROS00032.smil#a_001019">Logging and Playing Back Data: rosbag</a>
                  </li>
                  <li data-type="index-term" id="li_000536">
                    <span class="text" id="span_009937" smilref="Programming_Robots_with_ROS00032.smil#span_009937">point clouds</span>
                    <span class="text" id="span_009938" smilref="Programming_Robots_with_ROS00032.smil#span_009938">,</span>
                    <a data-type="index:locator" href="#ch06-idp21797520" external="false" id="a_001020" smilref="Programming_Robots_with_ROS00032.smil#a_001020">Depth cameras</a>
                  </li>
                  <li data-type="index-term" id="li_000537">
                    <span class="text" id="span_009939" smilref="Programming_Robots_with_ROS00032.smil#span_009939">PointCloud2 plugin</span>
                    <span class="text" id="span_009940" smilref="Programming_Robots_with_ROS00032.smil#span_009940">,</span>
                    <a data-type="index:locator" href="#ch08-idp25162048" external="false" id="a_001021" smilref="Programming_Robots_with_ROS00032.smil#a_001021">rviz</a>
                  </li>
                  <li data-type="index-term" id="li_000538">
                    <span class="text" id="span_009941" smilref="Programming_Robots_with_ROS00032.smil#span_009941">port 11311</span>
                    <span class="text" id="span_009942" smilref="Programming_Robots_with_ROS00032.smil#span_009942">,</span>
                    <a data-type="index:locator" href="#ch02-idp154912" external="false" id="a_001022" smilref="Programming_Robots_with_ROS00032.smil#a_001022">roscore</a>
                  </li>
                  <li data-type="index-term" id="li_000539">
                    <span class="text" id="span_009943" smilref="Programming_Robots_with_ROS00032.smil#span_009943">Portable Game Notation (PGN)</span>
                    <span class="text" id="span_009944" smilref="Programming_Robots_with_ROS00032.smil#span_009944">,</span>
                    <a data-type="index:locator" href="#ch11-ix_11-chessbot-asciidoc19" external="false" id="a_001023" smilref="Programming_Robots_with_ROS00032.smil#a_001023">Playing Back a Famous Chess Game</a>
                  </li>
                  <li data-type="index-term" id="li_000540">
                    <span class="text" id="span_009945" smilref="Programming_Robots_with_ROS00032.smil#span_009945">pose</span>
                    <span class="text" id="span_009946" smilref="Programming_Robots_with_ROS00032.smil#span_009946">,</span>
                    <a data-type="index:locator" href="#ch10-idp25568000" external="false" id="a_001024" smilref="Programming_Robots_with_ROS00032.smil#a_001024">Localizing the Robot in a Map</a>
                    <list type="ul" id="list_000102">
                      <li data-type="index-term" id="li_000541">
                        <span class="text" id="span_009947" smilref="Programming_Robots_with_ROS00032.smil#span_009947">defined</span>
                        <span class="text" id="span_009948" smilref="Programming_Robots_with_ROS00032.smil#span_009948">,</span>
                        <a data-type="index:locator" href="#ch02-idp17081936" external="false" id="a_001025" smilref="Programming_Robots_with_ROS00032.smil#a_001025">Poses, Positions, and Orientations</a>
                      </li>
                      <li data-type="index-term" id="li_000542">
                        <span class="text" id="span_009949" smilref="Programming_Robots_with_ROS00032.smil#span_009949">initial</span>
                        <span class="text" id="span_009950" smilref="Programming_Robots_with_ROS00032.smil#span_009950">,</span>
                        <a data-type="index:locator" href="#ch10-idp25620624" external="false" id="a_001026" smilref="Programming_Robots_with_ROS00032.smil#a_001026">Tips for Setting a Better Initial Pose</a>
                        <span class="text" id="span_009951" smilref="Programming_Robots_with_ROS00032.smil#span_009951">,</span>
                        <a data-type="index:locator" href="#ch17-idp41187152" external="false" id="a_001027" smilref="Programming_Robots_with_ROS00032.smil#a_001027">Using rviz to Localize and Command a Navigating Robot</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000543">
                    <span class="text" id="span_009952" smilref="Programming_Robots_with_ROS00032.smil#span_009952">position</span>
                    <span class="text" id="span_009953" smilref="Programming_Robots_with_ROS00032.smil#span_009953">,</span>
                    <a data-type="index:locator" href="#ch02-idp17078176" external="false" id="a_001028" smilref="Programming_Robots_with_ROS00032.smil#a_001028">Poses, Positions, and Orientations</a>
                  </li>
                  <li data-type="index-term" id="li_000544">
                    <span class="text" id="span_009954" smilref="Programming_Robots_with_ROS00032.smil#span_009954">POSIX</span>
                    <span class="text" id="span_009955" smilref="Programming_Robots_with_ROS00032.smil#span_009955">,</span>
                    <a data-type="index:locator" href="#ch01-idp112320" external="false" id="a_001029" smilref="Programming_Robots_with_ROS00032.smil#a_001029">Installation</a>
                  </li>
                  <li data-type="index-term" id="li_000545">
                    <span class="text" id="span_009956" smilref="Programming_Robots_with_ROS00032.smil#span_009956">PR2 robot</span>
                    <span class="text" id="span_009957" smilref="Programming_Robots_with_ROS00032.smil#span_009957">,</span>
                    <a data-type="index:locator" href="#ch06-idp21848736" external="false" id="a_001030" smilref="Programming_Robots_with_ROS00032.smil#a_001030">PR2</a>
                    <list type="ul" id="list_000103">
                      <li data-type="index-term" id="li_000546">
                        <span class="text" id="span_009958" smilref="Programming_Robots_with_ROS00032.smil#span_009958">in simulated stockroom</span>
                        <span class="text" id="span_009959" smilref="Programming_Robots_with_ROS00032.smil#span_009959">,</span>
                        <a data-type="index:locator" href="#ch14-ix_14-stockroom_bot-asciidoc9" external="false" id="a_001031" smilref="Programming_Robots_with_ROS00032.smil#a_001031">Driving to Bins</a>
                      </li>
                      <li data-type="index-term" id="li_000547">
                        <span class="text" id="span_009960" smilref="Programming_Robots_with_ROS00032.smil#span_009960">state machine for plugging-in behavior</span>
                        <span class="text" id="span_009961" smilref="Programming_Robots_with_ROS00032.smil#span_009961">,</span>
                        <a data-type="index:locator" href="#ch13-ix_13-patrol-asciidoc4" external="false" id="a_001032" smilref="Programming_Robots_with_ROS00032.smil#a_001032">State Machines</a>
                        <span class="text" id="span_009962" smilref="Programming_Robots_with_ROS00032.smil#span_009962">-</span>
                        <a data-type="index:locator" href="#ch13-idp30825664" external="false" id="a_001033" smilref="Programming_Robots_with_ROS00032.smil#a_001033">State Machines</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000548">
                    <span class="text" id="span_009963" smilref="Programming_Robots_with_ROS00032.smil#span_009963">primitive message types</span>
                    <span class="text" id="span_009964" smilref="Programming_Robots_with_ROS00032.smil#span_009964">,</span>
                    <a data-type="index:locator" href="#ch03-ix_3-topics-asciidoc5" external="false" id="a_001034" smilref="Programming_Robots_with_ROS00032.smil#a_001034">Defining Your Own Message Types</a>
                    <span class="text" id="span_009965" smilref="Programming_Robots_with_ROS00032.smil#span_009965">-</span>
                    <a data-type="index:locator" href="#ch03-idp18080736" external="false" id="a_001035" smilref="Programming_Robots_with_ROS00032.smil#a_001035">Defining Your Own Message Types</a>
                  </li>
                  <li data-type="index-term" id="li_000549">
                    <span class="text" id="span_009966" smilref="Programming_Robots_with_ROS00032.smil#span_009966">prismatic joints</span>
                    <span class="text" id="span_009967" smilref="Programming_Robots_with_ROS00032.smil#span_009967">,</span>
                    <a data-type="index:locator" href="#ch06-idp21733968" external="false" id="a_001036" smilref="Programming_Robots_with_ROS00032.smil#a_001036">Actuation: Manipulator Arm</a>
                    <span class="text" id="span_009968" smilref="Programming_Robots_with_ROS00032.smil#span_009968">,</span>
                    <a data-type="index:locator" href="#ch11-idp25906016" external="false" id="a_001037" smilref="Programming_Robots_with_ROS00032.smil#a_001037">Joints, Links, and Kinematic Chains</a>
                  </li>
                  <li data-type="index-term" id="li_000550">
                    <span class="text" id="span_009969" smilref="Programming_Robots_with_ROS00032.smil#span_009969">private parameter name</span>
                    <span class="text" id="span_009970" smilref="Programming_Robots_with_ROS00032.smil#span_009970">,</span>
                    <a data-type="index:locator" href="#ch08-idp23952928" external="false" id="a_001038" smilref="Programming_Robots_with_ROS00032.smil#a_001038">Parameter Server</a>
                  </li>
                  <li data-type="index-term" id="li_000551">
                    <span class="text" id="span_009971" smilref="Programming_Robots_with_ROS00032.smil#span_009971">Programmable Universal Machine for Assembly (PUMA) robot arms</span>
                    <span class="text" id="span_009972" smilref="Programming_Robots_with_ROS00032.smil#span_009972">,</span>
                    <a data-type="index:locator" href="#ch18-ix_18-rossify_robots3-asciidoc0" external="false" id="a_001039" smilref="Programming_Robots_with_ROS00032.smil#a_001039">CougarBot</a>
                  </li>
                  <li data-type="index-term" id="li_000552">
                    <span class="text" id="span_009973" smilref="Programming_Robots_with_ROS00032.smil#span_009973">publish/subscribe communication mechanism</span>
                    <span class="text" id="span_009974" smilref="Programming_Robots_with_ROS00032.smil#span_009974">,</span>
                    <a data-type="index:locator" href="#ch03-idp17126784" external="false" id="a_001040" smilref="Programming_Robots_with_ROS00032.smil#a_001040">Topics</a>
                    <span class="text" id="span_009975" smilref="Programming_Robots_with_ROS00032.smil#span_009975">,</span>
                    <a data-type="index:locator" href="#ch03-idp18442816" external="false" id="a_001041" smilref="Programming_Robots_with_ROS00032.smil#a_001041">Mixing Publishers and Subscribers</a>
                  </li>
                  <li data-type="index-term" id="li_000553">
                    <span class="text" id="span_009976" smilref="Programming_Robots_with_ROS00032.smil#span_009976">Publisher</span>
                    <span class="text" id="span_009977" smilref="Programming_Robots_with_ROS00032.smil#span_009977">,</span>
                    <a data-type="index:locator" href="#ch03-idp17593488" external="false" id="a_001042" smilref="Programming_Robots_with_ROS00032.smil#a_001042">Publishing to a Topic</a>
                  </li>
                  <li id="li_000554">
                    <span data-type="index-term" id="span_009978" smilref="Programming_Robots_with_ROS00032.smil#span_009978">publishing</span>
                    <list type="ul" id="list_000104">
                      <li data-type="index-term" id="li_000555">
                        <span class="text" id="span_009979" smilref="Programming_Robots_with_ROS00032.smil#span_009979">checking</span>
                        <span class="text" id="span_009980" smilref="Programming_Robots_with_ROS00032.smil#span_009980">,</span>
                        <a data-type="index:locator" href="#ch03-idp17824128" external="false" id="a_001043" smilref="Programming_Robots_with_ROS00032.smil#a_001043">Checking That Everything Works as Expected</a>
                      </li>
                      <li data-type="index-term" id="li_000556">
                        <span class="text" id="span_009981" smilref="Programming_Robots_with_ROS00032.smil#span_009981">mixing publishers and subscribers</span>
                        <span class="text" id="span_009982" smilref="Programming_Robots_with_ROS00032.smil#span_009982">,</span>
                        <a data-type="index:locator" href="#ch03-idp18442816" external="false" id="a_001044" smilref="Programming_Robots_with_ROS00032.smil#a_001044">Mixing Publishers and Subscribers</a>
                      </li>
                      <li data-type="index-term" id="li_000557">
                        <span class="text" id="span_009983" smilref="Programming_Robots_with_ROS00032.smil#span_009983">to a topic</span>
                        <span class="text" id="span_009984" smilref="Programming_Robots_with_ROS00032.smil#span_009984">,</span>
                        <a data-type="index:locator" href="#ch03-idp17167760" external="false" id="a_001045" smilref="Programming_Robots_with_ROS00032.smil#a_001045">Publishing to a Topic</a>
                        <span class="text" id="span_009985" smilref="Programming_Robots_with_ROS00032.smil#span_009985">-</span>
                        <a data-type="index:locator" href="#ch03-idp17856560" external="false" id="a_001046" smilref="Programming_Robots_with_ROS00032.smil#a_001046">Checking That Everything Works as Expected</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000558">
                    <span class="text" id="span_009986" smilref="Programming_Robots_with_ROS00032.smil#span_009986">PUMA (Programmable Universal Machine for Assembly) robot arms</span>
                    <span class="text" id="span_009987" smilref="Programming_Robots_with_ROS00032.smil#span_009987">,</span>
                    <a data-type="index:locator" href="#ch18-ix_18-rossify_robots3-asciidoc0" external="false" id="a_001047" smilref="Programming_Robots_with_ROS00032.smil#a_001047">CougarBot</a>
                  </li>
                  <li data-type="index-term" id="li_000559">
                    <span class="text" id="span_009988" smilref="Programming_Robots_with_ROS00032.smil#span_009988">Python</span>
                    <span class="text" id="span_009989" smilref="Programming_Robots_with_ROS00032.smil#span_009989">,</span>
                    <a data-type="index:locator" href="#preface01-idm116080" external="false" id="a_001048" smilref="Programming_Robots_with_ROS00032.smil#a_001048">Prerequisites</a>
                    <list type="ul" id="list_000105">
                      <li data-type="index-term" id="li_000560">
                        <span class="text" id="span_009990" smilref="Programming_Robots_with_ROS00032.smil#span_009990">advantages of</span>
                        <span class="text" id="span_009991" smilref="Programming_Robots_with_ROS00032.smil#span_009991">,</span>
                        <a data-type="index:locator" href="#ch23-ix_23-cplusplus-asciidoc0" external="false" id="a_001049" smilref="Programming_Robots_with_ROS00032.smil#a_001049">Using C++ in ROS</a>
                      </li>
                      <li data-type="index-term" id="li_000561">
                        <span class="text" id="span_009992" smilref="Programming_Robots_with_ROS00032.smil#span_009992">and checksum in generated message definitions</span>
                        <span class="text" id="span_009993" smilref="Programming_Robots_with_ROS00032.smil#span_009993">,</span>
                        <a data-type="index:locator" href="#ch03-idp18326320" external="false" id="a_001050" smilref="Programming_Robots_with_ROS00032.smil#a_001050">Defining a New Message</a>
                      </li>
                      <li data-type="index-term" id="li_000562">
                        <span class="text" id="span_009994" smilref="Programming_Robots_with_ROS00032.smil#span_009994">C++ and</span>
                        <span class="text" id="span_009995" smilref="Programming_Robots_with_ROS00032.smil#span_009995">,</span>
                        <a data-type="index:locator" href="#ch23-ix_23-cplusplus-asciidoc1" external="false" id="a_001051" smilref="Programming_Robots_with_ROS00032.smil#a_001051">Building C++ with catkin</a>
                      </li>
                      <li data-type="index-term" id="li_000563">
                        <span class="text" id="span_009996" smilref="Programming_Robots_with_ROS00032.smil#span_009996">client library</span>
                        <span class="text" id="span_009997" smilref="Programming_Robots_with_ROS00032.smil#span_009997">,</span>
                        <a data-type="index:locator" href="#ch01-idp202752" external="false" id="a_001052" smilref="Programming_Robots_with_ROS00032.smil#a_001052">Philosophy</a>
                      </li>
                      <li data-type="index-term" id="li_000564">
                        <span class="text" id="span_009998" smilref="Programming_Robots_with_ROS00032.smil#span_009998">native data types</span>
                        <span class="text" id="span_009999" smilref="Programming_Robots_with_ROS00032.smil#span_009999">,</span>
                        <a data-type="index:locator" href="#ch03-idp18072624" external="false" id="a_001053" smilref="Programming_Robots_with_ROS00032.smil#a_001053">Defining Your Own Message Types</a>
                      </li>
                      <li data-type="index-term" id="li_000565">
                        <span class="text" id="span_010000" smilref="Programming_Robots_with_ROS00032.smil#span_010000">slice notation</span>
                        <span class="text" id="span_010001" smilref="Programming_Robots_with_ROS00032.smil#span_010001">,</span>
                        <a data-type="index:locator" href="#ch12-idp29901680" external="false" id="a_001054" smilref="Programming_Robots_with_ROS00032.smil#a_001054">Detecting the Line</a>
                      </li>
                      <li data-type="index-term" id="li_000566">
                        <span class="text" id="span_010002" smilref="Programming_Robots_with_ROS00032.smil#span_010002">translating to C++</span>
                        <span class="text" id="span_010003" smilref="Programming_Robots_with_ROS00032.smil#span_010003">,</span>
                        <a data-type="index:locator" href="#ch23-ix_23-cplusplus-asciidoc4" external="false" id="a_001055" smilref="Programming_Robots_with_ROS00032.smil#a_001055">Translating from Python to C++ (and Back Again)</a>
                        <span class="text" id="span_010004" smilref="Programming_Robots_with_ROS00032.smil#span_010004">-</span>
                        <a data-type="index:locator" href="#ch23-idp46797424" external="false" id="a_001056" smilref="Programming_Robots_with_ROS00032.smil#a_001056">Services</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000567">
                    <span class="text" id="span_010005" smilref="Programming_Robots_with_ROS00032.smil#span_010005">pyttsx (speech library)</span>
                    <span class="text" id="span_010006" smilref="Programming_Robots_with_ROS00032.smil#span_010006">,</span>
                    <a data-type="index:locator" href="#ch19-ix_19-libraries-asciidoc2" external="false" id="a_001057" smilref="Programming_Robots_with_ROS00032.smil#a_001057">Make Your Robot Talk: pyttsx</a>
                    <span class="text" id="span_010007" smilref="Programming_Robots_with_ROS00032.smil#span_010007">-</span>
                    <a data-type="index:locator" href="#ch19-idp43699760" external="false" id="a_001058" smilref="Programming_Robots_with_ROS00032.smil#a_001058">Checking That Everything Works as Expected</a>
                    <list type="ul" id="list_000106">
                      <li data-type="index-term" id="li_000568">
                        <span class="text" id="span_010008" smilref="Programming_Robots_with_ROS00032.smil#span_010008">action interface for</span>
                        <span class="text" id="span_010009" smilref="Programming_Robots_with_ROS00032.smil#span_010009">,</span>
                        <a data-type="index:locator" href="#ch19-idp42662256" external="false" id="a_001059" smilref="Programming_Robots_with_ROS00032.smil#a_001059">Action Interface</a>
                      </li>
                      <li data-type="index-term" id="li_000569">
                        <span class="text" id="span_010010" smilref="Programming_Robots_with_ROS00032.smil#span_010010">checking</span>
                        <span class="text" id="span_010011" smilref="Programming_Robots_with_ROS00032.smil#span_010011">,</span>
                        <a data-type="index:locator" href="#ch19-idp43691568" external="false" id="a_001060" smilref="Programming_Robots_with_ROS00032.smil#a_001060">Checking That Everything Works as Expected</a>
                      </li>
                      <li data-type="index-term" id="li_000570">
                        <span class="text" id="span_010012" smilref="Programming_Robots_with_ROS00032.smil#span_010012">event loops</span>
                        <span class="text" id="span_010013" smilref="Programming_Robots_with_ROS00032.smil#span_010013">,</span>
                        <a data-type="index:locator" href="#ch19-idp42785280" external="false" id="a_001061" smilref="Programming_Robots_with_ROS00032.smil#a_001061">Event Loops</a>
                      </li>
                      <li data-type="index-term" id="li_000571">
                        <span class="text" id="span_010014" smilref="Programming_Robots_with_ROS00032.smil#span_010014">parameters</span>
                        <span class="text" id="span_010015" smilref="Programming_Robots_with_ROS00032.smil#span_010015">,</span>
                        <a data-type="index:locator" href="#ch19-idp42677824" external="false" id="a_001062" smilref="Programming_Robots_with_ROS00032.smil#a_001062">Parameters</a>
                      </li>
                      <li data-type="index-term" id="li_000572">
                        <span class="text" id="span_010016" smilref="Programming_Robots_with_ROS00032.smil#span_010016">speech client</span>
                        <span class="text" id="span_010017" smilref="Programming_Robots_with_ROS00032.smil#span_010017">,</span>
                        <a data-type="index:locator" href="#ch19-idp43296496" external="false" id="a_001063" smilref="Programming_Robots_with_ROS00032.smil#a_001063">The Speech Client</a>
                      </li>
                      <li data-type="index-term" id="li_000573">
                        <span class="text" id="span_010018" smilref="Programming_Robots_with_ROS00032.smil#span_010018">speech server</span>
                        <span class="text" id="span_010019" smilref="Programming_Robots_with_ROS00032.smil#span_010019">,</span>
                        <a data-type="index:locator" href="#ch19-ix_19-libraries-asciidoc3" external="false" id="a_001064" smilref="Programming_Robots_with_ROS00032.smil#a_001064">The Speech Server</a>
                        <span class="text" id="span_010020" smilref="Programming_Robots_with_ROS00032.smil#span_010020">-</span>
                        <a data-type="index:locator" href="#ch19-idp43294720" external="false" id="a_001065" smilref="Programming_Robots_with_ROS00032.smil#a_001065">The Speech Server</a>
                      </li>
                    </list>
                  </li>
                </list>
              </div>
              <h1 id="h1_000559" smilref="Programming_Robots_with_ROS00032.smil#h1_000559">Q</h1>
              <div data-type="indexdiv" id="div_000067">
                <list type="ul" id="list_000107">
                  <li data-type="index-term" id="li_000574">
                    <span class="text" id="span_010021" smilref="Programming_Robots_with_ROS00032.smil#span_010021">Quaternion</span>
                    <span class="text" id="span_010022" smilref="Programming_Robots_with_ROS00032.smil#span_010022">,</span>
                    <a data-type="index:locator" href="#ch15-ix_15-sensors_actuators-asciidoc1" external="false" id="a_001066" smilref="Programming_Robots_with_ROS00032.smil#a_001066">Designing the ROS Wrapper</a>
                    <span class="text" id="span_010023" smilref="Programming_Robots_with_ROS00032.smil#span_010023">-</span>
                    <a data-type="index:locator" href="#ch15-idp37239472" external="false" id="a_001067" smilref="Programming_Robots_with_ROS00032.smil#a_001067">Design 1: Periodic Measurements over a Topic</a>
                  </li>
                </list>
              </div>
              <h1 id="h1_000560" smilref="Programming_Robots_with_ROS00032.smil#h1_000560">R</h1>
              <div data-type="indexdiv" id="div_000068">
                <list type="ul" id="list_000108">
                  <li data-type="index-term" id="li_000575">
                    <span class="text" id="span_010024" smilref="Programming_Robots_with_ROS00032.smil#span_010024">R2 (Robonaut 2)</span>
                    <span class="text" id="span_010025" smilref="Programming_Robots_with_ROS00032.smil#span_010025">,</span>
                    <a data-type="index:locator" href="#ch06-idp21862592" external="false" id="a_001068" smilref="Programming_Robots_with_ROS00032.smil#a_001068">Robonaut 2</a>
                    <list type="ul" id="list_000109">
                      <li data-type="index-term" id="li_000576">
                        <span class="text" id="span_010026" smilref="Programming_Robots_with_ROS00032.smil#span_010026">as basis for Chess-bot</span>
                        <span class="text" id="span_010027" smilref="Programming_Robots_with_ROS00032.smil#span_010027">,</span>
                        <a data-type="index:locator" href="#ch11-ix_11-chessbot-asciidoc10" external="false" id="a_001069" smilref="Programming_Robots_with_ROS00032.smil#a_001069">Moving R2 Around a Chessboard</a>
                        <span class="text" id="span_010028" smilref="Programming_Robots_with_ROS00032.smil#span_010028">-</span>
                        <a data-type="index:locator" href="#ch11-idp28237440" external="false" id="a_001070" smilref="Programming_Robots_with_ROS00032.smil#a_001070">Summary</a>
                        <list type="ul" id="list_000110">
                          <li data-gentext="see" id="li_000577" smilref="Programming_Robots_with_ROS00032.smil#li_000577">(see also Chess-bot)</li>
                        </list>
                      </li>
                      <li data-type="index-term" id="li_000578">
                        <span class="text" id="span_010029" smilref="Programming_Robots_with_ROS00032.smil#span_010029">installing/running simulated version of</span>
                        <span class="text" id="span_010030" smilref="Programming_Robots_with_ROS00032.smil#span_010030">,</span>
                        <a data-type="index:locator" href="#ch11-ix_11-chessbot-asciidoc5" external="false" id="a_001071" smilref="Programming_Robots_with_ROS00032.smil#a_001071">Installing and Running a Simulated R2</a>
                        <span class="text" id="span_010031" smilref="Programming_Robots_with_ROS00032.smil#span_010031">-</span>
                        <a data-type="index:locator" href="#ch11-idp26336784" external="false" id="a_001072" smilref="Programming_Robots_with_ROS00032.smil#a_001072">Installing and Running a Simulated R2</a>
                      </li>
                      <li data-type="index-term" id="li_000579">
                        <span class="text" id="span_010032" smilref="Programming_Robots_with_ROS00032.smil#span_010032">moving around a chessboard</span>
                        <span class="text" id="span_010033" smilref="Programming_Robots_with_ROS00032.smil#span_010033">,</span>
                        <a data-type="index:locator" href="#ch11-idp27138080" external="false" id="a_001073" smilref="Programming_Robots_with_ROS00032.smil#a_001073">Moving R2 Around a Chessboard</a>
                      </li>
                      <li data-type="index-term" id="li_000580">
                        <span class="text" id="span_010034" smilref="Programming_Robots_with_ROS00032.smil#span_010034">moving from the command line</span>
                        <span class="text" id="span_010035" smilref="Programming_Robots_with_ROS00032.smil#span_010035">,</span>
                        <a data-type="index:locator" href="#ch11-idp26331680" external="false" id="a_001074" smilref="Programming_Robots_with_ROS00032.smil#a_001074">Moving R2 from the Command Line</a>
                      </li>
                      <li data-type="index-term" id="li_000581">
                        <span class="text" id="span_010036" smilref="Programming_Robots_with_ROS00032.smil#span_010036">suitability for simulation studies</span>
                        <span class="text" id="span_010037" smilref="Programming_Robots_with_ROS00032.smil#span_010037">,</span>
                        <a data-type="index:locator" href="#ch11-idp26359584" external="false" id="a_001075" smilref="Programming_Robots_with_ROS00032.smil#a_001075">The Key to Success</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000582">
                    <span class="text" id="span_010038" smilref="Programming_Robots_with_ROS00032.smil#span_010038">ramping</span>
                    <span class="text" id="span_010039" smilref="Programming_Robots_with_ROS00032.smil#span_010039">,</span>
                    <a data-type="index:locator" href="#ch08-ix_8-teleop_bot-asciidoc8" external="false" id="a_001076" smilref="Programming_Robots_with_ROS00032.smil#a_001076">Velocity Ramps</a>
                    <span class="text" id="span_010040" smilref="Programming_Robots_with_ROS00032.smil#span_010040">-</span>
                    <a data-type="index:locator" href="#ch08-idp25095424" external="false" id="a_001077" smilref="Programming_Robots_with_ROS00032.smil#a_001077">Velocity Ramps</a>
                  </li>
                  <li data-type="index-term" id="li_000583">
                    <span class="text" id="span_010041" smilref="Programming_Robots_with_ROS00032.smil#span_010041">range of motion</span>
                    <span class="text" id="span_010042" smilref="Programming_Robots_with_ROS00032.smil#span_010042">,</span>
                    <a data-type="index:locator" href="#ch11-idp26417616" external="false" id="a_001078" smilref="Programming_Robots_with_ROS00032.smil#a_001078">Joints, Links, and Kinematic Chains</a>
                  </li>
                  <li data-type="index-term" id="li_000584">
                    <span class="text" id="span_010043" smilref="Programming_Robots_with_ROS00032.smil#span_010043">range sensors</span>
                    <span class="text" id="span_010044" smilref="Programming_Robots_with_ROS00032.smil#span_010044">,</span>
                    <a data-type="index:locator" href="#ch06-idp21759248" external="false" id="a_001079" smilref="Programming_Robots_with_ROS00032.smil#a_001079">Sensors</a>
                  </li>
                  <li data-type="index-term" id="li_000585">
                    <span class="text" id="span_010045" smilref="Programming_Robots_with_ROS00032.smil#span_010045">ranges array</span>
                    <span class="text" id="span_010046" smilref="Programming_Robots_with_ROS00032.smil#span_010046">,</span>
                    <a data-type="index:locator" href="#ch07-idp22271168" external="false" id="a_001080" smilref="Programming_Robots_with_ROS00032.smil#a_001080">Reading Sensor Data</a>
                  </li>
                  <li data-type="index-term" id="li_000586">
                    <span class="text" id="span_010047" smilref="Programming_Robots_with_ROS00032.smil#span_010047">rate variable</span>
                    <span class="text" id="span_010048" smilref="Programming_Robots_with_ROS00032.smil#span_010048">,</span>
                    <a data-type="index:locator" href="#ch07-idp22596128" external="false" id="a_001081" smilref="Programming_Robots_with_ROS00032.smil#a_001081">Sensing and Actuation: Wander-bot!</a>
                  </li>
                  <li data-type="index-term" id="li_000587">
                    <span class="text" id="span_010049" smilref="Programming_Robots_with_ROS00032.smil#span_010049">recompiling</span>
                    <span class="text" id="span_010050" smilref="Programming_Robots_with_ROS00032.smil#span_010050">,</span>
                    <a data-type="index:locator" href="#ch23-idp45677568" external="false" id="a_001082" smilref="Programming_Robots_with_ROS00032.smil#a_001082">Building C++ with catkin</a>
                  </li>
                  <li data-type="index-term" id="li_000588">
                    <span class="text" id="span_010051" smilref="Programming_Robots_with_ROS00032.smil#span_010051">reconstruction algorithm</span>
                    <span class="text" id="span_010052" smilref="Programming_Robots_with_ROS00032.smil#span_010052">,</span>
                    <a data-type="index:locator" href="#ch06-idp21786624" external="false" id="a_001083" smilref="Programming_Robots_with_ROS00032.smil#a_001083">Depth cameras</a>
                  </li>
                  <li data-type="index-term" id="li_000589">
                    <span class="text" id="span_010053" smilref="Programming_Robots_with_ROS00032.smil#span_010053">registration of master</span>
                    <span class="text" id="span_010054" smilref="Programming_Robots_with_ROS00032.smil#span_010054">,</span>
                    <a data-type="index:locator" href="#ch20-idp43757584" external="false" id="a_001084" smilref="Programming_Robots_with_ROS00032.smil#a_001084">The Master and Friends: roscore</a>
                  </li>
                  <li data-type="index-term" id="li_000590">
                    <span class="text" id="span_010055" smilref="Programming_Robots_with_ROS00032.smil#span_010055">remapping</span>
                    <span class="text" id="span_010056" smilref="Programming_Robots_with_ROS00032.smil#span_010056">,</span>
                    <a data-type="index:locator" href="#ch02-idp16984400" external="false" id="a_001085" smilref="Programming_Robots_with_ROS00032.smil#a_001085">Names, Namespaces, and Remapping</a>
                  </li>
                  <li data-type="index-term" id="li_000591">
                    <span class="text" id="span_010057" smilref="Programming_Robots_with_ROS00032.smil#span_010057">result (of action)</span>
                    <span class="text" id="span_010058" smilref="Programming_Robots_with_ROS00032.smil#span_010058">,</span>
                    <a data-type="index:locator" href="#ch05-idp19497008" external="false" id="a_001086" smilref="Programming_Robots_with_ROS00032.smil#a_001086">Actions</a>
                  </li>
                  <li data-type="index-term" id="li_000592">
                    <span class="text" id="span_010059" smilref="Programming_Robots_with_ROS00032.smil#span_010059">revolute joints</span>
                    <span class="text" id="span_010060" smilref="Programming_Robots_with_ROS00032.smil#span_010060">,</span>
                    <a data-type="index:locator" href="#ch11-idp25891744" external="false" id="a_001087" smilref="Programming_Robots_with_ROS00032.smil#a_001087">Joints, Links, and Kinematic Chains</a>
                  </li>
                  <li data-type="index-term" id="li_000593">
                    <span class="text" id="span_010061" smilref="Programming_Robots_with_ROS00032.smil#span_010061">RGB (red, green, blue) values</span>
                    <span class="text" id="span_010062" smilref="Programming_Robots_with_ROS00032.smil#span_010062">,</span>
                    <a data-type="index:locator" href="#ch12-ix_12-followbot-asciidoc8" external="false" id="a_001088" smilref="Programming_Robots_with_ROS00032.smil#a_001088">Detecting the Line</a>
                  </li>
                  <li data-type="index-term" id="li_000594">
                    <span class="text" id="span_010063" smilref="Programming_Robots_with_ROS00032.smil#span_010063">rigid-body dynamics</span>
                    <span class="text" id="span_010064" smilref="Programming_Robots_with_ROS00032.smil#span_010064">,</span>
                    <a data-type="index:locator" href="#ch06-idp21904224" external="false" id="a_001089" smilref="Programming_Robots_with_ROS00032.smil#a_001089">Gazebo</a>
                  </li>
                  <li data-gentext="see" id="li_000595">
                    <span data-type="index-term" id="span_010065" smilref="Programming_Robots_with_ROS00032.smil#span_010065">Robonaut 2</span>
                    <span class="text" id="span_010066" smilref="Programming_Robots_with_ROS00032.smil#span_010066">(</span>
                    <span class="text" id="span_010067" smilref="Programming_Robots_with_ROS00032.smil#span_010067">see</span>
                    <span class="text" id="span_010068" smilref="Programming_Robots_with_ROS00032.smil#span_010068">R2 (Robonaut 2))</span>
                  </li>
                  <li data-gentext="see" id="li_000596">
                    <span data-type="index-term" id="span_010069" smilref="Programming_Robots_with_ROS00032.smil#span_010069">robot arm</span>
                    <span class="text" id="span_010070" smilref="Programming_Robots_with_ROS00032.smil#span_010070">(</span>
                    <span class="text" id="span_010071" smilref="Programming_Robots_with_ROS00032.smil#span_010071">see</span>
                    <span class="text" id="span_010072" smilref="Programming_Robots_with_ROS00032.smil#span_010072">CougarBot)</span>
                  </li>
                  <li data-type="index-term" id="li_000597">
                    <span class="text" id="span_010073" smilref="Programming_Robots_with_ROS00032.smil#span_010073">robot model plugin</span>
                    <span class="text" id="span_010074" smilref="Programming_Robots_with_ROS00032.smil#span_010074">,</span>
                    <a data-type="index:locator" href="#ch08-idp25149760" external="false" id="a_001090" smilref="Programming_Robots_with_ROS00032.smil#a_001090">rviz</a>
                  </li>
                  <li data-type="index-term" id="li_000598">
                    <span class="text" id="span_010075" smilref="Programming_Robots_with_ROS00032.smil#span_010075">robots</span>
                    <span class="text" id="span_010076" smilref="Programming_Robots_with_ROS00032.smil#span_010076">,</span>
                    <a data-type="index:locator" href="#ch06-ix_6-robots-asciidoc13" external="false" id="a_001091" smilref="Programming_Robots_with_ROS00032.smil#a_001091">Complete Robots</a>
                    <list type="ul" id="list_000111">
                      <li data-gentext="see" id="li_000599" smilref="Programming_Robots_with_ROS00032.smil#li_000599">(see also specific robots, e.g.: TurtleBot)</li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000600">
                    <span class="text" id="span_010077" smilref="Programming_Robots_with_ROS00032.smil#span_010077">robot_state_publisher node</span>
                    <span class="text" id="span_010078" smilref="Programming_Robots_with_ROS00032.smil#span_010078">,</span>
                    <a data-type="index:locator" href="#ch11-idp26364432" external="false" id="a_001092" smilref="Programming_Robots_with_ROS00032.smil#a_001092">Installing and Running a Simulated R2</a>
                  </li>
                  <li id="li_000601">
                    <span data-type="index-term" id="span_010079" smilref="Programming_Robots_with_ROS00032.smil#span_010079">ROS</span>
                    <list type="ul" id="list_000112">
                      <li data-type="index-term" id="li_000602">
                        <span class="text" id="span_010080" smilref="Programming_Robots_with_ROS00032.smil#span_010080">basic components of</span>
                        <span class="text" id="span_010081" smilref="Programming_Robots_with_ROS00032.smil#span_010081">,</span>
                        <a data-type="index:locator" href="#preface01-idm11200" external="false" id="a_001093" smilref="Programming_Robots_with_ROS00032.smil#a_001093">Preface</a>
                      </li>
                      <li data-type="index-term" id="li_000603">
                        <span class="text" id="span_010082" smilref="Programming_Robots_with_ROS00032.smil#span_010082">basics</span>
                        <span class="text" id="span_010083" smilref="Programming_Robots_with_ROS00032.smil#span_010083">,</span>
                        <a data-type="index:locator" href="#ch01-ix_1-intro-asciidoc0" external="false" id="a_001094" smilref="Programming_Robots_with_ROS00032.smil#a_001094">Introduction</a>
                        <span class="text" id="span_010084" smilref="Programming_Robots_with_ROS00032.smil#span_010084">-</span>
                        <a data-type="index:locator" href="#ch01-idp116864" external="false" id="a_001095" smilref="Programming_Robots_with_ROS00032.smil#a_001095">Summary</a>
                      </li>
                      <li data-type="index-term" id="li_000604">
                        <span class="text" id="span_010085" smilref="Programming_Robots_with_ROS00032.smil#span_010085">development philosophy</span>
                        <span class="text" id="span_010086" smilref="Programming_Robots_with_ROS00032.smil#span_010086">,</span>
                        <a data-type="index:locator" href="#ch01-ix_1-intro-asciidoc1" external="false" id="a_001096" smilref="Programming_Robots_with_ROS00032.smil#a_001096">Philosophy</a>
                        <span class="text" id="span_010087" smilref="Programming_Robots_with_ROS00032.smil#span_010087">-</span>
                        <a data-type="index:locator" href="#ch01-idp211088" external="false" id="a_001097" smilref="Programming_Robots_with_ROS00032.smil#a_001097">Philosophy</a>
                      </li>
                      <li data-type="index-term" id="li_000605">
                        <span class="text" id="span_010088" smilref="Programming_Robots_with_ROS00032.smil#span_010088">history of</span>
                        <span class="text" id="span_010089" smilref="Programming_Robots_with_ROS00032.smil#span_010089">,</span>
                        <a data-type="index:locator" href="#ch01-idp25184" external="false" id="a_001098" smilref="Programming_Robots_with_ROS00032.smil#a_001098">Brief History</a>
                      </li>
                      <li data-type="index-term" id="li_000606">
                        <span class="text" id="span_010090" smilref="Programming_Robots_with_ROS00032.smil#span_010090">installation</span>
                        <span class="text" id="span_010091" smilref="Programming_Robots_with_ROS00032.smil#span_010091">,</span>
                        <a data-type="index:locator" href="#ch01-idp92720" external="false" id="a_001099" smilref="Programming_Robots_with_ROS00032.smil#a_001099">Installation</a>
                      </li>
                      <li data-type="index-term" id="li_000607">
                        <span class="text" id="span_010092" smilref="Programming_Robots_with_ROS00032.smil#span_010092">key concepts</span>
                        <span class="text" id="span_010093" smilref="Programming_Robots_with_ROS00032.smil#span_010093">,</span>
                        <a data-type="index:locator" href="#ch02-ix_2-preliminaries-asciidoc0" external="false" id="a_001100" smilref="Programming_Robots_with_ROS00032.smil#a_001100">Preliminaries</a>
                        <span class="text" id="span_010094" smilref="Programming_Robots_with_ROS00032.smil#span_010094">-</span>
                        <a data-type="index:locator" href="#ch02-idp17118288" external="false" id="a_001101" smilref="Programming_Robots_with_ROS00032.smil#a_001101">Summary</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000608">
                    <span class="text" id="span_010095" smilref="Programming_Robots_with_ROS00032.smil#span_010095">ROS Answers</span>
                    <span class="text" id="span_010096" smilref="Programming_Robots_with_ROS00032.smil#span_010096">,</span>
                    <a data-type="index:locator" href="#ch22-ix_22-community-asciidoc1" external="false" id="a_001102" smilref="Programming_Robots_with_ROS00032.smil#a_001102">ROS Answers</a>
                    <span class="text" id="span_010097" smilref="Programming_Robots_with_ROS00032.smil#span_010097">-</span>
                    <a data-type="index:locator" href="#ch22-idp45619408" external="false" id="a_001103" smilref="Programming_Robots_with_ROS00032.smil#a_001103">ROS Answers</a>
                  </li>
                  <li data-gentext="see" id="li_000609">
                    <span data-type="index-term" id="span_010098" smilref="Programming_Robots_with_ROS00032.smil#span_010098">ROS bags</span>
                    <span class="text" id="span_010099" smilref="Programming_Robots_with_ROS00032.smil#span_010099">(</span>
                    <span class="text" id="span_010100" smilref="Programming_Robots_with_ROS00032.smil#span_010100">see</span>
                    <span class="text" id="span_010101" smilref="Programming_Robots_with_ROS00032.smil#span_010101">bags)</span>
                  </li>
                  <li id="li_000610">
                    <span data-type="index-term" id="span_010102" smilref="Programming_Robots_with_ROS00032.smil#span_010102">ROS command-line tools</span>
                    <list type="ul" id="list_000113">
                      <li data-type="index-term" id="li_000611">
                        <span class="text" id="span_010103" smilref="Programming_Robots_with_ROS00032.smil#span_010103">roscd</span>
                        <span class="text" id="span_010104" smilref="Programming_Robots_with_ROS00032.smil#span_010104">,</span>
                        <a data-type="index:locator" href="#ch20-idp43797792" external="false" id="a_001104" smilref="Programming_Robots_with_ROS00032.smil#a_001104">Navigating the Filesystem: roscd</a>
                      </li>
                      <li data-type="index-term" id="li_000612">
                        <span class="text" id="span_010105" smilref="Programming_Robots_with_ROS00032.smil#span_010105">roscore</span>
                        <span class="text" id="span_010106" smilref="Programming_Robots_with_ROS00032.smil#span_010106">,</span>
                        <a data-type="index:locator" href="#ch02-idp146560" external="false" id="a_001105" smilref="Programming_Robots_with_ROS00032.smil#a_001105">roscore</a>
                        <span class="text" id="span_010107" smilref="Programming_Robots_with_ROS00032.smil#span_010107">,</span>
                        <a data-type="index:locator" href="#ch08-ix_8-teleop_bot-asciidoc6" external="false" id="a_001106" smilref="Programming_Robots_with_ROS00032.smil#a_001106">Parameter Server</a>
                        <span class="text" id="span_010108" smilref="Programming_Robots_with_ROS00032.smil#span_010108">-</span>
                        <a data-type="index:locator" href="#ch08-idp24260864" external="false" id="a_001107" smilref="Programming_Robots_with_ROS00032.smil#a_001107">Parameter Server</a>
                        <span class="text" id="span_010109" smilref="Programming_Robots_with_ROS00032.smil#span_010109">,</span>
                        <a data-type="index:locator" href="#ch20-idp43716288" external="false" id="a_001108" smilref="Programming_Robots_with_ROS00032.smil#a_001108">The Master and Friends: roscore</a>
                      </li>
                      <li data-type="index-term" id="li_000613">
                        <span class="text" id="span_010110" smilref="Programming_Robots_with_ROS00032.smil#span_010110">rosed</span>
                        <span class="text" id="span_010111" smilref="Programming_Robots_with_ROS00032.smil#span_010111">,</span>
                        <a data-type="index:locator" href="#ch20-idp43807632" external="false" id="a_001109" smilref="Programming_Robots_with_ROS00032.smil#a_001109">Navigating the Filesystem: roscd</a>
                      </li>
                      <li data-type="index-term" id="li_000614">
                        <span class="text" id="span_010112" smilref="Programming_Robots_with_ROS00032.smil#span_010112">roslaunch</span>
                        <span class="text" id="span_010113" smilref="Programming_Robots_with_ROS00032.smil#span_010113">,</span>
                        <a data-type="index:locator" href="#ch02-ix_2-preliminaries-asciidoc4" external="false" id="a_001110" smilref="Programming_Robots_with_ROS00032.smil#a_001110">roslaunch</a>
                        <span class="text" id="span_010114" smilref="Programming_Robots_with_ROS00032.smil#span_010114">-</span>
                        <a data-type="index:locator" href="#ch02-idp17052656" external="false" id="a_001111" smilref="Programming_Robots_with_ROS00032.smil#a_001111">roslaunch</a>
                        <span class="text" id="span_010115" smilref="Programming_Robots_with_ROS00032.smil#span_010115">,</span>
                        <a data-type="index:locator" href="#ch20-ix_20-tools-asciidoc1" external="false" id="a_001112" smilref="Programming_Robots_with_ROS00032.smil#a_001112">Starting Many Nodes: roslaunch</a>
                        <span class="text" id="span_010116" smilref="Programming_Robots_with_ROS00032.smil#span_010116">-</span>
                        <a data-type="index:locator" href="#ch20-idp44202816" external="false" id="a_001113" smilref="Programming_Robots_with_ROS00032.smil#a_001113">Starting Many Nodes: roslaunch</a>
                      </li>
                      <li data-type="index-term" id="li_000615">
                        <span class="text" id="span_010117" smilref="Programming_Robots_with_ROS00032.smil#span_010117">rosmsg</span>
                        <span class="text" id="span_010118" smilref="Programming_Robots_with_ROS00032.smil#span_010118">,</span>
                        <a data-type="index:locator" href="#ch20-idp44857632" external="false" id="a_001114" smilref="Programming_Robots_with_ROS00032.smil#a_001114">Introspection: rosnode, rostopic, rosmsg, rosservice, and rossrv</a>
                      </li>
                      <li data-type="index-term" id="li_000616">
                        <span class="text" id="span_010119" smilref="Programming_Robots_with_ROS00032.smil#span_010119">rosnode</span>
                        <span class="text" id="span_010120" smilref="Programming_Robots_with_ROS00032.smil#span_010120">,</span>
                        <a data-type="index:locator" href="#ch20-idp44734560" external="false" id="a_001115" smilref="Programming_Robots_with_ROS00032.smil#a_001115">Introspection: rosnode, rostopic, rosmsg, rosservice, and rossrv</a>
                      </li>
                      <li data-type="index-term" id="li_000617">
                        <span class="text" id="span_010121" smilref="Programming_Robots_with_ROS00032.smil#span_010121">rosrun</span>
                        <span class="text" id="span_010122" smilref="Programming_Robots_with_ROS00032.smil#span_010122">,</span>
                        <a data-type="index:locator" href="#ch02-ix_2-preliminaries-asciidoc3" external="false" id="a_001116" smilref="Programming_Robots_with_ROS00032.smil#a_001116">rosrun</a>
                        <span class="text" id="span_010123" smilref="Programming_Robots_with_ROS00032.smil#span_010123">-</span>
                        <a data-type="index:locator" href="#ch02-idp16968976" external="false" id="a_001117" smilref="Programming_Robots_with_ROS00032.smil#a_001117">rosrun</a>
                        <span class="text" id="span_010124" smilref="Programming_Robots_with_ROS00032.smil#span_010124">,</span>
                        <a data-type="index:locator" href="#ch20-idp43814752" external="false" id="a_001118" smilref="Programming_Robots_with_ROS00032.smil#a_001118">Starting a Node: rosrun</a>
                      </li>
                      <li data-type="index-term" id="li_000618">
                        <span class="text" id="span_010125" smilref="Programming_Robots_with_ROS00032.smil#span_010125">rosservice</span>
                        <span class="text" id="span_010126" smilref="Programming_Robots_with_ROS00032.smil#span_010126">,</span>
                        <a data-type="index:locator" href="#ch04-ix_4-services-asciidoc3" external="false" id="a_001119" smilref="Programming_Robots_with_ROS00032.smil#a_001119">Checking That Everything Works as Expected</a>
                        <span class="text" id="span_010127" smilref="Programming_Robots_with_ROS00032.smil#span_010127">-</span>
                        <a data-type="index:locator" href="#ch04-idp19293344" external="false" id="a_001120" smilref="Programming_Robots_with_ROS00032.smil#a_001120">Other Ways of Returning Values from a Service</a>
                        <span class="text" id="span_010128" smilref="Programming_Robots_with_ROS00032.smil#span_010128">,</span>
                        <a data-type="index:locator" href="#ch20-idp44877472" external="false" id="a_001121" smilref="Programming_Robots_with_ROS00032.smil#a_001121">Introspection: rosnode, rostopic, rosmsg, rosservice, and rossrv</a>
                      </li>
                      <li data-type="index-term" id="li_000619">
                        <span class="text" id="span_010129" smilref="Programming_Robots_with_ROS00032.smil#span_010129">rossrv</span>
                        <span class="text" id="span_010130" smilref="Programming_Robots_with_ROS00032.smil#span_010130">,</span>
                        <a data-type="index:locator" href="#ch20-idp44724848" external="false" id="a_001122" smilref="Programming_Robots_with_ROS00032.smil#a_001122">Introspection: rosnode, rostopic, rosmsg, rosservice, and rossrv</a>
                      </li>
                      <li data-type="index-term" id="li_000620">
                        <span class="text" id="span_010131" smilref="Programming_Robots_with_ROS00032.smil#span_010131">rostest</span>
                        <span class="text" id="span_010132" smilref="Programming_Robots_with_ROS00032.smil#span_010132">,</span>
                        <a data-type="index:locator" href="#ch20-ix_20-tools-asciidoc5" external="false" id="a_001123" smilref="Programming_Robots_with_ROS00032.smil#a_001123">Testing a Many-Node System: rostest</a>
                        <span class="text" id="span_010133" smilref="Programming_Robots_with_ROS00032.smil#span_010133">-</span>
                        <a data-type="index:locator" href="#ch20-idp44812240" external="false" id="a_001124" smilref="Programming_Robots_with_ROS00032.smil#a_001124">Testing a Many-Node System: rostest</a>
                      </li>
                      <li data-type="index-term" id="li_000621">
                        <span class="text" id="span_010134" smilref="Programming_Robots_with_ROS00032.smil#span_010134">rostopic</span>
                        <span class="text" id="span_010135" smilref="Programming_Robots_with_ROS00032.smil#span_010135">,</span>
                        <a data-type="index:locator" href="#ch08-idp23397568" external="false" id="a_001125" smilref="Programming_Robots_with_ROS00032.smil#a_001125">Motion Generator</a>
                        <span class="text" id="span_010136" smilref="Programming_Robots_with_ROS00032.smil#span_010136">,</span>
                        <a data-type="index:locator" href="#ch20-idp44712192" external="false" id="a_001126" smilref="Programming_Robots_with_ROS00032.smil#a_001126">Introspection: rosnode, rostopic, rosmsg, rosservice, and rossrv</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000622">
                    <span class="text" id="span_010137" smilref="Programming_Robots_with_ROS00032.smil#span_010137">ROS community</span>
                    <span class="text" id="span_010138" smilref="Programming_Robots_with_ROS00032.smil#span_010138">,</span>
                    <a data-type="index:locator" href="#ch22-ix_22-community-asciidoc0" external="false" id="a_001127" smilref="Programming_Robots_with_ROS00032.smil#a_001127">The ROS Community: Online Resources</a>
                    <span class="text" id="span_010139" smilref="Programming_Robots_with_ROS00032.smil#span_010139">-</span>
                    <a data-type="index:locator" href="#ch22-idp45653056" external="false" id="a_001128" smilref="Programming_Robots_with_ROS00032.smil#a_001128">Finding and Sharing Code</a>
                    <list type="ul" id="list_000114">
                      <li data-type="index-term" id="li_000623">
                        <span class="text" id="span_010140" smilref="Programming_Robots_with_ROS00032.smil#span_010140">etiquette</span>
                        <span class="text" id="span_010141" smilref="Programming_Robots_with_ROS00032.smil#span_010141">,</span>
                        <a data-type="index:locator" href="#ch22-idp45582752" external="false" id="a_001129" smilref="Programming_Robots_with_ROS00032.smil#a_001129">Etiquette</a>
                      </li>
                      <li data-type="index-term" id="li_000624">
                        <span class="text" id="span_010142" smilref="Programming_Robots_with_ROS00032.smil#span_010142">finding and sharing code</span>
                        <span class="text" id="span_010143" smilref="Programming_Robots_with_ROS00032.smil#span_010143">,</span>
                        <a data-type="index:locator" href="#ch22-idp45647840" external="false" id="a_001130" smilref="Programming_Robots_with_ROS00032.smil#a_001130">Finding and Sharing Code</a>
                      </li>
                      <li data-type="index-term" id="li_000625">
                        <span class="text" id="span_010144" smilref="Programming_Robots_with_ROS00032.smil#span_010144">mailing lists</span>
                        <span class="text" id="span_010145" smilref="Programming_Robots_with_ROS00032.smil#span_010145">,</span>
                        <a data-type="index:locator" href="#ch22-idp45638528" external="false" id="a_001131" smilref="Programming_Robots_with_ROS00032.smil#a_001131">Mailing Lists and Special Interest Groups</a>
                      </li>
                      <li data-type="index-term" id="li_000626">
                        <span class="text" id="span_010146" smilref="Programming_Robots_with_ROS00032.smil#span_010146">ROS Answers</span>
                        <span class="text" id="span_010147" smilref="Programming_Robots_with_ROS00032.smil#span_010147">,</span>
                        <a data-type="index:locator" href="#ch22-ix_22-community-asciidoc1" external="false" id="a_001132" smilref="Programming_Robots_with_ROS00032.smil#a_001132">ROS Answers</a>
                        <span class="text" id="span_010148" smilref="Programming_Robots_with_ROS00032.smil#span_010148">-</span>
                        <a data-type="index:locator" href="#ch22-idp45619408" external="false" id="a_001133" smilref="Programming_Robots_with_ROS00032.smil#a_001133">ROS Answers</a>
                      </li>
                      <li data-type="index-term" id="li_000627">
                        <span class="text" id="span_010149" smilref="Programming_Robots_with_ROS00032.smil#span_010149">ROS wiki</span>
                        <span class="text" id="span_010150" smilref="Programming_Robots_with_ROS00032.smil#span_010150">,</span>
                        <a data-type="index:locator" href="#ch22-idp45592464" external="false" id="a_001134" smilref="Programming_Robots_with_ROS00032.smil#a_001134">The ROS Wiki</a>
                      </li>
                      <li data-type="index-term" id="li_000628">
                        <span class="text" id="span_010151" smilref="Programming_Robots_with_ROS00032.smil#span_010151">special interest groups</span>
                        <span class="text" id="span_010152" smilref="Programming_Robots_with_ROS00032.smil#span_010152">,</span>
                        <a data-type="index:locator" href="#ch22-idp45638528" external="false" id="a_001135" smilref="Programming_Robots_with_ROS00032.smil#a_001135">Mailing Lists and Special Interest Groups</a>
                      </li>
                      <li data-type="index-term" id="li_000629">
                        <span class="text" id="span_010153" smilref="Programming_Robots_with_ROS00032.smil#span_010153">trackers (bugs/feature requests)</span>
                        <span class="text" id="span_010154" smilref="Programming_Robots_with_ROS00032.smil#span_010154">,</span>
                        <a data-type="index:locator" href="#ch22-idp45628960" external="false" id="a_001136" smilref="Programming_Robots_with_ROS00032.smil#a_001136">Trackers (Bugs and Feature Requests)</a>
                      </li>
                    </list>
                  </li>
                  <li id="li_000630">
                    <span data-type="index-term" id="span_010155" smilref="Programming_Robots_with_ROS00032.smil#span_010155">ROS message interface</span>
                    <list type="ul" id="list_000115">
                      <li data-type="index-term" id="li_000631">
                        <span class="text" id="span_010156" smilref="Programming_Robots_with_ROS00032.smil#span_010156">for CougarBot</span>
                        <span class="text" id="span_010157" smilref="Programming_Robots_with_ROS00032.smil#span_010157">,</span>
                        <a data-type="index:locator" href="#ch18-idp41236896" external="false" id="a_001137" smilref="Programming_Robots_with_ROS00032.smil#a_001137">ROS Message Interface</a>
                      </li>
                      <li data-type="index-term" id="li_000632">
                        <span class="text" id="span_010158" smilref="Programming_Robots_with_ROS00032.smil#span_010158">for TortoiseBot</span>
                        <span class="text" id="span_010159" smilref="Programming_Robots_with_ROS00032.smil#span_010159">,</span>
                        <a data-type="index:locator" href="#ch16-idp39198672" external="false" id="a_001138" smilref="Programming_Robots_with_ROS00032.smil#a_001138">ROS Message Interface</a>
                        <span class="text" id="span_010160" smilref="Programming_Robots_with_ROS00032.smil#span_010160">-</span>
                        <a data-type="index:locator" href="#ch16-idp39238128" external="false" id="a_001139" smilref="Programming_Robots_with_ROS00032.smil#a_001139">ROS Message Interface</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000633">
                    <span class="text" id="span_010161" smilref="Programming_Robots_with_ROS00032.smil#span_010161">ROS wiki</span>
                    <span class="text" id="span_010162" smilref="Programming_Robots_with_ROS00032.smil#span_010162">,</span>
                    <a data-type="index:locator" href="#ch22-idp45592464" external="false" id="a_001140" smilref="Programming_Robots_with_ROS00032.smil#a_001140">The ROS Wiki</a>
                  </li>
                  <li id="li_000634">
                    <span data-type="index-term" id="span_010163" smilref="Programming_Robots_with_ROS00032.smil#span_010163">rosbag</span>
                    <list type="ul" id="list_000116">
                      <li data-type="index-term" id="li_000635">
                        <span class="text" id="span_010164" smilref="Programming_Robots_with_ROS00032.smil#span_010164">--clock flag</span>
                        <span class="text" id="span_010165" smilref="Programming_Robots_with_ROS00032.smil#span_010165">,</span>
                        <a data-type="index:locator" href="#ch09-idp24871344" external="false" id="a_001141" smilref="Programming_Robots_with_ROS00032.smil#a_001141">Recording Data with rosbag</a>
                      </li>
                      <li data-type="index-term" id="li_000636">
                        <span class="text" id="span_010166" smilref="Programming_Robots_with_ROS00032.smil#span_010166">for debugging</span>
                        <span class="text" id="span_010167" smilref="Programming_Robots_with_ROS00032.smil#span_010167">,</span>
                        <a data-type="index:locator" href="#ch09-idp24880448" external="false" id="a_001142" smilref="Programming_Robots_with_ROS00032.smil#a_001142">Recording Data with rosbag</a>
                        <span class="text" id="span_010168" smilref="Programming_Robots_with_ROS00032.smil#span_010168">,</span>
                        <a data-type="index:locator" href="#ch21-ix_21-debugging-asciidoc30" external="false" id="a_001143" smilref="Programming_Robots_with_ROS00032.smil#a_001143">Data Logging and Analysis: rosbag and rqt_bag</a>
                        <span class="text" id="span_010169" smilref="Programming_Robots_with_ROS00032.smil#span_010169">-</span>
                        <a data-type="index:locator" href="#ch21-idp45546928" external="false" id="a_001144" smilref="Programming_Robots_with_ROS00032.smil#a_001144">Logging and Playing Back Data: rosbag</a>
                      </li>
                      <li data-type="index-term" id="li_000637">
                        <span class="text" id="span_010170" smilref="Programming_Robots_with_ROS00032.smil#span_010170">for recording data for map creation</span>
                        <span class="text" id="span_010171" smilref="Programming_Robots_with_ROS00032.smil#span_010171">,</span>
                        <a data-type="index:locator" href="#ch09-ix_9-mapping-asciidoc3" external="false" id="a_001145" smilref="Programming_Robots_with_ROS00032.smil#a_001145">Recording Data with rosbag</a>
                        <span class="text" id="span_010172" smilref="Programming_Robots_with_ROS00032.smil#span_010172">-</span>
                        <a data-type="index:locator" href="#ch09-idp24886368" external="false" id="a_001146" smilref="Programming_Robots_with_ROS00032.smil#a_001146">Recording Data with rosbag</a>
                      </li>
                      <li data-type="index-term" id="li_000638">
                        <span class="text" id="span_010173" smilref="Programming_Robots_with_ROS00032.smil#span_010173">tips on usage</span>
                        <span class="text" id="span_010174" smilref="Programming_Robots_with_ROS00032.smil#span_010174">,</span>
                        <a data-type="index:locator" href="#ch21-idp45529856" external="false" id="a_001147" smilref="Programming_Robots_with_ROS00032.smil#a_001147">Logging and Playing Back Data: rosbag</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000639">
                    <span class="text" id="span_010175" smilref="Programming_Robots_with_ROS00032.smil#span_010175">rosbash suite</span>
                    <span class="text" id="span_010176" smilref="Programming_Robots_with_ROS00032.smil#span_010176">,</span>
                    <a data-type="index:locator" href="#ch20-idp43802640" external="false" id="a_001148" smilref="Programming_Robots_with_ROS00032.smil#a_001148">Navigating the Filesystem: roscd</a>
                  </li>
                  <li data-type="index-term" id="li_000640">
                    <span class="text" id="span_010177" smilref="Programming_Robots_with_ROS00032.smil#span_010177">rosout node</span>
                    <span class="text" id="span_010178" smilref="Programming_Robots_with_ROS00032.smil#span_010178">,</span>
                    <a data-type="index:locator" href="#ch20-idp43725584" external="false" id="a_001149" smilref="Programming_Robots_with_ROS00032.smil#a_001149">The Master and Friends: roscore</a>
                  </li>
                  <li data-type="index-term" id="li_000641">
                    <span class="text" id="span_010179" smilref="Programming_Robots_with_ROS00032.smil#span_010179">rospy library</span>
                    <span class="text" id="span_010180" smilref="Programming_Robots_with_ROS00032.smil#span_010180">,</span>
                    <a data-type="index:locator" href="#ch20-idp43764544" external="false" id="a_001150" smilref="Programming_Robots_with_ROS00032.smil#a_001150">The Master and Friends: roscore</a>
                    <span class="text" id="span_010181" smilref="Programming_Robots_with_ROS00032.smil#span_010181">,</span>
                    <a data-type="index:locator" href="#ch21-idp44954512" external="false" id="a_001151" smilref="Programming_Robots_with_ROS00032.smil#a_001151">Logger Levels</a>
                  </li>
                  <li data-type="index-term" id="li_000642">
                    <span class="text" id="span_010182" smilref="Programming_Robots_with_ROS00032.smil#span_010182">ros_control plugin</span>
                    <span class="text" id="span_010183" smilref="Programming_Robots_with_ROS00032.smil#span_010183">,</span>
                    <a data-type="index:locator" href="#ch18-idp42053952" external="false" id="a_001152" smilref="Programming_Robots_with_ROS00032.smil#a_001152">Simulation in Gazebo</a>
                  </li>
                  <li data-type="index-term" id="li_000643">
                    <span class="text" id="span_010184" smilref="Programming_Robots_with_ROS00032.smil#span_010184">ROS_MASTER_URI</span>
                    <span class="text" id="span_010185" smilref="Programming_Robots_with_ROS00032.smil#span_010185">,</span>
                    <a data-type="index:locator" href="#ch02-idp152384" external="false" id="a_001153" smilref="Programming_Robots_with_ROS00032.smil#a_001153">roscore</a>
                  </li>
                  <li data-type="index-term" id="li_000644">
                    <span class="text" id="span_010186" smilref="Programming_Robots_with_ROS00032.smil#span_010186">rotary joints</span>
                    <span class="text" id="span_010187" smilref="Programming_Robots_with_ROS00032.smil#span_010187">,</span>
                    <a data-type="index:locator" href="#ch11-idp26436256" external="false" id="a_001154" smilref="Programming_Robots_with_ROS00032.smil#a_001154">Joints, Links, and Kinematic Chains</a>
                  </li>
                  <li id="li_000645">
                    <span data-type="index-term" id="span_010188" smilref="Programming_Robots_with_ROS00032.smil#span_010188">rqt_* interfaces</span>
                    <list type="ul" id="list_000117">
                      <li data-type="index-term" id="li_000646">
                        <span class="text" id="span_010189" smilref="Programming_Robots_with_ROS00032.smil#span_010189">rqt_bag</span>
                        <span class="text" id="span_010190" smilref="Programming_Robots_with_ROS00032.smil#span_010190">,</span>
                        <a data-type="index:locator" href="#ch21-idp45548992" external="false" id="a_001155" smilref="Programming_Robots_with_ROS00032.smil#a_001155">Visualizing Bags: rqt_bag</a>
                      </li>
                      <li data-type="index-term" id="li_000647">
                        <span class="text" id="span_010191" smilref="Programming_Robots_with_ROS00032.smil#span_010191">rqt_console</span>
                        <span class="text" id="span_010192" smilref="Programming_Robots_with_ROS00032.smil#span_010192">,</span>
                        <a data-type="index:locator" href="#ch21-ix_21-debugging-asciidoc11" external="false" id="a_001156" smilref="Programming_Robots_with_ROS00032.smil#a_001156">Reading Log Messages: rqt_console</a>
                        <span class="text" id="span_010193" smilref="Programming_Robots_with_ROS00032.smil#span_010193">-</span>
                        <a data-type="index:locator" href="#ch21-idp45070672" external="false" id="a_001157" smilref="Programming_Robots_with_ROS00032.smil#a_001157">Reading Log Messages: rqt_console</a>
                      </li>
                      <li data-type="index-term" id="li_000648">
                        <span class="text" id="span_010194" smilref="Programming_Robots_with_ROS00032.smil#span_010194">rqt_graph visualizer</span>
                        <span class="text" id="span_010195" smilref="Programming_Robots_with_ROS00032.smil#span_010195">,</span>
                        <a data-type="index:locator" href="#ch02-idp16941936" external="false" id="a_001158" smilref="Programming_Robots_with_ROS00032.smil#a_001158">rosrun</a>
                        <span class="text" id="span_010196" smilref="Programming_Robots_with_ROS00032.smil#span_010196">,</span>
                        <a data-type="index:locator" href="#ch21-ix_21-debugging-asciidoc17" external="false" id="a_001159" smilref="Programming_Robots_with_ROS00032.smil#a_001159">Visualizing the Graph: rqt_graph</a>
                        <span class="text" id="span_010197" smilref="Programming_Robots_with_ROS00032.smil#span_010197">-</span>
                        <a data-type="index:locator" href="#ch21-idp45146128" external="false" id="a_001160" smilref="Programming_Robots_with_ROS00032.smil#a_001160">Visualizing the Graph: rqt_graph</a>
                      </li>
                      <li data-type="index-term" id="li_000649">
                        <span class="text" id="span_010198" smilref="Programming_Robots_with_ROS00032.smil#span_010198">rqt_logger_level</span>
                        <span class="text" id="span_010199" smilref="Programming_Robots_with_ROS00032.smil#span_010199">,</span>
                        <a data-type="index:locator" href="#ch21-idp44969504" external="false" id="a_001161" smilref="Programming_Robots_with_ROS00032.smil#a_001161">Logger Levels</a>
                      </li>
                      <li data-type="index-term" id="li_000650">
                        <span class="text" id="span_010200" smilref="Programming_Robots_with_ROS00032.smil#span_010200">rqt_plot</span>
                        <span class="text" id="span_010201" smilref="Programming_Robots_with_ROS00032.smil#span_010201">,</span>
                        <a data-type="index:locator" href="#ch08-idp23916224" external="false" id="a_001162" smilref="Programming_Robots_with_ROS00032.smil#a_001162">Motion Generator</a>
                        <span class="text" id="span_010202" smilref="Programming_Robots_with_ROS00032.smil#span_010202">,</span>
                        <a data-type="index:locator" href="#ch21-ix_21-debugging-asciidoc24" external="false" id="a_001163" smilref="Programming_Robots_with_ROS00032.smil#a_001163">Plotting Data: rqt_plot</a>
                        <span class="text" id="span_010203" smilref="Programming_Robots_with_ROS00032.smil#span_010203">-</span>
                        <a data-type="index:locator" href="#ch21-idp45420064" external="false" id="a_001164" smilref="Programming_Robots_with_ROS00032.smil#a_001164">Plotting Data: rqt_plot</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000651">
                    <span class="text" id="span_010204" smilref="Programming_Robots_with_ROS00032.smil#span_010204">rviz (ROS visualization)</span>
                    <span class="text" id="span_010205" smilref="Programming_Robots_with_ROS00032.smil#span_010205">,</span>
                    <a data-type="index:locator" href="#ch08-ix_8-teleop_bot-asciidoc11" external="false" id="a_001165" smilref="Programming_Robots_with_ROS00032.smil#a_001165">rviz</a>
                    <span class="text" id="span_010206" smilref="Programming_Robots_with_ROS00032.smil#span_010206">-</span>
                    <a data-type="index:locator" href="#ch08-idp25182480" external="false" id="a_001166" smilref="Programming_Robots_with_ROS00032.smil#a_001166">rviz</a>
                    <list type="ul" id="list_000118">
                      <li data-type="index-term" id="li_000652">
                        <span class="text" id="span_010207" smilref="Programming_Robots_with_ROS00032.smil#span_010207">and transform tree</span>
                        <span class="text" id="span_010208" smilref="Programming_Robots_with_ROS00032.smil#span_010208">,</span>
                        <a data-type="index:locator" href="#ch14-idp37040192" external="false" id="a_001167" smilref="Programming_Robots_with_ROS00032.smil#a_001167">Picking Up the Item</a>
                      </li>
                      <li data-type="index-term" id="li_000653">
                        <span class="text" id="span_010209" smilref="Programming_Robots_with_ROS00032.smil#span_010209">for debugging sensor problems</span>
                        <span class="text" id="span_010210" smilref="Programming_Robots_with_ROS00032.smil#span_010210">,</span>
                        <a data-type="index:locator" href="#ch21-idp45256080" external="false" id="a_001168" smilref="Programming_Robots_with_ROS00032.smil#a_001168">Sensor Fusion: rviz</a>
                      </li>
                      <li data-type="index-term" id="li_000654">
                        <span class="text" id="span_010211" smilref="Programming_Robots_with_ROS00032.smil#span_010211">for localization</span>
                        <span class="text" id="span_010212" smilref="Programming_Robots_with_ROS00032.smil#span_010212">,</span>
                        <a data-type="index:locator" href="#ch10-idp25581296" external="false" id="a_001169" smilref="Programming_Robots_with_ROS00032.smil#a_001169">Localizing the Robot in a Map</a>
                        <span class="text" id="span_010213" smilref="Programming_Robots_with_ROS00032.smil#span_010213">,</span>
                        <a data-type="index:locator" href="#ch17-ix_17-rossify_robots2-asciidoc18" external="false" id="a_001170" smilref="Programming_Robots_with_ROS00032.smil#a_001170">Using rviz to Localize and Command a Navigating Robot</a>
                        <span class="text" id="span_010214" smilref="Programming_Robots_with_ROS00032.smil#span_010214">-</span>
                        <a data-type="index:locator" href="#ch17-idp41199680" external="false" id="a_001171" smilref="Programming_Robots_with_ROS00032.smil#a_001171">Using rviz to Localize and Command a Navigating Robot</a>
                      </li>
                      <li data-type="index-term" id="li_000655">
                        <span class="text" id="span_010215" smilref="Programming_Robots_with_ROS00032.smil#span_010215">for sending goals to CougarBot</span>
                        <span class="text" id="span_010216" smilref="Programming_Robots_with_ROS00032.smil#span_010216">,</span>
                        <a data-type="index:locator" href="#ch18-ix_18-rossify_robots3-asciidoc9" external="false" id="a_001172" smilref="Programming_Robots_with_ROS00032.smil#a_001172">Using rviz to Send Goals</a>
                        <span class="text" id="span_010217" smilref="Programming_Robots_with_ROS00032.smil#span_010217">-</span>
                        <a data-type="index:locator" href="#ch18-idp42725088" external="false" id="a_001173" smilref="Programming_Robots_with_ROS00032.smil#a_001173">Using rviz to Send Goals</a>
                      </li>
                      <li data-type="index-term" id="li_000656">
                        <span class="text" id="span_010218" smilref="Programming_Robots_with_ROS00032.smil#span_010218">frame of reference for</span>
                        <span class="text" id="span_010219" smilref="Programming_Robots_with_ROS00032.smil#span_010219">,</span>
                        <a data-type="index:locator" href="#ch08-idp25138208" external="false" id="a_001174" smilref="Programming_Robots_with_ROS00032.smil#a_001174">rviz</a>
                      </li>
                      <li data-type="index-term" id="li_000657">
                        <span class="text" id="span_010220" smilref="Programming_Robots_with_ROS00032.smil#span_010220">Gazebo vs.</span>
                        <span class="text" id="span_010221" smilref="Programming_Robots_with_ROS00032.smil#span_010221">,</span>
                        <a data-type="index:locator" href="#ch17-idp39117920" external="false" id="a_001175" smilref="Programming_Robots_with_ROS00032.smil#a_001175">Verifying Transforms</a>
                      </li>
                      <li data-type="index-term" id="li_000658">
                        <span class="text" id="span_010222" smilref="Programming_Robots_with_ROS00032.smil#span_010222">navigating in</span>
                        <span class="text" id="span_010223" smilref="Programming_Robots_with_ROS00032.smil#span_010223">,</span>
                        <a data-type="index:locator" href="#ch10-idp25650432" external="false" id="a_001176" smilref="Programming_Robots_with_ROS00032.smil#a_001176">Navigating in rviz</a>
                      </li>
                    </list>
                  </li>
                </list>
              </div>
              <h1 id="h1_000561" smilref="Programming_Robots_with_ROS00032.smil#h1_000561">S</h1>
              <div data-type="indexdiv" id="div_000069">
                <list type="ul" id="list_000119">
                  <li data-type="index-term" id="li_000659">
                    <span class="text" id="span_010224" smilref="Programming_Robots_with_ROS00032.smil#span_010224">scalar readings</span>
                    <span class="text" id="span_010225" smilref="Programming_Robots_with_ROS00032.smil#span_010225">,</span>
                    <a data-type="index:locator" href="#ch06-idp21757824" external="false" id="a_001177" smilref="Programming_Robots_with_ROS00032.smil#a_001177">Sensors</a>
                  </li>
                  <li data-type="index-term" id="li_000660">
                    <span class="text" id="span_010226" smilref="Programming_Robots_with_ROS00032.smil#span_010226">SDF (Simulation Description Format)</span>
                    <span class="text" id="span_010227" smilref="Programming_Robots_with_ROS00032.smil#span_010227">,</span>
                    <a data-type="index:locator" href="#ch11-ix_11-chessbot-asciidoc17" external="false" id="a_001178" smilref="Programming_Robots_with_ROS00032.smil#a_001178">Modeling a Chessboard</a>
                    <span class="text" id="span_010228" smilref="Programming_Robots_with_ROS00032.smil#span_010228">-</span>
                    <a data-type="index:locator" href="#ch11-idp28055088" external="false" id="a_001179" smilref="Programming_Robots_with_ROS00032.smil#a_001179">Modeling a Chessboard</a>
                  </li>
                  <li data-type="index-term" id="li_000661">
                    <span class="text" id="span_010229" smilref="Programming_Robots_with_ROS00032.smil#span_010229">sensor</span>
                    <span class="text" id="span_010230" smilref="Programming_Robots_with_ROS00032.smil#span_010230">,</span>
                    <a data-type="index:locator" href="#ch06-ix_6-robots-asciidoc6" external="false" id="a_001180" smilref="Programming_Robots_with_ROS00032.smil#a_001180">Sensors</a>
                    <span class="text" id="span_010231" smilref="Programming_Robots_with_ROS00032.smil#span_010231">-</span>
                    <a data-type="index:locator" href="#ch06-idp21834352" external="false" id="a_001181" smilref="Programming_Robots_with_ROS00032.smil#a_001181">Shaft encoders</a>
                    <list type="ul" id="list_000120">
                      <li data-type="index-term" id="li_000662">
                        <span class="text" id="span_010232" smilref="Programming_Robots_with_ROS00032.smil#span_010232">adding your own</span>
                        <span class="text" id="span_010233" smilref="Programming_Robots_with_ROS00032.smil#span_010233">,</span>
                        <a data-type="index:locator" href="#ch15-ix_15-sensors_actuators-asciidoc0" external="false" id="a_001182" smilref="Programming_Robots_with_ROS00032.smil#a_001182">Adding Your Own Sensors</a>
                        <span class="text" id="span_010234" smilref="Programming_Robots_with_ROS00032.smil#span_010234">-</span>
                        <a data-type="index:locator" href="#ch15-idp37683072" external="false" id="a_001183" smilref="Programming_Robots_with_ROS00032.smil#a_001183">Design 4: Sensor Measurements on Demand</a>
                      </li>
                      <li data-type="index-term" id="li_000663">
                        <span class="text" id="span_010235" smilref="Programming_Robots_with_ROS00032.smil#span_010235">data for wander-bot</span>
                        <span class="text" id="span_010236" smilref="Programming_Robots_with_ROS00032.smil#span_010236">,</span>
                        <a data-type="index:locator" href="#ch07-ix_7-wanderbot-asciidoc3" external="false" id="a_001184" smilref="Programming_Robots_with_ROS00032.smil#a_001184">Reading Sensor Data</a>
                        <span class="text" id="span_010237" smilref="Programming_Robots_with_ROS00032.smil#span_010237">-</span>
                        <a data-type="index:locator" href="#ch07-idp22387728" external="false" id="a_001185" smilref="Programming_Robots_with_ROS00032.smil#a_001185">Reading Sensor Data</a>
                      </li>
                      <li data-type="index-term" id="li_000664">
                        <span class="text" id="span_010238" smilref="Programming_Robots_with_ROS00032.smil#span_010238">depth cameras</span>
                        <span class="text" id="span_010239" smilref="Programming_Robots_with_ROS00032.smil#span_010239">,</span>
                        <a data-type="index:locator" href="#ch06-ix_6-robots-asciidoc10" external="false" id="a_001186" smilref="Programming_Robots_with_ROS00032.smil#a_001186">Depth cameras</a>
                        <span class="text" id="span_010240" smilref="Programming_Robots_with_ROS00032.smil#span_010240">-</span>
                        <a data-type="index:locator" href="#ch06-idp21801376" external="false" id="a_001187" smilref="Programming_Robots_with_ROS00032.smil#a_001187">Depth cameras</a>
                      </li>
                      <li data-type="index-term" id="li_000665">
                        <span class="text" id="span_010241" smilref="Programming_Robots_with_ROS00032.smil#span_010241">FakeSensor for simulation</span>
                        <span class="text" id="span_010242" smilref="Programming_Robots_with_ROS00032.smil#span_010242">,</span>
                        <a data-type="index:locator" href="#ch15-idp37818176" external="false" id="a_001188" smilref="Programming_Robots_with_ROS00032.smil#a_001188">A (Fake) Sensor</a>
                      </li>
                      <li data-type="index-term" id="li_000666">
                        <span class="text" id="span_010243" smilref="Programming_Robots_with_ROS00032.smil#span_010243">laser scanners</span>
                        <span class="text" id="span_010244" smilref="Programming_Robots_with_ROS00032.smil#span_010244">,</span>
                        <a data-type="index:locator" href="#ch06-idp21803760" external="false" id="a_001189" smilref="Programming_Robots_with_ROS00033.smil#a_001189">Laser scanners</a>
                      </li>
                      <li data-type="index-term" id="li_000667">
                        <span class="text" id="span_010245" smilref="Programming_Robots_with_ROS00033.smil#span_010245">shaft encoders</span>
                        <span class="text" id="span_010246" smilref="Programming_Robots_with_ROS00033.smil#span_010246">,</span>
                        <a data-type="index:locator" href="#ch06-ix_6-robots-asciidoc11" external="false" id="a_001190" smilref="Programming_Robots_with_ROS00033.smil#a_001190">Shaft encoders</a>
                        <span class="text" id="span_010247" smilref="Programming_Robots_with_ROS00033.smil#span_010247">-</span>
                        <a data-type="index:locator" href="#ch06-idp21829136" external="false" id="a_001191" smilref="Programming_Robots_with_ROS00033.smil#a_001191">Shaft encoders</a>
                      </li>
                      <li data-type="index-term" id="li_000668">
                        <span class="text" id="span_010248" smilref="Programming_Robots_with_ROS00033.smil#span_010248">visual cameras</span>
                        <span class="text" id="span_010249" smilref="Programming_Robots_with_ROS00033.smil#span_010249">,</span>
                        <a data-type="index:locator" href="#ch06-idp21766096" external="false" id="a_001192" smilref="Programming_Robots_with_ROS00033.smil#a_001192">Visual cameras</a>
                      </li>
                      <li data-type="index-term" id="li_000669">
                        <span class="text" id="span_010250" smilref="Programming_Robots_with_ROS00033.smil#span_010250">wrapper design considerations</span>
                        <span class="text" id="span_010251" smilref="Programming_Robots_with_ROS00033.smil#span_010251">,</span>
                        <a data-type="index:locator" href="#ch15-idp37826880" external="false" id="a_001193" smilref="Programming_Robots_with_ROS00033.smil#a_001193">Designing the ROS Wrapper</a>
                      </li>
                      <li data-type="index-term" id="li_000670">
                        <span class="text" id="span_010252" smilref="Programming_Robots_with_ROS00033.smil#span_010252">wrapper design for measurements on demand</span>
                        <span class="text" id="span_010253" smilref="Programming_Robots_with_ROS00033.smil#span_010253">,</span>
                        <a data-type="index:locator" href="#ch15-idp37263376" external="false" id="a_001194" smilref="Programming_Robots_with_ROS00033.smil#a_001194">Design 4: Sensor Measurements on Demand</a>
                      </li>
                      <li data-type="index-term" id="li_000671">
                        <span class="text" id="span_010254" smilref="Programming_Robots_with_ROS00033.smil#span_010254">wrapper design for periodic measurements over a topic</span>
                        <span class="text" id="span_010255" smilref="Programming_Robots_with_ROS00033.smil#span_010255">,</span>
                        <a data-type="index:locator" href="#ch15-ix_15-sensors_actuators-asciidoc2" external="false" id="a_001195" smilref="Programming_Robots_with_ROS00033.smil#a_001195">Design 1: Periodic Measurements over a Topic</a>
                        <span class="text" id="span_010256" smilref="Programming_Robots_with_ROS00033.smil#span_010256">-</span>
                        <a data-type="index:locator" href="#ch15-idp37239472" external="false" id="a_001196" smilref="Programming_Robots_with_ROS00033.smil#a_001196">Design 1: Periodic Measurements over a Topic</a>
                      </li>
                      <li data-type="index-term" id="li_000672">
                        <span class="text" id="span_010257" smilref="Programming_Robots_with_ROS00033.smil#span_010257">wrapper design for streaming measurements over a topic</span>
                        <span class="text" id="span_010258" smilref="Programming_Robots_with_ROS00033.smil#span_010258">,</span>
                        <a data-type="index:locator" href="#ch15-idp37475904" external="false" id="a_001197" smilref="Programming_Robots_with_ROS00033.smil#a_001197">Design 2: Streaming Measurements over a Topic</a>
                      </li>
                      <li data-type="index-term" id="li_000673">
                        <span class="text" id="span_010259" smilref="Programming_Robots_with_ROS00033.smil#span_010259">wrapper design for streaming measurements published at a fixed rate</span>
                        <span class="text" id="span_010260" smilref="Programming_Robots_with_ROS00033.smil#span_010260">,</span>
                        <a data-type="index:locator" href="#ch15-idp37475904" external="false" id="a_001198" smilref="Programming_Robots_with_ROS00033.smil#a_001198">Design 2: Streaming Measurements over a Topic</a>
                      </li>
                    </list>
                  </li>
                  <li id="li_000674">
                    <span data-type="index-term" id="span_010261" smilref="Programming_Robots_with_ROS00033.smil#span_010261">sensor data</span>
                    <list type="ul" id="list_000121">
                      <li data-type="index-term" id="li_000675">
                        <span class="text" id="span_010262" smilref="Programming_Robots_with_ROS00033.smil#span_010262">for improving initial localization</span>
                        <span class="text" id="span_010263" smilref="Programming_Robots_with_ROS00033.smil#span_010263">,</span>
                        <a data-type="index:locator" href="#ch10-idp25597440" external="false" id="a_001199" smilref="Programming_Robots_with_ROS00033.smil#a_001199">Getting a Good Initial Localization</a>
                      </li>
                      <li data-type="index-term" id="li_000676">
                        <span class="text" id="span_010264" smilref="Programming_Robots_with_ROS00033.smil#span_010264">reading, for wander-bot</span>
                        <span class="text" id="span_010265" smilref="Programming_Robots_with_ROS00033.smil#span_010265">,</span>
                        <a data-type="index:locator" href="#ch07-ix_7-wanderbot-asciidoc3" external="false" id="a_001200" smilref="Programming_Robots_with_ROS00033.smil#a_001200">Reading Sensor Data</a>
                        <span class="text" id="span_010266" smilref="Programming_Robots_with_ROS00033.smil#span_010266">-</span>
                        <a data-type="index:locator" href="#ch07-idp22387728" external="false" id="a_001201" smilref="Programming_Robots_with_ROS00033.smil#a_001201">Reading Sensor Data</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000677">
                    <span class="text" id="span_010267" smilref="Programming_Robots_with_ROS00033.smil#span_010267">sensor head</span>
                    <span class="text" id="span_010268" smilref="Programming_Robots_with_ROS00033.smil#span_010268">,</span>
                    <a data-type="index:locator" href="#ch06-idp21762048" external="false" id="a_001202" smilref="Programming_Robots_with_ROS00033.smil#a_001202">Sensors</a>
                  </li>
                  <li data-type="index-term" id="li_000678">
                    <span class="text" id="span_010269" smilref="Programming_Robots_with_ROS00033.smil#span_010269">sensor_msgs/Image</span>
                    <span class="text" id="span_010270" smilref="Programming_Robots_with_ROS00033.smil#span_010270">,</span>
                    <a data-type="index:locator" href="#ch06-idp21775392" external="false" id="a_001203" smilref="Programming_Robots_with_ROS00033.smil#a_001203">Visual cameras</a>
                  </li>
                  <li data-type="index-term" id="li_000679">
                    <span class="text" id="span_010271" smilref="Programming_Robots_with_ROS00033.smil#span_010271">service definition file</span>
                    <span class="text" id="span_010272" smilref="Programming_Robots_with_ROS00033.smil#span_010272">,</span>
                    <a data-type="index:locator" href="#ch04-idp18764992" external="false" id="a_001204" smilref="Programming_Robots_with_ROS00033.smil#a_001204">Defining a Service</a>
                  </li>
                  <li data-type="index-term" id="li_000680">
                    <span class="text" id="span_010273" smilref="Programming_Robots_with_ROS00033.smil#span_010273">services</span>
                    <span class="text" id="span_010274" smilref="Programming_Robots_with_ROS00033.smil#span_010274">,</span>
                    <a data-type="index:locator" href="#ch04-ix_4-services-asciidoc0" external="false" id="a_001205" smilref="Programming_Robots_with_ROS00033.smil#a_001205">Services</a>
                    <span class="text" id="span_010275" smilref="Programming_Robots_with_ROS00033.smil#span_010275">-</span>
                    <a data-type="index:locator" href="#ch04-idp19641920" external="false" id="a_001206" smilref="Programming_Robots_with_ROS00033.smil#a_001206">Summary</a>
                    <list type="ul" id="list_000122">
                      <li data-type="index-term" id="li_000681">
                        <span class="text" id="span_010276" smilref="Programming_Robots_with_ROS00033.smil#span_010276">actions vs.</span>
                        <span class="text" id="span_010277" smilref="Programming_Robots_with_ROS00033.smil#span_010277">,</span>
                        <a data-type="index:locator" href="#ch05-ix_5-actions-asciidoc0" external="false" id="a_001207" smilref="Programming_Robots_with_ROS00033.smil#a_001207">Actions</a>
                        <span class="text" id="span_010278" smilref="Programming_Robots_with_ROS00033.smil#span_010278">,</span>
                        <a data-type="index:locator" href="#ch05-idp21696896" external="false" id="a_001208" smilref="Programming_Robots_with_ROS00033.smil#a_001208">Summary</a>
                      </li>
                      <li data-type="index-term" id="li_000682">
                        <span class="text" id="span_010279" smilref="Programming_Robots_with_ROS00033.smil#span_010279">C++/Python translation</span>
                        <span class="text" id="span_010280" smilref="Programming_Robots_with_ROS00033.smil#span_010280">,</span>
                        <a data-type="index:locator" href="#ch23-ix_23-cplusplus-asciidoc8" external="false" id="a_001209" smilref="Programming_Robots_with_ROS00033.smil#a_001209">Services</a>
                        <span class="text" id="span_010281" smilref="Programming_Robots_with_ROS00033.smil#span_010281">-</span>
                        <a data-type="index:locator" href="#ch23-idp46797424" external="false" id="a_001210" smilref="Programming_Robots_with_ROS00033.smil#a_001210">Services</a>
                      </li>
                      <li data-type="index-term" id="li_000683">
                        <span class="text" id="span_010282" smilref="Programming_Robots_with_ROS00033.smil#span_010282">calling</span>
                        <span class="text" id="span_010283" smilref="Programming_Robots_with_ROS00033.smil#span_010283">,</span>
                        <a data-type="index:locator" href="#ch04-idp19460288" external="false" id="a_001211" smilref="Programming_Robots_with_ROS00033.smil#a_001211">Other Ways to Call Services</a>
                      </li>
                      <li data-type="index-term" id="li_000684">
                        <span class="text" id="span_010284" smilref="Programming_Robots_with_ROS00033.smil#span_010284">checking with client node</span>
                        <span class="text" id="span_010285" smilref="Programming_Robots_with_ROS00033.smil#span_010285">,</span>
                        <a data-type="index:locator" href="#ch04-idp19454688" external="false" id="a_001212" smilref="Programming_Robots_with_ROS00033.smil#a_001212">Checking That Everything Works as Expected</a>
                      </li>
                      <li data-type="index-term" id="li_000685">
                        <span class="text" id="span_010286" smilref="Programming_Robots_with_ROS00033.smil#span_010286">checking with rosservice</span>
                        <span class="text" id="span_010287" smilref="Programming_Robots_with_ROS00033.smil#span_010287">,</span>
                        <a data-type="index:locator" href="#ch04-idp19259072" external="false" id="a_001213" smilref="Programming_Robots_with_ROS00033.smil#a_001213">Checking That Everything Works as Expected</a>
                      </li>
                      <li data-type="index-term" id="li_000686">
                        <span class="text" id="span_010288" smilref="Programming_Robots_with_ROS00033.smil#span_010288">defining</span>
                        <span class="text" id="span_010289" smilref="Programming_Robots_with_ROS00033.smil#span_010289">,</span>
                        <a data-type="index:locator" href="#ch04-idp18764992" external="false" id="a_001214" smilref="Programming_Robots_with_ROS00033.smil#a_001214">Defining a Service</a>
                        <span class="text" id="span_010290" smilref="Programming_Robots_with_ROS00033.smil#span_010290">-</span>
                        <a data-type="index:locator" href="#ch04-idp18936224" external="false" id="a_001215" smilref="Programming_Robots_with_ROS00033.smil#a_001215">Defining a Service</a>
                      </li>
                      <li data-type="index-term" id="li_000687">
                        <span class="text" id="span_010291" smilref="Programming_Robots_with_ROS00033.smil#span_010291">implementing</span>
                        <span class="text" id="span_010292" smilref="Programming_Robots_with_ROS00033.smil#span_010292">,</span>
                        <a data-type="index:locator" href="#ch04-idp18939488" external="false" id="a_001216" smilref="Programming_Robots_with_ROS00033.smil#a_001216">Implementing a Service</a>
                        <span class="text" id="span_010293" smilref="Programming_Robots_with_ROS00033.smil#span_010293">-</span>
                        <a data-type="index:locator" href="#ch04-idp19640240" external="false" id="a_001217" smilref="Programming_Robots_with_ROS00033.smil#a_001217">Other Ways to Call Services</a>
                      </li>
                      <li data-type="index-term" id="li_000688">
                        <span class="text" id="span_010294" smilref="Programming_Robots_with_ROS00033.smil#span_010294">returning values from</span>
                        <span class="text" id="span_010295" smilref="Programming_Robots_with_ROS00033.smil#span_010295">,</span>
                        <a data-type="index:locator" href="#ch04-idp19263504" external="false" id="a_001218" smilref="Programming_Robots_with_ROS00033.smil#a_001218">Other Ways of Returning Values from a Service</a>
                      </li>
                      <li data-type="index-term" id="li_000689">
                        <span class="text" id="span_010296" smilref="Programming_Robots_with_ROS00033.smil#span_010296">topics vs.</span>
                        <span class="text" id="span_010297" smilref="Programming_Robots_with_ROS00033.smil#span_010297">,</span>
                        <a data-type="index:locator" href="#ch05-idp21696896" external="false" id="a_001219" smilref="Programming_Robots_with_ROS00033.smil#a_001219">Summary</a>
                      </li>
                      <li data-type="index-term" id="li_000690">
                        <span class="text" id="span_010298" smilref="Programming_Robots_with_ROS00033.smil#span_010298">using</span>
                        <span class="text" id="span_010299" smilref="Programming_Robots_with_ROS00033.smil#span_010299">,</span>
                        <a data-type="index:locator" href="#ch04-ix_4-services-asciidoc4" external="false" id="a_001220" smilref="Programming_Robots_with_ROS00033.smil#a_001220">Using a Service</a>
                        <span class="text" id="span_010300" smilref="Programming_Robots_with_ROS00033.smil#span_010300">-</span>
                        <a data-type="index:locator" href="#ch04-idp19549952" external="false" id="a_001221" smilref="Programming_Robots_with_ROS00033.smil#a_001221">Using a Service</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000691">
                    <span class="text" id="span_010301" smilref="Programming_Robots_with_ROS00033.smil#span_010301">setup.bash file</span>
                    <span class="text" id="span_010302" smilref="Programming_Robots_with_ROS00033.smil#span_010302">,</span>
                    <a data-type="index:locator" href="#ch02-idm176400" external="false" id="a_001222" smilref="Programming_Robots_with_ROS00033.smil#a_001222">Workspaces</a>
                  </li>
                  <li data-type="index-term" id="li_000692">
                    <span class="text" id="span_010303" smilref="Programming_Robots_with_ROS00033.smil#span_010303">shaft encoders</span>
                    <span class="text" id="span_010304" smilref="Programming_Robots_with_ROS00033.smil#span_010304">,</span>
                    <a data-type="index:locator" href="#ch06-ix_6-robots-asciidoc11" external="false" id="a_001223" smilref="Programming_Robots_with_ROS00033.smil#a_001223">Shaft encoders</a>
                    <span class="text" id="span_010305" smilref="Programming_Robots_with_ROS00033.smil#span_010305">-</span>
                    <a data-type="index:locator" href="#ch06-idp21829136" external="false" id="a_001224" smilref="Programming_Robots_with_ROS00033.smil#a_001224">Shaft encoders</a>
                  </li>
                  <li data-type="index-term" id="li_000693">
                    <span class="text" id="span_010306" smilref="Programming_Robots_with_ROS00033.smil#span_010306">shebang</span>
                    <span class="text" id="span_010307" smilref="Programming_Robots_with_ROS00033.smil#span_010307">,</span>
                    <a data-type="index:locator" href="#ch03-idp17253024" external="false" id="a_001225" smilref="Programming_Robots_with_ROS00033.smil#a_001225">Publishing to a Topic</a>
                  </li>
                  <li data-type="index-term" id="li_000694">
                    <span class="text" id="span_010308" smilref="Programming_Robots_with_ROS00033.smil#span_010308">SimpleActionClient class</span>
                    <span class="text" id="span_010309" smilref="Programming_Robots_with_ROS00033.smil#span_010309">,</span>
                    <a data-type="index:locator" href="#ch05-idp20156032" external="false" id="a_001226" smilref="Programming_Robots_with_ROS00033.smil#a_001226">Using an Action</a>
                  </li>
                  <li data-type="index-term" id="li_000695">
                    <span class="text" id="span_010310" smilref="Programming_Robots_with_ROS00033.smil#span_010310">SimpleActionServer class</span>
                    <span class="text" id="span_010311" smilref="Programming_Robots_with_ROS00033.smil#span_010311">,</span>
                    <a data-type="index:locator" href="#ch05-ix_5-actions-asciidoc3" external="false" id="a_001227" smilref="Programming_Robots_with_ROS00033.smil#a_001227">Implementing a Basic Action Server</a>
                    <span class="text" id="span_010312" smilref="Programming_Robots_with_ROS00033.smil#span_010312">-</span>
                    <a data-type="index:locator" href="#ch05-idp20131872" external="false" id="a_001228" smilref="Programming_Robots_with_ROS00033.smil#a_001228">Implementing a Basic Action Server</a>
                  </li>
                  <li id="li_000696">
                    <span data-type="index-term" id="span_010313" smilref="Programming_Robots_with_ROS00033.smil#span_010313">simulation</span>
                    <list type="ul" id="list_000123">
                      <li data-type="index-term" id="li_000697">
                        <span class="text" id="span_010314" smilref="Programming_Robots_with_ROS00033.smil#span_010314">of manipulators</span>
                        <span class="text" id="span_010315" smilref="Programming_Robots_with_ROS00033.smil#span_010315">,</span>
                        <a data-type="index:locator" href="#ch11-idp26391840" external="false" id="a_001229" smilref="Programming_Robots_with_ROS00033.smil#a_001229">The Key to Success</a>
                      </li>
                      <li data-type="index-term" id="li_000698">
                        <span class="text" id="span_010316" smilref="Programming_Robots_with_ROS00033.smil#span_010316">of R2</span>
                        <span class="text" id="span_010317" smilref="Programming_Robots_with_ROS00033.smil#span_010317">,</span>
                        <a data-type="index:locator" href="#ch11-ix_11-chessbot-asciidoc5" external="false" id="a_001230" smilref="Programming_Robots_with_ROS00033.smil#a_001230">Installing and Running a Simulated R2</a>
                        <span class="text" id="span_010318" smilref="Programming_Robots_with_ROS00033.smil#span_010318">-</span>
                        <a data-type="index:locator" href="#ch11-idp26336784" external="false" id="a_001231" smilref="Programming_Robots_with_ROS00033.smil#a_001231">Installing and Running a Simulated R2</a>
                      </li>
                      <li data-type="index-term" id="li_000699">
                        <span class="text" id="span_010319" smilref="Programming_Robots_with_ROS00033.smil#span_010319">visualization vs.</span>
                        <span class="text" id="span_010320" smilref="Programming_Robots_with_ROS00033.smil#span_010320">,</span>
                        <a data-type="index:locator" href="#ch17-idp39118880" external="false" id="a_001232" smilref="Programming_Robots_with_ROS00033.smil#a_001232">Verifying Transforms</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000700">
                    <span class="text" id="span_010321" smilref="Programming_Robots_with_ROS00033.smil#span_010321">Simulation Description Format (SDF)</span>
                    <span class="text" id="span_010322" smilref="Programming_Robots_with_ROS00033.smil#span_010322">,</span>
                    <a data-type="index:locator" href="#ch11-ix_11-chessbot-asciidoc17" external="false" id="a_001233" smilref="Programming_Robots_with_ROS00033.smil#a_001233">Modeling a Chessboard</a>
                    <span class="text" id="span_010323" smilref="Programming_Robots_with_ROS00033.smil#span_010323">-</span>
                    <a data-type="index:locator" href="#ch11-idp28055088" external="false" id="a_001234" smilref="Programming_Robots_with_ROS00033.smil#a_001234">Modeling a Chessboard</a>
                  </li>
                  <li data-type="index-term" id="li_000701">
                    <span class="text" id="span_010324" smilref="Programming_Robots_with_ROS00033.smil#span_010324">simulators</span>
                    <span class="text" id="span_010325" smilref="Programming_Robots_with_ROS00033.smil#span_010325">,</span>
                    <a data-type="index:locator" href="#ch06-ix_6-robots-asciidoc14" external="false" id="a_001235" smilref="Programming_Robots_with_ROS00033.smil#a_001235">Simulators</a>
                    <span class="text" id="span_010326" smilref="Programming_Robots_with_ROS00033.smil#span_010326">-</span>
                    <a data-type="index:locator" href="#ch06-idp21919440" external="false" id="a_001236" smilref="Programming_Robots_with_ROS00033.smil#a_001236">Other Simulators</a>
                    <list type="ul" id="list_000124">
                      <li data-type="index-term" id="li_000702">
                        <span class="text" id="span_010327" smilref="Programming_Robots_with_ROS00033.smil#span_010327">alternatives to Gazebo and Stage</span>
                        <span class="text" id="span_010328" smilref="Programming_Robots_with_ROS00033.smil#span_010328">,</span>
                        <a data-type="index:locator" href="#ch06-idp21919440" external="false" id="a_001237" smilref="Programming_Robots_with_ROS00033.smil#a_001237">Other Simulators</a>
                      </li>
                      <li data-type="index-term" id="li_000703">
                        <span class="text" id="span_010329" smilref="Programming_Robots_with_ROS00033.smil#span_010329">Gazebo</span>
                        <span class="text" id="span_010330" smilref="Programming_Robots_with_ROS00033.smil#span_010330">,</span>
                        <a data-type="index:locator" href="#ch06-ix_6-robots-asciidoc15" external="false" id="a_001238" smilref="Programming_Robots_with_ROS00033.smil#a_001238">Gazebo</a>
                        <span class="text" id="span_010331" smilref="Programming_Robots_with_ROS00033.smil#span_010331">-</span>
                        <a data-type="index:locator" href="#ch06-idp21915808" external="false" id="a_001239" smilref="Programming_Robots_with_ROS00033.smil#a_001239">Gazebo</a>
                        <list type="ul" id="list_000125">
                          <li data-gentext="see" id="li_000704" smilref="Programming_Robots_with_ROS00033.smil#li_000704">(see also Gazebo)</li>
                        </list>
                      </li>
                      <li data-type="index-term" id="li_000705">
                        <span class="text" id="span_010332" smilref="Programming_Robots_with_ROS00033.smil#span_010332">Stage</span>
                        <span class="text" id="span_010333" smilref="Programming_Robots_with_ROS00033.smil#span_010333">,</span>
                        <a data-type="index:locator" href="#ch06-idp21885824" external="false" id="a_001240" smilref="Programming_Robots_with_ROS00033.smil#a_001240">Stage</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000706">
                    <span class="text" id="span_010334" smilref="Programming_Robots_with_ROS00033.smil#span_010334">simultaneous localization and mapping (SLAM)</span>
                    <span class="text" id="span_010335" smilref="Programming_Robots_with_ROS00033.smil#span_010335">,</span>
                    <a data-type="index:locator" href="#ch06-idp21887024" external="false" id="a_001241" smilref="Programming_Robots_with_ROS00033.smil#a_001241">Stage</a>
                  </li>
                  <li data-type="index-term" id="li_000707">
                    <span class="text" id="span_010336" smilref="Programming_Robots_with_ROS00033.smil#span_010336">single-axis revolute joints</span>
                    <span class="text" id="span_010337" smilref="Programming_Robots_with_ROS00033.smil#span_010337">,</span>
                    <a data-type="index:locator" href="#ch06-idp21730400" external="false" id="a_001242" smilref="Programming_Robots_with_ROS00033.smil#a_001242">Actuation: Manipulator Arm</a>
                  </li>
                  <li data-type="index-term" id="li_000708">
                    <span class="text" id="span_010338" smilref="Programming_Robots_with_ROS00033.smil#span_010338">skid steering</span>
                    <span class="text" id="span_010339" smilref="Programming_Robots_with_ROS00033.smil#span_010339">,</span>
                    <a data-type="index:locator" href="#ch06-idp21665152" external="false" id="a_001243" smilref="Programming_Robots_with_ROS00033.smil#a_001243">Actuation: Mobile Platform</a>
                  </li>
                  <li data-type="index-term" id="li_000709">
                    <span class="text" id="span_010340" smilref="Programming_Robots_with_ROS00033.smil#span_010340">slam_gmapping</span>
                    <span class="text" id="span_010341" smilref="Programming_Robots_with_ROS00033.smil#span_010341">,</span>
                    <a data-type="index:locator" href="#ch09-ix_9-mapping-asciidoc10" external="false" id="a_001244" smilref="Programming_Robots_with_ROS00033.smil#a_001244">Building Maps</a>
                    <span class="text" id="span_010342" smilref="Programming_Robots_with_ROS00033.smil#span_010342">-</span>
                    <a data-type="index:locator" href="#ch09-idp24971456" external="false" id="a_001245" smilref="Programming_Robots_with_ROS00033.smil#a_001245">Building Maps</a>
                  </li>
                  <li data-type="index-term" id="li_000710">
                    <span class="text" id="span_010343" smilref="Programming_Robots_with_ROS00033.smil#span_010343">slice notation</span>
                    <span class="text" id="span_010344" smilref="Programming_Robots_with_ROS00033.smil#span_010344">,</span>
                    <a data-type="index:locator" href="#ch12-idp29901680" external="false" id="a_001246" smilref="Programming_Robots_with_ROS00033.smil#a_001246">Detecting the Line</a>
                  </li>
                  <li id="li_000711">
                    <span data-type="index-term" id="span_010345" smilref="Programming_Robots_with_ROS00033.smil#span_010345">smach</span>
                    <list type="ul" id="list_000126">
                      <li data-type="index-term" id="li_000712">
                        <span class="text" id="span_010346" smilref="Programming_Robots_with_ROS00033.smil#span_010346">for advanced state machine</span>
                        <span class="text" id="span_010347" smilref="Programming_Robots_with_ROS00033.smil#span_010347">,</span>
                        <a data-type="index:locator" href="#ch13-ix_13-patrol-asciidoc9" external="false" id="a_001247" smilref="Programming_Robots_with_ROS00033.smil#a_001247">A Slightly More Relevant Example</a>
                        <span class="text" id="span_010348" smilref="Programming_Robots_with_ROS00033.smil#span_010348">-</span>
                        <a data-type="index:locator" href="#ch13-idp32513008" external="false" id="a_001248" smilref="Programming_Robots_with_ROS00033.smil#a_001248">A Slightly More Relevant Example</a>
                      </li>
                      <li data-type="index-term" id="li_000713">
                        <span class="text" id="span_010349" smilref="Programming_Robots_with_ROS00033.smil#span_010349">for defining state machines</span>
                        <span class="text" id="span_010350" smilref="Programming_Robots_with_ROS00033.smil#span_010350">,</span>
                        <a data-type="index:locator" href="#ch13-ix_13-patrol-asciidoc5" external="false" id="a_001249" smilref="Programming_Robots_with_ROS00033.smil#a_001249">Defining State Machines with smach</a>
                        <span class="text" id="span_010351" smilref="Programming_Robots_with_ROS00033.smil#span_010351">-</span>
                        <a data-type="index:locator" href="#ch13-idp32850304" external="false" id="a_001250" smilref="Programming_Robots_with_ROS00033.smil#a_001250">Defining State Machines Procedurally</a>
                      </li>
                      <li data-type="index-term" id="li_000714">
                        <span class="text" id="span_010352" smilref="Programming_Robots_with_ROS00033.smil#span_010352">for simple state machine</span>
                        <span class="text" id="span_010353" smilref="Programming_Robots_with_ROS00033.smil#span_010353">,</span>
                        <a data-type="index:locator" href="#ch13-ix_13-patrol-asciidoc8" external="false" id="a_001251" smilref="Programming_Robots_with_ROS00033.smil#a_001251">Defining State Machines with smach</a>
                        <span class="text" id="span_010354" smilref="Programming_Robots_with_ROS00033.smil#span_010354">-</span>
                        <a data-type="index:locator" href="#ch13-idp31631856" external="false" id="a_001252" smilref="Programming_Robots_with_ROS00033.smil#a_001252">Defining State Machines with smach</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000715">
                    <span class="text" id="span_010355" smilref="Programming_Robots_with_ROS00033.smil#span_010355">smach_ros package</span>
                    <span class="text" id="span_010356" smilref="Programming_Robots_with_ROS00033.smil#span_010356">,</span>
                    <a data-type="index:locator" href="#ch13-idp33353408" external="false" id="a_001253" smilref="Programming_Robots_with_ROS00033.smil#a_001253">A Better Way to Patrol</a>
                  </li>
                  <li data-type="index-term" id="li_000716">
                    <span class="text" id="span_010357" smilref="Programming_Robots_with_ROS00033.smil#span_010357">software libraries</span>
                    <span class="text" id="span_010358" smilref="Programming_Robots_with_ROS00033.smil#span_010358">,</span>
                    <a data-type="index:locator" href="#ch19-ix_19-libraries-asciidoc0" external="false" id="a_001254" smilref="Programming_Robots_with_ROS00033.smil#a_001254">Adding a Software Library</a>
                    <span class="text" id="span_010359" smilref="Programming_Robots_with_ROS00033.smil#span_010359">-</span>
                    <a data-type="index:locator" href="#ch19-idp43704000" external="false" id="a_001255" smilref="Programming_Robots_with_ROS00033.smil#a_001255">Summary</a>
                  </li>
                  <li data-type="index-term" id="li_000717">
                    <span class="text" id="span_010360" smilref="Programming_Robots_with_ROS00033.smil#span_010360">special interest groups, ROS community</span>
                    <span class="text" id="span_010361" smilref="Programming_Robots_with_ROS00033.smil#span_010361">,</span>
                    <a data-type="index:locator" href="#ch22-idp45638528" external="false" id="a_001256" smilref="Programming_Robots_with_ROS00033.smil#a_001256">Mailing Lists and Special Interest Groups</a>
                  </li>
                  <li data-gentext="see" id="li_000718">
                    <span data-type="index-term" id="span_010362" smilref="Programming_Robots_with_ROS00033.smil#span_010362">speech library</span>
                    <span class="text" id="span_010363" smilref="Programming_Robots_with_ROS00033.smil#span_010363">(</span>
                    <span class="text" id="span_010364" smilref="Programming_Robots_with_ROS00033.smil#span_010364">see</span>
                    <span class="text" id="span_010365" smilref="Programming_Robots_with_ROS00033.smil#span_010365">pyttsx)</span>
                  </li>
                  <li data-type="index-term" id="li_000719">
                    <span class="text" id="span_010366" smilref="Programming_Robots_with_ROS00033.smil#span_010366">Stage (2D simulator)</span>
                    <span class="text" id="span_010367" smilref="Programming_Robots_with_ROS00033.smil#span_010367">,</span>
                    <a data-type="index:locator" href="#ch06-idp21887792" external="false" id="a_001257" smilref="Programming_Robots_with_ROS00033.smil#a_001257">Stage</a>
                  </li>
                  <li data-type="index-term" id="li_000720">
                    <span class="text" id="span_010368" smilref="Programming_Robots_with_ROS00033.smil#span_010368">STAIR robot</span>
                    <span class="text" id="span_010369" smilref="Programming_Robots_with_ROS00033.smil#span_010369">,</span>
                    <a data-type="index:locator" href="#ch02-idp16960528" external="false" id="a_001258" smilref="Programming_Robots_with_ROS00033.smil#a_001258">rosrun</a>
                  </li>
                  <li data-type="index-term" id="li_000721">
                    <span class="text" id="span_010370" smilref="Programming_Robots_with_ROS00033.smil#span_010370">stale state</span>
                    <span class="text" id="span_010371" smilref="Programming_Robots_with_ROS00033.smil#span_010371">,</span>
                    <a data-type="index:locator" href="#ch20-idp43768560" external="false" id="a_001259" smilref="Programming_Robots_with_ROS00033.smil#a_001259">The Master and Friends: roscore</a>
                  </li>
                  <li data-type="index-term" id="li_000722">
                    <span class="text" id="span_010372" smilref="Programming_Robots_with_ROS00033.smil#span_010372">State class</span>
                    <span class="text" id="span_010373" smilref="Programming_Robots_with_ROS00033.smil#span_010373">,</span>
                    <a data-type="index:locator" href="#ch13-idp31473200" external="false" id="a_001260" smilref="Programming_Robots_with_ROS00033.smil#a_001260">Defining State Machines with smach</a>
                  </li>
                  <li data-type="index-term" id="li_000723">
                    <span class="text" id="span_010374" smilref="Programming_Robots_with_ROS00033.smil#span_010374">state machines</span>
                    <span class="text" id="span_010375" smilref="Programming_Robots_with_ROS00033.smil#span_010375">,</span>
                    <a data-type="index:locator" href="#ch13-ix_13-patrol-asciidoc1" external="false" id="a_001261" smilref="Programming_Robots_with_ROS00033.smil#a_001261">State Machines</a>
                    <span class="text" id="span_010376" smilref="Programming_Robots_with_ROS00033.smil#span_010376">-</span>
                    <a data-type="index:locator" href="#ch13-idp30825664" external="false" id="a_001262" smilref="Programming_Robots_with_ROS00033.smil#a_001262">State Machines</a>
                    <list type="ul" id="list_000127">
                      <li data-type="index-term" id="li_000724">
                        <span class="text" id="span_010377" smilref="Programming_Robots_with_ROS00033.smil#span_010377">advanced example</span>
                        <span class="text" id="span_010378" smilref="Programming_Robots_with_ROS00033.smil#span_010378">,</span>
                        <a data-type="index:locator" href="#ch13-ix_13-patrol-asciidoc9" external="false" id="a_001263" smilref="Programming_Robots_with_ROS00033.smil#a_001263">A Slightly More Relevant Example</a>
                        <span class="text" id="span_010379" smilref="Programming_Robots_with_ROS00033.smil#span_010379">-</span>
                        <a data-type="index:locator" href="#ch13-idp32513008" external="false" id="a_001264" smilref="Programming_Robots_with_ROS00033.smil#a_001264">A Slightly More Relevant Example</a>
                      </li>
                      <li data-type="index-term" id="li_000725">
                        <span class="text" id="span_010380" smilref="Programming_Robots_with_ROS00033.smil#span_010380">basics</span>
                        <span class="text" id="span_010381" smilref="Programming_Robots_with_ROS00033.smil#span_010381">,</span>
                        <a data-type="index:locator" href="#ch13-ix_13-patrol-asciidoc1" external="false" id="a_001265" smilref="Programming_Robots_with_ROS00033.smil#a_001265">State Machines</a>
                        <span class="text" id="span_010382" smilref="Programming_Robots_with_ROS00033.smil#span_010382">-</span>
                        <a data-type="index:locator" href="#ch13-idp30825664" external="false" id="a_001266" smilref="Programming_Robots_with_ROS00033.smil#a_001266">State Machines</a>
                      </li>
                      <li data-type="index-term" id="li_000726">
                        <span class="text" id="span_010383" smilref="Programming_Robots_with_ROS00033.smil#span_010383">defining procedurally</span>
                        <span class="text" id="span_010384" smilref="Programming_Robots_with_ROS00033.smil#span_010384">,</span>
                        <a data-type="index:locator" href="#ch13-ix_13-patrol-asciidoc11" external="false" id="a_001267" smilref="Programming_Robots_with_ROS00033.smil#a_001267">Defining State Machines Procedurally</a>
                        <span class="text" id="span_010385" smilref="Programming_Robots_with_ROS00033.smil#span_010385">-</span>
                        <a data-type="index:locator" href="#ch13-idp32850304" external="false" id="a_001268" smilref="Programming_Robots_with_ROS00033.smil#a_001268">Defining State Machines Procedurally</a>
                      </li>
                      <li data-type="index-term" id="li_000727">
                        <span class="text" id="span_010386" smilref="Programming_Robots_with_ROS00033.smil#span_010386">defining with smach</span>
                        <span class="text" id="span_010387" smilref="Programming_Robots_with_ROS00033.smil#span_010387">,</span>
                        <a data-type="index:locator" href="#ch13-ix_13-patrol-asciidoc5" external="false" id="a_001269" smilref="Programming_Robots_with_ROS00033.smil#a_001269">Defining State Machines with smach</a>
                        <span class="text" id="span_010388" smilref="Programming_Robots_with_ROS00033.smil#span_010388">-</span>
                        <a data-type="index:locator" href="#ch13-idp32850304" external="false" id="a_001270" smilref="Programming_Robots_with_ROS00033.smil#a_001270">Defining State Machines Procedurally</a>
                      </li>
                      <li data-type="index-term" id="li_000728">
                        <span class="text" id="span_010389" smilref="Programming_Robots_with_ROS00033.smil#span_010389">in ROS</span>
                        <span class="text" id="span_010390" smilref="Programming_Robots_with_ROS00033.smil#span_010390">,</span>
                        <a data-type="index:locator" href="#ch13-idp30829392" external="false" id="a_001271" smilref="Programming_Robots_with_ROS00033.smil#a_001271">State Machines in ROS</a>
                      </li>
                      <li data-type="index-term" id="li_000729">
                        <span class="text" id="span_010391" smilref="Programming_Robots_with_ROS00033.smil#span_010391">patrolling with</span>
                        <span class="text" id="span_010392" smilref="Programming_Robots_with_ROS00033.smil#span_010392">,</span>
                        <a data-type="index:locator" href="#ch13-ix_13-patrol-asciidoc13" external="false" id="a_001272" smilref="Programming_Robots_with_ROS00033.smil#a_001272">Patrolling with State Machines</a>
                        <span class="text" id="span_010393" smilref="Programming_Robots_with_ROS00033.smil#span_010393">-</span>
                        <a data-type="index:locator" href="#ch13-idp35466096" external="false" id="a_001273" smilref="Programming_Robots_with_ROS00033.smil#a_001273">A Better Way to Patrol</a>
                      </li>
                      <li data-type="index-term" id="li_000730">
                        <span class="text" id="span_010394" smilref="Programming_Robots_with_ROS00033.smil#span_010394">simple example</span>
                        <span class="text" id="span_010395" smilref="Programming_Robots_with_ROS00033.smil#span_010395">,</span>
                        <a data-type="index:locator" href="#ch13-ix_13-patrol-asciidoc5" external="false" id="a_001274" smilref="Programming_Robots_with_ROS00033.smil#a_001274">Defining State Machines with smach</a>
                        <span class="text" id="span_010396" smilref="Programming_Robots_with_ROS00033.smil#span_010396">-</span>
                        <a data-type="index:locator" href="#ch13-idp32850304" external="false" id="a_001275" smilref="Programming_Robots_with_ROS00033.smil#a_001275">Defining State Machines Procedurally</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000731">
                    <span class="text" id="span_010397" smilref="Programming_Robots_with_ROS00033.smil#span_010397">StateMachine class</span>
                    <span class="text" id="span_010398" smilref="Programming_Robots_with_ROS00033.smil#span_010398">,</span>
                    <a data-type="index:locator" href="#ch13-idp31473840" external="false" id="a_001276" smilref="Programming_Robots_with_ROS00033.smil#a_001276">Defining State Machines with smach</a>
                  </li>
                  <li data-type="index-term" id="li_000732">
                    <span class="text" id="span_010399" smilref="Programming_Robots_with_ROS00033.smil#span_010399">static map</span>
                    <span class="text" id="span_010400" smilref="Programming_Robots_with_ROS00033.smil#span_010400">,</span>
                    <a data-type="index:locator" href="#ch17-ix_17-rossify_robots2-asciidoc12" external="false" id="a_001277" smilref="Programming_Robots_with_ROS00033.smil#a_001277">Configuring the Navigation Stack</a>
                    <span class="text" id="span_010401" smilref="Programming_Robots_with_ROS00033.smil#span_010401">-</span>
                    <a data-type="index:locator" href="#ch17-idp41168176" external="false" id="a_001278" smilref="Programming_Robots_with_ROS00033.smil#a_001278">Configuring the Navigation Stack</a>
                  </li>
                  <li data-type="index-term" id="li_000733">
                    <span class="text" id="span_010402" smilref="Programming_Robots_with_ROS00033.smil#span_010402">statically stable robot</span>
                    <span class="text" id="span_010403" smilref="Programming_Robots_with_ROS00033.smil#span_010403">,</span>
                    <a data-type="index:locator" href="#ch06-idp21659552" external="false" id="a_001279" smilref="Programming_Robots_with_ROS00033.smil#a_001279">Actuation: Mobile Platform</a>
                  </li>
                  <li data-type="index-term" id="li_000734">
                    <span class="text" id="span_010404" smilref="Programming_Robots_with_ROS00033.smil#span_010404">steered casters</span>
                    <span class="text" id="span_010405" smilref="Programming_Robots_with_ROS00033.smil#span_010405">,</span>
                    <a data-type="index:locator" href="#ch06-idp21708144" external="false" id="a_001280" smilref="Programming_Robots_with_ROS00033.smil#a_001280">Actuation: Mobile Platform</a>
                  </li>
                  <li data-type="index-term" id="li_000735">
                    <span class="text" id="span_010406" smilref="Programming_Robots_with_ROS00033.smil#span_010406">stereo camera</span>
                    <span class="text" id="span_010407" smilref="Programming_Robots_with_ROS00033.smil#span_010407">,</span>
                    <a data-type="index:locator" href="#ch06-idp21770976" external="false" id="a_001281" smilref="Programming_Robots_with_ROS00033.smil#a_001281">Visual cameras</a>
                  </li>
                  <li id="li_000736">
                    <span data-type="index-term" id="span_010408" smilref="Programming_Robots_with_ROS00033.smil#span_010408">stockroom</span>
                    <list type="ul" id="list_000128">
                      <li data-type="index-term" id="li_000737">
                        <span class="text" id="span_010409" smilref="Programming_Robots_with_ROS00033.smil#span_010409">adding items to</span>
                        <span class="text" id="span_010410" smilref="Programming_Robots_with_ROS00033.smil#span_010410">,</span>
                        <a data-type="index:locator" href="#ch14-idp34349232" external="false" id="a_001282" smilref="Programming_Robots_with_ROS00033.smil#a_001282">Stockroom Simulation</a>
                      </li>
                      <li data-type="index-term" id="li_000738">
                        <span class="text" id="span_010411" smilref="Programming_Robots_with_ROS00033.smil#span_010411">bin labels</span>
                        <span class="text" id="span_010412" smilref="Programming_Robots_with_ROS00033.smil#span_010412">,</span>
                        <a data-type="index:locator" href="#ch14-ix_14-stockroom_bot-asciidoc6" external="false" id="a_001283" smilref="Programming_Robots_with_ROS00033.smil#a_001283">Stockroom Simulation</a>
                        <span class="text" id="span_010413" smilref="Programming_Robots_with_ROS00033.smil#span_010413">-</span>
                        <a data-type="index:locator" href="#ch14-idp33992736" external="false" id="a_001284" smilref="Programming_Robots_with_ROS00033.smil#a_001284">Stockroom Simulation</a>
                      </li>
                      <li data-type="index-term" id="li_000739">
                        <span class="text" id="span_010414" smilref="Programming_Robots_with_ROS00033.smil#span_010414">simulation for Stockroom-bot</span>
                        <span class="text" id="span_010415" smilref="Programming_Robots_with_ROS00033.smil#span_010415">,</span>
                        <a data-type="index:locator" href="#ch14-ix_14-stockroom_bot-asciidoc1" external="false" id="a_001285" smilref="Programming_Robots_with_ROS00033.smil#a_001285">Stockroom Simulation</a>
                        <span class="text" id="span_010416" smilref="Programming_Robots_with_ROS00033.smil#span_010416">-</span>
                        <a data-type="index:locator" href="#ch14-idp34510240" external="false" id="a_001286" smilref="Programming_Robots_with_ROS00033.smil#a_001286">Stockroom Simulation</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000740">
                    <span class="text" id="span_010417" smilref="Programming_Robots_with_ROS00033.smil#span_010417">Stockroom-bot</span>
                    <span class="text" id="span_010418" smilref="Programming_Robots_with_ROS00033.smil#span_010418">,</span>
                    <a data-type="index:locator" href="#ch14-ix_14-stockroom_bot-asciidoc0" external="false" id="a_001287" smilref="Programming_Robots_with_ROS00033.smil#a_001287">Stockroom-bot</a>
                    <span class="text" id="span_010419" smilref="Programming_Robots_with_ROS00033.smil#span_010419">-</span>
                    <a data-type="index:locator" href="#ch14-idp37807040" external="false" id="a_001288" smilref="Programming_Robots_with_ROS00033.smil#a_001288">Summary</a>
                    <list type="ul" id="list_000129">
                      <li data-type="index-term" id="li_000741">
                        <span class="text" id="span_010420" smilref="Programming_Robots_with_ROS00033.smil#span_010420">driving to bins</span>
                        <span class="text" id="span_010421" smilref="Programming_Robots_with_ROS00033.smil#span_010421">,</span>
                        <a data-type="index:locator" href="#ch14-ix_14-stockroom_bot-asciidoc9" external="false" id="a_001289" smilref="Programming_Robots_with_ROS00033.smil#a_001289">Driving to Bins</a>
                        <span class="text" id="span_010422" smilref="Programming_Robots_with_ROS00033.smil#span_010422">-</span>
                        <a data-type="index:locator" href="#ch14-idp34979696" external="false" id="a_001290" smilref="Programming_Robots_with_ROS00033.smil#a_001290">Driving to Bins</a>
                      </li>
                      <li data-type="index-term" id="li_000742">
                        <span class="text" id="span_010423" smilref="Programming_Robots_with_ROS00033.smil#span_010423">picking up item with</span>
                        <span class="text" id="span_010424" smilref="Programming_Robots_with_ROS00033.smil#span_010424">,</span>
                        <a data-type="index:locator" href="#ch14-ix_14-stockroom_bot-asciidoc12" external="false" id="a_001291" smilref="Programming_Robots_with_ROS00033.smil#a_001291">Picking Up the Item</a>
                        <span class="text" id="span_010425" smilref="Programming_Robots_with_ROS00033.smil#span_010425">-</span>
                        <a data-type="index:locator" href="#ch14-idp38732608" external="false" id="a_001292" smilref="Programming_Robots_with_ROS00033.smil#a_001292">Picking Up the Item</a>
                      </li>
                      <li data-type="index-term" id="li_000743">
                        <span class="text" id="span_010426" smilref="Programming_Robots_with_ROS00033.smil#span_010426">stockroom simulation for</span>
                        <span class="text" id="span_010427" smilref="Programming_Robots_with_ROS00033.smil#span_010427">,</span>
                        <a data-type="index:locator" href="#ch14-ix_14-stockroom_bot-asciidoc2" external="false" id="a_001293" smilref="Programming_Robots_with_ROS00033.smil#a_001293">Stockroom Simulation</a>
                        <span class="text" id="span_010428" smilref="Programming_Robots_with_ROS00033.smil#span_010428">-</span>
                        <a data-type="index:locator" href="#ch14-idp34510240" external="false" id="a_001294" smilref="Programming_Robots_with_ROS00033.smil#a_001294">Stockroom Simulation</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000744">
                    <span class="text" id="span_010429" smilref="Programming_Robots_with_ROS00033.smil#span_010429">strings, in tf</span>
                    <span class="text" id="span_010430" smilref="Programming_Robots_with_ROS00033.smil#span_010430">,</span>
                    <a data-type="index:locator" href="#ch02-idp17097168" external="false" id="a_001295" smilref="Programming_Robots_with_ROS00033.smil#a_001295">tf</a>
                  </li>
                  <li data-type="index-term" id="li_000745">
                    <span class="text" id="span_010431" smilref="Programming_Robots_with_ROS00033.smil#span_010431">structured light image</span>
                    <span class="text" id="span_010432" smilref="Programming_Robots_with_ROS00033.smil#span_010432">,</span>
                    <a data-type="index:locator" href="#ch06-idp21786624" external="false" id="a_001296" smilref="Programming_Robots_with_ROS00033.smil#a_001296">Depth cameras</a>
                  </li>
                  <li data-type="index-term" id="li_000746">
                    <span class="text" id="span_010433" smilref="Programming_Robots_with_ROS00033.smil#span_010433">subgraphs</span>
                    <span class="text" id="span_010434" smilref="Programming_Robots_with_ROS00033.smil#span_010434">,</span>
                    <a data-type="index:locator" href="#ch02-idp139728" external="false" id="a_001297" smilref="Programming_Robots_with_ROS00033.smil#a_001297">The ROS Graph</a>
                  </li>
                  <li id="li_000747">
                    <span data-type="index-term" id="span_010435" smilref="Programming_Robots_with_ROS00033.smil#span_010435">subscribing</span>
                    <list type="ul" id="list_000130">
                      <li data-type="index-term" id="li_000748">
                        <span class="text" id="span_010436" smilref="Programming_Robots_with_ROS00033.smil#span_010436">checking</span>
                        <span class="text" id="span_010437" smilref="Programming_Robots_with_ROS00033.smil#span_010437">,</span>
                        <a data-type="index:locator" href="#ch03-idp17886624" external="false" id="a_001298" smilref="Programming_Robots_with_ROS00033.smil#a_001298">Checking That Everything Works as Expected</a>
                      </li>
                      <li data-type="index-term" id="li_000749">
                        <span class="text" id="span_010438" smilref="Programming_Robots_with_ROS00033.smil#span_010438">mixing publishers and subscribers</span>
                        <span class="text" id="span_010439" smilref="Programming_Robots_with_ROS00033.smil#span_010439">,</span>
                        <a data-type="index:locator" href="#ch03-idp18442816" external="false" id="a_001299" smilref="Programming_Robots_with_ROS00033.smil#a_001299">Mixing Publishers and Subscribers</a>
                      </li>
                      <li data-type="index-term" id="li_000750">
                        <span class="text" id="span_010440" smilref="Programming_Robots_with_ROS00033.smil#span_010440">to a topic</span>
                        <span class="text" id="span_010441" smilref="Programming_Robots_with_ROS00033.smil#span_010441">,</span>
                        <a data-type="index:locator" href="#ch03-ix_3-topics-asciidoc3" external="false" id="a_001300" smilref="Programming_Robots_with_ROS00033.smil#a_001300">Subscribing to a Topic</a>
                        <span class="text" id="span_010442" smilref="Programming_Robots_with_ROS00033.smil#span_010442">-</span>
                        <a data-type="index:locator" href="#ch03-idp18014704" external="false" id="a_001301" smilref="Programming_Robots_with_ROS00033.smil#a_001301">Checking That Everything Works as Expected</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000751">
                    <span class="text" id="span_010443" smilref="Programming_Robots_with_ROS00033.smil#span_010443">subsystems</span>
                    <span class="text" id="span_010444" smilref="Programming_Robots_with_ROS00033.smil#span_010444">,</span>
                    <a data-type="index:locator" href="#ch06-ix_6-robots-asciidoc0" external="false" id="a_001302" smilref="Programming_Robots_with_ROS00033.smil#a_001302">Subsystems</a>
                    <span class="text" id="span_010445" smilref="Programming_Robots_with_ROS00033.smil#span_010445">-</span>
                    <a data-type="index:locator" href="#ch06-idp21843264" external="false" id="a_001303" smilref="Programming_Robots_with_ROS00033.smil#a_001303">Computation</a>
                    <list type="ul" id="list_000131">
                      <li data-type="index-term" id="li_000752">
                        <span class="text" id="span_010446" smilref="Programming_Robots_with_ROS00033.smil#span_010446">computation</span>
                        <span class="text" id="span_010447" smilref="Programming_Robots_with_ROS00033.smil#span_010447">,</span>
                        <a data-type="index:locator" href="#ch06-idp21836336" external="false" id="a_001304" smilref="Programming_Robots_with_ROS00033.smil#a_001304">Computation</a>
                      </li>
                      <li data-type="index-term" id="li_000753">
                        <span class="text" id="span_010448" smilref="Programming_Robots_with_ROS00033.smil#span_010448">manipulator arm</span>
                        <span class="text" id="span_010449" smilref="Programming_Robots_with_ROS00033.smil#span_010449">,</span>
                        <a data-type="index:locator" href="#ch06-idp21721744" external="false" id="a_001305" smilref="Programming_Robots_with_ROS00033.smil#a_001305">Actuation: Manipulator Arm</a>
                      </li>
                      <li data-type="index-term" id="li_000754">
                        <span class="text" id="span_010450" smilref="Programming_Robots_with_ROS00033.smil#span_010450">mobile platform</span>
                        <span class="text" id="span_010451" smilref="Programming_Robots_with_ROS00033.smil#span_010451">,</span>
                        <a data-type="index:locator" href="#ch06-ix_6-robots-asciidoc1" external="false" id="a_001306" smilref="Programming_Robots_with_ROS00033.smil#a_001306">Actuation: Mobile Platform</a>
                        <span class="text" id="span_010452" smilref="Programming_Robots_with_ROS00033.smil#span_010452">-</span>
                        <a data-type="index:locator" href="#ch06-idp21719824" external="false" id="a_001307" smilref="Programming_Robots_with_ROS00033.smil#a_001307">Actuation: Mobile Platform</a>
                      </li>
                      <li data-type="index-term" id="li_000755">
                        <span class="text" id="span_010453" smilref="Programming_Robots_with_ROS00033.smil#span_010453">sensors</span>
                        <span class="text" id="span_010454" smilref="Programming_Robots_with_ROS00033.smil#span_010454">,</span>
                        <a data-type="index:locator" href="#ch06-ix_6-robots-asciidoc6" external="false" id="a_001308" smilref="Programming_Robots_with_ROS00033.smil#a_001308">Sensors</a>
                        <span class="text" id="span_010455" smilref="Programming_Robots_with_ROS00033.smil#span_010455">-</span>
                        <a data-type="index:locator" href="#ch06-idp21834352" external="false" id="a_001309" smilref="Programming_Robots_with_ROS00033.smil#a_001309">Shaft encoders</a>
                      </li>
                    </list>
                  </li>
                </list>
              </div>
              <h1 id="h1_000562" smilref="Programming_Robots_with_ROS00033.smil#h1_000562">T</h1>
              <div data-type="indexdiv" id="div_000070">
                <list type="ul" id="list_000132">
                  <li data-type="index-term" id="li_000756">
                    <span class="text" id="span_010456" smilref="Programming_Robots_with_ROS00033.smil#span_010456">Tab key</span>
                    <span class="text" id="span_010457" smilref="Programming_Robots_with_ROS00033.smil#span_010457">,</span>
                    <a data-type="index:locator" href="#ch02-idp17054768" external="false" id="a_001310" smilref="Programming_Robots_with_ROS00033.smil#a_001310">The Tab Key</a>
                  </li>
                  <li id="li_000757">
                    <span data-type="index-term" id="span_010458" smilref="Programming_Robots_with_ROS00033.smil#span_010458">target line</span>
                    <list type="ul" id="list_000133">
                      <li data-type="index-term" id="li_000758">
                        <span class="text" id="span_010459" smilref="Programming_Robots_with_ROS00033.smil#span_010459">detecting by follow-bot</span>
                        <span class="text" id="span_010460" smilref="Programming_Robots_with_ROS00033.smil#span_010460">,</span>
                        <a data-type="index:locator" href="#ch12-ix_12-followbot-asciidoc3" external="false" id="a_001311" smilref="Programming_Robots_with_ROS00033.smil#a_001311">Detecting the Line</a>
                        <span class="text" id="span_010461" smilref="Programming_Robots_with_ROS00033.smil#span_010461">-</span>
                        <a data-type="index:locator" href="#ch12-idp30167936" external="false" id="a_001312" smilref="Programming_Robots_with_ROS00033.smil#a_001312">Detecting the Line</a>
                      </li>
                      <li data-type="index-term" id="li_000759">
                        <span class="text" id="span_010462" smilref="Programming_Robots_with_ROS00033.smil#span_010462">following by follow-bot</span>
                        <span class="text" id="span_010463" smilref="Programming_Robots_with_ROS00033.smil#span_010463">,</span>
                        <a data-type="index:locator" href="#ch12-ix_12-followbot-asciidoc9" external="false" id="a_001313" smilref="Programming_Robots_with_ROS00033.smil#a_001313">Following the Line</a>
                        <span class="text" id="span_010464" smilref="Programming_Robots_with_ROS00033.smil#span_010464">-</span>
                        <a data-type="index:locator" href="#ch12-idp30775248" external="false" id="a_001314" smilref="Programming_Robots_with_ROS00033.smil#a_001314">Summary</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000760">
                    <span class="text" id="span_010465" smilref="Programming_Robots_with_ROS00033.smil#span_010465">task space</span>
                    <span class="text" id="span_010466" smilref="Programming_Robots_with_ROS00033.smil#span_010466">,</span>
                    <a data-type="index:locator" href="#ch11-idp26405920" external="false" id="a_001315" smilref="Programming_Robots_with_ROS00033.smil#a_001315">Joint Space</a>
                  </li>
                  <li data-type="index-term" id="li_000761">
                    <span class="text" id="span_010467" smilref="Programming_Robots_with_ROS00033.smil#span_010467">teleop-bot</span>
                    <span class="text" id="span_010468" smilref="Programming_Robots_with_ROS00033.smil#span_010468">,</span>
                    <a data-type="index:locator" href="#ch08-ix_8-teleop_bot-asciidoc0" external="false" id="a_001316" smilref="Programming_Robots_with_ROS00033.smil#a_001316">Teleop-bot</a>
                    <span class="text" id="span_010469" smilref="Programming_Robots_with_ROS00033.smil#span_010469">-</span>
                    <a data-type="index:locator" href="#ch08-idp25187392" external="false" id="a_001317" smilref="Programming_Robots_with_ROS00033.smil#a_001317">Summary</a>
                    <list type="ul" id="list_000134">
                      <li data-type="index-term" id="li_000762">
                        <span class="text" id="span_010470" smilref="Programming_Robots_with_ROS00033.smil#span_010470">development pattern</span>
                        <span class="text" id="span_010471" smilref="Programming_Robots_with_ROS00033.smil#span_010471">,</span>
                        <a data-type="index:locator" href="#ch08-idp22645904" external="false" id="a_001318" smilref="Programming_Robots_with_ROS00033.smil#a_001318">Development Pattern</a>
                      </li>
                      <li data-type="index-term" id="li_000763">
                        <span class="text" id="span_010472" smilref="Programming_Robots_with_ROS00033.smil#span_010472">driving</span>
                        <span class="text" id="span_010473" smilref="Programming_Robots_with_ROS00033.smil#span_010473">,</span>
                        <a data-type="index:locator" href="#ch08-idp25097056" external="false" id="a_001319" smilref="Programming_Robots_with_ROS00033.smil#a_001319">Let's Drive!</a>
                      </li>
                      <li data-type="index-term" id="li_000764">
                        <span class="text" id="span_010474" smilref="Programming_Robots_with_ROS00033.smil#span_010474">keyboard driver</span>
                        <span class="text" id="span_010475" smilref="Programming_Robots_with_ROS00033.smil#span_010475">,</span>
                        <a data-type="index:locator" href="#ch08-ix_8-teleop_bot-asciidoc2" external="false" id="a_001320" smilref="Programming_Robots_with_ROS00033.smil#a_001320">Keyboard Driver</a>
                        <span class="text" id="span_010476" smilref="Programming_Robots_with_ROS00033.smil#span_010476">-</span>
                        <a data-type="index:locator" href="#ch08-idp23179248" external="false" id="a_001321" smilref="Programming_Robots_with_ROS00033.smil#a_001321">Keyboard Driver</a>
                      </li>
                      <li data-type="index-term" id="li_000765">
                        <span class="text" id="span_010477" smilref="Programming_Robots_with_ROS00033.smil#span_010477">motion generator</span>
                        <span class="text" id="span_010478" smilref="Programming_Robots_with_ROS00033.smil#span_010478">,</span>
                        <a data-type="index:locator" href="#ch08-ix_8-teleop_bot-asciidoc4" external="false" id="a_001322" smilref="Programming_Robots_with_ROS00033.smil#a_001322">Motion Generator</a>
                        <span class="text" id="span_010479" smilref="Programming_Robots_with_ROS00033.smil#span_010479">-</span>
                        <a data-type="index:locator" href="#ch08-idp23943216" external="false" id="a_001323" smilref="Programming_Robots_with_ROS00033.smil#a_001323">Motion Generator</a>
                      </li>
                      <li data-type="index-term" id="li_000766">
                        <span class="text" id="span_010480" smilref="Programming_Robots_with_ROS00033.smil#span_010480">parameter server</span>
                        <span class="text" id="span_010481" smilref="Programming_Robots_with_ROS00033.smil#span_010481">,</span>
                        <a data-type="index:locator" href="#ch08-ix_8-teleop_bot-asciidoc7" external="false" id="a_001324" smilref="Programming_Robots_with_ROS00033.smil#a_001324">Parameter Server</a>
                        <span class="text" id="span_010482" smilref="Programming_Robots_with_ROS00033.smil#span_010482">-</span>
                        <a data-type="index:locator" href="#ch08-idp24260864" external="false" id="a_001325" smilref="Programming_Robots_with_ROS00033.smil#a_001325">Parameter Server</a>
                      </li>
                      <li data-type="index-term" id="li_000767">
                        <span class="text" id="span_010483" smilref="Programming_Robots_with_ROS00033.smil#span_010483">rviz for</span>
                        <span class="text" id="span_010484" smilref="Programming_Robots_with_ROS00033.smil#span_010484">,</span>
                        <a data-type="index:locator" href="#ch08-ix_8-teleop_bot-asciidoc12" external="false" id="a_001326" smilref="Programming_Robots_with_ROS00033.smil#a_001326">rviz</a>
                        <span class="text" id="span_010485" smilref="Programming_Robots_with_ROS00033.smil#span_010485">-</span>
                        <a data-type="index:locator" href="#ch08-idp25182480" external="false" id="a_001327" smilref="Programming_Robots_with_ROS00033.smil#a_001327">rviz</a>
                      </li>
                      <li data-type="index-term" id="li_000768">
                        <span class="text" id="span_010486" smilref="Programming_Robots_with_ROS00033.smil#span_010486">velocity ramps for</span>
                        <span class="text" id="span_010487" smilref="Programming_Robots_with_ROS00033.smil#span_010487">,</span>
                        <a data-type="index:locator" href="#ch08-ix_8-teleop_bot-asciidoc8" external="false" id="a_001328" smilref="Programming_Robots_with_ROS00033.smil#a_001328">Velocity Ramps</a>
                        <span class="text" id="span_010488" smilref="Programming_Robots_with_ROS00033.smil#span_010488">-</span>
                        <a data-type="index:locator" href="#ch08-idp25095424" external="false" id="a_001329" smilref="Programming_Robots_with_ROS00033.smil#a_001329">Velocity Ramps</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000769">
                    <span class="text" id="span_010489" smilref="Programming_Robots_with_ROS00033.smil#span_010489">teleoperation</span>
                    <span class="text" id="span_010490" smilref="Programming_Robots_with_ROS00033.smil#span_010490">,</span>
                    <a data-type="index:locator" href="#ch08-idp22637664" external="false" id="a_001330" smilref="Programming_Robots_with_ROS00033.smil#a_001330">Teleop-bot</a>
                    <list type="ul" id="list_000135">
                      <li data-gentext="see" id="li_000770" smilref="Programming_Robots_with_ROS00033.smil#li_000770">(see also teleop-bot)</li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000771">
                    <span class="text" id="span_010491" smilref="Programming_Robots_with_ROS00033.smil#span_010491">termios library</span>
                    <span class="text" id="span_010492" smilref="Programming_Robots_with_ROS00033.smil#span_010492">,</span>
                    <a data-type="index:locator" href="#ch08-ix_8-teleop_bot-asciidoc1" external="false" id="a_001331" smilref="Programming_Robots_with_ROS00033.smil#a_001331">Keyboard Driver</a>
                  </li>
                  <li data-type="index-term" id="li_000772">
                    <span class="text" id="span_010493" smilref="Programming_Robots_with_ROS00033.smil#span_010493">testing, tools for</span>
                    <span class="text" id="span_010494" smilref="Programming_Robots_with_ROS00033.smil#span_010494">,</span>
                    <a data-type="index:locator" href="#ch20-ix_20-tools-asciidoc6" external="false" id="a_001332" smilref="Programming_Robots_with_ROS00033.smil#a_001332">Testing a Many-Node System: rostest</a>
                    <span class="text" id="span_010495" smilref="Programming_Robots_with_ROS00033.smil#span_010495">-</span>
                    <a data-type="index:locator" href="#ch20-idp44812240" external="false" id="a_001333" smilref="Programming_Robots_with_ROS00033.smil#a_001333">Testing a Many-Node System: rostest</a>
                  </li>
                  <li data-gentext="see" id="li_000773">
                    <span data-type="index-term" id="span_010496" smilref="Programming_Robots_with_ROS00033.smil#span_010496">text-to-speech (TTS) software</span>
                    <span class="text" id="span_010497" smilref="Programming_Robots_with_ROS00033.smil#span_010497">(</span>
                    <span class="text" id="span_010498" smilref="Programming_Robots_with_ROS00033.smil#span_010498">see</span>
                    <span class="text" id="span_010499" smilref="Programming_Robots_with_ROS00033.smil#span_010499">pyttsx)</span>
                  </li>
                  <li data-type="index-term" id="li_000774">
                    <span class="text" id="span_010500" smilref="Programming_Robots_with_ROS00033.smil#span_010500">tf (transform) package</span>
                    <span class="text" id="span_010501" smilref="Programming_Robots_with_ROS00033.smil#span_010501">,</span>
                    <a data-type="index:locator" href="#ch02-idp17091248" external="false" id="a_001334" smilref="Programming_Robots_with_ROS00033.smil#a_001334">tf</a>
                    <list type="ul" id="list_000136">
                      <li data-type="index-term" id="li_000775">
                        <span class="text" id="span_010502" smilref="Programming_Robots_with_ROS00033.smil#span_010502">header field in</span>
                        <span class="text" id="span_010503" smilref="Programming_Robots_with_ROS00033.smil#span_010503">,</span>
                        <a data-type="index:locator" href="#ch16-idp39222640" external="false" id="a_001335" smilref="Programming_Robots_with_ROS00033.smil#a_001335">ROS Message Interface</a>
                      </li>
                      <li data-type="index-term" id="li_000776">
                        <span class="text" id="span_010504" smilref="Programming_Robots_with_ROS00033.smil#span_010504">view_frames.py program</span>
                        <span class="text" id="span_010505" smilref="Programming_Robots_with_ROS00033.smil#span_010505">,</span>
                        <a data-type="index:locator" href="#ch14-idp37041072" external="false" id="a_001336" smilref="Programming_Robots_with_ROS00033.smil#a_001336">Picking Up the Item</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000777">
                    <span class="text" id="span_010506" smilref="Programming_Robots_with_ROS00033.smil#span_010506">thin development philosophy</span>
                    <span class="text" id="span_010507" smilref="Programming_Robots_with_ROS00033.smil#span_010507">,</span>
                    <a data-type="index:locator" href="#ch01-idp207744" external="false" id="a_001337" smilref="Programming_Robots_with_ROS00033.smil#a_001337">Philosophy</a>
                  </li>
                  <li data-type="index-term" id="li_000778">
                    <span class="text" id="span_010508" smilref="Programming_Robots_with_ROS00033.smil#span_010508">tilde ()</span>
                    <span class="text" id="span_010509" smilref="Programming_Robots_with_ROS00033.smil#span_010509">,</span>
                    <a data-type="index:locator" href="#ch19-idp43222416" external="false" id="a_001338" smilref="Programming_Robots_with_ROS00033.smil#a_001338">The Speech Server</a>
                  </li>
                  <li data-type="index-term" id="li_000779">
                    <span class="text" id="span_010510" smilref="Programming_Robots_with_ROS00033.smil#span_010510">time-of-flight depth cameras</span>
                    <span class="text" id="span_010511" smilref="Programming_Robots_with_ROS00033.smil#span_010511">,</span>
                    <a data-type="index:locator" href="#ch06-idp21793568" external="false" id="a_001339" smilref="Programming_Robots_with_ROS00033.smil#a_001339">Depth cameras</a>
                  </li>
                  <li data-type="index-term" id="li_000780">
                    <span class="text" id="span_010512" smilref="Programming_Robots_with_ROS00033.smil#span_010512">timestamps</span>
                    <span class="text" id="span_010513" smilref="Programming_Robots_with_ROS00033.smil#span_010513">,</span>
                    <a data-type="index:locator" href="#ch15-idp37239472" external="false" id="a_001340" smilref="Programming_Robots_with_ROS00033.smil#a_001340">Design 1: Periodic Measurements over a Topic</a>
                  </li>
                  <li data-type="index-term" id="li_000781">
                    <span class="text" id="span_010514" smilref="Programming_Robots_with_ROS00033.smil#span_010514">tools</span>
                    <span class="text" id="span_010515" smilref="Programming_Robots_with_ROS00033.smil#span_010515">,</span>
                    <a data-type="index:locator" href="#ch20-ix_20-tools-asciidoc0" external="false" id="a_001341" smilref="Programming_Robots_with_ROS00033.smil#a_001341">Tools</a>
                    <span class="text" id="span_010516" smilref="Programming_Robots_with_ROS00033.smil#span_010516">-</span>
                    <a data-type="index:locator" href="#ch20-idp44752592" external="false" id="a_001342" smilref="Programming_Robots_with_ROS00033.smil#a_001342">Summary</a>
                    <list type="ul" id="list_000137">
                      <li data-type="index-term" id="li_000782">
                        <span class="text" id="span_010517" smilref="Programming_Robots_with_ROS00033.smil#span_010517">for introspection</span>
                        <span class="text" id="span_010518" smilref="Programming_Robots_with_ROS00033.smil#span_010518">,</span>
                        <a data-type="index:locator" href="#ch20-ix_20-tools-asciidoc8" external="false" id="a_001343" smilref="Programming_Robots_with_ROS00033.smil#a_001343">Introspection: rosnode, rostopic, rosmsg, rosservice, and rossrv</a>
                        <span class="text" id="span_010519" smilref="Programming_Robots_with_ROS00033.smil#span_010519">-</span>
                        <a data-type="index:locator" href="#ch20-idp44750384" external="false" id="a_001344" smilref="Programming_Robots_with_ROS00033.smil#a_001344">Introspection: rosnode, rostopic, rosmsg, rosservice, and rossrv</a>
                      </li>
                      <li data-type="index-term" id="li_000783">
                        <span class="text" id="span_010520" smilref="Programming_Robots_with_ROS00033.smil#span_010520">roscd</span>
                        <span class="text" id="span_010521" smilref="Programming_Robots_with_ROS00033.smil#span_010521">,</span>
                        <a data-type="index:locator" href="#ch20-idp43797792" external="false" id="a_001345" smilref="Programming_Robots_with_ROS00033.smil#a_001345">Navigating the Filesystem: roscd</a>
                      </li>
                      <li data-type="index-term" id="li_000784">
                        <span class="text" id="span_010522" smilref="Programming_Robots_with_ROS00033.smil#span_010522">roscore</span>
                        <span class="text" id="span_010523" smilref="Programming_Robots_with_ROS00033.smil#span_010523">,</span>
                        <a data-type="index:locator" href="#ch20-idp43716288" external="false" id="a_001346" smilref="Programming_Robots_with_ROS00033.smil#a_001346">The Master and Friends: roscore</a>
                      </li>
                      <li data-type="index-term" id="li_000785">
                        <span class="text" id="span_010524" smilref="Programming_Robots_with_ROS00033.smil#span_010524">roslaunch</span>
                        <span class="text" id="span_010525" smilref="Programming_Robots_with_ROS00033.smil#span_010525">,</span>
                        <a data-type="index:locator" href="#ch20-ix_20-tools-asciidoc1" external="false" id="a_001347" smilref="Programming_Robots_with_ROS00033.smil#a_001347">Starting Many Nodes: roslaunch</a>
                        <span class="text" id="span_010526" smilref="Programming_Robots_with_ROS00033.smil#span_010526">-</span>
                        <a data-type="index:locator" href="#ch20-idp44202816" external="false" id="a_001348" smilref="Programming_Robots_with_ROS00033.smil#a_001348">Starting Many Nodes: roslaunch</a>
                      </li>
                      <li data-type="index-term" id="li_000786">
                        <span class="text" id="span_010527" smilref="Programming_Robots_with_ROS00033.smil#span_010527">rosmsg</span>
                        <span class="text" id="span_010528" smilref="Programming_Robots_with_ROS00033.smil#span_010528">,</span>
                        <a data-type="index:locator" href="#ch20-idp44858608" external="false" id="a_001349" smilref="Programming_Robots_with_ROS00033.smil#a_001349">Introspection: rosnode, rostopic, rosmsg, rosservice, and rossrv</a>
                      </li>
                      <li data-type="index-term" id="li_000787">
                        <span class="text" id="span_010529" smilref="Programming_Robots_with_ROS00033.smil#span_010529">rosnode</span>
                        <span class="text" id="span_010530" smilref="Programming_Robots_with_ROS00033.smil#span_010530">,</span>
                        <a data-type="index:locator" href="#ch20-idp44734560" external="false" id="a_001350" smilref="Programming_Robots_with_ROS00033.smil#a_001350">Introspection: rosnode, rostopic, rosmsg, rosservice, and rossrv</a>
                      </li>
                      <li data-type="index-term" id="li_000788">
                        <span class="text" id="span_010531" smilref="Programming_Robots_with_ROS00033.smil#span_010531">rosparam</span>
                        <span class="text" id="span_010532" smilref="Programming_Robots_with_ROS00033.smil#span_010532">,</span>
                        <a data-type="index:locator" href="#ch20-idp43773904" external="false" id="a_001351" smilref="Programming_Robots_with_ROS00033.smil#a_001351">Parameters: rosparam</a>
                      </li>
                      <li data-type="index-term" id="li_000789">
                        <span class="text" id="span_010533" smilref="Programming_Robots_with_ROS00033.smil#span_010533">rosrun</span>
                        <span class="text" id="span_010534" smilref="Programming_Robots_with_ROS00033.smil#span_010534">,</span>
                        <a data-type="index:locator" href="#ch20-idp43813760" external="false" id="a_001352" smilref="Programming_Robots_with_ROS00033.smil#a_001352">Starting a Node: rosrun</a>
                      </li>
                      <li data-type="index-term" id="li_000790">
                        <span class="text" id="span_010535" smilref="Programming_Robots_with_ROS00033.smil#span_010535">rosservice</span>
                        <span class="text" id="span_010536" smilref="Programming_Robots_with_ROS00033.smil#span_010536">,</span>
                        <a data-type="index:locator" href="#ch20-idp44877472" external="false" id="a_001353" smilref="Programming_Robots_with_ROS00033.smil#a_001353">Introspection: rosnode, rostopic, rosmsg, rosservice, and rossrv</a>
                      </li>
                      <li data-type="index-term" id="li_000791">
                        <span class="text" id="span_010537" smilref="Programming_Robots_with_ROS00033.smil#span_010537">rossrv</span>
                        <span class="text" id="span_010538" smilref="Programming_Robots_with_ROS00033.smil#span_010538">,</span>
                        <a data-type="index:locator" href="#ch20-idp44724848" external="false" id="a_001354" smilref="Programming_Robots_with_ROS00033.smil#a_001354">Introspection: rosnode, rostopic, rosmsg, rosservice, and rossrv</a>
                      </li>
                      <li data-type="index-term" id="li_000792">
                        <span class="text" id="span_010539" smilref="Programming_Robots_with_ROS00033.smil#span_010539">rostest</span>
                        <span class="text" id="span_010540" smilref="Programming_Robots_with_ROS00033.smil#span_010540">,</span>
                        <a data-type="index:locator" href="#ch20-ix_20-tools-asciidoc4" external="false" id="a_001355" smilref="Programming_Robots_with_ROS00033.smil#a_001355">Testing a Many-Node System: rostest</a>
                        <span class="text" id="span_010541" smilref="Programming_Robots_with_ROS00033.smil#span_010541">-</span>
                        <a data-type="index:locator" href="#ch20-idp44812240" external="false" id="a_001356" smilref="Programming_Robots_with_ROS00033.smil#a_001356">Testing a Many-Node System: rostest</a>
                      </li>
                      <li data-type="index-term" id="li_000793">
                        <span class="text" id="span_010542" smilref="Programming_Robots_with_ROS00033.smil#span_010542">rostopic</span>
                        <span class="text" id="span_010543" smilref="Programming_Robots_with_ROS00033.smil#span_010543">,</span>
                        <a data-type="index:locator" href="#ch20-idp44712192" external="false" id="a_001357" smilref="Programming_Robots_with_ROS00033.smil#a_001357">Introspection: rosnode, rostopic, rosmsg, rosservice, and rossrv</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000794">
                    <span class="text" id="span_010544" smilref="Programming_Robots_with_ROS00033.smil#span_010544">tools-based development philosophy</span>
                    <span class="text" id="span_010545" smilref="Programming_Robots_with_ROS00033.smil#span_010545">,</span>
                    <a data-type="index:locator" href="#ch01-idp197776" external="false" id="a_001358" smilref="Programming_Robots_with_ROS00033.smil#a_001358">Philosophy</a>
                  </li>
                  <li data-type="index-term" id="li_000795">
                    <span class="text" id="span_010546" smilref="Programming_Robots_with_ROS00033.smil#span_010546">topics</span>
                    <span class="text" id="span_010547" smilref="Programming_Robots_with_ROS00033.smil#span_010547">,</span>
                    <a data-type="index:locator" href="#ch03-ix_3-topics-asciidoc0" external="false" id="a_001359" smilref="Programming_Robots_with_ROS00033.smil#a_001359">Topics</a>
                    <span class="text" id="span_010548" smilref="Programming_Robots_with_ROS00033.smil#span_010548">-</span>
                    <a data-type="index:locator" href="#ch03-idp18755328" external="false" id="a_001360" smilref="Programming_Robots_with_ROS00033.smil#a_001360">Summary</a>
                    <list type="ul" id="list_000138">
                      <li data-type="index-term" id="li_000796">
                        <span class="text" id="span_010549" smilref="Programming_Robots_with_ROS00033.smil#span_010549">actions vs.</span>
                        <span class="text" id="span_010550" smilref="Programming_Robots_with_ROS00033.smil#span_010550">,</span>
                        <a data-type="index:locator" href="#ch05-idp21696896" external="false" id="a_001361" smilref="Programming_Robots_with_ROS00033.smil#a_001361">Summary</a>
                      </li>
                      <li data-type="index-term" id="li_000797">
                        <span class="text" id="span_010551" smilref="Programming_Robots_with_ROS00033.smil#span_010551">and localization</span>
                        <span class="text" id="span_010552" smilref="Programming_Robots_with_ROS00033.smil#span_010552">,</span>
                        <a data-type="index:locator" href="#ch10-idp25604768" external="false" id="a_001362" smilref="Programming_Robots_with_ROS00033.smil#a_001362">What's Going on Behind the Scenes</a>
                      </li>
                      <li data-type="index-term" id="li_000798">
                        <span class="text" id="span_010553" smilref="Programming_Robots_with_ROS00033.smil#span_010553">debugging mismatched names</span>
                        <span class="text" id="span_010554" smilref="Programming_Robots_with_ROS00033.smil#span_010554">,</span>
                        <a data-type="index:locator" href="#ch21-idp45151088" external="false" id="a_001363" smilref="Programming_Robots_with_ROS00033.smil#a_001363">Problem: Mismatched Topic Names</a>
                      </li>
                      <li data-type="index-term" id="li_000799">
                        <span class="text" id="span_010555" smilref="Programming_Robots_with_ROS00033.smil#span_010555">debugging mismatched types/checksums</span>
                        <span class="text" id="span_010556" smilref="Programming_Robots_with_ROS00033.smil#span_010556">,</span>
                        <a data-type="index:locator" href="#ch21-ix_21-debugging-asciidoc18" external="false" id="a_001364" smilref="Programming_Robots_with_ROS00033.smil#a_001364">Problem: Mismatched Topic Types and/or Checksums</a>
                        <span class="text" id="span_010557" smilref="Programming_Robots_with_ROS00033.smil#span_010557">-</span>
                        <a data-type="index:locator" href="#ch21-idp45198560" external="false" id="a_001365" smilref="Programming_Robots_with_ROS00033.smil#a_001365">Problem: Mismatched Topic Types and/or Checksums</a>
                      </li>
                      <li data-type="index-term" id="li_000800">
                        <span class="text" id="span_010558" smilref="Programming_Robots_with_ROS00033.smil#span_010558">defined</span>
                        <span class="text" id="span_010559" smilref="Programming_Robots_with_ROS00033.smil#span_010559">,</span>
                        <a data-type="index:locator" href="#ch03-idp17123664" external="false" id="a_001366" smilref="Programming_Robots_with_ROS00033.smil#a_001366">Topics</a>
                      </li>
                      <li data-type="index-term" id="li_000801">
                        <span class="text" id="span_010560" smilref="Programming_Robots_with_ROS00033.smil#span_010560">defining your own message types</span>
                        <span class="text" id="span_010561" smilref="Programming_Robots_with_ROS00033.smil#span_010561">,</span>
                        <a data-type="index:locator" href="#ch03-ix_3-topics-asciidoc5" external="false" id="a_001367" smilref="Programming_Robots_with_ROS00033.smil#a_001367">Defining Your Own Message Types</a>
                        <span class="text" id="span_010562" smilref="Programming_Robots_with_ROS00033.smil#span_010562">-</span>
                        <a data-type="index:locator" href="#ch03-idp18439840" external="false" id="a_001368" smilref="Programming_Robots_with_ROS00034.smil#a_001368">When Should You Make a New Message Type?</a>
                      </li>
                      <li data-type="index-term" id="li_000802">
                        <span class="text" id="span_010563" smilref="Programming_Robots_with_ROS00034.smil#span_010563">latched</span>
                        <span class="text" id="span_010564" smilref="Programming_Robots_with_ROS00034.smil#span_010564">,</span>
                        <a data-type="index:locator" href="#ch03-idp18019360" external="false" id="a_001369" smilref="Programming_Robots_with_ROS00034.smil#a_001369">Latched Topics</a>
                      </li>
                      <li data-type="index-term" id="li_000803">
                        <span class="text" id="span_010565" smilref="Programming_Robots_with_ROS00034.smil#span_010565">mixing publishers and subscribers</span>
                        <span class="text" id="span_010566" smilref="Programming_Robots_with_ROS00034.smil#span_010566">,</span>
                        <a data-type="index:locator" href="#ch03-idp18442816" external="false" id="a_001370" smilref="Programming_Robots_with_ROS00034.smil#a_001370">Mixing Publishers and Subscribers</a>
                      </li>
                      <li data-type="index-term" id="li_000804">
                        <span class="text" id="span_010567" smilref="Programming_Robots_with_ROS00034.smil#span_010567">publisher setup</span>
                        <span class="text" id="span_010568" smilref="Programming_Robots_with_ROS00034.smil#span_010568">,</span>
                        <a data-type="index:locator" href="#ch23-ix_23-cplusplus-asciidoc6" external="false" id="a_001371" smilref="Programming_Robots_with_ROS00034.smil#a_001371">Topics</a>
                        <span class="text" id="span_010569" smilref="Programming_Robots_with_ROS00034.smil#span_010569">-</span>
                        <a data-type="index:locator" href="#ch23-idp46447808" external="false" id="a_001372" smilref="Programming_Robots_with_ROS00034.smil#a_001372">Topics</a>
                      </li>
                      <li data-type="index-term" id="li_000805">
                        <span class="text" id="span_010570" smilref="Programming_Robots_with_ROS00034.smil#span_010570">publishing to</span>
                        <span class="text" id="span_010571" smilref="Programming_Robots_with_ROS00034.smil#span_010571">,</span>
                        <a data-type="index:locator" href="#ch03-idp17167760" external="false" id="a_001373" smilref="Programming_Robots_with_ROS00034.smil#a_001373">Publishing to a Topic</a>
                        <span class="text" id="span_010572" smilref="Programming_Robots_with_ROS00034.smil#span_010572">-</span>
                        <a data-type="index:locator" href="#ch03-idp17856560" external="false" id="a_001374" smilref="Programming_Robots_with_ROS00034.smil#a_001374">Checking That Everything Works as Expected</a>
                      </li>
                      <li data-type="index-term" id="li_000806">
                        <span class="text" id="span_010573" smilref="Programming_Robots_with_ROS00034.smil#span_010573">sensor wrappers for periodic measurements over</span>
                        <span class="text" id="span_010574" smilref="Programming_Robots_with_ROS00034.smil#span_010574">,</span>
                        <a data-type="index:locator" href="#ch15-ix_15-sensors_actuators-asciidoc2" external="false" id="a_001375" smilref="Programming_Robots_with_ROS00034.smil#a_001375">Design 1: Periodic Measurements over a Topic</a>
                        <span class="text" id="span_010575" smilref="Programming_Robots_with_ROS00034.smil#span_010575">-</span>
                        <a data-type="index:locator" href="#ch15-idp37239472" external="false" id="a_001376" smilref="Programming_Robots_with_ROS00034.smil#a_001376">Design 1: Periodic Measurements over a Topic</a>
                      </li>
                      <li data-type="index-term" id="li_000807">
                        <span class="text" id="span_010576" smilref="Programming_Robots_with_ROS00034.smil#span_010576">sensor wrappers for streaming measurements over</span>
                        <span class="text" id="span_010577" smilref="Programming_Robots_with_ROS00034.smil#span_010577">,</span>
                        <a data-type="index:locator" href="#ch15-idp37475904" external="false" id="a_001377" smilref="Programming_Robots_with_ROS00034.smil#a_001377">Design 2: Streaming Measurements over a Topic</a>
                      </li>
                      <li data-type="index-term" id="li_000808">
                        <span class="text" id="span_010578" smilref="Programming_Robots_with_ROS00034.smil#span_010578">services vs.</span>
                        <span class="text" id="span_010579" smilref="Programming_Robots_with_ROS00034.smil#span_010579">,</span>
                        <a data-type="index:locator" href="#ch05-idp21696896" external="false" id="a_001378" smilref="Programming_Robots_with_ROS00034.smil#a_001378">Summary</a>
                      </li>
                      <li data-type="index-term" id="li_000809">
                        <span class="text" id="span_010580" smilref="Programming_Robots_with_ROS00034.smil#span_010580">subscribing to</span>
                        <span class="text" id="span_010581" smilref="Programming_Robots_with_ROS00034.smil#span_010581">,</span>
                        <a data-type="index:locator" href="#ch03-ix_3-topics-asciidoc3" external="false" id="a_001379" smilref="Programming_Robots_with_ROS00034.smil#a_001379">Subscribing to a Topic</a>
                        <span class="text" id="span_010582" smilref="Programming_Robots_with_ROS00034.smil#span_010582">-</span>
                        <a data-type="index:locator" href="#ch03-idp18014704" external="false" id="a_001380" smilref="Programming_Robots_with_ROS00034.smil#a_001380">Checking That Everything Works as Expected</a>
                      </li>
                    </list>
                  </li>
                  <li data-gentext="see" id="li_000810">
                    <span data-type="index-term" id="span_010583" smilref="Programming_Robots_with_ROS00034.smil#span_010583">TortoiseBot</span>
                    <span class="text" id="span_010584" smilref="Programming_Robots_with_ROS00034.smil#span_010584">(</span>
                    <span class="text" id="span_010585" smilref="Programming_Robots_with_ROS00034.smil#span_010585">see</span>
                    <span class="text" id="span_010586" smilref="Programming_Robots_with_ROS00034.smil#span_010586">mobile robot (TortoiseBot))</span>
                  </li>
                  <li data-type="index-term" id="li_000811">
                    <span class="text" id="span_010587" smilref="Programming_Robots_with_ROS00034.smil#span_010587">trackers (bugs/feature requests)</span>
                    <span class="text" id="span_010588" smilref="Programming_Robots_with_ROS00034.smil#span_010588">,</span>
                    <a data-type="index:locator" href="#ch22-idp45628960" external="false" id="a_001381" smilref="Programming_Robots_with_ROS00034.smil#a_001381">Trackers (Bugs and Feature Requests)</a>
                  </li>
                  <li data-type="index-term" id="li_000812">
                    <span class="text" id="span_010589" smilref="Programming_Robots_with_ROS00034.smil#span_010589">tracks</span>
                    <span class="text" id="span_010590" smilref="Programming_Robots_with_ROS00034.smil#span_010590">,</span>
                    <a data-type="index:locator" href="#ch06-idp21666736" external="false" id="a_001382" smilref="Programming_Robots_with_ROS00034.smil#a_001382">Actuation: Mobile Platform</a>
                  </li>
                  <li data-type="index-term" id="li_000813">
                    <span class="text" id="span_010591" smilref="Programming_Robots_with_ROS00034.smil#span_010591">transform tree</span>
                    <span class="text" id="span_010592" smilref="Programming_Robots_with_ROS00034.smil#span_010592">,</span>
                    <a data-type="index:locator" href="#ch14-idp36104784" external="false" id="a_001383" smilref="Programming_Robots_with_ROS00034.smil#a_001383">Picking Up the Item</a>
                  </li>
                  <li id="li_000814">
                    <span data-type="index-term" id="span_010593" smilref="Programming_Robots_with_ROS00034.smil#span_010593">transforms, verifying</span>
                    <list type="ul" id="list_000139">
                      <li data-type="index-term" id="li_000815">
                        <span class="text" id="span_010594" smilref="Programming_Robots_with_ROS00034.smil#span_010594">for Cougarbot</span>
                        <span class="text" id="span_010595" smilref="Programming_Robots_with_ROS00034.smil#span_010595">,</span>
                        <a data-type="index:locator" href="#ch18-ix_18-rossify_robots3-asciidoc6b" external="false" id="a_001384" smilref="Programming_Robots_with_ROS00034.smil#a_001384">Verifying Transforms</a>
                        <span class="text" id="span_010596" smilref="Programming_Robots_with_ROS00034.smil#span_010596">-</span>
                        <a data-type="index:locator" href="#ch18-idp42532736" external="false" id="a_001385" smilref="Programming_Robots_with_ROS00034.smil#a_001385">Verifying Transforms</a>
                      </li>
                      <li data-type="index-term" id="li_000816">
                        <span class="text" id="span_010597" smilref="Programming_Robots_with_ROS00034.smil#span_010597">for TortoiseBot</span>
                        <span class="text" id="span_010598" smilref="Programming_Robots_with_ROS00034.smil#span_010598">,</span>
                        <a data-type="index:locator" href="#ch17-ix_17-rossify_robots2-asciidoc3" external="false" id="a_001386" smilref="Programming_Robots_with_ROS00034.smil#a_001386">Verifying Transforms</a>
                        <span class="text" id="span_010599" smilref="Programming_Robots_with_ROS00034.smil#span_010599">-</span>
                        <a data-type="index:locator" href="#ch17-idp39169952" external="false" id="a_001387" smilref="Programming_Robots_with_ROS00034.smil#a_001387">Verifying Transforms</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000817">
                    <span class="text" id="span_010600" smilref="Programming_Robots_with_ROS00034.smil#span_010600">transmissions</span>
                    <span class="text" id="span_010601" smilref="Programming_Robots_with_ROS00034.smil#span_010601">,</span>
                    <a data-type="index:locator" href="#ch18-idp42059280" external="false" id="a_001388" smilref="Programming_Robots_with_ROS00034.smil#a_001388">Simulation in Gazebo</a>
                  </li>
                  <li data-gentext="see" id="li_000818">
                    <span data-type="index-term" id="span_010602" smilref="Programming_Robots_with_ROS00034.smil#span_010602">TTS (text-to-speech) software</span>
                    <span class="text" id="span_010603" smilref="Programming_Robots_with_ROS00034.smil#span_010603">(</span>
                    <span class="text" id="span_010604" smilref="Programming_Robots_with_ROS00034.smil#span_010604">see</span>
                    <span class="text" id="span_010605" smilref="Programming_Robots_with_ROS00034.smil#span_010605">pyttsx)</span>
                  </li>
                  <li data-type="index-term" id="li_000819">
                    <span class="text" id="span_010606" smilref="Programming_Robots_with_ROS00034.smil#span_010606">TurtleBot</span>
                    <span class="text" id="span_010607" smilref="Programming_Robots_with_ROS00034.smil#span_010607">,</span>
                    <a data-type="index:locator" href="#ch06-idp21869232" external="false" id="a_001389" smilref="Programming_Robots_with_ROS00034.smil#a_001389">TurtleBot</a>
                    <list type="ul" id="list_000140">
                      <li data-gentext="see" id="li_000820" smilref="Programming_Robots_with_ROS00034.smil#li_000820">(see also follow-bot, teleop-bot, wander-bot)</li>
                      <li data-type="index-term" id="li_000821">
                        <span class="text" id="span_010608" smilref="Programming_Robots_with_ROS00034.smil#span_010608">and localization</span>
                        <span class="text" id="span_010609" smilref="Programming_Robots_with_ROS00034.smil#span_010609">,</span>
                        <a data-type="index:locator" href="#ch10-idp25578944" external="false" id="a_001390" smilref="Programming_Robots_with_ROS00034.smil#a_001390">Localizing the Robot in a Map</a>
                      </li>
                      <li data-type="index-term" id="li_000822">
                        <span class="text" id="span_010610" smilref="Programming_Robots_with_ROS00034.smil#span_010610">and map creation</span>
                        <span class="text" id="span_010611" smilref="Programming_Robots_with_ROS00034.smil#span_010611">,</span>
                        <a data-type="index:locator" href="#ch09-idp24903408" external="false" id="a_001391" smilref="Programming_Robots_with_ROS00034.smil#a_001391">Building Maps</a>
                        <span class="text" id="span_010612" smilref="Programming_Robots_with_ROS00034.smil#span_010612">,</span>
                        <a data-type="index:locator" href="#ch09-idp24938960" external="false" id="a_001392" smilref="Programming_Robots_with_ROS00034.smil#a_001392">Building Maps</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000823">
                    <span class="text" id="span_010613" smilref="Programming_Robots_with_ROS00034.smil#span_010613">Twist message</span>
                    <span class="text" id="span_010614" smilref="Programming_Robots_with_ROS00034.smil#span_010614">,</span>
                    <a data-type="index:locator" href="#ch06-idp21712672" external="false" id="a_001393" smilref="Programming_Robots_with_ROS00034.smil#a_001393">Actuation: Mobile Platform</a>
                    <span class="text" id="span_010615" smilref="Programming_Robots_with_ROS00034.smil#span_010615">,</span>
                    <a data-type="index:locator" href="#ch08-idp22640384" external="false" id="a_001394" smilref="Programming_Robots_with_ROS00034.smil#a_001394">Teleop-bot</a>
                  </li>
                  <li data-type="index-term" id="li_000824">
                    <span class="text" id="span_010616" smilref="Programming_Robots_with_ROS00034.smil#span_010616">types, debugging mismatched</span>
                    <span class="text" id="span_010617" smilref="Programming_Robots_with_ROS00034.smil#span_010617">,</span>
                    <a data-type="index:locator" href="#ch21-ix_21-debugging-asciidoc18" external="false" id="a_001395" smilref="Programming_Robots_with_ROS00034.smil#a_001395">Problem: Mismatched Topic Types and/or Checksums</a>
                    <span class="text" id="span_010618" smilref="Programming_Robots_with_ROS00034.smil#span_010618">-</span>
                    <a data-type="index:locator" href="#ch21-idp45198560" external="false" id="a_001396" smilref="Programming_Robots_with_ROS00034.smil#a_001396">Problem: Mismatched Topic Types and/or Checksums</a>
                  </li>
                </list>
              </div>
              <h1 id="h1_000563" smilref="Programming_Robots_with_ROS00034.smil#h1_000563">U</h1>
              <div data-type="indexdiv" id="div_000071">
                <list type="ul" id="list_000141">
                  <li data-type="index-term" id="li_000825">
                    <span class="text" id="span_010619" smilref="Programming_Robots_with_ROS00034.smil#span_010619">Ubuntu 14.04 LTS (Trusty Tahr)</span>
                    <span class="text" id="span_010620" smilref="Programming_Robots_with_ROS00034.smil#span_010620">,</span>
                    <a data-type="index:locator" href="#ch01-idp98864" external="false" id="a_001397" smilref="Programming_Robots_with_ROS00034.smil#a_001397">Installation</a>
                  </li>
                  <li data-type="index-term" id="li_000826">
                    <span class="text" id="span_010621" smilref="Programming_Robots_with_ROS00034.smil#span_010621">Ubuntu Linux</span>
                    <span class="text" id="span_010622" smilref="Programming_Robots_with_ROS00034.smil#span_010622">,</span>
                    <a data-type="index:locator" href="#preface01-idm100160" external="false" id="a_001398" smilref="Programming_Robots_with_ROS00034.smil#a_001398">Prerequisites</a>
                    <span class="text" id="span_010623" smilref="Programming_Robots_with_ROS00034.smil#span_010623">,</span>
                    <a data-type="index:locator" href="#ch01-idp92720" external="false" id="a_001399" smilref="Programming_Robots_with_ROS00034.smil#a_001399">Installation</a>
                  </li>
                  <li data-type="index-term" id="li_000827">
                    <span class="text" id="span_010624" smilref="Programming_Robots_with_ROS00034.smil#span_010624">Unix software development philosophy</span>
                    <span class="text" id="span_010625" smilref="Programming_Robots_with_ROS00034.smil#span_010625">,</span>
                    <a data-type="index:locator" href="#ch01-ix_1-intro-asciidoc1" external="false" id="a_001400" smilref="Programming_Robots_with_ROS00034.smil#a_001400">Philosophy</a>
                  </li>
                  <li data-type="index-term" id="li_000828">
                    <span class="text" id="span_010626" smilref="Programming_Robots_with_ROS00034.smil#span_010626">unstructured light depth cameras</span>
                    <span class="text" id="span_010627" smilref="Programming_Robots_with_ROS00034.smil#span_010627">,</span>
                    <a data-type="index:locator" href="#ch06-idp21791936" external="false" id="a_001401" smilref="Programming_Robots_with_ROS00034.smil#a_001401">Depth cameras</a>
                  </li>
                  <li id="li_000829">
                    <span data-type="index-term" id="span_010628" smilref="Programming_Robots_with_ROS00034.smil#span_010628">URDF (Unified Robot Description Format)</span>
                    <list type="ul" id="list_000142">
                      <li data-type="index-term" id="li_000830">
                        <span class="text" id="span_010629" smilref="Programming_Robots_with_ROS00034.smil#span_010629">joint types supported by</span>
                        <span class="text" id="span_010630" smilref="Programming_Robots_with_ROS00034.smil#span_010630">,</span>
                        <a data-type="index:locator" href="#ch16-idp39499040" external="false" id="a_001402" smilref="Programming_Robots_with_ROS00034.smil#a_001402">Modeling the Robot: URDF</a>
                      </li>
                      <li data-type="index-term" id="li_000831">
                        <span class="text" id="span_010631" smilref="Programming_Robots_with_ROS00034.smil#span_010631">modeling CougarBot with</span>
                        <span class="text" id="span_010632" smilref="Programming_Robots_with_ROS00034.smil#span_010632">,</span>
                        <a data-type="index:locator" href="#ch18-ix_18-rossify_robots3-asciidoc3" external="false" id="a_001403" smilref="Programming_Robots_with_ROS00034.smil#a_001403">Modeling the Robot: URDF</a>
                        <span class="text" id="span_010633" smilref="Programming_Robots_with_ROS00034.smil#span_010633">-</span>
                        <a data-type="index:locator" href="#ch18-idp41631600" external="false" id="a_001404" smilref="Programming_Robots_with_ROS00034.smil#a_001404">Modeling the Robot: URDF</a>
                      </li>
                      <li data-type="index-term" id="li_000832">
                        <span class="text" id="span_010634" smilref="Programming_Robots_with_ROS00034.smil#span_010634">modeling TortoiseBot with</span>
                        <span class="text" id="span_010635" smilref="Programming_Robots_with_ROS00034.smil#span_010635">,</span>
                        <a data-type="index:locator" href="#ch16-ix_16-rossify_robots-asciidoc8" external="false" id="a_001405" smilref="Programming_Robots_with_ROS00034.smil#a_001405">Modeling the Robot: URDF</a>
                        <span class="text" id="span_010636" smilref="Programming_Robots_with_ROS00034.smil#span_010636">-</span>
                        <a data-type="index:locator" href="#ch16-idp39979568" external="false" id="a_001406" smilref="Programming_Robots_with_ROS00034.smil#a_001406">Modeling the Robot: URDF</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000833">
                    <span class="text" id="span_010637" smilref="Programming_Robots_with_ROS00034.smil#span_010637">urdf_to_graphiz</span>
                    <span class="text" id="span_010638" smilref="Programming_Robots_with_ROS00034.smil#span_010638">,</span>
                    <a data-type="index:locator" href="#ch16-idp39459616" external="false" id="a_001407" smilref="Programming_Robots_with_ROS00034.smil#a_001407">Modeling the Robot: URDF</a>
                  </li>
                </list>
              </div>
              <h1 id="h1_000564" smilref="Programming_Robots_with_ROS00034.smil#h1_000564">V</h1>
              <div data-type="indexdiv" id="div_000072">
                <list type="ul" id="list_000143">
                  <li data-type="index-term" id="li_000834">
                    <span class="text" id="span_010639" smilref="Programming_Robots_with_ROS00034.smil#span_010639">velocity ramps</span>
                    <span class="text" id="span_010640" smilref="Programming_Robots_with_ROS00034.smil#span_010640">,</span>
                    <a data-type="index:locator" href="#ch08-ix_8-teleop_bot-asciidoc8" external="false" id="a_001408" smilref="Programming_Robots_with_ROS00034.smil#a_001408">Velocity Ramps</a>
                    <span class="text" id="span_010641" smilref="Programming_Robots_with_ROS00034.smil#span_010641">-</span>
                    <a data-type="index:locator" href="#ch08-idp25095424" external="false" id="a_001409" smilref="Programming_Robots_with_ROS00034.smil#a_001409">Velocity Ramps</a>
                  </li>
                  <li data-type="index-term" id="li_000835">
                    <span class="text" id="span_010642" smilref="Programming_Robots_with_ROS00034.smil#span_010642">view_frames.py program</span>
                    <span class="text" id="span_010643" smilref="Programming_Robots_with_ROS00034.smil#span_010643">,</span>
                    <a data-type="index:locator" href="#ch14-idp36105456" external="false" id="a_001410" smilref="Programming_Robots_with_ROS00034.smil#a_001410">Picking Up the Item</a>
                  </li>
                  <li data-type="index-term" id="li_000836">
                    <span class="text" id="span_010644" smilref="Programming_Robots_with_ROS00034.smil#span_010644">virtual private networks (VPNs)</span>
                    <span class="text" id="span_010645" smilref="Programming_Robots_with_ROS00034.smil#span_010645">,</span>
                    <a data-type="index:locator" href="#ch21-idp45249408" external="false" id="a_001411" smilref="Programming_Robots_with_ROS00034.smil#a_001411">Problem: Incorrect Network Settings</a>
                  </li>
                  <li data-type="index-term" id="li_000837">
                    <span class="text" id="span_010646" smilref="Programming_Robots_with_ROS00034.smil#span_010646">visual cameras</span>
                    <span class="text" id="span_010647" smilref="Programming_Robots_with_ROS00034.smil#span_010647">,</span>
                    <a data-type="index:locator" href="#ch06-idp21766096" external="false" id="a_001412" smilref="Programming_Robots_with_ROS00034.smil#a_001412">Visual cameras</a>
                  </li>
                  <li id="li_000838">
                    <span data-type="index-term" id="span_010648" smilref="Programming_Robots_with_ROS00034.smil#span_010648">visualization</span>
                    <list type="ul" id="list_000144">
                      <li data-gentext="see" id="li_000839">
                        <span data-type="index-term" id="span_010649" smilref="Programming_Robots_with_ROS00034.smil#span_010649">rviz</span>
                        <span class="text" id="span_010650" smilref="Programming_Robots_with_ROS00034.smil#span_010650">(</span>
                        <span class="text" id="span_010651" smilref="Programming_Robots_with_ROS00034.smil#span_010651">see</span>
                        <span class="text" id="span_010652" smilref="Programming_Robots_with_ROS00034.smil#span_010652">rviz)</span>
                      </li>
                      <li data-type="index-term" id="li_000840">
                        <span class="text" id="span_010653" smilref="Programming_Robots_with_ROS00034.smil#span_010653">simulation vs.</span>
                        <span class="text" id="span_010654" smilref="Programming_Robots_with_ROS00034.smil#span_010654">,</span>
                        <a data-type="index:locator" href="#ch17-idp39119824" external="false" id="a_001413" smilref="Programming_Robots_with_ROS00034.smil#a_001413">Verifying Transforms</a>
                      </li>
                    </list>
                  </li>
                </list>
              </div>
              <h1 id="h1_000565" smilref="Programming_Robots_with_ROS00034.smil#h1_000565">W</h1>
              <div data-type="indexdiv" id="div_000073">
                <list type="ul" id="list_000145">
                  <li data-type="index-term" id="li_000841">
                    <span class="text" id="span_010655" smilref="Programming_Robots_with_ROS00034.smil#span_010655">wander-bot</span>
                    <span class="text" id="span_010656" smilref="Programming_Robots_with_ROS00034.smil#span_010656">,</span>
                    <a data-type="index:locator" href="#ch07-ix_7-wanderbot-asciidoc0" external="false" id="a_001414" smilref="Programming_Robots_with_ROS00034.smil#a_001414">Wander-bot</a>
                    <span class="text" id="span_010657" smilref="Programming_Robots_with_ROS00034.smil#span_010657">-</span>
                    <a data-type="index:locator" href="#ch07-idp22631664" external="false" id="a_001415" smilref="Programming_Robots_with_ROS00034.smil#a_001415">Summary</a>
                    <list type="ul" id="list_000146">
                      <li data-type="index-term" id="li_000842">
                        <span class="text" id="span_010658" smilref="Programming_Robots_with_ROS00034.smil#span_010658">actuation</span>
                        <span class="text" id="span_010659" smilref="Programming_Robots_with_ROS00034.smil#span_010659">,</span>
                        <a data-type="index:locator" href="#ch07-idp22521232" external="false" id="a_001416" smilref="Programming_Robots_with_ROS00034.smil#a_001416">Sensing and Actuation: Wander-bot!</a>
                      </li>
                      <li data-type="index-term" id="li_000843">
                        <span class="text" id="span_010660" smilref="Programming_Robots_with_ROS00034.smil#span_010660">creating package for</span>
                        <span class="text" id="span_010661" smilref="Programming_Robots_with_ROS00034.smil#span_010661">,</span>
                        <a data-type="index:locator" href="#ch07-ix_7-wanderbot-asciidoc2" external="false" id="a_001417" smilref="Programming_Robots_with_ROS00034.smil#a_001417">Creating a Package</a>
                        <span class="text" id="span_010662" smilref="Programming_Robots_with_ROS00034.smil#span_010662">-</span>
                        <a data-type="index:locator" href="#ch07-idp22249776" external="false" id="a_001418" smilref="Programming_Robots_with_ROS00034.smil#a_001418">Creating a Package</a>
                      </li>
                      <li data-type="index-term" id="li_000844">
                        <span class="text" id="span_010663" smilref="Programming_Robots_with_ROS00034.smil#span_010663">range estimation from sensor data</span>
                        <span class="text" id="span_010664" smilref="Programming_Robots_with_ROS00034.smil#span_010664">,</span>
                        <a data-type="index:locator" href="#ch07-ix_7-wanderbot-asciidoc3" external="false" id="a_001419" smilref="Programming_Robots_with_ROS00034.smil#a_001419">Reading Sensor Data</a>
                        <span class="text" id="span_010665" smilref="Programming_Robots_with_ROS00034.smil#span_010665">-</span>
                        <a data-type="index:locator" href="#ch07-idp22387728" external="false" id="a_001420" smilref="Programming_Robots_with_ROS00034.smil#a_001420">Reading Sensor Data</a>
                      </li>
                      <li data-type="index-term" id="li_000845">
                        <span class="text" id="span_010666" smilref="Programming_Robots_with_ROS00034.smil#span_010666">sensing</span>
                        <span class="text" id="span_010667" smilref="Programming_Robots_with_ROS00034.smil#span_010667">,</span>
                        <a data-type="index:locator" href="#ch07-idp22522176" external="false" id="a_001421" smilref="Programming_Robots_with_ROS00034.smil#a_001421">Sensing and Actuation: Wander-bot!</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000846">
                    <span class="text" id="span_010668" smilref="Programming_Robots_with_ROS00034.smil#span_010668">wiki, ROS</span>
                    <span class="text" id="span_010669" smilref="Programming_Robots_with_ROS00034.smil#span_010669">,</span>
                    <a data-type="index:locator" href="#ch22-idp45592464" external="false" id="a_001422" smilref="Programming_Robots_with_ROS00034.smil#a_001422">The ROS Wiki</a>
                  </li>
                  <li data-type="index-term" id="li_000847">
                    <span class="text" id="span_010670" smilref="Programming_Robots_with_ROS00034.smil#span_010670">workcell</span>
                    <span class="text" id="span_010671" smilref="Programming_Robots_with_ROS00034.smil#span_010671">,</span>
                    <a data-type="index:locator" href="#ch11-idp26430784" external="false" id="a_001423" smilref="Programming_Robots_with_ROS00034.smil#a_001423">Chess-bot</a>
                  </li>
                  <li data-type="index-term" id="li_000848">
                    <span class="text" id="span_010672" smilref="Programming_Robots_with_ROS00034.smil#span_010672">workspaces</span>
                    <span class="text" id="span_010673" smilref="Programming_Robots_with_ROS00034.smil#span_010673">,</span>
                    <a data-type="index:locator" href="#ch02-idm198080" external="false" id="a_001424" smilref="Programming_Robots_with_ROS00034.smil#a_001424">Workspaces</a>
                    <span class="text" id="span_010674" smilref="Programming_Robots_with_ROS00034.smil#span_010674">,</span>
                    <a data-type="index:locator" href="#ch06-idp21739808" external="false" id="a_001425" smilref="Programming_Robots_with_ROS00034.smil#a_001425">Actuation: Manipulator Arm</a>
                  </li>
                  <li data-type="index-term" id="li_000849">
                    <span class="text" id="span_010675" smilref="Programming_Robots_with_ROS00034.smil#span_010675">world coordinate frame</span>
                    <span class="text" id="span_010676" smilref="Programming_Robots_with_ROS00034.smil#span_010676">,</span>
                    <a data-type="index:locator" href="#ch10-idp25569856" external="false" id="a_001426" smilref="Programming_Robots_with_ROS00034.smil#a_001426">Localizing the Robot in a Map</a>
                  </li>
                  <li data-type="index-term" id="li_000850">
                    <span class="text" id="span_010677" smilref="Programming_Robots_with_ROS00034.smil#span_010677">wrappers</span>
                    <span class="text" id="span_010678" smilref="Programming_Robots_with_ROS00034.smil#span_010678">,</span>
                    <a data-type="index:locator" href="#ch01-idp207744" external="false" id="a_001427" smilref="Programming_Robots_with_ROS00034.smil#a_001427">Philosophy</a>
                    <list type="ul" id="list_000147">
                      <li data-type="index-term" id="li_000851">
                        <span class="text" id="span_010679" smilref="Programming_Robots_with_ROS00034.smil#span_010679">for continuous actuation</span>
                        <span class="text" id="span_010680" smilref="Programming_Robots_with_ROS00034.smil#span_010680">,</span>
                        <a data-type="index:locator" href="#ch15-idp40181920" external="false" id="a_001428" smilref="Programming_Robots_with_ROS00034.smil#a_001428">Design 1: Continuous Actuation</a>
                      </li>
                      <li data-type="index-term" id="li_000852">
                        <span class="text" id="span_010681" smilref="Programming_Robots_with_ROS00034.smil#span_010681">for infrequent, extended actuation</span>
                        <span class="text" id="span_010682" smilref="Programming_Robots_with_ROS00034.smil#span_010682">,</span>
                        <a data-type="index:locator" href="#ch15-ix_15-sensors_actuators-asciidoc8" external="false" id="a_001429" smilref="Programming_Robots_with_ROS00034.smil#a_001429">Design 3: Infrequent, Extended Actuation</a>
                        <span class="text" id="span_010683" smilref="Programming_Robots_with_ROS00034.smil#span_010683">-</span>
                        <a data-type="index:locator" href="#ch15-idp39366640" external="false" id="a_001430" smilref="Programming_Robots_with_ROS00034.smil#a_001430">Summary</a>
                      </li>
                      <li data-type="index-term" id="li_000853">
                        <span class="text" id="span_010684" smilref="Programming_Robots_with_ROS00034.smil#span_010684">for infrequent, instantaneous actuation</span>
                        <span class="text" id="span_010685" smilref="Programming_Robots_with_ROS00034.smil#span_010685">,</span>
                        <a data-type="index:locator" href="#ch15-idp40157936" external="false" id="a_001431" smilref="Programming_Robots_with_ROS00034.smil#a_001431">Design 2: Infrequent, Instantaneous Actuation</a>
                      </li>
                      <li data-type="index-term" id="li_000854">
                        <span class="text" id="span_010686" smilref="Programming_Robots_with_ROS00034.smil#span_010686">for periodic measurements over a topic</span>
                        <span class="text" id="span_010687" smilref="Programming_Robots_with_ROS00034.smil#span_010687">,</span>
                        <a data-type="index:locator" href="#ch15-ix_15-sensors_actuators-asciidoc2" external="false" id="a_001432" smilref="Programming_Robots_with_ROS00034.smil#a_001432">Design 1: Periodic Measurements over a Topic</a>
                        <span class="text" id="span_010688" smilref="Programming_Robots_with_ROS00034.smil#span_010688">-</span>
                        <a data-type="index:locator" href="#ch15-idp37457184" external="false" id="a_001433" smilref="Programming_Robots_with_ROS00034.smil#a_001433">Design 1: Periodic Measurements over a Topic</a>
                      </li>
                      <li data-type="index-term" id="li_000855">
                        <span class="text" id="span_010689" smilref="Programming_Robots_with_ROS00034.smil#span_010689">for sensor measurements on demand</span>
                        <span class="text" id="span_010690" smilref="Programming_Robots_with_ROS00034.smil#span_010690">,</span>
                        <a data-type="index:locator" href="#ch15-idp37263376" external="false" id="a_001434" smilref="Programming_Robots_with_ROS00034.smil#a_001434">Design 4: Sensor Measurements on Demand</a>
                      </li>
                      <li data-type="index-term" id="li_000856">
                        <span class="text" id="span_010691" smilref="Programming_Robots_with_ROS00034.smil#span_010691">for streaming measurements over a topic</span>
                        <span class="text" id="span_010692" smilref="Programming_Robots_with_ROS00034.smil#span_010692">,</span>
                        <a data-type="index:locator" href="#ch15-idp37475904" external="false" id="a_001435" smilref="Programming_Robots_with_ROS00034.smil#a_001435">Design 2: Streaming Measurements over a Topic</a>
                      </li>
                      <li data-type="index-term" id="li_000857">
                        <span class="text" id="span_010693" smilref="Programming_Robots_with_ROS00034.smil#span_010693">for streaming measurements published at a fixed rate</span>
                        <span class="text" id="span_010694" smilref="Programming_Robots_with_ROS00034.smil#span_010694">,</span>
                        <a data-type="index:locator" href="#ch15-idp37475904" external="false" id="a_001436" smilref="Programming_Robots_with_ROS00034.smil#a_001436">Design 2: Streaming Measurements over a Topic</a>
                      </li>
                      <li data-type="index-term" id="li_000858">
                        <span class="text" id="span_010695" smilref="Programming_Robots_with_ROS00034.smil#span_010695">with actuators</span>
                        <span class="text" id="span_010696" smilref="Programming_Robots_with_ROS00034.smil#span_010696">,</span>
                        <a data-type="index:locator" href="#ch15-ix_15-sensors_actuators-asciidoc6" external="false" id="a_001437" smilref="Programming_Robots_with_ROS00034.smil#a_001437">Designing the ROS Wrapper</a>
                        <span class="text" id="span_010697" smilref="Programming_Robots_with_ROS00034.smil#span_010697">-</span>
                        <a data-type="index:locator" href="#ch15-idp38928560" external="false" id="a_001438" smilref="Programming_Robots_with_ROS00034.smil#a_001438">Designing the ROS Wrapper</a>
                      </li>
                      <li data-type="index-term" id="li_000859">
                        <span class="text" id="span_010698" smilref="Programming_Robots_with_ROS00034.smil#span_010698">with sensors</span>
                        <span class="text" id="span_010699" smilref="Programming_Robots_with_ROS00034.smil#span_010699">,</span>
                        <a data-type="index:locator" href="#ch15-idp37826880" external="false" id="a_001439" smilref="Programming_Robots_with_ROS00034.smil#a_001439">Designing the ROS Wrapper</a>
                      </li>
                    </list>
                  </li>
                </list>
              </div>
              <h1 id="h1_000566" smilref="Programming_Robots_with_ROS00034.smil#h1_000566">X</h1>
              <div data-type="indexdiv" id="div_000074">
                <list type="ul" id="list_000148">
                  <li id="li_000860">
                    <span data-type="index-term" id="span_010700" smilref="Programming_Robots_with_ROS00034.smil#span_010700">XML</span>
                    <list type="ul" id="list_000149">
                      <li data-type="index-term" id="li_000861">
                        <span class="text" id="span_010701" smilref="Programming_Robots_with_ROS00034.smil#span_010701">and Gazebo</span>
                        <span class="text" id="span_010702" smilref="Programming_Robots_with_ROS00034.smil#span_010702">,</span>
                        <a data-type="index:locator" href="#ch11-ix_11-chessbot-asciidoc17" external="false" id="a_001440" smilref="Programming_Robots_with_ROS00034.smil#a_001440">Modeling a Chessboard</a>
                      </li>
                      <li data-type="index-term" id="li_000862">
                        <span class="text" id="span_010703" smilref="Programming_Robots_with_ROS00034.smil#span_010703">and launch files</span>
                        <span class="text" id="span_010704" smilref="Programming_Robots_with_ROS00034.smil#span_010704">,</span>
                        <a data-type="index:locator" href="#ch02-idp17013424" external="false" id="a_001441" smilref="Programming_Robots_with_ROS00034.smil#a_001441">roslaunch</a>
                      </li>
                      <li data-type="index-term" id="li_000863">
                        <span class="text" id="span_010705" smilref="Programming_Robots_with_ROS00034.smil#span_010705">and Python template engine</span>
                        <span class="text" id="span_010706" smilref="Programming_Robots_with_ROS00034.smil#span_010706">,</span>
                        <a data-type="index:locator" href="#ch14-idp33992736" external="false" id="a_001442" smilref="Programming_Robots_with_ROS00034.smil#a_001442">Stockroom Simulation</a>
                        <span class="text" id="span_010707" smilref="Programming_Robots_with_ROS00034.smil#span_010707">-</span>
                        <a data-type="index:locator" href="#ch14-idp34355408" external="false" id="a_001443" smilref="Programming_Robots_with_ROS00034.smil#a_001443">Stockroom Simulation</a>
                      </li>
                      <li data-type="index-term" id="li_000864">
                        <span class="text" id="span_010708" smilref="Programming_Robots_with_ROS00034.smil#span_010708">and roslaunch</span>
                        <span class="text" id="span_010709" smilref="Programming_Robots_with_ROS00034.smil#span_010709">,</span>
                        <a data-type="index:locator" href="#ch20-idp43829264" external="false" id="a_001444" smilref="Programming_Robots_with_ROS00034.smil#a_001444">Starting Many Nodes: roslaunch</a>
                      </li>
                      <li data-gentext="see" id="li_000865">
                        <span data-type="index-term" id="span_010710" smilref="Programming_Robots_with_ROS00034.smil#span_010710">and URDF</span>
                        <span class="text" id="span_010711" smilref="Programming_Robots_with_ROS00034.smil#span_010711">(</span>
                        <span class="text" id="span_010712" smilref="Programming_Robots_with_ROS00034.smil#span_010712">see</span>
                        <span class="text" id="span_010713" smilref="Programming_Robots_with_ROS00034.smil#span_010713">URDF (Unified Robot Description Format))</span>
                      </li>
                    </list>
                  </li>
                </list>
              </div>
              <h1 id="h1_000567" smilref="Programming_Robots_with_ROS00034.smil#h1_000567">Y</h1>
              <div data-type="indexdiv" id="div_000075">
                <list type="ul" id="list_000150">
                  <li id="li_000866">
                    <span data-type="index-term" id="span_010714" smilref="Programming_Robots_with_ROS00034.smil#span_010714">YAML</span>
                    <list type="ul" id="list_000151">
                      <li data-type="index-term" id="li_000867">
                        <span class="text" id="span_010715" smilref="Programming_Robots_with_ROS00034.smil#span_010715">and maps</span>
                        <span class="text" id="span_010716" smilref="Programming_Robots_with_ROS00034.smil#span_010716">,</span>
                        <a data-type="index:locator" href="#ch09-idp25202208" external="false" id="a_001445" smilref="Programming_Robots_with_ROS00034.smil#a_001445">Maps in ROS</a>
                      </li>
                      <li data-type="index-term" id="li_000868">
                        <span class="text" id="span_010717" smilref="Programming_Robots_with_ROS00034.smil#span_010717">and parameter values</span>
                        <span class="text" id="span_010718" smilref="Programming_Robots_with_ROS00034.smil#span_010718">,</span>
                        <a data-type="index:locator" href="#ch20-idp43785920" external="false" id="a_001446" smilref="Programming_Robots_with_ROS00034.smil#a_001446">Parameters: rosparam</a>
                      </li>
                      <li data-type="index-term" id="li_000869">
                        <span class="text" id="span_010719" smilref="Programming_Robots_with_ROS00034.smil#span_010719">and rostopic</span>
                        <span class="text" id="span_010720" smilref="Programming_Robots_with_ROS00034.smil#span_010720">,</span>
                        <a data-type="index:locator" href="#ch08-idp23920176" external="false" id="a_001447" smilref="Programming_Robots_with_ROS00034.smil#a_001447">Motion Generator</a>
                      </li>
                      <li data-type="index-term" id="li_000870">
                        <span class="text" id="span_010721" smilref="Programming_Robots_with_ROS00034.smil#span_010721">and rostopic pub</span>
                        <span class="text" id="span_010722" smilref="Programming_Robots_with_ROS00034.smil#span_010722">,</span>
                        <a data-type="index:locator" href="#ch20-idp44874944" external="false" id="a_001448" smilref="Programming_Robots_with_ROS00034.smil#a_001448">Introspection: rosnode, rostopic, rosmsg, rosservice, and rossrv</a>
                      </li>
                      <li data-type="index-term" id="li_000871">
                        <span class="text" id="span_010723" smilref="Programming_Robots_with_ROS00034.smil#span_010723">for parameter values</span>
                        <span class="text" id="span_010724" smilref="Programming_Robots_with_ROS00034.smil#span_010724">,</span>
                        <a data-type="index:locator" href="#ch20-idp43785920" external="false" id="a_001449" smilref="Programming_Robots_with_ROS00034.smil#a_001449">Parameters: rosparam</a>
                      </li>
                    </list>
                  </li>
                  <li data-type="index-term" id="li_000872">
                    <span class="text" id="span_010725" smilref="Programming_Robots_with_ROS00034.smil#span_010725">yaw rate</span>
                    <span class="text" id="span_010726" smilref="Programming_Robots_with_ROS00034.smil#span_010726">,</span>
                    <a data-type="index:locator" href="#ch08-idp22642160" external="false" id="a_001450" smilref="Programming_Robots_with_ROS00034.smil#a_001450">Teleop-bot</a>
                  </li>
                </list>
              </div>
            </div>
          </div>
        </section>
      </level1>
      <level1 id="colophon01">
        <section xmlns:epub="http://www.idpf.org/2007/ops" class="abouttheauthor" data-type="colophon" epub:type="colophon" data-pdf-bookmark="About the Authors" id="section_000241">
          <h1 id="h1_000568" smilref="Programming_Robots_with_ROS00034.smil#h1_000568">About the Authors</h1>
          <div class="colophon" id="colophon01-idp46862432">
            <p id="p_001693">
              <strong id="strong_000273" smilref="Programming_Robots_with_ROS00034.smil#strong_000273">Morgan Quigley</strong>
              <span class="text" id="span_010727" smilref="Programming_Robots_with_ROS00034.smil#span_010727">is a cofounder of the Open Source Robotics Foundation (OSRF), which develops and maintains the Robot Operating System (ROS). He came to OSRF after receiving a PhD in computer science at Stanford University, where he created one of the ancestors of ROS as part of the Stanford AI Robot (STAIR) project in 2006 and 2007. As it became clear that the future of robotics software was in collaborative development, this effort led him to cofound the ROS project with many other engineers. His research interests include robot software systems, open source software and firmware, embedded systems design, mechatronics, and sensor design.</span>
            </p>
            <p id="p_001694">
              <strong id="strong_000274" smilref="Programming_Robots_with_ROS00034.smil#strong_000274">Brian Gerkey</strong>
              <span class="text" id="span_010728" smilref="Programming_Robots_with_ROS00034.smil#span_010728">is cofounder and CEO of OSRF. Prior to joining OSRF, Brian was Director of Open Source Development at Willow Garage. Previously, Brian was a Computer Scientist in the Artificial Intelligence Center at SRI, and before that, a postdoctoral research fellow in the Artificial Intelligence Lab at Stanford University. Brian received his PhD in computer science from the University of Southern California (USC) in 2003, his MS in computer science from USC in 2000, and his BSE in computer engineering, with a secondary major in mathematics and a minor in robotics and automation, from Tulane University in 1998. Since 2008, Brian has worked on the ROS Project, which develops and releases one of the most widely used robot software platforms in robotics research and education (and soon industry). He is founding and former lead developer on the open source Player Project, which continues to maintain widely used robot simulation and development tools.</span>
            </p>
            <p id="p_001695">
              <strong id="strong_000275" smilref="Programming_Robots_with_ROS00034.smil#strong_000275">Bill Smart</strong>
              <span class="text" id="span_010729" smilref="Programming_Robots_with_ROS00034.smil#span_010729">is an associate professor at Oregon State University, where he codirects the Robotics program. His research interests span the areas of mobile robotics, machine learning, human-robot interaction, and the interaction between robotics and the law. Bill has been writing software for robots for over two decades, and doing active research and development of robot software architectures for over 15 years. At Oregon State University, he codirects the Robotics program and teaches classes in robotics and computer programming at both the undergraduate and graduate levels. He has been a ROS user since the beginning and was involved in some of the early planning workshops for the system. In 2010-11, he spent a 15-month sabbatical at Willow Garage, developing software for PR2 robots and enjoying the weather in California.</span>
            </p>
          </div>
        </section>
      </level1>
      <level1 id="colophon02">
        <section xmlns:epub="http://www.idpf.org/2007/ops" class="pagebreak-before" data-type="colophon" epub:type="colophon" data-pdf-bookmark="Colophon" id="section_000242">
          <h1 id="h1_000569" smilref="Programming_Robots_with_ROS00034.smil#h1_000569">Colophon</h1>
          <div class="colophon" id="colophon02-colophon">
            <p id="p_001696">
              <span class="text" id="span_010730" smilref="Programming_Robots_with_ROS00034.smil#span_010730">The animal on the cover of</span>
              <em id="em_000507" smilref="Programming_Robots_with_ROS00034.smil#em_000507">Programming Robots with ROS</em>
              <span class="text" id="span_010731" smilref="Programming_Robots_with_ROS00034.smil#span_010731">is a Salim Ali's fruit bat (</span>
              <em id="em_000508" smilref="Programming_Robots_with_ROS00034.smil#em_000508">Latidens salimalii</em>
              <span class="text" id="span_010732" smilref="Programming_Robots_with_ROS00034.smil#span_010732">). Named after the famed Indian ornithologist, the Salim Ali's fruit bat remains a rare species about which little is known, more than 60 years since it was first collected and mistaken for a short-nosed fruit bat. Confined to rainforests at the southern tip of the Indian Peninsula, in the vicinity of the Western Ghats mountain range that runs along the Arabian Sea, the Salim Ali's fruit bat is one of the more endangered species in a region acknowledged as one of the world's most biodiverse.</span>
            </p>
            <p id="p_001697">
              <span class="text" id="span_010733" smilref="Programming_Robots_with_ROS00034.smil#span_010733">Members of the megabat suborder to which fruit bats belong do not feed on insects. Rather, they use long tongues to slurp out the nectar of flowers, or use specially adapted teeth to bite into fruit, from which they often drink only the juice. The consequence of the fruit bat's frequent interaction with flowers is a mutually beneficial relationship known as</span>
              <em id="em_000509" smilref="Programming_Robots_with_ROS00034.smil#em_000509">chiropterophily</em>
              <span class="text" id="span_010734" smilref="Programming_Robots_with_ROS00034.smil#span_010734">, in which the flowers rely on herbivorous bats to carry pollen from one flower to another. The megabat's consumption of fruit--primarily figs or the fruit of the bead tree, in the case of the Salim Ali's fruit bat--also perform the function of dispersing seeds.</span>
            </p>
            <p id="p_001698" smilref="Programming_Robots_with_ROS00034.smil#p_001698">By mechanisms that are not clear, the fruit bat's herbivorous nature has deprived almost all members of the Megachiroptera suborder of the ability to use echolocation. It is possible, according to some research, that the economy of energy achieved by insectivorous bats, whose flight activities also seem to physiologically prepare the bat for the vocalizations that act like submarine pings in echolocation, is not as easily realized by the heartier-meal-eating and generally bigger fruit bats. The megabats' larger eyes and keener sense of smell appear to compensate.</p>
            <p id="p_001699" smilref="Programming_Robots_with_ROS00034.smil#p_001699">The last 25 years of the Salim Ali fruit bat's history have seen its status as a species threatened by extinction change from "rare" to "critically endangered" to the more optimistic "endangered." Research has indicated that there is a greater population and range than was previously recorded, and efforts have been made to discourage the private owners of the land on which the bat maintains roosts from hunting it as a pest or for its rumored medicinal value. However, the outlook for the survival of the species is still not bright, as humans continue to encroach on and fragment its primary habitat.</p>
            <p id="p_001700">
              <span class="text" id="span_010735" smilref="Programming_Robots_with_ROS00034.smil#span_010735">Many of the animals on O'Reilly covers are endangered; all of them are important to the world. To learn more about how you can help, go to</span>
              <a href="http://animals.oreilly.com" external="true" id="a_001451">
                <em id="em_000510" smilref="Programming_Robots_with_ROS00034.smil#em_000510">animals.oreilly.com</em>
              </a>
              <span class="text" id="span_010736" smilref="Programming_Robots_with_ROS00034.smil#span_010736">.</span>
            </p>
            <p id="p_001701">
              <span class="text" id="span_010737" smilref="Programming_Robots_with_ROS00034.smil#span_010737">The cover image is from Cassell's</span>
              <em id="em_000511" smilref="Programming_Robots_with_ROS00034.smil#em_000511">Natural History</em>
              <span class="text" id="span_010738" smilref="Programming_Robots_with_ROS00034.smil#span_010738">. The cover fonts are URW Typewriter and Guardian Sans. The text font is Adobe Minion Pro; the heading font is Adobe Myriad Condensed; and the code font is Dalton Maag's Ubuntu Mono.</span>
            </p>
          </div>
        </section>
      </level1>
    </bodymatter>
  </book>
</dtbook>
